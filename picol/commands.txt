 != a b -> z (integer compare: returns 0 or 1)
 % a b -> z (integer modulo: a%b)
 * args... -> z (multiply integers; 1 if none)
 + args... -> z (add integers; 0 if none)
 - a b -> z (subtract: a-b)
 / a b -> z (integer division: a/b)
 9chain command args.... (does not return unless error)
 9chgdir filepath which_dir (which_dir: 1=working, 4=execute)
 9close fd
 9create filepath access_mode attrs -> fd (access_mode: 2=write 3=update)
 9delete filepath
 9dup fd -> new_fd
 9filesize fd -> size (error if 64K or bigger)
 9fork ?-mX? command args.... -> child_id (option: -m8 for 8 ram blocks; -m8K for 8K ram)
 9makdir filepath mode
 9open filepath access_mode -> fd (access_mode: 1=read 2=write 3=update)
 9wait child_id_var exit_status_var (name two variables to receive results)
 < a b -> z (integer compare: returns 0 or 1)
 << a b -> z (shift left: a<<b)
 <= a b -> z (integer compare: returns 0 or 1)
 == a b -> z (integer compare: returns 0 or 1)
 > a b -> z (integer compare: returns 0 or 1)
 >= a b -> z (integer compare: returns 0 or 1)
 >> a b -> z (shift right, signed: a>>b)
 >>> a b -> z (shift right, unsigned: a>>b)
 and {cond1} {cond2}... -> first_false_or_one (stop evaluating if one is false)
 append varname ?items...?
 bitand a b -> z (bitwise and: a&b)
 bitor a b -> z (bitwise or: a|b)
 bitxor a b -> z (bitwise xor: x^b)
 catch body ?varname? -> code (result value put in varname; code 0 is no error)
 eq a b -> z (string compare: a==b; returns 0 or 1)
 eval args... -> result (args are joined with spaces)
 exit ?status? (does not return.  0 is good status, 1..255 are bad)
 explode str -> list_of_numbers (numbers are ascii values)
 foreach var list body (assign each list item to var and execute body)
 ge a b -> z (string compare: a>=b; returns 0 or 1)
 gets fd varname -> num_bytes_read (puts value read in varname)
 gt a b -> z (string compare: a>b; returns 0 or 1)
 if {cond} {body_if_true} ?else {body_if_else}?
 implode list_of_numbers -> str (numbers are ascii values)
 incr varname ?value?
 info   (prints lots of info about interpreter state)
 kill processid ?signal_code?
 lappend varname ?items...?
 le a b -> z (string compare: a<=b; returns 0 or 1)
 lindex list index -> item (return item at that index)
 list ?items...?
 llength list -> length
 lrange list first last -> sublist (return sublit range from first to last inclusive)
 lt a b -> z (string compare: a<b; returns 0 or 1)
 ne a b -> z (string compare: a!=b; returns 0 or 1)
 or {cond1} {cond2}... -> first_true_or_zero (stop evaluating if one is true)
 proc name varlist body (defines a new proc)
 puts ?-nonewline? ?fd? str (write str to fd, default is stdout)
 read fd num_bytes -> list_of_numbers (numbers are byte values)
 return ?value?   (returns from proc with given value or empty)
 set varname ?value? (if value not provided, returns value of variable)
 sindex str index -> substr (return 1-char substring at that index)
 sleep num_ticks
 slength str -> length
 slower str -> newstr (convert str to ASCII lowercase)
 smatch pattern str -> 1 or 0 (`*` for any string, `?` for any char, `[...]` for char range)
 source filepath (read and execute the script; 16K max}
 srange str first last -> substr (return substring range from first to last inclusive)
 sregexp pattern str -> position or -1 (Most basic patterns are supported. see re.h for documentation)
 supper str -> newstr (convert str to ASCII uppercase)
 while {cond} {body} (cond evaluates to 0 for false, other int for true)
