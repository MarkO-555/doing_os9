                      (/home/strick/6809):00001         ********************************************************************
                      (/home/strick/6809):00002         * krn - NitrOS-9 Level 2 Kernel
                      (/home/strick/6809):00003         *
                      (/home/strick/6809):00004         * $Id$
                      (/home/strick/6809):00005         *
                      (/home/strick/6809):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/home/strick/6809):00007         * Comment
                      (/home/strick/6809):00008         * ------------------------------------------------------------------
                      (/home/strick/6809):00009         *  19r6    2002/08/21  Boisy G. Pitre
                      (/home/strick/6809):00010         * Assembles to the os9p1 module that works on my NitrOS-9 system.
                      (/home/strick/6809):00011         *
                      (/home/strick/6809):00012         *  19r7    2002/09/26  Boisy G. Pitre
                      (/home/strick/6809):00013         * Added check for CRC feature bit in init module
                      (/home/strick/6809):00014         *
                      (/home/strick/6809):00015         *  19r8    2003/09/22  Boisy G. Pitre
                      (/home/strick/6809):00016         * Back-ported to OS-9 Level Two.
                      (/home/strick/6809):00017         *
                      (/home/strick/6809):00018         *  19r8    2004/05/22  Boisy G. Pitre
                      (/home/strick/6809):00019         * Renamed to 'krn'
                      (/home/strick/6809):00020         *
                      (/home/strick/6809):00021         *  19r9    2004/07/12  Boisy G. Pitre
                      (/home/strick/6809):00022         * F$SRqMem now properly scans the DAT images of the system to update
                      (/home/strick/6809):00023         * the D.SysMem map.
                      (/home/strick/6809):00024                         
                      (/home/strick/6809):00025                 nam     krn
                      (/home/strick/6809):00026                 ttl     NitrOS-9 Level 2 Kernel
                      (/home/strick/6809):00027                         
                      (/home/strick/6809):00028                 IFP1    
                      (/home/strick/6809):00029                 use     defsfile
                      (         defsfile):00001                  use   ../../defsfile
     0003             (   ../../defsfile):00001         Level    equ   3
                      (   ../../defsfile):00002         
                      (   ../../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
                      (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
     0080             (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
     00FE             (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0004                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
002A                  (            os9.d):00820         DefIOSiz       EQU       12
002A                  (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
002A                  (            os9.d):00824         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00832         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00835         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00849                        RMB       $40-.               unused
002A                  (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
002A                  (            os9.d):00855         SysState       EQU       %10000000
002A                  (            os9.d):00856         TimSleep       EQU       %01000000
002A                  (            os9.d):00857         TimOut         EQU       %00100000
002A                  (            os9.d):00858         ImgChg         EQU       %00010000
002A                  (            os9.d):00859         Condem         EQU       %00000010
002A                  (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
     0010             (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0000                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00877         P$User         RMB       2                   User Index
000A                  (            os9.d):00878         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00879         P$Age          RMB       1                   Age
000C                  (            os9.d):00880         P$State        RMB       1                   Status
000D                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00892                        RMB       $20-.               unused
0020                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00905         P$Alarm        RMB       6
00C9                  (            os9.d):00906                        RMB       $200-.              Local stack
     0200             (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
     0080             (            os9.d):00913         SysState       EQU       %10000000
     0040             (            os9.d):00914         TimSleep       EQU       %01000000
     0020             (            os9.d):00915         TimOut         EQU       %00100000
     0010             (            os9.d):00916         ImgChg         EQU       %00010000
     0008             (            os9.d):00917         Suspend        EQU       %00001000
     0002             (            os9.d):00918         Condem         EQU       %00000010
     0001             (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     000D             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     000B             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
     0003             (            os9.d):01040         R$E            EQU       3                   E Accumulator
     0004             (            os9.d):01041         R$F            EQU       4                   F Accumulator
     0003             (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
     0001             (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
     0005             (            os9.d):01044         R$DP           EQU       5                   Direct Page register
     0006             (            os9.d):01045         R$X            EQU       6                   X Index register
     0008             (            os9.d):01046         R$Y            EQU       8                   Y Index register
     000A             (            os9.d):01047         R$U            EQU       10                  User Stack register
     000C             (            os9.d):01048         R$PC           EQU       12                  Program Counter register
     000E             (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
0005                  (            os9.d):01051         R$DP           EQU       3                   Direct Page register
0005                  (            os9.d):01052         R$X            EQU       4                   X Index register
0005                  (            os9.d):01053         R$Y            EQU       6                   Y Index register
0005                  (            os9.d):01054         R$U            EQU       8                   User Stack register
0005                  (            os9.d):01055         R$PC           EQU       10                  Program Counter register
0005                  (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
00FF                  (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
00FF                  (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
     003B             (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
     ED00             (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
     2000             (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
     0040             (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
     0002             (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
     6000             (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
     0660             (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
     0661             (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (   ../../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
                      (            scf.d):00222         
                      (            scf.d):00223         * PD.BAU definitions
                      (            scf.d):00224         *
                      (            scf.d):00225         * Baud rate
     0000             (            scf.d):00226         B110           EQU       %00000000
     0001             (            scf.d):00227         B300           EQU       %00000001
     0002             (            scf.d):00228         B600           EQU       %00000010
     0003             (            scf.d):00229         B1200          EQU       %00000011
     0004             (            scf.d):00230         B2400          EQU       %00000100
     0005             (            scf.d):00231         B4800          EQU       %00000101
     0006             (            scf.d):00232         B9600          EQU       %00000110
     0007             (            scf.d):00233         B19200         EQU       %00000111
     0008             (            scf.d):00234         B38400         EQU       %00001000
     0009             (            scf.d):00235         B57600         EQU       %00001001
     000A             (            scf.d):00236         B115200        EQU       %00001010
                      (            scf.d):00237         * Word size
     0000             (            scf.d):00238         WORD8          EQU       %00000000
     0020             (            scf.d):00239         WORD7          EQU       %00100000
                      (            scf.d):00240         * Stop bits
     0000             (            scf.d):00241         STOP1          EQU       %00000000
     0010             (            scf.d):00242         STOP2          EQU       %00010000
                      (            scf.d):00243         
                      (            scf.d):00244                        ENDC      
                      (   ../../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (   ../../defsfile):00006                  use   coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         *************************************************
                      (           coco.d):00148         *
                      (           coco.d):00149         * NitrOS-9 Level 1 Section
                      (           coco.d):00150         *
                      (           coco.d):00151         *************************************************
                      (           coco.d):00152         
0004                  (           coco.d):00153         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE      
                      (           coco.d):00156         
                      (           coco.d):00157         *************************************************
                      (           coco.d):00158         *
                      (           coco.d):00159         * NitrOS-9 Level 2 Section
                      (           coco.d):00160         *
                      (           coco.d):00161         *************************************************
                      (           coco.d):00162         
                      (           coco.d):00163         ****************************************
                      (           coco.d):00164         * Dynamic Address Translator Definitions
                      (           coco.d):00165         *
     0008             (           coco.d):00166         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00167         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00168         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00169         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00170         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00171         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00172         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00173         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00174         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00175         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00176         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00177         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00178         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00179         IOBlock        EQU       $3F
     003F             (           coco.d):00180         ROMBlock       EQU       $3F
     007F             (           coco.d):00181         IOAddr         EQU       $7F
     0001             (           coco.d):00182         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00183         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00184         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00185         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00186         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00187         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00188         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00189         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00190         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00191         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00192         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00193         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00194         
                      (           coco.d):00195         ***************************
                      (           coco.d):00196         * Color Computer 3 Specific
                      (           coco.d):00197         *
     0001             (           coco.d):00198         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00199         
                      (           coco.d):00200         ********************
                      (           coco.d):00201         * Hardware addresses
                      (           coco.d):00202         *
     FF00             (           coco.d):00203         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00204         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00205         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00206         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00207         
     0007             (           coco.d):00208         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00209         
                      (           coco.d):00210                        ENDC
                      (           coco.d):00211                        
                      (           coco.d):00212                        ENDC      
                      (           coco.d):00213         
                      (   ../../defsfile):00007                  use   cocovtio.d
                      (       cocovtio.d):00001                        IFNE      COCOVTIO.D-1
     0001             (       cocovtio.d):00002         COCOVTIO.D     SET       1
                      (       cocovtio.d):00003         
                      (       cocovtio.d):00004                        IFEQ      Level-1
                      (       cocovtio.d):00005         
                      (       cocovtio.d):00006         ********************************************************************
                      (       cocovtio.d):00007         * VTIODefs - Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00008         *
                      (       cocovtio.d):00009         * $Id$
                      (       cocovtio.d):00010         *
                      (       cocovtio.d):00011         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00012         * Comment
                      (       cocovtio.d):00013         * ------------------------------------------------------------------
                      (       cocovtio.d):00014         *          2004/11/29  P.Harvey-Smith.
                      (       cocovtio.d):00015         * Added symbolic defines for bits in V.CoLoad.
                      (       cocovtio.d):00016         *
                      (       cocovtio.d):00017         *          2004/12/02  P.Harvey-Smith.
                      (       cocovtio.d):00018         * Moved over all variables from co51.asm
                      (       cocovtio.d):00019         *
                      (       cocovtio.d):00020         *          2005/04/09  P.Harvey-Smith.
                      (       cocovtio.d):00021         * Decoded rest of the CoHR memory locations.
                      (       cocovtio.d):00022         *
                      (       cocovtio.d):00023         *              2005/04/24  P.Harvey-Smith.
                      (       cocovtio.d):00024         * Added variables for cursor flash, currently only implemented in co51
                      (       cocovtio.d):00025         *
                      (       cocovtio.d):00026                        NAM       VTIODefs  
                      (       cocovtio.d):00027                        TTL       Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00028         
                      (       cocovtio.d):00029         ********************
                      (       cocovtio.d):00030         * VTIO Static Memory
                      (       cocovtio.d):00031         *
                      (       cocovtio.d):00032                        ORG       V.SCF
0004                  (       cocovtio.d):00033         V.ScrnA        RMB       2                   (2) screen start address in system memory
0004                  (       cocovtio.d):00034         V.ScrnE        RMB       2                   (2) address of end of screen
0004                  (       cocovtio.d):00035         V.CrsrA        RMB       1                   (2) cursor address
0004                  (       cocovtio.d):00036         V.CrsAL        RMB       1                   cursor address low
0004                  (       cocovtio.d):00037         V.CChar        RMB       1                   value of character under cursor
0004                  (       cocovtio.d):00038         V.Mode         RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0004                  (       cocovtio.d):00039         V.NGChr        RMB       1                   number of additional characters to get
0004                  (       cocovtio.d):00040         V.RTAdd        RMB       2                   (2) return address after getting characters
0004                  (       cocovtio.d):00041         V.NChar        RMB       1                   character to process
0004                  (       cocovtio.d):00042         V.NChr2        RMB       1                   and the next one
                      (       cocovtio.d):00043                        RMB       1
0004                  (       cocovtio.d):00044         V.Chr1         RMB       1                   same as under cursor character
0004                  (       cocovtio.d):00045         V.CColr        RMB       1                   cursor color
0004                  (       cocovtio.d):00046         V.Col          RMB       1                   number of columns for this screen
0004                  (       cocovtio.d):00047         V.Row          RMB       1                   number of rows
0004                  (       cocovtio.d):00048         V.Alpha        RMB       1                   0 when in alpha mode
0004                  (       cocovtio.d):00049         V.PIA1         RMB       1                   PIA1Base value
0004                  (       cocovtio.d):00050         V.Rdy          RMB       1                   device ready (see SS.DStat 0=not ready)
0004                  (       cocovtio.d):00051         V.CFlg1        RMB       1                   VDG display code values
0004                  (       cocovtio.d):00052         V.SBAdd        RMB       2                   (2) address of block screen is in
0004                  (       cocovtio.d):00053         V.GBuff        RMB       2                   allocation for graphics buffers (block#)
0004                  (       cocovtio.d):00054         V.AGBuf        RMB       4                   (2) additional graphics buffer
0004                  (       cocovtio.d):00055         V.FFMem        RMB       2                   Flood fill alloc'ed mem
0004                  (       cocovtio.d):00056         V.FFSPt        RMB       2                   Flood fill current stack pointer
0004                  (       cocovtio.d):00057         V.FFSTp        RMB       1                   Flood fill stack top
0004                  (       cocovtio.d):00058         V.FF6          RMB       1                   flood fill flag
0004                  (       cocovtio.d):00059         V.FFFlag       RMB       1                   ??
0004                  (       cocovtio.d):00060         V.MTabl        RMB       2                   (2) address of mask table for pixels in byte
0004                  (       cocovtio.d):00061         V.PixBt        RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0004                  (       cocovtio.d):00062         V.GCrsX        RMB       1                   graphics cursor X value
0004                  (       cocovtio.d):00063         V.GCrsY        RMB       1                   graphics cursor Y
0004                  (       cocovtio.d):00064         V.Msk1         RMB       1                   mask byte 1
0004                  (       cocovtio.d):00065         V.Msk2         RMB       1                   mask byte 2 (00,55,AA,FF)
0004                  (       cocovtio.d):00066         V.MCol         RMB       1                   color? (C003,8001)
0004                  (       cocovtio.d):00067         V.4A           RMB       1
0004                  (       cocovtio.d):00068         V.PMask        RMB       1                   pixel mask for colors (i.e. $55, $CC etc)
0004                  (       cocovtio.d):00069         V.4C           RMB       1
0004                  (       cocovtio.d):00070         V.4D           RMB       1
0004                  (       cocovtio.d):00071         V.4E           RMB       1
0004                  (       cocovtio.d):00072         V.4F           RMB       1
0004                  (       cocovtio.d):00073         V.Caps         RMB       1                   caps lock info: $00=lower $FF=upper
0004                  (       cocovtio.d):00074         V.ClkCnt       RMB       1                   clock count ??
0004                  (       cocovtio.d):00075         V.WrChr        RMB       1                   character to write
0004                  (       cocovtio.d):00076         V.CurCo        RMB       1                   current CO-module in use
                      (       cocovtio.d):00077         * start of CoWP-specific static memory
0004                  (       cocovtio.d):00078         V.Co80X        RMB       1                   V.54
0004                  (       cocovtio.d):00079         V.Co80Y        RMB       1                   V.55
0004                  (       cocovtio.d):00080         V.ColPtr       RMB       1                   V.56
0004                  (       cocovtio.d):00081         V.RowPtr       RMB       1                   V.57
0004                  (       cocovtio.d):00082         V.C80X         RMB       1                   CoWP X position
0004                  (       cocovtio.d):00083         V.C80Y         RMB       1                   CoWP Y position
0004                  (       cocovtio.d):00084         V.Invers       RMB       1
                      (       cocovtio.d):00085         * end of CoWP-specific static memory
0004                  (       cocovtio.d):00086         V.DspVct       RMB       2                   vector to display screen
0004                  (       cocovtio.d):00087         V.CnvVct       RMB       2                   vector to X/Y to address conversion
0004                  (       cocovtio.d):00088         V.LKeyCd       RMB       1                   last key code
0004                  (       cocovtio.d):00089         V.2Key1        RMB       1                   2nd Key 1
0004                  (       cocovtio.d):00090         V.2Key2        RMB       1                   2nd Key 2
0004                  (       cocovtio.d):00091         V.2Key3        RMB       1                   2nd Key 3
0004                  (       cocovtio.d):00092         V.Key1         RMB       1                   Key 1
0004                  (       cocovtio.d):00093         V.Key2         RMB       1                   Key 2
0004                  (       cocovtio.d):00094         V.Key3         RMB       1                   Key 3
0004                  (       cocovtio.d):00095         V.ShftDn       RMB       1                   SHIFT/CTRL state
0004                  (       cocovtio.d):00096         V.CtrlDn       RMB       1                   CTRL key down
0004                  (       cocovtio.d):00097         V.KeyFlg       RMB       1                   key flag
0004                  (       cocovtio.d):00098         V.AltDwn       RMB       1                   ALT key down
0004                  (       cocovtio.d):00099         V.KySns        RMB       1                   key sense flags
0004                  (       cocovtio.d):00100         V.KySame       RMB       1                   key same as last flag
0004                  (       cocovtio.d):00101         V.KySnsF       RMB       1                   key sense flag
0004                  (       cocovtio.d):00102         V.Spcl         RMB       1
0004                  (       cocovtio.d):00103         V.KTblLC       RMB       1                   key table entry #
0004                  (       cocovtio.d):00104         V.6F           RMB       1                   ???
0004                  (       cocovtio.d):00105         V.COLoad       RMB       1                   CO-module loaded flags
0004                  (       cocovtio.d):00106         V.CFlag        RMB       1                   true lowercase flag $10=true, $00=false
0004                  (       cocovtio.d):00107         V.GrfDrvE      RMB       2                   GrfDrv entry point
0004                  (       cocovtio.d):00108         V.CoVDGE       RMB       2                   CoVDG entry point
0004                  (       cocovtio.d):00109         V.CoWPE        RMB       2                   CoWP entry point
0004                  (       cocovtio.d):00110         V.CoHRE        RMB       2                   CoHR entry point
                      (       cocovtio.d):00111         
0004                  (       cocovtio.d):00112         V.Flash        RMB       2                   Cursor flash routine address.
0004                  (       cocovtio.d):00113         v.FlashCount   RMB       1                   Cursor flash count
0004                  (       cocovtio.d):00114         V.NoFlash      RMB       1                   When this is non-zero do not flash cursor
                      (       cocovtio.d):00115         
                      (       cocovtio.d):00116         * CoHR vars
                      (       cocovtio.d):00117         
0004                  (       cocovtio.d):00118         V.51ScrnA      RMB       2                   * Screen address.
0004                  (       cocovtio.d):00119         V.51XPos       RMB       1                   * X co-ordinate
0004                  (       cocovtio.d):00120         V.51YPos       RMB       1                   * Y co-ordinate
0004                  (       cocovtio.d):00121         V.51EscSeq     RMB       1                   * In escape sequence
0004                  (       cocovtio.d):00122         V.51ReverseFlag RMB       1                   * Reverse video flag
0004                  (       cocovtio.d):00123         V.51UnderlineFlag RMB       1                   * Underline flag
0004                  (       cocovtio.d):00124         V.51CtrlDispatch RMB       2                   * Ctrl char dispatch address, currently processing
0004                  (       cocovtio.d):00125         V.51BytePixOffset RMB       1                   * byte offset in screen line, of character X position        
0004                  (       cocovtio.d):00126         V.51OldCursorPosX RMB       1                   * Position of old cursor before update        
0004                  (       cocovtio.d):00127         V.51OldCursorPosY RMB       1
0004                  (       cocovtio.d):00128         V.51CursorChanged RMB       1                   * Has cursor position changed ? 1=yes,0=no
0004                  (       cocovtio.d):00129         V.51CursorOn   RMB       1                   * Is cursor on ? 1=yes 0=no                         
0004                  (       cocovtio.d):00130         V.51XORFlag    RMB       1                   * and data to screen (0) or Xor (1)                       
0004                  (       cocovtio.d):00131         V.51ScreenMask1 RMB       1                   * screen masks for drawing characters on screen         
0004                  (       cocovtio.d):00132         V.51ScreenMask2 RMB       1
                      (       cocovtio.d):00133         * End of CoHR vars
                      (       cocovtio.d):00134         **** Note these have to come at the end of the defs, or the keyboard ****
                      (       cocovtio.d):00135         **** code can clobber variables defined after these !                ****
0004                  (       cocovtio.d):00136         V.IBufH        RMB       1                   input buffer head
0004                  (       cocovtio.d):00137         V.IBufT        RMB       1                   input buffer tail
0004                  (       cocovtio.d):00138         V.InBuf        RMB       1                   input buffer ptr
0004                  (       cocovtio.d):00139         V.51End        RMB       1
                      (       cocovtio.d):00140                        RMB       250-.
0004                  (       cocovtio.d):00141         V.Last         EQU       .
                      (       cocovtio.d):00142         
                      (       cocovtio.d):00143         
                      (       cocovtio.d):00144         * Unknown for now
                      (       cocovtio.d):00145         *VD.FFMem rmb   2  (2) bottom of stack for flood fill
                      (       cocovtio.d):00146         *VD.FFSPt rmb   2  (2) flood fill stack pointer
                      (       cocovtio.d):00147         *VD.FFSTp rmb   2  (2) flood fill stack top pointer
                      (       cocovtio.d):00148         *VD.FF6   rmb   1   flood fill flag
                      (       cocovtio.d):00149         *VD.MCol2 rmb   1  color
                      (       cocovtio.d):00150         *VD.FF1   rmb   1  data for flood fill
                      (       cocovtio.d):00151         *VD.FF2   rmb   1  data for flood fill
                      (       cocovtio.d):00152         *VD.FFMsk rmb   1  flood fill mask
                      (       cocovtio.d):00153         *VD.FFFlg rmb   1  flood fill flag
                      (       cocovtio.d):00154         *VD.Palet rmb   16 (16) current palette values
                      (       cocovtio.d):00155         *VD.PlFlg rmb   1  initialized to $08 by L00DB, and then unused!
                      (       cocovtio.d):00156         
                      (       cocovtio.d):00157         *
                      (       cocovtio.d):00158         * Defs for V.COLoad flags.
                      (       cocovtio.d):00159         * 
                      (       cocovtio.d):00160         
0004                  (       cocovtio.d):00161         ModCoVDG       EQU       %00000010           CoVDG, Built-in VDG 32x16.
0004                  (       cocovtio.d):00162         ModCoWP        EQU       %00000100           CoWP, WordPak, 80x25
0004                  (       cocovtio.d):00163         ModCoHR        EQU       %00001000           CoHR, PMODE 4 51x25 text
                      (       cocovtio.d):00164         
                      (       cocovtio.d):00165         *
                      (       cocovtio.d):00166         * Defs for cursor flash counter
                      (       cocovtio.d):00167         *
                      (       cocovtio.d):00168         
0004                  (       cocovtio.d):00169         CFlash50hz     EQU       25                  * 50Hz flash counter
0004                  (       cocovtio.d):00170         CFlash60Hz     EQU       30                  * 60Hz flash counter
                      (       cocovtio.d):00171         
                      (       cocovtio.d):00172                        ELSE
                      (       cocovtio.d):00173                        
                      (       cocovtio.d):00174         ********************************************************************
                      (       cocovtio.d):00175         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00176         *
                      (       cocovtio.d):00177         * $Id$
                      (       cocovtio.d):00178         *
                      (       cocovtio.d):00179         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00180         * Comment
                      (       cocovtio.d):00181         * ------------------------------------------------------------------
                      (       cocovtio.d):00182         *          2004/07/18  Boisy G. Pitre
                      (       cocovtio.d):00183         * Started from systype
                      (       cocovtio.d):00184         
                      (       cocovtio.d):00185                        NAM       VTIODefs
                      (       cocovtio.d):00186                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00187         
                      (       cocovtio.d):00188         ****************
                      (       cocovtio.d):00189         * Window Devices
                      (       cocovtio.d):00190         *
                      (       cocovtio.d):00191                        ORG       $FF9F
FF9F                  (       cocovtio.d):00192         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (       cocovtio.d):00193         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (       cocovtio.d):00194         A.W1           RMB       1                   $FFA1
FFA2                  (       cocovtio.d):00195         A.W2           RMB       1                   $FFA2
FFA3                  (       cocovtio.d):00196         A.W3           RMB       1                   $FFA3
FFA4                  (       cocovtio.d):00197         A.W4           RMB       1                   $FFA4
FFA5                  (       cocovtio.d):00198         A.W5           RMB       1                   $FFA5
FFA6                  (       cocovtio.d):00199         A.W6           RMB       1                   $FFA6
FFA7                  (       cocovtio.d):00200         A.W7           RMB       1                   $FFA7
FFA8                  (       cocovtio.d):00201         A.W8           RMB       1                   $FFA8
FFA9                  (       cocovtio.d):00202         A.W9           RMB       1                   $FFA9
FFAA                  (       cocovtio.d):00203         A.W10          RMB       1                   $FFAA
FFAB                  (       cocovtio.d):00204         A.W11          RMB       1                   $FFAB
FFAC                  (       cocovtio.d):00205         A.W12          RMB       1                   $FFAC
FFAD                  (       cocovtio.d):00206         A.W13          RMB       1                   $FFAD
FFAE                  (       cocovtio.d):00207         A.W14          RMB       1                   $FFAE
FFAF                  (       cocovtio.d):00208         A.W15          RMB       1                   $FFAF
                      (       cocovtio.d):00209         
                      (       cocovtio.d):00210         **********************************
                      (       cocovtio.d):00211         * Pointer Device Packet Definition
                      (       cocovtio.d):00212         *
                      (       cocovtio.d):00213                        ORG       0
0000                  (       cocovtio.d):00214         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (       cocovtio.d):00215         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (       cocovtio.d):00216         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (       cocovtio.d):00217                        RMB       2                   reserved
0005                  (       cocovtio.d):00218         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (       cocovtio.d):00219         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (       cocovtio.d):00220         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (       cocovtio.d):00221         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (       cocovtio.d):00222         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (       cocovtio.d):00223         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (       cocovtio.d):00224         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (       cocovtio.d):00225         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (       cocovtio.d):00226         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (       cocovtio.d):00227         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (       cocovtio.d):00228                        RMB       2                   Reserved
0012                  (       cocovtio.d):00229         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (       cocovtio.d):00230         Pt.BDY         RMB       2                   Button down Y value
0016                  (       cocovtio.d):00231         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (       cocovtio.d):00232         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (       cocovtio.d):00233         Pt.AcX         RMB       2                   Actual X Value
001A                  (       cocovtio.d):00234         Pt.AcY         RMB       2                   Actual Y Value
001C                  (       cocovtio.d):00235         Pt.WRX         RMB       2                   Window Relative X
001E                  (       cocovtio.d):00236         Pt.WRY         RMB       2                   Window Relative Y
     0020             (       cocovtio.d):00237         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (       cocovtio.d):00238         
                      (       cocovtio.d):00239         **************************
                      (       cocovtio.d):00240         * window regions for mouse
                      (       cocovtio.d):00241         *
     0000             (       cocovtio.d):00242         WR.Cntnt       EQU       0                   content region
     0001             (       cocovtio.d):00243         WR.Cntrl       EQU       1                   control region
     0002             (       cocovtio.d):00244         WR.OfWin       EQU       2                   off window
                      (       cocovtio.d):00245         
                      (       cocovtio.d):00246         *************************************
                      (       cocovtio.d):00247         * Standard system get/put buffer defs
                      (       cocovtio.d):00248         *
                      (       cocovtio.d):00249         *
                      (       cocovtio.d):00250         * system group numbers
                      (       cocovtio.d):00251         *
                      (       cocovtio.d):00252                        ORG       200
00C8                  (       cocovtio.d):00253         Grp.Fnt        RMB       1                   font group
00C9                  (       cocovtio.d):00254         Grp.Clip       RMB       1                   clipboard group
00CA                  (       cocovtio.d):00255         Grp.Ptr        RMB       1                   pointer group
00CB                  (       cocovtio.d):00256         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (       cocovtio.d):00257         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (       cocovtio.d):00258         Grp.Pat6       RMB       1                   pattern group 16 color
                      (       cocovtio.d):00259         *
                      (       cocovtio.d):00260         * font buffer numbers
                      (       cocovtio.d):00261         *
                      (       cocovtio.d):00262                        ORG       1
0001                  (       cocovtio.d):00263         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (       cocovtio.d):00264         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (       cocovtio.d):00265         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (       cocovtio.d):00266         *
                      (       cocovtio.d):00267         * pattern buffer numbers
                      (       cocovtio.d):00268         *
                      (       cocovtio.d):00269                        ORG       1
0001                  (       cocovtio.d):00270         Pat.Dot        RMB       1
0002                  (       cocovtio.d):00271         Pat.Vrt        RMB       1
0003                  (       cocovtio.d):00272         Pat.Hrz        RMB       1
0004                  (       cocovtio.d):00273         Pat.XHtc       RMB       1
0005                  (       cocovtio.d):00274         Pat.LSnt       RMB       1
0006                  (       cocovtio.d):00275         Pat.RSnt       RMB       1
0007                  (       cocovtio.d):00276         Pat.SDot       RMB       1
0008                  (       cocovtio.d):00277         Pat.BDot       RMB       1
                      (       cocovtio.d):00278         *
                      (       cocovtio.d):00279         * pointer buffer numbers
                      (       cocovtio.d):00280         *
                      (       cocovtio.d):00281                        ORG       1
0001                  (       cocovtio.d):00282         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (       cocovtio.d):00283         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (       cocovtio.d):00284         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (       cocovtio.d):00285         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (       cocovtio.d):00286         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (       cocovtio.d):00287         Ptr.Txt        RMB       1                   Text pointer
0007                  (       cocovtio.d):00288         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (       cocovtio.d):00289         
                      (       cocovtio.d):00290         **********************
                      (       cocovtio.d):00291         * KeyDrv Entry Points
                      (       cocovtio.d):00292                        ORG       0
0000                  (       cocovtio.d):00293         K$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00294         K$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00295         K$FnKey        RMB       3                   get function key states
0009                  (       cocovtio.d):00296         K$RdKey        RMB       3                   get key states
                      (       cocovtio.d):00297         
                      (       cocovtio.d):00298         **********************
                      (       cocovtio.d):00299         * JoyDrv Entry Points
                      (       cocovtio.d):00300                        ORG       0
0000                  (       cocovtio.d):00301         J$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00302         J$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00303         J$MsBtn        RMB       3                   get mouse button states
0009                  (       cocovtio.d):00304         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (       cocovtio.d):00305         J$JyBtn        RMB       3                   get joystick button states
000F                  (       cocovtio.d):00306         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00307         
                      (       cocovtio.d):00308         **********************
                      (       cocovtio.d):00309         * SndDrv Entry Points
                      (       cocovtio.d):00310                        ORG       0
0000                  (       cocovtio.d):00311         S$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00312         S$GetStt       RMB       3                   joystick termination
0006                  (       cocovtio.d):00313         S$SetStt       RMB       3                   joystick termination
0009                  (       cocovtio.d):00314         S$Term         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00315         
                      (       cocovtio.d):00316         ********************************
                      (       cocovtio.d):00317         * Window/Menu Bar Data Structure
                      (       cocovtio.d):00318         *
                      (       cocovtio.d):00319         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (       cocovtio.d):00320         * for use in the high level windowing package.
                      (       cocovtio.d):00321         *
     000A             (       cocovtio.d):00322         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (       cocovtio.d):00323         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (       cocovtio.d):00324         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (       cocovtio.d):00325         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (       cocovtio.d):00326         *
                      (       cocovtio.d):00327         * Menu Item Descriptor : (MN.ITEMS)
                      (       cocovtio.d):00328         * one required for each item within the menu
                      (       cocovtio.d):00329         *
                      (       cocovtio.d):00330                        ORG       0
0000                  (       cocovtio.d):00331         MI.TTL         RMB       MXTTLEN             item name
000F                  (       cocovtio.d):00332         MI.ENBL        RMB       1                   enable flag
0010                  (       cocovtio.d):00333         MI.RES         RMB       5                   reserved bytes
     0015             (       cocovtio.d):00334         MI.SIZ         EQU       .                   size of menu item descriptor
                      (       cocovtio.d):00335         *
                      (       cocovtio.d):00336         * Menu Descriptor :
                      (       cocovtio.d):00337         * one for each menu on the manu bar
                      (       cocovtio.d):00338         * each is pointed to by MB.MPTR below
                      (       cocovtio.d):00339         *
                      (       cocovtio.d):00340                        ORG       0
0000                  (       cocovtio.d):00341         MN.TTL         RMB       MXTTLEN             menu title
000F                  (       cocovtio.d):00342         MN.ID          RMB       1                   menu id number (1-255)
0010                  (       cocovtio.d):00343         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (       cocovtio.d):00344         MN.NITS        RMB       1                   number of items in menu
0012                  (       cocovtio.d):00345         MN.ENBL        RMB       1                   enable flag
0013                  (       cocovtio.d):00346         MN.RES         RMB       2                   reserved bytes
0015                  (       cocovtio.d):00347         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (       cocovtio.d):00348         MN.SIZ         EQU       .                   size of menu descriptor
                      (       cocovtio.d):00349         *
                      (       cocovtio.d):00350         * Window Descriptor:
                      (       cocovtio.d):00351         * one required for each application in a framed window
                      (       cocovtio.d):00352         *
                      (       cocovtio.d):00353                        ORG       0
0000                  (       cocovtio.d):00354         WN.TTL         RMB       20                  title of window for title bar
0014                  (       cocovtio.d):00355         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (       cocovtio.d):00356         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (       cocovtio.d):00357         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (       cocovtio.d):00358         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (       cocovtio.d):00359         WN.RES         RMB       7                   reserved bytes
0020                  (       cocovtio.d):00360         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (       cocovtio.d):00361         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (       cocovtio.d):00362         
                      (       cocovtio.d):00363         *************************
                      (       cocovtio.d):00364         * Window Type Definitions
                      (       cocovtio.d):00365         *
                      (       cocovtio.d):00366         * To be used in setting up the border of the window in
                      (       cocovtio.d):00367         * the SS.WnSel SETSTAT
                      (       cocovtio.d):00368         *
                      (       cocovtio.d):00369                        ORG       0
0000                  (       cocovtio.d):00370         WT.NBox        RMB       1                   No Box
0001                  (       cocovtio.d):00371         WT.FWin        RMB       1                   Framed Window
0002                  (       cocovtio.d):00372         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (       cocovtio.d):00373         WT.SBox        RMB       1                   Shadowed Box
0004                  (       cocovtio.d):00374         WT.DBox        RMB       1                   Double Box
0005                  (       cocovtio.d):00375         WT.PBox        RMB       1                   Plain Box
                      (       cocovtio.d):00376         
                      (       cocovtio.d):00377         *************************************
                      (       cocovtio.d):00378         * Pre-Defined Menu IDs for the system
                      (       cocovtio.d):00379         *
                      (       cocovtio.d):00380                        ORG       1
0001                  (       cocovtio.d):00381         MId.Mov        RMB       1                   move box
0002                  (       cocovtio.d):00382         MId.Cls        RMB       1                   close box
0003                  (       cocovtio.d):00383         MId.Grw        RMB       1                   grow box
0004                  (       cocovtio.d):00384         MId.SUp        RMB       1                   scroll up
0005                  (       cocovtio.d):00385         MId.SDn        RMB       1                   scroll down
0006                  (       cocovtio.d):00386         MId.SRt        RMB       1                   scroll right
0007                  (       cocovtio.d):00387         MId.SLt        RMB       1                   scroll left
0008                  (       cocovtio.d):00388         MId.Chr        RMB       1                   character was depressed
                      (       cocovtio.d):00389                        ORG       20
0014                  (       cocovtio.d):00390         MId.Tdy        RMB       1                   Tandy menu
0015                  (       cocovtio.d):00391         MId.Fil        RMB       1                   Files Menu
0016                  (       cocovtio.d):00392         MId.Edt        RMB       1                   Edit Menu
0017                  (       cocovtio.d):00393         MId.Sty        RMB       1                   Styles menu
0018                  (       cocovtio.d):00394         MId.Fnt        RMB       1                   Font menu
                      (       cocovtio.d):00395         
                      (       cocovtio.d):00396         
                      (       cocovtio.d):00397         ******************************************************************************
                      (       cocovtio.d):00398         ******************************************************************************
                      (       cocovtio.d):00399         **                                                                          **
                      (       cocovtio.d):00400         ** NitrOS-9 Windowing system Global data definitions                        **
                      (       cocovtio.d):00401         **                                                                          **
                      (       cocovtio.d):00402         ******************************************************************************
                      (       cocovtio.d):00403         ******************************************************************************
                      (       cocovtio.d):00404         **                                                                          **
                      (       cocovtio.d):00405         ** System memory block 0 layout:                                            **
                      (       cocovtio.d):00406         **                                                                          **
                      (       cocovtio.d):00407         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (       cocovtio.d):00408         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (       cocovtio.d):00409         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (       cocovtio.d):00410         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (       cocovtio.d):00411         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (       cocovtio.d):00412         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (       cocovtio.d):00413         ** $0010-$001F : unused (User definable)                                    **
                      (       cocovtio.d):00414         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (       cocovtio.d):00415         ** $0100-$011F : Task usage table                                           **
                      (       cocovtio.d):00416         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (       cocovtio.d):00417         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (       cocovtio.d):00418         ** $0300-$03FF : system's system call dispatch table                        **
                      (       cocovtio.d):00419         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (       cocovtio.d):00420         ** $0500-$05FF : process descriptor pointer table                           **
                      (       cocovtio.d):00421         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (       cocovtio.d):00422         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (       cocovtio.d):00423         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (       cocovtio.d):00424         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (       cocovtio.d):00425         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (       cocovtio.d):00426         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (       cocovtio.d):00427         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (       cocovtio.d):00428         ** $1248-$127F : ????                                                       **
                      (       cocovtio.d):00429         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (       cocovtio.d):00430         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (       cocovtio.d):00431         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (       cocovtio.d):00432         **                                                                          **
                      (       cocovtio.d):00433         ******************************************************************************
                      (       cocovtio.d):00434         ******************************************************************************
                      (       cocovtio.d):00435         
                      (       cocovtio.d):00436         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (       cocovtio.d):00437         MaxLines       EQU       25                  Max. Y coord text value
     0000             (       cocovtio.d):00438         Meg            SET       false               "true" if 1 or 2 meg machine
                      (       cocovtio.d):00439         
     0000             (       cocovtio.d):00440         COMP           EQU       0                   composite monitor
     0001             (       cocovtio.d):00441         RGB            EQU       1                   RGB Analog monitor 
     0002             (       cocovtio.d):00442         MONO           EQU       2                   monochrome monitor
                      (       cocovtio.d):00443         
     0001             (       cocovtio.d):00444         Monitor        SET       RGB
                      (       cocovtio.d):00445         
                      (       cocovtio.d):00446         * Global definitions
     0001             (       cocovtio.d):00447         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (       cocovtio.d):00448         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (       cocovtio.d):00449         CapsLck        EQU       %00000100           Capslock enabled
     0280             (       cocovtio.d):00450         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (       cocovtio.d):00451                        IFEQ      MaxLines-25
     00C6             (       cocovtio.d):00452         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00453                        ELSE      
0019                  (       cocovtio.d):00454         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00455                        ENDC      
                      (       cocovtio.d):00456         
                      (       cocovtio.d):00457         *****************************************************************************
                      (       cocovtio.d):00458         * Static memory area for each window (VTIO/TC9IO)
                      (       cocovtio.d):00459         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (       cocovtio.d):00460         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (       cocovtio.d):00461         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (       cocovtio.d):00462         * May have to have smaller limit for text to gfx screens, as it will run much
                      (       cocovtio.d):00463         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (       cocovtio.d):00464         *
                      (       cocovtio.d):00465         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (       cocovtio.d):00466         * V.SCF is to be resolved properly in pass 1!!
                      (       cocovtio.d):00467                        ORG       V.SCF
001D                  (       cocovtio.d):00468         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (       cocovtio.d):00469         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (       cocovtio.d):00470         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (       cocovtio.d):00471         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (       cocovtio.d):00472         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (       cocovtio.d):00473         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (       cocovtio.d):00474         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (       cocovtio.d):00475         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (       cocovtio.d):00476         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (       cocovtio.d):00477         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (       cocovtio.d):00478         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (       cocovtio.d):00479         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (       cocovtio.d):00480                        RMB       1                   unused                                       $2A
002B                  (       cocovtio.d):00481         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (       cocovtio.d):00482         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (       cocovtio.d):00483         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (       cocovtio.d):00484         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (       cocovtio.d):00485         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (       cocovtio.d):00486         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (       cocovtio.d):00487         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (       cocovtio.d):00488         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (       cocovtio.d):00489         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (       cocovtio.d):00490         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (       cocovtio.d):00491         CC3Parm        RMB       128-.               global parameter area
0080                  (       cocovtio.d):00492         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (       cocovtio.d):00493         CC3DSiz        EQU       .
                      (       cocovtio.d):00494         
                      (       cocovtio.d):00495         *****************************************************************************
                      (       cocovtio.d):00496         * GrfInt/WindInt global memory area
                      (       cocovtio.d):00497         * This area sits in system block 0 from $1000 to $10ff
     1000             (       cocovtio.d):00498         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (       cocovtio.d):00499                        ORG       0
0000                  (       cocovtio.d):00500         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (       cocovtio.d):00501         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (       cocovtio.d):00502         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (       cocovtio.d):00503         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (       cocovtio.d):00504         *g0003    rmb   2          NEW: UNUSED
0005                  (       cocovtio.d):00505         g0005          RMB       2                   Temp save in Windint RG
0007                  (       cocovtio.d):00506         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (       cocovtio.d):00507         G.MonTyp       RMB       1                   monitor type
     000A             (       cocovtio.d):00508         g000A          EQU       .                   Old label for compatibility
000A                  (       cocovtio.d):00509         G.CrDvFl       RMB       1  Are we current device flag (only set when all
                      (       cocovtio.d):00510         *                           Parms have been moved to Dev Mem)
                      (       cocovtio.d):00511         *                           0=We are not on our device
                      (       cocovtio.d):00512         *                           1=We are the current device
                      (       cocovtio.d):00513         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (       cocovtio.d):00514         *                           whether or not to update GIME regs themselves
                      (       cocovtio.d):00515         *                           If not current device, they don't.)
000B                  (       cocovtio.d):00516         G.WinType      RMB       1                   current device's V.TYPE
000C                  (       cocovtio.d):00517         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (       cocovtio.d):00518         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (       cocovtio.d):00519         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (       cocovtio.d):00520         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (       cocovtio.d):00521         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (       cocovtio.d):00522         G.BelVec       RMB       2                   BELL routine vector
0019                  (       cocovtio.d):00523         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (       cocovtio.d):00524         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (       cocovtio.d):00525         G.BelTnF       RMB       1                   BELL tone flag
001D                  (       cocovtio.d):00526         g001D          RMB       3
0020                  (       cocovtio.d):00527         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (       cocovtio.d):00528         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (       cocovtio.d):00529         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (       cocovtio.d):00530         *                           00000010 : VDGInt found
                      (       cocovtio.d):00531         *                           10000000 : GrfDrv found
0025                  (       cocovtio.d):00532         g0025          RMB       1
0026                  (       cocovtio.d):00533         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (       cocovtio.d):00534         *         IFEQ  TC9-true
                      (       cocovtio.d):00535         *CurLght  rmb   1          current keyboard light settings
                      (       cocovtio.d):00536         *         ELSE  
0027                  (       cocovtio.d):00537         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (       cocovtio.d):00538         *         ENDC  
0028                  (       cocovtio.d):00539         G.LKeyCd       RMB       1                   last keyboard code
0029                  (       cocovtio.d):00540         G.KyRept       RMB       1                   key repeat counter
                      (       cocovtio.d):00541         * A secondary 3 key table (same format as g002D below)
002A                  (       cocovtio.d):00542         G.2Key1        RMB       1                   $2A
002B                  (       cocovtio.d):00543         G.2Key2        RMB       1                   $2B
002C                  (       cocovtio.d):00544         G.2Key3        RMB       1
                      (       cocovtio.d):00545         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (       cocovtio.d):00546         * than 3 are hit, the last key is overwritten with the very last key down that
                      (       cocovtio.d):00547         * was checked. Format for all three is the same as the PIA column/row byte @
                      (       cocovtio.d):00548         * KeyFlag below.
002D                  (       cocovtio.d):00549         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (       cocovtio.d):00550         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (       cocovtio.d):00551         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (       cocovtio.d):00552         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (       cocovtio.d):00553         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (       cocovtio.d):00554         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (       cocovtio.d):00555         *                           %00000111-Column # (Output, 0-7)
                      (       cocovtio.d):00556         *                           %00111000-Row # (Input, 0-6)
0033                  (       cocovtio.d):00557         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (       cocovtio.d):00558         G.KySns        RMB       1                   key sense byte
0035                  (       cocovtio.d):00559         G.KySame       RMB       1                   same key flag
0036                  (       cocovtio.d):00560         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (       cocovtio.d):00561                        RMB       1
0038                  (       cocovtio.d):00562         g0038          RMB       1                   grfdrv initialized flag
0039                  (       cocovtio.d):00563                        RMB       2
003B                  (       cocovtio.d):00564         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (       cocovtio.d):00565         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (       cocovtio.d):00566         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (       cocovtio.d):00567         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (       cocovtio.d):00568         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (       cocovtio.d):00569         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (       cocovtio.d):00570         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (       cocovtio.d):00571         *         IFEQ  TC9-true
                      (       cocovtio.d):00572         *KeyParm  rmb   1          keyboard command parameter byte
                      (       cocovtio.d):00573         *         ELSE  
0063                  (       cocovtio.d):00574         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (       cocovtio.d):00575         *         ENDC  
0064                  (       cocovtio.d):00576         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (       cocovtio.d):00577         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (       cocovtio.d):00578         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (       cocovtio.d):00579         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (       cocovtio.d):00580         G.CoTble       RMB       6                   co-module table ($68)
006E                  (       cocovtio.d):00581         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (       cocovtio.d):00582         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (       cocovtio.d):00583         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (       cocovtio.d):00584         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (       cocovtio.d):00585         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (       cocovtio.d):00586         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (       cocovtio.d):00587         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (       cocovtio.d):00588         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (       cocovtio.d):00589         g00BD          RMB       1                   Current screen type for work window table
00BE                  (       cocovtio.d):00590         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (       cocovtio.d):00591         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (       cocovtio.d):00592         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (       cocovtio.d):00593         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (       cocovtio.d):00594         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (       cocovtio.d):00595         G.MsSig        RMB       1                   mouse signal flag
00C7                  (       cocovtio.d):00596         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (       cocovtio.d):00597         g00D7          RMB       9
00E0                  (       cocovtio.d):00598         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (       cocovtio.d):00599         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (       cocovtio.d):00600         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (       cocovtio.d):00601         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (       cocovtio.d):00602         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (       cocovtio.d):00603         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (       cocovtio.d):00604         
                      (       cocovtio.d):00605         *****************************************************************************
                      (       cocovtio.d):00606         * GrfDrv global memory data definitions
                      (       cocovtio.d):00607         * This area sits in system block 0 from $1100 to $119E
     1100             (       cocovtio.d):00608         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (       cocovtio.d):00609                        ORG       0
0000                  (       cocovtio.d):00610         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (       cocovtio.d):00611         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (       cocovtio.d):00612         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (       cocovtio.d):00613         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (       cocovtio.d):00614         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (       cocovtio.d):00615         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (       cocovtio.d):00616         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (       cocovtio.d):00617         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (       cocovtio.d):00618         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (       cocovtio.d):00619         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (       cocovtio.d):00620         *                             overlay width has been copied
000B                  (       cocovtio.d):00621         gr000B         RMB       1
000C                  (       cocovtio.d):00622         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (       cocovtio.d):00623         gr000E         RMB       1
000F                  (       cocovtio.d):00624         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (       cocovtio.d):00625         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (       cocovtio.d):00626         gr0012         RMB       6
0018                  (       cocovtio.d):00627         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (       cocovtio.d):00628         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (       cocovtio.d):00629         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (       cocovtio.d):00630         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (       cocovtio.d):00631         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (       cocovtio.d):00632         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (       cocovtio.d):00633         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (       cocovtio.d):00634         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (       cocovtio.d):00635         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (       cocovtio.d):00636         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (       cocovtio.d):00637         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (       cocovtio.d):00638         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (       cocovtio.d):00639         gr002C         RMB       2
002E                  (       cocovtio.d):00640         gr002E         RMB       2                   current window table entry
0030                  (       cocovtio.d):00641         gr0030         RMB       2                   current screen table ptr
0032                  (       cocovtio.d):00642         gr0032         RMB       1                   Last block # we used for buffers
0033                  (       cocovtio.d):00643         gr0033         RMB       2                   Last offset we used for buffers
0035                  (       cocovtio.d):00644         gr0035         RMB       1                   group
0036                  (       cocovtio.d):00645         gr0036         RMB       2                   offset
0038                  (       cocovtio.d):00646         gr0038         RMB       1                   group returned (new)
0039                  (       cocovtio.d):00647         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (       cocovtio.d):00648         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (       cocovtio.d):00649         gr003B         RMB       2                   end of vars ptr?
003D                  (       cocovtio.d):00650         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (       cocovtio.d):00651         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (       cocovtio.d):00652         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (       cocovtio.d):00653         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (       cocovtio.d):00654         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (       cocovtio.d):00655         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (       cocovtio.d):00656         gr0047         RMB       2                   'Working' X coordinate
0049                  (       cocovtio.d):00657         gr0049         RMB       2                   'Working' Y coordinate
004B                  (       cocovtio.d):00658         gr004B         RMB       2                   current X
004D                  (       cocovtio.d):00659         gr004D         RMB       2                   current Y
004F                  (       cocovtio.d):00660         gr004F         RMB       2                   X Size (in bytes)
0051                  (       cocovtio.d):00661         gr0051         RMB       2                   Y Size (in bytes)
0053                  (       cocovtio.d):00662         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (       cocovtio.d):00663         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (       cocovtio.d):00664         gr0057         RMB       1                   group
0058                  (       cocovtio.d):00665         gr0058         RMB       1                   buffer #
0059                  (       cocovtio.d):00666         gr0059         RMB       1                   save switch for overlay
005A                  (       cocovtio.d):00667         gr005A         RMB       1                   PRN
005B                  (       cocovtio.d):00668         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (       cocovtio.d):00669         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (       cocovtio.d):00670         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (       cocovtio.d):00671         Gr.STYMk       RMB       1                   STY marker
0061                  (       cocovtio.d):00672         gr0061         RMB       1                   foreground RGB data
0062                  (       cocovtio.d):00673         gr0062         RMB       1                   background RGB data
0063                  (       cocovtio.d):00674         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (       cocovtio.d):00675         gr0064         RMB       2                   PSet vector
0066                  (       cocovtio.d):00676         gr0066         RMB       2                   pset offset
0068                  (       cocovtio.d):00677         gr0068         RMB       2                   LSet vector
006A                  (       cocovtio.d):00678         gr006A         RMB       2                   max X co-ordinate
006C                  (       cocovtio.d):00679         gr006C         RMB       2                   max Y co-ordinate
006E                  (       cocovtio.d):00680         gr006E         RMB       2                   X pixel count
0070                  (       cocovtio.d):00681         gr0070         RMB       2                   Y pixel count
0072                  (       cocovtio.d):00682         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (       cocovtio.d):00683         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (       cocovtio.d):00684         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (       cocovtio.d):00685         gr0077         RMB       2                   Vector for right direction FFill
0079                  (       cocovtio.d):00686         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (       cocovtio.d):00687         gr007A         RMB       2                   Vector for left direction FFill
007C                  (       cocovtio.d):00688         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (       cocovtio.d):00689         gr007D         RMB       1                   buffer block #
007E                  (       cocovtio.d):00690         gr007E         RMB       2                   buffer offset #
0080                  (       cocovtio.d):00691         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (       cocovtio.d):00692         gr0082         RMB       3                   3 byte extended screen address
0085                  (       cocovtio.d):00693         gr0085         RMB       2                   temp
0087                  (       cocovtio.d):00694         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (       cocovtio.d):00695         gr0097         RMB       1                   temp
0098                  (       cocovtio.d):00696         gr0098         RMB       1                   temp
                      (       cocovtio.d):00697         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (       cocovtio.d):00698         gr0099         RMB       2                   temp
                      (       cocovtio.d):00699         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (       cocovtio.d):00700         gr009B         RMB       1                   counter temp
009C                  (       cocovtio.d):00701         gr009C         RMB       1
009D                  (       cocovtio.d):00702         gr009D         RMB       2                   offset to buffer in block
009F                  (       cocovtio.d):00703         gr009F         RMB       1
00A0                  (       cocovtio.d):00704         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (       cocovtio.d):00705         gr00A1         RMB       2                   vector routine for (changes lots)
                      (       cocovtio.d):00706         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (       cocovtio.d):00707         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (       cocovtio.d):00708         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (       cocovtio.d):00709         gr00A7         RMB       2
00A9                  (       cocovtio.d):00710         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (       cocovtio.d):00711         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (       cocovtio.d):00712         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (       cocovtio.d):00713         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (       cocovtio.d):00714         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (       cocovtio.d):00715         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (       cocovtio.d):00716         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (       cocovtio.d):00717         gr00B3         RMB       1                   temp veriable grfdrv
00B4                  (       cocovtio.d):00718         gr00B4         RMB       1                   temp veriable grfdrv
00B5                  (       cocovtio.d):00719         gr00B5         RMB       1                   regW for grfdrv
00B6                  (       cocovtio.d):00720         gr00B6         RMB       1
00B7                  (       cocovtio.d):00721         gr00B7         RMB       2
00B9                  (       cocovtio.d):00722         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (       cocovtio.d):00723         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (       cocovtio.d):00724         gr00BD         RMB       2                   previously used in grfdrv at $B6
00BF                  (       cocovtio.d):00725         gr00BF         RMB       256-.
                      (       cocovtio.d):00726         * GPLoad buffer - $1200 in system block 0
0100                  (       cocovtio.d):00727         GPBuf          RMB       72                  common move buffer for gpload/get/put
     0048             (       cocovtio.d):00728         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (       cocovtio.d):00729         
                      (       cocovtio.d):00730         *****************************************************************************
                      (       cocovtio.d):00731         * Window table entry structure
                      (       cocovtio.d):00732         * These tables sit in system block 0 and there is 1 for every window init'd
                      (       cocovtio.d):00733         * including any overlay windows.
     0020             (       cocovtio.d):00734         MaxWind        EQU       32                  maximum allowable window tables
     1290             (       cocovtio.d):00735         WinBase        EQU       $1290               base address to start of window tables
                      (       cocovtio.d):00736                        ORG       -$10
FFF0                  (       cocovtio.d):00737         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (       cocovtio.d):00738         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (       cocovtio.d):00739         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (       cocovtio.d):00740         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (       cocovtio.d):00741         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (       cocovtio.d):00742         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (       cocovtio.d):00743         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (       cocovtio.d):00744         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (       cocovtio.d):00745         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (       cocovtio.d):00746         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (       cocovtio.d):00747         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (       cocovtio.d):00748         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (       cocovtio.d):00749         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (       cocovtio.d):00750         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (       cocovtio.d):00751         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (       cocovtio.d):00752         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (       cocovtio.d):00753         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (       cocovtio.d):00754         Wt.Back        RMB       1                   background palette #                         $07
0008                  (       cocovtio.d):00755         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (       cocovtio.d):00756         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (       cocovtio.d):00757         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (       cocovtio.d):00758         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (       cocovtio.d):00759         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (       cocovtio.d):00760         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (       cocovtio.d):00761         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (       cocovtio.d):00762         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (       cocovtio.d):00763         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (       cocovtio.d):00764         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (       cocovtio.d):00765         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (       cocovtio.d):00766         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (       cocovtio.d):00767         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (       cocovtio.d):00768         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (       cocovtio.d):00769         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24,0-191)                 $1D
001F                  (       cocovtio.d):00770         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (       cocovtio.d):00771         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (       cocovtio.d):00772         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (       cocovtio.d):00773         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (       cocovtio.d):00774         * NOTE: The following default settings are what the window was initialized
                      (       cocovtio.d):00775         *       with, and thus are the MAXIMUM start/size the window can handle
                      (       cocovtio.d):00776         *       until it is restarted (DWEnd & DWSet)
                      (       cocovtio.d):00777         *       They also appear to be used in WindInt to determine the coords &
                      (       cocovtio.d):00778         *       sizes for control+content regions
0026                  (       cocovtio.d):00779         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (       cocovtio.d):00780         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (       cocovtio.d):00781         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (       cocovtio.d):00782         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (       cocovtio.d):00783         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (       cocovtio.d):00784         Wt.Siz         EQU       .+$10
                      (       cocovtio.d):00785         
                      (       cocovtio.d):00786         *****************************************************************************
                      (       cocovtio.d):00787         * Screen table entrys
                      (       cocovtio.d):00788         * These tables sit in system block 0 base=$1A80
                      (       cocovtio.d):00789         
     0010             (       cocovtio.d):00790         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (       cocovtio.d):00791         STblBse        EQU       $1A80               base address of screen tables
                      (       cocovtio.d):00792                        ORG       0
0000                  (       cocovtio.d):00793         St.Sty         RMB       1                   Screen type                         $00
0001                  (       cocovtio.d):00794         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (       cocovtio.d):00795         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (       cocovtio.d):00796         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (       cocovtio.d):00797         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (       cocovtio.d):00798         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (       cocovtio.d):00799         St.Back        RMB       1                   Background palette register #       $07
0008                  (       cocovtio.d):00800         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (       cocovtio.d):00801         St.Res         RMB       7                   UNUSED???                           $09
                      (       cocovtio.d):00802         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (       cocovtio.d):00803         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (       cocovtio.d):00804         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (       cocovtio.d):00805         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
0010                  (       cocovtio.d):00806         St.Pals        RMB       16                  Palette register contents           $10
     0020             (       cocovtio.d):00807         St.Siz         EQU       .
                      (       cocovtio.d):00808         
                      (       cocovtio.d):00809         *****************************************************************************
                      (       cocovtio.d):00810         * Graphics buffer tables
                      (       cocovtio.d):00811         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (       cocovtio.d):00812         * data.
                      (       cocovtio.d):00813                        ORG       0
0000                  (       cocovtio.d):00814         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (       cocovtio.d):00815         Grf.Off        RMB       2                   back block header offset            $01
0003                  (       cocovtio.d):00816         Grf.Grp        RMB       1                   group #                             $03
0004                  (       cocovtio.d):00817         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (       cocovtio.d):00818         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (       cocovtio.d):00819         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (       cocovtio.d):00820         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (       cocovtio.d):00821         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (       cocovtio.d):00822         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (       cocovtio.d):00823         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (       cocovtio.d):00824         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (       cocovtio.d):00825         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (       cocovtio.d):00826         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (       cocovtio.d):00827         Grf.Siz        EQU       .                   $20
                      (       cocovtio.d):00828         
                      (       cocovtio.d):00829         *****************************************************************************
                      (       cocovtio.d):00830         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (       cocovtio.d):00831         * $1075-$0176
                      (       cocovtio.d):00832         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (       cocovtio.d):00833                        ORG       0
0000                  (       cocovtio.d):00834         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (       cocovtio.d):00835         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (       cocovtio.d):00836         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (       cocovtio.d):00837         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (       cocovtio.d):00838         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (       cocovtio.d):00839         Gt.BClr        RMB       1                   Background color                               $08
0009                  (       cocovtio.d):00840         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (       cocovtio.d):00841         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (       cocovtio.d):00842         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (       cocovtio.d):00843         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (       cocovtio.d):00844         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (       cocovtio.d):00845         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (       cocovtio.d):00846         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (       cocovtio.d):00847         GTabSz         EQU       .
                      (       cocovtio.d):00848         
                      (       cocovtio.d):00849         *****************************************************************************
                      (       cocovtio.d):00850         * This table is located in the graphics table memory and is offset from
                      (       cocovtio.d):00851         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (       cocovtio.d):00852         * WindInt.
                      (       cocovtio.d):00853         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (       cocovtio.d):00854         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (       cocovtio.d):00855         *  COMBINATION EVERY TIME
                      (       cocovtio.d):00856                        ORG       $0240
0240                  (       cocovtio.d):00857                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (       cocovtio.d):00858                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (       cocovtio.d):00859                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (       cocovtio.d):00860                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (       cocovtio.d):00861         
                      (       cocovtio.d):00862         *****************************************************************************
                      (       cocovtio.d):00863         * WindInt menu handling table entry definition
                      (       cocovtio.d):00864                        ORG       0
0000                  (       cocovtio.d):00865         MnuXNum        RMB       1                   menu #
0001                  (       cocovtio.d):00866         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (       cocovtio.d):00867         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (       cocovtio.d):00868                        RMB       1                   unused?
     0004             (       cocovtio.d):00869         MnuHSiz        EQU       .
                      (       cocovtio.d):00870         
                      (       cocovtio.d):00871         *****************************************************************************
                      (       cocovtio.d):00872         * Character binary switches
     0080             (       cocovtio.d):00873         TChr           EQU       %10000000           transparent characters
     0040             (       cocovtio.d):00874         Under          EQU       %01000000           underline characters
     0020             (       cocovtio.d):00875         Bold           EQU       %00100000           bold characters
     0010             (       cocovtio.d):00876         Prop           EQU       %00010000           proportional spacing of characters
     0008             (       cocovtio.d):00877         Scale          EQU       %00001000           automatic window scaling
     0004             (       cocovtio.d):00878         Invers         EQU       %00000100           inverse characters
     0002             (       cocovtio.d):00879         NoCurs         EQU       %00000010           no cursor display
     0001             (       cocovtio.d):00880         Protect        EQU       %00000001           device window protection
                      (       cocovtio.d):00881         
                      (       cocovtio.d):00882         *****************************************************************************
                      (       cocovtio.d):00883         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (       cocovtio.d):00884         Current        EQU       $ff                 Current screen
                      (       cocovtio.d):00885         *         equ   1          640x200x2
                      (       cocovtio.d):00886         *         equ   2          320x200x4
                      (       cocovtio.d):00887         *         equ   3          640x200x4
                      (       cocovtio.d):00888         *         equ   4          320x200x16
                      (       cocovtio.d):00889         *         equ   $85        80 column text
                      (       cocovtio.d):00890         *         equ   $86        40 column text
                      (       cocovtio.d):00891         
                      (       cocovtio.d):00892         *************************************
                      (       cocovtio.d):00893         * Window default palette color codes
                      (       cocovtio.d):00894         *
                      (       cocovtio.d):00895                        ORG       0
0000                  (       cocovtio.d):00896         White.         RMB       1
0001                  (       cocovtio.d):00897         Blue.          RMB       1
0002                  (       cocovtio.d):00898         Black.         RMB       1
0003                  (       cocovtio.d):00899         Green.         RMB       1
0004                  (       cocovtio.d):00900         Red.           RMB       1
0005                  (       cocovtio.d):00901         Yellow.        RMB       1
0006                  (       cocovtio.d):00902         Magenta.       RMB       1
0007                  (       cocovtio.d):00903         Cyan.          RMB       1
                      (       cocovtio.d):00904         
                      (       cocovtio.d):00905                        ENDC      
                      (       cocovtio.d):00906                        ENDC      
                      (/home/strick/6809):00030                 ENDC    
                      (/home/strick/6809):00031                         
                      (/home/strick/6809):00032         * defines for customizations
     0009             (/home/strick/6809):00033         Revision        set     9       module revision
     0013             (/home/strick/6809):00034         Edition set     19      module Edition
     F000             (/home/strick/6809):00035         Where   equ     $F000   absolute address of where Kernel starts in memory
                      (/home/strick/6809):00036                         
0000 87CD0EDD000DC089 (/home/strick/6809):00037                 mod     eom,MName,Systm,ReEnt+Revision,entry,0
     2200BE0000
                      (/home/strick/6809):00038                         
000D 4B72EE           (/home/strick/6809):00039         MName   fcs     /Krn/
0010 13               (/home/strick/6809):00040                 fcb     Edition
                      (/home/strick/6809):00041                         
                      (/home/strick/6809):00042         * FILL - all unused bytes are now here
0011 7777772E6E697472 (/home/strick/6809):00043                 fcc     /www.nitros9.org /
     6F73392E6F726720
0021 7777772E6E697472 (/home/strick/6809):00044                 fcc     /www.nitros9.org /
     6F73392E6F726720
0031 7777772E6E697472 (/home/strick/6809):00045                 fcc     /www.nitros9.org /
     6F73392E6F726720
0041 7777772E6E697472 (/home/strick/6809):00046                 fcc     /www.nitros9.org /
     6F73392E6F726720
0051 7777772E6E697472 (/home/strick/6809):00047                 fcc     /www.nitros9.org /
     6F73392E6F726720
0061 7777772E6E697472 (/home/strick/6809):00048                 fcc     /www.nitros9.org /
     6F73392E6F726720
                      (/home/strick/6809):00049                 IFNE    H6309
0071 7777772E6E697472 (/home/strick/6809):00050                 fcc     /www.nitros9.org /
     6F73392E6F726720
0081 7777772E6E697472 (/home/strick/6809):00051                 fcc     /www.nitros9.org /
     6F73392E6F726720
0091 7777772E6E6974   (/home/strick/6809):00052                 fcc     /www.nit/
                      (/home/strick/6809):00053                 ELSE    
                      (/home/strick/6809):00054                 fcc     /www.nit/
                      (/home/strick/6809):00055                 ENDC    
                      (/home/strick/6809):00056                         
                      (/home/strick/6809):00057         * Might as well have this here as just past the end of Kernel...
0098                  (/home/strick/6809):00058         DisTable
0098 FCB4             (/home/strick/6809):00059                 fdb     L0CD2+Where     D.Clock absolute address at the start
009A F292             (/home/strick/6809):00060                 fdb     XSWI3+Where     D.XSWI3
009C F2A0             (/home/strick/6809):00061                 fdb     XSWI2+Where     D.XSWI2
009E 006B             (/home/strick/6809):00062                 fdb     D.Crash         D.XFIRQ crash on an FIRQ
00A0 FD13             (/home/strick/6809):00063                 fdb     XIRQ+Where      D.XIRQ
00A2 F295             (/home/strick/6809):00064                 fdb     XSWI+Where      D.XSWI
00A4 006B             (/home/strick/6809):00065                 fdb     D.Crash         D.XNMI crash on an NMI
00A6 0055             (/home/strick/6809):00066                 fdb     $0055           D.ErrRst ??? Not used as far as I can tell
00A8 F35B             (/home/strick/6809):00067                 fdb     Sys.Vec+Where   Initial Kernel system call vector
     0012             (/home/strick/6809):00068         DisSize equ     *-DisTable
                      (/home/strick/6809):00069         * DO NOT ADD ANYTHING BETWEEN THESE 2 TABLES: see code using 'SubSiz', below
     0160             (/home/strick/6809):00070         LowSub  equ     $0160           start of low memory subroutines
     00AA             (/home/strick/6809):00071         SubStrt equ     *
                      (/home/strick/6809):00072         * D.Flip0 - switch to system task 0
     00AA             (/home/strick/6809):00073         R.Flip0 equ     *
                      (/home/strick/6809):00074                 IFNE    H6309
00AA 02FE91           (/home/strick/6809):00075                 aim     #$FE,<D.TINIT   map type 0
00AD 119691           (/home/strick/6809):00076                 lde     <D.TINIT        another 2 bytes saved if GRFDRV does: tfr cc,e
00B0 11B7FF91         (/home/strick/6809):00077                 ste     >DAT.Task       and we can use A here, instead of E
                      (/home/strick/6809):00078                 ELSE    
                      (/home/strick/6809):00079                 pshs    a
                      (/home/strick/6809):00080                 lda     <D.TINIT
                      (/home/strick/6809):00081                 anda    #$FE
                      (/home/strick/6809):00082                 sta     <D.TINIT
                      (/home/strick/6809):00083                 sta     >DAT.Task
                      (/home/strick/6809):00084                 puls    a
                      (/home/strick/6809):00085                 ENDC    
00B4 0FA4             (/home/strick/6809):00086                 clr     <D.SSTskN
00B6 1F14             (/home/strick/6809):00087                 tfr     x,s
00B8 1F8A             (/home/strick/6809):00088                 tfr     a,cc
00BA 39               (/home/strick/6809):00089                 rts     
     0011             (/home/strick/6809):00090         SubSiz  equ     *-SubStrt
                      (/home/strick/6809):00091         * Don't add any code here: See L0065, below.
                      (/home/strick/6809):00092         * Interrupt service routine
00BB 6E98F0           (/home/strick/6809):00093         Vectors jmp     [<-(D.SWI3-D.XSWI3),x]  (-$10) (Jmp to 2ndary vector)
                      (/home/strick/6809):00094                         
                      (/home/strick/6809):00095         * Let's start by initializing system page
     00BE             (/home/strick/6809):00096         entry   equ     *
                      (/home/strick/6809):00097                 IFNE    H6309
00BE CD01001F00       (/home/strick/6809):00098                 ldq     #$01001f00      start address to clear & # bytes to clear
00C3 318CFA           (/home/strick/6809):00099                 leay    <entry+2,pc     point to a 0
00C6 113B20           (/home/strick/6809):00100                 tfm     y,d+
00C9 DDA7             (/home/strick/6809):00101                 std     <D.CCStk        set pointer to top of global memory to $2000
00CB 8601             (/home/strick/6809):00102                 lda     #$01            set task user table to $0100
                      (/home/strick/6809):00103                 ELSE    
                      (/home/strick/6809):00104                 ldx     #$100
                      (/home/strick/6809):00105                 ldy     #$2000-$100
                      (/home/strick/6809):00106                 clra    
                      (/home/strick/6809):00107                 clrb    
00CD                  (/home/strick/6809):00108         L001C   std     ,x++
                      (/home/strick/6809):00109                 leay    -2,y
                      (/home/strick/6809):00110                 bne     L001C
                      (/home/strick/6809):00111                 stx     <D.CCStk        Set pointer to top of global memory to $2000
                      (/home/strick/6809):00112                 inca                    D = $0100
                      (/home/strick/6809):00113                 ENDC    
                      (/home/strick/6809):00114                         
                      (/home/strick/6809):00115         * Setup system direct page variables
00CD DD20             (/home/strick/6809):00116                 std     <D.Tasks
00CF CB20             (/home/strick/6809):00117                 addb    #$20            set Task image table to $0120
00D1 DDA1             (/home/strick/6809):00118                 std     <D.TskIPt
00D3 5F               (/home/strick/6809):00119                 clrb                    set memory block map to $0200
00D4 4C               (/home/strick/6809):00120                 inca    
00D5 DD40             (/home/strick/6809):00121                 std     <D.BlkMap
00D7 CB40             (/home/strick/6809):00122                 addb    #$40            set second block map to $0240
00D9 DD42             (/home/strick/6809):00123                 std     <D.BlkMap+2
00DB 5F               (/home/strick/6809):00124                 clrb                    set system service dispatch table to $0300
00DC 4C               (/home/strick/6809):00125                 inca    
00DD DDC2             (/home/strick/6809):00126                 std     <D.SysDis
00DF 4C               (/home/strick/6809):00127                 inca                    set user dispatch table to $0400
00E0 DDC8             (/home/strick/6809):00128                 std     <D.UsrDis
00E2 4C               (/home/strick/6809):00129                 inca                    set process descriptor block to $0500
00E3 DD48             (/home/strick/6809):00130                 std     <D.PrcDBT
00E5 4C               (/home/strick/6809):00131                 inca                    set system process descriptor to $0600
00E6 DD4A             (/home/strick/6809):00132                 std     <D.SysPrc
00E8 DD50             (/home/strick/6809):00133                 std     <D.Proc         set user process descriptor to $0600
00EA 8B02             (/home/strick/6809):00134                 adda    #$02            set stack pointer to $0800
00EC 1F04             (/home/strick/6809):00135                 tfr     d,s
00EE 4C               (/home/strick/6809):00136                 inca                    set system stack to $0900
00EF DDCC             (/home/strick/6809):00137                 std     <D.SysStk
00F1 DD4E             (/home/strick/6809):00138                 std     <D.SysMem       set system memory map ptr $0900
00F3 4C               (/home/strick/6809):00139                 inca                    set module directory start to $0a00
00F4 DD44             (/home/strick/6809):00140                 std     <D.ModDir
00F6 DD58             (/home/strick/6809):00141                 std     <D.ModEnd       set module directory end to $0a00
00F8 8B06             (/home/strick/6809):00142                 adda    #$06            set secondary module directory start to $1000
00FA DD46             (/home/strick/6809):00143                 std     <D.ModDir+2
00FC DD5A             (/home/strick/6809):00144                 std     <D.ModDAT       set module directory DAT pointer to $1000
00FE DDA5             (/home/strick/6809):00145                 std     <D.CCMem        set pointer to beginning of global memory to $1000
                      (/home/strick/6809):00146         * In following line, CRC=ON if it is STA <D.CRC, CRC=OFF if it is a STB <D.CRC
0100 D73B             (/home/strick/6809):00147                 stb     <D.CRC          set CRC checking flag to off
                      (/home/strick/6809):00148                         
                      (/home/strick/6809):00149         * Initialize interrupt vector tables
0102 318C93           (/home/strick/6809):00150                 leay    <DisTable,pcr   point to table of absolute vector addresses
0105 8E00E0           (/home/strick/6809):00151                 ldx     #D.Clock        where to put it in memory
                      (/home/strick/6809):00152                 IFNE    H6309
0108 11C612           (/home/strick/6809):00153                 ldf     #DisSize        size of the table - E=0 from TFM, above
010B 113821           (/home/strick/6809):00154                 tfm     y+,x+           move it over
                      (/home/strick/6809):00155                 ELSE    
                      (/home/strick/6809):00156                 ldb     #DisSize
010E                  (/home/strick/6809):00157         l@
                      (/home/strick/6809):00158                 lda     ,y+
                      (/home/strick/6809):00159                 sta     ,x+
                      (/home/strick/6809):00160                 decb    
                      (/home/strick/6809):00161                 bne     l@
                      (/home/strick/6809):00162                 ENDC    
                      (/home/strick/6809):00163                         
                      (/home/strick/6809):00164         * initialize D.Flip0 routine in low memory
                      (/home/strick/6809):00165         * Y=ptr to R.Flip0 already
                      (/home/strick/6809):00166         *         leay  >R.Flip0,pc
010E CE0160           (/home/strick/6809):00167                 ldu     #LowSub         somewhere in block 0 that's never modified
0111 DFA9             (/home/strick/6809):00168                 stu     <D.Flip0        switch to system task 0
                      (/home/strick/6809):00169                 IFNE    H6309
0113 11C611           (/home/strick/6809):00170                 ldf     #SubSiz         size of it
0116 113823           (/home/strick/6809):00171                 tfm     y+,u+           copy it over
                      (/home/strick/6809):00172                 ELSE    
                      (/home/strick/6809):00173                 ldb     #SubSiz
0119                  (/home/strick/6809):00174         Loop2   lda     ,y+
                      (/home/strick/6809):00175                 sta     ,u+
                      (/home/strick/6809):00176                 decb    
                      (/home/strick/6809):00177                 bne     Loop2
                      (/home/strick/6809):00178                 ENDC    
                      (/home/strick/6809):00179                         
                      (/home/strick/6809):00180         *         leau   <Vectors,pc   point to vector
0119 1F23             (/home/strick/6809):00181                 tfr     y,u             move the pointer to a faster register
011B EF81             (/home/strick/6809):00182         L0065   stu     ,x++            Set all IRQ vectors to go to Vectors for now
011D 8C00FC           (/home/strick/6809):00183                 cmpx    #D.NMI
0120 23F9             (/home/strick/6809):00184                 bls     L0065
                      (/home/strick/6809):00185                         
                      (/home/strick/6809):00186         * Initialize user interupt vectors
0122 9EE4             (/home/strick/6809):00187                 ldx     <D.XSWI2        Get SWI2 (os9 command) service routine pointer
0124 9FC6             (/home/strick/6809):00188                 stx     <D.UsrSvc       Save it as user service routine pointer
0126 9EE8             (/home/strick/6809):00189                 ldx     <D.XIRQ         Get IRQ service routine pointer
0128 9FCA             (/home/strick/6809):00190                 stx     <D.UsrIRQ       Save it as user IRQ routine pointer
                      (/home/strick/6809):00191                         
012A 308D0211         (/home/strick/6809):00192                 leax    >SysCall,pc     Setup System service routine entry vector
012E 9FC0             (/home/strick/6809):00193                 stx     <D.SysSvc
0130 9FE4             (/home/strick/6809):00194                 stx     <D.XSWI2
                      (/home/strick/6809):00195                         
0132 308D0CCC         (/home/strick/6809):00196                 leax    >S.SysIRQ,pc    Setup system IRQ service vector
0136 9FC4             (/home/strick/6809):00197                 stx     <D.SysIRQ
0138 9FE8             (/home/strick/6809):00198                 stx     <D.XIRQ
                      (/home/strick/6809):00199                         
013A 308D0CC0         (/home/strick/6809):00200                 leax    >S.SvcIRQ,pc    Setup in system IRQ service vector
013E 9FCE             (/home/strick/6809):00201                 stx     <D.SvcIRQ
0140 308D044B         (/home/strick/6809):00202                 leax    >S.Poll,pc      Setup interrupt polling vector
0144 9F26             (/home/strick/6809):00203                 stx     <D.Poll         ORCC #$01;RTS
0146 308D00D1         (/home/strick/6809):00204                 leax    >S.AltIRQ,pc    Setup alternate IRQ vector: pts to an RTS
014A 9FB2             (/home/strick/6809):00205                 stx     <D.AltIRQ
                      (/home/strick/6809):00206                         
014C 864B             (/home/strick/6809):00207                 lda     #'K     --- in Kernel
014E 9D5E             (/home/strick/6809):00208                 jsr     <D.BtBug        ---
                      (/home/strick/6809):00209                         
0150 308D0D06         (/home/strick/6809):00210                 leax    >S.Flip1,pc     Setup change to task 1 vector
0154 9FAB             (/home/strick/6809):00211                 stx     <D.Flip1
                      (/home/strick/6809):00212                         
                      (/home/strick/6809):00213         * Setup System calls
0156 318D00D1         (/home/strick/6809):00214                 leay    >SysCalls,pc
015A 170242           (/home/strick/6809):00215                 lbsr    SysSvc
                      (/home/strick/6809):00216                         
                      (/home/strick/6809):00217         * Initialize system process descriptor
015D DE48             (/home/strick/6809):00218                 ldu     <D.PrcDBT       get process table pointer
015F 9E4A             (/home/strick/6809):00219                 ldx     <D.SysPrc       get system process pointer
                      (/home/strick/6809):00220                         
                      (/home/strick/6809):00221         * These overlap because it is quicker than trying to strip hi byte from X
0161 AFC4             (/home/strick/6809):00222                 stx     ,u              save it as first process in table
0163 AF41             (/home/strick/6809):00223                 stx     1,u             save it as the second as well
                      (/home/strick/6809):00224                 IFNE    H6309
0165 610184           (/home/strick/6809):00225                 oim     #$01,P$ID,x     Set process ID to 1 (inited to 0)
0168 61800C           (/home/strick/6809):00226                 oim     #SysState,P$State,x     Set to system state (inited to 0)
                      (/home/strick/6809):00227                 ELSE    
                      (/home/strick/6809):00228                 ldd     #$01*256+SysState
                      (/home/strick/6809):00229                 sta     P$ID,x
                      (/home/strick/6809):00230                 stb     P$State,x
                      (/home/strick/6809):00231                 ENDC    
016B 4F               (/home/strick/6809):00232                 clra                    System task is task #0
016C 97D0             (/home/strick/6809):00233                 sta     <D.SysTsk
016E A706             (/home/strick/6809):00234                 sta     P$Task,x
0170 43               (/home/strick/6809):00235                 coma                    Setup its priority & age ($FF)
0171 A70A             (/home/strick/6809):00236                 sta     P$Prior,x
0173 A70B             (/home/strick/6809):00237                 sta     P$Age,x
0175 308840           (/home/strick/6809):00238                 leax    <P$DATImg,x     point to DAT image
0178 9F4C             (/home/strick/6809):00239                 stx     <D.SysDAT       save it as a pointer in DP
                      (/home/strick/6809):00240         * actually, since block 0 is tfm'd to be zero, we can skip the next 2 lines
                      (/home/strick/6809):00241                 IFNE    H6309
017A 104F             (/home/strick/6809):00242                 clrd    
                      (/home/strick/6809):00243                 ELSE    
                      (/home/strick/6809):00244                 clra    
                      (/home/strick/6809):00245                 clrb    
                      (/home/strick/6809):00246                 ENDC    
017C ED81             (/home/strick/6809):00247                 std     ,x++            initialize 1st block to 0 (for this DP)
                      (/home/strick/6809):00248                         
                      (/home/strick/6809):00249         * Dat.BlCt-ROMCount-RAMCount
017E 8606             (/home/strick/6809):00250                 lda     #$06            initialize the rest of the blocks to be free
0180 CE333E           (/home/strick/6809):00251                 ldu     #DAT.Free
0183 EF81             (/home/strick/6809):00252         L00EF   stu     ,x++
0185 4A               (/home/strick/6809):00253                 deca    
0186 26FB             (/home/strick/6809):00254                 bne     L00EF
                      (/home/strick/6809):00255                         
0188 CE003F           (/home/strick/6809):00256                 ldu     #$003F          Block $3F is in use, at the top of system DAT image
018B EF84             (/home/strick/6809):00257                 stu     ,x
                      (/home/strick/6809):00258                         
018D 9E20             (/home/strick/6809):00259                 ldx     <D.Tasks        Point to task user table
018F 6C84             (/home/strick/6809):00260                 inc     ,x              mark first 2 in use (system & GrfDrv)
0191 6C01             (/home/strick/6809):00261                 inc     1,x
                      (/home/strick/6809):00262                         
                      (/home/strick/6809):00263         * Setup system memory map
0193 9E4E             (/home/strick/6809):00264                 ldx     <D.SysMem       Get system memory map pointer
0195 D6A7             (/home/strick/6809):00265                 ldb     <D.CCStk        Get MSB of top of CC memory
0197 6C80             (/home/strick/6809):00266         L0104   inc     ,x+             Mark it as used
0199 5A               (/home/strick/6809):00267                 decb                    Done?
019A 26FB             (/home/strick/6809):00268                 bne     L0104           No, go back till done
                      (/home/strick/6809):00269                         
                      (/home/strick/6809):00270         * Calculate memory size
019C 9E40             (/home/strick/6809):00271                 ldx     <D.BlkMap       get ptr to 8k block map
019E 6C883F           (/home/strick/6809):00272                 inc     <$3F,x          mark block $3F as used (kernel)
                      (/home/strick/6809):00273                 IFNE    H6309
01A1 CD00080100       (/home/strick/6809):00274                 ldq     #$00080100      e=Marker, D=Block # to check
01A6 1048             (/home/strick/6809):00275         L0111   asld                    get next block #
01A8 F7FFA5           (/home/strick/6809):00276                 stb     >$FFA5          Map block into block 6 of my task
01AB 11A789A000       (/home/strick/6809):00277                 ste     >-$6000,x       save marker to that block
01B0 11A184           (/home/strick/6809):00278                 cmpe    ,x              did it ghost to block 0?
01B3 26F1             (/home/strick/6809):00279                 bne     L0111           No, keep going till ghost is found
01B5 D7A3             (/home/strick/6809):00280                 stb     <D.MemSz        Save # 8k mem blocks that exist
01B7 103010           (/home/strick/6809):00281                 addr    x,d             add number of blocks to block map start
                      (/home/strick/6809):00282                 ELSE    
                      (/home/strick/6809):00283                 ldd     #$0008
01BA                  (/home/strick/6809):00284         L0111   aslb    
                      (/home/strick/6809):00285                 rola    
                      (/home/strick/6809):00286                 stb     >$FFA5
                      (/home/strick/6809):00287                 pshs    a
                      (/home/strick/6809):00288                 lda     #$01
                      (/home/strick/6809):00289                 sta     >-$6000,x
                      (/home/strick/6809):00290                 cmpa    ,x
                      (/home/strick/6809):00291                 puls    a
                      (/home/strick/6809):00292                 bne     L0111
                      (/home/strick/6809):00293                 stb     <D.MemSz
                      (/home/strick/6809):00294                 pshs    x
                      (/home/strick/6809):00295                 addd    ,s++
                      (/home/strick/6809):00296                 ENDC    
01BA DD42             (/home/strick/6809):00297                 std     <D.BlkMap+2     save block map end pointer
                      (/home/strick/6809):00298                         
                      (/home/strick/6809):00299         * [D] at this point will contain 1 of the following:
                      (/home/strick/6809):00300         * $0210 - 128k
                      (/home/strick/6809):00301         * $0220 - 256k
                      (/home/strick/6809):00302         * $0240 - 512k
                      (/home/strick/6809):00303         * $0280 - 1024k
                      (/home/strick/6809):00304         * $0300 - 2048k
01BC C530             (/home/strick/6809):00305                 bitb    #%00110000      block above 128K-256K?
01BE 270F             (/home/strick/6809):00306                 beq     L0170           yes, no need to mark block map
01C0 5D               (/home/strick/6809):00307                 tstb                    2 meg?
01C1 270C             (/home/strick/6809):00308                 beq     L0170           yes, skip this
                      (/home/strick/6809):00309         * Mark blocks from 128k-256K to block $3F as NOT RAM
01C3 3A               (/home/strick/6809):00310                 abx                     add maximum block number to block map start
01C4 301F             (/home/strick/6809):00311                 leax    -1,x            Skip good blocks that are RAM
01C6 8680             (/home/strick/6809):00312                 lda     #NotRAM         Not RAM flag
01C8 C03F             (/home/strick/6809):00313                 subb    #$3F            Calculate # blocks to mark as not RAM
01CA A780             (/home/strick/6809):00314         L0127   sta     ,x+             Mark them all
01CC 5A               (/home/strick/6809):00315                 decb    
01CD 26FB             (/home/strick/6809):00316                 bne     L0127
                      (/home/strick/6809):00317                         
01CF 8EED00           (/home/strick/6809):00318         L0170   ldx     #Bt.Start       start address of the boot track in memory
01D2 8612             (/home/strick/6809):00319                 lda     #18             size of the boot track: B=$00 from L0127 loop, above
01D4 170757           (/home/strick/6809):00320                 lbsr    I.VBlock        go verify it
                      (/home/strick/6809):00321                         
01D7 8D2D             (/home/strick/6809):00322                 bsr     L01D2           go mark system map
                      (/home/strick/6809):00323                         
                      (/home/strick/6809):00324         * See if init module is in memory already
01D9 308C46           (/home/strick/6809):00325         L01B0   leax    <init,pc        point to 'Init' module name
01DC 8D3E             (/home/strick/6809):00326                 bsr     link            try & link it
01DE 2407             (/home/strick/6809):00327                 bcc     L01BF           no error, go on
01E0 103F35           (/home/strick/6809):00328         L01B8   os9     F$Boot          error linking init, try & load boot file
01E3 24F4             (/home/strick/6809):00329                 bcc     L01B0           got it, try init again
01E5 201B             (/home/strick/6809):00330                 bra     L01CE           error, re-booting do D.Crash
                      (/home/strick/6809):00331         * Save pointer to init module and execute krnp2
01E7 DF24             (/home/strick/6809):00332         L01BF   stu     <D.Init         Save init module pointer
01E9 A6C81B           (/home/strick/6809):00333                 lda     Feature1,u      Get feature byte #1 from init module
01EC 8501             (/home/strick/6809):00334                 bita    #CRCOn          CRC feature on?
01EE 2702             (/home/strick/6809):00335                 beq     ShowI           if not, continue
01F0 0C3B             (/home/strick/6809):00336                 inc     <D.CRC          else inc. CRC flag
01F2 8669             (/home/strick/6809):00337         ShowI   lda     #'i             found init module
01F4 9D5E             (/home/strick/6809):00338                 jsr     <D.BtBug
                      (/home/strick/6809):00339                         
01F6 308C2D           (/home/strick/6809):00340         L01C1   leax    <krnp2,pc       Point to it's name
01F9 8D21             (/home/strick/6809):00341                 bsr     link            Try to link it
01FB 2407             (/home/strick/6809):00342                 bcc     L01D0           It worked, execute it
01FD 103F35           (/home/strick/6809):00343                 os9     F$Boot          It doesn't exist try re-booting
0200 24F4             (/home/strick/6809):00344                 bcc     L01C1           No error's, let's try to link it again
0202 0E6B             (/home/strick/6809):00345         L01CE   jmp     <D.Crash        obviously can't do it, crash machine
0204 6EA4             (/home/strick/6809):00346         L01D0   jmp     ,y              execute krnp2
                      (/home/strick/6809):00347                         
                      (/home/strick/6809):00348         * Mark kernel in system memory map as used memory (256 byte blocks)
0206 9E4E             (/home/strick/6809):00349         L01D2   ldx     <D.SysMem       Get system mem ptr
0208 CC80ED           (/home/strick/6809):00350                 ldd     #NotRAM*256+(Bt.Start/256)      B = MSB of start of the boot
020B 3A               (/home/strick/6809):00351                 abx                     point to Bt.Start - start of boot track
020C 53               (/home/strick/6809):00352                 comb                    we have $FF-$ED pages to mark as used
020D A785             (/home/strick/6809):00353                 sta     b,x             Mark I/O as not RAM
020F 8601             (/home/strick/6809):00354         L01DF   lda     #RAMinUse       get in use flag
0211 A780             (/home/strick/6809):00355         L01E1   sta     ,x+             save it
0213 5A               (/home/strick/6809):00356                 decb                    done?
0214 26FB             (/home/strick/6809):00357                 bne     L01E1           no, keep going
0216 9E40             (/home/strick/6809):00358                 ldx     <D.BlkMap       get pointer to start of block map
0218 A7883F           (/home/strick/6809):00359                 sta     <$3f,x          mark kernel block as RAMinUse, instead of ModInBlk
021B 39               (/home/strick/6809):00360         S.AltIRQ        rts             return
                      (/home/strick/6809):00361                         
                      (/home/strick/6809):00362         * Link module pointed to by X
021C 86C0             (/home/strick/6809):00363         link    lda     #Systm          Attempt to link system module
021E 103F00           (/home/strick/6809):00364                 os9     F$Link
0221 39               (/home/strick/6809):00365                 rts     
                      (/home/strick/6809):00366                         
0222 496E69F4         (/home/strick/6809):00367         init    fcs     'Init'
0226 6B726E70B2       (/home/strick/6809):00368         krnp2   fcs     'krnp2'
                      (/home/strick/6809):00369                         
                      (/home/strick/6809):00370         * Service vector call pointers
022B 00               (/home/strick/6809):00371         SysCalls        fcb     F$Link
022C 0185             (/home/strick/6809):00372                 fdb     FLink-*-2
022E 10               (/home/strick/6809):00373                 fcb     F$PrsNam
022F 0501             (/home/strick/6809):00374                 fdb     FPrsNam-*-2
0231 11               (/home/strick/6809):00375                 fcb     F$CmpNam
0232 058E             (/home/strick/6809):00376                 fdb     FCmpNam-*-2
0234 91               (/home/strick/6809):00377                 fcb     F$CmpNam+SysState
0235 0596             (/home/strick/6809):00378                 fdb     FSCmpNam-*-2
0237 17               (/home/strick/6809):00379                 fcb     F$CRC
0238 0404             (/home/strick/6809):00380                 fdb     FCRC-*-2
023A A8               (/home/strick/6809):00381                 fcb     F$SRqMem+SysState
023B 05ED             (/home/strick/6809):00382                 fdb     FSRqMem-*-2
023D A9               (/home/strick/6809):00383                 fcb     F$SRtMem+SysState
023E 063C             (/home/strick/6809):00384                 fdb     FSRtMem-*-2
0240 AC               (/home/strick/6809):00385                 fcb     F$AProc+SysState
0241 0AA8             (/home/strick/6809):00386                 fdb     FAProc-*-2
0243 AD               (/home/strick/6809):00387                 fcb     F$NProc+SysState
0244 0B24             (/home/strick/6809):00388                 fdb     FNProc-*-2
0246 AE               (/home/strick/6809):00389                 fcb     F$VModul+SysState
0247 0228             (/home/strick/6809):00390                 fdb     FVModul-*-2
0249 B2               (/home/strick/6809):00391                 fcb     F$SSvc+SysState
024A 013C             (/home/strick/6809):00392                 fdb     FSSvc-*-2
024C B4               (/home/strick/6809):00393                 fcb     F$SLink+SysState
024D 0157             (/home/strick/6809):00394                 fdb     FSLink-*-2
024F B5               (/home/strick/6809):00395                 fcb     F$Boot+SysState
0250 0686             (/home/strick/6809):00396                 fdb     FBoot-*-2
0252 B6               (/home/strick/6809):00397                 fcb     F$BtMem+SysState
0253 05D5             (/home/strick/6809):00398                 fdb     FSRqMem-*-2
                      (/home/strick/6809):00399                 IFNE    H6309
0255 1B               (/home/strick/6809):00400                 fcb     F$CpyMem
0256 08A9             (/home/strick/6809):00401                 fdb     FCpyMem-*-2
                      (/home/strick/6809):00402                 ENDC    
0258 B8               (/home/strick/6809):00403                 fcb     F$Move+SysState
0259 08F4             (/home/strick/6809):00404                 fdb     FMove-*-2
025B BA               (/home/strick/6809):00405                 fcb     F$AllImg+SysState
025C 0745             (/home/strick/6809):00406                 fdb     FAllImg-*-2
025E BC               (/home/strick/6809):00407                 fcb     F$SetImg+SysState
025F 0802             (/home/strick/6809):00408                 fdb     FFreeLB-*-2
0261 BD               (/home/strick/6809):00409                 fcb     F$FreeLB+SysState
0262 07EC             (/home/strick/6809):00410                 fdb     FSFreeLB-*-2
0264 BE               (/home/strick/6809):00411                 fcb     F$FreeHB+SysState
0265 07A3             (/home/strick/6809):00412                 fdb     FFreeHB-*-2
0267 BF               (/home/strick/6809):00413                 fcb     F$AllTsk+SysState
0268 09DE             (/home/strick/6809):00414                 fdb     FAllTsk-*-2
026A C0               (/home/strick/6809):00415                 fcb     F$DelTsk+SysState
026B 09EB             (/home/strick/6809):00416                 fdb     FDelTsk-*-2
026D C1               (/home/strick/6809):00417                 fcb     F$SetTsk+SysState
026E 09F8             (/home/strick/6809):00418                 fdb     FSetTsk-*-2
0270 C2               (/home/strick/6809):00419                 fcb     F$ResTsk+SysState
0271 0A16             (/home/strick/6809):00420                 fdb     FResTsk-*-2
0273 C3               (/home/strick/6809):00421                 fcb     F$RelTsk+SysState
0274 0A31             (/home/strick/6809):00422                 fdb     FRelTsk-*-2
0276 C4               (/home/strick/6809):00423                 fcb     F$DATLog+SysState
0277 0805             (/home/strick/6809):00424                 fdb     FDATLog-*-2
0279 C6               (/home/strick/6809):00425                 fcb     F$LDAXY+SysState
027A 081B             (/home/strick/6809):00426                 fdb     FLDAXY-*-2
027C C8               (/home/strick/6809):00427                 fcb     F$LDDDXY+SysState
027D 0856             (/home/strick/6809):00428                 fdb     FLDDDXY-*-2
027F C9               (/home/strick/6809):00429                 fcb     F$LDABX+SysState
0280 0992             (/home/strick/6809):00430                 fdb     FLDABX-*-2
0282 CA               (/home/strick/6809):00431                 fcb     F$STABX+SysState
0283 09A9             (/home/strick/6809):00432                 fdb     FSTABX-*-2
0285 CD               (/home/strick/6809):00433                 fcb     F$ELink+SysState
0286 0123             (/home/strick/6809):00434                 fdb     FELink-*-2
0288 CE               (/home/strick/6809):00435                 fcb     F$FModul+SysState
0289 03F3             (/home/strick/6809):00436                 fdb     FFModul-*-2
028B D7               (/home/strick/6809):00437                 fcb     F$VBlock+SysState
028C 069C             (/home/strick/6809):00438                 fdb     FVBlock-*-2
                      (/home/strick/6809):00439                 IFNE    H6309
028E 51               (/home/strick/6809):00440                 fcb     F$DelRAM
028F 06ED             (/home/strick/6809):00441                 fdb     FDelRAM-*-2
                      (/home/strick/6809):00442                 ENDC    
0291 80               (/home/strick/6809):00443                 fcb     $80
                      (/home/strick/6809):00444                         
                      (/home/strick/6809):00445         * SWI3 vector entry
0292 8617             (/home/strick/6809):00446         XSWI3   lda     #P$SWI3         point to SWI3 vector
0294 8C               (/home/strick/6809):00447                 fcb     $8C             skip 2 bytes
                      (/home/strick/6809):00448                         
                      (/home/strick/6809):00449         * SWI vector entry
0295 8613             (/home/strick/6809):00450         XSWI    lda     #P$SWI          point to SWI vector
0297 9E50             (/home/strick/6809):00451                 ldx     <D.Proc         get process pointer
0299 EE86             (/home/strick/6809):00452                 ldu     a,x             user defined SWI[x]?
029B 270A             (/home/strick/6809):00453                 beq     L028E           no, go get option byte
029D 160BB0           (/home/strick/6809):00454         GoUser  lbra    L0E5E           Yes, go call users's routine
                      (/home/strick/6809):00455                         
                      (/home/strick/6809):00456         * SWI2 vector entry
02A0 9E50             (/home/strick/6809):00457         XSWI2   ldx     <D.Proc         get current process descriptor
02A2 EE8815           (/home/strick/6809):00458                 ldu     P$SWI2,x        any SWI vector?
02A5 26F6             (/home/strick/6809):00459                 bne     GoUser          yes, go execute it
                      (/home/strick/6809):00460                         
                      (/home/strick/6809):00461         * Process software interupts from a user state
                      (/home/strick/6809):00462         * Entry: X=Process descriptor pointer of process that made system call
                      (/home/strick/6809):00463         *        U=Register stack pointer
02A7 DEC0             (/home/strick/6809):00464         L028E   ldu     <D.SysSvc       set system call processor to system side
02A9 DFE4             (/home/strick/6809):00465                 stu     <D.XSWI2
02AB DEC4             (/home/strick/6809):00466                 ldu     <D.SysIRQ       do the same thing for IRQ's
02AD DFE8             (/home/strick/6809):00467                 stu     <D.XIRQ
                      (/home/strick/6809):00468                 IFNE    H6309
02AF 61800C           (/home/strick/6809):00469                 oim     #SysState,P$State,x     mark process as in system state
                      (/home/strick/6809):00470                 ELSE    
                      (/home/strick/6809):00471                 lda     P$State,x
                      (/home/strick/6809):00472                 ora     #SysState
                      (/home/strick/6809):00473                 sta     P$State,x
                      (/home/strick/6809):00474                 ENDC    
                      (/home/strick/6809):00475         * copy register stack to process descriptor
02B2 10EF04           (/home/strick/6809):00476                 sts     P$SP,x          save stack pointer
02B5 328901F2         (/home/strick/6809):00477                 leas    (P$Stack-R$Size),x      point S to register stack destination
                      (/home/strick/6809):00478                         
                      (/home/strick/6809):00479                 IFNE    H6309
02B9 336D             (/home/strick/6809):00480                 leau    R$Size-1,s      point to last byte of destination register stack
02BB 313F             (/home/strick/6809):00481                 leay    -1,y            point to caller's register stack in $FEE1
02BD 1086000E         (/home/strick/6809):00482                 ldw     #R$Size         size of the register stack
02C1 113923           (/home/strick/6809):00483                 tfm     y-,u-
02C4 33E4             (/home/strick/6809):00484                 leau    ,s              needed because the TFM is u-, not -u (post, not pre)
                      (/home/strick/6809):00485                 ELSE    
                      (/home/strick/6809):00486         * Note!  R$Size MUST BE an EVEN number of bytes for this to work!
                      (/home/strick/6809):00487                 leau    R$Size,s        point to last byte of destination register stack
                      (/home/strick/6809):00488                 lda     #R$Size/2
02C6                  (/home/strick/6809):00489         Loop3   ldx     ,--y
                      (/home/strick/6809):00490                 stx     ,--u
                      (/home/strick/6809):00491                 deca    
                      (/home/strick/6809):00492                 bne     Loop3
                      (/home/strick/6809):00493                 ENDC    
02C6 1CAF             (/home/strick/6809):00494                 andcc   #^IntMasks
                      (/home/strick/6809):00495         * B=function code already from calling process: DON'T USE IT!
02C8 AE4C             (/home/strick/6809):00496                 ldx     R$PC,u          get where PC was from process
02CA 3001             (/home/strick/6809):00497                 leax    1,x             move PC past option
02CC AF4C             (/home/strick/6809):00498                 stx     R$PC,u          save updated PC to process
                      (/home/strick/6809):00499         * execute function call
02CE 109EC8           (/home/strick/6809):00500                 ldy     <D.UsrDis       get user dispatch table pointer
02D1 170089           (/home/strick/6809):00501                 lbsr    L033B           go execute option
                      (/home/strick/6809):00502                 IFNE    H6309
02D4 62AFC4           (/home/strick/6809):00503                 aim     #^IntMasks,R$CC,u       Clear interrupt flags in caller's CC
                      (/home/strick/6809):00504                 ELSE    
                      (/home/strick/6809):00505                 lda     R$CC,u
                      (/home/strick/6809):00506                 anda    #^IntMasks
                      (/home/strick/6809):00507                 sta     R$CC,u
                      (/home/strick/6809):00508                 ENDC    
02D7 9E50             (/home/strick/6809):00509                 ldx     <D.Proc         get current process ptr
                      (/home/strick/6809):00510                 IFNE    H6309
02D9 625F0C           (/home/strick/6809):00511                 aim     #^(SysState+TimOut),P$State,x   Clear system & timeout flags
                      (/home/strick/6809):00512                 ELSE    
                      (/home/strick/6809):00513                 lda     P$State,x
                      (/home/strick/6809):00514                 anda    #^(SysState+TimOut)
                      (/home/strick/6809):00515                 sta     P$State,x
                      (/home/strick/6809):00516                 ENDC    
                      (/home/strick/6809):00517                         
                      (/home/strick/6809):00518         * Check for image change now, which lets stuff like F$MapBlk and F$ClrBlk
                      (/home/strick/6809):00519         * do the short-circuit thing, too.  Adds about 20 cycles to each system call.
02DC 170983           (/home/strick/6809):00520                 lbsr    TstImg          it doesn't hurt to call this twice
02DF A60C             (/home/strick/6809):00521                 lda     P$State,x       get current state of the process
02E1 AA8819           (/home/strick/6809):00522                 ora     <P$Signal,x     is there a pending signal?
02E4 973E             (/home/strick/6809):00523                 sta     <D.Quick        save quick return flag
02E6 2705             (/home/strick/6809):00524                 beq     AllClr          if nothing's have changed, do full checks
                      (/home/strick/6809):00525                         
02E8 8D29             (/home/strick/6809):00526         DoFull  bsr     L02DA           move the stack frame back to user state
02EA 160A7B           (/home/strick/6809):00527                 lbra    L0D80           go back to the process
                      (/home/strick/6809):00528                         
                      (/home/strick/6809):00529         * add ldu P$SP,x, etc...
     02ED             (/home/strick/6809):00530         AllClr  equ     *
                      (/home/strick/6809):00531                 IFNE    H6309
02ED 0C7C             (/home/strick/6809):00532                 inc     <D.QCnt
02EF 021F7C           (/home/strick/6809):00533                 aim     #$1F,<D.QCnt
02F2 27F4             (/home/strick/6809):00534                 beq     DoFull          every 32 system calls, do the full check
02F4 1086000E         (/home/strick/6809):00535                 ldw     #R$Size         --- size of the register stack
02F8 108EFEDD         (/home/strick/6809):00536                 ldy     #Where+SWIStack --- to stack at top of memory
02FC 1A50             (/home/strick/6809):00537                 orcc    #IntMasks
02FE 113832           (/home/strick/6809):00538                 tfm     u+,y+           --- move the stack to the top of memory
                      (/home/strick/6809):00539                 ELSE    
                      (/home/strick/6809):00540                 lda     <D.QCnt
                      (/home/strick/6809):00541                 inca    
                      (/home/strick/6809):00542                 anda    #$1F
                      (/home/strick/6809):00543                 sta     <D.QCnt
                      (/home/strick/6809):00544                 beq     DoFull
                      (/home/strick/6809):00545                 ldb     #R$Size
                      (/home/strick/6809):00546                 ldy     #Where+SWIStack
                      (/home/strick/6809):00547                 orcc    #IntMasks
0301                  (/home/strick/6809):00548         Loop4   lda     ,u+
                      (/home/strick/6809):00549                 sta     ,y+
                      (/home/strick/6809):00550                 decb    
                      (/home/strick/6809):00551                 bne     Loop4
                      (/home/strick/6809):00552                 ENDC    
0301 160AD3           (/home/strick/6809):00553                 lbra    BackTo1         otherwise simply return to the user
                      (/home/strick/6809):00554                         
                      (/home/strick/6809):00555         * Copy register stack from user to system
                      (/home/strick/6809):00556         * Entry: U=Ptr to Register stack in process dsc
0304 3471             (/home/strick/6809):00557         L02CB   pshs    cc,x,y,u        preserve registers
0306 E606             (/home/strick/6809):00558                 ldb     P$Task,x        get task #
0308 AE04             (/home/strick/6809):00559                 ldx     P$SP,x  get stack pointer
030A 1708F1           (/home/strick/6809):00560                 lbsr    L0BF3           calculate block offset (only affects A&X)
030D 3089A000         (/home/strick/6809):00561                 leax    -$6000,x        adjust pointer to where memory map will be
0311 200F             (/home/strick/6809):00562                 bra     L02E9           go copy it
                      (/home/strick/6809):00563                         
                      (/home/strick/6809):00564         * Copy register stack from system to user
                      (/home/strick/6809):00565         * Entry: U=Ptr to Register stack in process dsc
0313 3471             (/home/strick/6809):00566         L02DA   pshs    cc,x,y,u        preserve registers
0315 E606             (/home/strick/6809):00567                 ldb     P$Task,x        get task # of destination
0317 AE04             (/home/strick/6809):00568                 ldx     P$SP,x          get stack pointer
0319 1708E2           (/home/strick/6809):00569                 lbsr    L0BF3           calculate block offset (only affects A&X)
031C 3089A000         (/home/strick/6809):00570                 leax    -$6000,x        adjust pointer to where memory map will be
0320 1E12             (/home/strick/6809):00571                 exg     x,y             swap pointers & copy
                      (/home/strick/6809):00572         * Copy a register stack
                      (/home/strick/6809):00573         * Entry: X=Source
                      (/home/strick/6809):00574         *        Y=Destination
                      (/home/strick/6809):00575         *        A=Offset into DAT image of stack
                      (/home/strick/6809):00576         *        B=Task #
0322 33C6             (/home/strick/6809):00577         L02E9   leau    a,u             point to block # of where stack is
0324 A641             (/home/strick/6809):00578                 lda     1,u             get first block
0326 E643             (/home/strick/6809):00579                 ldb     3,u             get a second just in case of overlap
0328 1A50             (/home/strick/6809):00580                 orcc    #IntMasks       shutdown interupts while we do this
032A FDFFA5           (/home/strick/6809):00581                 std     >$FFA5          map blocks in
                      (/home/strick/6809):00582                 IFNE    H6309
032D 1086000E         (/home/strick/6809):00583                 ldw     #R$Size         get size of register stack
0331 113812           (/home/strick/6809):00584                 tfm     x+,y+           copy it
                      (/home/strick/6809):00585                 ELSE    
                      (/home/strick/6809):00586                 ldb     #R$Size
0334                  (/home/strick/6809):00587         Loop5   lda     ,x+
                      (/home/strick/6809):00588                 sta     ,y+
                      (/home/strick/6809):00589                 decb    
                      (/home/strick/6809):00590                 bne     Loop5
                      (/home/strick/6809):00591                 ENDC    
0334 9E4C             (/home/strick/6809):00592                 ldx     <D.SysDAT       remap the blocks we took out
0336 A60B             (/home/strick/6809):00593                 lda     $0B,x
0338 E60D             (/home/strick/6809):00594                 ldb     $0D,x
033A FDFFA5           (/home/strick/6809):00595                 std     >$FFA5
033D 35F1             (/home/strick/6809):00596                 puls    cc,x,y,u,pc     restore & return
                      (/home/strick/6809):00597                         
                      (/home/strick/6809):00598         * Process software interupts from system state
                      (/home/strick/6809):00599         * Entry: U=Register stack pointer
033F 33E4             (/home/strick/6809):00600         SysCall leau    ,s              get pointer to register stack
0341 96A4             (/home/strick/6809):00601                 lda     <D.SSTskN       Get system task # (0=SYSTEM, 1=GRFDRV)
0343 0FA4             (/home/strick/6809):00602                 clr     <D.SSTskN       Force to System Process
0345 3402             (/home/strick/6809):00603                 pshs    a               Save the system task number
0347 A6C4             (/home/strick/6809):00604                 lda     ,u              Restore callers CC register (R$CC=$00)
0349 1F8A             (/home/strick/6809):00605                 tfr     a,cc            make it current
034B AE4C             (/home/strick/6809):00606                 ldx     R$PC,u          Get my caller's PC register
034D 3001             (/home/strick/6809):00607                 leax    1,x             move PC to next position
034F AF4C             (/home/strick/6809):00608                 stx     R$PC,u          Save my caller's updated PC register
0351 109EC2           (/home/strick/6809):00609                 ldy     <D.SysDis       get system dispatch table pointer
0354 8D07             (/home/strick/6809):00610                 bsr     L033B           execute system call
0356 3502             (/home/strick/6809):00611                 puls    a               restore system state task number
0358 160AC9           (/home/strick/6809):00612                 lbra    L0E2B           return to process
                      (/home/strick/6809):00613                         
                      (/home/strick/6809):00614         * Entry: X = system call vector to jump to
035B 6E84             (/home/strick/6809):00615         Sys.Vec jmp     ,x              execute service call
                      (/home/strick/6809):00616                         
                      (/home/strick/6809):00617         * Execute system call
                      (/home/strick/6809):00618         * Entry: B=Function call #
                      (/home/strick/6809):00619         *        Y=Function dispatch table pointer (D.SysDis or D.UsrDis)
035D                  (/home/strick/6809):00620         L033B           
035D 58               (/home/strick/6809):00621                 lslb                    is it a I/O call? (Also multiplys by 2 for offset)
035E 241E             (/home/strick/6809):00622                 bcc     L0345           no, go get normal vector
                      (/home/strick/6809):00623         * Execute I/O system calls
0360 AEA900FE         (/home/strick/6809):00624                 ldx     IOEntry,y       get IOMan vector
                      (/home/strick/6809):00625         * Execute the system call
0364 3440             (/home/strick/6809):00626         L034F   pshs    u               preserve register stack pointer
0366 AD9F00F0         (/home/strick/6809):00627                 jsr     [D.SysVec]      perform a vectored system call
036A 3540             (/home/strick/6809):00628                 puls    u               restore pointer
036C 1FA8             (/home/strick/6809):00629         L0355   tfr     cc,a            move CC to A for stack update
036E 2402             (/home/strick/6809):00630                 bcc     L035B           go update it if no error from call
0370 E742             (/home/strick/6809):00631                 stb     R$B,u           save error code to caller's B
0372 E6C4             (/home/strick/6809):00632         L035B   ldb     R$CC,u          get callers CC, R$CC=$00
                      (/home/strick/6809):00633                 IFNE    H6309
0374 10842FD0         (/home/strick/6809):00634                 andd    #$2FD0          [A]=H,N,Z,V,C [B]=E,F,I
0378 103598           (/home/strick/6809):00635                 orr     b,a             merge them together
                      (/home/strick/6809):00636                 ELSE    
                      (/home/strick/6809):00637                 anda    #$2F            [A]=H,N,Z,V,C
                      (/home/strick/6809):00638                 andb    #$D0            [B]=E,F,I
                      (/home/strick/6809):00639                 pshs    b
                      (/home/strick/6809):00640                 ora     ,s+
                      (/home/strick/6809):00641                 ENDC    
037B A7C4             (/home/strick/6809):00642                 sta     R$CC,u          return it to caller, R$CC=$00
037D 39               (/home/strick/6809):00643                 rts     
                      (/home/strick/6809):00644                         
                      (/home/strick/6809):00645         * Execute regular system calls
037E                  (/home/strick/6809):00646         L0345           
037E 4F               (/home/strick/6809):00647                 clra                    clear MSB of offset
037F AEAB             (/home/strick/6809):00648                 ldx     d,y             get vector to call
0381 26E1             (/home/strick/6809):00649                 bne     L034F           it's initialized, go execute it
0383 53               (/home/strick/6809):00650                 comb                    set carry for error
0384 C6D0             (/home/strick/6809):00651                 ldb     #E$UnkSvc       get error code
0386 20E4             (/home/strick/6809):00652                 bra     L0355           return with it
                      (/home/strick/6809):00653                         
                      (/home/strick/6809):00654                 use     fssvc.asm
                      (        fssvc.asm):00001         **************************************************
                      (        fssvc.asm):00002         * System Call: F$SSVC
                      (        fssvc.asm):00003         *
                      (        fssvc.asm):00004         * Function: Install system calls
                      (        fssvc.asm):00005         *
                      (        fssvc.asm):00006         * Input:  Y = Address of service request init table
                      (        fssvc.asm):00007         *
                      (        fssvc.asm):00008         * Output: None
                      (        fssvc.asm):00009         *
                      (        fssvc.asm):00010         * Error:  CC = C bit set; B = error code
                      (        fssvc.asm):00011         *
0388 10AE48           (        fssvc.asm):00012         FSSvc    ldy    R$Y,u       get pointer to table
038B 2012             (        fssvc.asm):00013                  bra    SysSvc      start moving
                      (        fssvc.asm):00014         * Main move loop
038D 4F               (        fssvc.asm):00015         L036D    clra               clear MSB of table offset
038E 58               (        fssvc.asm):00016                  lslb               multiply function # by 2 to get offset into table
038F 1F03             (        fssvc.asm):00017                  tfr    d,u         copy it to U
0391 ECA1             (        fssvc.asm):00018                  ldd    ,y++        get vector to function handler
0393 30AB             (        fssvc.asm):00019                  leax   d,y         offset X from current Y
0395 DCC2             (        fssvc.asm):00020                  ldd    <D.SysDis   get system dispatch table pointer
0397 AFCB             (        fssvc.asm):00021                  stx    d,u         save vector into place
0399 2504             (        fssvc.asm):00022                  bcs    SysSvc      it was a privliged call, skip ahead
039B DCC8             (        fssvc.asm):00023                  ldd    <D.UsrDis   get user displat table pointer
039D AFCB             (        fssvc.asm):00024                  stx    d,u         save vector into place
039F E6A0             (        fssvc.asm):00025         SysSvc   ldb    ,y+         get callcode
03A1 C180             (        fssvc.asm):00026                  cmpb   #$80        done?
03A3 26E8             (        fssvc.asm):00027                  bne    L036D       no, keep going
03A5 39               (        fssvc.asm):00028                  rts                return
                      (/home/strick/6809):00655                         
                      (/home/strick/6809):00656                 use     flink.asm
                      (        flink.asm):00001                  IFGT   Level-1
                      (        flink.asm):00002         
                      (        flink.asm):00003         **************************************************
                      (        flink.asm):00004         * System Call: F$SLink
                      (        flink.asm):00005         *
                      (        flink.asm):00006         * Function: System Link
                      (        flink.asm):00007         *
                      (        flink.asm):00008         * Input:  A = Module type
                      (        flink.asm):00009         *         X = Module name string pointer
                      (        flink.asm):00010         *         Y = Name string DAT image pointer
                      (        flink.asm):00011         *
                      (        flink.asm):00012         * Output: A = Module type
                      (        flink.asm):00013         *         B = Module revision
                      (        flink.asm):00014         *         X = Updated name string pointer
                      (        flink.asm):00015         *         Y = Module entry point
                      (        flink.asm):00016         *         U = Module pointer
                      (        flink.asm):00017         *
                      (        flink.asm):00018         * Error:  CC = C bit set; B = error code
                      (        flink.asm):00019         *
03A6 10AE48           (        flink.asm):00020         FSLink   ldy    R$Y,u       get DAT image pointer of name
03A9 200D             (        flink.asm):00021                  bra    L0398       skip ahead
                      (        flink.asm):00022         
                      (        flink.asm):00023         
                      (        flink.asm):00024         **************************************************
                      (        flink.asm):00025         * System Call: F$ELink
                      (        flink.asm):00026         *
                      (        flink.asm):00027         * Function: Link using module directory entry
                      (        flink.asm):00028         *
                      (        flink.asm):00029         * Input:  B = Module type
                      (        flink.asm):00030         *         X = Pointer to module directory entry
                      (        flink.asm):00031         *
                      (        flink.asm):00032         * Output: None
                      (        flink.asm):00033         *
                      (        flink.asm):00034         * Error:  CC = C bit set; B = error code
                      (        flink.asm):00035         *
03AB 3440             (        flink.asm):00036         FELink   pshs   u           preserve register stack pointer
03AD E642             (        flink.asm):00037                  ldb    R$B,u       get module type
03AF AE46             (        flink.asm):00038                  ldx    R$X,u       get pointer to module directory entry
03B1 201A             (        flink.asm):00039                  bra    L03AF       skip ahead
                      (        flink.asm):00040         
                      (        flink.asm):00041                  ENDC
                      (        flink.asm):00042         
                      (        flink.asm):00043         **************************************************
                      (        flink.asm):00044         * System Call: F$Link
                      (        flink.asm):00045         *
                      (        flink.asm):00046         * Function: Link to a memory module
                      (        flink.asm):00047         *
                      (        flink.asm):00048         * Input:  X = Address of module name
                      (        flink.asm):00049         *         A = Type/Language byte
                      (        flink.asm):00050         *
                      (        flink.asm):00051         * Output: X = Advanced past module name
                      (        flink.asm):00052         *         Y = Module entry point address
                      (        flink.asm):00053         *         U = Module header address
                      (        flink.asm):00054         *         A = Module type/language byte
                      (        flink.asm):00055         *         B = Module attributes/revision byte
                      (        flink.asm):00056         *
                      (        flink.asm):00057         * Error:  CC = C bit set; B = error code
                      (        flink.asm):00058         *
     03B3             (        flink.asm):00059         FLink    equ    *
                      (        flink.asm):00060                  IFGT   Level-1
03B3 9E50             (        flink.asm):00061                  ldx    <D.Proc     get pointer to DAT image
03B5 318840           (        flink.asm):00062                  leay   P$DATImg,x  point to process DAT image
                      (        flink.asm):00063                  ENDC
03B8 3440             (        flink.asm):00064         L0398    pshs   u           preserve register stack pointer
03BA AE46             (        flink.asm):00065                  ldx    R$X,u       get pointer to path name
03BC A641             (        flink.asm):00066                  lda    R$A,u       get module type
03BE 1702D1           (        flink.asm):00067                  lbsr   L068D       search module directory
03C1 2577             (        flink.asm):00068                  bcs    LinkErr     not there, exit with error
03C3 31C4             (        flink.asm):00069                  leay   ,u          point to module directory entry
03C5 EEE4             (        flink.asm):00070                  ldu    ,s          get register stack pointer
03C7 AF46             (        flink.asm):00071                  stx    R$X,u       save updated module name pointer
03C9 ED41             (        flink.asm):00072                  std    R$D,u       save type/language
03CB 30A4             (        flink.asm):00073                  leax   ,y          point to directory entry
03CD C580             (        flink.asm):00074         L03AF    bitb   #ReEnt      is it re-entrant?
03CF 2608             (        flink.asm):00075                  bne    L03BB       yes, skip ahead
03D1 EC06             (        flink.asm):00076                  ldd    MD$Link,x   is module busy?
03D3 2704             (        flink.asm):00077                  beq    L03BB       no, go link it
03D5 C6D1             (        flink.asm):00078                  ldb    #E$ModBsy   return module busy error
03D7 2061             (        flink.asm):00079                  bra    LinkErr     return
03D9 EC04             (        flink.asm):00080         L03BB    ldd    MD$MPtr,x   get module pointer
03DB 3416             (        flink.asm):00081                  pshs   d,x         preserve that & directory pointer
03DD 10AE84           (        flink.asm):00082                  ldy    MD$MPDAT,x  get module DAT image pointer
03E0 EC02             (        flink.asm):00083                  ldd    MD$MBSiz,x  get block size
03E2 C31FFF           (        flink.asm):00084                  addd   #$1FFF      round it up
03E5 1F89             (        flink.asm):00085                  tfr    a,b
03E7 54               (        flink.asm):00086                  lsrb
03E8 54               (        flink.asm):00087                  lsrb
03E9 54               (        flink.asm):00088                  lsrb
03EA 54               (        flink.asm):00089                  lsrb
03EB 54               (        flink.asm):00090                  lsrb
                      (        flink.asm):00091         *         adda   #$02
03EC 44               (        flink.asm):00092                  lsra
03ED 4C               (        flink.asm):00093                  inca             instead of adda #2, above
03EE 44               (        flink.asm):00094                  lsra
03EF 44               (        flink.asm):00095                  lsra
03F0 44               (        flink.asm):00096                  lsra
03F1 44               (        flink.asm):00097                  lsra
03F2 3402             (        flink.asm):00098                  pshs   a
03F4 33A4             (        flink.asm):00099                  leau   ,y          point to module DAT image
03F6 8D46             (        flink.asm):00100                  bsr    L0422       is it already linked in process space?
03F8 240E             (        flink.asm):00101                  bcc    L03EB       yes, skip ahead
03FA A6E4             (        flink.asm):00102                  lda    ,s
03FC 170619           (        flink.asm):00103                  lbsr   L0A33       find free low block in process DAT image
03FF 2404             (        flink.asm):00104                  bcc    L03E8       found some, skip ahead
0401 3265             (        flink.asm):00105                  leas   5,s         purge stack
0403 2035             (        flink.asm):00106                  bra    LinkErr     return error
                      (        flink.asm):00107         
0405 170661           (        flink.asm):00108         L03E8    lbsr   L0A8C       copy memory blocks into process DAT image
0408 C680             (        flink.asm):00109         L03EB    ldb    #P$Links    point to memory block link counts
040A 3A               (        flink.asm):00110                  abx                smaller and faster than leax P$Links,x
040B A7E4             (        flink.asm):00111                  sta    ,s          save block # on stack
040D 48               (        flink.asm):00112                  lsla               account for 2 bytes/entry
040E 3386             (        flink.asm):00113                  leau   a,x         point to block # we want
0410 ECC4             (        flink.asm):00114                  ldd    ,u          get link count for that block
                      (        flink.asm):00115                  IFNE   H6309
0412 104C             (        flink.asm):00116                  incd               bump up by 1
                      (        flink.asm):00117                  ELSE
                      (        flink.asm):00118                  addd   #$0001
                      (        flink.asm):00119                  ENDC
0414 2702             (        flink.asm):00120                  beq    L03FC       If wraps to 0, leave at $FFFF
0416 EDC4             (        flink.asm):00121                  std    ,u          Otherwise, store new link count
0418 EE63             (        flink.asm):00122         L03FC    ldu    $03,s
041A EC46             (        flink.asm):00123                  ldd    MD$Link,u
                      (        flink.asm):00124                  IFNE   H6309
041C 104C             (        flink.asm):00125                  incd
                      (        flink.asm):00126                  ELSE
                      (        flink.asm):00127                  addd   #$0001
                      (        flink.asm):00128                  ENDC
041E 2702             (        flink.asm):00129                  beq    L0406
0420 ED46             (        flink.asm):00130                  std    MD$Link,u
0422 3574             (        flink.asm):00131         L0406    puls   b,x,y,u
0424 170661           (        flink.asm):00132                  lbsr   CmpLBlk
0427 AF4A             (        flink.asm):00133                  stx    R$U,u
0429 AE24             (        flink.asm):00134                  ldx    MD$MPtr,y
042B 10AEA4           (        flink.asm):00135                  ldy    ,y
042E CC0009           (        flink.asm):00136                  ldd    #M$Exec     get offset to execution address
0431 1706AD           (        flink.asm):00137                  lbsr   L0B02       get execution offset
0434 E34A             (        flink.asm):00138                  addd   R$U,u       add it to start of module
0436 ED48             (        flink.asm):00139                  std    R$Y,u       set execution entry point
0438 5F               (        flink.asm):00140                  clrb               No error & return
0439 39               (        flink.asm):00141                  rts   
                      (        flink.asm):00142         
043A 1A01             (        flink.asm):00143         LinkErr  orcc   #Carry      Error & return
043C 35C0             (        flink.asm):00144                  puls   u,pc
                      (        flink.asm):00145         
043E 9E50             (        flink.asm):00146         L0422    ldx    <D.Proc     get pointer to current process
0440 318840           (        flink.asm):00147                  leay   P$DATImg,x  point to process DAT image
0443 4F               (        flink.asm):00148                  clra  
0444 3436             (        flink.asm):00149                  pshs   d,x,y
0446 C008             (        flink.asm):00150                  subb   #DAT.BlCt
0448 50               (        flink.asm):00151                  negb  
0449 58               (        flink.asm):00152                  lslb  
044A 31A5             (        flink.asm):00153                  leay   b,y
                      (        flink.asm):00154                  IFNE   H6309
044C 10A6E4           (        flink.asm):00155         L0430    ldw    ,s          Get counter
                      (        flink.asm):00156                  ELSE
044F                  (        flink.asm):00157         L0430    ldx    ,s
                      (        flink.asm):00158                  ENDC
044F 3460             (        flink.asm):00159                  pshs   u,y
0451 ECA1             (        flink.asm):00160         L0434    ldd    ,y++
0453 10A3C1           (        flink.asm):00161                  cmpd   ,u++
0456 260E             (        flink.asm):00162                  bne    L0449
                      (        flink.asm):00163                  IFNE   H6309
0458 105A             (        flink.asm):00164                  decw               Dec counter
                      (        flink.asm):00165                  ELSE
                      (        flink.asm):00166                  leax   -1,x
                      (        flink.asm):00167                  ENDC
045A 26F5             (        flink.asm):00168                  bne    L0434       If not done, keep going
045C 3546             (        flink.asm):00169                  puls   d,u
045E A364             (        flink.asm):00170                  subd   4,s
0460 54               (        flink.asm):00171                  lsrb  
0461 E7E4             (        flink.asm):00172                  stb    ,s
0463 5F               (        flink.asm):00173                  clrb  
0464 35B6             (        flink.asm):00174                  puls   d,x,y,pc    Restore regs & return
                      (        flink.asm):00175         
0466 3560             (        flink.asm):00176         L0449    puls   u,y
0468 313E             (        flink.asm):00177                  leay   -2,y
046A 10AC64           (        flink.asm):00178                  cmpy   4,s
046D 24DD             (        flink.asm):00179                  bcc    L0430
046F 35B6             (        flink.asm):00180                  puls   d,x,y,pc
                      (/home/strick/6809):00657                         
                      (/home/strick/6809):00658                 use     fvmodul.asm
                      (      fvmodul.asm):00001         **************************************************
                      (      fvmodul.asm):00002         * System Call: F$VModul
                      (      fvmodul.asm):00003         *
                      (      fvmodul.asm):00004         * Function: Verify a module
                      (      fvmodul.asm):00005         *
                      (      fvmodul.asm):00006         * Input:  X = Address of module to verify
                      (      fvmodul.asm):00007         *
                      (      fvmodul.asm):00008         * Output: U = Address of module directory entry
                      (      fvmodul.asm):00009         *
                      (      fvmodul.asm):00010         * Error:  CC = C bit set; B = error code
                      (      fvmodul.asm):00011         *
0471 3440             (      fvmodul.asm):00012         FVModul  pshs   u           preserve register stack pointer
0473 AE46             (      fvmodul.asm):00013                  ldx    R$X,u       get block offset
0475 10AE41           (      fvmodul.asm):00014                  ldy    R$D,u       get DAT image pointer
0478 8D06             (      fvmodul.asm):00015                  bsr    L0463       validate it
047A AEE4             (      fvmodul.asm):00016                  ldx    ,s          get register stack pointer
047C EF0A             (      fvmodul.asm):00017                  stu    R$U,x       save address of module directory entry
047E 35C0             (      fvmodul.asm):00018                  puls   u,pc        restore & return
                      (      fvmodul.asm):00019         
                      (      fvmodul.asm):00020         * Validate module - shortcut for calls within OS9p1 go here (ex. OS9Boot)
                      (      fvmodul.asm):00021         * Entry: X=Module block offset
                      (      fvmodul.asm):00022         *        Y=Module DAT image pointer
0480 3430             (      fvmodul.asm):00023         L0463    pshs   x,y         save block offset & DAT Image ptr
0482 17010D           (      fvmodul.asm):00024                  lbsr   L0586       Go check module ID & header parity
0485 2529             (      fvmodul.asm):00025                  bcs    L0495       Error, exit
0487 CC0006           (      fvmodul.asm):00026                  ldd    #M$Type     Get offset to module type
048A 170654           (      fvmodul.asm):00027                  lbsr   L0B02       get it
048D C40F             (      fvmodul.asm):00028                  andb   #LangMask   Just keep language mask
048F 3406             (      fvmodul.asm):00029                  pshs   d           Preserve ??? & language
0491 CC0004           (      fvmodul.asm):00030                  ldd    #M$Name     get offset to module name
0494 17064A           (      fvmodul.asm):00031                  lbsr   L0B02
0497 308B             (      fvmodul.asm):00032                  leax   d,x         Point X to module name
0499 3502             (      fvmodul.asm):00033                  puls   a           Restore type/language
049B 1701F4           (      fvmodul.asm):00034                  lbsr   L068D
049E 3502             (      fvmodul.asm):00035                  puls   a
04A0 2510             (      fvmodul.asm):00036                  bcs    L0497
04A2 C40F             (      fvmodul.asm):00037                  andb   #$0F
                      (      fvmodul.asm):00038                  IFNE   H6309
04A4 103289           (      fvmodul.asm):00039                  subr   a,b
                      (      fvmodul.asm):00040                  ELSE
                      (      fvmodul.asm):00041                  pshs   a
                      (      fvmodul.asm):00042                  subb   ,s+
                      (      fvmodul.asm):00043                  ENDC
04A7 2509             (      fvmodul.asm):00044                  blo    L0497         If wrapped, skip ahead
04A9 C6E7             (      fvmodul.asm):00045                  ldb    #E$KwnMod
04AB 8C               (      fvmodul.asm):00046                  fcb    $8C        skip 2 bytes
04AC C6CE             (      fvmodul.asm):00047         L0491    ldb    #E$DirFul
04AE 1A01             (      fvmodul.asm):00048         L0493    orcc   #Carry
04B0 35B0             (      fvmodul.asm):00049         L0495    puls   x,y,pc
                      (      fvmodul.asm):00050         
04B2 AEE4             (      fvmodul.asm):00051         L0497    ldx    ,s
04B4 17007E           (      fvmodul.asm):00052                  lbsr   L0524
04B7 25F3             (      fvmodul.asm):00053                  bcs    L0491
04B9 10AFC4           (      fvmodul.asm):00054                  sty    ,u
04BC AF44             (      fvmodul.asm):00055                  stx    MD$MPtr,u
                      (      fvmodul.asm):00056                  IFNE   H6309
04BE 104F             (      fvmodul.asm):00057                  clrd
                      (      fvmodul.asm):00058                  ELSE
                      (      fvmodul.asm):00059                  clra
                      (      fvmodul.asm):00060                  clrb
                      (      fvmodul.asm):00061                  ENDC
04C0 ED46             (      fvmodul.asm):00062                  std    MD$Link,u
04C2 CC0002           (      fvmodul.asm):00063                  ldd    #M$Size     Get offset to size of module
04C5 170619           (      fvmodul.asm):00064                  lbsr   L0B02
                      (      fvmodul.asm):00065                  IFNE   H6309
04C8 103010           (      fvmodul.asm):00066                  addr   x,d         Add it to module ptr
                      (      fvmodul.asm):00067                  ELSE
                      (      fvmodul.asm):00068                  pshs   x
                      (      fvmodul.asm):00069                  addd   ,s++
                      (      fvmodul.asm):00070                  ENDC
04CB ED42             (      fvmodul.asm):00071                  std    MD$MBSiz,u
04CD 10AED4           (      fvmodul.asm):00072                  ldy    [MD$MPDAT,u] get pointer to module DAT
04D0 9E44             (      fvmodul.asm):00073                  ldx    <D.ModDir   get module directory pointer
04D2 3440             (      fvmodul.asm):00074                  pshs   u           save module pointer
04D4 8C               (      fvmodul.asm):00075                  fcb    $8C        skip 2 bytes
                      (      fvmodul.asm):00076         
04D5 3008             (      fvmodul.asm):00077         L04BC    leax   MD$ESize,x  move to next entry
04D7 9C58             (      fvmodul.asm):00078         L04BE    cmpx   <D.ModEnd
04D9 240B             (      fvmodul.asm):00079                  bcc    L04CD
04DB ACE4             (      fvmodul.asm):00080                  cmpx   ,s          match?
04DD 27F6             (      fvmodul.asm):00081                  beq    L04BC       no, keep looking
04DF 10AC94           (      fvmodul.asm):00082                  cmpy   [MD$MPDAT,x] DAT match?
04E2 26F1             (      fvmodul.asm):00083                  bne    L04BC       no, keep looking
04E4 8D1F             (      fvmodul.asm):00084                  bsr    L04F2
                      (      fvmodul.asm):00085         
04E6 3540             (      fvmodul.asm):00086         L04CD    puls   u
04E8 9E40             (      fvmodul.asm):00087                  ldx    <D.BlkMap    Get ptr to block map
04EA EC42             (      fvmodul.asm):00088                  ldd    MD$MBSiz,u     Get size of module
04EC C31FFF           (      fvmodul.asm):00089                  addd   #$1FFF       Round up to nearest 8K block
04EF 44               (      fvmodul.asm):00090                  lsra                Divide by 32
04F0 44               (      fvmodul.asm):00091                  lsra
04F1 44               (      fvmodul.asm):00092                  lsra
04F2 44               (      fvmodul.asm):00093                  lsra
04F3 44               (      fvmodul.asm):00094                  lsra
04F4 10AEC4           (      fvmodul.asm):00095                  ldy    MD$MPDAT,u
                      (      fvmodul.asm):00096         
                      (      fvmodul.asm):00097                  IFNE   H6309
04F7 1F8E             (      fvmodul.asm):00098                  tfr    a,e
04F9 ECA1             (      fvmodul.asm):00099         L04DE    ldd    ,y++
04FB 61028B           (      fvmodul.asm):00100                  oim    #ModBlock,d,x
04FE 114A             (      fvmodul.asm):00101                  dece
                      (      fvmodul.asm):00102                  ELSE
0500                  (      fvmodul.asm):00103         L04DE    pshs   a,x             save block size, blkmap
                      (      fvmodul.asm):00104                  ldd    ,y++            D = image block #
                      (      fvmodul.asm):00105                  leax   d,x             X = blkmap ptr
                      (      fvmodul.asm):00106                  ldb    ,x              get block marker
                      (      fvmodul.asm):00107                  orb    #ModBlock       set module in block
                      (      fvmodul.asm):00108                  stb    ,x              marker
                      (      fvmodul.asm):00109                  puls   x,a
                      (      fvmodul.asm):00110                  deca                   count--
                      (      fvmodul.asm):00111                  ENDC
0500 26F7             (      fvmodul.asm):00112                  bne    L04DE       no, keep going
                      (      fvmodul.asm):00113         
0502 5F               (      fvmodul.asm):00114                  clrb               clear carry
0503 35B0             (      fvmodul.asm):00115                  puls   x,y,pc      return
                      (      fvmodul.asm):00116         
0505 3476             (      fvmodul.asm):00117         L04F2    pshs   d,x,y,u
0507 AE84             (      fvmodul.asm):00118                  ldx    ,x
                      (      fvmodul.asm):00119         
                      (      fvmodul.asm):00120                  IFNE   H6309
0509 1F16             (      fvmodul.asm):00121                  tfr    x,w         Dupe to faster index register
050B 104F             (      fvmodul.asm):00122                  clrd
050D 10AE8F           (      fvmodul.asm):00123         L04FA    ldy    ,w
0510 2704             (      fvmodul.asm):00124                  beq    L0503
0512 EDCF             (      fvmodul.asm):00125                  std    ,w++
0514 20F7             (      fvmodul.asm):00126                  bra    L04FA
0516 10AE62           (      fvmodul.asm):00127         L0503    ldy    2,s
                      (      fvmodul.asm):00128                  ELSE
                      (      fvmodul.asm):00129                  pshs   x
                      (      fvmodul.asm):00130                  clra             D=0000
                      (      fvmodul.asm):00131                  clrb
0519                  (      fvmodul.asm):00132         L04FA    ldy   ,x         last entry?
                      (      fvmodul.asm):00133                  beq   L0503      ..yes
                      (      fvmodul.asm):00134                  std   ,x++       no, clear
                      (      fvmodul.asm):00135                  bra   L04FA      and loop
0519                  (      fvmodul.asm):00136         L0503    puls  x
                      (      fvmodul.asm):00137                  ldy    2,s
                      (      fvmodul.asm):00138                  ENDC
                      (      fvmodul.asm):00139         
0519 EEC4             (      fvmodul.asm):00140                  ldu    MD$MPDAT,u
051B 3506             (      fvmodul.asm):00141                  puls   d
                      (      fvmodul.asm):00142         
051D ACA4             (      fvmodul.asm):00143         L050C    cmpx   MD$MPDAT,y
051F 260B             (      fvmodul.asm):00144                  bne    L051B
0521 EFA4             (      fvmodul.asm):00145                  stu    MD$MPDAT,y
0523 10A322           (      fvmodul.asm):00146                  cmpd   MD$MBSiz,y
0526 2402             (      fvmodul.asm):00147                  bcc    L0519
0528 EC22             (      fvmodul.asm):00148                  ldd    MD$MBSiz,y
052A ED22             (      fvmodul.asm):00149         L0519    std    MD$MBSiz,y
052C 3128             (      fvmodul.asm):00150         L051B    leay   MD$ESize,y
052E 109C58           (      fvmodul.asm):00151                  cmpy   <D.ModEnd
0531 26EA             (      fvmodul.asm):00152                  bne    L050C
0533 35F0             (      fvmodul.asm):00153                  puls   x,y,u,pc
                      (      fvmodul.asm):00154         
0535 3470             (      fvmodul.asm):00155         L0524    pshs   x,y,u
0537 CC0002           (      fvmodul.asm):00156                  ldd    #M$Size
053A 1705A4           (      fvmodul.asm):00157                  lbsr   L0B02
053D E3E4             (      fvmodul.asm):00158                  addd   ,s
053F C31FFF           (      fvmodul.asm):00159                  addd   #$1FFF
0542 44               (      fvmodul.asm):00160                  lsra
0543 44               (      fvmodul.asm):00161                  lsra
0544 44               (      fvmodul.asm):00162                  lsra
0545 44               (      fvmodul.asm):00163                  lsra
0546 44               (      fvmodul.asm):00164                  lsra
0547 1F89             (      fvmodul.asm):00165                  tfr    a,b
0549 3404             (      fvmodul.asm):00166                  pshs   b
                      (      fvmodul.asm):00167         *         incb
054B 53               (      fvmodul.asm):00168                  comb             one byte shorter than incb;lslg;negb
054C 58               (      fvmodul.asm):00169                  lslb
                      (      fvmodul.asm):00170         *         negb
054D 1D               (      fvmodul.asm):00171                  sex
054E 8D0D             (      fvmodul.asm):00172                  bsr    L054E
0550 2409             (      fvmodul.asm):00173                  bcc    L054C
0552 103F52           (      fvmodul.asm):00174                  os9    F$GCMDir    get rid of empty slots in module directory
                      (      fvmodul.asm):00175                  IFNE   H6309
0555 1FC3             (      fvmodul.asm):00176                  tfr    0,u
                      (      fvmodul.asm):00177                  ELSE
                      (      fvmodul.asm):00178                  ldu    #$0000
                      (      fvmodul.asm):00179                  ENDC
0557 EF65             (      fvmodul.asm):00180                  stu    $05,s
0559 8D02             (      fvmodul.asm):00181                  bsr    L054E
055B 35F4             (      fvmodul.asm):00182         L054C    puls   b,x,y,u,pc
                      (      fvmodul.asm):00183         
055D 9E5A             (      fvmodul.asm):00184         L054E    ldx    <D.ModDAT
055F 308B             (      fvmodul.asm):00185                  leax   d,x
0561 9C58             (      fvmodul.asm):00186                  cmpx   <D.ModEnd
0563 252A             (      fvmodul.asm):00187                  bcs    S.Poll
0565 EE67             (      fvmodul.asm):00188                  ldu    7,s
0567 2612             (      fvmodul.asm):00189                  bne    L056E
0569 109E58           (      fvmodul.asm):00190                  ldy    <D.ModEnd
056C 3128             (      fvmodul.asm):00191                  leay   MD$ESize,y
                      (      fvmodul.asm):00192                  IFNE   H6309
056E 103712           (      fvmodul.asm):00193                  cmpr   x,y
                      (      fvmodul.asm):00194                  ELSE
                      (      fvmodul.asm):00195                  pshs   x
                      (      fvmodul.asm):00196                  cmpy   ,s++
                      (      fvmodul.asm):00197                  ENDC
0571 221C             (      fvmodul.asm):00198                  bhi    S.Poll
0573 109F58           (      fvmodul.asm):00199                  sty    <D.ModEnd
0576 3138             (      fvmodul.asm):00200                  leay   -MD$ESize,y
0578 10AF67           (      fvmodul.asm):00201                  sty    $07,s
057B 9F5A             (      fvmodul.asm):00202         L056E    stx    <D.ModDAT
                      (      fvmodul.asm):00203                  IFNE   H6309
057D EC65             (      fvmodul.asm):00204                  ldd    $05,s         Get source ptr
057F AF65             (      fvmodul.asm):00205                  stx    $05,s
0581 11E662           (      fvmodul.asm):00206                  ldf    2,s
0584 114F             (      fvmodul.asm):00207                  clre
0586 1059             (      fvmodul.asm):00208                  rolw
0588 113801           (      fvmodul.asm):00209                  tfm    d+,x+
058B 10A784           (      fvmodul.asm):00210                  stw    ,x            Save 0
                      (      fvmodul.asm):00211                  ELSE
                      (      fvmodul.asm):00212                  ldy   5,s
                      (      fvmodul.asm):00213                  ldb   2,s        B=block count
                      (      fvmodul.asm):00214                  stx   5,s        return dir datimg ptr
058E                  (      fvmodul.asm):00215         L0577    ldu   ,y++       copy images
                      (      fvmodul.asm):00216                  stu   ,x++       to new mod dat entry
                      (      fvmodul.asm):00217                  decb
                      (      fvmodul.asm):00218                  bne   L0577
                      (      fvmodul.asm):00219                  clr   ,x         zero flag     
                      (      fvmodul.asm):00220                  clr   1,x
                      (      fvmodul.asm):00221                  ENDC
058E 39               (      fvmodul.asm):00222                  rts
                      (      fvmodul.asm):00223         
                      (      fvmodul.asm):00224         * Default interrupt handling routine on first booting OS9p1
058F 1A01             (      fvmodul.asm):00225         S.Poll   orcc  #Carry
0591 39               (      fvmodul.asm):00226                  rts   
                      (      fvmodul.asm):00227         
                      (      fvmodul.asm):00228         * Check module ID & calculate module header parity & CRC
                      (      fvmodul.asm):00229         * Entry: X=Block offset of module
                      (      fvmodul.asm):00230         *        Y=DAT image pointer of module
0592 3430             (      fvmodul.asm):00231         L0586    pshs  x,y          save block offset & DAT pointer
                      (      fvmodul.asm):00232                  IFNE  H6309
0594 104F             (      fvmodul.asm):00233                  clrd
                      (      fvmodul.asm):00234                  ELSE
                      (      fvmodul.asm):00235                  clra
                      (      fvmodul.asm):00236                  clrb
                      (      fvmodul.asm):00237                  ENDC
0596 170548           (      fvmodul.asm):00238                  lbsr  L0B02        get module ID
0599 108387CD         (      fvmodul.asm):00239                  cmpd  #M$ID12      legal module?
059D 2704             (      fvmodul.asm):00240                  beq   L0597        yes, calculate header parity
059F C6CD             (      fvmodul.asm):00241                  ldb   #E$BMID      get bad module ID error
05A1 205E             (      fvmodul.asm):00242                  bra   L05F3        return error
                      (      fvmodul.asm):00243         * Calculate module header parity
05A3 3002             (      fvmodul.asm):00244         L0597    leax  2,x          point to start location of header calc
05A5 170527           (      fvmodul.asm):00245                  lbsr  AdjBlk0      adjust it for block 0
                      (      fvmodul.asm):00246                  IFNE  H6309
05A8 10864A07         (      fvmodul.asm):00247                  ldw   #($4A*256+M$Revs) Get initial value & count (7 bytes of header)
05AC 170507           (      fvmodul.asm):00248         L05A2    lbsr  LDAXY        get a byte from module
05AF 10368E           (      fvmodul.asm):00249                  eorr  a,e          add it into running parity
05B2 115A             (      fvmodul.asm):00250                  decf               done full header?
05B4 26F6             (      fvmodul.asm):00251                  bne   L05A2        no, keep going
05B6 114C             (      fvmodul.asm):00252                  ince               valid parity?
                      (      fvmodul.asm):00253                  ELSE
                      (      fvmodul.asm):00254                  leas  -1,s       make var
                      (      fvmodul.asm):00255                  ldd   #($4A*256+M$Revs) Get initial value & count (7 bytes of header)
05B8                  (      fvmodul.asm):00256         L05A2    sta   ,s         save crc
                      (      fvmodul.asm):00257                  lbsr  LDAXY      get next byte
                      (      fvmodul.asm):00258                  eora  ,s         do crc      
                      (      fvmodul.asm):00259                  decb             more?
                      (      fvmodul.asm):00260                  bne   L05A2      ..loop
                      (      fvmodul.asm):00261                  leas  1,s        drop var
                      (      fvmodul.asm):00262                  inca             $FF+1 = 00
                      (      fvmodul.asm):00263                  ENDC
05B8 2704             (      fvmodul.asm):00264                  beq   L05B5        yes, skip ahead
05BA C6EC             (      fvmodul.asm):00265                  ldb   #E$BMHP      get module header parity error
05BC 2043             (      fvmodul.asm):00266                  bra   L05F3        return with error
05BE 3530             (      fvmodul.asm):00267         L05B5    puls  x,y          restore module pointer & DAT pointer
                      (      fvmodul.asm):00268         * this checks if the module CRC checking is on or off
05C0 963B             (      fvmodul.asm):00269                  lda   <D.CRC       is CRC checking on?
05C2 2603             (      fvmodul.asm):00270                  bne   L05BA        yes - go check it
                      (      fvmodul.asm):00271                  IFNE  H6309
05C4 104F             (      fvmodul.asm):00272                  clrd               no, clear out
                      (      fvmodul.asm):00273                  ELSE
                      (      fvmodul.asm):00274                  clra
                      (      fvmodul.asm):00275                  clrb
                      (      fvmodul.asm):00276                  ENDC
05C6 39               (      fvmodul.asm):00277                  rts                and return
                      (      fvmodul.asm):00278         * Begin checking Module CRC
                      (      fvmodul.asm):00279         * Entry: X=Module pointer
                      (      fvmodul.asm):00280         *        Y=DAT image pointer of module
05C7 CC0002           (      fvmodul.asm):00281         L05BA    ldd   #M$Size      get offset to module size
05CA 170514           (      fvmodul.asm):00282                  lbsr  L0B02        get module size
                      (      fvmodul.asm):00283                  IFNE  H6309
05CD 1F06             (      fvmodul.asm):00284                  tfr   d,w          move length to W
05CF 3430             (      fvmodul.asm):00285                  pshs  y,x          preserve [X]=Buffer pointer,[Y]=DAT pointer
                      (      fvmodul.asm):00286                  ELSE
                      (      fvmodul.asm):00287                  pshs  y,x,b,a      preserve [X]=Buffer pointer,[Y]=DAT pointer
                      (      fvmodul.asm):00288                  ENDC
05D1 CCFFFF           (      fvmodul.asm):00289                  ldd   #$FFFF       initial CRC value of $FFFFFF
05D4 3406             (      fvmodul.asm):00290                  pshs  d            set up local 24 bit variable
05D6 3404             (      fvmodul.asm):00291                  pshs  b
05D8 1704F4           (      fvmodul.asm):00292                  lbsr  AdjBlk0      adjust module pointer into block 0 for mapping
05DB 33E4             (      fvmodul.asm):00293                  leau  ,s           point to CRC accumulator
                      (      fvmodul.asm):00294         * Loop: W=# bytes left to use in CRC calc
     05DD             (      fvmodul.asm):00295         L05CB    equ   *
                      (      fvmodul.asm):00296                  IFNE  H6309
05DD 115D             (      fvmodul.asm):00297                  tstf               on 256 byte boundary?
                      (      fvmodul.asm):00298                  ELSE
                      (      fvmodul.asm):00299                  tstb
                      (      fvmodul.asm):00300                  ENDC
05DF 260A             (      fvmodul.asm):00301                  bne   L05D8        no, keep going
05E1 3410             (      fvmodul.asm):00302                  pshs  x            give up some time to system
05E3 8E0001           (      fvmodul.asm):00303                  ldx   #1
05E6 103F0A           (      fvmodul.asm):00304                  os9   F$Sleep  
05E9 3510             (      fvmodul.asm):00305                  puls  x            restore module pointer
05EB 1704C8           (      fvmodul.asm):00306         L05D8    lbsr  LDAXY        get a byte from module into A
05EE 8D15             (      fvmodul.asm):00307                  bsr   CRCCalc      add it to running CRC
                      (      fvmodul.asm):00308                  IFNE  H6309
05F0 105A             (      fvmodul.asm):00309                  decw               Dec # bytes left to calculate CRC with
                      (      fvmodul.asm):00310                  ELSE
                      (      fvmodul.asm):00311                  ldd   3,s
                      (      fvmodul.asm):00312                  subd  #$0001
                      (      fvmodul.asm):00313                  std   3,s
                      (      fvmodul.asm):00314                  ENDC
05F2 26E9             (      fvmodul.asm):00315                  bne   L05CB        Still more, continue
                      (      fvmodul.asm):00316                  IFNE  H6309
05F4 3514             (      fvmodul.asm):00317                  puls  b,x          yes, restore CRC
                      (      fvmodul.asm):00318                  ELSE
                      (      fvmodul.asm):00319                  puls  b,x,y        yes, restore CRC
                      (      fvmodul.asm):00320                  ENDC
05F6 C180             (      fvmodul.asm):00321                  cmpb  #CRCCon1     CRC MSB match constant?
05F8 2605             (      fvmodul.asm):00322                  bne   L05F1        no, exit with error
05FA 8C0FE3           (      fvmodul.asm):00323                  cmpx  #CRCCon23    LSW match constant?
05FD 2704             (      fvmodul.asm):00324                  beq   L05F5        yes, skip ahead
05FF C6E8             (      fvmodul.asm):00325         L05F1    ldb   #E$BMCRC     Bad Module CRC error
0601 1A01             (      fvmodul.asm):00326         L05F3    orcc  #Carry       Set up for error
0603 35B0             (      fvmodul.asm):00327         L05F5    puls  x,y,pc       exit
                      (      fvmodul.asm):00328         
                      (      fvmodul.asm):00329         * Calculate 24 bit CRC
                      (      fvmodul.asm):00330         * Entry: A=Byte to add to CRC
                      (      fvmodul.asm):00331         *        U=Pointer to 24 bit CRC accumulator
                      (      fvmodul.asm):00332         *
                      (      fvmodul.asm):00333         * Future reference note: Do not use W unless preserved, contains module
                      (      fvmodul.asm):00334         *                        byte counts from routines that come here!!
0605 A8C4             (      fvmodul.asm):00335         CRCCalc  eora  ,u
0607 3402             (      fvmodul.asm):00336                  pshs  a
0609 EC41             (      fvmodul.asm):00337                  ldd   1,u
060B EDC4             (      fvmodul.asm):00338                  std   ,u
060D 4F               (      fvmodul.asm):00339                  clra  
060E E6E4             (      fvmodul.asm):00340                  ldb   ,s
                      (      fvmodul.asm):00341                  IFNE  H6309
0610 1048             (      fvmodul.asm):00342                  lsld
                      (      fvmodul.asm):00343                  ELSE
                      (      fvmodul.asm):00344                  aslb
                      (      fvmodul.asm):00345                  rola
                      (      fvmodul.asm):00346                  ENDC
0612 A841             (      fvmodul.asm):00347                  eora  1,u
0614 ED41             (      fvmodul.asm):00348                  std   1,u
0616 5F               (      fvmodul.asm):00349                  clrb  
0617 A6E4             (      fvmodul.asm):00350                  lda   ,s
                      (      fvmodul.asm):00351                  IFNE  H6309
0619 1044             (      fvmodul.asm):00352                  lsrd
061B 1044             (      fvmodul.asm):00353                  lsrd
061D 10A841           (      fvmodul.asm):00354                  eord  1,u
                      (      fvmodul.asm):00355                  ELSE
                      (      fvmodul.asm):00356                  lsra
                      (      fvmodul.asm):00357                  rorb
                      (      fvmodul.asm):00358                  lsra
                      (      fvmodul.asm):00359                  rorb
                      (      fvmodul.asm):00360                  eora  1,u
                      (      fvmodul.asm):00361                  eorb  2,u
                      (      fvmodul.asm):00362                  ENDC
0620 ED41             (      fvmodul.asm):00363                  std   1,u
0622 A6E4             (      fvmodul.asm):00364                  lda   ,s
0624 48               (      fvmodul.asm):00365                  lsla  
0625 A8E4             (      fvmodul.asm):00366                  eora  ,s
0627 A7E4             (      fvmodul.asm):00367                  sta   ,s
0629 48               (      fvmodul.asm):00368                  lsla  
062A 48               (      fvmodul.asm):00369                  lsla  
062B A8E4             (      fvmodul.asm):00370                  eora  ,s
062D A7E4             (      fvmodul.asm):00371                  sta   ,s
062F 48               (      fvmodul.asm):00372                  lsla  
0630 48               (      fvmodul.asm):00373                  lsla  
0631 48               (      fvmodul.asm):00374                  lsla  
0632 48               (      fvmodul.asm):00375                  lsla  
0633 A8E0             (      fvmodul.asm):00376                  eora  ,s+
0635 2A06             (      fvmodul.asm):00377                  bpl   L0635
                      (      fvmodul.asm):00378                  IFNE  H6309
0637 6580C4           (      fvmodul.asm):00379                  eim   #$80,,u
063A 652142           (      fvmodul.asm):00380                  eim   #$21,2,u
                      (      fvmodul.asm):00381                  ELSE
                      (      fvmodul.asm):00382                  ldd   #$8021
                      (      fvmodul.asm):00383                  eora  ,u
                      (      fvmodul.asm):00384                  sta   ,u
                      (      fvmodul.asm):00385                  eorb  2,u
                      (      fvmodul.asm):00386                  stb   2,u
                      (      fvmodul.asm):00387                  ENDC
063D 39               (      fvmodul.asm):00388         L0635    rts   
                      (      fvmodul.asm):00389         
                      (      fvmodul.asm):00390         
                      (      fvmodul.asm):00391         **************************************************
                      (      fvmodul.asm):00392         * System Call: F$CRC
                      (      fvmodul.asm):00393         *
                      (      fvmodul.asm):00394         * Function: Compute CRC
                      (      fvmodul.asm):00395         *
                      (      fvmodul.asm):00396         * Input:  X = Address to start computation
                      (      fvmodul.asm):00397         *         Y = Byte count
                      (      fvmodul.asm):00398         *         U = Address of 3 byte CRC accumulator
                      (      fvmodul.asm):00399         *
                      (      fvmodul.asm):00400         * Output: CRC accumulator is updated
                      (      fvmodul.asm):00401         *
                      (      fvmodul.asm):00402         * Error:  CC = C bit set; B = error code
                      (      fvmodul.asm):00403         *
063E EC48             (      fvmodul.asm):00404         FCRC     ldd   R$Y,u        get # bytes to do
0640 273A             (      fvmodul.asm):00405                  beq   L0677        nothing there, so nothing to do, return
0642 AE46             (      fvmodul.asm):00406                  ldx   R$X,u        get caller's buffer pointer
0644 3416             (      fvmodul.asm):00407                  pshs  d,x          save # bytes & buffer pointer
0646 327D             (      fvmodul.asm):00408                  leas  -3,s         allocate a 3 byte buffer
0648 9E50             (      fvmodul.asm):00409                  ldx   <D.Proc      point to current process descriptor
064A A606             (      fvmodul.asm):00410                  lda   P$Task,x     get its task number
064C D6D0             (      fvmodul.asm):00411                  ldb   <D.SysTsk    get the system task number 
064E AE4A             (      fvmodul.asm):00412                  ldx   R$U,u        point to user's 24 bit CRC accumulator
0650 108E0003         (      fvmodul.asm):00413                  ldy   #3           number of bytes to move 
0654 33E4             (      fvmodul.asm):00414                  leau  ,s           point to our temp buffer
0656 3436             (      fvmodul.asm):00415                  pshs  d,x,y        save [D]=task #'s,[X]=Buff,[Y]=3
0658 1704FF           (      fvmodul.asm):00416                  lbsr  L0B2C        move CRC accumulator to temp buffer
065B 9E50             (      fvmodul.asm):00417                  ldx   <D.Proc      point to current process descriptor
065D 318840           (      fvmodul.asm):00418                  leay  <P$DATImg,x  point to its DAT image
0660 AE6B             (      fvmodul.asm):00419                  ldx   11,s         restore the buffer pointer
0662 17046A           (      fvmodul.asm):00420                  lbsr  AdjBlk0      make callers buffer visible
                      (      fvmodul.asm):00421                  IFNE  H6309
0665 10A669           (      fvmodul.asm):00422                  ldw   9,s          get byte count
                      (      fvmodul.asm):00423                  ENDC
0668 17044B           (      fvmodul.asm):00424         L065D    lbsr  LDAXY        get byte from callers buffer
066B 8D98             (      fvmodul.asm):00425                  bsr   CRCCalc      add it to CRC
                      (      fvmodul.asm):00426                  IFNE  H6309
066D 105A             (      fvmodul.asm):00427                  decw               done?
                      (      fvmodul.asm):00428                  ELSE
                      (      fvmodul.asm):00429                  ldd   9,s
                      (      fvmodul.asm):00430                  subd  #$0001
                      (      fvmodul.asm):00431                  std   9,s
                      (      fvmodul.asm):00432                  ENDC
066F 26F7             (      fvmodul.asm):00433                  bne   L065D        no, keep going
0671 3536             (      fvmodul.asm):00434                  puls  d,x,y        restore pointers
0673 1E89             (      fvmodul.asm):00435                  exg   a,b          swap around the task numbers 
0675 1E13             (      fvmodul.asm):00436                  exg   x,u          and the pointers
0677 1704E0           (      fvmodul.asm):00437                  lbsr  L0B2C        move accumulator back to user
067A 3267             (      fvmodul.asm):00438                  leas  7,s          clean up stack
067C 5F               (      fvmodul.asm):00439         L0677    clrb               no error
067D 39               (      fvmodul.asm):00440                  rts   
                      (/home/strick/6809):00659                         
                      (/home/strick/6809):00660                 use     ffmodul.asm
                      (      ffmodul.asm):00001         **************************************************
                      (      ffmodul.asm):00002         * System Call: F$FModul
                      (      ffmodul.asm):00003         *
                      (      ffmodul.asm):00004         * Function: Find module directory entry
                      (      ffmodul.asm):00005         *
                      (      ffmodul.asm):00006         * Input:  A = Module type
                      (      ffmodul.asm):00007         *         X = Module name string pointer
                      (      ffmodul.asm):00008         *         Y = Name string DAT image pointer
                      (      ffmodul.asm):00009         *
                      (      ffmodul.asm):00010         * Output: A = Module type
                      (      ffmodul.asm):00011         *         B = Module revision
                      (      ffmodul.asm):00012         *         X = Updated past name string
                      (      ffmodul.asm):00013         *         U = Module directory entry pointer
                      (      ffmodul.asm):00014         *
                      (      ffmodul.asm):00015         * Error:  CC = C bit set; B = error code
                      (      ffmodul.asm):00016         *
067E 3440             (      ffmodul.asm):00017         FFModul  pshs  u            preserve register stack pointer
0680 A641             (      ffmodul.asm):00018                  lda   R$A,u        get module type
0682 AE46             (      ffmodul.asm):00019                  ldx   R$X,u        get pointer to name
0684 10AE48           (      ffmodul.asm):00020                  ldy   R$Y,u        get pointer to DAT image of name (from caller)
0687 8D09             (      ffmodul.asm):00021                  bsr   L068D        go find it
0689 3520             (      ffmodul.asm):00022                  puls  y            restore register stack pointer
068B ED21             (      ffmodul.asm):00023                  std   R$D,y        save type & revision
068D AF26             (      ffmodul.asm):00024                  stx   R$X,y        save updated name pointer
068F EF2A             (      ffmodul.asm):00025                  stu   R$U,y        save pointer to directory entry
0691 39               (      ffmodul.asm):00026                  rts                return
                      (      ffmodul.asm):00027         
                      (      ffmodul.asm):00028         * Find module in module directory
                      (      ffmodul.asm):00029         * Entry: A=Module type
                      (      ffmodul.asm):00030         *        X=Pointer to module name
                      (      ffmodul.asm):00031         *        Y=DAT image pointer for module name
     0692             (      ffmodul.asm):00032         L068D    equ   *
                      (      ffmodul.asm):00033                  IFNE  H6309
0692 1FC3             (      ffmodul.asm):00034                  tfr   0,u          init directory pointer to nothing
                      (      ffmodul.asm):00035                  ELSE
                      (      ffmodul.asm):00036                  ldu   #$0000
                      (      ffmodul.asm):00037                  ENDC
0694 3446             (      ffmodul.asm):00038                  pshs  d,u          preserve (Why B?)
0696 8D7E             (      ffmodul.asm):00039                  bsr   L0712        Go find 1st char of module name requested
0698 812F             (      ffmodul.asm):00040                  cmpa  #PDELIM      Is it a '/'?
069A 2773             (      ffmodul.asm):00041                  beq   L070B        yes, exit with error
069C 1700A6           (      ffmodul.asm):00042                  lbsr  ParseNam     parse the name to find the end & length
069F 2571             (      ffmodul.asm):00043                  bcs   L070E        error (illegal name), exit
06A1 DE58             (      ffmodul.asm):00044                  ldu   <D.ModEnd    get module directory end pointer
06A3 2060             (      ffmodul.asm):00045                  bra   L0700        start looking for it
                      (      ffmodul.asm):00046         
                      (      ffmodul.asm):00047         * Main module directory search
                      (      ffmodul.asm):00048         * Entry: A=Module type
                      (      ffmodul.asm):00049         *        B=Module name length
                      (      ffmodul.asm):00050         *        X=Logical address of name in Caller's 64k space
                      (      ffmodul.asm):00051         *        Y=DAT image of caller (for module name)
                      (      ffmodul.asm):00052         *        U=Module directory Entry ptr (current module being checked)
06A5 3436             (      ffmodul.asm):00053         L06A1    pshs  d,x,y        Preserve Mod type/nm len, Log. Addr, DAT Img ptr
06A7 3430             (      ffmodul.asm):00054                  pshs  x,y          Preserve Log. addr & DAT Img ptr
06A9 10AEC4           (      ffmodul.asm):00055                  ldy   MD$MPDAT,u   Does the module have a DAT Image ptr?
06AC 274D             (      ffmodul.asm):00056                  beq   L06F6        no, skip module
06AE AE44             (      ffmodul.asm):00057                  ldx   MD$MPtr,u    get module pointer
06B0 3430             (      ffmodul.asm):00058                  pshs  x,y          Save module ptr & DAT Img ptr of module
06B2 CC0004           (      ffmodul.asm):00059                  ldd   #M$Name      # bytes to go in to get module name ptr
06B5 170429           (      ffmodul.asm):00060                  lbsr  L0B02        Go get the module name ptr
                      (      ffmodul.asm):00061                  IFNE  H6309
06B8 103001           (      ffmodul.asm):00062                  addr  d,x          add it to module start
                      (      ffmodul.asm):00063                  ELSE
                      (      ffmodul.asm):00064                  leax  d,x
                      (      ffmodul.asm):00065                  ENDC
06BB 3430             (      ffmodul.asm):00066                  pshs  x,y          preserve module name ptr & DAT pointer
06BD 3068             (      ffmodul.asm):00067                  leax  8,s          Point to addr of name we are searching for
06BF E66D             (      ffmodul.asm):00068                  ldb   13,s         get name length
06C1 31E4             (      ffmodul.asm):00069                  leay  ,s           point to module name name ptr within module DAT
                      (      ffmodul.asm):00070         * Stack:
                      (      ffmodul.asm):00071         * 0-1,s = Ptr to module name within Module DAT Img
                      (      ffmodul.asm):00072         * 2-3,s = Ptr to module's DAT Img
                      (      ffmodul.asm):00073         * 4-5,s = Ptr to module start
                      (      ffmodul.asm):00074         * 6-7,s = Ptr to module's DAT Img
                      (      ffmodul.asm):00075         * 8-9,s = Ptr to name we are looking for in caller's 64K space
                      (      ffmodul.asm):00076         * A-B,s = Ptr to caller's DAT Img
                      (      ffmodul.asm):00077         * C,s   = Module type we are looking for (0=don't care)
                      (      ffmodul.asm):00078         * D,s   = Length of module name
                      (      ffmodul.asm):00079         * E-F,s = Ptr to name we are looking for in caller's 64K space
                      (      ffmodul.asm):00080         * 10-11,s = Ptr to caller's DAT Img
                      (      ffmodul.asm):00081         * 12,s  = Module type looking for
                      (      ffmodul.asm):00082         * 13,s  = ??? (B from entry)
                      (      ffmodul.asm):00083         * 14-15,s = Module directory ptr (inited to 0)
06C3 170122           (      ffmodul.asm):00084                  lbsr  L07DE        compare the names
06C6 3264             (      ffmodul.asm):00085                  leas  4,s          purge stack
06C8 3530             (      ffmodul.asm):00086                  puls  y,x          restore module pointer & DAT image
06CA 3264             (      ffmodul.asm):00087                  leas  4,s          purge stack
06CC 2535             (      ffmodul.asm):00088                  bcs   L06FE        name didn't match, skip ahead
06CE CC0006           (      ffmodul.asm):00089                  ldd   #M$Type
06D1 17040D           (      ffmodul.asm):00090                  lbsr  L0B02
06D4 A7E4             (      ffmodul.asm):00091                  sta   ,s
06D6 E767             (      ffmodul.asm):00092                  stb   $07,s
06D8 A666             (      ffmodul.asm):00093                  lda   $06,s
06DA 2716             (      ffmodul.asm):00094                  beq   L06ED
06DC 84F0             (      ffmodul.asm):00095                  anda  #TypeMask
06DE 2706             (      ffmodul.asm):00096                  beq   L06E1
06E0 A8E4             (      ffmodul.asm):00097                  eora  ,s
06E2 84F0             (      ffmodul.asm):00098                  anda  #TypeMask
06E4 261D             (      ffmodul.asm):00099                  bne   L06FE
06E6 A666             (      ffmodul.asm):00100         L06E1    lda   $06,s
06E8 840F             (      ffmodul.asm):00101                  anda  #LangMask
06EA 2706             (      ffmodul.asm):00102                  beq   L06ED
06EC A8E4             (      ffmodul.asm):00103                  eora  ,s
06EE 840F             (      ffmodul.asm):00104                  anda  #LangMask
06F0 2611             (      ffmodul.asm):00105                  bne   L06FE
06F2 3536             (      ffmodul.asm):00106         L06ED    puls  y,x,d
06F4 3A               (      ffmodul.asm):00107                  abx   
06F5 5F               (      ffmodul.asm):00108                  clrb  
06F6 E661             (      ffmodul.asm):00109                  ldb   1,s
06F8 3264             (      ffmodul.asm):00110                  leas  4,s
06FA 39               (      ffmodul.asm):00111                  rts   
                      (      ffmodul.asm):00112         
06FB 3264             (      ffmodul.asm):00113         L06F6    leas  4,s          purge stack
06FD EC68             (      ffmodul.asm):00114                  ldd   8,s          do we have a directory pointer?
06FF 2602             (      ffmodul.asm):00115                  bne   L06FE        yes, skip ahead
0701 EF68             (      ffmodul.asm):00116                  stu   8,s          save directory entry pointer
0703 3536             (      ffmodul.asm):00117         L06FE    puls  d,x,y        restore pointers
0705 3358             (      ffmodul.asm):00118         L0700    leau  -MD$ESize,u  move back 1 entry in module table
0707 119344           (      ffmodul.asm):00119                  cmpu  <D.ModDir    at the beginning?
070A 2499             (      ffmodul.asm):00120                  bhs   L06A1        no, check entry
070C C6DD             (      ffmodul.asm):00121                  ldb   #E$MNF       get error code (module not found)
070E 8C               (      ffmodul.asm):00122                  fcb   $8C        skip 2 bytes
                      (      ffmodul.asm):00123         
070F C6EB             (      ffmodul.asm):00124         L070B    ldb   #E$BNam      get error code
0711 43               (      ffmodul.asm):00125                  coma             set carry for error
0712 E761             (      ffmodul.asm):00126         L070E    stb   1,s          save error code for caller
0714 35C6             (      ffmodul.asm):00127                  puls  d,u,pc       return
                      (      ffmodul.asm):00128         
                      (      ffmodul.asm):00129         * Skip spaces in name string & return first character of name
                      (      ffmodul.asm):00130         * Entry: X=Pointer to name
                      (      ffmodul.asm):00131         *        Y=DAT image pointer
                      (      ffmodul.asm):00132         * Exit : A=First character of name
                      (      ffmodul.asm):00133         *        B=DAT image block offset
                      (      ffmodul.asm):00134         *        X=Logical address of name
0716 3420             (      ffmodul.asm):00135         L0712    pshs  y            preserve DAT image pointer
0718 1703B4           (      ffmodul.asm):00136         L0714    lbsr  AdjBlk0      adjust pointer to offset for mapping in
071B 170383           (      ffmodul.asm):00137                  lbsr  L0AC8        map in block
071E 3001             (      ffmodul.asm):00138                  leax  1,x
0720 8120             (      ffmodul.asm):00139                  cmpa  #C$SPAC      space?
0722 27F4             (      ffmodul.asm):00140                  beq   L0714        yes, eat it
0724 301F             (      ffmodul.asm):00141                  leax  -1,x         move back to first character
0726 3407             (      ffmodul.asm):00142         L0720    pshs  d,cc         preserve char
0728 1F20             (      ffmodul.asm):00143                  tfr   y,d          copy DAT pointer to D
072A A363             (      ffmodul.asm):00144                  subd  3,s          calculate DAT image offset
072C 57               (      ffmodul.asm):00145                  asrb               divide it by 2
072D 170358           (      ffmodul.asm):00146                  lbsr  CmpLBlk        convert X to logical address in 64k map
0730 35A7             (      ffmodul.asm):00147                  puls  cc,d,y,pc    restore & return
                      (/home/strick/6809):00661                         
                      (/home/strick/6809):00662                 use     fprsnam.asm
                      (      fprsnam.asm):00001         **************************************************
                      (      fprsnam.asm):00002         * System Call: F$PrsNam
                      (      fprsnam.asm):00003         *
                      (      fprsnam.asm):00004         * Function: Parse a path name
                      (      fprsnam.asm):00005         *
                      (      fprsnam.asm):00006         * Modification to allow '-' in filenames by WG
                      (      fprsnam.asm):00007         *
                      (      fprsnam.asm):00008         * Input:  X = Address of pathlist
                      (      fprsnam.asm):00009         *
                      (      fprsnam.asm):00010         * Output: X = Updated past optional "/" character
                      (      fprsnam.asm):00011         *         Y = Address of last character of pathlist + 1
                      (      fprsnam.asm):00012         *         B = Length of pathlist
                      (      fprsnam.asm):00013         *
                      (      fprsnam.asm):00014         * Error:  CC = C bit set; B = error code
                      (      fprsnam.asm):00015         *
                      (      fprsnam.asm):00016                  IFGT  Level-1
                      (      fprsnam.asm):00017         
0732 9E50             (      fprsnam.asm):00018         FPrsNam  ldx   <D.Proc          proc desc
0734 318840           (      fprsnam.asm):00019                  leay  <P$DATImg,x      Y=DAT image ptr
0737 AE46             (      fprsnam.asm):00020                  ldx   R$X,u            X=name string
0739 8D0A             (      fprsnam.asm):00021                  bsr   ParseNam         get it and length
073B ED41             (      fprsnam.asm):00022                  std   R$D,u            return length in D
073D 2503             (      fprsnam.asm):00023                  bcs   L073E            ..err
073F AF46             (      fprsnam.asm):00024                  stx   R$X,u            and X at name begin
0741 3A               (      fprsnam.asm):00025                  abx                    plus len
0742 AF48             (      fprsnam.asm):00026         L073E    stx   R$Y,u            return Y=end of name ptr
0744 39               (      fprsnam.asm):00027                  rts                    end.
                      (      fprsnam.asm):00028         
                      (      fprsnam.asm):00029         * Parse name
     0745             (      fprsnam.asm):00030         ParseNam equ   *
0745 3420             (      fprsnam.asm):00031                  pshs  y                save DAT image pointer
0747 170385           (      fprsnam.asm):00032                  lbsr  AdjBlk0          go find map block...
074A 3430             (      fprsnam.asm):00033                  pshs  x,y              save X offset within block and Y block pointer
074C 8D2B             (      fprsnam.asm):00034                  bsr   GoGetAXY         go get byte at X in block Y...
074E 812E             (      fprsnam.asm):00035                  cmpa  #'.              is the first character a period?
0750 2609             (      fprsnam.asm):00036                  bne   IsSlash          no, do proper first character checking
0752 17034C           (      fprsnam.asm):00037                  lbsr  L0AC8            do a LDAXY, without changing X or Y
0755 8D36             (      fprsnam.asm):00038                  bsr   ChkFirst         is the next character non-period?
0757 862E             (      fprsnam.asm):00039                  lda   #'.              restore the period character the LDAXY destroyed
0759 240A             (      fprsnam.asm):00040                  bcc   Do.Loop          if NON-period character, skip 1st char checks
                      (      fprsnam.asm):00041         
075B 812F             (      fprsnam.asm):00042         IsSlash  cmpa  #PDELIM          is it a slash?
075D 2602             (      fprsnam.asm):00043                  bne   NotSlash         no, go keep X offset and block Y...
075F 8D13             (      fprsnam.asm):00044                  bsr   GetChar          go get character...
0761 8D2A             (      fprsnam.asm):00045         NotSlash bsr   ChkFirst         go check if valid first character...
0763 2519             (      fprsnam.asm):00046                  bcs   NotValid         not valid, go get next name start offset in X...
0765 5F               (      fprsnam.asm):00047         Do.Loop  clrb                   initialize character counter
0766 5C               (      fprsnam.asm):00048         LastLoop incb                   add one character
0767 4D               (      fprsnam.asm):00049                  tsta                   last character in name string?
0768 2B06             (      fprsnam.asm):00050                  bmi   LastChar         yes, go return valid...
076A 8D0D             (      fprsnam.asm):00051                  bsr   GoGetAXY         go get next character...
076C 8D25             (      fprsnam.asm):00052                  bsr   ChkValid         go check if valid character...
076E 24F6             (      fprsnam.asm):00053                  bcc   LastLoop         valid, go check if last character...
0770 1CFE             (      fprsnam.asm):00054         LastChar andcc #^Carry
0772 2015             (      fprsnam.asm):00055                  bra   RtnValid
                      (      fprsnam.asm):00056         
0774                  (      fprsnam.asm):00057         GetChar
0774 AF62             (      fprsnam.asm):00058                  stx   2,s          save current offset over old offset
0776 10AF64           (      fprsnam.asm):00059                  sty   4,s          save current block pointer over old block pointer
0779 16033A           (      fprsnam.asm):00060         GoGetAXY lbra  LDAXY        go get byte at X in block Y in A,  & return
                      (      fprsnam.asm):00061         
077C 8DF6             (      fprsnam.asm):00062         NextLoop bsr   GetChar      go get character...
077E 812C             (      fprsnam.asm):00063         NotValid cmpa  #',          comma?
0780 27FA             (      fprsnam.asm):00064                  beq   NextLoop     yes, go get next character...
0782 8120             (      fprsnam.asm):00065                  cmpa  #C$SPAC      space?
0784 27F6             (      fprsnam.asm):00066                  beq   NextLoop     yes, go get next character...
0786 53               (      fprsnam.asm):00067                  comb               error, set Carry
0787 C6EB             (      fprsnam.asm):00068                  ldb   #E$BNam      'Bad Name' error
     0789             (      fprsnam.asm):00069         RtnValid equ   *
0789 3530             (      fprsnam.asm):00070                  puls  x,y          recover offset & pointer
078B 2099             (      fprsnam.asm):00071                  bra   L0720        go do a similar exit routine
                      (      fprsnam.asm):00072         
078D 3402             (      fprsnam.asm):00073         ChkFirst pshs  a            save character
078F 847F             (      fprsnam.asm):00074                  anda  #$7F         drop msbit
0791 200C             (      fprsnam.asm):00075                  bra   ChkRst       skip dash for first character check
                      (      fprsnam.asm):00076         
                      (      fprsnam.asm):00077         * Determine if character in A is a valid filename character
0793 3402             (      fprsnam.asm):00078         ChkValid pshs  a            save character
0795 847F             (      fprsnam.asm):00079                  anda  #$7F         drop msbit
0797 812E             (      fprsnam.asm):00080                  cmpa  #'.          period?
0799 2725             (      fprsnam.asm):00081                  beq   ValidChr     yes, go return valid character...
079B 812D             (      fprsnam.asm):00082         ChkRest  cmpa  #'-          is it a dash?
079D 2721             (      fprsnam.asm):00083                  beq   ValidChr     yes, it's valid      
079F 817A             (      fprsnam.asm):00084         ChkRst   cmpa  #'z          greater than "z"?
07A1 221C             (      fprsnam.asm):00085                  bhi   InvalidC     yes, go return invalid character...
07A3 8161             (      fprsnam.asm):00086                  cmpa  #'a          greater than or equal to "a"?
07A5 2419             (      fprsnam.asm):00087                  bhs   ValidChr     yes, go return valid character...
07A7 815F             (      fprsnam.asm):00088                  cmpa  #'_          underscore?
07A9 2715             (      fprsnam.asm):00089                  beq   ValidChr     yes, go return valid character...
07AB 815A             (      fprsnam.asm):00090                  cmpa  #'Z          greater than "Z"?
07AD 2210             (      fprsnam.asm):00091                  bhi   InvalidC     yes, go return invalid character...
07AF 8141             (      fprsnam.asm):00092                  cmpa  #'A          greater than or equal to "A"?
07B1 240D             (      fprsnam.asm):00093                  bhs   ValidChr     yes, go return valid character...
07B3 8139             (      fprsnam.asm):00094                  cmpa  #'9          greater than "9"?
07B5 2208             (      fprsnam.asm):00095                  bhi   InvalidC     yes, go return invalid character...
07B7 8130             (      fprsnam.asm):00096                  cmpa  #'0          greater than or equal to "0"?
07B9 2405             (      fprsnam.asm):00097                  bhs   ValidChr     yes, go return valid character...
07BB 8124             (      fprsnam.asm):00098                  cmpa  #'$          dollar symbol?
07BD 2701             (      fprsnam.asm):00099                  beq   ValidChr     yes, go return valid character...
07BF 43               (      fprsnam.asm):00100         InvalidC coma               invalid character, set carry
07C0 3582             (      fprsnam.asm):00101         ValidChr puls  a,pc
                      (      fprsnam.asm):00102         
                      (      fprsnam.asm):00103                  ELSE
                      (      fprsnam.asm):00104         
07C2                  (      fprsnam.asm):00105         FPrsNam  ldx   R$X,u
                      (      fprsnam.asm):00106                  bsr   ParseNam
                      (      fprsnam.asm):00107                  std   R$D,u
                      (      fprsnam.asm):00108                  bcs   L0749
                      (      fprsnam.asm):00109                  stx   R$X,u
07C2                  (      fprsnam.asm):00110         L0749    sty   R$Y,u
                      (      fprsnam.asm):00111                  rts
07C2                  (      fprsnam.asm):00112         ParseNam lda   ,x
                      (      fprsnam.asm):00113                  cmpa  #PDELIM                 pathlist char?
                      (      fprsnam.asm):00114                  bne   L0755                   branch if not
                      (      fprsnam.asm):00115                  leax  1,x                     go past pathlist char
07C2                  (      fprsnam.asm):00116         L0755    leay  ,x
                      (      fprsnam.asm):00117                  clrb
                      (      fprsnam.asm):00118                  lda   ,y+
                      (      fprsnam.asm):00119                  anda  #$7F
                      (      fprsnam.asm):00120                  bsr   ChkRest
                      (      fprsnam.asm):00121                  bcs   L0772
07C2                  (      fprsnam.asm):00122         L0760    incb
                      (      fprsnam.asm):00123                  lda   -1,y
                      (      fprsnam.asm):00124                  bmi   L076F                   hi bit set on this char, done
                      (      fprsnam.asm):00125                  lda   ,y+
                      (      fprsnam.asm):00126                  anda  #$7F
                      (      fprsnam.asm):00127                  bsr   ChkFirst
                      (      fprsnam.asm):00128                  bcc   L0760
                      (      fprsnam.asm):00129                  lda   ,-y
07C2                  (      fprsnam.asm):00130         L076F    andcc #^Carry
                      (      fprsnam.asm):00131                  rts
07C2                  (      fprsnam.asm):00132         L0772    cmpa  #C$COMA                 comma?
                      (      fprsnam.asm):00133                  bne   L0778
07C2                  (      fprsnam.asm):00134         L0776    lda   ,y+
07C2                  (      fprsnam.asm):00135         L0778    cmpa  #C$SPAC                 space?
                      (      fprsnam.asm):00136                  beq   L0776
                      (      fprsnam.asm):00137                  lda   ,-y
                      (      fprsnam.asm):00138                  comb
                      (      fprsnam.asm):00139                  ldb   #E$BNam
                      (      fprsnam.asm):00140                  rts
                      (      fprsnam.asm):00141         
                      (      fprsnam.asm):00142         * check for illegal characters in a pathlist
07C2                  (      fprsnam.asm):00143         ChkFirst cmpa  #C$PERD                 period?
                      (      fprsnam.asm):00144                  beq   L07C9                   branch if so
07C2                  (      fprsnam.asm):00145         ChkRest  cmpa  #'0                     zero?
                      (      fprsnam.asm):00146                  bcs   L07A2                   branch if less than
                      (      fprsnam.asm):00147                  cmpa  #'9                     number?
                      (      fprsnam.asm):00148                  bls   L07C9                   branch if lower/same
                      (      fprsnam.asm):00149                  cmpa  #'_                     underscore?
                      (      fprsnam.asm):00150                  beq   L07C9                   branch if so
                      (      fprsnam.asm):00151                  cmpa  #'A                     A?
                      (      fprsnam.asm):00152                  bcs   L07A2                   branch if less than
                      (      fprsnam.asm):00153                  cmpa  #'Z                     Z?
                      (      fprsnam.asm):00154                  bls   L07C9                   branch if less or equal
                      (      fprsnam.asm):00155                  cmpa  #'a                     a?
                      (      fprsnam.asm):00156                  bcs   L07A2                   branch if lower
                      (      fprsnam.asm):00157                  cmpa  #'z                     z?
                      (      fprsnam.asm):00158                  bls   L07C9                   branch if less or equal
07C2                  (      fprsnam.asm):00159         L07A2    orcc  #Carry
                      (      fprsnam.asm):00160                  rts
                      (      fprsnam.asm):00161         
                      (      fprsnam.asm):00162                  ENDC
                      (/home/strick/6809):00663                         
                      (/home/strick/6809):00664                 use     fcmpnam.asm
                      (      fcmpnam.asm):00001         **************************************************
                      (      fcmpnam.asm):00002         * System Call: F$CmpNam
                      (      fcmpnam.asm):00003         *
                      (      fcmpnam.asm):00004         * Function: Compare two names
                      (      fcmpnam.asm):00005         *
                      (      fcmpnam.asm):00006         * Input:  X = Address of first name
                      (      fcmpnam.asm):00007         *         Y = Address of second name
                      (      fcmpnam.asm):00008         *         B = length of first name
                      (      fcmpnam.asm):00009         *
                      (      fcmpnam.asm):00010         * Output: None
                      (      fcmpnam.asm):00011         *
                      (      fcmpnam.asm):00012         * Error:  CC = C bit set; B = error code
                      (      fcmpnam.asm):00013         *
                      (      fcmpnam.asm):00014         
                      (      fcmpnam.asm):00015                  IFGT  Level-1
                      (      fcmpnam.asm):00016         
07C2 9E50             (      fcmpnam.asm):00017         FCmpNam  ldx   <D.Proc      get current process ptr
07C4 318840           (      fcmpnam.asm):00018                  leay  P$DATImg,x   Point to the DAT image
07C7 AE46             (      fcmpnam.asm):00019                  ldx   R$X,u        Get pointer to string #1
07C9 3430             (      fcmpnam.asm):00020                  pshs  y,x          preserve 'em
07CB 200C             (      fcmpnam.asm):00021                  bra   L07CF
                      (      fcmpnam.asm):00022         
                      (      fcmpnam.asm):00023         * F$CmpNam entry point for system state
07CD 9E50             (      fcmpnam.asm):00024         FSCmpNam ldx   <D.Proc      Get current proc. dsc. ptr
07CF 318840           (      fcmpnam.asm):00025                  leay  P$DATImg,x   Point to it's DAT image
07D2 AE46             (      fcmpnam.asm):00026                  ldx   R$X,u        get pointer to string #1
07D4 3430             (      fcmpnam.asm):00027                  pshs  x,y
07D6 109E4C           (      fcmpnam.asm):00028                  ldy   <D.SysDAT    get pointer to system DAT
07D9 AE48             (      fcmpnam.asm):00029         L07CF    ldx   R$Y,u        get pointer to string #2
07DB 3430             (      fcmpnam.asm):00030                  pshs  y,x          Preserve them
07DD EC41             (      fcmpnam.asm):00031                  ldd   R$D,u        get length
07DF 3064             (      fcmpnam.asm):00032                  leax  4,s          point to string #1 info packet
07E1 31E4             (      fcmpnam.asm):00033                  leay  ,s           point to string #2 info packet
07E3 8D03             (      fcmpnam.asm):00034                  bsr   L07DE        go compare 'em
07E5 3268             (      fcmpnam.asm):00035                  leas  8,s          purge stack
07E7 39               (      fcmpnam.asm):00036                  rts                return
                      (      fcmpnam.asm):00037         
                      (      fcmpnam.asm):00038         * Compare 2 strings
                      (      fcmpnam.asm):00039         *
                      (      fcmpnam.asm):00040         * Input:  D = Length of string #1 (only requires B)
                      (      fcmpnam.asm):00041         *         X = Ptr to string #1 info packet
                      (      fcmpnam.asm):00042         *             0,X = DAT image pointer
                      (      fcmpnam.asm):00043         *             2,X = Pointer to string
                      (      fcmpnam.asm):00044         *         Y = Ptr to string #2 info packet
                      (      fcmpnam.asm):00045         *             0,Y = DAT image pointer
                      (      fcmpnam.asm):00046         *             2,Y = Pointer to string
                      (      fcmpnam.asm):00047         *         U = Register stack ptr
07E8 3476             (      fcmpnam.asm):00048         L07DE    pshs  d,x,y,u      preserve registers
07EA 1F13             (      fcmpnam.asm):00049                  tfr   x,u          U=ptr to string #1 packet
07EC 3730             (      fcmpnam.asm):00050                  pulu  x,y          get DAT ptr to Y and string ptr to X
07EE 1702DE           (      fcmpnam.asm):00051                  lbsr  AdjBlk0      adjust X to use block 0
07F1 3630             (      fcmpnam.asm):00052                  pshu  x,y          put them back
07F3 EE64             (      fcmpnam.asm):00053                  ldu   4,s          get pointer to string #2 packet
07F5 3730             (      fcmpnam.asm):00054                  pulu  x,y          get DAT ptr to Y and string ptr to X
07F7 1702D5           (      fcmpnam.asm):00055                  lbsr  AdjBlk0      Adjust X to block 0
07FA 2004             (      fcmpnam.asm):00056                  bra   L07F6        go compare the strings
                      (      fcmpnam.asm):00057         
07FC EE64             (      fcmpnam.asm):00058         L07F2    ldu   4,s          get pointer to string #2 packet
07FE 3730             (      fcmpnam.asm):00059                  pulu  x,y          get DAT ptr to Y and string ptr to X
0800 1702B3           (      fcmpnam.asm):00060         L07F6    lbsr  LDAXY        Map in the block & grab a byte from string
0803 3630             (      fcmpnam.asm):00061                  pshu  x,y          Put updated DAT & string ptr back
0805 3402             (      fcmpnam.asm):00062                  pshs  a            Save the character
0807 EE63             (      fcmpnam.asm):00063                  ldu   3,s          pointer to string #1 packet
0809 3730             (      fcmpnam.asm):00064                  pulu  x,y          get DAT ptr to Y and string ptr to X
080B 1702A8           (      fcmpnam.asm):00065                  lbsr  LDAXY        get byte from string #1
080E 3630             (      fcmpnam.asm):00066                  pshu  y,x          put pointers back
0810 A8E4             (      fcmpnam.asm):00067                  eora  ,s
0812 6DE0             (      fcmpnam.asm):00068                  tst   ,s+          was it high bit?
0814 2B0A             (      fcmpnam.asm):00069                  bmi   L0816        yes, check if last character in string #2
0816 5A               (      fcmpnam.asm):00070                  decb  
0817 2704             (      fcmpnam.asm):00071                  beq   L0813
0819 84DF             (      fcmpnam.asm):00072                  anda  #$DF         match?
081B 27DF             (      fcmpnam.asm):00073                  beq   L07F2        yes, check next character
081D 53               (      fcmpnam.asm):00074         L0813    comb               set carry
081E 35F6             (      fcmpnam.asm):00075                  puls  d,x,y,u,pc
                      (      fcmpnam.asm):00076         
0820 5A               (      fcmpnam.asm):00077         L0816    decb               done whole string?
0821 26FA             (      fcmpnam.asm):00078                  bne   L0813        no, exit with no match
0823 845F             (      fcmpnam.asm):00079                  anda  #$5F         match?
0825 26F6             (      fcmpnam.asm):00080                  bne   L0813        yes, keep checking
0827 5F               (      fcmpnam.asm):00081                  clrb               strings match, clear carry
0828 35F6             (      fcmpnam.asm):00082                  puls  d,x,y,u,pc   restore & return
                      (      fcmpnam.asm):00083         
                      (      fcmpnam.asm):00084                  ELSE
                      (      fcmpnam.asm):00085         
082A                  (      fcmpnam.asm):00086         FCmpNam  ldb   R$B,u
                      (      fcmpnam.asm):00087                  leau  R$X,u
                      (      fcmpnam.asm):00088                  pulu  y,x
082A                  (      fcmpnam.asm):00089         L07AB    pshs  y,x,b,a
082A                  (      fcmpnam.asm):00090         L07AD    lda   ,y+
                      (      fcmpnam.asm):00091                  bmi   L07BE
                      (      fcmpnam.asm):00092                  decb
                      (      fcmpnam.asm):00093                  beq   L07BA
                      (      fcmpnam.asm):00094                  eora  ,x+
                      (      fcmpnam.asm):00095                  anda  #$DF
                      (      fcmpnam.asm):00096                  beq   L07AD
082A                  (      fcmpnam.asm):00097         L07BA    orcc  #Carry
                      (      fcmpnam.asm):00098                  puls  pc,y,x,b,a
082A                  (      fcmpnam.asm):00099         L07BE    decb
                      (      fcmpnam.asm):00100                  bne   L07BA
                      (      fcmpnam.asm):00101                  eora  ,x
                      (      fcmpnam.asm):00102                  anda  #$5F
                      (      fcmpnam.asm):00103                  bne   L07BA
                      (      fcmpnam.asm):00104                  puls  y,x,b,a
082A                  (      fcmpnam.asm):00105         L07C9    andcc #^Carry
                      (      fcmpnam.asm):00106                  rts
                      (      fcmpnam.asm):00107         
                      (      fcmpnam.asm):00108                  ENDC
                      (/home/strick/6809):00665                         
                      (/home/strick/6809):00666                 use     fsrqmem.asm
                      (      fsrqmem.asm):00001         **************************************************
                      (      fsrqmem.asm):00002         * System Call: F$SRqMem
                      (      fsrqmem.asm):00003         *
                      (      fsrqmem.asm):00004         * Function: Request memory
                      (      fsrqmem.asm):00005         *
                      (      fsrqmem.asm):00006         * F$SRqMem allocates memory from the system's 64K address space in 256 byte 'pages.'
                      (      fsrqmem.asm):00007         * There are 256 of these '256 byte pages' in the system's RAM area (256*256=64K).
                      (      fsrqmem.asm):00008         * The allocation map, pointed to by D.SysMem holds one byte per page, making the
                      (      fsrqmem.asm):00009         * allocation map itself 256 bytes in size.
                      (      fsrqmem.asm):00010         *
                      (      fsrqmem.asm):00011         * Memory is allocated from the top of the system RAM map downwards.  Rel/Boot/Krn
                      (      fsrqmem.asm):00012         * also reside in this area, and are loaded from $ED00-$FFFF.  Since this area is
                      (      fsrqmem.asm):00013         * always allocated, we start searching for free pages from page $EC downward.
                      (      fsrqmem.asm):00014         *
                      (      fsrqmem.asm):00015         * F$SRqMem also updates the system memory map according to 8K DAT blocks. If an
                      (      fsrqmem.asm):00016         * empty block is found, this routine re-does the 32 entries in the SMAP table to
                      (      fsrqmem.asm):00017         * indicate that they are free.
                      (      fsrqmem.asm):00018         *
                      (      fsrqmem.asm):00019         * Input:  D = Byte count
                      (      fsrqmem.asm):00020         *
                      (      fsrqmem.asm):00021         * Output: U = Address of allocated memory area
                      (      fsrqmem.asm):00022         *
                      (      fsrqmem.asm):00023         * Error:  CC = C bit set; B = error code
                      (      fsrqmem.asm):00024         *
082A EC41             (      fsrqmem.asm):00025         FSRqMem  ldd   R$D,u        get memory allocation size requested
082C C300FF           (      fsrqmem.asm):00026                  addd  #$00FF       round it up to nearest 256 byte page (e.g. $1FF = $2FE)
082F 5F               (      fsrqmem.asm):00027                  clrb               just keep # of pages (and start 8K block #, e.g. $2FE = $200)
0830 ED41             (      fsrqmem.asm):00028                  std   R$D,u        save rounded version back to user
                      (      fsrqmem.asm):00029         *         leay  Bt.Start/256,y      
                      (      fsrqmem.asm):00030         *         leay  $20,y        skip Block 0 (always reserved for system)
                      (      fsrqmem.asm):00031         * Change to pshs a,b:use 1,s for block # to check, and ,s for TFM spot
                      (      fsrqmem.asm):00032         *         incb               skip block 0 (always reserved for system)
0832 3406             (      fsrqmem.asm):00033                  pshs  d            reserve a byte & put 0 byte on stack
                      (      fsrqmem.asm):00034         
                      (      fsrqmem.asm):00035         
                      (      fsrqmem.asm):00036         * IMPORTANT!!!
                      (      fsrqmem.asm):00037         * The following code was put in some time back to fix a problem.  That problem was not documented
                      (      fsrqmem.asm):00038         * so I cannot recall why this code was in place.  What it appears to do is reset the system page
                      (      fsrqmem.asm):00039         * memory map based upon the state of the system DAT image.
                      (      fsrqmem.asm):00040         * This code really slows down F$SRqMem and since that system call is used quite often in the system,
                      (      fsrqmem.asm):00041         * I am commenting it out in the hopes that I can remember what the hell I put it in for. -- Boisy
                      (      fsrqmem.asm):00042                  IFEQ  1
                      (      fsrqmem.asm):00043                  ldy   <D.SysMem    get ptr to SMAP table
                      (      fsrqmem.asm):00044         * This loop updates the SMAP table if anything can be marked as unused
0834                  (      fsrqmem.asm):00045         L082F    ldx   <D.SysDAT    get pointer to system DAT block list
                      (      fsrqmem.asm):00046                  lslb               adjust block offset for 2 bytes/entry
                      (      fsrqmem.asm):00047                  ldd   b,x          get block type/# from system DAT
                      (      fsrqmem.asm):00048                  cmpd  #DAT.Free    Unused block?
                      (      fsrqmem.asm):00049                  beq   L0847        yes, mark it free in SMAP table
                      (      fsrqmem.asm):00050                  ldx   <D.BlkMap    No, get ptr to MMAP table
                      (      fsrqmem.asm):00051                  lda   d,x          Get block marker for 2 meg mem map
                      (      fsrqmem.asm):00052                  cmpa  #RAMinUse    Is it in use (not free, ROM or used by module)?
                      (      fsrqmem.asm):00053                  bne   L0848        No, mark it as type it is in SMAP table
                      (      fsrqmem.asm):00054                  leay  32,y         Yes, move to next block in pages
                      (      fsrqmem.asm):00055                  bra   L084F        move to next block & try again
                      (      fsrqmem.asm):00056         * Free RAM:
0834                  (      fsrqmem.asm):00057         L0847    clra               Byte to fill system page map with (0=Not in use)
                      (      fsrqmem.asm):00058         * NOT! RAMinUse:
                      (      fsrqmem.asm):00059                  IFNE   H6309
0834                  (      fsrqmem.asm):00060         L0848    sta   ,s           Put it on stack
                      (      fsrqmem.asm):00061                  ldw   #$0020       Get size of 8K block in pages
                      (      fsrqmem.asm):00062                  tfm   s,y+         Mark entire block's worth of pages with A
                      (      fsrqmem.asm):00063                  ELSE
0834                  (      fsrqmem.asm):00064         L0848    ldb   #32              count = 32 pages
0834                  (      fsrqmem.asm):00065         L084A    sta   ,y+              mark the RAM
                      (      fsrqmem.asm):00066                  decb
                      (      fsrqmem.asm):00067                  bne    L084A
                      (      fsrqmem.asm):00068                  ENDC
0834                  (      fsrqmem.asm):00069         L084F    inc   1,s          Bump up to next block to check
                      (      fsrqmem.asm):00070                  ldb   1,s          Get it
                      (      fsrqmem.asm):00071                  cmpb  #DAT.BlCt    Done whole 64k system space?
                      (      fsrqmem.asm):00072                  blo   L082F        no, keep checking
                      (      fsrqmem.asm):00073                  ENDC
                      (      fsrqmem.asm):00074         
                      (      fsrqmem.asm):00075         
                      (      fsrqmem.asm):00076         * Now we can actually attempt to allocate the system RAM requested
                      (      fsrqmem.asm):00077         * NOTE: Opt for CoCo/TC9 OS9 ONLY: skip last 256 - Bt.Start pages since
                      (      fsrqmem.asm):00078         * they are: Kernel (REL/BOOT/KRN - 17 pages), vector RAM & I/O (2 pages)
                      (      fsrqmem.asm):00079         * (Already permanently marked @ L01D2)
                      (      fsrqmem.asm):00080         * At the start, Y is pointing to the end of the SMAP table+1
0834 9E4E             (      fsrqmem.asm):00081                  ldx   <D.SysMem    Get start of table ptr
0836 318900ED         (      fsrqmem.asm):00082                  leay  Bt.Start/256,x
083A C620             (      fsrqmem.asm):00083                  ldb   #32          skip block 0: it's always full
083C 3A               (      fsrqmem.asm):00084                  abx                same size, but faster than leax $20,x
                      (      fsrqmem.asm):00085         *         leay  -(256-(Bt.Start>>8)),y  skip Kernel, Vector RAM & I/O (Can't be free)
083D E641             (      fsrqmem.asm):00086         L0857    ldb   R$A,u        Get # 256 byte pages requested
                      (      fsrqmem.asm):00087         * Loop (from end of system mem map) to look for # continuous pages requested
     083F             (      fsrqmem.asm):00088         L0859    equ   *
                      (      fsrqmem.asm):00089                  IFNE  H6309
083F 103712           (      fsrqmem.asm):00090                  cmpr  x,y          We still have any system RAM left to try?
                      (      fsrqmem.asm):00091                  ELSE
                      (      fsrqmem.asm):00092                  pshs  x
                      (      fsrqmem.asm):00093                  cmpy  ,s++
                      (      fsrqmem.asm):00094                  ENDC
0842 2205             (      fsrqmem.asm):00095                  bhi   L0863        Yes, continue
0844 53               (      fsrqmem.asm):00096                  comb               Exit with No System RAM Error
0845 C6ED             (      fsrqmem.asm):00097                  ldb   #E$NoRAM
0847 2031             (      fsrqmem.asm):00098                  bra   L0894        Eat stack & exit
                      (      fsrqmem.asm):00099         
0849 A6A2             (      fsrqmem.asm):00100         L0863    lda   ,-y          Get page marker (starting @ end of SMAP)
084B 26F0             (      fsrqmem.asm):00101                  bne   L0857        Used, try next lower page
084D 5A               (      fsrqmem.asm):00102                  decb               Found 1 page, dec # pages we need to allocate
084E 26EF             (      fsrqmem.asm):00103                  bne   L0859        Still more pages needed, check if we can get more
0850 10AFE4           (      fsrqmem.asm):00104                  sty   ,s           Found free contiguous pages, save SMAP entry ptr
0853 A661             (      fsrqmem.asm):00105                  lda   1,s          Get LSB of ptr
0855 44               (      fsrqmem.asm):00106                  lsra               Divide by 32 (Calculate start 8K block #)
0856 44               (      fsrqmem.asm):00107                  lsra  
0857 44               (      fsrqmem.asm):00108                  lsra  
0858 44               (      fsrqmem.asm):00109                  lsra  
0859 44               (      fsrqmem.asm):00110                  lsra  
085A E661             (      fsrqmem.asm):00111                  ldb   1,s          Get LSB of ptr again
085C C41F             (      fsrqmem.asm):00112                  andb  #%00011111   Keep only within 8K block offset
085E EB41             (      fsrqmem.asm):00113                  addb  R$A,u        Add # pages requested
0860 CB1F             (      fsrqmem.asm):00114                  addb  #$1F         Round up to nearest 8K block
0862 54               (      fsrqmem.asm):00115                  lsrb               Divide by 32 (Calculate end 8K block #)
0863 54               (      fsrqmem.asm):00116                  lsrb  
0864 54               (      fsrqmem.asm):00117                  lsrb  
0865 54               (      fsrqmem.asm):00118                  lsrb  
0866 54               (      fsrqmem.asm):00119                  lsrb
0867 9E4A             (      fsrqmem.asm):00120                  ldx   <D.SysPrc    Get ptr to system proc. dsc.
0869 17013B           (      fsrqmem.asm):00121                  lbsr  L09BE        Allocate an image with our start/end block #'s
086C 250C             (      fsrqmem.asm):00122                  bcs   L0894        Couldn't, exit with error
086E E641             (      fsrqmem.asm):00123                  ldb   R$A,u        Get # pages requested
                      (      fsrqmem.asm):00124         *         lda   #RAMinUse    Get SMAP in use flag
                      (      fsrqmem.asm):00125         *L088A    sta   ,y+          Mark all the pages requested as In Use
0870 6CA0             (      fsrqmem.asm):00126         L088A    inc   ,y+          Since RAMinUse is 1, we can save space by INC'ing from 0->1
0872 5A               (      fsrqmem.asm):00127                  decb
0873 26FB             (      fsrqmem.asm):00128                  bne   L088A
0875 A661             (      fsrqmem.asm):00129                  lda   1,s          Get MSB of ptr to start of newly allocated Sys RAM
0877 ED4A             (      fsrqmem.asm):00130                  std   R$U,u        Save for caller
0879 5F               (      fsrqmem.asm):00131                  clrb               No error
087A 35C0             (      fsrqmem.asm):00132         L0894    puls  u,pc         Eat stack (U is changed after it exits) & return
                      (      fsrqmem.asm):00133         
                      (      fsrqmem.asm):00134         
                      (      fsrqmem.asm):00135         **************************************************
                      (      fsrqmem.asm):00136         * System Call: F$SRtMem
                      (      fsrqmem.asm):00137         *
                      (      fsrqmem.asm):00138         * Function: Return memory
                      (      fsrqmem.asm):00139         *
                      (      fsrqmem.asm):00140         * Input:  U = Address of memory to return
                      (      fsrqmem.asm):00141         *         D = Number of bytes to return
                      (      fsrqmem.asm):00142         *
                      (      fsrqmem.asm):00143         * Output: None
                      (      fsrqmem.asm):00144         *
                      (      fsrqmem.asm):00145         * Error:  CC = C bit set; B = error code
                      (      fsrqmem.asm):00146         *
087C EC41             (      fsrqmem.asm):00147         FSRtMem  ldd   R$D,u        get # pages to free up
087E 2756             (      fsrqmem.asm):00148                  beq   L08F2        nothing to free, return without error
0880 C300FF           (      fsrqmem.asm):00149                  addd  #$00FF       round it up to nearest page
0883 E64B             (      fsrqmem.asm):00150                  ldb   R$U+1,u      get LSB of address
0885 2704             (      fsrqmem.asm):00151                  beq   L08A6        it's a even page, skip ahead
0887 53               (      fsrqmem.asm):00152                  comb               set carry
0888 C6D2             (      fsrqmem.asm):00153                  ldb   #E$BPAddr    get error code
088A 39               (      fsrqmem.asm):00154                  rts                return
                      (      fsrqmem.asm):00155         
088B E64A             (      fsrqmem.asm):00156         L08A6    ldb   R$U,u        get MSB of page address
088D 2747             (      fsrqmem.asm):00157                  beq   L08F2        not a legal page, return without error
088F 9E4E             (      fsrqmem.asm):00158                  ldx   <D.SysMem    get pointer to system memory map
0891 3A               (      fsrqmem.asm):00159                  abx                set pointer into map
     0892             (      fsrqmem.asm):00160         L08AD    equ   *
                      (      fsrqmem.asm):00161                  IFNE  H6309
0892 62FE80           (      fsrqmem.asm):00162                  aim   #^RAMinUse,,x+
                      (      fsrqmem.asm):00163                  ELSE
                      (      fsrqmem.asm):00164                  ldb   ,x
                      (      fsrqmem.asm):00165                  andb  #^RAMinUse
                      (      fsrqmem.asm):00166                  stb   ,x+
                      (      fsrqmem.asm):00167                  ENDC
0895 4A               (      fsrqmem.asm):00168                  deca  
0896 26FA             (      fsrqmem.asm):00169                  bne   L08AD
                      (      fsrqmem.asm):00170         * Scan DAT image to find memory blocks to free up
0898 9E4C             (      fsrqmem.asm):00171                  ldx   <D.SysDAT    get pointer to system DAT image
                      (      fsrqmem.asm):00172                  IFNE  H6309
089A 118608           (      fsrqmem.asm):00173                  lde   #DAT.BlCt    get # blocks to check
                      (      fsrqmem.asm):00174                  ELSE
                      (      fsrqmem.asm):00175                  ldy   #DAT.BlCt
                      (      fsrqmem.asm):00176                  ENDC
089D EC84             (      fsrqmem.asm):00177         L08BC    ldd   ,x           get block image
089F 1083333E         (      fsrqmem.asm):00178                  cmpd  #DAT.Free    is it already free?
08A3 272B             (      fsrqmem.asm):00179                  beq   L08EC        yes, skip to next one
08A5 DE40             (      fsrqmem.asm):00180                  ldu   <D.BlkMap    get pointer to MMU block map
08A7 A6CB             (      fsrqmem.asm):00181                  lda   d,u          get allocation flag for this block: 16-bit offset
08A9 8101             (      fsrqmem.asm):00182                  cmpa  #RAMinUse    being used?
08AB 2623             (      fsrqmem.asm):00183                  bne   L08EC        no, move to next block
08AD 1F10             (      fsrqmem.asm):00184                  tfr   x,d
08AF 934C             (      fsrqmem.asm):00185                  subd  <D.SysDAT
08B1 58               (      fsrqmem.asm):00186                  lslb  
08B2 58               (      fsrqmem.asm):00187                  lslb  
08B3 58               (      fsrqmem.asm):00188                  lslb  
08B4 58               (      fsrqmem.asm):00189                  lslb  
08B5 DE4E             (      fsrqmem.asm):00190                  ldu   <D.SysMem    get pointer to system map
                      (      fsrqmem.asm):00191                  IFNE   H6309
08B7 103003           (      fsrqmem.asm):00192                  addr   d,u
                      (      fsrqmem.asm):00193         * Check if we can remove the entire memory block from system map
08BA 11C610           (      fsrqmem.asm):00194                  ldf   #16          get # pages per block/2
08BD ECC1             (      fsrqmem.asm):00195         L08DA    ldd   ,u++         Either of these 2 pages allocated?
                      (      fsrqmem.asm):00196                  ELSE
                      (      fsrqmem.asm):00197                  leau  d,u
                      (      fsrqmem.asm):00198                  ldb   #32
08BF                  (      fsrqmem.asm):00199         L08DA    lda   ,u+          Either of these 2 pages allocated?
                      (      fsrqmem.asm):00200                  ENDC
08BF 260F             (      fsrqmem.asm):00201                  bne   L08EC        yes, can't free block, skip to next one
                      (      fsrqmem.asm):00202                  IFNE  H6309
08C1 115A             (      fsrqmem.asm):00203                  decf               checked all pages?
                      (      fsrqmem.asm):00204                  ELSE
                      (      fsrqmem.asm):00205                  decb
                      (      fsrqmem.asm):00206                  ENDC
08C3 26F8             (      fsrqmem.asm):00207                  bne   L08DA        no, keep looking
08C5 EC84             (      fsrqmem.asm):00208                  ldd   ,x           get block # into B: could be >$80
08C7 DE40             (      fsrqmem.asm):00209                  ldu   <D.BlkMap    point to allocation table
                      (      fsrqmem.asm):00210                  IFNE  H6309
08C9 A7CB             (      fsrqmem.asm):00211                  sta   d,u          clear the block using 16-bit offset
                      (      fsrqmem.asm):00212                  ELSE
                      (      fsrqmem.asm):00213                  clr   d,u
                      (      fsrqmem.asm):00214                  ENDC
08CB CC333E           (      fsrqmem.asm):00215                  ldd   #DAT.Free    get free block marker
08CE ED84             (      fsrqmem.asm):00216                  std   ,x           save it into DAT image
08D0 3002             (      fsrqmem.asm):00217         L08EC    leax  2,x          move to next DAT block
                      (      fsrqmem.asm):00218                  IFNE  H6309
08D2 114A             (      fsrqmem.asm):00219                  dece               done?
                      (      fsrqmem.asm):00220                  ELSE
                      (      fsrqmem.asm):00221                  leay  -1,y
                      (      fsrqmem.asm):00222                  ENDC
08D4 26C7             (      fsrqmem.asm):00223                  bne   L08BC        no, keep checking
08D6 5F               (      fsrqmem.asm):00224         L08F2    clrb               clear errors
08D7 39               (      fsrqmem.asm):00225         L08F3    rts                return
                      (      fsrqmem.asm):00226         
                      (      fsrqmem.asm):00227         
                      (      fsrqmem.asm):00228         **************************************************
                      (      fsrqmem.asm):00229         * System Call: F$Boot
                      (      fsrqmem.asm):00230         *
                      (      fsrqmem.asm):00231         * Function: Bootstrap the system
                      (      fsrqmem.asm):00232         *
                      (      fsrqmem.asm):00233         * Optimized for size, as it's only called once...
                      (      fsrqmem.asm):00234         *
                      (      fsrqmem.asm):00235         * Input:  None
                      (      fsrqmem.asm):00236         *
                      (      fsrqmem.asm):00237         * Output: None
                      (      fsrqmem.asm):00238         *
                      (      fsrqmem.asm):00239         * Error:  CC = C bit set; B = error code
                      (      fsrqmem.asm):00240         *
08D8                  (      fsrqmem.asm):00241         FBoot
08D8 8674             (      fsrqmem.asm):00242                  lda   #'t        tried to boot
08DA 9D5E             (      fsrqmem.asm):00243                  jsr   <D.BtBug
08DC 43               (      fsrqmem.asm):00244                  coma               Set boot flag
08DD 9631             (      fsrqmem.asm):00245                  lda   <D.Boot      we booted once before?
08DF 26F6             (      fsrqmem.asm):00246                  bne   L08F3        Yes, return
08E1 0C31             (      fsrqmem.asm):00247                  inc   <D.Boot      Set boot flag
08E3 9E24             (      fsrqmem.asm):00248                  ldx   <D.Init      Get ptr to init module if it exists
08E5 270D             (      fsrqmem.asm):00249                  beq   L0908        it doesn't, point to boot name
08E7 EC8814           (      fsrqmem.asm):00250                  ldd   <BootStr,x   Get offset to text
08EA 2708             (      fsrqmem.asm):00251                  beq   L0908        Doesn't exist, get hard coded text
08EC 308B             (      fsrqmem.asm):00252                  leax   d,x         Adjust X to point to boot module
08EE 2007             (      fsrqmem.asm):00253                  bra   L090C        Try & link to module
                      (      fsrqmem.asm):00254         
08F0 426F6FF4         (      fsrqmem.asm):00255         boot     fcs   /Boot/
                      (      fsrqmem.asm):00256         
08F4 308CF9           (      fsrqmem.asm):00257         L0908    leax  <boot,pcr
                      (      fsrqmem.asm):00258         * Link to module and execute
08F7 86C1             (      fsrqmem.asm):00259         L090C    lda   #Systm+Objct
08F9 103F00           (      fsrqmem.asm):00260                  os9   F$Link   
08FC 25D9             (      fsrqmem.asm):00261                  bcs   L08F3
08FE 8662             (      fsrqmem.asm):00262                  lda   #'b        calling boot
0900 9D5E             (      fsrqmem.asm):00263                  jsr   <D.BtBug
0902 ADA4             (      fsrqmem.asm):00264                  jsr   ,y           load boot file
0904 25D1             (      fsrqmem.asm):00265                  bcs   L08F3
0906 DD38             (      fsrqmem.asm):00266                  std   <D.BtSz      save boot file size
0908 9F36             (      fsrqmem.asm):00267                  stx   <D.BtPtr     save start pointer of bootfile
090A 8662             (      fsrqmem.asm):00268                  lda   #'b        boot returns OK
090C 9D5E             (      fsrqmem.asm):00269                  jsr   <D.BtBug
                      (      fsrqmem.asm):00270         
                      (      fsrqmem.asm):00271         * added for IOMan system memory extentions
                      (      fsrqmem.asm):00272                  IFNE  H6309
090E EC04             (      fsrqmem.asm):00273                  ldd   M$Name,x   grab the name offset
0910 EC8B             (      fsrqmem.asm):00274                  ldd   d,x        find the first 2 bytes of the first module
0912 10834E69         (      fsrqmem.asm):00275                  cmpd  #$4E69     'Ni' ? (NitrOS9 module?)
0916 2604             (      fsrqmem.asm):00276                  bne   not.ext    no, not system memory extensions
0918 EC09             (      fsrqmem.asm):00277                  ldd   M$Exec,x   grab the execution ptr
091A 6E8B             (      fsrqmem.asm):00278                  jmp   d,x        and go execute the system memory extension module
                      (      fsrqmem.asm):00279                  ENDC
                      (      fsrqmem.asm):00280         
091C DC38             (      fsrqmem.asm):00281         not.ext  ldd   <D.BtSz
091E 8D0E             (      fsrqmem.asm):00282                  bsr   I.VBlock   internal verify block routine
0920 9E4C             (      fsrqmem.asm):00283                  ldx   <D.SysDAT    get system DAT pointer
0922 E60D             (      fsrqmem.asm):00284                  ldb   $0D,x      get highest allocated block number
0924 5C               (      fsrqmem.asm):00285                  incb             allocate block 0, too
0925 9E40             (      fsrqmem.asm):00286                  ldx   <D.BlkMap  point to the memory block map
0927 16F8E5           (      fsrqmem.asm):00287                  lbra  L01DF      and go mark the blocks as used.
                      (      fsrqmem.asm):00288         
                      (      fsrqmem.asm):00289         
                      (      fsrqmem.asm):00290         **************************************************
                      (      fsrqmem.asm):00291         * System Call: F$VBlock
                      (      fsrqmem.asm):00292         *
                      (      fsrqmem.asm):00293         * Function: ???
                      (      fsrqmem.asm):00294         *
                      (      fsrqmem.asm):00295         * Input:  D = Size of block to verify
                      (      fsrqmem.asm):00296         *         X = Start address to verify
                      (      fsrqmem.asm):00297         *
                      (      fsrqmem.asm):00298         * Output: None
                      (      fsrqmem.asm):00299         *
                      (      fsrqmem.asm):00300         * Error:  CC = C bit set; B = error code       
                      (      fsrqmem.asm):00301         *
092A EC41             (      fsrqmem.asm):00302         FVBlock  ldd   R$D,u      size of block to verify
092C AE46             (      fsrqmem.asm):00303                  ldx   R$X,u      start address to verify
                      (      fsrqmem.asm):00304         
092E 338B             (      fsrqmem.asm):00305         I.VBlock leau  d,x          point to end of bootfile
0930 1F10             (      fsrqmem.asm):00306                  tfr   x,d
0932 84E0             (      fsrqmem.asm):00307                  anda  #$E0
0934 5F               (      fsrqmem.asm):00308                  clrb  
0935 3446             (      fsrqmem.asm):00309                  pshs  d,u
0937 44               (      fsrqmem.asm):00310                  lsra  
0938 44               (      fsrqmem.asm):00311                  lsra  
0939 44               (      fsrqmem.asm):00312                  lsra  
093A 44               (      fsrqmem.asm):00313                  lsra  
093B 109E4C           (      fsrqmem.asm):00314                  ldy   <D.SysDAT    get pointer to system DAT
093E 31A6             (      fsrqmem.asm):00315                  leay  a,y          offset to bootfile
0940 EC84             (      fsrqmem.asm):00316         L092D    ldd   M$ID,x       get module ID
0942 108387CD         (      fsrqmem.asm):00317                  cmpd  #M$ID12      legal ID?
0946 262C             (      fsrqmem.asm):00318                  bne   L0954        no, keep looking
                      (      fsrqmem.asm):00319         
0948 EC04             (      fsrqmem.asm):00320                  ldd   M$Name,x   find name offset pointer
094A 3410             (      fsrqmem.asm):00321                  pshs  x
094C 308B             (      fsrqmem.asm):00322                  leax  d,x
094E A680             (      fsrqmem.asm):00323         name.prt lda   ,x+        get first character of the name
0950 9D5E             (      fsrqmem.asm):00324                  jsr   <D.BtBug   print it out
0952 2AFA             (      fsrqmem.asm):00325                  bpl   name.prt
0954 8620             (      fsrqmem.asm):00326                  lda   #C$SPAC    a space
0956 9D5E             (      fsrqmem.asm):00327                  jsr   <D.BtBug
0958 3510             (      fsrqmem.asm):00328                  puls  x
                      (      fsrqmem.asm):00329         
                      (      fsrqmem.asm):00330                  IFNE  H6309
095A ECE4             (      fsrqmem.asm):00331                  ldd   ,s         offset into block
095C 103201           (      fsrqmem.asm):00332                  subr  d,x        make X=offset into block
                      (      fsrqmem.asm):00333                  ELSE
                      (      fsrqmem.asm):00334                  tfr   x,d
                      (      fsrqmem.asm):00335                  subd  ,s
                      (      fsrqmem.asm):00336                  tfr   d,x
                      (      fsrqmem.asm):00337                  ENDC
095F 1F20             (      fsrqmem.asm):00338                  tfr   y,d
0961 103F2E           (      fsrqmem.asm):00339                  os9   F$VModul 
                      (      fsrqmem.asm):00340                  IFNE  H6309
0964 10A6E4           (      fsrqmem.asm):00341                  ldw   ,s
0967 308E             (      fsrqmem.asm):00342                  leax  w,x
                      (      fsrqmem.asm):00343                  ELSE
                      (      fsrqmem.asm):00344                  pshs  b
                      (      fsrqmem.asm):00345                  ldd   1,s
                      (      fsrqmem.asm):00346                  leax  d,x
                      (      fsrqmem.asm):00347                  puls  b
                      (      fsrqmem.asm):00348                  ENDC
0969 2404             (      fsrqmem.asm):00349                  bcc   L094E
096B C1E7             (      fsrqmem.asm):00350                  cmpb  #E$KwnMod
096D 2605             (      fsrqmem.asm):00351                  bne   L0954
096F EC02             (      fsrqmem.asm):00352         L094E    ldd   M$Size,x
0971 308B             (      fsrqmem.asm):00353                  leax  d,x
0973 8C               (      fsrqmem.asm):00354                  fcb   $8C        skip 2 bytes
                      (      fsrqmem.asm):00355         
0974 3001             (      fsrqmem.asm):00356         L0954    leax  1,x          move to next byte
0976 AC62             (      fsrqmem.asm):00357         L0956    cmpx  2,s          gone thru whole bootfile?
0978 25C6             (      fsrqmem.asm):00358                  bcs   L092D        no, keep looking
097A 3264             (      fsrqmem.asm):00359                  leas  4,s          purge stack
097C 5F               (      fsrqmem.asm):00360                  clrb
097D 39               (      fsrqmem.asm):00361                  rts
                      (/home/strick/6809):00667                         
                      (/home/strick/6809):00668         *         use   fallram.asm
                      (/home/strick/6809):00669                         
                      (/home/strick/6809):00670                         
                      (/home/strick/6809):00671                 IFNE    H6309
                      (/home/strick/6809):00672                 use     fdelram.asm
                      (      fdelram.asm):00001         **************************************************
                      (      fdelram.asm):00002         * System Call: F$DelRAM
                      (      fdelram.asm):00003         *
                      (      fdelram.asm):00004         * Function: Deallocate RAM blocks
                      (      fdelram.asm):00005         *
                      (      fdelram.asm):00006         * Input:  B = Number of blocks
                      (      fdelram.asm):00007         *         X = Beginning block number
                      (      fdelram.asm):00008         *
                      (      fdelram.asm):00009         * Output: None
                      (      fdelram.asm):00010         *
                      (      fdelram.asm):00011         * Error:  CC = C bit set; B = error code
                      (      fdelram.asm):00012         *
097E E642             (      fdelram.asm):00013         FDelRAM  ldb   R$B,u      # of blocks to de-allocate
0980 271F             (      fdelram.asm):00014                  beq   DelRAM.2   if none, exit
0982 DC42             (      fdelram.asm):00015                  ldd   <D.BlkMap+2 get end of the block map
0984 9340             (      fdelram.asm):00016                  subd  <D.BlkMap  subtract out start of the block map
0986 A346             (      fdelram.asm):00017                  subd  R$X,u      take out starting block number
0988 2317             (      fdelram.asm):00018                  bls   DelRAM.2   exit if the starting block is ># of blocks available
098A 4D               (      fdelram.asm):00019                  tsta             check high byte of RAM #
098B 2606             (      fdelram.asm):00020                  bne   DelRAM.0   if not zero, skip it
098D E142             (      fdelram.asm):00021                  cmpb  R$B,u      check against size of the block
098F 2402             (      fdelram.asm):00022                  bhs   DelRAM.0   if size is >RAM available
0991 E742             (      fdelram.asm):00023                  stb   R$B,u      save actual # of blocks deleted
0993 9E40             (      fdelram.asm):00024         DelRAM.0 ldx   <D.BlkMap  get start address of the block map
0995 EC46             (      fdelram.asm):00025                  ldd   R$X,u      starting address of the RAM to de-allocate
0997 308B             (      fdelram.asm):00026                  leax  d,x        slower, but smaller than ADDR
0999 E642             (      fdelram.asm):00027                  ldb   R$B,u      get actual # of blocks to de-allocate
     099B             (      fdelram.asm):00028         DelRAM.1 equ   *
                      (      fdelram.asm):00029                  IFNE  H6309
099B 62FE80           (      fdelram.asm):00030                  aim   #^RAMinUse,,x+  set to RAM not in use
                      (      fdelram.asm):00031                  ELSE
                      (      fdelram.asm):00032                  lda   ,x
                      (      fdelram.asm):00033                  anda  #^RAMinUse
                      (      fdelram.asm):00034                  sta   ,x+
                      (      fdelram.asm):00035                  ENDC
099E 5A               (      fdelram.asm):00036                  decb             count down a block
099F 26FA             (      fdelram.asm):00037                  bne   DelRAM.1   continue
09A1 5F               (      fdelram.asm):00038         DelRAM.2 clrb             and exit
09A2 39               (      fdelram.asm):00039                  rts   
                      (/home/strick/6809):00673                 ENDC    
                      (/home/strick/6809):00674                         
                      (/home/strick/6809):00675                 use     fallimg.asm
                      (      fallimg.asm):00001         **************************************************
                      (      fallimg.asm):00002         * System Call: F$AllImg
                      (      fallimg.asm):00003         *
                      (      fallimg.asm):00004         * Function: Allocate image RAM blocks
                      (      fallimg.asm):00005         *
                      (      fallimg.asm):00006         * Input:  A = Starting block number
                      (      fallimg.asm):00007         *         B = Number of blocks
                      (      fallimg.asm):00008         *         X = Process descriptor pointer
                      (      fallimg.asm):00009         *
                      (      fallimg.asm):00010         * Output: None
                      (      fallimg.asm):00011         *
                      (      fallimg.asm):00012         * Error:  CC = C bit set; B = error code
                      (      fallimg.asm):00013         *
09A3 EC41             (      fallimg.asm):00014         FAllImg  ldd   R$D,u        get starting block # & # of blocks
09A5 AE46             (      fallimg.asm):00015                  ldx   R$X,u        get process descriptor pointer
                      (      fallimg.asm):00016         * Entry point from F$SRqMem
                      (      fallimg.asm):00017         *
                      (      fallimg.asm):00018         * 6309 NOTE: IF W IS USED HERE, TRY TO PRESERVE IT AS F$SRQMEM WILL
                      (      fallimg.asm):00019         *   PROBABLY END UP USING IT
09A7 3476             (      fallimg.asm):00020         L09BE    pshs  d,x,y,u      
09A9 48               (      fallimg.asm):00021                  lsla  
09AA 318840           (      fallimg.asm):00022                  leay  P$DATImg,x
09AD 31A6             (      fallimg.asm):00023                  leay  a,y
09AF 4F               (      fallimg.asm):00024                  clra  
09B0 1F01             (      fallimg.asm):00025                  tfr   d,x
09B2 DE40             (      fallimg.asm):00026                  ldu   <D.BlkMap
09B4 3476             (      fallimg.asm):00027                  pshs  d,x,y,u
09B6 ECA1             (      fallimg.asm):00028         L09CD    ldd   ,y++
09B8 1083333E         (      fallimg.asm):00029                  cmpd  #DAT.Free
09BC 270C             (      fallimg.asm):00030                  beq   L09E2
09BE A6CB             (      fallimg.asm):00031                  lda   d,u
09C0 8101             (      fallimg.asm):00032                  cmpa  #RAMinUse
09C2 3506             (      fallimg.asm):00033                  puls  d
09C4 2619             (      fallimg.asm):00034                  bne   L09F7
                      (      fallimg.asm):00035                  IFNE  H6309
09C6 104A             (      fallimg.asm):00036                  decd
                      (      fallimg.asm):00037                  ELSE
                      (      fallimg.asm):00038                  subd  #$0001
                      (      fallimg.asm):00039                  ENDC
09C8 3406             (      fallimg.asm):00040                  pshs  d
09CA 301F             (      fallimg.asm):00041         L09E2    leax  -1,x
09CC 26E8             (      fallimg.asm):00042                  bne   L09CD
09CE AEE1             (      fallimg.asm):00043                  ldx   ,s++
09D0 2716             (      fallimg.asm):00044                  beq   L0A00
09D2 A6C0             (      fallimg.asm):00045         L09EA    lda   ,u+
09D4 2604             (      fallimg.asm):00046                  bne   L09F2
09D6 301F             (      fallimg.asm):00047                  leax  -1,x
09D8 270E             (      fallimg.asm):00048                  beq   L0A00
09DA 119342           (      fallimg.asm):00049         L09F2    cmpu  <D.BlkMap+2
09DD 25F3             (      fallimg.asm):00050                  bcs   L09EA
09DF C6CF             (      fallimg.asm):00051         L09F7    ldb   #E$MemFul
09E1 3266             (      fallimg.asm):00052                  leas  6,s
09E3 E761             (      fallimg.asm):00053                  stb   1,s
09E5 53               (      fallimg.asm):00054                  comb  
09E6 35F6             (      fallimg.asm):00055                  puls  d,x,y,u,pc
                      (      fallimg.asm):00056         
09E8 3570             (      fallimg.asm):00057         L0A00    puls  x,y,u
09EA ECA1             (      fallimg.asm):00058         L0A02    ldd   ,y++
09EC 1083333E         (      fallimg.asm):00059                  cmpd  #DAT.Free
09F0 260C             (      fallimg.asm):00060                  bne   L0A16
09F2 A6C0             (      fallimg.asm):00061         L0A0A    lda   ,u+
09F4 26FC             (      fallimg.asm):00062                  bne   L0A0A
09F6 6CC2             (      fallimg.asm):00063                  inc   ,-u
09F8 1F30             (      fallimg.asm):00064                  tfr   u,d
09FA 9340             (      fallimg.asm):00065                  subd  <D.BlkMap
09FC ED3E             (      fallimg.asm):00066                  std   -2,y
09FE 301F             (      fallimg.asm):00067         L0A16    leax  -1,x
0A00 26E8             (      fallimg.asm):00068                  bne   L0A02
0A02 AE62             (      fallimg.asm):00069                  ldx   2,s
                      (      fallimg.asm):00070                  IFNE  H6309
0A04 61100C           (      fallimg.asm):00071                  oim   #ImgChg,P$State,x
                      (      fallimg.asm):00072                  ELSE
                      (      fallimg.asm):00073                  lda   P$State,x
                      (      fallimg.asm):00074                  ora   #ImgChg
                      (      fallimg.asm):00075                  sta   P$State,x
                      (      fallimg.asm):00076                  ENDC
0A07 5F               (      fallimg.asm):00077                  clrb  
0A08 35F6             (      fallimg.asm):00078                  puls  d,x,y,u,pc
                      (/home/strick/6809):00676                         
                      (/home/strick/6809):00677                 use     ffreehb.asm
                      (      ffreehb.asm):00001         **************************************************
                      (      ffreehb.asm):00002         * System Call: F$FreeHB
                      (      ffreehb.asm):00003         *
                      (      ffreehb.asm):00004         * Function: Get free high block
                      (      ffreehb.asm):00005         *
                      (      ffreehb.asm):00006         * Called from F$MapBlk and from SS.MpGPB)
                      (      ffreehb.asm):00007         *
                      (      ffreehb.asm):00008         * Input:  B = Block count
                      (      ffreehb.asm):00009         *         Y = DAT image pointer
                      (      ffreehb.asm):00010         *
                      (      ffreehb.asm):00011         * Output: A = High block number
                      (      ffreehb.asm):00012         *
                      (      ffreehb.asm):00013         * Error:  CC = C bit set; B = error code
                      (      ffreehb.asm):00014         *
0A0A E642             (      ffreehb.asm):00015         FFreeHB  ldb   R$B,u          Get # blocks requested
0A0C 10AE48           (      ffreehb.asm):00016                  ldy   R$Y,u          Get DAT Img ptr
0A0F 8D05             (      ffreehb.asm):00017                  bsr   L0A31          Go find free blocks in high part of DAT
0A11 2502             (      ffreehb.asm):00018         L0A2C    bcs   L0A30          Couldn't find any, exit with error
0A13 A741             (      ffreehb.asm):00019                  sta   R$A,u          Save starting block #
0A15 39               (      ffreehb.asm):00020         L0A30    rts                  Return
                      (      ffreehb.asm):00021         
0A16 1F98             (      ffreehb.asm):00022         L0A31    tfr   b,a            Copy # blocks requested to A
                      (      ffreehb.asm):00023         * This gets called directly from within F$Link
0A18 8009             (      ffreehb.asm):00024         L0A33    suba  #$09           Invert within 8
0A1A 40               (      ffreehb.asm):00025                  nega  
0A1B 3416             (      ffreehb.asm):00026                  pshs  x,d            Save X, block # & block count
0A1D CCFFFF           (      ffreehb.asm):00027                  ldd   #$FFFF         -1'
0A20 3406             (      ffreehb.asm):00028         L0A56    pshs  d
                      (      ffreehb.asm):00029         
                      (      ffreehb.asm):00030         * Move to next block - SHOULD OPTIMIZE WITH W
0A22 4F               (      ffreehb.asm):00031         L0A58    clra                 # free blocks found so far=0
0A23 E662             (      ffreehb.asm):00032                  ldb   2,s            Get block #
0A25 EBE4             (      ffreehb.asm):00033                  addb  ,s             Add block increment (point to next block)
0A27 E762             (      ffreehb.asm):00034                  stb   2,s            Save new block # to check
0A29 E161             (      ffreehb.asm):00035                  cmpb  1,s            Same as block count?
0A2B 2612             (      ffreehb.asm):00036                  bne   L0A75          No, skip ahead
0A2D C6CF             (      ffreehb.asm):00037                  ldb   #E$MemFul      Preset error for 207 (Process mem full)
0A2F 109C4C           (      ffreehb.asm):00038                  cmpy  <D.SysDAT      Is it the system process?
0A32 2602             (      ffreehb.asm):00039                  bne   L0A6C          No, exit with error 207
0A34 C6ED             (      ffreehb.asm):00040                  ldb   #E$NoRAM       System Mem full (237)
0A36 E763             (      ffreehb.asm):00041         L0A6C    stb   3,s            Save error code
0A38 53               (      ffreehb.asm):00042                  comb                 set carry
0A39 2011             (      ffreehb.asm):00043                  bra   L0A82          Exit with error
                      (      ffreehb.asm):00044         
0A3B 1F89             (      ffreehb.asm):00045         L0A71    tfr   a,b            Copy # blocks to B
0A3D EB62             (      ffreehb.asm):00046                  addb  2,s            Add to current start block #
0A3F 58               (      ffreehb.asm):00047         L0A75    lslb                 Multiply block # by 2
0A40 AEA5             (      ffreehb.asm):00048                  ldx   b,y            Get DAT marker for that block
0A42 8C333E           (      ffreehb.asm):00049                  cmpx  #DAT.Free      Empty block?
0A45 26DB             (      ffreehb.asm):00050                  bne   L0A58          No, move to next block
0A47 4C               (      ffreehb.asm):00051                  inca                 Bump up # blocks free counter
0A48 A163             (      ffreehb.asm):00052                  cmpa  3,s            Have we got enough?
0A4A 26EF             (      ffreehb.asm):00053                  bne   L0A71          No, keep looking
0A4C 3262             (      ffreehb.asm):00054         L0A82    leas  2,s            Eat temporary stack
0A4E 3596             (      ffreehb.asm):00055                  puls  d,x,pc         Restore reg, error code & return
                      (      ffreehb.asm):00056         
                      (      ffreehb.asm):00057         
                      (      ffreehb.asm):00058         * WHERE DOES THIS EVER GET CALLED FROM???
                      (      ffreehb.asm):00059         * Rodney says: "It's called via os9p1 syscall vector in line 393"
0A50 E642             (      ffreehb.asm):00060         FSFreeLB ldb   R$B,u          Get block count
0A52 10AE48           (      ffreehb.asm):00061                  ldy   R$Y,u          Get ptr to DAT Image
0A55 8D02             (      ffreehb.asm):00062                  bsr   L0A4B          Go find block #'s
0A57 20B8             (      ffreehb.asm):00063                  bra   L0A2C          Do error checking & exit (since never called,
                      (      ffreehb.asm):00064         * not worried about speed)          
                      (      ffreehb.asm):00065         
0A59 86FF             (      ffreehb.asm):00066         L0A4B    lda   #$FF           Value to start loop at block 0
0A5B 3416             (      ffreehb.asm):00067                  pshs  x,d            Preserve X,flag & block count
                      (      ffreehb.asm):00068         *         lda   #$01           # to add to go to next block (positive here)
0A5D 40               (      ffreehb.asm):00069                  nega             -(-1)=+1
0A5E C009             (      ffreehb.asm):00070                  subb  #9             Drop block count to -8 to -1 (invert within 8)
0A60 50               (      ffreehb.asm):00071                  negb                 Negate so it is a positive # again
0A61 20BD             (      ffreehb.asm):00072                  bra   L0A56          Go into main find loop
                      (      ffreehb.asm):00073         
                      (      ffreehb.asm):00074         
                      (      ffreehb.asm):00075         **************************************************
                      (      ffreehb.asm):00076         * System Call: F$FreeLB
                      (      ffreehb.asm):00077         *
                      (      ffreehb.asm):00078         * Function: Get free low block
                      (      ffreehb.asm):00079         *
                      (      ffreehb.asm):00080         * Input:  B = Block count
                      (      ffreehb.asm):00081         *         Y = DAT image pointer
                      (      ffreehb.asm):00082         *
                      (      ffreehb.asm):00083         * Output: A = Low block number
                      (      ffreehb.asm):00084         *
                      (      ffreehb.asm):00085         * Error:  CC = C bit set; B = error code
                      (      ffreehb.asm):00086         *
0A63 EC41             (      ffreehb.asm):00087         FFreeLB  ldd   R$D,u
0A65 AE46             (      ffreehb.asm):00088                  ldx   R$X,u
0A67 EE4A             (      ffreehb.asm):00089                  ldu   R$U,u
0A69 3476             (      ffreehb.asm):00090         L0A8C    pshs  d,x,y,u
0A6B 318840           (      ffreehb.asm):00091                  leay  <P$DATImg,x
0A6E 48               (      ffreehb.asm):00092                  lsla  
0A6F 31A6             (      ffreehb.asm):00093                  leay  a,y
                      (      ffreehb.asm):00094                  IFNE  H6309
0A71 4F               (      ffreehb.asm):00095                  clra
0A72 58               (      ffreehb.asm):00096                  lslb
0A73 1F06             (      ffreehb.asm):00097                  tfr   d,w
0A75 113832           (      ffreehb.asm):00098                  tfm   u+,y+
0A78 61100C           (      ffreehb.asm):00099                  oim   #ImgChg,P$State,x
                      (      ffreehb.asm):00100                  ELSE
                      (      ffreehb.asm):00101                  lslb
0A7B                  (      ffreehb.asm):00102         L0ALoop  lda   ,u+
                      (      ffreehb.asm):00103                  sta   ,y+
                      (      ffreehb.asm):00104                  decb
                      (      ffreehb.asm):00105                  bne   L0ALoop
                      (      ffreehb.asm):00106                  lda   P$State,x
                      (      ffreehb.asm):00107                  ora   #ImgChg
                      (      ffreehb.asm):00108                  sta   P$State,x
                      (      ffreehb.asm):00109                  ENDC
0A7B 5F               (      ffreehb.asm):00110                  clrb  
0A7C 35F6             (      ffreehb.asm):00111                  puls  d,x,y,u,pc
                      (/home/strick/6809):00678                         
                      (/home/strick/6809):00679                 use     fdatlog.asm
                      (      fdatlog.asm):00001         **************************************************
                      (      fdatlog.asm):00002         * System Call: F$DATLog
                      (      fdatlog.asm):00003         *
                      (      fdatlog.asm):00004         * Function: Convert DAT block/offset to logical address
                      (      fdatlog.asm):00005         *
                      (      fdatlog.asm):00006         * Input:  B = DAT image offset
                      (      fdatlog.asm):00007         *         X = Block offset
                      (      fdatlog.asm):00008         *
                      (      fdatlog.asm):00009         * Output: X = Logical address
                      (      fdatlog.asm):00010         *
                      (      fdatlog.asm):00011         * Error:  CC = C bit set; B = error code
                      (      fdatlog.asm):00012         *
0A7E E642             (      fdatlog.asm):00013         FDATLog  ldb   R$B,u          Get logical Block #
0A80 AE46             (      fdatlog.asm):00014                  ldx   R$X,u          Get offset into block
0A82 8D04             (      fdatlog.asm):00015                  bsr   CmpLBlk        Go modify X to be Logical address
0A84 AF46             (      fdatlog.asm):00016                  stx   R$X,u          Save in callers X register
0A86 5F               (      fdatlog.asm):00017                  clrb                 No error & return
0A87 39               (      fdatlog.asm):00018                  rts   
                      (      fdatlog.asm):00019         
                      (      fdatlog.asm):00020         * Compute logical address given B=Logical Block # & X=offset into block
                      (      fdatlog.asm):00021         * Exits with B being logical block & X=logical address
0A88 3404             (      fdatlog.asm):00022         CmpLBlk  pshs  b              Preserve logical block #
0A8A 1F98             (      fdatlog.asm):00023                  tfr   b,a            Move log. block # to A
0A8C 48               (      fdatlog.asm):00024                  lsla                 Multiply logical block by 32
0A8D 48               (      fdatlog.asm):00025                  lsla  
0A8E 48               (      fdatlog.asm):00026                  lsla  
0A8F 48               (      fdatlog.asm):00027                  lsla  
0A90 48               (      fdatlog.asm):00028                  lsla  
0A91 5F               (      fdatlog.asm):00029                  clrb                 D=8k offset value
                      (      fdatlog.asm):00030                  IFNE  H6309
0A92 103001           (      fdatlog.asm):00031                  addr  d,x            X=logical address in 64k workspace
                      (      fdatlog.asm):00032                  ELSE
                      (      fdatlog.asm):00033                  leax  d,x
                      (      fdatlog.asm):00034                  ENDC
0A95 3584             (      fdatlog.asm):00035                  puls  b,pc           Restore A, block # & return
                      (/home/strick/6809):00680                         
                      (/home/strick/6809):00681                 use     fld.asm
                      (          fld.asm):00001         **************************************************
                      (          fld.asm):00002         * System Call: F$LDAXY
                      (          fld.asm):00003         *
                      (          fld.asm):00004         * Function: Load A [X,[Y]]
                      (          fld.asm):00005         *
                      (          fld.asm):00006         * Input:  X = Block offset
                      (          fld.asm):00007         *         Y = DAT image pointer
                      (          fld.asm):00008         *
                      (          fld.asm):00009         * Output: A = data byte at X offset of Y
                      (          fld.asm):00010         *
                      (          fld.asm):00011         * Error:  CC = C bit set; B = error code
                      (          fld.asm):00012         *
0A97 AE46             (          fld.asm):00013         FLDAXY   ldx   R$X,u          Get offset within block (S/B $0000-$1FFF)
0A99 10AE48           (          fld.asm):00014                  ldy   R$Y,u          Get ptr to DAT block entry
0A9C 8D03             (          fld.asm):00015                  bsr   L0AC8          Go get byte
0A9E A741             (          fld.asm):00016                  sta   R$A,u          Save in caller's A reg.
0AA0 39               (          fld.asm):00017                  rts   
                      (          fld.asm):00018         
                      (          fld.asm):00019         * Entry: X=offset ($0000-$1fff) to get from block pointed to by Y (DAT entry
                      (          fld.asm):00020         * format)
0AA1 A621             (          fld.asm):00021         L0AC8    lda   1,y            Get MMU block # to get data from
0AA3 5F               (          fld.asm):00022                  clrb                 Clear carry/setup for STB
0AA4 3401             (          fld.asm):00023                  pshs  cc             Preserve interrupt status/settings
0AA6 1A50             (          fld.asm):00024                  orcc  #IntMasks      shut IRQ's off
0AA8 B7FFA0           (          fld.asm):00025                  sta   >DAT.Regs      Map block into $0000-$1FFF
                      (          fld.asm):00026                  IFNE  H6309
0AAB 21F4             (          fld.asm):00027                  brn    L0AC8         short delay
                      (          fld.asm):00028                  ENDC
0AAD A684             (          fld.asm):00029                  lda   ,x             Get byte
0AAF F7FFA0           (          fld.asm):00030                  stb   >DAT.Regs      Map block 0 into $0000-$1FFF
                      (          fld.asm):00031                  IFNE  H6309
0AB2 21ED             (          fld.asm):00032                  brn    L0AC8         short delay
                      (          fld.asm):00033                  ENDC
0AB4 3581             (          fld.asm):00034                  puls  pc,cc          Get interrupt status/(or turn on) & return
                      (          fld.asm):00035         
                      (          fld.asm):00036         * Get 1st byte of LDDDXY - also used by many other routines
                      (          fld.asm):00037         * Increments X on exit; adjusts X for within 8K block & Y (DAT img ptr)
0AB6 A621             (          fld.asm):00038         LDAXY    lda   1,y            Get MMU block #
0AB8 3405             (          fld.asm):00039                  pshs  b,cc
0ABA 5F               (          fld.asm):00040                  clrb
0ABB 1A50             (          fld.asm):00041                  orcc  #IntMasks      Shut off interrupts
0ABD B7FFA0           (          fld.asm):00042                  sta   >DAT.Regs      Map in MMU block into slot 0
0AC0 A680             (          fld.asm):00043                  lda   ,x+            Get byte
0AC2 F7FFA0           (          fld.asm):00044                  stb   >DAT.Regs
                      (          fld.asm):00045         *         clr   >DAT.Regs     Map in MMU block #0 into slot 0
                      (          fld.asm):00046         *         andcc #^IntMasks
0AC5 3505             (          fld.asm):00047                  puls  b,cc
0AC7 2006             (          fld.asm):00048                  bra   AdjBlk0
                      (          fld.asm):00049         
0AC9 3089E000         (          fld.asm):00050         L0AEA    leax  >-DAT.BlSz,x      Bump offset ptr to start of block again
0ACD 3122             (          fld.asm):00051                  leay  2,y            Bump source MMU block up to next on in DAT Image
0ACF 8C2000           (          fld.asm):00052         AdjBlk0  cmpx  #DAT.BlSz      Going to wrap out of our block?
0AD2 24F5             (          fld.asm):00053                  bhs   L0AEA          Yes, go adjust
0AD4 39               (          fld.asm):00054                  rts                  No, return
                      (          fld.asm):00055         
                      (          fld.asm):00056         
                      (          fld.asm):00057         **************************************************
                      (          fld.asm):00058         * System Call: F$LDDXY
                      (          fld.asm):00059         *
                      (          fld.asm):00060         * Function: Load D [D+X,[Y]]
                      (          fld.asm):00061         *
                      (          fld.asm):00062         * Input:  D = Offset to offset
                      (          fld.asm):00063         *         X = Offset
                      (          fld.asm):00064         *         Y = DAT image pointer
                      (          fld.asm):00065         *
                      (          fld.asm):00066         * Output: D = bytes address by [D+X,Y]
                      (          fld.asm):00067         *
                      (          fld.asm):00068         * Error:  CC = C bit set; B = error code
                      (          fld.asm):00069         *
0AD5 EC41             (          fld.asm):00070         FLDDDXY  ldd   R$D,u          Get offset to offset within DAT Image
0AD7 3346             (          fld.asm):00071                  leau  R$X,u          Point U to Offset
0AD9 3730             (          fld.asm):00072                  pulu  x,y            Y=Offset within DAT Image, X=DAT Image ptr
0ADB 8D04             (          fld.asm):00073                  bsr   L0B02          Go get 2 bytes
0ADD ED57             (          fld.asm):00074                  std   -(R$X+3),u     Save into caller's X
0ADF 5F               (          fld.asm):00075                  clrb                 No error & return
0AE0 39               (          fld.asm):00076                  rts   
                      (          fld.asm):00077         * Get 2 bytes for LDDDXY (also called by other routines)
                      (          fld.asm):00078         * Should simply map in 2 blocks, and do a LDD (don't have to worry about wrap)
0AE1 3470             (          fld.asm):00079         L0B02    pshs  u,y,x          Preserve regs
                      (          fld.asm):00080                  IFNE  H6309
0AE3 103001           (          fld.asm):00081                  addr  d,x            Point X to X+D
                      (          fld.asm):00082                  ELSE
                      (          fld.asm):00083                  leax  d,x
                      (          fld.asm):00084                  ENDC
0AE6 8DE7             (          fld.asm):00085                  bsr   AdjBlk0        Wrap address around for 1 block
0AE8 DE4C             (          fld.asm):00086                  ldu   <D.SysDAT      Get sys DAT Image ptr
                      (          fld.asm):00087         *         lda   1,u            Get MMU block #0
0AEA 4F               (          fld.asm):00088                  clra             system block 0 =0 always
0AEB E643             (          fld.asm):00089                  ldb   3,u            Get MMU block #1
0AED 1F03             (          fld.asm):00090                  tfr   d,u        make U=blocks to re-map in once done
0AEF A621             (          fld.asm):00091                  lda   1,y            Get MMU block #0
0AF1 E623             (          fld.asm):00092                  ldb   3,y            Get MMU block #1
0AF3 3401             (          fld.asm):00093                  pshs  cc             Preserve int. status
0AF5 1A50             (          fld.asm):00094                  orcc  #IntMasks      shut off int.
0AF7 FDFFA0           (          fld.asm):00095                  std   >DAT.Regs      Map in both blocks
0AFA EC84             (          fld.asm):00096                  ldd   ,x             Get 2 bytes
0AFC FFFFA0           (          fld.asm):00097                  stu   >DAT.Regs      Map original blocks in
                      (          fld.asm):00098         *         tfr   y,w            Restore W
0AFF 35F1             (          fld.asm):00099                  puls  pc,u,y,x,cc    Restore regs & return
                      (/home/strick/6809):00682                         
                      (/home/strick/6809):00683                 IFNE    H6309
                      (/home/strick/6809):00684                 use     fcpymem.asm
                      (      fcpymem.asm):00001         **************************************************
                      (      fcpymem.asm):00002         * System Call: F$CpyMem
                      (      fcpymem.asm):00003         *
                      (      fcpymem.asm):00004         * Function: Copy external memory
                      (      fcpymem.asm):00005         *
                      (      fcpymem.asm):00006         * Input:  D = Starting memory block number
                      (      fcpymem.asm):00007         *         X = Offset in block to begin copy
                      (      fcpymem.asm):00008         *         Y = Byte count
                      (      fcpymem.asm):00009         *         U = Caller's destination buffer
                      (      fcpymem.asm):00010         *
                      (      fcpymem.asm):00011         * Output: None
                      (      fcpymem.asm):00012         *
                      (      fcpymem.asm):00013         * Error:  CC = C bit set; B = error code
                      (      fcpymem.asm):00014         *
                      (      fcpymem.asm):00015                  IFNE  H6309
                      (      fcpymem.asm):00016         * F$CpyMem for NitrOS-9 Level Two
                      (      fcpymem.asm):00017         * Notes:
                      (      fcpymem.asm):00018         * We currently check to see if the end of the buffer we are
                      (      fcpymem.asm):00019         * copying to will overflow past $FFFF, and exit if it does.
                      (      fcpymem.asm):00020         * Should this be changed to check if it overflows past the
                      (      fcpymem.asm):00021         * data area of a process, or at least into Vector page RAM
                      (      fcpymem.asm):00022         * and I/O ($FE00-$FFFF)???
                      (      fcpymem.asm):00023         *
0B01 EC48             (      fcpymem.asm):00024         FCpyMem  ldd   R$Y,u        get byte count
0B03 2748             (      fcpymem.asm):00025                  beq   L0A01        nothing there so nothing to move, return
0B05 E34A             (      fcpymem.asm):00026                  addd  R$U,u        add it caller's buffer start ptr.
0B07 81FE             (      fcpymem.asm):00027                  cmpa  #$FE         Is it going to overwrite Vector or I/O pages?
0B09 2442             (      fcpymem.asm):00028                  bhs   L0A01        Yes, exit without error
0B0B 3270             (      fcpymem.asm):00029                  leas  -$10,s       make a buffer for DAT image
0B0D 31E4             (      fcpymem.asm):00030                  leay  ,s           point to it
0B0F 3460             (      fcpymem.asm):00031                  pshs  y,u          Preserve stack buffer ptr & register stack pointer
0B11 9E50             (      fcpymem.asm):00032                  ldx   <D.Proc      Get caller's task #
0B13 11E606           (      fcpymem.asm):00033                  ldf   P$Task,x     get task # of caller
0B16 318840           (      fcpymem.asm):00034                  leay  P$DATImg,x   Point to DAT image in callers's process dsc.
0B19 AE41             (      fcpymem.asm):00035                  ldx   R$D,u        get caller's DAT image pointer
0B1B 118608           (      fcpymem.asm):00036                  lde   #$08         counter (for double byte moves)
0B1E EEE4             (      fcpymem.asm):00037                  ldu   ,s           get temp. stack buffer pointer
                      (      fcpymem.asm):00038         
                      (      fcpymem.asm):00039         * This loop copies the DAT image from the caller's process descriptor into
                      (      fcpymem.asm):00040         * a temporary buffer on the stack
     0B20             (      fcpymem.asm):00041         L09C7    equ   *
0B20 104F             (      fcpymem.asm):00042                  clrd               Clear offset to 0
0B22 8DBD             (      fcpymem.asm):00043                  bsr   L0B02         Short cut OS9 F$LDDDXY
0B24 EDC1             (      fcpymem.asm):00044                  std   ,u++         save it to buffer
0B26 3002             (      fcpymem.asm):00045                  leax  2,x          Bump ptr
0B28 114A             (      fcpymem.asm):00046                  dece               Decrement loop counter
0B2A 26F4             (      fcpymem.asm):00047                  bne   L09C7        Keep doing until 16 bytes is done
                      (      fcpymem.asm):00048         
0B2C EE62             (      fcpymem.asm):00049                  ldu   2,s          Get back register stack pointer
0B2E 17015D           (      fcpymem.asm):00050                  lbsr  L0CA6        Short cut OS9 F$ResTsk
0B31 2516             (      fcpymem.asm):00051                  bcs   L09FB        If error, deallocate our stack & exit with error
0B33 1F9E             (      fcpymem.asm):00052                  tfr   b,e          New temp task # into E
0B35 58               (      fcpymem.asm):00053                  lslb               Multiply by 2 for 2 byte entries
0B36 9EA1             (      fcpymem.asm):00054                  ldx   <D.TskIPt    Get ptr to task image table
                      (      fcpymem.asm):00055         * Make new temporary task use the memory blocks from the requested DAT image
                      (      fcpymem.asm):00056         *   from the caller, to help do a 1 shot F$Move command, because in general
                      (      fcpymem.asm):00057         * the temporary DAT image is not associated with a task.
0B38 EEE4             (      fcpymem.asm):00058                  ldu   ,s           Get pointer to DAT image we just copied
0B3A EF85             (      fcpymem.asm):00059                  stu   b,x          Point new task image table to our DAT image copy
0B3C EE62             (      fcpymem.asm):00060                  ldu   2,s          Get back data area pointer
0B3E 1F60             (      fcpymem.asm):00061                  tfr   w,d          Move temp & caller's task #'s into proper regs.
0B40 3402             (      fcpymem.asm):00062                  pshs  a            Save new task #
0B42 8D0D             (      fcpymem.asm):00063                  bsr   L0B25        F$Move the memory into the caller's requested area
                      (      fcpymem.asm):00064         * BAD Bug! Well, maybe not.  F$Move NEVER returns an error code
                      (      fcpymem.asm):00065         * but if it did, we'd skip the $RelTsk, and have an orphan task
                      (      fcpymem.asm):00066         * left over.
                      (      fcpymem.asm):00067         *         bcs   L09FB        If error, purge stack & return with error code
0B44 3504             (      fcpymem.asm):00068                  puls  b            Get back new task #
0B46 170160           (      fcpymem.asm):00069                  lbsr  L0CC3        Short cut OS9 F$RelTsk
0B49 32E814           (      fcpymem.asm):00070         L09FB    leas  <$14,s       Purge our stack buffer & return
0B4C 39               (      fcpymem.asm):00071                  rts
                      (      fcpymem.asm):00072         
0B4D 5F               (      fcpymem.asm):00073         L0A01    clrb               No error & exit
0B4E 39               (      fcpymem.asm):00074                  rts   
                      (      fcpymem.asm):00075         
                      (      fcpymem.asm):00076         
                      (      fcpymem.asm):00077                  ELSE
                      (      fcpymem.asm):00078         
                      (      fcpymem.asm):00079         * F$CpyMem for OS-9 Level Two
0B4F                  (      fcpymem.asm):00080         FCpyMem  ldd   R$Y,u      byte count
                      (      fcpymem.asm):00081                  beq   L0A01      ..skip if none
                      (      fcpymem.asm):00082                  addd  R$U,u      plus dest buff
                      (      fcpymem.asm):00083                  bcs   L0A01
                      (      fcpymem.asm):00084                  leas  -$10,s
                      (      fcpymem.asm):00085                  leay  ,s
                      (      fcpymem.asm):00086                  pshs  a,b,y      save buff end,img ptr
                      (      fcpymem.asm):00087                  ldx   <D.Proc
                      (      fcpymem.asm):00088                  ldb   P$Task,X
                      (      fcpymem.asm):00089                  pshs  b          save caller task#
                      (      fcpymem.asm):00090                  leay  P$DATImg,x
                      (      fcpymem.asm):00091                  ldx   R$D,u      X=caller DAT img ptr
                      (      fcpymem.asm):00092                  ldb   #8
                      (      fcpymem.asm):00093                  pshs  b,u
                      (      fcpymem.asm):00094                  ldu   P$Task,s   U=tempdat ptr
                      (      fcpymem.asm):00095         
0B4F                  (      fcpymem.asm):00096         L09C7    clra             D=0000
                      (      fcpymem.asm):00097                  clrb
                      (      fcpymem.asm):00098                  os9   F$LDDDXY   move user DAT image
                      (      fcpymem.asm):00099                  std   ,u++       to sys tempDAT img
                      (      fcpymem.asm):00100                  leax  2,x
                      (      fcpymem.asm):00101                  dec   ,s
                      (      fcpymem.asm):00102                  bne   L09C7      ..loop
                      (      fcpymem.asm):00103         
                      (      fcpymem.asm):00104                  puls  b,u
                      (      fcpymem.asm):00105                  ldx   R$X,u      X=offset
                      (      fcpymem.asm):00106                  ldu   R$U,u      U=dest buffer
                      (      fcpymem.asm):00107                  ldy   3,s        Y=tmpDAT
                      (      fcpymem.asm):00108         
                      (      fcpymem.asm):00109                  puls  b
                      (      fcpymem.asm):00110                  bra   L09E7
                      (      fcpymem.asm):00111         
0B4F                  (      fcpymem.asm):00112         N09D6    leax  $E000,x
                      (      fcpymem.asm):00113                  leay  2,y
                      (      fcpymem.asm):00114         
                      (      fcpymem.asm):00115         *------------------------------------------------*
                      (      fcpymem.asm):00116         * Copy Loop:
                      (      fcpymem.asm):00117         
0B4F                  (      fcpymem.asm):00118         L09E7    cmpx  #$2000
                      (      fcpymem.asm):00119                  bcc   N09D6
                      (      fcpymem.asm):00120         
0B4F                  (      fcpymem.asm):00121         L09EC    os9   F$LDAXY    get byte
                      (      fcpymem.asm):00122                  leax  1,x
                      (      fcpymem.asm):00123                  exg   x,u
                      (      fcpymem.asm):00124         
                      (      fcpymem.asm):00125                  os9   F$STABX    store byte
                      (      fcpymem.asm):00126                  leax  1,x        plus one
                      (      fcpymem.asm):00127                  cmpx  ,s
                      (      fcpymem.asm):00128                  exg   x,u
                      (      fcpymem.asm):00129                  bcs   L09E7
                      (      fcpymem.asm):00130                  leas  $14,s
                      (      fcpymem.asm):00131         
0B4F                  (      fcpymem.asm):00132         L0A01    clrb             ok
                      (      fcpymem.asm):00133                  rts              end.
                      (      fcpymem.asm):00134         
                      (      fcpymem.asm):00135                  ENDC
                      (      fcpymem.asm):00136         
                      (/home/strick/6809):00685                 ENDC    
                      (/home/strick/6809):00686                         
                      (/home/strick/6809):00687                 use     fmove.asm
                      (        fmove.asm):00001         **************************************************
                      (        fmove.asm):00002         * System Call: F$Move
                      (        fmove.asm):00003         *
                      (        fmove.asm):00004         * Function: Move data (low bound first)
                      (        fmove.asm):00005         *
                      (        fmove.asm):00006         * Input:  A = Source task #
                      (        fmove.asm):00007         *         B = Destination task #
                      (        fmove.asm):00008         *         X = Source pointer
                      (        fmove.asm):00009         *         Y = Number of bytes to move
                      (        fmove.asm):00010         *         U = Destination pointer
                      (        fmove.asm):00011         *
                      (        fmove.asm):00012         * Output: None
                      (        fmove.asm):00013         *
                      (        fmove.asm):00014         * Error:  CC = C bit set; B = error code
                      (        fmove.asm):00015         *
                      (        fmove.asm):00016         * 2009/12/31 - Modified 6809 version so that it does not use the stack
                      (        fmove.asm):00017         * while MMU is in used... this addresses a crash that occurred when the
                      (        fmove.asm):00018         * bootfile was too small, causing the process descriptor to be allocated
                      (        fmove.asm):00019         * in the $AXXX range, and as a result, the process stack pointer would get
                      (        fmove.asm):00020         * switched out when $FFA5-$FFA6 was written and the stack would disappear.
                      (        fmove.asm):00021         *
                      (        fmove.asm):00022                  IFEQ  H6309
0B4F                  (        fmove.asm):00023         L0A01    clrb
                      (        fmove.asm):00024                  rts
                      (        fmove.asm):00025                  ENDC
                      (        fmove.asm):00026         
0B4F EC41             (        fmove.asm):00027         FMove    ldd   R$D,u        get source & destination task #'s
0B51 10AE48           (        fmove.asm):00028         L0B25    ldy   R$Y,u        Get # bytes to move
0B54 27F7             (        fmove.asm):00029                  beq   L0A01        None, exit without error
0B56 AE46             (        fmove.asm):00030                  ldx   R$X,u        get source pointer
0B58 EE4A             (        fmove.asm):00031                  ldu   R$U,u        get destination pointer
                      (        fmove.asm):00032         
0B5A 3476             (        fmove.asm):00033         L0B2C    pshs  d,x,y,u      preserve it all
0B5C 3426             (        fmove.asm):00034                  pshs  d,y          save task #'s & byte count
0B5E 1F89             (        fmove.asm):00035                  tfr   a,b          copy source task to B
0B60 17009D           (        fmove.asm):00036                  lbsr  L0BF5        calculate block offset of source
0B63 31C6             (        fmove.asm):00037                  leay  a,u          point to block
0B65 3430             (        fmove.asm):00038                  pshs  x,y          save source pointer & DAT pointer of source
0B67 E669             (        fmove.asm):00039                  ldb   9,s          get destination task #
0B69 AE6E             (        fmove.asm):00040                  ldx   14,s         get destination pointer
0B6B 170092           (        fmove.asm):00041                  lbsr  L0BF5        calculate block offset
0B6E 31C6             (        fmove.asm):00042                  leay  a,u          point to block
0B70 3430             (        fmove.asm):00043                  pshs  x,y          save dest. pointer & DAT pointer to dest.
                      (        fmove.asm):00044         * try ldq #$20002000/ subr x,w / pshsw (+3), take out ldd (-3)
0B72 CC2000           (        fmove.asm):00045                  ldd   #DAT.BlSz    get block size
0B75 A3E4             (        fmove.asm):00046                  subd  ,s           take off offset
0B77 3406             (        fmove.asm):00047                  pshs  d            preserve
0B79 CC2000           (        fmove.asm):00048                  ldd   #DAT.BlSz    init offset in block
0B7C A366             (        fmove.asm):00049                  subd  6,s
0B7E 3406             (        fmove.asm):00050                  pshs  d            save distance to end??
0B80 AE68             (        fmove.asm):00051                  ldx   8,s          get source pointer
0B82 3089A000         (        fmove.asm):00052                  leax  -$6000,x     make X point to where we'll map block ($a000)
0B86 EE64             (        fmove.asm):00053                  ldu   4,s          get destination pointer
0B88 33C9C000         (        fmove.asm):00054                  leau  -$4000,u     make U point to where we'll map block ($c000)
0B8C 109E4C           (        fmove.asm):00055                  ldy   <D.SysDAT    Get ptr to system DAT image
0B8F A62B             (        fmove.asm):00056                  lda   11,y         Get MMU block #5
0B91 E62D             (        fmove.asm):00057                  ldb   13,y         Get MMU block #6
0B93 1F02             (        fmove.asm):00058                  tfr   d,y          Move to Y since unused in loop below
                      (        fmove.asm):00059         * Main move loop
                      (        fmove.asm):00060         * Stack:  0,s=distance to end of source block
                      (        fmove.asm):00061         *         2,s=distance to end of destination block
                      (        fmove.asm):00062         *         4,s=pointer to destination
                      (        fmove.asm):00063         *         6,s=pointer to destination DAT image
                      (        fmove.asm):00064         *         8,s=pointer to source
                      (        fmove.asm):00065         *        10,s=pointer to source DAT image
                      (        fmove.asm):00066         *        12,s=task # of source
                      (        fmove.asm):00067         *        13,s=task # of destination
                      (        fmove.asm):00068         *        14,s=total byte count of move
                      (        fmove.asm):00069         * Registers: X=Source pointer
                      (        fmove.asm):00070         *            U=Destination pointer
     0B95             (        fmove.asm):00071         L0B6A    equ   *
                      (        fmove.asm):00072                  IFNE  H6309
0B95 ECF806           (        fmove.asm):00073                  ldd   [<6,s]       [B]=Block # of source
0B98 10A6F80A         (        fmove.asm):00074                  ldw   [<10,s]      [A]=Block # of destination
0B9C 1FF8             (        fmove.asm):00075                  tfr   f,a
                      (        fmove.asm):00076         * Calculate move length for this pass
0B9E 10A66E           (        fmove.asm):00077                  ldw   14,s         get full byte count
0BA1 10A1E4           (        fmove.asm):00078                  cmpw  ,s           we gonna overlap source?
0BA4 2303             (        fmove.asm):00079                  bls   L0B82        no, skip ahead
0BA6 10A6E4           (        fmove.asm):00080                  ldw   ,s           get remaining bytes in source block
0BA9 10A162           (        fmove.asm):00081         L0B82    cmpw  2,s          we gonna overlap destination?
0BAC 2303             (        fmove.asm):00082                  bls   L0B89        no, skip ahead
0BAE 10A662           (        fmove.asm):00083                  ldw   2,s          get remaining bytes in destination block
0BB1 10810100         (        fmove.asm):00084         L0B89    cmpw  #$0100       less than 128 bytes?
0BB5 2304             (        fmove.asm):00085                  bls   L0B92        yes, skip ahead
0BB7 10860100         (        fmove.asm):00086                  ldw   #$0100       force to 128 bytes
0BBB 10A76C           (        fmove.asm):00087         L0B92    stw   12,s         save count
0BBE 1A50             (        fmove.asm):00088                  orcc  #IntMasks    Shut off interrupts
0BC0 FDFFA5           (        fmove.asm):00089                  std   >$FFA5       map in the blocks
0BC3 113813           (        fmove.asm):00090                  tfm   x+,u+        Copy up to 128 bytes
0BC6 10BFFFA5         (        fmove.asm):00091                  sty   >$FFA5       Restore system blocks 5&6 to normal
0BCA 1CAF             (        fmove.asm):00092                  andcc #^IntMasks
0BCC EC6E             (        fmove.asm):00093                  ldd   14,s         get full count
0BCE A36C             (        fmove.asm):00094                  subd  12,s         done?
0BD0 2726             (        fmove.asm):00095                  beq   L0BEF        yes, return
0BD2 ED6E             (        fmove.asm):00096                  std   14,s         save updated count
0BD4 ECE4             (        fmove.asm):00097                  ldd   ,s           get current offset in block
0BD6 A36C             (        fmove.asm):00098                  subd  12,s         need to switch source block?
0BD8 2609             (        fmove.asm):00099                  bne   L0BD7        no, skip ahead
0BDA 8620             (        fmove.asm):00100                  lda   #$20       B=0 from 'bne' above
0BDC 103201           (        fmove.asm):00101                  subr  d,x          reset source back to begining of block
0BDF 6C6B             (        fmove.asm):00102                  inc   11,s         add 2 to source DAT pointer
0BE1 6C6B             (        fmove.asm):00103                  inc   11,s
0BE3 EDE4             (        fmove.asm):00104         L0BD7    std   ,s           save updated source offset in block
0BE5 EC62             (        fmove.asm):00105                  ldd   2,s          get destination offset
0BE7 A36C             (        fmove.asm):00106                  subd  12,s         need to switch destination block?
0BE9 2609             (        fmove.asm):00107                  bne   L0BEA        no, skip ahead
0BEB 8620             (        fmove.asm):00108                  lda   #$20       B=0 from 'bne', above
0BED 103203           (        fmove.asm):00109                  subr  d,u          reset destination back to beginning of block
0BF0 6C67             (        fmove.asm):00110                  inc   7,s          add 2 to destination DAT pointer
0BF2 6C67             (        fmove.asm):00111                  inc   7,s
0BF4 ED62             (        fmove.asm):00112         L0BEA    std   2,s          save updated destination offset in block
0BF6 209D             (        fmove.asm):00113                  bra   L0B6A        go do next block
                      (        fmove.asm):00114         * Block move done, return
0BF8 32E810           (        fmove.asm):00115         L0BEF    leas  16,s         purge stack
0BFB 5F               (        fmove.asm):00116         L0BF2    clrb               clear errors
0BFC 35F6             (        fmove.asm):00117                  puls  d,x,y,u,pc   return
                      (        fmove.asm):00118                  ELSE
                      (        fmove.asm):00119         * Main move loop
                      (        fmove.asm):00120         * Stack:  0,s=distance to end of source block
                      (        fmove.asm):00121         *         2,s=distance to end of destination block
                      (        fmove.asm):00122         *         4,s=pointer to destination
                      (        fmove.asm):00123         *         6,s=pointer to destination DAT image
                      (        fmove.asm):00124         *         8,s=pointer to source
                      (        fmove.asm):00125         *        10,s=pointer to source DAT image
                      (        fmove.asm):00126         *        12,s=task # of source
                      (        fmove.asm):00127         *        13,s=task # of destination
                      (        fmove.asm):00128         *        14,s=total byte count of move
                      (        fmove.asm):00129         * Registers: X=Source pointer
                      (        fmove.asm):00130         *            U=Destination pointer
0BFE                  (        fmove.asm):00131         L0BXA    pshs  cc         
                      (        fmove.asm):00132                  ldd   [<$07,s]    
                      (        fmove.asm):00133                  pshs  b  
                      (        fmove.asm):00134                  ldd   [<$0C,s]    
                      (        fmove.asm):00135                  pshs  b  
                      (        fmove.asm):00136                  ldd   <$11,s
                      (        fmove.asm):00137                  cmpd  $03,s
                      (        fmove.asm):00138                  bls   L0B82
                      (        fmove.asm):00139                  ldd   $03,s
0BFE                  (        fmove.asm):00140         L0B82    cmpd  $05,s
                      (        fmove.asm):00141                  bls   L0B89
                      (        fmove.asm):00142                  ldd   $05,s
0BFE                  (        fmove.asm):00143         L0B89    cmpd  #$0040
                      (        fmove.asm):00144                  bls   L0B84
                      (        fmove.asm):00145                  ldd   #$0040
0BFE                  (        fmove.asm):00146         L0B84    std   $0F,s
                      (        fmove.asm):00147                  puls  y
                      (        fmove.asm):00148                  orcc  #IntMasks
                      (        fmove.asm):00149                  lda   $0E,s  +++
                      (        fmove.asm):00150                  sty   >$FFA5
                      (        fmove.asm):00151         ***** NO STACK USE BETWEEN HERE.....
                      (        fmove.asm):00152                          tfr   d,y    +++
                      (        fmove.asm):00153                  andb  #$07
                      (        fmove.asm):00154                  beq   L0B99
0BFE                  (        fmove.asm):00155         L0B92    lda   ,x+
                      (        fmove.asm):00156                  sta   ,u+
                      (        fmove.asm):00157                  decb     
                      (        fmove.asm):00158                  bne   L0B92       
0BFE                  (        fmove.asm):00159         L0B99
                      (        fmove.asm):00160                  tfr   y,d    +++
                      (        fmove.asm):00161         *         ldb   $0E,s  ---
                      (        fmove.asm):00162         *         lsrb        ---
                      (        fmove.asm):00163         *         lsrb        ---
                      (        fmove.asm):00164         *         lsrb        ---
                      (        fmove.asm):00165                  lsra        +++
                      (        fmove.asm):00166                  lsra        +++
                      (        fmove.asm):00167                  lsra        +++
                      (        fmove.asm):00168                  beq   L0BBC
                      (        fmove.asm):00169         *         pshs  b      ---  
                      (        fmove.asm):00170                  exg   x,u  
0BFE                  (        fmove.asm):00171         L0BA4
                      (        fmove.asm):00172         *         pulu  y,b,a  ---
                      (        fmove.asm):00173         *         std   ,x     ---
                      (        fmove.asm):00174         *         sty   $02,x  ---
                      (        fmove.asm):00175         *         pulu  y,b,a  ---
                      (        fmove.asm):00176         *         std   $04,x  ---
                      (        fmove.asm):00177         *         sty   $06,x  ---
                      (        fmove.asm):00178         *         leax  $08,x  ---
                      (        fmove.asm):00179         *         dec   ,s     ---
                      (        fmove.asm):00180         *         bne   L0BA4  ---
                      (        fmove.asm):00181         *         leas  $01,s  ---
                      (        fmove.asm):00182                          pulu  y      +++
                      (        fmove.asm):00183                          sty   ,x++   +++ 
                      (        fmove.asm):00184                          pulu  y      +++
                      (        fmove.asm):00185                          sty   ,x++   +++
                      (        fmove.asm):00186                          pulu  y      +++
                      (        fmove.asm):00187                          sty   ,x++   +++
                      (        fmove.asm):00188                          pulu  y      +++
                      (        fmove.asm):00189                          sty   ,x++   +++
                      (        fmove.asm):00190                          deca         +++
                      (        fmove.asm):00191                          bne   L0BA4  +++
                      (        fmove.asm):00192                  exg   x,u
0BFE                  (        fmove.asm):00193         L0BBC    ldy   <D.SysDAT
                      (        fmove.asm):00194                  lda   $0B,y
                      (        fmove.asm):00195                  ldb   $0D,y       
                      (        fmove.asm):00196                  std   >$FFA5
                      (        fmove.asm):00197         ***** AND HERE...........
                      (        fmove.asm):00198                  puls  cc   
                      (        fmove.asm):00199                  ldd   $0E,s 
                      (        fmove.asm):00200                  subd  $0C,s
                      (        fmove.asm):00201                  beq   L0BEF       
                      (        fmove.asm):00202                  std   $0E,s
                      (        fmove.asm):00203                  ldd   ,s   
                      (        fmove.asm):00204                  subd  $0C,s
                      (        fmove.asm):00205                  bne   L0BD7 
                      (        fmove.asm):00206                  ldd   #DAT.BlSz
                      (        fmove.asm):00207                  leax  >-DAT.BlSz,x
                      (        fmove.asm):00208                  inc   $0B,s
                      (        fmove.asm):00209                  inc   $0B,s
0BFE                  (        fmove.asm):00210         L0BD7    std   ,s       
                      (        fmove.asm):00211                  ldd   $02,s 
                      (        fmove.asm):00212                  subd  $0C,s
                      (        fmove.asm):00213                  bne   L0BEA
                      (        fmove.asm):00214                  ldd   #DAT.BlSz
                      (        fmove.asm):00215                  leau  >-DAT.BlSz,u
                      (        fmove.asm):00216                  inc   $07,s
                      (        fmove.asm):00217                  inc   $07,s       
0BFE                  (        fmove.asm):00218         L0BEA    std   $02,s 
                      (        fmove.asm):00219                  lbra  L0BXA
0BFE                  (        fmove.asm):00220         L0BEF    leas  <$10,s
0BFE                  (        fmove.asm):00221         L0BF2    clrb       
                      (        fmove.asm):00222                  puls  pc,u,y,x,b,a
                      (        fmove.asm):00223                  ENDC
0BFE 1F32             (        fmove.asm):00224         L0BF3    tfr   u,y        save a copy of U for later
                      (        fmove.asm):00225         * Calculate offset within DAT image
                      (        fmove.asm):00226         * Entry: B=Task #
                      (        fmove.asm):00227         *        X=Pointer to data
                      (        fmove.asm):00228         * Exit : A=Offset into DAT image
                      (        fmove.asm):00229         *        X=Offset within block from original pointer
                      (        fmove.asm):00230         * Possible bug:  No one ever checks if the DAT image, in fact, exists.
0C00 DEA1             (        fmove.asm):00231         L0BF5    ldu   <D.TskIPt  get task image ptr table
0C02 58               (        fmove.asm):00232                  lslb
0C03 EEC5             (        fmove.asm):00233                  ldu   b,u        get ptr to this task's DAT image
0C05 1F10             (        fmove.asm):00234                  tfr   x,d          copy logical address to D
0C07 84E0             (        fmove.asm):00235                  anda  #%11100000   Keep only which 8K bank it's in
0C09 2708             (        fmove.asm):00236                  beq   L0C07        Bank 0, no further calcs needed
0C0B 5F               (        fmove.asm):00237                  clrb             force it to start on an 8K boundary
                      (        fmove.asm):00238                  IFNE  H6309
0C0C 103201           (        fmove.asm):00239                  subr  d,x        now X=offset into the block
                      (        fmove.asm):00240                  ELSE
                      (        fmove.asm):00241                  pshs  d
                      (        fmove.asm):00242                  tfr   x,d
                      (        fmove.asm):00243                  subd  ,s
                      (        fmove.asm):00244                  tfr   d,x
                      (        fmove.asm):00245                  puls  d
                      (        fmove.asm):00246                  ENDC
0C0F 44               (        fmove.asm):00247                  lsra               Calculate offset into DAT image to get proper
0C10 44               (        fmove.asm):00248                  lsra               8K bank (remember that each entry in a DAT image
0C11 44               (        fmove.asm):00249                  lsra               is 2 bytes)
0C12 44               (        fmove.asm):00250                  lsra
0C13 39               (        fmove.asm):00251         L0C07    rts
                      (        fmove.asm):00252         
                      (/home/strick/6809):00688                         
                      (/home/strick/6809):00689                 use     fldabx.asm
                      (       fldabx.asm):00001         **************************************************
                      (       fldabx.asm):00002         * System Call: F$LDABX
                      (       fldabx.asm):00003         *
                      (       fldabx.asm):00004         * Function: Load A from 0,X in task B
                      (       fldabx.asm):00005         *
                      (       fldabx.asm):00006         * Input:  B = Task number
                      (       fldabx.asm):00007         *         X = Data pointer
                      (       fldabx.asm):00008         *
                      (       fldabx.asm):00009         * Output: A = Data byte at 0,x in task's address space
                      (       fldabx.asm):00010         *
                      (       fldabx.asm):00011         * Error:  CC = C bit set; B = error code
                      (       fldabx.asm):00012         *
0C14 E642             (       fldabx.asm):00013         FLDABX   ldb   R$B,u        Get task # to get byte from
0C16 AE46             (       fldabx.asm):00014                  ldx   R$X,u        Get offset into task's DAT image to get byte from
                      (       fldabx.asm):00015         ***         bsr   L0C40        Go get the byte into B
                      (       fldabx.asm):00016         * Load a byte from another task
                      (       fldabx.asm):00017         * Entry: B=Task #
                      (       fldabx.asm):00018         *        X=Pointer to data
                      (       fldabx.asm):00019         * Exit : B=Byte from other task
0C18 3453             (       fldabx.asm):00020         L0C40    pshs  cc,a,x,u
0C1A 8DE4             (       fldabx.asm):00021                  bsr   L0BF5
0C1C ECC6             (       fldabx.asm):00022                  ldd   a,u
0C1E 1A50             (       fldabx.asm):00023                  orcc  #IntMasks
0C20 F7FFA0           (       fldabx.asm):00024                  stb   >DAT.Regs
0C23 E684             (       fldabx.asm):00025                  ldb   ,x
0C25 7FFFA0           (       fldabx.asm):00026                  clr   >DAT.Regs
0C28 3553             (       fldabx.asm):00027                  puls  cc,a,x,u
                      (       fldabx.asm):00028         
0C2A E741             (       fldabx.asm):00029                  stb   R$A,u        Save into caller's A & return
0C2C 5F               (       fldabx.asm):00030                  clrb             set to no errors
0C2D 39               (       fldabx.asm):00031                  rts   
                      (       fldabx.asm):00032         
                      (       fldabx.asm):00033         * Get pointer to task DAT image
                      (       fldabx.asm):00034         * Entry: B=Task #
                      (       fldabx.asm):00035         * Exit : U=Pointer to task image
                      (       fldabx.asm):00036         *L0C09    ldu   <D.TskIPt    get pointer to task image table
                      (       fldabx.asm):00037         *         lslb               multiply task # by 2
                      (       fldabx.asm):00038         *         ldu   b,u          get pointer to task image (doesn't affect carry)
                      (       fldabx.asm):00039         *         rts                restore & return
                      (       fldabx.asm):00040         
                      (       fldabx.asm):00041         
                      (       fldabx.asm):00042         **************************************************
                      (       fldabx.asm):00043         * System Call: F$STABX
                      (       fldabx.asm):00044         *
                      (       fldabx.asm):00045         * Function: Store A at 0,X in task B
                      (       fldabx.asm):00046         *
                      (       fldabx.asm):00047         * Input:  A = Data byte to store in task's address space
                      (       fldabx.asm):00048         *         B = Task number
                      (       fldabx.asm):00049         *         X = Logical address in task's address space
                      (       fldabx.asm):00050         *
                      (       fldabx.asm):00051         * Output: None
                      (       fldabx.asm):00052         *
                      (       fldabx.asm):00053         * Error:  CC = C bit set; B = error code
                      (       fldabx.asm):00054         *
0C2E EC41             (       fldabx.asm):00055         FSTABX   ldd   R$D,u
0C30 AE46             (       fldabx.asm):00056                  ldx   R$X,u
                      (       fldabx.asm):00057         * Store a byte in another task
                      (       fldabx.asm):00058         * Entry: A=Byte to store
                      (       fldabx.asm):00059         *        B=Task #
                      (       fldabx.asm):00060         
                      (       fldabx.asm):00061         *        X=Pointer to data
0C32 1CFE             (       fldabx.asm):00062         L0C28    andcc #^Carry
0C34 3457             (       fldabx.asm):00063                  pshs  cc,d,x,u
0C36 8DC8             (       fldabx.asm):00064                  bsr   L0BF5        calculate offset into DAT image
0C38 ECC6             (       fldabx.asm):00065                  ldd   a,u          get memory block
0C3A A661             (       fldabx.asm):00066                  lda   1,s
0C3C 1A50             (       fldabx.asm):00067                  orcc  #IntMasks
0C3E F7FFA0           (       fldabx.asm):00068                  stb   >DAT.Regs
0C41 A784             (       fldabx.asm):00069                  sta   ,x
0C43 7FFFA0           (       fldabx.asm):00070                  clr   >DAT.Regs
0C46 35D7             (       fldabx.asm):00071                  puls  cc,d,x,u,pc
                      (/home/strick/6809):00690                         
                      (/home/strick/6809):00691                 use     falltsk.asm
                      (      falltsk.asm):00001         **************************************************
                      (      falltsk.asm):00002         * System Call: F$AllTsk
                      (      falltsk.asm):00003         *
                      (      falltsk.asm):00004         * Function: Allocate process task number
                      (      falltsk.asm):00005         *
                      (      falltsk.asm):00006         * Input:  X = Process descriptor pointer
                      (      falltsk.asm):00007         *
                      (      falltsk.asm):00008         * Output: None
                      (      falltsk.asm):00009         *
                      (      falltsk.asm):00010         * Error:  CC = C bit set; B = error code
                      (      falltsk.asm):00011         *
0C48 AE46             (      falltsk.asm):00012         FAllTsk  ldx   R$X,u        get pointer to process descriptor
0C4A E606             (      falltsk.asm):00013         L0C58    ldb   P$Task,x     already have a task #?
0C4C 2608             (      falltsk.asm):00014                  bne   L0C64        yes, return
0C4E 8D3E             (      falltsk.asm):00015                  bsr   L0CA6        find a free task
0C50 2505             (      falltsk.asm):00016                  bcs   L0C65        error, couldn't get one, return
0C52 E706             (      falltsk.asm):00017                  stb   P$Task,x     save task #
0C54 8D14             (      falltsk.asm):00018                  bsr   L0C79        load MMU with task
0C56 5F               (      falltsk.asm):00019         L0C64    clrb               clear errors
0C57 39               (      falltsk.asm):00020         L0C65    rts                return
                      (      falltsk.asm):00021         
                      (      falltsk.asm):00022         
                      (      falltsk.asm):00023         **************************************************
                      (      falltsk.asm):00024         * System Call: F$DelTsk
                      (      falltsk.asm):00025         *
                      (      falltsk.asm):00026         * Function: Deallocate process task number
                      (      falltsk.asm):00027         *
                      (      falltsk.asm):00028         * Input:  X = Process descriptor pointer
                      (      falltsk.asm):00029         *
                      (      falltsk.asm):00030         * Output: None
                      (      falltsk.asm):00031         *
                      (      falltsk.asm):00032         * Error:  CC = C bit set; B = error code
                      (      falltsk.asm):00033         *
0C58 AE46             (      falltsk.asm):00034         FDelTsk  ldx   R$X,u
0C5A E606             (      falltsk.asm):00035         L0C68    ldb   P$Task,x   grab the current task number
0C5C 27F8             (      falltsk.asm):00036                  beq   L0C64      if system (or released), exit
0C5E 6F06             (      falltsk.asm):00037                  clr   P$Task,x   force the task number to be zero
0C60 2047             (      falltsk.asm):00038                  bra   L0CC3      do a F$RelTsk
                      (      falltsk.asm):00039         
     0C62             (      falltsk.asm):00040         TstImg   equ   *
                      (      falltsk.asm):00041                  IFNE  H6309
0C62 6B100C           (      falltsk.asm):00042                  tim   #ImgChg,P$State,x
                      (      falltsk.asm):00043                  ELSE
                      (      falltsk.asm):00044         *         pshs  b
                      (      falltsk.asm):00045                  ldb   P$State,x
                      (      falltsk.asm):00046                  bitb  #ImgChg
                      (      falltsk.asm):00047         *         puls  b
                      (      falltsk.asm):00048                  ENDC
0C65 27F0             (      falltsk.asm):00049                  beq   L0C65      if not, exit now: don't clear carry, it's not needed
0C67 8C               (      falltsk.asm):00050                  fcb   $8C        skip LDX, below
                      (      falltsk.asm):00051         
                      (      falltsk.asm):00052         
                      (      falltsk.asm):00053         **************************************************
                      (      falltsk.asm):00054         * System Call: F$SetTsk
                      (      falltsk.asm):00055         *
                      (      falltsk.asm):00056         * Function: Set process task DAT registers
                      (      falltsk.asm):00057         *
                      (      falltsk.asm):00058         * Input:  X = Process descriptor pointer
                      (      falltsk.asm):00059         *
                      (      falltsk.asm):00060         * Output: None
                      (      falltsk.asm):00061         *
                      (      falltsk.asm):00062         * Error:  CC = C bit set; B = error code
                      (      falltsk.asm):00063         *
0C68 AE46             (      falltsk.asm):00064         FSetTsk  ldx   R$X,u        get process descriptor pointer
     0C6A             (      falltsk.asm):00065         L0C79    equ   *
                      (      falltsk.asm):00066                  IFNE  H6309
0C6A 62EF0C           (      falltsk.asm):00067                  aim   #^ImgChg,P$State,x flag DAT image change in process descriptor
                      (      falltsk.asm):00068                  ELSE
                      (      falltsk.asm):00069         *         pshs  b
                      (      falltsk.asm):00070                  ldb   P$State,x
                      (      falltsk.asm):00071                  andb  #^ImgChg
                      (      falltsk.asm):00072                  stb   P$State,x
                      (      falltsk.asm):00073         *         puls  b
                      (      falltsk.asm):00074                  ENDC
0C6D 0F3D             (      falltsk.asm):00075                  clr   <D.Task1N  task 1 DAT image has changed
0C6F 1CFE             (      falltsk.asm):00076                  andcc #^Carry      clear carry
0C71 3457             (      falltsk.asm):00077                  pshs  cc,d,x,u     preserve everything
0C73 E606             (      falltsk.asm):00078                  ldb   P$Task,x     get task #
0C75 338840           (      falltsk.asm):00079                  leau  <P$DATImg,x  point to DAT image
0C78 9EA1             (      falltsk.asm):00080                  ldx   <D.TskIPt    get task image table pointer
0C7A 58               (      falltsk.asm):00081                  lslb               account for 2 bytes/entry
0C7B EF85             (      falltsk.asm):00082                  stu   b,x          save DAT image pointer in task table
0C7D C102             (      falltsk.asm):00083                  cmpb  #2           is it either system or GrfDrv?
0C7F 2206             (      falltsk.asm):00084                  bhi   L0C9F        no, return
0C81 8EFFA0           (      falltsk.asm):00085                  ldx   #DAT.Regs    update system DAT image
0C84 1701EF           (      falltsk.asm):00086                  lbsr  L0E93      go bash the hardware
0C87 35D7             (      falltsk.asm):00087         L0C9F    puls  cc,d,x,u,pc
                      (      falltsk.asm):00088         
                      (      falltsk.asm):00089         
                      (      falltsk.asm):00090         **************************************************
                      (      falltsk.asm):00091         * System Call: F$ResTsk
                      (      falltsk.asm):00092         *
                      (      falltsk.asm):00093         * Function: Reserve task number
                      (      falltsk.asm):00094         *
                      (      falltsk.asm):00095         * Input:  None
                      (      falltsk.asm):00096         *
                      (      falltsk.asm):00097         * Output: B = Task number
                      (      falltsk.asm):00098         *
                      (      falltsk.asm):00099         * Error:  CC = C bit set; B = error code
                      (      falltsk.asm):00100         *
0C89 8D03             (      falltsk.asm):00101         FResTsk  bsr   L0CA6
0C8B E742             (      falltsk.asm):00102                  stb   R$B,u
0C8D 39               (      falltsk.asm):00103         L0CA5    rts   
                      (      falltsk.asm):00104         
                      (      falltsk.asm):00105         
                      (      falltsk.asm):00106         * Find a free task in task map
                      (      falltsk.asm):00107         * Entry: None
                      (      falltsk.asm):00108         * Exit : B=Task #
0C8E 3410             (      falltsk.asm):00109         L0CA6    pshs  x            preserve X
0C90 C602             (      falltsk.asm):00110                  ldb   #$02         get starting task # (skip System/Grfdrv)
0C92 9E20             (      falltsk.asm):00111                  ldx   <D.Tasks     get task table pointer
0C94 A685             (      falltsk.asm):00112         L0CAC    lda   b,x          task allocated?
0C96 270A             (      falltsk.asm):00113                  beq   L0CBA        no, allocate it & return
0C98 5C               (      falltsk.asm):00114                  incb               move to next task
0C99 C120             (      falltsk.asm):00115                  cmpb  #$20         end of task list?
0C9B 26F7             (      falltsk.asm):00116                  bne   L0CAC        no, keep looking
0C9D 53               (      falltsk.asm):00117                  comb               set carry for error
0C9E C6EF             (      falltsk.asm):00118                  ldb   #E$NoTask    get error code
0CA0 3590             (      falltsk.asm):00119                  puls  x,pc
                      (      falltsk.asm):00120         
0CA2 E785             (      falltsk.asm):00121         L0CBA    stb   b,x          flag task used (1 cycle faster than inc)
                      (      falltsk.asm):00122         *         orb   <D.SysTsk    merge in system task # ??? always 0
0CA4 4F               (      falltsk.asm):00123                  clra               clear carry
0CA5 3590             (      falltsk.asm):00124         L0CBF    puls  x,pc         restore & return
                      (      falltsk.asm):00125         
                      (      falltsk.asm):00126         
                      (      falltsk.asm):00127         **************************************************
                      (      falltsk.asm):00128         * System Call: F$RelTsk
                      (      falltsk.asm):00129         *
                      (      falltsk.asm):00130         * Function: Release task number
                      (      falltsk.asm):00131         *
                      (      falltsk.asm):00132         * Input:  B = Task number
                      (      falltsk.asm):00133         *
                      (      falltsk.asm):00134         * Output: None
                      (      falltsk.asm):00135         *
                      (      falltsk.asm):00136         * Error:  CC = C bit set; B = error code
                      (      falltsk.asm):00137         *
0CA7 E642             (      falltsk.asm):00138         FRelTsk  ldb   R$B,u        Get task # to release
0CA9 3414             (      falltsk.asm):00139         L0CC3    pshs  b,x          Preserve it & X
                      (      falltsk.asm):00140         * ??? No idea why this stuff is done.  D.SysTsk is ALWAYS 0.
                      (      falltsk.asm):00141         *     Even GrfDrv never changes it.
                      (      falltsk.asm):00142         *         ldb   <D.SysTsk    Get system task #
                      (      falltsk.asm):00143         *         comb               Invert it
                      (      falltsk.asm):00144         *         andb  ,s           Mask with requested task
0CAB 5D               (      falltsk.asm):00145                  tstb               check out B
0CAC 2704             (      falltsk.asm):00146                  beq   L0CD0        If system task, don't bother deleting the task
0CAE 9E20             (      falltsk.asm):00147                  ldx   <D.Tasks     Get task table ptr
0CB0 6F85             (      falltsk.asm):00148                  clr   b,x          Clear out the task
0CB2 3594             (      falltsk.asm):00149         L0CD0    puls  b,x,pc       Restore regs & return
                      (      falltsk.asm):00150         
                      (      falltsk.asm):00151         * Sleeping process update (Gets executed from clock)
                      (      falltsk.asm):00152         * Could move this code into Clock, but what about the call to F$AProc (L0D11)?
                      (      falltsk.asm):00153         * It probably will be OK... but have to check.
                      (      falltsk.asm):00154         *   Possible, move ALL software-clock code into OS9p2, and therefore
                      (      falltsk.asm):00155         * have it auto-initialize?  All hardware clocks would then be called
                      (      falltsk.asm):00156         * just once a minute.
0CB4 9E56             (      falltsk.asm):00157         L0CD2    ldx   <D.SProcQ      Get sleeping process Queue ptr
0CB6 2724             (      falltsk.asm):00158                  beq   L0CFD          None (no one sleeping), so exit
                      (      falltsk.asm):00159                  IFNE  H6309
0CB8 6B400C           (      falltsk.asm):00160                  tim   #TimSleep,P$State,x  Is it a timed sleep?
                      (      falltsk.asm):00161                  ELSE
                      (      falltsk.asm):00162                  ldb   P$State,x
                      (      falltsk.asm):00163                  bitb  #TimSleep
                      (      falltsk.asm):00164                  ENDC
0CBB 271F             (      falltsk.asm):00165                  beq   L0CFD          No, exit: waiting for signal/interrupt
0CBD EE04             (      falltsk.asm):00166                  ldu   P$SP,x         Yes, get his stack pointer
0CBF EC46             (      falltsk.asm):00167                  ldd   R$X,u          Get his sleep tick count
                      (      falltsk.asm):00168                  IFNE  H6309
0CC1 104A             (      falltsk.asm):00169                  decd                 decrement sleep count
                      (      falltsk.asm):00170                  ELSE
                      (      falltsk.asm):00171                  subd  #$0001
                      (      falltsk.asm):00172                  ENDC
0CC3 ED46             (      falltsk.asm):00173                  std   R$X,u          Save it back
0CC5 2615             (      falltsk.asm):00174                  bne   L0CFD          Still more ticks to go, so exit
                      (      falltsk.asm):00175         * Process needs to wake up, update queue pointers
0CC7 EE0D             (      falltsk.asm):00176         L0CE7    ldu   P$Queue,x      Get next process in Queue
0CC9 8D22             (      falltsk.asm):00177                  bsr   L0D11          activate it
0CCB 30C4             (      falltsk.asm):00178                  leax  ,u             point to new process
0CCD 270B             (      falltsk.asm):00179                  beq   L0CFB          don't exist, go on
                      (      falltsk.asm):00180                  IFNE  H6309
0CCF 6B400C           (      falltsk.asm):00181                  tim   #TimSleep,P$State,x  is it in a timed sleep?
                      (      falltsk.asm):00182                  ELSE
                      (      falltsk.asm):00183                  ldb   P$State,x
                      (      falltsk.asm):00184                  bitb  #TimSleep
                      (      falltsk.asm):00185                  ENDC
0CD2 2706             (      falltsk.asm):00186                  beq   L0CFB          no, go update process table
0CD4 EE04             (      falltsk.asm):00187                  ldu   P$SP,x         get it's stack pointer
0CD6 EC46             (      falltsk.asm):00188                  ldd   R$X,u          any sleep time left?
0CD8 27ED             (      falltsk.asm):00189                  beq   L0CE7          no, go activate next process in queue
0CDA 9F56             (      falltsk.asm):00190         L0CFB    stx   <D.SProcQ      Store new sleeping process pointer
0CDC 0A2F             (      falltsk.asm):00191         L0CFD    dec   <D.Slice       Any time remaining on process?
0CDE 2609             (      falltsk.asm):00192                  bne   L0D0D          Yes, exit
0CE0 0C2F             (      falltsk.asm):00193                  inc   <D.Slice       reset slice count
0CE2 9E50             (      falltsk.asm):00194                  ldx   <D.Proc        Get current process pointer
0CE4 2703             (      falltsk.asm):00195                  beq   L0D0D          none, return
                      (      falltsk.asm):00196                  IFNE  H6309
0CE6 61200C           (      falltsk.asm):00197                  oim   #TimOut,P$State,x put him in a timeout state
                      (      falltsk.asm):00198                  ELSE
                      (      falltsk.asm):00199                  ldb   P$State,x
                      (      falltsk.asm):00200                  orb   #TimOut
                      (      falltsk.asm):00201                  stb   P$State,x
                      (      falltsk.asm):00202                  ENDC
0CE9 5F               (      falltsk.asm):00203         L0D0D    clrb  
0CEA 39               (      falltsk.asm):00204                  rts   
                      (/home/strick/6809):00692                         
                      (/home/strick/6809):00693                 use     faproc.asm
                      (       faproc.asm):00001         **************************************************
                      (       faproc.asm):00002         * System Call: F$AProc
                      (       faproc.asm):00003         *
                      (       faproc.asm):00004         * Function: Insert process into active process queue
                      (       faproc.asm):00005         *
                      (       faproc.asm):00006         * Input:  X = Address of process descriptor
                      (       faproc.asm):00007         *
                      (       faproc.asm):00008         * Output: None
                      (       faproc.asm):00009         *
                      (       faproc.asm):00010         * Error:  CC = C bit set; B = error code
                      (       faproc.asm):00011         *
0CEB AE46             (       faproc.asm):00012         FAProc   ldx   R$X,u        Get ptr to process to activate
0CED 5F               (       faproc.asm):00013         L0D11    clrb  
0CEE 3475             (       faproc.asm):00014                  pshs  cc,b,x,y,u
0CF0 A60A             (       faproc.asm):00015                  lda   P$Prior,x    Get process priority
0CF2 A70B             (       faproc.asm):00016                  sta   P$Age,x      Save it as age (How long it's been around)
0CF4 1A50             (       faproc.asm):00017                  orcc  #IntMasks    Shut down IRQ's
0CF6 CE0045           (       faproc.asm):00018                  ldu   #(D.AProcQ-P$Queue)  Get ptr to active process queue
0CF9 200A             (       faproc.asm):00019                  bra   L0D29        Go through the chain
                      (       faproc.asm):00020         * Update active process queue
                      (       faproc.asm):00021         *  X=Process to activate
                      (       faproc.asm):00022         *  U=Current process in queue links
0CFB 6C4B             (       faproc.asm):00023         L0D1F    inc   P$Age,u      update current process age
0CFD 2602             (       faproc.asm):00024                  bne   L0D25        wrap?
0CFF 6A4B             (       faproc.asm):00025                  dec   P$Age,u      yes, reset it to max.
0D01 A14B             (       faproc.asm):00026         L0D25    cmpa  P$Age,u      match process ages??
0D03 2202             (       faproc.asm):00027                  bhi   L0D2B        no, skip update
0D05 31C4             (       faproc.asm):00028         L0D29    leay  ,u           point Y to current process
0D07 EE4D             (       faproc.asm):00029         L0D2B    ldu   P$Queue,u    get pointer to next process in chain
0D09 26F0             (       faproc.asm):00030                  bne   L0D1F        Still more in chain, keep going
0D0B EC2D             (       faproc.asm):00031                  ldd   P$Queue,y    
0D0D AF2D             (       faproc.asm):00032                  stx   P$Queue,y    save new process to chain
0D0F ED0D             (       faproc.asm):00033                  std   P$Queue,x
0D11 35F5             (       faproc.asm):00034                  puls  cc,b,x,y,u,pc
                      (/home/strick/6809):00694                         
                      (/home/strick/6809):00695         * System IRQ service routine
0D13 9E50             (/home/strick/6809):00696         XIRQ    ldx     <D.Proc         get current process pointer
0D15 10EF04           (/home/strick/6809):00697                 sts     P$SP,x          save the stack pointer
0D18 10DECC           (/home/strick/6809):00698                 lds     <D.SysStk       get system stack pointer
0D1B DCC0             (/home/strick/6809):00699                 ldd     <D.SysSvc       set system service routine to current
0D1D DDE4             (/home/strick/6809):00700                 std     <D.XSWI2
0D1F DCC4             (/home/strick/6809):00701                 ldd     <D.SysIRQ       set system IRQ routine to current
0D21 DDE8             (/home/strick/6809):00702                 std     <D.XIRQ
0D23 AD9F00CE         (/home/strick/6809):00703                 jsr     [>D.SvcIRQ]     execute irq service
0D27 2414             (/home/strick/6809):00704                 bcc     L0D5B
                      (/home/strick/6809):00705                         
0D29 9E50             (/home/strick/6809):00706                 ldx     <D.Proc         get current process pointer
0D2B E606             (/home/strick/6809):00707                 ldb     P$Task,x
0D2D AE04             (/home/strick/6809):00708                 ldx     P$SP,x          get it's stack pointer
                      (/home/strick/6809):00709                                 
0D2F 3447             (/home/strick/6809):00710                 pshs    u,d,cc          save some registers
0D31 33E4             (/home/strick/6809):00711                 leau    ,s              point to a 'caller register stack'
0D33 17FEE2           (/home/strick/6809):00712                 lbsr    L0C40           do a LDB 0,X in task B
0D36 3547             (/home/strick/6809):00713                 puls    u,d,cc          and now A ( R$A,U ) = the CC we want
                      (/home/strick/6809):00714                         
0D38 8A50             (/home/strick/6809):00715                 ora     #IntMasks       disable it's IRQ's
0D3A 17FEF5           (/home/strick/6809):00716                 lbsr    L0C28           save it back
0D3D 1A50             (/home/strick/6809):00717         L0D5B   orcc    #IntMasks       shut down IRQ's
0D3F 9E50             (/home/strick/6809):00718                 ldx     <D.Proc         get current process pointer
0D41 0D3F             (/home/strick/6809):00719                 tst     <D.QIRQ         was it a clock IRQ?
0D43 1026008D         (/home/strick/6809):00720                 lbne    L0DF7           if not, do a quick return
                      (/home/strick/6809):00721                         
0D47 A60C             (/home/strick/6809):00722                 lda     P$State,x       Get it's state
0D49 8520             (/home/strick/6809):00723                 bita    #TimOut         Is it timed out?
0D4B 2617             (/home/strick/6809):00724                 bne     L0D7C           yes, wake it up
                      (/home/strick/6809):00725         * Update active process queue
0D4D CE0045           (/home/strick/6809):00726                 ldu     #(D.AProcQ-P$Queue)     point to active process queue
0D50 C608             (/home/strick/6809):00727                 ldb     #Suspend        get suspend flag
0D52 EE4D             (/home/strick/6809):00728         L0D6A   ldu     P$Queue,u       get a active process pointer
0D54 270A             (/home/strick/6809):00729                 beq     L0D78
0D56 E54C             (/home/strick/6809):00730                 bitb    P$State,u       is it suspended?
0D58 26F8             (/home/strick/6809):00731                 bne     L0D6A           yes, go to next one in chain
0D5A E60A             (/home/strick/6809):00732                 ldb     P$Prior,x       get current process priority
0D5C E14A             (/home/strick/6809):00733                 cmpb    P$Prior,u       do we bump this one?
0D5E 2504             (/home/strick/6809):00734                 blo     L0D7C
                      (/home/strick/6809):00735                         
0D60 EE04             (/home/strick/6809):00736         L0D78   ldu     P$SP,x
0D62 203A             (/home/strick/6809):00737                 bra     L0DB9
                      (/home/strick/6809):00738                         
0D64 84DF             (/home/strick/6809):00739         L0D7C   anda    #^TimOut
0D66 A70C             (/home/strick/6809):00740                 sta     P$State,x
                      (/home/strick/6809):00741                         
     0D68             (/home/strick/6809):00742         L0D80   equ     *
0D68 8D83             (/home/strick/6809):00743         L0D83   bsr     L0D11           activate next process
                      (/home/strick/6809):00744                         
                      (/home/strick/6809):00745                 use     fnproc.asm
                      (       fnproc.asm):00001         **************************************************
                      (       fnproc.asm):00002         * System Call: F$NProc
                      (       fnproc.asm):00003         *
                      (       fnproc.asm):00004         * Function: Start the next process in the active queue
                      (       fnproc.asm):00005         *
                      (       fnproc.asm):00006         * Input:  None
                      (       fnproc.asm):00007         *
                      (       fnproc.asm):00008         * Output: Control does not return to the caller
                      (       fnproc.asm):00009         *
0D6A                  (       fnproc.asm):00010         FNProc   
                      (       fnproc.asm):00011                  IFGT  Level-1
0D6A 9E4A             (       fnproc.asm):00012                  ldx   <D.SysPrc   get system process descriptor
0D6C 9F50             (       fnproc.asm):00013                  stx   <D.Proc     save it as current
0D6E 10DECC           (       fnproc.asm):00014                  lds   <D.SysStk   get system stack pointer
0D71 1CAF             (       fnproc.asm):00015                  andcc #^IntMasks  re-enable IRQ's (to allow pending one through)
                      (       fnproc.asm):00016                  ELSE
                      (       fnproc.asm):00017                  clra
                      (       fnproc.asm):00018                  clrb
                      (       fnproc.asm):00019                  std   <D.Proc
                      (       fnproc.asm):00020                  ENDC
0D73 8C               (       fnproc.asm):00021                  fcb   $8C        skip the next 2 bytes
                      (       fnproc.asm):00022         
0D74 3CAF             (       fnproc.asm):00023         L0D91    cwai  #^IntMasks  re-enable IRQ's and wait for one
0D76 1A50             (       fnproc.asm):00024         L0D93    orcc  #IntMasks   Shut off interrupts again
0D78 8608             (       fnproc.asm):00025                  lda   #Suspend    get suspend suspend state flag
0D7A 8E0045           (       fnproc.asm):00026                  ldx   #D.AProcQ-P$Queue For start of loop, setup to point to current process
                      (       fnproc.asm):00027         
                      (       fnproc.asm):00028         * Loop to find next active process that is not Suspended
0D7D 3184             (       fnproc.asm):00029         L0D9A    leay  ,x          Point y to previous link (process dsc. ptr)
0D7F AE2D             (       fnproc.asm):00030                  ldx   P$Queue,y   Get process dsc. ptr for next active process
0D81 27F1             (       fnproc.asm):00031                  beq   L0D91       None, allow any pending IRQ thru & try again
0D83 A50C             (       fnproc.asm):00032                  bita  P$State,x   There is one, is it Suspended?
0D85 26F6             (       fnproc.asm):00033                  bne   L0D9A       Yes, skip it & try next one
                      (       fnproc.asm):00034         
                      (       fnproc.asm):00035         * Found a process in line ready to be started
0D87 EC0D             (       fnproc.asm):00036                  ldd   P$Queue,x   Get next process dsc. ptr in line after found one
0D89 ED2D             (       fnproc.asm):00037                  std   P$Queue,y   Save the next one in line in previous' next ptr
0D8B 9F50             (       fnproc.asm):00038                  stx   <D.Proc     Make new process dsc. the current one
0D8D 17FEBA           (       fnproc.asm):00039                  lbsr  L0C58       Go check or make a task # for the found process
0D90 25D6             (       fnproc.asm):00040                  bcs   L0D83       Couldn't get one, go to next process in line
0D92 9630             (       fnproc.asm):00041                  lda   <D.TSlice   Reload # ticks this process can run
0D94 972F             (       fnproc.asm):00042                  sta   <D.Slice    Save as new tick counter for process
0D96 EE04             (       fnproc.asm):00043                  ldu   P$SP,x      get the process stack pointer
0D98 A60C             (       fnproc.asm):00044                  lda   P$State,x   get it's state
0D9A 102B0085         (       fnproc.asm):00045                  lbmi  L0E29       If in System State, switch to system task (0)
0D9E 8502             (       fnproc.asm):00046         L0DB9    bita  #Condem     Was it condemned by a deadly signal?
0DA0 264A             (       fnproc.asm):00047                  bne   L0DFD       Yes, go exit with Error=the signal code #
0DA2 17FEBD           (       fnproc.asm):00048                  lbsr  TstImg      do a F$SetTsk if the ImgChg flag is set
0DA5 E68819           (       fnproc.asm):00049         L0DBD    ldb   <P$Signal,x any signals?
0DA8 272A             (       fnproc.asm):00050                  beq   L0DF7       no, go on
0DAA 5A               (       fnproc.asm):00051                  decb              is it a wake up signal?
0DAB 2724             (       fnproc.asm):00052                  beq   L0DEF       yes, go wake it up
0DAD 3272             (       fnproc.asm):00053                  leas  -R$Size,s   make a register buffer on stack
0DAF 33E4             (       fnproc.asm):00054                  leau  ,s          point to it
0DB1 17F550           (       fnproc.asm):00055                  lbsr  L02CB       copy the stack from process to our copy of it
0DB4 A68819           (       fnproc.asm):00056                  lda   <P$Signal,x get last signal
0DB7 A742             (       fnproc.asm):00057                  sta   R$B,u       save it to process' B
                      (       fnproc.asm):00058         
0DB9 EC881A           (       fnproc.asm):00059                  ldd   <P$SigVec,x any intercept trap?
0DBC 272E             (       fnproc.asm):00060                  beq   L0DFD       no, go force the process to F$Exit
0DBE ED4C             (       fnproc.asm):00061                  std   R$PC,u      save vector to it's PC
0DC0 EC881C           (       fnproc.asm):00062                  ldd   <P$SigDat,x get pointer to intercept data area
0DC3 ED4A             (       fnproc.asm):00063                  std   R$U,u       save it to it's U
0DC5 EC04             (       fnproc.asm):00064                  ldd   P$SP,x      get it's stack pointer
0DC7 83000E           (       fnproc.asm):00065                  subd  #R$Size     take off register stack
0DCA ED04             (       fnproc.asm):00066                  std   P$SP,x      save updated SP
0DCC 17F544           (       fnproc.asm):00067                  lbsr  L02DA       Copy modified stack back overtop process' stack
0DCF 326E             (       fnproc.asm):00068                  leas  R$Size,s    purge temporary stack
0DD1 6F8819           (       fnproc.asm):00069         L0DEF    clr   <P$Signal,x clear the signal
                      (       fnproc.asm):00070         
                      (       fnproc.asm):00071         * No signals go here
     0DD4             (       fnproc.asm):00072         L0DF7    equ   *
                      (       fnproc.asm):00073                  IFNE  H6309
0DD4 01013E           (       fnproc.asm):00074                  oim   #$01,<D.Quick
                      (       fnproc.asm):00075                  ELSE
                      (       fnproc.asm):00076                  ldb   <D.Quick
                      (       fnproc.asm):00077                  orb   #$01
                      (       fnproc.asm):00078                  stb   <D.Quick
                      (       fnproc.asm):00079                  ENDC
     0DD7             (       fnproc.asm):00080         BackTo1  equ   *
0DD7 DEC6             (       fnproc.asm):00081         L0DF2    ldu   <D.UsrSvc   Get current User's system call service routine ptr
0DD9 DFE4             (       fnproc.asm):00082                  stu   <D.XSWI2    Save as SWI2 service routine ptr
0DDB DECA             (       fnproc.asm):00083                  ldu   <D.UsrIRQ   Get IRQ entry point for user state
0DDD DFE8             (       fnproc.asm):00084                  stu   <D.XIRQ     Save as IRQ service routine ptr
                      (       fnproc.asm):00085         
0DDF E606             (       fnproc.asm):00086                  ldb   P$Task,x   get task number
0DE1 58               (       fnproc.asm):00087                  lslb             2 bytes per entry in D.TskIpt
0DE2 10AE04           (       fnproc.asm):00088                  ldy   P$SP,x     get stack pointer
0DE5 170081           (       fnproc.asm):00089                  lbsr  L0E8D      re-map the DAT image, if necessary
                      (       fnproc.asm):00090         
0DE8 D63E             (       fnproc.asm):00091                  ldb   <D.Quick   get quick return flag
0DEA 204D             (       fnproc.asm):00092                  bra   L0E4C       Go switch GIME over to new process & run
                      (       fnproc.asm):00093         
                      (       fnproc.asm):00094         * Process a signal (process had no signal trap)
     0DEC             (       fnproc.asm):00095         L0DFD    equ   *
                      (       fnproc.asm):00096                  IFNE  H6309
0DEC 61800C           (       fnproc.asm):00097                  oim   #SysState,P$State,x  Put process into system state
                      (       fnproc.asm):00098                  ELSE
                      (       fnproc.asm):00099                  ldb   P$State,x
                      (       fnproc.asm):00100                  orb   #SysState
                      (       fnproc.asm):00101                  stb   P$State,x
                      (       fnproc.asm):00102                  ENDC
0DEF 32890200         (       fnproc.asm):00103                  leas  >P$Stack,x           Point SP to process' stack
0DF3 1CAF             (       fnproc.asm):00104                  andcc #^IntMasks           Turn interrupts on
0DF5 E68819           (       fnproc.asm):00105                  ldb   <P$Signal,x          Get signal that process received
0DF8 6F8819           (       fnproc.asm):00106                  clr   <P$Signal,x          Clear out the one in process dsc.
0DFB 103F06           (       fnproc.asm):00107                  os9   F$Exit               Exit with signal # being error code
                      (       fnproc.asm):00108         
0DFE 6E9F0026         (       fnproc.asm):00109         S.SvcIRQ jmp    [>D.Poll]   Call IOMAN for IRQ polling
                      (/home/strick/6809):00746                         
                      (/home/strick/6809):00747         * The following routines must appear no earlier than $E00 when assembled, as
                      (/home/strick/6809):00748         * they have to always be in the vector RAM page ($FE00-$FEFF)
                      (/home/strick/6809):00749                         
                      (/home/strick/6809):00750         * Default routine for D.SysIRQ
0E02                  (/home/strick/6809):00751         S.SysIRQ
0E02 96A4             (/home/strick/6809):00752                 lda     <D.SSTskN       Get current task's GIME task # (0 or 1)
0E04 2713             (/home/strick/6809):00753                 beq     FastIRQ         Use super-fast version for system state
0E06 0FA4             (/home/strick/6809):00754                 clr     <D.SSTskN       Clear out memory copy (task 0)
0E08 AD9F00CE         (/home/strick/6809):00755                 jsr     [>D.SvcIRQ]     (Normally routine in Clock calling D.Poll)
0E0C 0CA4             (/home/strick/6809):00756                 inc     <D.SSTskN       Save task # for system state
0E0E 8601             (/home/strick/6809):00757                 lda     #1              Task 1
0E10 9A91             (/home/strick/6809):00758                 ora     <D.TINIT        Merge task bit's into Shadow version
0E12 9791             (/home/strick/6809):00759                 sta     <D.TINIT        Update shadow
0E14 B7FF91           (/home/strick/6809):00760                 sta     >DAT.Task       Save to GIME as well & return
0E17 2004             (/home/strick/6809):00761                 bra     DoneIRQ Check for error and exit
                      (/home/strick/6809):00762                         
0E19 AD9F00CE         (/home/strick/6809):00763         FastIRQ jsr     [>D.SvcIRQ]     (Normally routine in Clock calling D.Poll)
0E1D 2403             (/home/strick/6809):00764         DoneIRQ bcc     L0E28   No error on IRQ, exit
                      (/home/strick/6809):00765                 IFNE    H6309
0E1F 6150E4           (/home/strick/6809):00766                 oim     #IntMasks,0,s   Setup RTI to shut interrupts off again
                      (/home/strick/6809):00767                 ELSE    
                      (/home/strick/6809):00768                 lda     ,s
                      (/home/strick/6809):00769                 ora     #IntMasks
                      (/home/strick/6809):00770                 sta     ,s
                      (/home/strick/6809):00771                 ENDC    
0E22 3B               (/home/strick/6809):00772         L0E28   rti     
                      (/home/strick/6809):00773                         
                      (/home/strick/6809):00774         * return from a system call
0E23 4F               (/home/strick/6809):00775         L0E29   clra                    Force System task # to 0 (non-GRDRV)
0E24 9E4A             (/home/strick/6809):00776         L0E2B   ldx     <D.SysPrc       Get system process dsc. ptr
0E26 17FE39           (/home/strick/6809):00777                 lbsr    TstImg          check image, and F$SetTsk (PRESERVES A)
0E29 1A50             (/home/strick/6809):00778                 orcc    #IntMasks       Shut interrupts off
0E2B 97A4             (/home/strick/6809):00779                 sta     <D.SSTskN       Save task # for system state
0E2D 2707             (/home/strick/6809):00780                 beq     Fst2    If task 0, skip subroutine
0E2F 9A91             (/home/strick/6809):00781                 ora     <D.TINIT        Merge task bit's into Shadow version
0E31 9791             (/home/strick/6809):00782                 sta     <D.TINIT        Update shadow
0E33 B7FF91           (/home/strick/6809):00783                 sta     >DAT.Task       Save to GIME as well & return
0E36 32C4             (/home/strick/6809):00784         Fst2    leas    ,u              Stack ptr=U & return
0E38 3B               (/home/strick/6809):00785                 rti     
                      (/home/strick/6809):00786                         
                      (/home/strick/6809):00787         * Switch to new process, X=Process descriptor pointer, U=Stack pointer
     0E39             (/home/strick/6809):00788         L0E4C   equ     *
                      (/home/strick/6809):00789                 IFNE    H6309
0E39 010191           (/home/strick/6809):00790                 oim     #$01,<D.TINIT   switch GIME shadow to user state
0E3C 9691             (/home/strick/6809):00791                 lda     <D.TINIT
                      (/home/strick/6809):00792                 ELSE    
                      (/home/strick/6809):00793                 lda     <D.TINIT
                      (/home/strick/6809):00794                 ora     #$01
                      (/home/strick/6809):00795                 sta     <D.TINIT
                      (/home/strick/6809):00796                 ENDC    
0E3E B7FF91           (/home/strick/6809):00797                 sta     >DAT.Task       save it to GIME
0E41 32A4             (/home/strick/6809):00798                 leas    ,y              point to new stack
0E43 5D               (/home/strick/6809):00799                 tstb                    is the stack at SWISTACK?
0E44 2609             (/home/strick/6809):00800                 bne     MyRTI           no, we're doing a system-state rti
                      (/home/strick/6809):00801                         
                      (/home/strick/6809):00802                 IFNE    H6309
0E46 11C60E           (/home/strick/6809):00803                 ldf     #R$Size         E=0 from call to L0E8D before
0E49 CEFEDD           (/home/strick/6809):00804                 ldu     #Where+SWIStack point to the stack
0E4C 113832           (/home/strick/6809):00805                 tfm     u+,y+           move the stack from top of memory to user memory
                      (/home/strick/6809):00806                 ELSE    
                      (/home/strick/6809):00807                 ldb     #R$Size
                      (/home/strick/6809):00808                 ldu     #Where+SWIStack point to the stack
0E4F                  (/home/strick/6809):00809         RtiLoop lda     ,u+
                      (/home/strick/6809):00810                 sta     ,y+
                      (/home/strick/6809):00811                 decb    
                      (/home/strick/6809):00812                 bne     RtiLoop
                      (/home/strick/6809):00813                 ENDC    
0E4F 3B               (/home/strick/6809):00814         MyRTI   rti                     return from IRQ
                      (/home/strick/6809):00815                         
                      (/home/strick/6809):00816                         
                      (/home/strick/6809):00817         * Execute routine in task 1 pointed to by U
                      (/home/strick/6809):00818         * comes from user requested SWI vectors
     0E50             (/home/strick/6809):00819         L0E5E   equ     *
                      (/home/strick/6809):00820                 IFNE    H6309
0E50 010191           (/home/strick/6809):00821                 oim     #$01,<D.TINIT   switch GIME shadow to user state
0E53 D691             (/home/strick/6809):00822                 ldb     <D.TINIT
                      (/home/strick/6809):00823                 ELSE    
                      (/home/strick/6809):00824                 ldb     <D.TINIT
                      (/home/strick/6809):00825                 orb     #$01
                      (/home/strick/6809):00826                 stb     <D.TINIT
                      (/home/strick/6809):00827                 ENDC    
0E55 F7FF91           (/home/strick/6809):00828                 stb     >DAT.Task
0E58 6EC4             (/home/strick/6809):00829                 jmp     ,u
                      (/home/strick/6809):00830                         
                      (/home/strick/6809):00831         * Flip to task 1 (used by GRF/WINDInt to switch to GRFDRV) (pointed to 
                      (/home/strick/6809):00832         *  by <D.Flip1). All regs are already preserved on stack for the RTI
0E5A C602             (/home/strick/6809):00833         S.Flip1 ldb     #2              get Task image entry numberx2 for Grfdrv (task 1)
0E5C 8D0B             (/home/strick/6809):00834                 bsr     L0E8D           copy over the DAT image
                      (/home/strick/6809):00835                 IFNE    H6309
0E5E 010191           (/home/strick/6809):00836                 oim     #$01,<D.TINIT
0E61 9691             (/home/strick/6809):00837                 lda     <D.TINIT        get copy of GIME Task side
                      (/home/strick/6809):00838                 ELSE    
                      (/home/strick/6809):00839                 lda     <D.TINIT
                      (/home/strick/6809):00840                 ora     #$01
                      (/home/strick/6809):00841                 sta     <D.TINIT
                      (/home/strick/6809):00842                 ENDC    
0E63 B7FF91           (/home/strick/6809):00843                 sta     >DAT.Task       save it to GIME register
0E66 0CA4             (/home/strick/6809):00844                 inc     <D.SSTskN       increment system state task number
0E68 3B               (/home/strick/6809):00845                 rti                     return
                      (/home/strick/6809):00846                         
                      (/home/strick/6809):00847         * Setup MMU in task 1, B=Task # to swap to, shifted left 1 bit
0E69 D13D             (/home/strick/6809):00848         L0E8D   cmpb    <D.Task1N       are we going back to the same task
0E6B 2718             (/home/strick/6809):00849                 beq     L0EA3           without the DAT image changing?
0E6D D73D             (/home/strick/6809):00850                 stb     <D.Task1N       nope, save current task in map type 1
0E6F 8EFFA8           (/home/strick/6809):00851                 ldx     #$FFA8          get MMU start register for process's
0E72 DEA1             (/home/strick/6809):00852                 ldu     <D.TskIPt       get task image pointer table
0E74 EEC5             (/home/strick/6809):00853                 ldu     b,u             get address of DAT image
0E76 3341             (/home/strick/6809):00854         L0E93   leau    1,u             point to actual MMU block
                      (/home/strick/6809):00855                 IFNE    H6309
0E78 118604           (/home/strick/6809):00856                 lde     #4              get # banks/2 for task
                      (/home/strick/6809):00857                 ELSE    
                      (/home/strick/6809):00858                 lda     #4
                      (/home/strick/6809):00859                 pshs    a
                      (/home/strick/6809):00860                 ENDC    
0E7B A6C1             (/home/strick/6809):00861         L0E9B   lda     ,u++            get a bank
0E7D E6C1             (/home/strick/6809):00862                 ldb     ,u++            and next one
0E7F ED81             (/home/strick/6809):00863                 std     ,x++            Save it to MMU
                      (/home/strick/6809):00864                 IFNE    H6309
0E81 114A             (/home/strick/6809):00865                 dece                    done?
                      (/home/strick/6809):00866                 ELSE    
                      (/home/strick/6809):00867                 dec     ,s
                      (/home/strick/6809):00868                 ENDC    
0E83 26F6             (/home/strick/6809):00869                 bne     L0E9B           no, keep going
                      (/home/strick/6809):00870                 IFEQ    H6309
                      (/home/strick/6809):00871                 leas    1,s
                      (/home/strick/6809):00872                 ENDC    
0E85 39               (/home/strick/6809):00873         L0EA3   rts                     return
                      (/home/strick/6809):00874                         
                      (/home/strick/6809):00875         * Execute FIRQ vector (called from $FEF4)
0E86 8E00F6           (/home/strick/6809):00876         FIRQVCT ldx     #D.FIRQ         get DP offset of vector
0E89 2005             (/home/strick/6809):00877                 bra     L0EB8           go execute it
                      (/home/strick/6809):00878                         
                      (/home/strick/6809):00879         * Execute IRQ vector (called from $FEF7)
0E8B 1A50             (/home/strick/6809):00880         IRQVCT  orcc    #IntMasks       disasble IRQ's
0E8D 8E00F8           (/home/strick/6809):00881                 ldx     #D.IRQ  get DP offset of vector
                      (/home/strick/6809):00882         
                      (/home/strick/6809):00883         * Execute interrupt vector, B=DP Vector offset
0E90 4F               (/home/strick/6809):00884         L0EB8   clra                    (faster than CLR >$xxxx)
0E91 B7FF91           (/home/strick/6809):00885                 sta     >DAT.Task       Force to Task 0 (system state)
                      (/home/strick/6809):00886                 IFNE    H6309
0E94 1FCB             (/home/strick/6809):00887                 tfr     0,dp    setup DP
                      (/home/strick/6809):00888                 ELSE    
                      (/home/strick/6809):00889                 tfr     a,dp
                      (/home/strick/6809):00890                 ENDC    
     0E96             (/home/strick/6809):00891         MapGrf  equ     *
                      (/home/strick/6809):00892                 IFNE    H6309
0E96 02FE91           (/home/strick/6809):00893                 aim     #$FE,<D.TINIT   switch GIME shadow to system state
0E99 9691             (/home/strick/6809):00894                 lda     <D.TINIT        set GIME again just in case timer is used
                      (/home/strick/6809):00895                 ELSE    
                      (/home/strick/6809):00896                 lda     <D.TINIT
                      (/home/strick/6809):00897                 anda    #$FE
                      (/home/strick/6809):00898                 sta     <D.TINIT
                      (/home/strick/6809):00899                 ENDC    
0E9B B7FF91           (/home/strick/6809):00900         MapT0   sta     >DAT.Task
0E9E 6E94             (/home/strick/6809):00901                 jmp     [,x]            execute it
                      (/home/strick/6809):00902                         
                      (/home/strick/6809):00903         * Execute SWI3 vector (called from $FEEE)
0EA0 1A50             (/home/strick/6809):00904         SWI3VCT orcc    #IntMasks       disable IRQ's
0EA2 8E00F2           (/home/strick/6809):00905                 ldx     #D.SWI3         get DP offset of vector
0EA5 2005             (/home/strick/6809):00906                 bra     SWICall         go execute it
                      (/home/strick/6809):00907                         
                      (/home/strick/6809):00908         * Execute SWI2 vector (called from $FEF1)
0EA7 1A50             (/home/strick/6809):00909         SWI2VCT orcc    #IntMasks       disasble IRQ's
0EA9 8E00F4           (/home/strick/6809):00910                 ldx     #D.SWI2         get DP offset of vector
                      (/home/strick/6809):00911                         
                      (/home/strick/6809):00912         * This routine is called from an SWI, SWI2, or SWI3
                      (/home/strick/6809):00913         * saves 1 cycle on system-system calls
                      (/home/strick/6809):00914         * saves about 200 cycles (calls to I.LDABX and L029E) on grfdrv-system,
                      (/home/strick/6809):00915         *  or user-system calls.
0EAC E6F80C           (/home/strick/6809):00916         SWICall ldb     [R$PC,s]        get callcode of the system call
                      (/home/strick/6809):00917         * NOTE: Alan DeKok claims that this is BAD.  It crashed Colin McKay's
                      (/home/strick/6809):00918         * CoCo 3.  Instead, we should do a clra/sta >DAT.Task.
                      (/home/strick/6809):00919         *         clr   >DAT.Task       go to map type 1
0EAF 4F               (/home/strick/6809):00920                 clra    
0EB0 B7FF91           (/home/strick/6809):00921                 sta     >DAT.Task
                      (/home/strick/6809):00922         * set DP to zero
                      (/home/strick/6809):00923                 IFNE    H6309
0EB3 1FCB             (/home/strick/6809):00924                 tfr     0,dp
                      (/home/strick/6809):00925                 ELSE    
                      (/home/strick/6809):00926                 tfr     a,dp
                      (/home/strick/6809):00927                 ENDC    
                      (/home/strick/6809):00928                         
                      (/home/strick/6809):00929         * These lines add a total of 81 addition cycles to each SWI(2,3) call,
                      (/home/strick/6809):00930         * and 36 bytes+12 for R$Size in the constant page at $FExx
                      (/home/strick/6809):00931         *  It takes no more time for a SWI(2,3) from system state than previously,
                      (/home/strick/6809):00932         * ... and adds 14 cycles to each SWI(2,3) call from grfdrv... not a problem.
                      (/home/strick/6809):00933         * For processes that re-vector SWI, SWI3, it adds 81 cycles.  BUT SWI(3)
                      (/home/strick/6809):00934         * CANNOT be vectored to L0EBF cause the user SWI service routine has been
                      (/home/strick/6809):00935         * changed
0EB5 9691             (/home/strick/6809):00936                 lda     <D.TINIT        get map type flag
0EB7 8501             (/home/strick/6809):00937                 bita    #$01            check it without changing it
                      (/home/strick/6809):00938                         
                      (/home/strick/6809):00939         * Change to LBEQ R.SysSvc to avoid JMP [,X]
                      (/home/strick/6809):00940         * and add R.SysSvc STA >DAT.Task ???
0EB9 27E0             (/home/strick/6809):00941                 beq     MapT0           in map 0: restore hardware and do system service
0EBB 0DA4             (/home/strick/6809):00942                 tst     <D.SSTskN       get system state 0,1
0EBD 26D7             (/home/strick/6809):00943                 bne     MapGrf          if in grfdrv, go to map 0 and do system service
                      (/home/strick/6809):00944                         
                      (/home/strick/6809):00945         * the preceding few lines are necessary, as all SWI's still pass thru
                      (/home/strick/6809):00946         * here before being vectored to the system service routine... which
                      (/home/strick/6809):00947         * doesn't copy the stack from user state.
0EBF B7FF91           (/home/strick/6809):00948                 sta     >DAT.Task       go to map type X again to get user's stack
                      (/home/strick/6809):00949         * a byte less, a cycle more than ldy #$FEED-R$Size, or ldy #$F000+SWIStack
0EC2 318C18           (/home/strick/6809):00950                 leay    <SWIStack,pc    where to put the register stack: to $FEDF
0EC5 1F43             (/home/strick/6809):00951                 tfr     s,u             get a copy of where the stack is
                      (/home/strick/6809):00952                 IFNE    H6309
0EC7 1086000E         (/home/strick/6809):00953                 ldw     #R$Size         get the size of the stack
0ECB 113832           (/home/strick/6809):00954                 tfm     u+,y+           move the stack to the top of memory
                      (/home/strick/6809):00955                 ELSE    
                      (/home/strick/6809):00956                 pshs    b
                      (/home/strick/6809):00957                 ldb     #R$Size
0ECE                  (/home/strick/6809):00958         Looper  lda     ,u+
                      (/home/strick/6809):00959                 sta     ,y+
                      (/home/strick/6809):00960                 decb    
                      (/home/strick/6809):00961                 bne     Looper
                      (/home/strick/6809):00962                 puls    b
                      (/home/strick/6809):00963                 ENDC    
0ECE 20C0             (/home/strick/6809):00964                 bra     L0EB8           and go from map type 1 to map type 0
                      (/home/strick/6809):00965                         
                      (/home/strick/6809):00966         * Execute SWI vector (called from $FEFA)
0ED0 8E00FA           (/home/strick/6809):00967         SWIVCT  ldx     #D.SWI          get DP offset of vector
0ED3 20D7             (/home/strick/6809):00968                 bra     SWICall         go execute it
                      (/home/strick/6809):00969                         
                      (/home/strick/6809):00970         * Execute NMI vector (called from $FEFD)
0ED5 8E00FC           (/home/strick/6809):00971         NMIVCT  ldx     #D.NMI          get DP offset of vector
0ED8 20B6             (/home/strick/6809):00972                 bra     L0EB8           go execute it
                      (/home/strick/6809):00973                         
                      (/home/strick/6809):00974         * The end of the kernel module is here
0EDA E1928A           (/home/strick/6809):00975                 emod    
     0EDD             (/home/strick/6809):00976         eom     equ     *
                      (/home/strick/6809):00977                         
                      (/home/strick/6809):00978         * What follows after the kernel module is the register stack, starting
                      (/home/strick/6809):00979         * at $FEDD (6309) or $FEDF (6809).  This register stack area is used by
                      (/home/strick/6809):00980         * the kernel to save the caller's registers in the $FEXX area of memory
                      (/home/strick/6809):00981         * because it doesn't* get "switched out" no matter the contents of the
                      (/home/strick/6809):00982         * MMU registers.
0EDD                  (/home/strick/6809):00983         SWIStack                
0EDD 5245474953544552 (/home/strick/6809):00984                 fcc     /REGISTER STACK/        same # bytes as R$Size for 6809
     20535441434B
                      (/home/strick/6809):00985                 IFNE    H6309
0EEB 3633             (/home/strick/6809):00986                 fcc     /63/    if 6309, add two more spaces
                      (/home/strick/6809):00987                 ENDC    
                      (/home/strick/6809):00988                         
0EED 55               (/home/strick/6809):00989                 fcb     $55     D.ErrRst
                      (/home/strick/6809):00990                         
                      (/home/strick/6809):00991         * This list of addresses ends up at $FEEE after the kernel track is loaded
                      (/home/strick/6809):00992         * into memory.  All interrupts come through the 6809 vectors at $FFF0-$FFFE
                      (/home/strick/6809):00993         * and get directed to here.  From here, the BRA takes CPU control to the
                      (/home/strick/6809):00994         * various handlers in the kernel.
0EEE 20B0             (/home/strick/6809):00995                 bra     SWI3VCT SWI3 vector comes here
0EF0 12               (/home/strick/6809):00996                 nop     
0EF1 20B4             (/home/strick/6809):00997                 bra     SWI2VCT SWI2 vector comes here
0EF3 12               (/home/strick/6809):00998                 nop     
0EF4 2090             (/home/strick/6809):00999                 bra     FIRQVCT FIRQ vector comes here
0EF6 12               (/home/strick/6809):01000                 nop     
0EF7 2092             (/home/strick/6809):01001                 bra     IRQVCT  IRQ vector comes here
0EF9 12               (/home/strick/6809):01002                 nop     
0EFA 20D4             (/home/strick/6809):01003                 bra     SWIVCT  SWI vector comes here
0EFC 12               (/home/strick/6809):01004                 nop     
0EFD 20D6             (/home/strick/6809):01005                 bra     NMIVCT  NMI vector comes here
0EFF 12               (/home/strick/6809):01006                 nop     
                      (/home/strick/6809):01007                         
                      (/home/strick/6809):01008                 end     
