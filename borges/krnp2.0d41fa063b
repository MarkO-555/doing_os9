                      (/home/strick/go/s):00001         ********************************************************************
                      (/home/strick/go/s):00002         * krnp2 - NitrOS-9 Level 2 Kernel Part 2
                      (/home/strick/go/s):00003         *
                      (/home/strick/go/s):00004         * $Id$
                      (/home/strick/go/s):00005         *
                      (/home/strick/go/s):00006         * Copyright (c) 1982 Microware Corporation
                      (/home/strick/go/s):00007         *
                      (/home/strick/go/s):00008         * Modified for 6309 Native mode by:
                      (/home/strick/go/s):00009         *
                      (/home/strick/go/s):00010         * Bill Nobel, L. Curtis Boyle & Wes Gale - Gale Force Enterprises
                      (/home/strick/go/s):00011         *
                      (/home/strick/go/s):00012         * Ed.    Comments                                       Who YY/MM/DD
                      (/home/strick/go/s):00013         * ------------------------------------------------------------------
                      (/home/strick/go/s):00014         *
                      (/home/strick/go/s):00015         * 17.2   08/02/92 - Active in 6309 Native mode, No apparent bugs (BN)
                      (/home/strick/go/s):00016         *                 - Optimized F$Fork (BN)
                      (/home/strick/go/s):00017         *                 - Optimized F$Chain (BN)
                      (/home/strick/go/s):00018         * 18.4   92/12/15 - Cut initial memory allocation routine - unnecessary
                      (/home/strick/go/s):00019         * 18.5   93/01/18 - Fixed bug in F$Sleep (LCB)
                      (/home/strick/go/s):00020         *                 - Optimized F$All64 to use tfm (BN)
                      (/home/strick/go/s):00021         * NitrOS9 V1.09 - Move & optimized F$CpyMem to OS9P1
                      (/home/strick/go/s):00022         * V1.10  93/05/23 - Slight opt to UnLink
                      (/home/strick/go/s):00023         * V1.11  93/07/26 - Slight opt in F$Icpt
                      (/home/strick/go/s):00024         *                 - Slight opt in F$Wait alarm clearing
                      (/home/strick/go/s):00025         *                 - Slight opt to speed up path table full errors
                      (/home/strick/go/s):00026         *                 - Changed LBEQ to BEQ in F$Unlink
                      (/home/strick/go/s):00027         * V1.16  93/09/03 - Moved F$SUser to OS9P1 (WG)
                      (/home/strick/go/s):00028         *        93/09/08 - Moved F$SUser back to OS9P2 for room in OS9P1 (LCB)
                      (/home/strick/go/s):00029         *        93/09/10 - F$Find64 (L0A50) - Took out BSR to L0A5C, merged routine
                      (/home/strick/go/s):00030         *                   in (only called from here), and took out PSHS/PULS D
                      (/home/strick/go/s):00031         *                   Also modified error structure a bit to shorten it
                      (/home/strick/go/s):00032         *        93/10/06 - Added conditional assembly to skip Network I/O ptrs since
                      (/home/strick/go/s):00033         *                   Coco network never released by Tandy/Microware (in F$Fork)
                      (/home/strick/go/s):00034         *                 - @ GotNProc (in F$Fork), saved 1 byte/cycle when inheriting
                      (/home/strick/go/s):00035         *                   User # & priority
                      (/home/strick/go/s):00036         *                 - Changed routine @ L01FB to use U instead of Y (slightly
                      (/home/strick/go/s):00037         *                   smaller & slightly faster), and also used CLRB with STB
                      (/home/strick/go/s):00038         *                   instead of CLR for clearing DAT block #'s (F$UnLink)
                      (/home/strick/go/s):00039         *        93/12/17 - Moved F$CRCMod code here to give some room in OS9P1
                      (/home/strick/go/s):00040         *        94/05/15 - Attempted opts in Unlink: Changed usage of W to D @ L0185
                      (/home/strick/go/s):00041         *                   and L0198 and L01B5, also optimized L017C to eliminate a
                      (/home/strick/go/s):00042         *                   branch (speeds up module dir search by 3 cycles/module
                      (/home/strick/go/s):00043         *                   checked)
                      (/home/strick/go/s):00044         *                 - Changed BRA L032F @ L02EC (AllProc error) to RTS
                      (/home/strick/go/s):00045         *                 - Changed BRA L0629 @ L05DF to RTS
                      (/home/strick/go/s):00046         *                 - Changed L066A & L067B from BRA L06F4 to PULS CC,A,Y,U,PC
                      (/home/strick/go/s):00047         *                   (F$Send errors)
                      (/home/strick/go/s):00048         *                 - Changed L0A2B from BRA L0A4F to RTS (F$UnLoad error)
                      (/home/strick/go/s):00049         *                 - Changed L0C53 & L0C81 BRA L0C93 to CLRB/RTS (F$GCMDir)
                      (/home/strick/go/s):00050         * -- Alan DeKok
                      (/home/strick/go/s):00051         *        94/10/28 - added boot debug calls
                      (/home/strick/go/s):00052         *                 - Changed code at ~L0D47 to allow F$Fork/F$Chain of Obj6309
                      (/home/strick/go/s):00053         *        94/10/30 - Added error checking on F$Fork of CC3Go
                      (/home/strick/go/s):00054         *                 - Minor mods to F$SSWI call
                      (/home/strick/go/s):00055         *                 - Minor mods to F$STime
                      (/home/strick/go/s):00056         *                 - Changed F$GModDr to BRA to similar code in F$GBlkMp
                      (/home/strick/go/s):00057         *
                      (/home/strick/go/s):00058         *  18r6  Back-ported to OS-9 Level Two from NitrOS-9 Level Two
                      (/home/strick/go/s):00059         *
                      (/home/strick/go/s):00060         *  18r7    2004/06/18  Boisy G. Pitre
                      (/home/strick/go/s):00061         * Kernel no longer attempts a reboot when failing to open term device, but
                      (/home/strick/go/s):00062         * crashes upon error.
                      (/home/strick/go/s):00063         *
                      (/home/strick/go/s):00064         *  19      2013/05/29  Boisy G. Pitre
                      (/home/strick/go/s):00065         * F$Debug now incorporated, allows for reboot.
                      (/home/strick/go/s):00066         
                      (/home/strick/go/s):00067                  nam    krnp2
                      (/home/strick/go/s):00068                  ttl    NitrOS-9 Level 2 Kernel Part 2
                      (/home/strick/go/s):00069         
                      (/home/strick/go/s):00070         ** If Network I/O ptrs are disabled, F$Fork runs 72 cycles faster
     0000             (/home/strick/go/s):00071         Network  equ    0             Set to 1 to enable network I/O ptrs
                      (/home/strick/go/s):00072         
                      (/home/strick/go/s):00073                  IFP1
                      (/home/strick/go/s):00074                  use    defsfile
                      (         defsfile):00001                  use   ../../defsfile
     0002             (   ../../defsfile):00001         Level    equ   2
                      (   ../../defsfile):00002         
                      (   ../../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (            os9.d):00637         * and for bytes in the system memory map at D.SysMem.
                      (            os9.d):00638         * A value of 0 indicates an unused/unassigned block.
                      (            os9.d):00639         * In the code, block assignment often involves incrementing a value
                      (            os9.d):00640         * from 0 to 1 rather than explict use of RAMinUse.
                      (            os9.d):00641         *
     0080             (            os9.d):00642         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00643         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00644         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00645         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00646         *
                      (            os9.d):00647         * Service Dispatch Table special entries
                      (            os9.d):00648         *
     00FE             (            os9.d):00649         IOEntry        EQU       254
                      (            os9.d):00650         
                      (            os9.d):00651                        ENDC      
                      (            os9.d):00652         
                      (            os9.d):00653                        TTL       Structure Formats
                      (            os9.d):00654                        PAG       
                      (            os9.d):00655         ************************************
                      (            os9.d):00656         * Module Directory Entry Definitions
                      (            os9.d):00657         *
                      (            os9.d):00658                        ORG       0
                      (            os9.d):00659                        IFGT      Level-1
0000                  (            os9.d):00660         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00661         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00662                        ENDC      
0004                  (            os9.d):00663         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00664         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00665         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00666         
                      (            os9.d):00667         ************************************
                      (            os9.d):00668         * Module Definitions
                      (            os9.d):00669         *
                      (            os9.d):00670         * Universal Module Offsets
                      (            os9.d):00671         *
                      (            os9.d):00672                        ORG       0
0000                  (            os9.d):00673         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00674         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00675         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00676         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00677         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00678         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00679         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00680         *
                      (            os9.d):00681         * Type-Dependent Module Offsets
                      (            os9.d):00682         *
                      (            os9.d):00683         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00684         *
0009                  (            os9.d):00685         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Program Module
                      (            os9.d):00688         *
000B                  (            os9.d):00689         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Driver, Device Descriptor Module
                      (            os9.d):00692         *
000D                  (            os9.d):00693         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00694         *
                      (            os9.d):00695         * Device Descriptor Module
                      (            os9.d):00696         *
                      (            os9.d):00697                        ORG       M$IDSize
0009                  (            os9.d):00698         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00699         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00700                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00701         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00702         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00703         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00704         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00705         *
                      (            os9.d):00706         * Configuration Module Entry Offsets
                      (            os9.d):00707         *
                      (            os9.d):00708                        ORG       M$IDSize
0009                  (            os9.d):00709         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00710         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00711         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00712         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00713         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00714         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00715         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00716         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00717         
0017                  (            os9.d):00718         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00719         OSVer          RMB       1                   OS version
0019                  (            os9.d):00720         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00721         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00722         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00723         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00724         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00725         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00726                        RMB       4                   reserved for future use
                      (            os9.d):00727         
                      (            os9.d):00728                        IFGT      Level-1
                      (            os9.d):00729         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00730         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00731         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00732         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00733         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00734                        ENDC      
                      (            os9.d):00735         
                      (            os9.d):00736         * Feature1 byte definitions
     0001             (            os9.d):00737         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00738         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00739         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00740         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00741         
                      (            os9.d):00742                        PAG       
                      (            os9.d):00743         **************************
                      (            os9.d):00744         * Module Field Definitions
                      (            os9.d):00745         *
                      (            os9.d):00746         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00747         *
     0087             (            os9.d):00748         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00749         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00750         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00751         
                      (            os9.d):00752         *
                      (            os9.d):00753         * Module Type/Language Field Masks
                      (            os9.d):00754         *
     00F0             (            os9.d):00755         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00756         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00757         
                      (            os9.d):00758         *
                      (            os9.d):00759         * Module Type Values
                      (            os9.d):00760         *
     00F0             (            os9.d):00761         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00762         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00763         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00764         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00765         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00766         Data           EQU       $40                 Data Module
     0030             (            os9.d):00767         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00768         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00769         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00770         
                      (            os9.d):00771         *
                      (            os9.d):00772         * Module Language Values
                      (            os9.d):00773         *
     0001             (            os9.d):00774         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00775         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00776         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00777         CCode          EQU       4                   C I-code
     0005             (            os9.d):00778         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00779         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00780         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00781         *
                      (            os9.d):00782         * Module Attributes / Revision byte
                      (            os9.d):00783         *
                      (            os9.d):00784         * Field Masks
                      (            os9.d):00785         *
     00F0             (            os9.d):00786         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00787         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00788         *
                      (            os9.d):00789         * Attribute Flags
                      (            os9.d):00790         *
     0080             (            os9.d):00791         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00792         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00793         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00794         
                      (            os9.d):00795         ********************
                      (            os9.d):00796         * Device Type Values
                      (            os9.d):00797         *
                      (            os9.d):00798         * These values define various classes of devices, which are
                      (            os9.d):00799         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00800         * in a device's device descriptor.
                      (            os9.d):00801         *
     0000             (            os9.d):00802         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00803         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00804         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00805         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00806         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00807         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00808         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00809         
                      (            os9.d):00810         *********************
                      (            os9.d):00811         * CRC Result Constant
                      (            os9.d):00812         *
     0080             (            os9.d):00813         CRCCon1        EQU       $80
     0FE3             (            os9.d):00814         CRCCon23       EQU       $0FE3
                      (            os9.d):00815         
                      (            os9.d):00816                        TTL       Process Information
                      (            os9.d):00817                        PAG       
                      (            os9.d):00818         ********************************
                      (            os9.d):00819         * Process Descriptor Definitions
                      (            os9.d):00820         *
                      (            os9.d):00821                        IFEQ      Level-1
                      (            os9.d):00822         
                      (            os9.d):00823         * Level 1 process descriptor defs
002A                  (            os9.d):00824         DefIOSiz       EQU       12
002A                  (            os9.d):00825         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00826         
                      (            os9.d):00827                        ORG       0
002A                  (            os9.d):00828         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00829         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00830         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00831         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00832         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00833         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00834         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00835         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00836         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00837         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00838         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00839         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00840         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00841         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00842         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00843         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00844         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00845         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00846         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00847         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00848         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00849         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00850         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00851         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00852         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00853                        RMB       $40-.               unused
002A                  (            os9.d):00854         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00855         
                      (            os9.d):00856         *
                      (            os9.d):00857         * Process State Flags
                      (            os9.d):00858         *
002A                  (            os9.d):00859         SysState       EQU       %10000000
002A                  (            os9.d):00860         TimSleep       EQU       %01000000
002A                  (            os9.d):00861         TimOut         EQU       %00100000
002A                  (            os9.d):00862         ImgChg         EQU       %00010000
002A                  (            os9.d):00863         Condem         EQU       %00000010
002A                  (            os9.d):00864         Dead           EQU       %00000001
                      (            os9.d):00865         
                      (            os9.d):00866                        ELSE      
                      (            os9.d):00867         
                      (            os9.d):00868         * Level 2 process descriptor defs
     0010             (            os9.d):00869         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00870         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00871         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00872         
                      (            os9.d):00873                        ORG       0
0000                  (            os9.d):00874         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00875         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00876         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00877         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00878         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00879         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00880         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00881         P$User         RMB       2                   User Index
000A                  (            os9.d):00882         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00883         P$Age          RMB       1                   Age
000C                  (            os9.d):00884         P$State        RMB       1                   Status
000D                  (            os9.d):00885         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00886         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00887         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00888         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00889         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00890         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00891         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00892         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00893         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00894         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00895         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00896                        RMB       $20-.               unused
0020                  (            os9.d):00897         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00898         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00899         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00900         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00901         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00902         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00903         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00904         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00905         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00906         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00907         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00908         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00909         P$Alarm        RMB       6
00C9                  (            os9.d):00910                        RMB       $200-.              Local stack
     0200             (            os9.d):00911         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00912         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00913         
                      (            os9.d):00914         *
                      (            os9.d):00915         * Process State Flags
                      (            os9.d):00916         *
     0080             (            os9.d):00917         SysState       EQU       %10000000
     0040             (            os9.d):00918         TimSleep       EQU       %01000000
     0020             (            os9.d):00919         TimOut         EQU       %00100000
     0010             (            os9.d):00920         ImgChg         EQU       %00010000
     0008             (            os9.d):00921         Suspend        EQU       %00001000
     0002             (            os9.d):00922         Condem         EQU       %00000010
     0001             (            os9.d):00923         Dead           EQU       %00000001
                      (            os9.d):00924         
                      (            os9.d):00925                        ENDC      
                      (            os9.d):00926         
                      (            os9.d):00927                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00928                        PAG       
                      (            os9.d):00929         *************************
                      (            os9.d):00930         * Path Descriptor Offsets
                      (            os9.d):00931         *
                      (            os9.d):00932                        ORG       0
0000                  (            os9.d):00933         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00934         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00935         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00936         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00937         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00938         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00939         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00940         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00941         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00942         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00943                        RMB       64-.                Path options
     0040             (            os9.d):00944         PDSIZE         EQU       .
                      (            os9.d):00945         
                      (            os9.d):00946         *
                      (            os9.d):00947         * Pathlist Special Symbols
                      (            os9.d):00948         *
     002F             (            os9.d):00949         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00950         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00951         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00952         
                      (            os9.d):00953                        PAG       
                      (            os9.d):00954         ****************************
                      (            os9.d):00955         * File Manager Entry Offsets
                      (            os9.d):00956         *
                      (            os9.d):00957                        ORG       0
0000                  (            os9.d):00958         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00959         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00960         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00961         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00962         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00963         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00964         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00965         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00966         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00967         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00968         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00969         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00970         FMCLOS         RMB       3                   Close File
                      (            os9.d):00971         
                      (            os9.d):00972         *****************************
                      (            os9.d):00973         * Device Driver Entry Offsets
                      (            os9.d):00974         *
                      (            os9.d):00975                        ORG       0
0000                  (            os9.d):00976         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00977         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00978         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00979         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00980         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00981         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00982         
                      (            os9.d):00983         *********************
                      (            os9.d):00984         * Device Table Format
                      (            os9.d):00985         *
                      (            os9.d):00986                        ORG       0
0000                  (            os9.d):00987         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00988         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00989         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00990         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00991         V$USRS         RMB       1                   use count
                      (            os9.d):00992                        IFGT      Level-1
0009                  (            os9.d):00993         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00994         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00995                        ENDC      
     000D             (            os9.d):00996         DEVSIZ         EQU       .
                      (            os9.d):00997         
                      (            os9.d):00998         *******************************
                      (            os9.d):00999         * Device Static Storage Offsets
                      (            os9.d):01000         *
                      (            os9.d):01001                        ORG       0
0000                  (            os9.d):01002         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):01003         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01004         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01005         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01006         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01007         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01008         
                      (            os9.d):01009         ********************************
                      (            os9.d):01010         * Interrupt Polling Table Format
                      (            os9.d):01011         *
                      (            os9.d):01012                        ORG       0
0000                  (            os9.d):01013         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01014         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01015         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01016         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01017         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01018         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01019                        IFGT      Level-1
0009                  (            os9.d):01020         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01021                        ENDC      
     000B             (            os9.d):01022         POLSIZ         EQU       .
                      (            os9.d):01023         
                      (            os9.d):01024         ********************
                      (            os9.d):01025         * VIRQ packet format
                      (            os9.d):01026         *
                      (            os9.d):01027                        ORG       0
0000                  (            os9.d):01028         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01029         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01030         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01031         Vi.PkSz        EQU       .
                      (            os9.d):01032         
     0001             (            os9.d):01033         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01034         
                      (            os9.d):01035                        PAG       
                      (            os9.d):01036         *************************************
                      (            os9.d):01037         * Machine Characteristics Definitions
                      (            os9.d):01038         *
     0000             (            os9.d):01039         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01040         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01041         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01042         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01043                        IFNE      H6309
0005                  (            os9.d):01044         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01045         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01046         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01047         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01048         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01049         R$X            EQU       6                   X Index register
0005                  (            os9.d):01050         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01051         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01052         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01053         R$Size         EQU       14                  Total register package size
                      (            os9.d):01054                        ELSE      
     0003             (            os9.d):01055         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01056         R$X            EQU       4                   X Index register
     0006             (            os9.d):01057         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01058         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01059         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01060         R$Size         EQU       12                  Total register package size
                      (            os9.d):01061                        ENDC      
                      (            os9.d):01062         
                      (            os9.d):01063         * MD register masks
                      (            os9.d):01064         * 6309 definitions
     0080             (            os9.d):01065         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01066         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01067         
     0080             (            os9.d):01068         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01069         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01070         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01071         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01072         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01073         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01074         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01075         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01076         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01077         Sign           EQU       %10000000           sign bit
                      (            os9.d):01078         
                      (            os9.d):01079                        TTL       Error Code Definitions
                      (            os9.d):01080                        PAG       
                      (            os9.d):01081         ************************
                      (            os9.d):01082         * Error Code Definitions
                      (            os9.d):01083         *
                      (            os9.d):01084         * Basic09 Error Codes
                      (            os9.d):01085         *
                      (            os9.d):01086                        ORG       10
000A                  (            os9.d):01087         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01088         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01089         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01090         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01091         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01092         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01093         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01094         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01095         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01096         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01097         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01098         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01099         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01100         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01101         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01102         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01103         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01104         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01105         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01106         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01107         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01108         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01109         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01110         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01111         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01112         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01113         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01114         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01115         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01116         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01117         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01118         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01119         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01120         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01121         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01122         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01123         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01124         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01125         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01126         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01127         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01128         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01129         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01130         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01131         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01132         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01133         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01134         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01135         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01136         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01137         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01138         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01139         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01140         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01141         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01142         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01143         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01144         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01145         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01146         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01147         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01148         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01149         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01150         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01151         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01152         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01153         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01154         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01155         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01156         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01157         
                      (            os9.d):01158         *
                      (            os9.d):01159         * System Dependent Error Codes
                      (            os9.d):01160         *
                      (            os9.d):01161         
                      (            os9.d):01162         * Level 2 windowing error codes
                      (            os9.d):01163                        ORG       183
00B7                  (            os9.d):01164         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01165         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01166         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01167         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01168         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01169                        RMB       1                   reserved
00BD                  (            os9.d):01170         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01171         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01172         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01173         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01174         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01175         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01176         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01177         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01178         
00C5                  (            os9.d):01179         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01180         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01181         E$Alias        RMB       1
                      (            os9.d):01182         
                      (            os9.d):01183         
                      (            os9.d):01184         *
                      (            os9.d):01185         * Standard NitrOS-9 Error Codes
                      (            os9.d):01186         *
                      (            os9.d):01187                        ORG       200
00C8                  (            os9.d):01188         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01189         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01190         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01191         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01192         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01193         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01194         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01195         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01196         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01197         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01198         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01199         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01200                        RMB       1
00D5                  (            os9.d):01201         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01202         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01203         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01204         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01205         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01206         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01207         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01208         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01209         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01210                        RMB       1
00DF                  (            os9.d):01211         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01212         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01213         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01214                        RMB       1
00E2                  (            os9.d):01215         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01216         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01217         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01218         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01219         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01220         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01221         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01222         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01223         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01224         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01225         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01226         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01227         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01228         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01229                        RMB       $F0-.               reserved
00F0                  (            os9.d):01230         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01231         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01232         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01233         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01234         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01235         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01236         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01237         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01238         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01239         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01240         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01241         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01242         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01243         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01244         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01245         
                      (            os9.d):01246         
                      (            os9.d):01247                        IFGT      Level-2
                      (            os9.d):01248         ***************************
                      (            os9.d):01249         * Level 3 Defs
                      (            os9.d):01250         *
                      (            os9.d):01251         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01252         *
00FF                  (            os9.d):01253         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01254         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01255         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01256         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01257         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01258         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01259                        ENDC      
                      (            os9.d):01260         
                      (            os9.d):01261                        ENDC      
                      (   ../../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
     00E0             (            scf.d):00222         PARMASK        EQU       %11100000
                      (            scf.d):00223         
                      (            scf.d):00224         * PD.BAU definitions
                      (            scf.d):00225         *
                      (            scf.d):00226         * Baud rate
     0000             (            scf.d):00227         B110           EQU       %00000000
     0001             (            scf.d):00228         B300           EQU       %00000001
     0002             (            scf.d):00229         B600           EQU       %00000010
     0003             (            scf.d):00230         B1200          EQU       %00000011
     0004             (            scf.d):00231         B2400          EQU       %00000100
     0005             (            scf.d):00232         B4800          EQU       %00000101
     0006             (            scf.d):00233         B9600          EQU       %00000110
     0007             (            scf.d):00234         B19200         EQU       %00000111
     0008             (            scf.d):00235         B38400         EQU       %00001000
     0009             (            scf.d):00236         B57600         EQU       %00001001
     000A             (            scf.d):00237         B115200        EQU       %00001010
                      (            scf.d):00238         * Word size
     0000             (            scf.d):00239         WORD8          EQU       %00000000
     0020             (            scf.d):00240         WORD7          EQU       %00100000
                      (            scf.d):00241         * Stop bits
     0000             (            scf.d):00242         STOP1          EQU       %00000000
     0010             (            scf.d):00243         STOP2          EQU       %00010000
                      (            scf.d):00244         
                      (            scf.d):00245                        ENDC      
                      (   ../../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (   ../../defsfile):00006                  use   coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         ********************************
                      (           coco.d):00148         * Boot defs for NitrOS-9 Level 1
                      (           coco.d):00149         *
                      (           coco.d):00150         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00151         * system.
                      (           coco.d):00152         *
0004                  (           coco.d):00153         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE
                      (           coco.d):00156         
                      (           coco.d):00157         ******************************************
                      (           coco.d):00158         * Boot defs for NitrOS-9 Level 2 and above
                      (           coco.d):00159         *
                      (           coco.d):00160         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00161         * system.
                      (           coco.d):00162         *
     ED00             (           coco.d):00163         Bt.Start       SET       $ED00               Start address of the boot track in memory
     003B             (           coco.d):00164         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (           coco.d):00165         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (           coco.d):00166         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
                      (           coco.d):00167         
                      (           coco.d):00168                        ENDC
                      (           coco.d):00169         
                      (           coco.d):00170         * On the CoCo, the boot track is all of track 34
                      (           coco.d):00171         
     0022             (           coco.d):00172         Bt.Track       EQU       34                  Boot track
     0000             (           coco.d):00173         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (           coco.d):00174         
                      (           coco.d):00175         
     1080             (           coco.d):00176         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (           coco.d):00177         
                      (           coco.d):00178         
                      (           coco.d):00179                        IFEQ      Level-1
                      (           coco.d):00180         
                      (           coco.d):00181         *************************************************
                      (           coco.d):00182         *
                      (           coco.d):00183         * NitrOS-9 Level 1 Section
                      (           coco.d):00184         *
                      (           coco.d):00185         *************************************************
                      (           coco.d):00186         
0004                  (           coco.d):00187         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00188         
                      (           coco.d):00189                        ELSE      
                      (           coco.d):00190         
                      (           coco.d):00191         *************************************************
                      (           coco.d):00192         *
                      (           coco.d):00193         * NitrOS-9 Level 2 Section
                      (           coco.d):00194         *
                      (           coco.d):00195         *************************************************
                      (           coco.d):00196         
                      (           coco.d):00197         ****************************************
                      (           coco.d):00198         * Dynamic Address Translator Definitions
                      (           coco.d):00199         *
     0008             (           coco.d):00200         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00201         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00202         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00203         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00204         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00205         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00206         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00207         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00208         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00209         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00210         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00211         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00212         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00213         IOBlock        EQU       $3F
     003F             (           coco.d):00214         ROMBlock       EQU       $3F
     007F             (           coco.d):00215         IOAddr         EQU       $7F
     0001             (           coco.d):00216         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00217         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00218         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00219         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00220         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00221         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00222         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00223         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00224         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00225         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00226         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00227         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00228         
                      (           coco.d):00229         ***************************
                      (           coco.d):00230         * Color Computer 3 Specific
                      (           coco.d):00231         *
     0001             (           coco.d):00232         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00233         
                      (           coco.d):00234         ********************
                      (           coco.d):00235         * Hardware addresses
                      (           coco.d):00236         *
     FF00             (           coco.d):00237         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00238         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00239         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00240         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00241         
     0007             (           coco.d):00242         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00243         
                      (           coco.d):00244         * KrnBlk defines the block number of the 8K RAM block that is mapped to
                      (           coco.d):00245         * the top of CPU address space ($E000-$FFFF) for the system process, and
                      (           coco.d):00246         * which holds the Kernel. The top 2 pages of this CPU address space ($FFE0-
                      (           coco.d):00247         * $FFFF) has two special properties. Firstly, it contains the I/O space.
                      (           coco.d):00248         * Secondly, the parts that contain RAM map are not affected by the DAT
                      (           coco.d):00249         * mappings but, instead, *always* map that RAM to a fixed RAM block
                      (           coco.d):00250         * (KrnBlk). When a user process is mapped in, and requests enough memory,
                      (           coco.d):00251         * it will end up with its own block assigned for CPU address space $E000-
                      (           coco.d):00252         * $FFFF but the top of the address space is unusable by the user process:
                      (           coco.d):00253         * it still contains the I/O and the bit of RAM that's mapped to KrnBlk.
                      (           coco.d):00254         * Usually, the value of KrnBlk is fixed for a particular hardware design;
                      (           coco.d):00255         * For the COCO GIME, it's always $3F.
     003F             (           coco.d):00256         KrnBlk         SET       $3F
                      (           coco.d):00257         
                      (           coco.d):00258                        ENDC
                      (           coco.d):00259                        ENDC
                      (           coco.d):00260         
                      (/home/strick/go/s):00075                  use    cocovtio.d
                      (       cocovtio.d):00001                        IFNE      COCOVTIO.D-1
     0001             (       cocovtio.d):00002         COCOVTIO.D     SET       1
                      (       cocovtio.d):00003         
                      (       cocovtio.d):00004                        IFEQ      Level-1
                      (       cocovtio.d):00005         
                      (       cocovtio.d):00006         ********************************************************************
                      (       cocovtio.d):00007         * VTIODefs - Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00008         *
                      (       cocovtio.d):00009         * $Id$
                      (       cocovtio.d):00010         *
                      (       cocovtio.d):00011         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00012         * Comment
                      (       cocovtio.d):00013         * ------------------------------------------------------------------
                      (       cocovtio.d):00014         *          2004/11/29  P.Harvey-Smith.
                      (       cocovtio.d):00015         * Added symbolic defines for bits in V.CoLoad.
                      (       cocovtio.d):00016         *
                      (       cocovtio.d):00017         *          2004/12/02  P.Harvey-Smith.
                      (       cocovtio.d):00018         * Moved over all variables from co51.asm
                      (       cocovtio.d):00019         *
                      (       cocovtio.d):00020         *          2005/04/09  P.Harvey-Smith.
                      (       cocovtio.d):00021         * Decoded rest of the CoHR memory locations.
                      (       cocovtio.d):00022         *
                      (       cocovtio.d):00023         *              2005/04/24  P.Harvey-Smith.
                      (       cocovtio.d):00024         * Added variables for cursor flash, currently only implemented in co51
                      (       cocovtio.d):00025         *
                      (       cocovtio.d):00026                        NAM       VTIODefs  
                      (       cocovtio.d):00027                        TTL       Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00028         
                      (       cocovtio.d):00029         ********************
                      (       cocovtio.d):00030         * VTIO Static Memory
                      (       cocovtio.d):00031         *
                      (       cocovtio.d):00032                        ORG       V.SCF
0004                  (       cocovtio.d):00033         V.ScrnA        RMB       2                   (2) screen start address in system memory
0004                  (       cocovtio.d):00034         V.ScrnE        RMB       2                   (2) address of end of screen
0004                  (       cocovtio.d):00035         V.CrsrA        RMB       1                   (2) cursor address
0004                  (       cocovtio.d):00036         V.CrsAL        RMB       1                   cursor address low
0004                  (       cocovtio.d):00037         V.CChar        RMB       1                   value of character under cursor
0004                  (       cocovtio.d):00038         V.Mode         RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0004                  (       cocovtio.d):00039         V.NGChr        RMB       1                   number of additional characters to get
0004                  (       cocovtio.d):00040         V.RTAdd        RMB       2                   (2) return address after getting characters
0004                  (       cocovtio.d):00041         V.NChar        RMB       1                   character to process
0004                  (       cocovtio.d):00042         V.NChr2        RMB       1                   and the next one
                      (       cocovtio.d):00043                        RMB       1                   (I assume reserved for a 3rd parameter byte)
0004                  (       cocovtio.d):00044         V.Chr1         RMB       1                   same as under cursor character
0004                  (       cocovtio.d):00045         V.CColr        RMB       1                   cursor color
0004                  (       cocovtio.d):00046         V.Col          RMB       1                   number of columns for this screen
0004                  (       cocovtio.d):00047         V.Row          RMB       1                   number of rows
0004                  (       cocovtio.d):00048         V.Alpha        RMB       1                   0 when in alpha mode
0004                  (       cocovtio.d):00049         V.PIA1         RMB       1                   PIA1Base value
0004                  (       cocovtio.d):00050         V.Rdy          RMB       1                   device ready (see SS.DStat 0=not ready)
0004                  (       cocovtio.d):00051         V.CFlg1        RMB       1                   VDG display code values
0004                  (       cocovtio.d):00052         V.SBAdd        RMB       2                   (2) address of block screen is in
0004                  (       cocovtio.d):00053         V.GBuff        RMB       2                   allocation for graphics buffers (block#)
0004                  (       cocovtio.d):00054         V.AGBuf        RMB       4                   (2) additional graphics buffer
0004                  (       cocovtio.d):00055         V.FFMem        RMB       2                   Flood fill alloc'ed mem
0004                  (       cocovtio.d):00056         V.FFSPt        RMB       2                   Flood fill current stack pointer
0004                  (       cocovtio.d):00057         V.FFSTp        RMB       1                   Flood fill stack top
0004                  (       cocovtio.d):00058         V.FF6          RMB       1                   flood fill flag
0004                  (       cocovtio.d):00059         V.FFFlag       RMB       1                   Error in FloodFill - E$Write if FFill stack overflows, 0 if no error
0004                  (       cocovtio.d):00060         V.MTabl        RMB       2                   (2) address of mask table for pixels in byte
0004                  (       cocovtio.d):00061         V.PixBt        RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0004                  (       cocovtio.d):00062         V.GCrsX        RMB       1                   graphics cursor X value
0004                  (       cocovtio.d):00063         V.GCrsY        RMB       1                   graphics cursor Y
0004                  (       cocovtio.d):00064         V.Msk1         RMB       1                   mask byte 1
0004                  (       cocovtio.d):00065         V.Msk2         RMB       1                   mask byte 2 (00,55,AA,FF) Full byte Color Mask
0004                  (       cocovtio.d):00066         V.MCol         RMB       1                   Start pixel in a byte mask ($C0=4 color, $80=2 color)
0004                  (       cocovtio.d):00067         V.4A           RMB       1                   End pixel in a byte mask ($03=4 color,$01=2 color)
0004                  (       cocovtio.d):00068         V.PMask        RMB       1                   Full byte pixel mask for colors (i.e. $55, $CC etc)
0004                  (       cocovtio.d):00069         V.4C           RMB       1
0004                  (       cocovtio.d):00070         V.4D           RMB       1
0004                  (       cocovtio.d):00071         V.4E           RMB       1                   Flood Fill full byte color mask
0004                  (       cocovtio.d):00072         V.4F           RMB       1
0004                  (       cocovtio.d):00073         V.Caps         RMB       1                   caps lock info: $00=lower $FF=upper
0004                  (       cocovtio.d):00074         V.ClkCnt       RMB       1                   clock count ??
0004                  (       cocovtio.d):00075         V.WrChr        RMB       1                   character to write
0004                  (       cocovtio.d):00076         V.CurCo        RMB       1                   current CO-module in use
                      (       cocovtio.d):00077         * start of CoWP-specific static memory
0004                  (       cocovtio.d):00078         V.Co80X        RMB       1                   V.54
0004                  (       cocovtio.d):00079         V.Co80Y        RMB       1                   V.55
0004                  (       cocovtio.d):00080         V.ColPtr       RMB       1                   V.56
0004                  (       cocovtio.d):00081         V.RowPtr       RMB       1                   V.57
0004                  (       cocovtio.d):00082         V.C80X         RMB       1                   CoWP X position
0004                  (       cocovtio.d):00083         V.C80Y         RMB       1                   CoWP Y position
0004                  (       cocovtio.d):00084         V.Invers       RMB       1
                      (       cocovtio.d):00085         * end of CoWP-specific static memory
0004                  (       cocovtio.d):00086         V.DspVct       RMB       2                   vector to display screen
0004                  (       cocovtio.d):00087         V.CnvVct       RMB       2                   vector to X/Y to address conversion
0004                  (       cocovtio.d):00088         V.LKeyCd       RMB       1                   last key code
0004                  (       cocovtio.d):00089         V.2Key1        RMB       1                   2nd Key 1
0004                  (       cocovtio.d):00090         V.2Key2        RMB       1                   2nd Key 2
0004                  (       cocovtio.d):00091         V.2Key3        RMB       1                   2nd Key 3
0004                  (       cocovtio.d):00092         V.Key1         RMB       1                   Key 1
0004                  (       cocovtio.d):00093         V.Key2         RMB       1                   Key 2
0004                  (       cocovtio.d):00094         V.Key3         RMB       1                   Key 3
0004                  (       cocovtio.d):00095         V.ShftDn       RMB       1                   SHIFT/CTRL state
0004                  (       cocovtio.d):00096         V.CtrlDn       RMB       1                   CTRL key down
0004                  (       cocovtio.d):00097         V.KeyFlg       RMB       1                   key flag
0004                  (       cocovtio.d):00098         V.AltDwn       RMB       1                   ALT key down
0004                  (       cocovtio.d):00099         V.KySns        RMB       1                   key sense flags
0004                  (       cocovtio.d):00100         V.KySame       RMB       1                   key same as last flag
0004                  (       cocovtio.d):00101         V.KySnsF       RMB       1                   key sense flag
0004                  (       cocovtio.d):00102         V.Spcl         RMB       1
0004                  (       cocovtio.d):00103         V.KTblLC       RMB       1                   key table entry #
0004                  (       cocovtio.d):00104         V.6F           RMB       1                   ???
0004                  (       cocovtio.d):00105         V.COLoad       RMB       1                   CO-module loaded flags
0004                  (       cocovtio.d):00106         V.CFlag        RMB       1                   true lowercase flag $10=true, $00=false
0004                  (       cocovtio.d):00107         V.GrfDrvE      RMB       2                   GrfDrv entry point
0004                  (       cocovtio.d):00108         V.CoVDGE       RMB       2                   CoVDG entry point
0004                  (       cocovtio.d):00109         V.CoWPE        RMB       2                   CoWP entry point
0004                  (       cocovtio.d):00110         V.CoHRE        RMB       2                   CoHR entry point
0004                  (       cocovtio.d):00111         V.Co42E        RMB       2                   Co42 entry point
0004                  (       cocovtio.d):00112         V.CoVGAE       RMB       2                   CoVGA entry point
0004                  (       cocovtio.d):00113         V.Co80E        RMB       2                   Co80 entry point
0004                  (       cocovtio.d):00114         V.CoDPlusE     RMB       2                   CoDPlus entry point
0004                  (       cocovtio.d):00115         V.Flash        RMB       2                   Cursor flash routine address.
0004                  (       cocovtio.d):00116         v.FlashTime    RMB       1                   Cursor flash time
0004                  (       cocovtio.d):00117         v.FlashCount   RMB       1                   Cursor flash count
0004                  (       cocovtio.d):00118         V.NoFlash      RMB       1                   When this is non-zero do not flash cursor
                      (       cocovtio.d):00119         * If we make ClrBlk vector, throw it in here so the various comoduels, as well as VTIO,
                      (       cocovtio.d):00120         * can all use it (clearing text/graphics screens, clearing full width line (pure text or
                      (       cocovtio.d):00121         * CoHr/Co42 graphics lines), and possibly Clear to end of line could all use it.
0004                  (       cocovtio.d):00122         V.ClrBlk       RMB       2                   Vector to mini-stack blast clearing routine
0004                  (       cocovtio.d):00123         V.CpyBlk       RMB       2                   Vector to mini-stack blast copying routine
                      (       cocovtio.d):00124         * CoHR vars
0004                  (       cocovtio.d):00125         V.51ScrnA      RMB       2                   * Screen address.
0004                  (       cocovtio.d):00126         V.51XPos       RMB       1                   * X co-ordinate
0004                  (       cocovtio.d):00127         V.51YPos       RMB       1                   * Y co-ordinate
0004                  (       cocovtio.d):00128         V.51EscSeq     RMB       1                   * In escape sequence
0004                  (       cocovtio.d):00129         V.51ReverseFlag RMB       1                  * Reverse video flag
0004                  (       cocovtio.d):00130         V.51UnderlineFlag RMB       1                * Underline flag
0004                  (       cocovtio.d):00131         V.51CtrlDispatch RMB       2                 * Ctrl char dispatch address, currently processing
0004                  (       cocovtio.d):00132         V.51BytePixOffset RMB       1                * byte offset in screen line, of character X position        
0004                  (       cocovtio.d):00133         V.51OldCursorPosX RMB       1                * Position of old cursor before update        
0004                  (       cocovtio.d):00134         V.51OldCursorPosY RMB       1
0004                  (       cocovtio.d):00135         V.51CursorChanged RMB       1                * Has cursor position changed ? 1=yes,0=no
0004                  (       cocovtio.d):00136         V.51CursorOn   RMB       1                   * Is cursor on ? 1=yes 0=no                         
0004                  (       cocovtio.d):00137         V.51XORFlag    RMB       1                   * and data to screen (0) or Xor (1)                       
0004                  (       cocovtio.d):00138         V.51ScreenMask1 RMB       1                  * screen masks for drawing characters on screen         
0004                  (       cocovtio.d):00139         V.51ScreenMask2 RMB       1
                      (       cocovtio.d):00140         * End of CoHR vars
                      (       cocovtio.d):00141         **** Note these have to come at the end of the defs, or the keyboard ****
                      (       cocovtio.d):00142         **** code can clobber variables defined after these !                ****
0004                  (       cocovtio.d):00143         V.IBufH        RMB       1                   input buffer head
0004                  (       cocovtio.d):00144         V.IBufT        RMB       1                   input buffer tail
0004                  (       cocovtio.d):00145         V.InBuf        RMB       1                   input buffer ptr
0004                  (       cocovtio.d):00146         V.51End        RMB       1
                      (       cocovtio.d):00147                        RMB       250-.
0004                  (       cocovtio.d):00148         V.Last         EQU       .
                      (       cocovtio.d):00149         
                      (       cocovtio.d):00150         
                      (       cocovtio.d):00151         * Unknown for now
                      (       cocovtio.d):00152         *VD.FFMem rmb   2  (2) bottom of stack for flood fill
                      (       cocovtio.d):00153         *VD.FFSPt rmb   2  (2) flood fill stack pointer
                      (       cocovtio.d):00154         *VD.FFSTp rmb   2  (2) flood fill stack top pointer
                      (       cocovtio.d):00155         *VD.FF6   rmb   1   flood fill flag
                      (       cocovtio.d):00156         *VD.MCol2 rmb   1  color
                      (       cocovtio.d):00157         *VD.FF1   rmb   1  data for flood fill
                      (       cocovtio.d):00158         *VD.FF2   rmb   1  data for flood fill
                      (       cocovtio.d):00159         *VD.FFMsk rmb   1  flood fill mask
                      (       cocovtio.d):00160         *VD.FFFlg rmb   1  flood fill flag
                      (       cocovtio.d):00161         *VD.Palet rmb   16 (16) current palette values
                      (       cocovtio.d):00162         *VD.PlFlg rmb   1  initialized to $08 by L00DB, and then unused!
                      (       cocovtio.d):00163         
                      (       cocovtio.d):00164         *
                      (       cocovtio.d):00165         * Defs for V.COLoad flags.
                      (       cocovtio.d):00166         * 
                      (       cocovtio.d):00167         
0004                  (       cocovtio.d):00168         ModCoVDG       EQU       %00000010           CoVDG, Built-in VDG 32x16.
0004                  (       cocovtio.d):00169         ModCoWP        EQU       %00000100           CoWP, WordPak, 80x25
0004                  (       cocovtio.d):00170         ModCoHR        EQU       %00001000           CoHR, PMODE 4 51x25 text
0004                  (       cocovtio.d):00171         ModCo42        EQU       %00010000           Co42, PMODE 4 42x25 text
0004                  (       cocovtio.d):00172         ModCoVGA       EQU       %00100000           CoVGA, 64x32 text
0004                  (       cocovtio.d):00173         ModCo80        EQU       %01000000           Co80, CRT9128 WordPak, 80x25
0004                  (       cocovtio.d):00174         ModCoDPlus     EQU       %10000000           Dragon Plus, 6545, 80x24
                      (       cocovtio.d):00175         
                      (       cocovtio.d):00176         *
                      (       cocovtio.d):00177         * Defs for cursor flash counter
                      (       cocovtio.d):00178         *
                      (       cocovtio.d):00179         
0004                  (       cocovtio.d):00180         CFlash50hz     EQU       25                  * 50Hz flash counter
0004                  (       cocovtio.d):00181         CFlash60Hz     EQU       30                  * 60Hz flash counter
                      (       cocovtio.d):00182         
                      (       cocovtio.d):00183                        ELSE
                      (       cocovtio.d):00184                        
                      (       cocovtio.d):00185         ********************************************************************
                      (       cocovtio.d):00186         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00187         *
                      (       cocovtio.d):00188         * $Id$
                      (       cocovtio.d):00189         *
                      (       cocovtio.d):00190         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00191         * Comment
                      (       cocovtio.d):00192         * ------------------------------------------------------------------
                      (       cocovtio.d):00193         *          2004/07/18  Boisy G. Pitre
                      (       cocovtio.d):00194         * Started from systype
                      (       cocovtio.d):00195         
                      (       cocovtio.d):00196                        NAM       VTIODefs
                      (       cocovtio.d):00197                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00198         
                      (       cocovtio.d):00199         ****************
                      (       cocovtio.d):00200         * Window Devices
                      (       cocovtio.d):00201         *
                      (       cocovtio.d):00202                        ORG       $FF9F
FF9F                  (       cocovtio.d):00203         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (       cocovtio.d):00204         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (       cocovtio.d):00205         A.W1           RMB       1                   $FFA1
FFA2                  (       cocovtio.d):00206         A.W2           RMB       1                   $FFA2
FFA3                  (       cocovtio.d):00207         A.W3           RMB       1                   $FFA3
FFA4                  (       cocovtio.d):00208         A.W4           RMB       1                   $FFA4
FFA5                  (       cocovtio.d):00209         A.W5           RMB       1                   $FFA5
FFA6                  (       cocovtio.d):00210         A.W6           RMB       1                   $FFA6
FFA7                  (       cocovtio.d):00211         A.W7           RMB       1                   $FFA7
FFA8                  (       cocovtio.d):00212         A.W8           RMB       1                   $FFA8
FFA9                  (       cocovtio.d):00213         A.W9           RMB       1                   $FFA9
FFAA                  (       cocovtio.d):00214         A.W10          RMB       1                   $FFAA
FFAB                  (       cocovtio.d):00215         A.W11          RMB       1                   $FFAB
FFAC                  (       cocovtio.d):00216         A.W12          RMB       1                   $FFAC
FFAD                  (       cocovtio.d):00217         A.W13          RMB       1                   $FFAD
FFAE                  (       cocovtio.d):00218         A.W14          RMB       1                   $FFAE
FFAF                  (       cocovtio.d):00219         A.W15          RMB       1                   $FFAF
                      (       cocovtio.d):00220         
                      (       cocovtio.d):00221         **********************************
                      (       cocovtio.d):00222         * Pointer Device Packet Definition
                      (       cocovtio.d):00223         *
                      (       cocovtio.d):00224                        ORG       0
0000                  (       cocovtio.d):00225         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (       cocovtio.d):00226         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (       cocovtio.d):00227         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (       cocovtio.d):00228                        RMB       2                   reserved
0005                  (       cocovtio.d):00229         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (       cocovtio.d):00230         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (       cocovtio.d):00231         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (       cocovtio.d):00232         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (       cocovtio.d):00233         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (       cocovtio.d):00234         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (       cocovtio.d):00235         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (       cocovtio.d):00236         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (       cocovtio.d):00237         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (       cocovtio.d):00238         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (       cocovtio.d):00239                        RMB       2                   Reserved
0012                  (       cocovtio.d):00240         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (       cocovtio.d):00241         Pt.BDY         RMB       2                   Button down Y value
0016                  (       cocovtio.d):00242         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (       cocovtio.d):00243         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (       cocovtio.d):00244         Pt.AcX         RMB       2                   Actual X Value
001A                  (       cocovtio.d):00245         Pt.AcY         RMB       2                   Actual Y Value
001C                  (       cocovtio.d):00246         Pt.WRX         RMB       2                   Window Relative X
001E                  (       cocovtio.d):00247         Pt.WRY         RMB       2                   Window Relative Y
     0020             (       cocovtio.d):00248         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (       cocovtio.d):00249         
                      (       cocovtio.d):00250         **************************
                      (       cocovtio.d):00251         * window regions for mouse
                      (       cocovtio.d):00252         *
     0000             (       cocovtio.d):00253         WR.Cntnt       EQU       0                   content region
     0001             (       cocovtio.d):00254         WR.Cntrl       EQU       1                   control region
     0002             (       cocovtio.d):00255         WR.OfWin       EQU       2                   off window
                      (       cocovtio.d):00256         
                      (       cocovtio.d):00257         *************************************
                      (       cocovtio.d):00258         * Standard system get/put buffer defs
                      (       cocovtio.d):00259         *
                      (       cocovtio.d):00260         *
                      (       cocovtio.d):00261         * system group numbers
                      (       cocovtio.d):00262         *
                      (       cocovtio.d):00263                        ORG       200
00C8                  (       cocovtio.d):00264         Grp.Fnt        RMB       1                   font group
00C9                  (       cocovtio.d):00265         Grp.Clip       RMB       1                   clipboard group
00CA                  (       cocovtio.d):00266         Grp.Ptr        RMB       1                   pointer group
00CB                  (       cocovtio.d):00267         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (       cocovtio.d):00268         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (       cocovtio.d):00269         Grp.Pat6       RMB       1                   pattern group 16 color
                      (       cocovtio.d):00270         *
                      (       cocovtio.d):00271         * font buffer numbers
                      (       cocovtio.d):00272         *
                      (       cocovtio.d):00273                        ORG       1
0001                  (       cocovtio.d):00274         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (       cocovtio.d):00275         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (       cocovtio.d):00276         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (       cocovtio.d):00277         *
                      (       cocovtio.d):00278         * pattern buffer numbers
                      (       cocovtio.d):00279         *
                      (       cocovtio.d):00280                        ORG       1
0001                  (       cocovtio.d):00281         Pat.Dot        RMB       1
0002                  (       cocovtio.d):00282         Pat.Vrt        RMB       1
0003                  (       cocovtio.d):00283         Pat.Hrz        RMB       1
0004                  (       cocovtio.d):00284         Pat.XHtc       RMB       1
0005                  (       cocovtio.d):00285         Pat.LSnt       RMB       1
0006                  (       cocovtio.d):00286         Pat.RSnt       RMB       1
0007                  (       cocovtio.d):00287         Pat.SDot       RMB       1
0008                  (       cocovtio.d):00288         Pat.BDot       RMB       1
                      (       cocovtio.d):00289         *
                      (       cocovtio.d):00290         * pointer buffer numbers
                      (       cocovtio.d):00291         *
                      (       cocovtio.d):00292                        ORG       1
0001                  (       cocovtio.d):00293         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (       cocovtio.d):00294         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (       cocovtio.d):00295         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (       cocovtio.d):00296         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (       cocovtio.d):00297         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (       cocovtio.d):00298         Ptr.Txt        RMB       1                   Text pointer
0007                  (       cocovtio.d):00299         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (       cocovtio.d):00300         
                      (       cocovtio.d):00301         **********************
                      (       cocovtio.d):00302         * KeyDrv Entry Points
                      (       cocovtio.d):00303                        ORG       0
0000                  (       cocovtio.d):00304         K$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00305         K$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00306         K$FnKey        RMB       3                   get function key states
0009                  (       cocovtio.d):00307         K$RdKey        RMB       3                   get key states
                      (       cocovtio.d):00308         
                      (       cocovtio.d):00309         **********************
                      (       cocovtio.d):00310         * JoyDrv Entry Points
                      (       cocovtio.d):00311                        ORG       0
0000                  (       cocovtio.d):00312         J$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00313         J$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00314         J$MsBtn        RMB       3                   get mouse button states
0009                  (       cocovtio.d):00315         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (       cocovtio.d):00316         J$JyBtn        RMB       3                   get joystick button states
000F                  (       cocovtio.d):00317         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00318         
                      (       cocovtio.d):00319         **********************
                      (       cocovtio.d):00320         * SndDrv Entry Points
                      (       cocovtio.d):00321                        ORG       0
0000                  (       cocovtio.d):00322         S$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00323         S$GetStt       RMB       3                   joystick termination
0006                  (       cocovtio.d):00324         S$SetStt       RMB       3                   joystick termination
0009                  (       cocovtio.d):00325         S$Term         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00326         
                      (       cocovtio.d):00327         ********************************
                      (       cocovtio.d):00328         * Window/Menu Bar Data Structure
                      (       cocovtio.d):00329         *
                      (       cocovtio.d):00330         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (       cocovtio.d):00331         * for use in the high level windowing package.
                      (       cocovtio.d):00332         *
     000A             (       cocovtio.d):00333         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (       cocovtio.d):00334         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (       cocovtio.d):00335         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (       cocovtio.d):00336         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (       cocovtio.d):00337         *
                      (       cocovtio.d):00338         * Menu Item Descriptor : (MN.ITEMS)
                      (       cocovtio.d):00339         * one required for each item within the menu
                      (       cocovtio.d):00340         *
                      (       cocovtio.d):00341                        ORG       0
0000                  (       cocovtio.d):00342         MI.TTL         RMB       MXTTLEN             item name
000F                  (       cocovtio.d):00343         MI.ENBL        RMB       1                   enable flag
0010                  (       cocovtio.d):00344         MI.RES         RMB       5                   reserved bytes
     0015             (       cocovtio.d):00345         MI.SIZ         EQU       .                   size of menu item descriptor
                      (       cocovtio.d):00346         *
                      (       cocovtio.d):00347         * Menu Descriptor :
                      (       cocovtio.d):00348         * one for each menu on the manu bar
                      (       cocovtio.d):00349         * each is pointed to by MB.MPTR below
                      (       cocovtio.d):00350         *
                      (       cocovtio.d):00351                        ORG       0
0000                  (       cocovtio.d):00352         MN.TTL         RMB       MXTTLEN             menu title
000F                  (       cocovtio.d):00353         MN.ID          RMB       1                   menu id number (1-255)
0010                  (       cocovtio.d):00354         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (       cocovtio.d):00355         MN.NITS        RMB       1                   number of items in menu
0012                  (       cocovtio.d):00356         MN.ENBL        RMB       1                   enable flag
0013                  (       cocovtio.d):00357         MN.RES         RMB       2                   reserved bytes
0015                  (       cocovtio.d):00358         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (       cocovtio.d):00359         MN.SIZ         EQU       .                   size of menu descriptor
                      (       cocovtio.d):00360         *
                      (       cocovtio.d):00361         * Window Descriptor:
                      (       cocovtio.d):00362         * one required for each application in a framed window
                      (       cocovtio.d):00363         *
                      (       cocovtio.d):00364                        ORG       0
0000                  (       cocovtio.d):00365         WN.TTL         RMB       20                  title of window for title bar
0014                  (       cocovtio.d):00366         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (       cocovtio.d):00367         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (       cocovtio.d):00368         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (       cocovtio.d):00369         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (       cocovtio.d):00370         WN.RES         RMB       7                   reserved bytes
0020                  (       cocovtio.d):00371         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (       cocovtio.d):00372         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (       cocovtio.d):00373         
                      (       cocovtio.d):00374         *************************
                      (       cocovtio.d):00375         * Window Type Definitions
                      (       cocovtio.d):00376         *
                      (       cocovtio.d):00377         * To be used in setting up the border of the window in
                      (       cocovtio.d):00378         * the SS.WnSel SETSTAT
                      (       cocovtio.d):00379         *
                      (       cocovtio.d):00380                        ORG       0
0000                  (       cocovtio.d):00381         WT.NBox        RMB       1                   No Box
0001                  (       cocovtio.d):00382         WT.FWin        RMB       1                   Framed Window
0002                  (       cocovtio.d):00383         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (       cocovtio.d):00384         WT.SBox        RMB       1                   Shadowed Box
0004                  (       cocovtio.d):00385         WT.DBox        RMB       1                   Double Box
0005                  (       cocovtio.d):00386         WT.PBox        RMB       1                   Plain Box
                      (       cocovtio.d):00387         
                      (       cocovtio.d):00388         *************************************
                      (       cocovtio.d):00389         * Pre-Defined Menu IDs for the system
                      (       cocovtio.d):00390         *
                      (       cocovtio.d):00391                        ORG       1
0001                  (       cocovtio.d):00392         MId.Mov        RMB       1                   move box
0002                  (       cocovtio.d):00393         MId.Cls        RMB       1                   close box
0003                  (       cocovtio.d):00394         MId.Grw        RMB       1                   grow box
0004                  (       cocovtio.d):00395         MId.SUp        RMB       1                   scroll up
0005                  (       cocovtio.d):00396         MId.SDn        RMB       1                   scroll down
0006                  (       cocovtio.d):00397         MId.SRt        RMB       1                   scroll right
0007                  (       cocovtio.d):00398         MId.SLt        RMB       1                   scroll left
0008                  (       cocovtio.d):00399         MId.Chr        RMB       1                   character was depressed
                      (       cocovtio.d):00400                        ORG       20
0014                  (       cocovtio.d):00401         MId.Tdy        RMB       1                   Tandy menu
0015                  (       cocovtio.d):00402         MId.Fil        RMB       1                   Files Menu
0016                  (       cocovtio.d):00403         MId.Edt        RMB       1                   Edit Menu
0017                  (       cocovtio.d):00404         MId.Sty        RMB       1                   Styles menu
0018                  (       cocovtio.d):00405         MId.Fnt        RMB       1                   Font menu
                      (       cocovtio.d):00406         
                      (       cocovtio.d):00407         
                      (       cocovtio.d):00408         ******************************************************************************
                      (       cocovtio.d):00409         ******************************************************************************
                      (       cocovtio.d):00410         **                                                                          **
                      (       cocovtio.d):00411         ** NitrOS-9 Windowing system Global data definitions                        **
                      (       cocovtio.d):00412         **                                                                          **
                      (       cocovtio.d):00413         ******************************************************************************
                      (       cocovtio.d):00414         ******************************************************************************
                      (       cocovtio.d):00415         **                                                                          **
                      (       cocovtio.d):00416         ** System memory block 0 layout:                                            **
                      (       cocovtio.d):00417         **                                                                          **
                      (       cocovtio.d):00418         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (       cocovtio.d):00419         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (       cocovtio.d):00420         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (       cocovtio.d):00421         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (       cocovtio.d):00422         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (       cocovtio.d):00423         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (       cocovtio.d):00424         ** $0010-$001F : unused (User definable)                                    **
                      (       cocovtio.d):00425         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (       cocovtio.d):00426         ** $0100-$011F : Task usage table                                           **
                      (       cocovtio.d):00427         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (       cocovtio.d):00428         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (       cocovtio.d):00429         ** $0300-$03FF : system's system call dispatch table                        **
                      (       cocovtio.d):00430         ** $0400-$04FF : user's system call dispatch table                          **
                      (       cocovtio.d):00431         ** $0500-$05FF : process descriptor pointer table                           **
                      (       cocovtio.d):00432         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (       cocovtio.d):00433         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (       cocovtio.d):00434         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (       cocovtio.d):00435         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (       cocovtio.d):00436         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (       cocovtio.d):00437         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (       cocovtio.d):00438         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (       cocovtio.d):00439         ** $1248-$127F : ????                                                       **
                      (       cocovtio.d):00440         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (       cocovtio.d):00441         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (       cocovtio.d):00442         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (       cocovtio.d):00443         **                                                                          **
                      (       cocovtio.d):00444         ******************************************************************************
                      (       cocovtio.d):00445         ******************************************************************************
                      (       cocovtio.d):00446         
                      (       cocovtio.d):00447         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (       cocovtio.d):00448         MaxLines       EQU       25                  Max. Y coord text value
     0000             (       cocovtio.d):00449         Meg            SET       false               "true" if 1 or 2 meg machine
                      (       cocovtio.d):00450         
     0000             (       cocovtio.d):00451         COMP           EQU       0                   composite monitor
     0001             (       cocovtio.d):00452         RGB            EQU       1                   RGB Analog monitor 
     0002             (       cocovtio.d):00453         MONO           EQU       2                   monochrome monitor
                      (       cocovtio.d):00454         
     0001             (       cocovtio.d):00455         Monitor        SET       RGB
                      (       cocovtio.d):00456         
                      (       cocovtio.d):00457         * Global definitions
     0001             (       cocovtio.d):00458         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (       cocovtio.d):00459         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (       cocovtio.d):00460         CapsLck        EQU       %00000100           Capslock enabled
     0280             (       cocovtio.d):00461         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (       cocovtio.d):00462                      IFEQ      MaxLines-25
     00C6             (       cocovtio.d):00463         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00464                      ELSE      
0019                  (       cocovtio.d):00465         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00466                      ENDC      
                      (       cocovtio.d):00467         
                      (       cocovtio.d):00468         *****************************************************************************
                      (       cocovtio.d):00469         * Static memory area for each window (VTIO/TC9IO)
                      (       cocovtio.d):00470         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (       cocovtio.d):00471         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (       cocovtio.d):00472         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (       cocovtio.d):00473         * May have to have smaller limit for text to gfx screens, as it will run much
                      (       cocovtio.d):00474         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (       cocovtio.d):00475         *
                      (       cocovtio.d):00476         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (       cocovtio.d):00477         * V.SCF is to be resolved properly in pass 1!!
                      (       cocovtio.d):00478                        ORG       V.SCF
001D                  (       cocovtio.d):00479         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (       cocovtio.d):00480         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (       cocovtio.d):00481         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (       cocovtio.d):00482         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (       cocovtio.d):00483         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (       cocovtio.d):00484         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (       cocovtio.d):00485         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (       cocovtio.d):00486         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (       cocovtio.d):00487         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (       cocovtio.d):00488         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (       cocovtio.d):00489         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (       cocovtio.d):00490         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (       cocovtio.d):00491                        RMB       1                   unused                                       $2A
002B                  (       cocovtio.d):00492         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (       cocovtio.d):00493         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (       cocovtio.d):00494         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (       cocovtio.d):00495         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (       cocovtio.d):00496         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (       cocovtio.d):00497         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (       cocovtio.d):00498         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (       cocovtio.d):00499         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (       cocovtio.d):00500         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (       cocovtio.d):00501         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (       cocovtio.d):00502         CC3Parm        RMB       128-.               global parameter area
0080                  (       cocovtio.d):00503         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (       cocovtio.d):00504         CC3DSiz        EQU       .
                      (       cocovtio.d):00505         
                      (       cocovtio.d):00506         *****************************************************************************
                      (       cocovtio.d):00507         * GrfInt/WindInt global memory area
                      (       cocovtio.d):00508         * This area sits in system block 0 from $1000 to $10ff
     1000             (       cocovtio.d):00509         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (       cocovtio.d):00510                        ORG       0
0000                  (       cocovtio.d):00511         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (       cocovtio.d):00512         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (       cocovtio.d):00513         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (       cocovtio.d):00514         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (       cocovtio.d):00515         *g0003    rmb   2          NEW: UNUSED
0005                  (       cocovtio.d):00516         g0005          RMB       2                   Temp save in Windint RG
0007                  (       cocovtio.d):00517         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (       cocovtio.d):00518         G.MonTyp       RMB       1                   monitor type
     000A             (       cocovtio.d):00519         g000A          EQU       .                   Old label for compatibility
000A                  (       cocovtio.d):00520         G.CrDvFl       RMB       1  Are we current device flag (only set when all
                      (       cocovtio.d):00521         *                           Parms have been moved to Dev Mem)
                      (       cocovtio.d):00522         *                           0=We are not on our device
                      (       cocovtio.d):00523         *                           1=We are the current device
                      (       cocovtio.d):00524         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (       cocovtio.d):00525         *                           whether or not to update GIME regs themselves
                      (       cocovtio.d):00526         *                           If not current device, they don't.)
000B                  (       cocovtio.d):00527         G.WinType      RMB       1                   current device's V.TYPE
000C                  (       cocovtio.d):00528         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (       cocovtio.d):00529         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (       cocovtio.d):00530         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (       cocovtio.d):00531         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (       cocovtio.d):00532         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (       cocovtio.d):00533         G.BelVec       RMB       2                   BELL routine vector
0019                  (       cocovtio.d):00534         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (       cocovtio.d):00535         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (       cocovtio.d):00536         G.BelTnF       RMB       1                   BELL tone flag
001D                  (       cocovtio.d):00537         g001D          RMB       3
0020                  (       cocovtio.d):00538         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (       cocovtio.d):00539         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (       cocovtio.d):00540         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (       cocovtio.d):00541         *                           00000010 : VDGInt found
                      (       cocovtio.d):00542         *                           10000000 : GrfDrv found
0025                  (       cocovtio.d):00543         g0025          RMB       1
0026                  (       cocovtio.d):00544         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (       cocovtio.d):00545         *         IFEQ  TC9-true
                      (       cocovtio.d):00546         *CurLght  rmb   1          current keyboard light settings
                      (       cocovtio.d):00547         *         ELSE  
0027                  (       cocovtio.d):00548         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (       cocovtio.d):00549         *         ENDC  
0028                  (       cocovtio.d):00550         G.LKeyCd       RMB       1                   last keyboard code
0029                  (       cocovtio.d):00551         G.KyRept       RMB       1                   key repeat counter
                      (       cocovtio.d):00552         * A secondary 3 key table (same format as g002D below)
002A                  (       cocovtio.d):00553         G.2Key1        RMB       1                   $2A
002B                  (       cocovtio.d):00554         G.2Key2        RMB       1                   $2B
002C                  (       cocovtio.d):00555         G.2Key3        RMB       1
                      (       cocovtio.d):00556         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (       cocovtio.d):00557         * than 3 are hit, the last key is overwritten with the very last key down that
                      (       cocovtio.d):00558         * was checked. Format for all three is the same as the PIA column/row byte @
                      (       cocovtio.d):00559         * KeyFlag below.
002D                  (       cocovtio.d):00560         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (       cocovtio.d):00561         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (       cocovtio.d):00562         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (       cocovtio.d):00563         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (       cocovtio.d):00564         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (       cocovtio.d):00565         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (       cocovtio.d):00566         *                           %00000111-Column # (Output, 0-7)
                      (       cocovtio.d):00567         *                           %00111000-Row # (Input, 0-6)
0033                  (       cocovtio.d):00568         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (       cocovtio.d):00569         G.KySns        RMB       1                   key sense byte
0035                  (       cocovtio.d):00570         G.KySame       RMB       1                   same key flag
0036                  (       cocovtio.d):00571         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (       cocovtio.d):00572                        RMB       1
0038                  (       cocovtio.d):00573         g0038          RMB       1                   grfdrv initialized flag
0039                  (       cocovtio.d):00574                        RMB       2
003B                  (       cocovtio.d):00575         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (       cocovtio.d):00576         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (       cocovtio.d):00577         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (       cocovtio.d):00578         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (       cocovtio.d):00579         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (       cocovtio.d):00580         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (       cocovtio.d):00581         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (       cocovtio.d):00582         *         IFEQ  TC9-true
                      (       cocovtio.d):00583         *KeyParm  rmb   1          keyboard command parameter byte
                      (       cocovtio.d):00584         *         ELSE  
0063                  (       cocovtio.d):00585         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (       cocovtio.d):00586         *         ENDC  
0064                  (       cocovtio.d):00587         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (       cocovtio.d):00588         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (       cocovtio.d):00589         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (       cocovtio.d):00590         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (       cocovtio.d):00591         G.CoTble       RMB       6                   co-module table ($68)
006E                  (       cocovtio.d):00592         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (       cocovtio.d):00593         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (       cocovtio.d):00594         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (       cocovtio.d):00595         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (       cocovtio.d):00596         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (       cocovtio.d):00597         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (       cocovtio.d):00598         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (       cocovtio.d):00599         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (       cocovtio.d):00600         g00BD          RMB       1                   Current screen type for work window table
00BE                  (       cocovtio.d):00601         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (       cocovtio.d):00602         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (       cocovtio.d):00603         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (       cocovtio.d):00604         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (       cocovtio.d):00605         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (       cocovtio.d):00606         G.MsSig        RMB       1                   mouse signal flag
00C7                  (       cocovtio.d):00607         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (       cocovtio.d):00608         g00D7          RMB       9
00E0                  (       cocovtio.d):00609         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (       cocovtio.d):00610         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (       cocovtio.d):00611         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (       cocovtio.d):00612         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (       cocovtio.d):00613         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (       cocovtio.d):00614         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (       cocovtio.d):00615         
                      (       cocovtio.d):00616         *****************************************************************************
                      (       cocovtio.d):00617         * GrfDrv global memory data definitions
                      (       cocovtio.d):00618         * This area sits in system block 0 from $1100 to $119E
     1100             (       cocovtio.d):00619         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (       cocovtio.d):00620                        ORG       0
0000                  (       cocovtio.d):00621         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (       cocovtio.d):00622         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (       cocovtio.d):00623         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (       cocovtio.d):00624         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (       cocovtio.d):00625         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (       cocovtio.d):00626         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (       cocovtio.d):00627         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (       cocovtio.d):00628         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (       cocovtio.d):00629         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (       cocovtio.d):00630         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (       cocovtio.d):00631         *                             overlay width has been copied
000B                  (       cocovtio.d):00632         gr000B         RMB       1
000C                  (       cocovtio.d):00633         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (       cocovtio.d):00634         gr000E         RMB       1
000F                  (       cocovtio.d):00635         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (       cocovtio.d):00636         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (       cocovtio.d):00637         gr0012         RMB       6
0018                  (       cocovtio.d):00638         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (       cocovtio.d):00639         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (       cocovtio.d):00640         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (       cocovtio.d):00641         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (       cocovtio.d):00642         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (       cocovtio.d):00643         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (       cocovtio.d):00644         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (       cocovtio.d):00645         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (       cocovtio.d):00646         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (       cocovtio.d):00647         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (       cocovtio.d):00648         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (       cocovtio.d):00649         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (       cocovtio.d):00650         gr002C         RMB       2
002E                  (       cocovtio.d):00651         gr002E         RMB       2                   current window table entry
0030                  (       cocovtio.d):00652         gr0030         RMB       2                   current screen table ptr
0032                  (       cocovtio.d):00653         gr0032         RMB       1                   Last block # we used for buffers
0033                  (       cocovtio.d):00654         gr0033         RMB       2                   Last offset we used for buffers
0035                  (       cocovtio.d):00655         gr0035         RMB       1                   group
0036                  (       cocovtio.d):00656         gr0036         RMB       2                   offset
0038                  (       cocovtio.d):00657         gr0038         RMB       1                   group returned (new)
0039                  (       cocovtio.d):00658         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (       cocovtio.d):00659         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (       cocovtio.d):00660         gr003B         RMB       2                   end of vars ptr?
003D                  (       cocovtio.d):00661         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (       cocovtio.d):00662         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (       cocovtio.d):00663         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (       cocovtio.d):00664         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (       cocovtio.d):00665         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (       cocovtio.d):00666         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (       cocovtio.d):00667         gr0047         RMB       2                   'Working' X coordinate
0049                  (       cocovtio.d):00668         gr0049         RMB       2                   'Working' Y coordinate
004B                  (       cocovtio.d):00669         gr004B         RMB       2                   current X
004D                  (       cocovtio.d):00670         gr004D         RMB       2                   current Y
004F                  (       cocovtio.d):00671         gr004F         RMB       2                   X Size (in bytes)
0051                  (       cocovtio.d):00672         gr0051         RMB       2                   Y Size (in bytes)
0053                  (       cocovtio.d):00673         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (       cocovtio.d):00674         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (       cocovtio.d):00675         gr0057         RMB       1                   group
0058                  (       cocovtio.d):00676         gr0058         RMB       1                   buffer #
0059                  (       cocovtio.d):00677         gr0059         RMB       1                   save switch for overlay
005A                  (       cocovtio.d):00678         gr005A         RMB       1                   PRN
005B                  (       cocovtio.d):00679         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (       cocovtio.d):00680         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (       cocovtio.d):00681         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (       cocovtio.d):00682         Gr.STYMk       RMB       1                   STY marker
0061                  (       cocovtio.d):00683         gr0061         RMB       1                   foreground RGB data
0062                  (       cocovtio.d):00684         gr0062         RMB       1                   background RGB data
0063                  (       cocovtio.d):00685         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (       cocovtio.d):00686         gr0064         RMB       2                   PSet vector
0066                  (       cocovtio.d):00687         gr0066         RMB       2                   pset offset
0068                  (       cocovtio.d):00688         gr0068         RMB       2                   LSet vector
006A                  (       cocovtio.d):00689         gr006A         RMB       2                   max X co-ordinate
006C                  (       cocovtio.d):00690         gr006C         RMB       2                   max Y co-ordinate
006E                  (       cocovtio.d):00691         gr006E         RMB       2                   X pixel count
0070                  (       cocovtio.d):00692         gr0070         RMB       2                   Y pixel count
0072                  (       cocovtio.d):00693         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (       cocovtio.d):00694         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (       cocovtio.d):00695         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (       cocovtio.d):00696         gr0077         RMB       2                   Vector for right direction FFill
0079                  (       cocovtio.d):00697         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (       cocovtio.d):00698         gr007A         RMB       2                   Vector for left direction FFill
007C                  (       cocovtio.d):00699         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (       cocovtio.d):00700         gr007D         RMB       1                   buffer block #
007E                  (       cocovtio.d):00701         gr007E         RMB       2                   buffer offset #
0080                  (       cocovtio.d):00702         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (       cocovtio.d):00703         gr0082         RMB       3                   3 byte extended screen address
0085                  (       cocovtio.d):00704         gr0085         RMB       2                   temp
0087                  (       cocovtio.d):00705         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (       cocovtio.d):00706         gr0097         RMB       1                   temp
0098                  (       cocovtio.d):00707         gr0098         RMB       1                   temp
                      (       cocovtio.d):00708         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (       cocovtio.d):00709         gr0099         RMB       2                   temp
                      (       cocovtio.d):00710         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (       cocovtio.d):00711         gr009B         RMB       1                   counter temp
009C                  (       cocovtio.d):00712         gr009C         RMB       1
009D                  (       cocovtio.d):00713         gr009D         RMB       2                   offset to buffer in block
009F                  (       cocovtio.d):00714         gr009F         RMB       1
00A0                  (       cocovtio.d):00715         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (       cocovtio.d):00716         gr00A1         RMB       2                   vector routine for (changes lots)
                      (       cocovtio.d):00717         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (       cocovtio.d):00718         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (       cocovtio.d):00719         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (       cocovtio.d):00720         gr00A7         RMB       2
00A9                  (       cocovtio.d):00721         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (       cocovtio.d):00722         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (       cocovtio.d):00723         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (       cocovtio.d):00724         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (       cocovtio.d):00725         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (       cocovtio.d):00726         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (       cocovtio.d):00727         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (       cocovtio.d):00728         gr00B3         RMB       1                   temp variable grfdrv
00B4                  (       cocovtio.d):00729         gr00B4         RMB       1                   temp variable grfdrv
00B5                  (       cocovtio.d):00730         gr00B5         RMB       1                   regW for grfdrv
00B6                  (       cocovtio.d):00731         gr00B6         RMB       1
00B7                  (       cocovtio.d):00732         gr00B7         RMB       2
00B9                  (       cocovtio.d):00733         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (       cocovtio.d):00734         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (       cocovtio.d):00735         gr00BD         RMB       2                   previously used in grfdrv at $B6
00BF                  (       cocovtio.d):00736         gr00BF         RMB       256-.
                      (       cocovtio.d):00737         * GPLoad buffer - $1200 in system block 0
0100                  (       cocovtio.d):00738         GPBuf          RMB       72                  common move buffer for gpload/get/put
     0048             (       cocovtio.d):00739         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (       cocovtio.d):00740         
                      (       cocovtio.d):00741         *****************************************************************************
                      (       cocovtio.d):00742         * Window table entry structure
                      (       cocovtio.d):00743         * These tables sit in system block 0 and there is 1 for every window init'd
                      (       cocovtio.d):00744         * including any overlay windows.
     0020             (       cocovtio.d):00745         MaxWind        EQU       32                  maximum allowable window tables
     1290             (       cocovtio.d):00746         WinBase        EQU       $1290               base address to start of window tables
                      (       cocovtio.d):00747                        ORG       -$10
FFF0                  (       cocovtio.d):00748         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (       cocovtio.d):00749         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (       cocovtio.d):00750         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (       cocovtio.d):00751         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (       cocovtio.d):00752         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (       cocovtio.d):00753         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (       cocovtio.d):00754         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (       cocovtio.d):00755         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (       cocovtio.d):00756         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (       cocovtio.d):00757         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (       cocovtio.d):00758         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (       cocovtio.d):00759         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (       cocovtio.d):00760         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (       cocovtio.d):00761         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (       cocovtio.d):00762         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (       cocovtio.d):00763         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (       cocovtio.d):00764         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (       cocovtio.d):00765         Wt.Back        RMB       1                   background palette #                         $07
0008                  (       cocovtio.d):00766         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (       cocovtio.d):00767         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (       cocovtio.d):00768         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (       cocovtio.d):00769         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (       cocovtio.d):00770         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (       cocovtio.d):00771         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (       cocovtio.d):00772         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (       cocovtio.d):00773         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (       cocovtio.d):00774         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (       cocovtio.d):00775         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (       cocovtio.d):00776         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (       cocovtio.d):00777         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (       cocovtio.d):00778         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (       cocovtio.d):00779         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (       cocovtio.d):00780         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24,0-191)                 $1D
001F                  (       cocovtio.d):00781         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (       cocovtio.d):00782         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (       cocovtio.d):00783         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (       cocovtio.d):00784         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (       cocovtio.d):00785         * NOTE: The following default settings are what the window was initialized
                      (       cocovtio.d):00786         *       with, and thus are the MAXIMUM start/size the window can handle
                      (       cocovtio.d):00787         *       until it is restarted (DWEnd & DWSet)
                      (       cocovtio.d):00788         *       They also appear to be used in WindInt to determine the coords &
                      (       cocovtio.d):00789         *       sizes for control+content regions
0026                  (       cocovtio.d):00790         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (       cocovtio.d):00791         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (       cocovtio.d):00792         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (       cocovtio.d):00793         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (       cocovtio.d):00794         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (       cocovtio.d):00795         Wt.Siz         EQU       .+$10
                      (       cocovtio.d):00796         
                      (       cocovtio.d):00797         *****************************************************************************
                      (       cocovtio.d):00798         * Screen table entrys
                      (       cocovtio.d):00799         * These tables sit in system block 0 base=$1A80
                      (       cocovtio.d):00800         
     0010             (       cocovtio.d):00801         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (       cocovtio.d):00802         STblBse        EQU       $1A80               base address of screen tables
                      (       cocovtio.d):00803                        ORG       0
0000                  (       cocovtio.d):00804         St.Sty         RMB       1                   Screen type                         $00
0001                  (       cocovtio.d):00805         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (       cocovtio.d):00806         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (       cocovtio.d):00807         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (       cocovtio.d):00808         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (       cocovtio.d):00809         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (       cocovtio.d):00810         St.Back        RMB       1                   Background palette register #       $07
0008                  (       cocovtio.d):00811         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (       cocovtio.d):00812         St.Res         RMB       7                   UNUSED???                           $09
                      (       cocovtio.d):00813         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (       cocovtio.d):00814         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (       cocovtio.d):00815         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (       cocovtio.d):00816         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
0010                  (       cocovtio.d):00817         St.Pals        RMB       16                  Palette register contents           $10
     0020             (       cocovtio.d):00818         St.Siz         EQU       .
                      (       cocovtio.d):00819         
                      (       cocovtio.d):00820         *****************************************************************************
                      (       cocovtio.d):00821         * Graphics buffer tables
                      (       cocovtio.d):00822         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (       cocovtio.d):00823         * data.
                      (       cocovtio.d):00824                        ORG       0
0000                  (       cocovtio.d):00825         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (       cocovtio.d):00826         Grf.Off        RMB       2                   back block header offset            $01
0003                  (       cocovtio.d):00827         Grf.Grp        RMB       1                   group #                             $03
0004                  (       cocovtio.d):00828         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (       cocovtio.d):00829         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (       cocovtio.d):00830         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (       cocovtio.d):00831         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (       cocovtio.d):00832         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (       cocovtio.d):00833         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (       cocovtio.d):00834         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (       cocovtio.d):00835         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (       cocovtio.d):00836         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (       cocovtio.d):00837         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (       cocovtio.d):00838         Grf.Siz        EQU       .                   $20
                      (       cocovtio.d):00839         
                      (       cocovtio.d):00840         *****************************************************************************
                      (       cocovtio.d):00841         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (       cocovtio.d):00842         * $1075-$0176
                      (       cocovtio.d):00843         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (       cocovtio.d):00844                        ORG       0
0000                  (       cocovtio.d):00845         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (       cocovtio.d):00846         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (       cocovtio.d):00847         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (       cocovtio.d):00848         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (       cocovtio.d):00849         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (       cocovtio.d):00850         Gt.BClr        RMB       1                   Background color                               $08
0009                  (       cocovtio.d):00851         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (       cocovtio.d):00852         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (       cocovtio.d):00853         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (       cocovtio.d):00854         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (       cocovtio.d):00855         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (       cocovtio.d):00856         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (       cocovtio.d):00857         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (       cocovtio.d):00858         GTabSz         EQU       .
                      (       cocovtio.d):00859         
                      (       cocovtio.d):00860         *****************************************************************************
                      (       cocovtio.d):00861         * This table is located in the graphics table memory and is offset from
                      (       cocovtio.d):00862         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (       cocovtio.d):00863         * WindInt.
                      (       cocovtio.d):00864         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (       cocovtio.d):00865         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (       cocovtio.d):00866         *  COMBINATION EVERY TIME
                      (       cocovtio.d):00867                        ORG       $0240
0240                  (       cocovtio.d):00868                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (       cocovtio.d):00869                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (       cocovtio.d):00870                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (       cocovtio.d):00871                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (       cocovtio.d):00872         
                      (       cocovtio.d):00873         *****************************************************************************
                      (       cocovtio.d):00874         * WindInt menu handling table entry definition
                      (       cocovtio.d):00875                        ORG       0
0000                  (       cocovtio.d):00876         MnuXNum        RMB       1                   menu #
0001                  (       cocovtio.d):00877         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (       cocovtio.d):00878         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (       cocovtio.d):00879                        RMB       1                   unused?
     0004             (       cocovtio.d):00880         MnuHSiz        EQU       .
                      (       cocovtio.d):00881         
                      (       cocovtio.d):00882         *****************************************************************************
                      (       cocovtio.d):00883         * Character binary switches
     0080             (       cocovtio.d):00884         TChr           EQU       %10000000           transparent characters
     0040             (       cocovtio.d):00885         Under          EQU       %01000000           underline characters
     0020             (       cocovtio.d):00886         Bold           EQU       %00100000           bold characters
     0010             (       cocovtio.d):00887         Prop           EQU       %00010000           proportional spacing of characters
     0008             (       cocovtio.d):00888         Scale          EQU       %00001000           automatic window scaling
     0004             (       cocovtio.d):00889         Invers         EQU       %00000100           inverse characters
     0002             (       cocovtio.d):00890         NoCurs         EQU       %00000010           no cursor display
     0001             (       cocovtio.d):00891         Protect        EQU       %00000001           device window protection
                      (       cocovtio.d):00892         
                      (       cocovtio.d):00893         *****************************************************************************
                      (       cocovtio.d):00894         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (       cocovtio.d):00895         Current        EQU       $ff                 Current screen
                      (       cocovtio.d):00896         *         equ   1          640x200x2
                      (       cocovtio.d):00897         *         equ   2          320x200x4
                      (       cocovtio.d):00898         *         equ   3          640x200x4
                      (       cocovtio.d):00899         *         equ   4          320x200x16
                      (       cocovtio.d):00900         *         equ   $85        80 column text
                      (       cocovtio.d):00901         *         equ   $86        40 column text
                      (       cocovtio.d):00902         
                      (       cocovtio.d):00903         *************************************
                      (       cocovtio.d):00904         * Window default palette color codes
                      (       cocovtio.d):00905         *
                      (       cocovtio.d):00906                        ORG       0
0000                  (       cocovtio.d):00907         White.         RMB       1
0001                  (       cocovtio.d):00908         Blue.          RMB       1
0002                  (       cocovtio.d):00909         Black.         RMB       1
0003                  (       cocovtio.d):00910         Green.         RMB       1
0004                  (       cocovtio.d):00911         Red.           RMB       1
0005                  (       cocovtio.d):00912         Yellow.        RMB       1
0006                  (       cocovtio.d):00913         Magenta.       RMB       1
0007                  (       cocovtio.d):00914         Cyan.          RMB       1
                      (       cocovtio.d):00915         
                      (       cocovtio.d):00916                        ENDC      
                      (       cocovtio.d):00917                        ENDC      
                      (/home/strick/go/s):00076                  ENDC
                      (/home/strick/go/s):00077         
     0000             (/home/strick/go/s):00078         TC9      set    false       "true" use TC-9 6309 trap vector
     0013             (/home/strick/go/s):00079         Edition  equ    19
     0000             (/home/strick/go/s):00080         Revision equ    0
                      (/home/strick/go/s):00081         
0000 87CD0D41000DC080 (/home/strick/go/s):00082                  mod    eom,MName,Systm,ReEnt+Revision,krnp2,$0100
     B400130100
                      (/home/strick/go/s):00083         
000D 4B726E50B2       (/home/strick/go/s):00084         MName    fcs    /KrnP2/
0012 13               (/home/strick/go/s):00085                  fcb    Edition
                      (/home/strick/go/s):00086         
                      (/home/strick/go/s):00087                  IFEQ   TC9-1
                      (/home/strick/go/s):00088         * Entry: None
                      (/home/strick/go/s):00089         * Exit : Process killed & register dump produced for user
0013                  (/home/strick/go/s):00090         Trap     bitmd  #%01000000  illegal instruction?
                      (/home/strick/go/s):00091                  bne    BadIns      yes, go process
                      (/home/strick/go/s):00092                  bitmd  #%10000000  division by 0?
                      (/home/strick/go/s):00093                  bne    Div0        yes, go process
                      (/home/strick/go/s):00094                  jmp    [<D.XSWI]   act as if nothing happened
                      (/home/strick/go/s):00095         
                      (/home/strick/go/s):00096         * Process illegal instruction trap
0013                  (/home/strick/go/s):00097         BadIns   bsr    SetProc     move the register stack here
                      (/home/strick/go/s):00098         
                      (/home/strick/go/s):00099         
                      (/home/strick/go/s):00100         
                      (/home/strick/go/s):00101         
                      (/home/strick/go/s):00102         
                      (/home/strick/go/s):00103                  ldb    #18         get error code for F$Exit
                      (/home/strick/go/s):00104                  bra    TrapDone
                      (/home/strick/go/s):00105         * Process division by 0 trap
0013                  (/home/strick/go/s):00106         Div0     bsr    SetProc     move the register stack
                      (/home/strick/go/s):00107         
                      (/home/strick/go/s):00108         
                      (/home/strick/go/s):00109         
                      (/home/strick/go/s):00110         
                      (/home/strick/go/s):00111                  ldb    #45         get error code for F$Exit
                      (/home/strick/go/s):00112         
                      (/home/strick/go/s):00113         * Return to system after the trap
                      (/home/strick/go/s):00114         * Entry: B=Error code
                      (/home/strick/go/s):00115         *        U=Pointer to register stack
0013                  (/home/strick/go/s):00116         TrapDone stb    R$B,u       save the error code to register stack for F$Exit
                      (/home/strick/go/s):00117                  lbra   FExit       enter F$Exit directly
                      (/home/strick/go/s):00118         
                      (/home/strick/go/s):00119         * Set process to system state & copy register stack for trap processing
0013                  (/home/strick/go/s):00120         SetProc  ldd    <D.SysSvc   set system call processor to system side
                      (/home/strick/go/s):00121                  std    <D.XSWI2
                      (/home/strick/go/s):00122                  ldd    <D.SysIRQ   do the same thing for IRQ's
                      (/home/strick/go/s):00123                  std    <D.XIRQ
                      (/home/strick/go/s):00124                  ldx    <D.Proc     get current process pointer
                      (/home/strick/go/s):00125                  IFNE   H6309
                      (/home/strick/go/s):00126                  oim    #SysState,P$State,x   mark process as system state
                      (/home/strick/go/s):00127                  ELSE
                      (/home/strick/go/s):00128                  ldb    P$State,x
                      (/home/strick/go/s):00129                  orb    #SysState
                      (/home/strick/go/s):00130                  stb    P$State,x
                      (/home/strick/go/s):00131                  ENDC
                      (/home/strick/go/s):00132         * copy register stack to process descriptor
                      (/home/strick/go/s):00133                  sts    P$SP,x      save stack pointer
                      (/home/strick/go/s):00134                  leas   (P$Stack-R$Size),x point S to register stack destination
                      (/home/strick/go/s):00135                  andcc  #^IntMasks  force interrupts back on
                      (/home/strick/go/s):00136                  leau   ,s          point to destination register stack
                      (/home/strick/go/s):00137                  ldb    P$Task,x    get task # of destination
                      (/home/strick/go/s):00138                  ldx    P$SP,x      get the user/system stack pointer
                      (/home/strick/go/s):00139                  pshs   b           preserve task for a moment
                      (/home/strick/go/s):00140                  tfr    x,d         copy it for easier calcs
                      (/home/strick/go/s):00141                  bita   #%11100000  offset above block 0?
                      (/home/strick/go/s):00142                  beq    done        yes, no calc needed get out
                      (/home/strick/go/s):00143                  anda   #%00011111  make it a offset within a block
                      (/home/strick/go/s):00144                  tfr    d,x         copy new offset
                      (/home/strick/go/s):00145                  lsra               make A an offset into DAT image
                      (/home/strick/go/s):00146                  lsra
                      (/home/strick/go/s):00147                  lsra
                      (/home/strick/go/s):00148                  lsra
0013                  (/home/strick/go/s):00149         done     puls   b           restore task #
                      (/home/strick/go/s):00150                  leax   -$6000,x    make it a pointer to where I'll map the block
                      (/home/strick/go/s):00151                  tfr    u,y
                      (/home/strick/go/s):00152                  pshs   cc,u        preserve IRQ status & dest pointer
                      (/home/strick/go/s):00153                  ldu    <D.TskIPt
                      (/home/strick/go/s):00154                  lslb               adjust task # to fit table
                      (/home/strick/go/s):00155                  ldu    b,u         get the DAT image pointer
                      (/home/strick/go/s):00156                  leau   a,u         point to the blocks needed
                      (/home/strick/go/s):00157                  lda    1,u         get 1st block
                      (/home/strick/go/s):00158                  ldb    3,u         get a second in case of overlap
                      (/home/strick/go/s):00159                  orcc   #IntMasks   shut IRQ's down
                      (/home/strick/go/s):00160                  std    >DAT.Regs+5 map in the blocks
                      (/home/strick/go/s):00161                  IFNE   H6309
                      (/home/strick/go/s):00162                  ldw    #R$Size     get size of register stack
                      (/home/strick/go/s):00163                  tfm    x+,y+       move 'em to process descriptor
                      (/home/strick/go/s):00164                  ELSE
                      (/home/strick/go/s):00165                  ldb    #R$Size
0013                  (/home/strick/go/s):00166         Uday     lda    ,x+
                      (/home/strick/go/s):00167                  sta    ,y+
                      (/home/strick/go/s):00168                  decb
                      (/home/strick/go/s):00169                  bne    Uday
                      (/home/strick/go/s):00170                  ENDC
                      (/home/strick/go/s):00171                  ldx    <D.SysDAT   get the system DAT image pointer
                      (/home/strick/go/s):00172                  lda    $0B,x       get the original blocks
                      (/home/strick/go/s):00173                  ldb    $0D,x
                      (/home/strick/go/s):00174                  std    >DAT.Regs+5 map 'em back in
                      (/home/strick/go/s):00175                  puls   cc,u,pc     restore IRQ's, register stack pointer & return
                      (/home/strick/go/s):00176              ENDC
                      (/home/strick/go/s):00177         
0013 8632             (/home/strick/go/s):00178         krnp2    lda   #'2          debug: signal that we made it into krnp2
0015 9D5E             (/home/strick/go/s):00179                  jsr   <D.BtBug
                      (/home/strick/go/s):00180         
0017 318C74           (/home/strick/go/s):00181                  leay   SvcTab,pc   install system calls
001A 103F32           (/home/strick/go/s):00182                  os9    F$SSvc
                      (/home/strick/go/s):00183              IFEQ  TC9-1
                      (/home/strick/go/s):00184                  leax   Trap,pc
                      (/home/strick/go/s):00185                  stx    <D.SWI
                      (/home/strick/go/s):00186              ENDC
                      (/home/strick/go/s):00187         * Change to default directory
001D DE24             (/home/strick/go/s):00188         L003A    ldu    <D.Init     get init module pointer
001F ECC810           (/home/strick/go/s):00189                  ldd    SysStr,u    get pointer to system device name (usually '/DD')
0022 2712             (/home/strick/go/s):00190                  beq    L004F       don't exist, open std device
0024 30CB             (/home/strick/go/s):00191                  leax   d,u         point to name
                      (/home/strick/go/s):00192         
0026 8678             (/home/strick/go/s):00193                  lda   #'x          debug: signal that we tried chd'ing
0028 9D5E             (/home/strick/go/s):00194                  jsr   <D.BtBug
                      (/home/strick/go/s):00195         
002A 8605             (/home/strick/go/s):00196                  lda    #(EXEC.+READ.) get file mode
002C 103F86           (/home/strick/go/s):00197                  os9    I$ChgDir    change to it
002F 2405             (/home/strick/go/s):00198                  bcc    L004F       went ok, go on
0031 103F35           (/home/strick/go/s):00199                  os9    F$Boot      try & load boot file
0034 24E7             (/home/strick/go/s):00200                  bcc    L003A       go try again
0036 DE24             (/home/strick/go/s):00201         L004F    ldu    <D.Init     get init module pointer
0038 ECC812           (/home/strick/go/s):00202                  ldd    <StdStr,u   point to default device (usually '/Term')
003B 2725             (/home/strick/go/s):00203                  beq    L0077       don't exist go do OS9P3
003D 30CB             (/home/strick/go/s):00204                  leax   d,u         point to it
                      (/home/strick/go/s):00205         
003F 866F             (/home/strick/go/s):00206                  lda   #'o          debug: signal that we tried opening output window
0041 9D5E             (/home/strick/go/s):00207                  jsr   <D.BtBug
                      (/home/strick/go/s):00208         
0043 8603             (/home/strick/go/s):00209                  lda    #UPDAT.     get file mode
0045 103F84           (/home/strick/go/s):00210                  os9    I$Open      open path to it
0048 2407             (/home/strick/go/s):00211                  bcc    L0066       went ok, save path #
                      (/home/strick/go/s):00212         *         os9    F$Boot      try & re-boot
004A 12               (/home/strick/go/s):00213          nop
004B 12               (/home/strick/go/s):00214          nop
004C 12               (/home/strick/go/s):00215          nop
                      (/home/strick/go/s):00216         *         bcc    L004F       go try again
004D 12               (/home/strick/go/s):00217          nop
004E 12               (/home/strick/go/s):00218          nop
004F 203B             (/home/strick/go/s):00219                  bra    L009B       crash machine
0051 9E50             (/home/strick/go/s):00220         L0066    ldx    <D.Proc     get current process pointer
0053 A78830           (/home/strick/go/s):00221                  sta    <P$Path,x   save stdin path
0056 103F82           (/home/strick/go/s):00222                  os9    I$Dup       dupe it
0059 A78831           (/home/strick/go/s):00223                  sta    <P$Path+1,x save stdout path
005C 103F82           (/home/strick/go/s):00224                  os9    I$Dup       dupe it again
005F A78832           (/home/strick/go/s):00225                  sta    <P$Path+2,x save stderr path
0062 308C22           (/home/strick/go/s):00226         L0077    leax   <L0096,pc   point to 'krnp3'
0065 86C0             (/home/strick/go/s):00227                  lda    #Systm      get type
0067 103F00           (/home/strick/go/s):00228                  os9    F$Link      try to link
006A 2502             (/home/strick/go/s):00229                  bcs    L0083       not there, go on
006C ADA4             (/home/strick/go/s):00230                  jsr    ,y          execute it
                      (/home/strick/go/s):00231         * Execute module listed in Init module
006E DE24             (/home/strick/go/s):00232         L0083    ldu    <D.Init     get init module pointer
0070 EC4E             (/home/strick/go/s):00233                  ldd    InitStr,u   get offset to name of first module
0072 30CB             (/home/strick/go/s):00234                  leax   d,u         point to it
                      (/home/strick/go/s):00235         
0074 8643             (/home/strick/go/s):00236                  lda   #'C          debug: signal that we tried to go to SysGo
0076 9D5E             (/home/strick/go/s):00237                  jsr   <D.BtBug
                      (/home/strick/go/s):00238         
0078 8601             (/home/strick/go/s):00239                  lda    #Objct      get module type
007A 5F               (/home/strick/go/s):00240                  clrb               get mem size
                      (/home/strick/go/s):00241                  IFNE   H6309
                      (/home/strick/go/s):00242                  tfr    0,y         Get parameter size
                      (/home/strick/go/s):00243                  ELSE
007B 108E0000         (/home/strick/go/s):00244                  ldy    #$0000
                      (/home/strick/go/s):00245                  ENDC
007F 103F03           (/home/strick/go/s):00246                  os9    F$Fork      fork it
0082 2508             (/home/strick/go/s):00247                  bcs    L009B       if error, crash the system
0084 103F2D           (/home/strick/go/s):00248         L0093    os9    F$NProc     let it take over
                      (/home/strick/go/s):00249         
0087 6B726E70B3       (/home/strick/go/s):00250         L0096    fcs    /krnp3/
                      (/home/strick/go/s):00251         
008C 0E6B             (/home/strick/go/s):00252         L009B    jmp    <D.Crash
                      (/home/strick/go/s):00253         
008E 02               (/home/strick/go/s):00254         svctab   fcb    F$UnLink
008F 00B4             (/home/strick/go/s):00255                  fdb    FUnLink-*-2
0091 39               (/home/strick/go/s):00256                  fcb    F$AllRAM
0092 070C             (/home/strick/go/s):00257                  fdb    FAllRAM-*-2
0094 D3               (/home/strick/go/s):00258                  fcb    F$AlHRAM+SysState
0095 0737             (/home/strick/go/s):00259                  fdb    FAlHRAM-*-2
0097 03               (/home/strick/go/s):00260                  fcb    F$Fork
0098 01A4             (/home/strick/go/s):00261                  fdb    FFork-*-2
009A 04               (/home/strick/go/s):00262                  fcb    F$Wait
009B 0291             (/home/strick/go/s):00263                  fdb    FWait-*-2
009D 05               (/home/strick/go/s):00264                  fcb    F$Chain
009E 0307             (/home/strick/go/s):00265                  fdb    FChain-*-2
00A0 06               (/home/strick/go/s):00266                  fcb    F$Exit
00A1 049A             (/home/strick/go/s):00267                  fdb    FExit-*-2
00A3 07               (/home/strick/go/s):00268                  fcb    F$Mem
00A4 0532             (/home/strick/go/s):00269                  fdb    FMem-*-2
00A6 08               (/home/strick/go/s):00270                  fcb    F$Send
00A7 058F             (/home/strick/go/s):00271                  fdb    FSend-*-2
00A9 09               (/home/strick/go/s):00272                  fcb    F$Icpt
00AA 0641             (/home/strick/go/s):00273                  fdb    FIcpt-*-2
00AC 0A               (/home/strick/go/s):00274                  fcb    F$Sleep
00AD 064C             (/home/strick/go/s):00275                  fdb    FSleep-*-2
00AF 0D               (/home/strick/go/s):00276                  fcb    F$SPrior
00B0 0733             (/home/strick/go/s):00277                  fdb    FSPrior-*-2
00B2 0C               (/home/strick/go/s):00278                  fcb    F$ID
00B3 074C             (/home/strick/go/s):00279                  fdb    FID-*-2
00B5 0E               (/home/strick/go/s):00280                  fcb    F$SSWI
00B6 07D8             (/home/strick/go/s):00281                  fdb    FSSWI-*-2
00B8 16               (/home/strick/go/s):00282                  fcb    F$STime
00B9 07EA             (/home/strick/go/s):00283                  fdb    FSTime-*-2
00BB 12               (/home/strick/go/s):00284                  fcb    F$SchBit
00BC 08E3             (/home/strick/go/s):00285                  fdb    FSchBit-*-2
00BE 92               (/home/strick/go/s):00286                  fcb    F$SchBit+SysState
00BF 08ED             (/home/strick/go/s):00287                  fdb    FSSchBit-*-2
00C1 13               (/home/strick/go/s):00288                  fcb    F$AllBit
00C2 0812             (/home/strick/go/s):00289                  fdb    FAllBit-*-2
00C4 93               (/home/strick/go/s):00290                  fcb    F$AllBit+SysState
00C5 081C             (/home/strick/go/s):00291                  fdb    FSAllBit-*-2
00C7 14               (/home/strick/go/s):00292                  fcb    F$DelBit
00C8 0880             (/home/strick/go/s):00293                  fdb    FDelBit-*-2
00CA 94               (/home/strick/go/s):00294                  fcb    F$DelBit+SysState
00CB 088A             (/home/strick/go/s):00295                  fdb    FSDelBit-*-2
00CD 18               (/home/strick/go/s):00296                  fcb    F$GPrDsc
00CE 0939             (/home/strick/go/s):00297                  fdb    FGPrDsc-*-2
00D0 19               (/home/strick/go/s):00298                  fcb    F$GBlkMp
00D1 094F             (/home/strick/go/s):00299                  fdb    FGBlkMp-*-2
00D3 1A               (/home/strick/go/s):00300                  fcb    F$GModDr
00D4 0967             (/home/strick/go/s):00301                  fdb    FGModDr-*-2
                      (/home/strick/go/s):00302                  IFEQ   H6309
00D6 1B               (/home/strick/go/s):00303                  fcb    F$CpyMem
00D7 0734             (/home/strick/go/s):00304                  fdb    FCpyMem-*-2
00D9 51               (/home/strick/go/s):00305                  fcb    F$DelRAM
00DA 078C             (/home/strick/go/s):00306                  fdb    FDelRAM-*-2
                      (/home/strick/go/s):00307                  ENDC
00DC 1C               (/home/strick/go/s):00308                  fcb    F$SUser      Added back here for room in OS9p1
00DD 097C             (/home/strick/go/s):00309                  fdb    FSUser-*-2
00DF 1D               (/home/strick/go/s):00310                  fcb    F$UnLoad
00E0 0981             (/home/strick/go/s):00311                  fdb    FUnLoad-*-2
00E2 AF               (/home/strick/go/s):00312                  fcb    F$Find64+$80
00E3 09CA             (/home/strick/go/s):00313                  fdb    FFind64-*-2
00E5 B0               (/home/strick/go/s):00314                  fcb    F$All64+$80
00E6 09E1             (/home/strick/go/s):00315                  fdb    FAll64-*-2
00E8 B1               (/home/strick/go/s):00316                  fcb    F$Ret64+$80
00E9 0A61             (/home/strick/go/s):00317                  fdb    FRet64-*-2
00EB B7               (/home/strick/go/s):00318                  fcb    F$GProcP+$80
00EC 0A8E             (/home/strick/go/s):00319                  fdb    FGProcP-*-2
00EE BB               (/home/strick/go/s):00320                  fcb    F$DelImg+$80
00EF 0AAD             (/home/strick/go/s):00321                  fdb    FDelImg-*-2
00F1 CB               (/home/strick/go/s):00322                  fcb    F$AllPrc+$80
00F2 01E4             (/home/strick/go/s):00323                  fdb    FAllPrc-*-2
00F4 CC               (/home/strick/go/s):00324                  fcb    F$DelPrc+$80
00F5 0233             (/home/strick/go/s):00325                  fdb    FDelPrc-*-2
00F7 4F               (/home/strick/go/s):00326                  fcb    F$MapBlk
00F8 0AD2             (/home/strick/go/s):00327                  fdb    FMapBlk-*-2
00FA 50               (/home/strick/go/s):00328                  fcb    F$ClrBlk
00FB 0B0A             (/home/strick/go/s):00329                  fdb    FClrBlk-*-2
00FD D2               (/home/strick/go/s):00330                  fcb    F$GCMDir+$80
00FE 0B44             (/home/strick/go/s):00331                  fdb    FGCMDir-*-2
0100 23               (/home/strick/go/s):00332                  fcb    F$Debug
0101 0BD7             (/home/strick/go/s):00333                  fdb    FDebug-*-2
0103 55               (/home/strick/go/s):00334                  fcb    F$CRCMod    new system call to change module CRC calcs on/off
0104 0004             (/home/strick/go/s):00335                  fdb    FCRCMod-*-2
0106 7F               (/home/strick/go/s):00336                  fcb    $7f
0107 0013             (/home/strick/go/s):00337                  fdb    GetIOMan-*-2
0109 80               (/home/strick/go/s):00338                  fcb    $80
                      (/home/strick/go/s):00339         
                      (/home/strick/go/s):00340                  use    fcrcmod.asm
                      (      fcrcmod.asm):00001         **************************************************
                      (      fcrcmod.asm):00002         * System Call: F$CRCMod
                      (      fcrcmod.asm):00003         *
                      (      fcrcmod.asm):00004         * Function: Changes CRC module reporting
                      (      fcrcmod.asm):00005         *
                      (      fcrcmod.asm):00006         * Input:  A = Flag (0 = report, 1 = CRC off, 2 = CRC on)
                      (      fcrcmod.asm):00007         *
                      (      fcrcmod.asm):00008         * Output: A = State (0 = CRC off, 1 = CRC on)
                      (      fcrcmod.asm):00009         *
                      (      fcrcmod.asm):00010         * Error:  CC = C bit set; B = error code
                      (      fcrcmod.asm):00011         *
010A A641             (      fcrcmod.asm):00012         FCRCMod  lda    R$A,u       do they want a report or a toggle?
010C 2708             (      fcrcmod.asm):00013                  beq    CRCRep      a report only
010E 4A               (      fcrcmod.asm):00014                  deca               check for OFF
010F 2601             (      fcrcmod.asm):00015                  bne    GoCRCon     no, must be on
0111 8C               (      fcrcmod.asm):00016                  fcb   $8C          skip 2 bytes, saves 3 bytes of memory
0112 8601             (      fcrcmod.asm):00017         GoCRCon  lda    #$1         CRC checking on
0114 973B             (      fcrcmod.asm):00018                  sta    <D.CRC      turn CRC checking on
0116 963B             (      fcrcmod.asm):00019         CRCRep   lda    <D.CRC      get current CRC flag for return
0118 A741             (      fcrcmod.asm):00020         CRCRep2  sta    R$A,u       save it to their register stack
011A 5F               (      fcrcmod.asm):00021                  clrb               no error
011B 39               (      fcrcmod.asm):00022                  rts                and exit
                      (/home/strick/go/s):00341         
                      (/home/strick/go/s):00342         * Link & execute IOMan
                      (/home/strick/go/s):00343         * Entry: None
                      (/home/strick/go/s):00344         * Exit : I/O handling installed & ready for use
011C 3476             (/home/strick/go/s):00345         GetIOMan pshs   d,x,y,u     preserve regs
011E 8D17             (/home/strick/go/s):00346                  bsr    LnkIOMan    link to ioman
0120 2409             (/home/strick/go/s):00347                  bcc    GotIOMan    no errors, go on
0122 103F35           (/home/strick/go/s):00348                  os9    F$Boot      re-load boot file
0125 250C             (/home/strick/go/s):00349                  bcs    IOManErr    error loading, return
0127 8D0E             (/home/strick/go/s):00350                  bsr    LnkIOMan    link to ioman
0129 2508             (/home/strick/go/s):00351                  bcs    IOManErr    error, save it & return
012B ADA4             (/home/strick/go/s):00352         GotIOMan jsr    ,y          execute IOMan's init routine
012D 3576             (/home/strick/go/s):00353                  puls   d,x,y,u     restore registers
012F 6EB900FE         (/home/strick/go/s):00354                  jmp    [IOEntry,y] Execute I/O vector
                      (/home/strick/go/s):00355         
0133 E761             (/home/strick/go/s):00356         IOManErr stb    1,s         save error if any
0135 35F6             (/home/strick/go/s):00357                  puls   d,x,y,u,pc  restore & return
                      (/home/strick/go/s):00358         
                      (/home/strick/go/s):00359         * Link to IOMan
                      (/home/strick/go/s):00360         * Entry: None
                      (/home/strick/go/s):00361         * Exit : U=Pointer to IOMan module header
                      (/home/strick/go/s):00362         *        Y=Pointer to IOMan entry point
0137 308C06           (/home/strick/go/s):00363         LnkIOMan leax   <IOMan,pc   point to name
013A 86C1             (/home/strick/go/s):00364                  lda    #(Systm+Objct) get type
013C 103F00           (/home/strick/go/s):00365                  os9    F$Link      link it
013F 39               (/home/strick/go/s):00366                  rts                return
                      (/home/strick/go/s):00367         
0140 494F4D61EE       (/home/strick/go/s):00368         IOMan    fcs    /IOMan/
                      (/home/strick/go/s):00369         
                      (/home/strick/go/s):00370                  use    funlink.asm
                      (      funlink.asm):00001         **************************************************
                      (      funlink.asm):00002         * System Call: F$UnLink
                      (      funlink.asm):00003         *
                      (      funlink.asm):00004         * Function: Unlink a module
                      (      funlink.asm):00005         *
                      (      funlink.asm):00006         * Input:  U = Address of module header
                      (      funlink.asm):00007         *
                      (      funlink.asm):00008         * Output: None
                      (      funlink.asm):00009         *
                      (      funlink.asm):00010         * Error:  CC = C bit set; B = error code
                      (      funlink.asm):00011         *
0145 3446             (      funlink.asm):00012         FUnLink  pshs   d,u         preserve register stack pointer and make a buffer
0147 EC48             (      funlink.asm):00013                  ldd    R$U,u       get pointer to module header
0149 1F01             (      funlink.asm):00014                  tfr    d,x         copy it to X
014B 44               (      funlink.asm):00015                  lsra               divide MSB by 32 to get DAT block offset
014C 44               (      funlink.asm):00016                  lsra
014D 44               (      funlink.asm):00017                  lsra
014E 44               (      funlink.asm):00018                  lsra
014F 44               (      funlink.asm):00019                  lsra
0150 A7E4             (      funlink.asm):00020                  sta    ,s          save DAT block offset
0152 10270089         (      funlink.asm):00021                  lbeq   L01D0       zero, can't use so exit
0156 DE50             (      funlink.asm):00022                  ldu    <D.Proc     get pointer to current process
0158 31C840           (      funlink.asm):00023                  leay   P$DATImg,u  point Y to it's DAT image
015B 48               (      funlink.asm):00024                  lsla               account for 2 bytes/entry
015C ECA6             (      funlink.asm):00025                  ldd    a,y         get block #
015E DE40             (      funlink.asm):00026                  ldu    <D.BlkMap   get pointer to system block map
                      (      funlink.asm):00027                  IFNE   H6309
                      (      funlink.asm):00028                  tim    #ModBlock,d,u   Is memory block a module type?
                      (      funlink.asm):00029                  ELSE
0160 E6CB             (      funlink.asm):00030                  ldb    d,u
0162 C502             (      funlink.asm):00031                  bitb   #ModBlock
                      (      funlink.asm):00032                  ENDC
0164 2779             (      funlink.asm):00033                  beq    L01D0       no, exit without error
0166 33A840           (      funlink.asm):00034                  leau   (P$Links-P$DATImg),y  point to block link counts
0169 2004             (      funlink.asm):00035                  bra    L0161       go unlink block
                      (      funlink.asm):00036         
016B 6AE4             (      funlink.asm):00037         L015D    dec    ,s          we done?
016D 2770             (      funlink.asm):00038                  beq    L01D0       yes, go on
016F E6E4             (      funlink.asm):00039         L0161    ldb    ,s          get current offset
0171 58               (      funlink.asm):00040                  lslb               account for 2 bytes entry
0172 ECC5             (      funlink.asm):00041                  ldd    b,u         get block link count
0174 27F5             (      funlink.asm):00042                  beq    L015D       already zero, get next one
0176 A6E4             (      funlink.asm):00043                  lda    ,s          get block offset
0178 48               (      funlink.asm):00044                  lsla               find offset into 64k map by multiplying by 32
0179 48               (      funlink.asm):00045                  lsla
017A 48               (      funlink.asm):00046                  lsla
017B 48               (      funlink.asm):00047                  lsla
017C 48               (      funlink.asm):00048                  lsla
017D 5F               (      funlink.asm):00049                  clrb
017E 40               (      funlink.asm):00050                  nega
                      (      funlink.asm):00051                  IFNE   H6309
                      (      funlink.asm):00052                  addr   d,x
                      (      funlink.asm):00053                  ELSE
017F 308B             (      funlink.asm):00054                  leax   d,x
                      (      funlink.asm):00055                  ENDC
0181 E6E4             (      funlink.asm):00056                  ldb    ,s          get block offset
0183 58               (      funlink.asm):00057                  lslb               account for 2 bytes/entry
0184 ECA5             (      funlink.asm):00058                  ldd    b,y         get block #
0186 DE44             (      funlink.asm):00059                  ldu    <D.ModDir   get module directory pointer
0188 2007             (      funlink.asm):00060                  bra    L0185       go look for it
                      (      funlink.asm):00061         
                      (      funlink.asm):00062         * Main module directory search routine
018A 3348             (      funlink.asm):00063         L017C    leau   MD$ESize,u  move to next module entry
018C 119358           (      funlink.asm):00064                  cmpu   <D.ModEnd   done entire directory?
018F 244E             (      funlink.asm):00065                  bhs    L01D0       Yes, exit
0191 AC44             (      funlink.asm):00066         L0185    cmpx   MD$MPtr,u   is module pointer the same?
0193 26F5             (      funlink.asm):00067                  bne    L017C       no, keep looking
0195 10A3D4           (      funlink.asm):00068                  cmpd   [MD$MPDAT,u] DAT match?
0198 26F0             (      funlink.asm):00069                  bne    L017C       no, keep looking
                      (      funlink.asm):00070         * Module is found decrement link count
                      (      funlink.asm):00071         * NOTE: COULD WE USE D?
                      (      funlink.asm):00072         *   L0198 - Safe, destroys D immediately
                      (      funlink.asm):00073         *   Fall through- safe, destroys D immediately
                      (      funlink.asm):00074         *   L01B5 - Seems to be safe
019A EC46             (      funlink.asm):00075                  ldd    MD$Link,u   get module link count
019C 2707             (      funlink.asm):00076                  beq    L0198       it's zero, go unlink it
                      (      funlink.asm):00077                  IFNE   H6309
                      (      funlink.asm):00078                  decd               decrement link count
                      (      funlink.asm):00079                  ELSE
019E 830001           (      funlink.asm):00080                  subd   #$0001
                      (      funlink.asm):00081                  ENDC
01A1 ED46             (      funlink.asm):00082                  std    MD$Link,u   save it back
01A3 261E             (      funlink.asm):00083                  bne    L01B5       go on
                      (      funlink.asm):00084         * Module link count is zero check if he's unlinking a I/O module
01A5 AE62             (      funlink.asm):00085         L0198    ldx    2,s         get pointer to register stack
01A7 AE08             (      funlink.asm):00086                  ldx    R$U,x       get pointer to module
01A9 CC0006           (      funlink.asm):00087                  ldd    #M$Type     get offset to module type
01AC 103F48           (      funlink.asm):00088                  os9    F$LDDDXY    get module type
01AF 81D0             (      funlink.asm):00089                  cmpa   #FlMgr      is it a I/O module?
01B1 250E             (      funlink.asm):00090                  blo    L01B3       no, don't process for I/O
01B3 103F33           (      funlink.asm):00091                  os9    F$IODel     device still being used by somebody else?
01B6 2409             (      funlink.asm):00092                  bcc    L01B3       no, go on
01B8 EC46             (      funlink.asm):00093                  ldd    MD$Link,u   put the link count back to where it was
                      (      funlink.asm):00094                  IFNE   H6309
                      (      funlink.asm):00095                  incd
                      (      funlink.asm):00096                  ELSE
01BA C30001           (      funlink.asm):00097                  addd   #$0001
                      (      funlink.asm):00098                  ENDC
01BD ED46             (      funlink.asm):00099                  std    MD$Link,u
01BF 201F             (      funlink.asm):00100                  bra    L01D1       return error
                      (      funlink.asm):00101         * Clear module from memory
01C1 8D21             (      funlink.asm):00102         L01B3    bsr    DelMod      delete module from memory & module dir
01C3 E6E4             (      funlink.asm):00103         L01B5    ldb    ,s          get block
01C5 58               (      funlink.asm):00104                  lslb               account for 2 bytes/entry
01C6 31A5             (      funlink.asm):00105                  leay   b,y         point to block
01C8 ECA840           (      funlink.asm):00106                  ldd    (P$Links-P$DATImg),y get block link count
                      (      funlink.asm):00107                  IFNE   H6309
                      (      funlink.asm):00108                  decd               decrement it
                      (      funlink.asm):00109                  ELSE
01CB 830001           (      funlink.asm):00110                  subd   #$0001
                      (      funlink.asm):00111                  ENDC
01CE EDA840           (      funlink.asm):00112                  std    (P$Links-P$DATImg),y save new link count
01D1 260C             (      funlink.asm):00113                  bne    L01D0       not zero, return to user
                      (      funlink.asm):00114         * Clear module blocks in process DAT image
01D3 EC42             (      funlink.asm):00115                  ldd    MD$MBSiz,u  get block size
01D5 8D5E             (      funlink.asm):00116                  bsr    L0226       calculate # blocks to delete
01D7 8E333E           (      funlink.asm):00117                  ldx    #DAT.Free   get DAT free marker
01DA AFA1             (      funlink.asm):00118         L01CB    stx    ,y++        save it in DAT image
01DC 4A               (      funlink.asm):00119                  deca               done?
01DD 26FB             (      funlink.asm):00120                  bne    L01CB       no, keep going
01DF 5F               (      funlink.asm):00121         L01D0    clrb               clear errors
01E0 3262             (      funlink.asm):00122         L01D1    leas   2,s         purge local data
01E2 35C0             (      funlink.asm):00123                  puls   u,pc        restore & return
                      (      funlink.asm):00124         
                      (      funlink.asm):00125         * Delete module from module directory & from memory
                      (      funlink.asm):00126         * Entry: U=Module directory entry pointer to delete
                      (      funlink.asm):00127         * Exit : None
01E4 9E40             (      funlink.asm):00128         DelMod   ldx    <D.BlkMap   get pointer to memory block map
01E6 ECD4             (      funlink.asm):00129                  ldd    [MD$MPDAT,u] get pointer to module DAT image
01E8 A68B             (      funlink.asm):00130                  lda    d,x         is block type ROM?
01EA 2B48             (      funlink.asm):00131                  bmi    L0225       yes can't delete it, return
01EC 9E44             (      funlink.asm):00132                  ldx    <D.ModDir   get pointer to module directory
01EE EC94             (      funlink.asm):00133         L01DF    ldd    [MD$MPDAT,x] get offset to DAT
01F0 10A3D4           (      funlink.asm):00134                  cmpd   [MD$MPDAT,u] match what we're looking for?
01F3 2604             (      funlink.asm):00135                  bne    L01EA       no, keep looking
01F5 EC06             (      funlink.asm):00136                  ldd    MD$Link,x   get module link count
01F7 263B             (      funlink.asm):00137                  bne    L0225       not zero, return
01F9 3008             (      funlink.asm):00138         L01EA    leax   MD$ESize,x  move to next module
01FB 9C58             (      funlink.asm):00139                  cmpx   <D.ModEnd   at the end?
01FD 25EF             (      funlink.asm):00140                  bcs    L01DF       no, keep going
01FF 9E40             (      funlink.asm):00141                  ldx    <D.BlkMap   get pointer to block map
0201 EC42             (      funlink.asm):00142                  ldd    MD$MBSiz,u  get memory block size
0203 8D30             (      funlink.asm):00143                  bsr    L0226       calculate # blocks to clear
                      (      funlink.asm):00144                  IFNE   H6309
                      (      funlink.asm):00145                  pshs   u           Preserve U (faster than original Y below)
                      (      funlink.asm):00146                  clrb               Setup for faster block in use clears
                      (      funlink.asm):00147                  ldu    MD$MPDAT,u  get pointer to module DAT image
0205                  (      funlink.asm):00148         L01FB    ldw    ,u++        Get first block
                      (      funlink.asm):00149                  stb    -2,u        clear it in DAT image
                      (      funlink.asm):00150                  stb    -1,u
                      (      funlink.asm):00151                  addr   x,w         point to block in block map
                      (      funlink.asm):00152                  aim    #^(ModBlock!RAMinUse),,w
                      (      funlink.asm):00153                  deca
                      (      funlink.asm):00154                  bne    L01FB
                      (      funlink.asm):00155                  puls   u           Restore module ptr
                      (      funlink.asm):00156                  ELSE
0205 3420             (      funlink.asm):00157                  pshs  y            save y
0207 10AEC4           (      funlink.asm):00158                  ldy   MD$MPDAT,u   module image ptr
020A 3412             (      funlink.asm):00159         L01FB    pshs  a,x          save #blocks, ptr
020C ECA4             (      funlink.asm):00160                  ldd   ,y           get block number
020E 6FA0             (      funlink.asm):00161                  clr   ,y+          clear the image
0210 6FA0             (      funlink.asm):00162                  clr   ,y+
0212 308B             (      funlink.asm):00163                  leax  d,x          point to blkmap entry
0214 E684             (      funlink.asm):00164                  ldb   ,x
0216 C4FC             (      funlink.asm):00165                  andb  #^(RAMinUse+ModBlock) free block
0218 E784             (      funlink.asm):00166                  stb   ,x
021A 3512             (      funlink.asm):00167                  puls  a,x
021C 4A               (      funlink.asm):00168                  deca               last block done?
021D 26EB             (      funlink.asm):00169                  bne   L01FB        ..no, loop
021F 3520             (      funlink.asm):00170                  puls  y
                      (      funlink.asm):00171                  ENDC
0221 9E44             (      funlink.asm):00172                  ldx    <D.ModDir   get module directory pointer
0223 ECC4             (      funlink.asm):00173                  ldd    MD$MPDAT,u  get module DAT pointer
0225 10A384           (      funlink.asm):00174         L0216    cmpd   MD$MPDAT,x  match?
0228 2604             (      funlink.asm):00175                  bne    L021F       no, keep looking
022A 6F84             (      funlink.asm):00176                  clr    MD$MPDAT,x  clear module DAT image pointer
022C 6F01             (      funlink.asm):00177                  clr    MD$MPDAT+1,x
022E 3008             (      funlink.asm):00178         L021F    leax   MD$ESize,x  point to next module entry
0230 9C58             (      funlink.asm):00179                  cmpx   <D.ModEnd   at the end?
0232 25F1             (      funlink.asm):00180                  blo    L0216       no, keep looking
0234 39               (      funlink.asm):00181         L0225    rts                return
                      (      funlink.asm):00182         
0235 C31FFF           (      funlink.asm):00183         L0226    addd   #$1FFF      round up to nearest block
0238 44               (      funlink.asm):00184                  lsra               calculate block # within 64k workspace
0239 44               (      funlink.asm):00185                  lsra
023A 44               (      funlink.asm):00186                  lsra
023B 44               (      funlink.asm):00187                  lsra
023C 44               (      funlink.asm):00188                  lsra
023D 39               (      funlink.asm):00189                  rts
                      (/home/strick/go/s):00371         
                      (/home/strick/go/s):00372                  use    ffork.asm
                      (        ffork.asm):00001         **************************************************
                      (        ffork.asm):00002         * System Call: F$Fork
                      (        ffork.asm):00003         *
                      (        ffork.asm):00004         * Function: Starts a new child process
                      (        ffork.asm):00005         *
                      (        ffork.asm):00006         * Input:  X = Address of module or filename
                      (        ffork.asm):00007         *         Y = Parameter area size (256 byte pages)
                      (        ffork.asm):00008         *         U = Address of parameter area
                      (        ffork.asm):00009         *         A = Language/Type code
                      (        ffork.asm):00010         *         B = Optional data area size (256 byte pages)
                      (        ffork.asm):00011         *
                      (        ffork.asm):00012         * Output: X = Updated past the name string
                      (        ffork.asm):00013         *         A = Child's process ID
                      (        ffork.asm):00014         *
                      (        ffork.asm):00015         * Error:  CC = C bit set; B = error code
                      (        ffork.asm):00016         *
023E 3440             (        ffork.asm):00017         FFork    pshs   u           preserve register stack pointer
0240 1700A1           (        ffork.asm):00018                  lbsr   AllPrc      setup a new process descriptor
0243 2402             (        ffork.asm):00019                  bcc    GotNPrc     went ok, keep going
0245 35C0             (        ffork.asm):00020                  puls   u,pc        restore & return with error
                      (        ffork.asm):00021         
                      (        ffork.asm):00022         * Copy user # & priority
0247 3440             (        ffork.asm):00023         GotNPrc  pshs   u           save pointer to new descriptor
0249 9E50             (        ffork.asm):00024                  ldx    <D.Proc     get current process pointer
                      (        ffork.asm):00025                  IFNE   H6309
                      (        ffork.asm):00026                  ldq    P$User,x    Get user # & priority from forking process
                      (        ffork.asm):00027                  std    P$User,u    Save user # in new process
                      (        ffork.asm):00028                  ste    P$Prior,u   Save priority in new process
                      (        ffork.asm):00029                  ELSE
024B EC08             (        ffork.asm):00030                  ldd    P$User,x
024D ED48             (        ffork.asm):00031                  std    P$User,u
024F A60A             (        ffork.asm):00032                  lda    P$Prior,x
0251 A74A             (        ffork.asm):00033                  sta    P$Prior,u
                      (        ffork.asm):00034                  ENDC
                      (        ffork.asm):00035         * Copy network I/O pointers to new descriptor
                      (        ffork.asm):00036                  IFEQ   Network-1
                      (        ffork.asm):00037                  pshs   x,u
                      (        ffork.asm):00038                  leax   >P$NIO,x    point to current NIO pointers
                      (        ffork.asm):00039                  leau   >P$NIO,u    point to buffer for new ones
                      (        ffork.asm):00040                  IFNE   H6309
                      (        ffork.asm):00041                  ldw    #NefIOSiz   get size
                      (        ffork.asm):00042                  tfm    x+,u+       move 'em
                      (        ffork.asm):00043                  ELSE
                      (        ffork.asm):00044                  ldb    #NefIOSiz
0253                  (        ffork.asm):00045         L0250    lda    ,x+
                      (        ffork.asm):00046                  sta    ,u+
                      (        ffork.asm):00047                  decb
                      (        ffork.asm):00048                  bne    L0250
                      (        ffork.asm):00049                  ENDC
                      (        ffork.asm):00050                  puls   x,u         restore pointers to descriptors
                      (        ffork.asm):00051                  ENDC
                      (        ffork.asm):00052         * Copy I/O pointers to new descriptor
0253 308820           (        ffork.asm):00053                  leax   P$DIO,x
0256 33C820           (        ffork.asm):00054                  leau   P$DIO,u
                      (        ffork.asm):00055                  IFNE   H6309
                      (        ffork.asm):00056                  ldw    #DefIOSiz
                      (        ffork.asm):00057                  tfm    x+,u+
                      (        ffork.asm):00058         * Copy Standard paths to new descriptor
                      (        ffork.asm):00059                  lde    #3          get # paths
                      (        ffork.asm):00060                  ELSE
0259 C610             (        ffork.asm):00061                  ldb    #DefIOSiz
025B A680             (        ffork.asm):00062         L0261    lda    ,x+
025D A7C0             (        ffork.asm):00063                  sta    ,u+
025F 5A               (        ffork.asm):00064                  decb
0260 26F9             (        ffork.asm):00065                  bne    L0261
0262 108E0003         (        ffork.asm):00066                  ldy    #3
                      (        ffork.asm):00067                  ENDC
                      (        ffork.asm):00068         
                      (        ffork.asm):00069         * Duplicate 1st 3 paths
0266 A680             (        ffork.asm):00070         GetOPth  lda    ,x+         get a path #
0268 2706             (        ffork.asm):00071                  beq    SveNPth     don't exist, go on
026A 103F82           (        ffork.asm):00072                  os9    I$Dup       dupe it
026D 2401             (        ffork.asm):00073                  bcc    SveNPth     no error, go on
026F 4F               (        ffork.asm):00074                  clra               clear it
                      (        ffork.asm):00075         
                      (        ffork.asm):00076         * As std in/out/err
0270 A7C0             (        ffork.asm):00077         SveNPth  sta    ,u+         save new path #
                      (        ffork.asm):00078                  IFNE   H6309
                      (        ffork.asm):00079                  dece               done?
                      (        ffork.asm):00080                  ELSE
0272 313F             (        ffork.asm):00081                  leay   -1,y
                      (        ffork.asm):00082                  ENDC
0274 26F0             (        ffork.asm):00083                  bne    GetOPth     no, keep going
                      (        ffork.asm):00084         * Link to new module & setup task map
0276 AEE4             (        ffork.asm):00085                  ldx    ,s          get pointer to new descriptor
0278 EE62             (        ffork.asm):00086                  ldu    2,s         get pointer to register stack
027A 17022D           (        ffork.asm):00087                  lbsr   L04B1       link to module & setup register stack
027D 254A             (        ffork.asm):00088                  bcs    L02CF       exit if error
027F 3406             (        ffork.asm):00089                  pshs   d
0281 103F3F           (        ffork.asm):00090                  os9    F$AllTsk    allocate the task & setup MMU
0284 2543             (        ffork.asm):00091                  bcs    L02CF       Error, skip ahead
                      (        ffork.asm):00092         
                      (        ffork.asm):00093         * Copy parameters to new process
0286 A607             (        ffork.asm):00094                  lda    P$PagCnt,x  get memory page count
0288 5F               (        ffork.asm):00095                  clrb
0289 A3E4             (        ffork.asm):00096                  subd   ,s          calculate destination
028B 1F03             (        ffork.asm):00097                  tfr    d,u         set parameter destination pointer
028D E606             (        ffork.asm):00098                  ldb    P$Task,x    get source task #
028F 9E50             (        ffork.asm):00099                  ldx    <D.Proc     get destination task #
0291 A606             (        ffork.asm):00100                  lda    P$Task,x
0293 30A4             (        ffork.asm):00101                  leax   ,y          point to parameters
0295 3520             (        ffork.asm):00102                  puls   y           restore parameter count
0297 103F38           (        ffork.asm):00103                  os9    F$Move      move parameters to new process
                      (        ffork.asm):00104         
                      (        ffork.asm):00105         * Setup the new stack
029A AEE4             (        ffork.asm):00106                  ldx    ,s          get pointer to process descriptor
029C 96D0             (        ffork.asm):00107                  lda    <D.SysTsk   get task #
029E EE04             (        ffork.asm):00108                  ldu    P$SP,x      get new stack pointer
02A0 308901F4         (        ffork.asm):00109                  leax   >(P$Stack-R$Size),x point to register stack
02A4 108E000C         (        ffork.asm):00110                  ldy    #R$Size     get size of register stack
02A8 103F38           (        ffork.asm):00111                  os9    F$Move      move the register stack over
02AB 3550             (        ffork.asm):00112                  puls   u,x
02AD 103F40           (        ffork.asm):00113                  os9    F$DelTsk
02B0 109E50           (        ffork.asm):00114                  ldy    <D.Proc
02B3 A684             (        ffork.asm):00115                  lda    P$ID,x
02B5 A741             (        ffork.asm):00116                  sta    R$A,u
02B7 E623             (        ffork.asm):00117                  ldb    P$CID,y
02B9 A723             (        ffork.asm):00118                  sta    P$CID,y
02BB A6A4             (        ffork.asm):00119                  lda    P$ID,y
02BD ED01             (        ffork.asm):00120                  std    P$PID,x
                      (        ffork.asm):00121                  IFNE   H6309
                      (        ffork.asm):00122                  aim    #^SysState,P$State,x switch to non-system state
                      (        ffork.asm):00123                  ELSE
02BF A60C             (        ffork.asm):00124                  lda    P$State,x
02C1 847F             (        ffork.asm):00125                  anda   #^SysState
02C3 A70C             (        ffork.asm):00126                  sta    P$State,x
                      (        ffork.asm):00127                  ENDC
                      (        ffork.asm):00128         * Put date & time of creation into descriptor
                      (        ffork.asm):00129         *         pshs   x          preserve process pointer
                      (        ffork.asm):00130         *         leax   P$DatBeg,x point to time buffer
                      (        ffork.asm):00131         *         os9    F$Time     put date/time into it
                      (        ffork.asm):00132         *         puls   x          restore pointer
02C5 103F2C           (        ffork.asm):00133                  os9    F$AProc     and start the process
02C8 39               (        ffork.asm):00134                  rts                return
                      (        ffork.asm):00135         
                      (        ffork.asm):00136         * Fork error goes here
02C9 3510             (        ffork.asm):00137         L02CF    puls  x
02CB 3404             (        ffork.asm):00138                  pshs  b            save error
02CD 1702CE           (        ffork.asm):00139                  lbsr  L05A5        close paths & unlink mem
02D0 A684             (        ffork.asm):00140                  lda   P$ID,x       get bad ID
02D2 1700AB           (        ffork.asm):00141                  lbsr  L0386        delete proc desc & task #
02D5 53               (        ffork.asm):00142                  comb               set carry
02D6 35C4             (        ffork.asm):00143                  puls  pc,u,b       pull error code & u & return
                      (/home/strick/go/s):00373         
                      (/home/strick/go/s):00374                  use    fallprc.asm
                      (      fallprc.asm):00001         **************************************************
                      (      fallprc.asm):00002         * System Call: F$AllPrc
                      (      fallprc.asm):00003         *
                      (      fallprc.asm):00004         * Function: Allocate process descriptor
                      (      fallprc.asm):00005         *
                      (      fallprc.asm):00006         * Input:  None
                      (      fallprc.asm):00007         *
                      (      fallprc.asm):00008         * Output: U = Process descriptor pointer
                      (      fallprc.asm):00009         *
                      (      fallprc.asm):00010         * Error:  CC = C bit set; B = error code
                      (      fallprc.asm):00011         *
02D8 3440             (      fallprc.asm):00012         FAllPrc  pshs  u            preserve register stack pointer
02DA 8D08             (      fallprc.asm):00013                  bsr   AllPrc       try & allocate descriptor
02DC 2504             (      fallprc.asm):00014                  bcs   L02E8        can't do, return
02DE AEE4             (      fallprc.asm):00015                  ldx   ,s           get register stack pointer
02E0 EF08             (      fallprc.asm):00016                  stu   R$U,x        save pointer to new descriptor
02E2 35C0             (      fallprc.asm):00017         L02E8    puls  u,pc         restore & return
                      (      fallprc.asm):00018         * Allocate a process desciptor
                      (      fallprc.asm):00019         * Entry: None
02E4 9E48             (      fallprc.asm):00020         AllPrc   ldx    <D.PrcDBT   get pointer to process descriptor block table
02E6 A680             (      fallprc.asm):00021         L02EC    lda    ,x+         get a process block #
02E8 26FC             (      fallprc.asm):00022                  bne    L02EC       used, keep looking
02EA 301F             (      fallprc.asm):00023                  leax   -1,x        point to it again
02EC 1F10             (      fallprc.asm):00024                  tfr    x,d         move it to D
02EE 9348             (      fallprc.asm):00025                  subd   <D.PrcDBT   subtract pointer to table (gives actual prc. ID)
02F0 4D               (      fallprc.asm):00026                  tsta               id valid?
02F1 2704             (      fallprc.asm):00027                  beq    L02FE       yes, go on
02F3 53               (      fallprc.asm):00028                  comb               set carry
02F4 C6E5             (      fallprc.asm):00029                  ldb    #E$PrcFul   get error code
02F6 39               (      fallprc.asm):00030                  rts                Return with error
                      (      fallprc.asm):00031         
02F7 3404             (      fallprc.asm):00032         L02FE    pshs   b           save process #
02F9 CC0200           (      fallprc.asm):00033                  ldd    #P$Size     get size of descriptor
02FC 103F28           (      fallprc.asm):00034                  os9    F$SRqMem    request the memory for it
02FF 3502             (      fallprc.asm):00035                  puls   a           restore process #
0301 2526             (      fallprc.asm):00036                  bcs    L032F       exit if error from mem call
0303 A7C4             (      fallprc.asm):00037                  sta    P$ID,u      save ID to descriptor
0305 1F30             (      fallprc.asm):00038                  tfr    u,d
0307 A784             (      fallprc.asm):00039                  sta    ,x          save ID to process descriptor table
                      (      fallprc.asm):00040         
                      (      fallprc.asm):00041         * Clear out process descriptor through till stack
                      (      fallprc.asm):00042                  IFNE   H6309
                      (      fallprc.asm):00043                  leay   <Null3,pc  Point to 0 byte
                      (      fallprc.asm):00044                  leax   1,u
                      (      fallprc.asm):00045                  ldw    #$0100
0309                  (      fallprc.asm):00046         Null3    equ   *-1
                      (      fallprc.asm):00047                  tfm    y,x+
                      (      fallprc.asm):00048                  ELSE
0309 4F               (      fallprc.asm):00049                  clra
030A 5F               (      fallprc.asm):00050                  clrb
030B 3041             (      fallprc.asm):00051                  leax   P$PID,u
030D 108E0080         (      fallprc.asm):00052                  ldy    #$80
0311 ED81             (      fallprc.asm):00053         LChinese std    ,x++
0313 313F             (      fallprc.asm):00054                  leay   -1,y
0315 26FA             (      fallprc.asm):00055                  bne   LChinese
                      (      fallprc.asm):00056                  ENDC
                      (      fallprc.asm):00057         
                      (      fallprc.asm):00058         ***************************************************************************
                      (      fallprc.asm):00059         * OS-9 L2 Upgrade Enhancement: Stamp current date/time for start of process
                      (      fallprc.asm):00060         *         ldy    <D.Proc                get current process descriptor
                      (      fallprc.asm):00061         *         ldx    <D.SysProc     get system process descriptor
                      (      fallprc.asm):00062         *         stx    <D.Proc                make system process current
                      (      fallprc.asm):00063         *         leax   P$DatBeg,u     new proc desc creation date/time stamp
                      (      fallprc.asm):00064         *         os9    F$Time         ignore any error...
                      (      fallprc.asm):00065         *         sty    <D.Proc                restore current proc desc address
                      (      fallprc.asm):00066         ***************************************************************************
                      (      fallprc.asm):00067         
0317 8680             (      fallprc.asm):00068                  lda    #SysState   set process to system state
0319 A74C             (      fallprc.asm):00069                  sta    P$State,u
                      (      fallprc.asm):00070         * Empty out DAT image
031B C608             (      fallprc.asm):00071                  ldb    #DAT.BlCt   # of double byte writes
031D 8E333E           (      fallprc.asm):00072                  ldx    #DAT.Free   Empty block marker
0320 31C840           (      fallprc.asm):00073                  leay   P$DATImg,u
0323 AFA1             (      fallprc.asm):00074         L0329    stx    ,y++
0325 5A               (      fallprc.asm):00075                  decb               done?
0326 26FB             (      fallprc.asm):00076                  bne    L0329       no, keep going
0328 5F               (      fallprc.asm):00077                  clrb               clear carry
0329 39               (      fallprc.asm):00078         L032F    rts                return
                      (      fallprc.asm):00079         
                      (      fallprc.asm):00080         
                      (      fallprc.asm):00081         **************************************************
                      (      fallprc.asm):00082         * System Call: F$DelPrc
                      (      fallprc.asm):00083         *
                      (      fallprc.asm):00084         * Function: Deallocate Process Descriptor
                      (      fallprc.asm):00085         *
                      (      fallprc.asm):00086         * Input:  A = Process ID
                      (      fallprc.asm):00087         *
                      (      fallprc.asm):00088         * Output: None
                      (      fallprc.asm):00089         *
                      (      fallprc.asm):00090         * Error:  CC = C bit set; B = error code
                      (      fallprc.asm):00091         *
032A A641             (      fallprc.asm):00092         FDelPrc  lda    R$A,u       get process #
032C 2052             (      fallprc.asm):00093                  bra    L0386       delete it
                      (      fallprc.asm):00094         
                      (      fallprc.asm):00095         
                      (      fallprc.asm):00096         **************************************************
                      (      fallprc.asm):00097         * System Call: F$Wait
                      (      fallprc.asm):00098         *
                      (      fallprc.asm):00099         * Function: Wait for child process to die
                      (      fallprc.asm):00100         *
                      (      fallprc.asm):00101         * Notes:
                      (      fallprc.asm):00102         * Checks all children to see if any died (done through linked
                      (      fallprc.asm):00103         * child process list through P$CID for 1st one & P$SID for rest)
                      (      fallprc.asm):00104         * Will stick process into Wait Queue until either Waiting process
                      (      fallprc.asm):00105         * receives signal or until child dies. Child dying does NOT send
                      (      fallprc.asm):00106         * signal to parent.
                      (      fallprc.asm):00107         *
                      (      fallprc.asm):00108         * Input:  None
                      (      fallprc.asm):00109         *
                      (      fallprc.asm):00110         * Output: A = Deceased child process' process ID
                      (      fallprc.asm):00111         *         B = Child process' exit status code
                      (      fallprc.asm):00112         *
                      (      fallprc.asm):00113         * Error:  CC = C bit set; B = error code
                      (      fallprc.asm):00114         *
032E 9E50             (      fallprc.asm):00115         FWait    ldx    <D.Proc     get current process
0330 A603             (      fallprc.asm):00116                  lda    P$CID,x     any children?
0332 272E             (      fallprc.asm):00117                  beq    L0368       no, exit with error
0334 17084F           (      fallprc.asm):00118         L033A    lbsr   L0B2E       get pointer to child process dsc. into Y
                      (      fallprc.asm):00119                  IFNE   H6309
                      (      fallprc.asm):00120                  tim    #Dead,P$State,y  Is child dead?
                      (      fallprc.asm):00121                  ELSE
0337 A62C             (      fallprc.asm):00122                  lda    P$State,y
0339 8501             (      fallprc.asm):00123                  bita   #Dead
                      (      fallprc.asm):00124                  ENDC
033B 2629             (      fallprc.asm):00125                  bne    L036C       Yes, send message to parent
033D A622             (      fallprc.asm):00126                  lda    P$SID,y     No, check for another child (thru sibling list)
033F 26F3             (      fallprc.asm):00127                  bne    L033A       Yes there is another child, go see if it is dead
                      (      fallprc.asm):00128         * NOTE: MAY WANT TO ADD IN CLRB, CHANGE TO STD R$A,u
0341 A741             (      fallprc.asm):00129                  sta    R$A,u       No child has died, clear out process # & status
0343 A742             (      fallprc.asm):00130                  sta    R$B,u         code in caller's A&B regs
0345 3401             (      fallprc.asm):00131                  pshs   cc          Preserve CC
0347 1A50             (      fallprc.asm):00132                  orcc   #IntMasks   Shut off interrupts
0349 A68819           (      fallprc.asm):00133                  lda    <P$Signal,x Any signals pending?
034C 2709             (      fallprc.asm):00134                  beq    L035D       No, skip ahead
                      (      fallprc.asm):00135         * No Child died, but received signal
034E 4A               (      fallprc.asm):00136                  deca               Yes, is it a wakeup signal?
034F 2603             (      fallprc.asm):00137                  bne    L035A       no, wake it up with proper signal
0351 A78819           (      fallprc.asm):00138                  sta    <P$Signal,x Clear out signal code
0354 1603BF           (      fallprc.asm):00139         L035A    lbra   L071B       go wake it up (no signal will be sent)
                      (      fallprc.asm):00140         
                      (      fallprc.asm):00141         * No dead child & no signal...execute next F$Waiting process in line
0357 DC54             (      fallprc.asm):00142         L035D    ldd    <D.WProcQ   get ptr to head of waiting process line
0359 ED0D             (      fallprc.asm):00143                  std    P$Queue,x   save as next process in line from current one
035B 9F54             (      fallprc.asm):00144                  stx    <D.WProcQ   save curr. process as new head of waiting process line
035D 3501             (      fallprc.asm):00145                  puls   cc          restore interupts
035F 160419           (      fallprc.asm):00146                  lbra   L0780       go activate next process in line
                      (      fallprc.asm):00147         
0362 53               (      fallprc.asm):00148         L0368    comb               Exit with No Children error
0363 C6E2             (      fallprc.asm):00149                  ldb    #E$NoChld
0365 39               (      fallprc.asm):00150                  rts
                      (      fallprc.asm):00151         
                      (      fallprc.asm):00152         * Child has died
                      (      fallprc.asm):00153         * Entry: Y=Ptr to child process that died
                      (      fallprc.asm):00154         *        U=Ptr to caller's register stack
0366 A6A4             (      fallprc.asm):00155         L036C    lda   P$ID,y       Get process ID of dead child
0368 E6A819           (      fallprc.asm):00156                  ldb   <P$Signal,y  Get signal code that child received (if any)
036B ED41             (      fallprc.asm):00157                  std   R$D,u        Save in caller's D
036D 33A4             (      fallprc.asm):00158                  leau  ,y           Point U to child process dsc.
036F 3101             (      fallprc.asm):00159                  leay  P$CID-P$SID,x    Bump Y up by 1 for 1st loop so P$SID below actually
                      (      fallprc.asm):00160         *                             references P$CID
0371 2003             (      fallprc.asm):00161                  bra   L037C        skip ahead
                      (      fallprc.asm):00162         
                      (      fallprc.asm):00163         * Update linked list of sibling processes to exclude dead child
0373 170810           (      fallprc.asm):00164         L0379    lbsr  L0B2E        get pointer to process
0376 A622             (      fallprc.asm):00165         L037C    lda   P$SID,y      Get Sibling ID (or Child ID on 1st run)
0378 A1C4             (      fallprc.asm):00166                  cmpa  P$ID,u       Same as Dying process ID?
037A 26F7             (      fallprc.asm):00167                  bne   L0379        No, go get ptr to Sibling process & do again
037C E642             (      fallprc.asm):00168                  ldb   P$SID,u      Yes, wrapped to our own, get Sibling ID from child
037E E722             (      fallprc.asm):00169                  stb   P$SID,y      Save as sibling process id # in other sibling
                      (      fallprc.asm):00170         
0380 3456             (      fallprc.asm):00171         L0386    pshs  d,x,u        preserve regs
0382 B11015           (      fallprc.asm):00172                  cmpa  WGlobal+G.AlPID     Does dying process have an alarm set up?
0385 2605             (      fallprc.asm):00173                  bne   L0393        no, go on
                      (      fallprc.asm):00174                  IFNE  H6309
                      (      fallprc.asm):00175                  clrd               Faster than 2 memory clears
                      (      fallprc.asm):00176                  ELSE
0387 4F               (      fallprc.asm):00177                  clra
0388 5F               (      fallprc.asm):00178                  clrb
                      (      fallprc.asm):00179                  ENDC
0389 FD1015           (      fallprc.asm):00180                  std   WGlobal+G.AlPID    clear alarm ID & signal
                      (      fallprc.asm):00181         
038C E6E4             (      fallprc.asm):00182         L0393    ldb   ,s           get dying process # back
038E 9E48             (      fallprc.asm):00183                  ldx   <D.PrcDBT    get ptr to process descriptor block table
0390 3A               (      fallprc.asm):00184                  abx                offset into table
0391 A684             (      fallprc.asm):00185                  lda   ,x           Get MSB of process dsc. ptr
0393 2710             (      fallprc.asm):00186                  beq   L03AC        If gone already, exit
0395 5F               (      fallprc.asm):00187                  clrb
0396 E784             (      fallprc.asm):00188                  stb   ,x           Clear out entry in block table
0398 1F01             (      fallprc.asm):00189                  tfr   d,x          Move process dsc. ptr to X
039A 103F40           (      fallprc.asm):00190                  os9   F$DelTsk     Remove task # for this process
039D 3384             (      fallprc.asm):00191                  leau  ,x           Point U to start of Dead process dsc.
039F CC0200           (      fallprc.asm):00192                  ldd   #P$Size      Size of a process dsc.
03A2 103F29           (      fallprc.asm):00193                  os9   F$SRtMem     Deallocate process dsc. from system memory pool
03A5 35D6             (      fallprc.asm):00194         L03AC    puls  d,x,u,pc     Restore regs & return
                      (/home/strick/go/s):00375         
                      (/home/strick/go/s):00376                  use    fchain.asm
                      (       fchain.asm):00001         **************************************************
                      (       fchain.asm):00002         * System Call: F$Chain
                      (       fchain.asm):00003         *
                      (       fchain.asm):00004         * Function: Starts a new child process and terminates the calling process.
                      (       fchain.asm):00005         *
                      (       fchain.asm):00006         * Input:  X = Address of module or filename
                      (       fchain.asm):00007         *         Y = Parameter area size (256 byte pages)
                      (       fchain.asm):00008         *         U = Address of parameter area
                      (       fchain.asm):00009         *         A = Language/Type code
                      (       fchain.asm):00010         *         B = Optional data area size (256 byte pages)
                      (       fchain.asm):00011         *
                      (       fchain.asm):00012         * Output: None
                      (       fchain.asm):00013         *
                      (       fchain.asm):00014         * Error:  CC = C bit set; B = error code
                      (       fchain.asm):00015         *
03A7 3440             (       fchain.asm):00016         FChain   pshs  u            preserve register stack pointer
03A9 17FF38           (       fchain.asm):00017                  lbsr  AllPrc       allocate a new process descriptor
03AC 2402             (       fchain.asm):00018                  bcc   L03B7        do the chain if no error
03AE 35C0             (       fchain.asm):00019                  puls  u,pc         return to caller with error
                      (       fchain.asm):00020         
                      (       fchain.asm):00021         * Copy Process Descriptor Data
03B0 9E50             (       fchain.asm):00022         L03B7    ldx   <D.Proc      get pointer to current process
03B2 3450             (       fchain.asm):00023                  pshs  x,u          save old & new descriptor pointers
03B4 3004             (       fchain.asm):00024                  leax  P$SP,x       point to source
03B6 3344             (       fchain.asm):00025                  leau  P$SP,u       point to destination
                      (       fchain.asm):00026                  IFNE  H6309
                      (       fchain.asm):00027                  ldw   #$00fc       get size (P$SP+$FC)
                      (       fchain.asm):00028                  tfm   x+,u+        move it
                      (       fchain.asm):00029                  ELSE
03B8 108E00FC         (       fchain.asm):00030                  ldy   #$00FC
03BC EC81             (       fchain.asm):00031         L03C3    ldd   ,x++         copy bytes
03BE EDC1             (       fchain.asm):00032                  std   ,u++
03C0 313E             (       fchain.asm):00033                  leay  -2,y
03C2 26F8             (       fchain.asm):00034                  bne   L03C3
                      (       fchain.asm):00035                  ENDC
03C4 EE62             (       fchain.asm):00036         L03CB    ldu   2,s          get new descriptor pointer
03C6 33C840           (       fchain.asm):00037                  leau  <P$DATImg,u
03C9 AEE4             (       fchain.asm):00038                  ldx   ,s           get old descriptor pointer
03CB A606             (       fchain.asm):00039                  lda   P$Task,x     get task #
03CD 48               (       fchain.asm):00040                  lsla               2 bytes per entry
03CE 9EA1             (       fchain.asm):00041                  ldx   <D.TskIpt    get task image table pointer
03D0 EF86             (       fchain.asm):00042                  stu   a,x          save updated DAT image pointer for later
                      (       fchain.asm):00043         * Question: are the previous 7 lines necessary? The F$AllTsk call, below
                      (       fchain.asm):00044         * should take care of everything!
03D2 9E50             (       fchain.asm):00045                  ldx   <D.Proc      get process descriptor
                      (       fchain.asm):00046                  IFNE  H6309
                      (       fchain.asm):00047                  clrd               Faster than 2 memory clears
                      (       fchain.asm):00048                  ELSE
03D4 4F               (       fchain.asm):00049                  clra
03D5 5F               (       fchain.asm):00050                  clrb
                      (       fchain.asm):00051                  ENDC
03D6 E706             (       fchain.asm):00052                  stb   P$Task,x     old process has no task number
03D8 ED8813           (       fchain.asm):00053                  std   <P$SWI,x     clear out all sorts of signals and vectors
03DB ED8815           (       fchain.asm):00054                  std   <P$SWI2,x
03DE ED8817           (       fchain.asm):00055                  std   <P$SWI3,x
03E1 A78819           (       fchain.asm):00056                  sta   <P$Signal,x
03E4 ED881A           (       fchain.asm):00057                  std   <P$SigVec,x
03E7 EE8811           (       fchain.asm):00058                  ldu   <P$PModul,x
03EA 103F02           (       fchain.asm):00059                  os9   F$UnLink     unlink from the primary module
03ED E607             (       fchain.asm):00060                  ldb   P$PagCnt,x   grab the page count
03EF CB1F             (       fchain.asm):00061                  addb  #$1F         round up to the nearest block
03F1 54               (       fchain.asm):00062                  lsrb
03F2 54               (       fchain.asm):00063                  lsrb
03F3 54               (       fchain.asm):00064                  lsrb
03F4 54               (       fchain.asm):00065                  lsrb
03F5 54               (       fchain.asm):00066                  lsrb               get number of blocks used
03F6 8608             (       fchain.asm):00067                  lda   #$08
                      (       fchain.asm):00068                  IFNE  H6309
                      (       fchain.asm):00069                  subr  b,a          A=number of blocks unused
                      (       fchain.asm):00070                  ELSE
03F8 3404             (       fchain.asm):00071                  pshs  b
03FA A0E0             (       fchain.asm):00072                  suba  ,s+
                      (       fchain.asm):00073                  ENDC
03FC 318840           (       fchain.asm):00074                  leay  <P$DATImg,x  set up the initial DAT image
03FF 58               (       fchain.asm):00075                  lslb
0400 31A5             (       fchain.asm):00076                  leay  b,y          go to the offset
0402 CE333E           (       fchain.asm):00077                  ldu   #DAT.Free    mark the blocks as free
0405 EFA1             (       fchain.asm):00078         L040C    stu   ,y++         do all of them
0407 4A               (       fchain.asm):00079                  deca
0408 26FB             (       fchain.asm):00080                  bne   L040C
040A EE62             (       fchain.asm):00081                  ldu   2,s          get new process descriptor pointer
040C DF50             (       fchain.asm):00082                  stu   <D.Proc      make it the new process
040E EE64             (       fchain.asm):00083                  ldu   4,s
0410 170097           (       fchain.asm):00084                  lbsr  L04B1        link to new module & setup register stack
                      (       fchain.asm):00085                  IFNE  H6309
                      (       fchain.asm):00086                  bcs   L04A1
                      (       fchain.asm):00087                  ELSE
0413 10250083         (       fchain.asm):00088                  lbcs  L04A1
                      (       fchain.asm):00089                  ENDC
0417 3406             (       fchain.asm):00090                  pshs  d            somehow D = memory size? Or parameter size?
0419 103F3F           (       fchain.asm):00091                  os9   F$AllTsk     allocate a new task number
                      (       fchain.asm):00092         * ignore errors here
                      (       fchain.asm):00093         * Hmmm.. the code above FORCES the new process to have the same DAT image ptr
                      (       fchain.asm):00094         * as the old process, not that it matters...
                      (       fchain.asm):00095         
                      (       fchain.asm):00096                  IFNE  H6309
                      (       fchain.asm):00097                  fcb   $24,$00      TODO: Identify this!
                      (       fchain.asm):00098                  ENDC
041C DE50             (       fchain.asm):00099                  ldu   <D.Proc      get nre process
041E A646             (       fchain.asm):00100                  lda   P$Task,u     new task number
0420 E606             (       fchain.asm):00101                  ldb   P$Task,x     old task number
0422 338901F4         (       fchain.asm):00102                  leau  >(P$Stack-R$Size),x  set up the stack for the new process
0426 30A4             (       fchain.asm):00103                  leax  ,y
0428 EE44             (       fchain.asm):00104                  ldu   R$X,u        where to copy from
                      (       fchain.asm):00105                  IFNE  H6309
                      (       fchain.asm):00106                  cmpr  x,u          check From/To addresses
                      (       fchain.asm):00107                  ELSE
042A 3410             (       fchain.asm):00108                  pshs  x            src ptr
042C 11A3E1           (       fchain.asm):00109                  cmpu  ,s++         dest ptr
                      (       fchain.asm):00110                  ENDC
042F 3520             (       fchain.asm):00111                  puls  y            size
0431 2237             (       fchain.asm):00112                  bhi   L0471        To < From: do F$Move
0433 2738             (       fchain.asm):00113                  beq   L0474        To == From, skip F$Move
                      (       fchain.asm):00114         
                      (       fchain.asm):00115         * To > From: do special copy
0435 31A4             (       fchain.asm):00116                  leay  ,y           any bytes to move?
0437 2734             (       fchain.asm):00117                  beq   L0474        no, skip ahead
                      (       fchain.asm):00118                  IFNE  H6309
                      (       fchain.asm):00119                  pshs  x            save address
                      (       fchain.asm):00120                  addr  y,x          add size to FROM address
                      (       fchain.asm):00121                  cmpr  x,u          is it
                      (       fchain.asm):00122                  puls  x
                      (       fchain.asm):00123                  ELSE
0439 3416             (       fchain.asm):00124                  pshs  d,x
043B 1F20             (       fchain.asm):00125                  tfr   y,d
043D 308B             (       fchain.asm):00126                  leax  d,x
043F 3410             (       fchain.asm):00127                  pshs  x
0441 11A3E1           (       fchain.asm):00128                  cmpu  ,s++
0444 3516             (       fchain.asm):00129                  puls  d,x
                      (       fchain.asm):00130                  ENDC
0446 2322             (       fchain.asm):00131                  bls   L0471        end of FROM <= start of TO: do F$Move
                      (       fchain.asm):00132         
                      (       fchain.asm):00133         * The areas to copy overlap: do special move routine
0448 3476             (       fchain.asm):00134                  pshs  d,x,y,u      save regs
                      (       fchain.asm):00135                  IFNE  H6309
                      (       fchain.asm):00136                  addr  y,x          go to the END of the area to copy FROM
                      (       fchain.asm):00137                  addr  y,u          end of area to copy TO
                      (       fchain.asm):00138                  ELSE
044A 1F20             (       fchain.asm):00139                  tfr   y,d
044C 308B             (       fchain.asm):00140                  leax  d,x
044E 33CB             (       fchain.asm):00141                  leau  d,u
                      (       fchain.asm):00142                  ENDC
                      (       fchain.asm):00143         
                      (       fchain.asm):00144         * This all appears to be doing a copy where destination <= source,
                      (       fchain.asm):00145         * in the same address space.
0450 E6E4             (       fchain.asm):00146         L0457    ldb   ,s           grab ??
0452 301F             (       fchain.asm):00147                  leax  -1,x         back up one
0454 103F49           (       fchain.asm):00148                  os9   F$LDABX
0457 1E13             (       fchain.asm):00149                  exg   x,u
0459 E661             (       fchain.asm):00150                  ldb   1,s
045B 301F             (       fchain.asm):00151                  leax  -1,x         back up another one
045D 103F4A           (       fchain.asm):00152                  os9   F$STABX
0460 1E13             (       fchain.asm):00153                  exg   x,u
0462 313F             (       fchain.asm):00154                  leay  -1,y
0464 26EA             (       fchain.asm):00155                  bne   L0457
                      (       fchain.asm):00156         
0466 3576             (       fchain.asm):00157                  puls  d,x,y,u      restore regs
0468 2003             (       fchain.asm):00158                  bra   L0474        skip over F$Move
                      (       fchain.asm):00159         
046A 103F38           (       fchain.asm):00160         L0471    os9   F$Move       move data over?
046D 96D0             (       fchain.asm):00161         L0474    lda   <D.SysTsk    get system task number
046F AEE4             (       fchain.asm):00162                  ldx   ,s           old process dsc ptr
0471 EE04             (       fchain.asm):00163                  ldu   P$SP,x
0473 308901F4         (       fchain.asm):00164                  leax  >(P$Stack-R$Size),x
0477 108E000C         (       fchain.asm):00165                  ldy   #R$Size
047B 103F38           (       fchain.asm):00166                  os9   F$Move       move the stack over
047E 3550             (       fchain.asm):00167                  puls  u,x          restore new, old process dsc's
0480 A6C4             (       fchain.asm):00168                  lda   P$ID,u
0482 17FEFB           (       fchain.asm):00169                  lbsr  L0386        check alarms
0485 103F40           (       fchain.asm):00170                  os9   F$DelTsk     delete the old task
0488 1A50             (       fchain.asm):00171                  orcc  #IntMasks
048A DC4A             (       fchain.asm):00172                  ldd   <D.SysPrc
048C DD50             (       fchain.asm):00173                  std   <D.Proc
                      (       fchain.asm):00174                  IFNE   H6309
                      (       fchain.asm):00175                  aim   #^SysState,P$State,x
                      (       fchain.asm):00176                  ELSE
048E A60C             (       fchain.asm):00177                  lda   P$State,x
0490 847F             (       fchain.asm):00178                  anda  #^SysState
0492 A70C             (       fchain.asm):00179                  sta   P$State,x
                      (       fchain.asm):00180                  ENDC
0494 103F2C           (       fchain.asm):00181                  os9   F$AProc      activate the process
0497 103F2D           (       fchain.asm):00182                  os9   F$NProc      go to it
                      (       fchain.asm):00183         
                      (       fchain.asm):00184         * comes here on error with link to new module
049A 3550             (       fchain.asm):00185         L04A1    puls  u,x
049C 9F50             (       fchain.asm):00186                  stx   <D.Proc
049E 3404             (       fchain.asm):00187                  pshs  b
04A0 A6C4             (       fchain.asm):00188                  lda   ,u
04A2 17FEDB           (       fchain.asm):00189                  lbsr  L0386        kill signals
04A5 3504             (       fchain.asm):00190                  puls  b
04A7 103F06           (       fchain.asm):00191                  os9   F$Exit       exit from the process with error condition
                      (       fchain.asm):00192         
                      (       fchain.asm):00193         * Setup new process DAT image with module
04AA 3476             (       fchain.asm):00194         L04B1    pshs   d,x,y,u     preserve everything
04AC DC50             (       fchain.asm):00195                  ldd    <D.Proc     get pointer to current process
04AE 3406             (       fchain.asm):00196                  pshs   d           save it
04B0 9F50             (       fchain.asm):00197                  stx    <D.Proc     save pointer to new process
04B2 A641             (       fchain.asm):00198                  lda    R$A,u       get module type
04B4 AE44             (       fchain.asm):00199                  ldx    R$X,u       get pointer to module name
04B6 10AEE4           (       fchain.asm):00200                  ldy    ,s          get pointer to current process
04B9 31A840           (       fchain.asm):00201                  leay   P$DATImg,y  point to DAT image
04BC 103F34           (       fchain.asm):00202                  os9    F$SLink     map it into new process DAT image
04BF 240F             (       fchain.asm):00203                  bcc    L04D7       no error, keep going
04C1 ECE4             (       fchain.asm):00204                  ldd    ,s          restore to current process
04C3 DD50             (       fchain.asm):00205                  std    <D.Proc
04C5 EE64             (       fchain.asm):00206                  ldu    4,s         get pointer to new process
04C7 103F01           (       fchain.asm):00207                  os9    F$Load      try & load it
04CA 2404             (       fchain.asm):00208                  bcc    L04D7       no error, keep going
04CC 3264             (       fchain.asm):00209                  leas   4,s         purge stack
04CE 35F0             (       fchain.asm):00210                  puls   x,y,u,pc    restore & return
                      (       fchain.asm):00211         *
04D0 EF62             (       fchain.asm):00212         L04D7    stu    2,s         save pointer to module
04D2 3422             (       fchain.asm):00213                  pshs   a,y         save module type & entry point
04D4 EE6B             (       fchain.asm):00214                  ldu    $0B,s       restore register stack pointer
04D6 AF44             (       fchain.asm):00215                  stx    R$X,u       save updated name pointer
04D8 AE67             (       fchain.asm):00216                  ldx    $07,s       restore process pointer
04DA 9F50             (       fchain.asm):00217                  stx    <D.Proc     make it current
04DC EC65             (       fchain.asm):00218                  ldd    5,s         get pointer to new module
04DE ED8811           (       fchain.asm):00219                  std    P$PModul,x  save it into process descriptor
04E1 3502             (       fchain.asm):00220                  puls   a           restore module type
04E3 8111             (       fchain.asm):00221                  cmpa   #Prgrm+Objct regular module?
04E5 270D             (       fchain.asm):00222                  beq    L04FB       yes, go
04E7 81C1             (       fchain.asm):00223                  cmpa   #Systm+Objct system module?
04E9 2709             (       fchain.asm):00224                  beq    L04FB
                      (       fchain.asm):00225                  IFNE   H6309
                      (       fchain.asm):00226         *--- these lines added to allow 6309 native mode modules to be executed
                      (       fchain.asm):00227                  cmpa   #Prgrm+Obj6309 regular module?
                      (       fchain.asm):00228                  beq    L04FB       yes, go
                      (       fchain.asm):00229                  cmpa   #Systm+Obj6309 system module?
                      (       fchain.asm):00230                  beq    L04FB
                      (       fchain.asm):00231         *---
                      (       fchain.asm):00232                  ENDC
04EB C6EA             (       fchain.asm):00233                  ldb    #E$NEMod    return unknown module
04ED 3262             (       fchain.asm):00234         L04F4    leas   2,s         purge stack
04EF E763             (       fchain.asm):00235                  stb    3,s         save error
04F1 53               (       fchain.asm):00236                  comb               set carry
04F2 2043             (       fchain.asm):00237                  bra    L053E       return
                      (       fchain.asm):00238         * Setup up data memory
04F4 CC000B           (       fchain.asm):00239         L04FB    ldd    #M$Mem      get offset to module memory size
04F7 318840           (       fchain.asm):00240                  leay   P$DATImg,x  get pointer to DAT image
04FA AE8811           (       fchain.asm):00241                  ldx    P$PModul,x  get pointer to module header
04FD 103F48           (       fchain.asm):00242                  os9    F$LDDDXY    get module memory size
0500 A142             (       fchain.asm):00243                  cmpa   R$B,u       bigger or smaller than callers request?
0502 2403             (       fchain.asm):00244                  bcc    L050E       bigger, use it instead
0504 A642             (       fchain.asm):00245                  lda    R$B,u       get callers memory size instead
0506 5F               (       fchain.asm):00246                  clrb               clear LSB of mem size
0507 103F07           (       fchain.asm):00247         L050E    os9    F$Mem       try & get the data memory
050A 25E1             (       fchain.asm):00248                  bcs    L04F4       can't do it, exit with error
050C AE66             (       fchain.asm):00249                  ldx    6,s         restore process pointer
050E 318901F4         (       fchain.asm):00250                  leay   (P$Stack-R$Size),x point to new register stack
0512 3406             (       fchain.asm):00251                  pshs   d           preserve memory size
0514 A346             (       fchain.asm):00252                  subd   R$Y,u       take off size of paramater area
0516 ED24             (       fchain.asm):00253                  std    R$X,y       save pointer to parameter area
0518 83000C           (       fchain.asm):00254                  subd   #R$Size     take off size of register stack
051B ED04             (       fchain.asm):00255                  std    P$SP,x      save new SP
051D EC46             (       fchain.asm):00256                  ldd    R$Y,u       get parameter count
051F ED21             (       fchain.asm):00257                  std    R$A,y       save it to new process
0521 ED66             (       fchain.asm):00258                  std    6,s         save it for myself to
0523 3516             (       fchain.asm):00259                  puls   d,x         restore top of mem & program entry point
0525 ED26             (       fchain.asm):00260                  std    R$Y,y       set top of mem pointer
0527 EC48             (       fchain.asm):00261                  ldd    R$U,u       get pointer to parameters
0529 ED66             (       fchain.asm):00262                  std    6,s
052B 8680             (       fchain.asm):00263                  lda    #Entire
052D A7A4             (       fchain.asm):00264                  sta    R$CC,y      save condition code
052F 4F               (       fchain.asm):00265                  clra
0530 A723             (       fchain.asm):00266                  sta    R$DP,y      save direct page
0532 5F               (       fchain.asm):00267                  clrb
0533 ED28             (       fchain.asm):00268                  std    R$U,y       save data area start
0535 AF2A             (       fchain.asm):00269                  stx    R$PC,y      save program entry point
0537 3506             (       fchain.asm):00270         L053E    puls   d           restore process pointer
0539 DD50             (       fchain.asm):00271                  std    <D.Proc     save it as current
053B 35F6             (       fchain.asm):00272                  puls   d,x,y,u,pc
                      (/home/strick/go/s):00377         
                      (/home/strick/go/s):00378                  use    fexit.asm
                      (        fexit.asm):00001         **************************************************
                      (        fexit.asm):00002         * System Call: F$Exit
                      (        fexit.asm):00003         *
                      (        fexit.asm):00004         * Function: Causes a process to cease execution and exit
                      (        fexit.asm):00005         *
                      (        fexit.asm):00006         * Input:  B = Status code to be returned to parent process
                      (        fexit.asm):00007         *
                      (        fexit.asm):00008         * Output: None
                      (        fexit.asm):00009         *
                      (        fexit.asm):00010         * Error:  CC = C bit set; B = error code
                      (        fexit.asm):00011         *
053D 9E50             (        fexit.asm):00012         FExit    ldx   <D.Proc      get current process pointer
053F 8D5D             (        fexit.asm):00013                  bsr   L05A5        close all the paths
0541 E642             (        fexit.asm):00014                  ldb   R$B,u        get exit signal
0543 E78819           (        fexit.asm):00015                  stb   <P$Signal,x  and save in proc desc
0546 3101             (        fexit.asm):00016                  leay  P$PID,x
0548 2012             (        fexit.asm):00017                  bra   L0563        go find kids...
                      (        fexit.asm):00018         
054A 6F22             (        fexit.asm):00019         L0551    clr   P$SID,y      clear child ID
054C 170637           (        fexit.asm):00020                  lbsr  L0B2E        find its proc desc
054F 6F21             (        fexit.asm):00021                  clr   1,y          clear sibling ID
                      (        fexit.asm):00022                  IFNE  H6309
                      (        fexit.asm):00023                  tim   #Dead,P$State,y
                      (        fexit.asm):00024                  ELSE
0551 A62C             (        fexit.asm):00025                  lda   P$State,y    get child's state
0553 8501             (        fexit.asm):00026                  bita  #Dead        is it dead?
                      (        fexit.asm):00027                  ENDC
0555 2705             (        fexit.asm):00028                  beq   L0563        ...no
0557 A6A4             (        fexit.asm):00029                  lda   P$ID,y       else get its ID
0559 17FE24           (        fexit.asm):00030                  lbsr  L0386        and destroy its proc desc
055C A622             (        fexit.asm):00031         L0563    lda   P$SID,y      get child ID
055E 26EA             (        fexit.asm):00032                  bne   L0551        ...yes, loop
                      (        fexit.asm):00033         
0560 3184             (        fexit.asm):00034                  leay  ,x           kid's proc desc
0562 8E0047           (        fexit.asm):00035                  ldx   #D.WProcQ-P$Queue
0565 10DECC           (        fexit.asm):00036                  lds   <D.SysStk    use system stack
0568 3401             (        fexit.asm):00037                  pshs  cc           save CC
056A 1A50             (        fexit.asm):00038                  orcc  #IntMasks    halt interrupts
056C A621             (        fexit.asm):00039                  lda   P$PID,y      get our parent ID
056E 260D             (        fexit.asm):00040                  bne   L0584        and wake him up
                      (        fexit.asm):00041         
0570 3501             (        fexit.asm):00042                  puls  cc           restore CC
0572 A6A4             (        fexit.asm):00043                  lda   P$ID,y       get our ID
0574 17FE09           (        fexit.asm):00044                  lbsr  L0386        give up our proc desc
0577 2022             (        fexit.asm):00045                  bra   L05A2        and start next active process
                      (        fexit.asm):00046         
                      (        fexit.asm):00047         * Search for Waiting Parent
0579 A184             (        fexit.asm):00048         L0580    cmpa  P$ID,x       is proc desc our parent's?
057B 270E             (        fexit.asm):00049                  beq   L0592        ...yes!
                      (        fexit.asm):00050         
057D 3384             (        fexit.asm):00051         L0584    leau  ,x           U is base desc
057F AE0D             (        fexit.asm):00052                  ldx   P$Queue,x    X is next waiter
0581 26F6             (        fexit.asm):00053                  bne   L0580        see if parent
0583 3501             (        fexit.asm):00054                  puls  cc           restore CC
0585 8681             (        fexit.asm):00055                  lda   #(SysState!Dead) set us to system state
0587 A72C             (        fexit.asm):00056                  sta   P$State,y    and mark us as dead
0589 2010             (        fexit.asm):00057                  bra   L05A2        so F$Wait will find us; next proc
                      (        fexit.asm):00058         
                      (        fexit.asm):00059         * Found Parent (X)
058B EC0D             (        fexit.asm):00060         L0592    ldd   P$Queue,x    take parent out of wait queue
058D ED4D             (        fexit.asm):00061                  std   P$Queue,u
058F 3501             (        fexit.asm):00062                  puls  cc           restore CC
0591 EE04             (        fexit.asm):00063                  ldu   P$SP,x       get parent's stack register
0593 EE48             (        fexit.asm):00064                  ldu   R$U,u
0595 17FDCE           (        fexit.asm):00065                  lbsr  L036C        get child's death signal to parent
0598 103F2C           (        fexit.asm):00066                  os9   F$AProc      move parent to active queue
059B 103F2D           (        fexit.asm):00067         L05A2    os9   F$NProc      start next proc in active queue
                      (        fexit.asm):00068         
                      (        fexit.asm):00069         * Close Proc I/O Paths & Unlink Mem
                      (        fexit.asm):00070         * Entry: U=Register stack pointer
059E 3440             (        fexit.asm):00071         L05A5    pshs  u            preserve register stack pointer
05A0 C610             (        fexit.asm):00072                  ldb   #NumPaths    get maximum # of paths
05A2 318830           (        fexit.asm):00073                  leay  P$Path,x     point to path table
05A5 A6A0             (        fexit.asm):00074         L05AC    lda   ,y+          path open?
05A7 2709             (        fexit.asm):00075                  beq   L05B9        no, skip ahead
05A9 6F3F             (        fexit.asm):00076                  clr   -1,y         clear the path block #
05AB 3404             (        fexit.asm):00077                  pshs  b            preserve count
05AD 103F8F           (        fexit.asm):00078                  os9   I$Close      close the path
05B0 3504             (        fexit.asm):00079                  puls  b            restore count
05B2 5A               (        fexit.asm):00080         L05B9    decb               done?
05B3 26F0             (        fexit.asm):00081                  bne   L05AC        no, continue looking
                      (        fexit.asm):00082         
                      (        fexit.asm):00083         * Clean up memory process had
05B5 4F               (        fexit.asm):00084                  clra               get starting block
05B6 E607             (        fexit.asm):00085                  ldb   P$PagCnt,x   get page count
05B8 270A             (        fexit.asm):00086                  beq   L05CB        none there, skip ahead
05BA CB1F             (        fexit.asm):00087                  addb  #$1F         round it up
05BC 54               (        fexit.asm):00088                  lsrb               divide by 32 to get block count
05BD 54               (        fexit.asm):00089                  lsrb
05BE 54               (        fexit.asm):00090                  lsrb
05BF 54               (        fexit.asm):00091                  lsrb
05C0 54               (        fexit.asm):00092                  lsrb
05C1 103F3B           (        fexit.asm):00093                  os9   F$DelImg     delete the ram & DAT image
                      (        fexit.asm):00094         * Unlink the module
05C4 DC50             (        fexit.asm):00095         L05CB    ldd   <D.Proc
05C6 3406             (        fexit.asm):00096                  pshs  d
05C8 9F50             (        fexit.asm):00097                  stx   <D.Proc      set bad proc
05CA EE8811           (        fexit.asm):00098                  ldu   P$PModul,x   program pointer
05CD 103F02           (        fexit.asm):00099                  os9   F$UnLink     unlink aborted program
05D0 3546             (        fexit.asm):00100                  puls  u,b,a
05D2 DD50             (        fexit.asm):00101                  std   <D.Proc      reset parent proc
05D4 103F40           (        fexit.asm):00102                  os9   F$DelTsk     release X's task #
05D7 39               (        fexit.asm):00103                  rts
                      (/home/strick/go/s):00379         
                      (/home/strick/go/s):00380                  use    fmem.asm
                      (         fmem.asm):00001         **************************************************
                      (         fmem.asm):00002         * System Call: F$Mem
                      (         fmem.asm):00003         *
                      (         fmem.asm):00004         * Function: Resize data memory area
                      (         fmem.asm):00005         *
                      (         fmem.asm):00006         * Input:  D = Desired memory area (in bytes)
                      (         fmem.asm):00007         *
                      (         fmem.asm):00008         * Output: Y = Address of new memory area upper bound
                      (         fmem.asm):00009         *         D = New memory area size in bytes
                      (         fmem.asm):00010         *
                      (         fmem.asm):00011         * Error:  CC = C bit set; B = error code
                      (         fmem.asm):00012         *
05D8 9E50             (         fmem.asm):00013         FMem     ldx   <D.Proc      get current process pointer
05DA EC41             (         fmem.asm):00014                  ldd   R$D,u        get requested memory size
05DC 2752             (         fmem.asm):00015                  beq   L0638        he wants current size, return it
05DE C300FF           (         fmem.asm):00016                  addd  #$00FF       round up to nearest page
05E1 2403             (         fmem.asm):00017                  bcc   L05EE        no overflow, skip ahead
05E3 C6CF             (         fmem.asm):00018                  ldb   #E$MemFul    get mem full error
05E5 39               (         fmem.asm):00019                  rts                return
                      (         fmem.asm):00020         
05E6 A107             (         fmem.asm):00021         L05EE    cmpa  P$PagCnt,x   match current page count?
05E8 2746             (         fmem.asm):00022                  beq   L0638        yes, return it
05EA 3402             (         fmem.asm):00023                  pshs  a            save page count
05EC 240C             (         fmem.asm):00024                  bhs   L0602        he's requesting more, skip ahead
05EE 4A               (         fmem.asm):00025                  deca               subtract a page
05EF C6F4             (         fmem.asm):00026                  ldb   #($100-R$Size) get size of default stack - R$Size
05F1 10A304           (         fmem.asm):00027                  cmpd  P$SP,x       shrinking it into stack?
05F4 2404             (         fmem.asm):00028                  bhs   L0602        no, skip ahead
05F6 C6DF             (         fmem.asm):00029                  ldb   #E$DelSP     get error code (223)
05F8 2025             (         fmem.asm):00030                  bra   L0627        return error
05FA A607             (         fmem.asm):00031         L0602    lda   P$PagCnt,x   get page count
05FC 8B1F             (         fmem.asm):00032                  adda  #$1F         round it up
05FE 44               (         fmem.asm):00033                  lsra               divide by 32 to get block count
05FF 44               (         fmem.asm):00034                  lsra
0600 44               (         fmem.asm):00035                  lsra
0601 44               (         fmem.asm):00036                  lsra
0602 44               (         fmem.asm):00037                  lsra
0603 E6E4             (         fmem.asm):00038                  ldb   ,s
0605 CB1F             (         fmem.asm):00039                  addb  #$1F
0607 2404             (         fmem.asm):00040                  bcc   L0615        still have room, skip ahead
0609 C6CF             (         fmem.asm):00041                  ldb   #E$MemFul
060B 2012             (         fmem.asm):00042                  bra   L0627
060D 54               (         fmem.asm):00043         L0615    lsrb               divide by 32 to get block count
060E 54               (         fmem.asm):00044                  lsrb
060F 54               (         fmem.asm):00045                  lsrb
0610 54               (         fmem.asm):00046                  lsrb
0611 54               (         fmem.asm):00047                  lsrb
                      (         fmem.asm):00048                  IFNE  H6309
                      (         fmem.asm):00049                  subr  a,b          same count?
                      (         fmem.asm):00050                  ELSE
0612 3402             (         fmem.asm):00051                  pshs  a
0614 E0E0             (         fmem.asm):00052                  subb  ,s+
                      (         fmem.asm):00053                  ENDC
0616 2714             (         fmem.asm):00054                  beq   L0634        yes, save it
0618 250A             (         fmem.asm):00055                  bcs   L062C        overflow, delete the ram we just got
061A 103F3A           (         fmem.asm):00056                  os9   F$AllImg     allocate the image in DAT
061D 240D             (         fmem.asm):00057                  bcc   L0634        no error, skip ahead
061F 3261             (         fmem.asm):00058         L0627    leas  1,s          purge stack
0621 1A01             (         fmem.asm):00059         L0629    orcc  #Carry       set carry for error
0623 39               (         fmem.asm):00060                  rts                return
                      (         fmem.asm):00061         
     0624             (         fmem.asm):00062         L062C    equ   *
                      (         fmem.asm):00063                  IFNE  H6309
                      (         fmem.asm):00064                  addr  b,a
                      (         fmem.asm):00065                  ELSE
0624 3404             (         fmem.asm):00066                  pshs  b
0626 ABE0             (         fmem.asm):00067                  adda  ,s+
                      (         fmem.asm):00068                  ENDC
0628 50               (         fmem.asm):00069                  negb
0629 103F3B           (         fmem.asm):00070                  os9   F$DelImg
062C 3502             (         fmem.asm):00071         L0634    puls  a            restore requested page count
062E A707             (         fmem.asm):00072                  sta   P$PagCnt,x   save it into process descriptor
0630 A607             (         fmem.asm):00073         L0638    lda   P$PagCnt,x   get page count
0632 5F               (         fmem.asm):00074                  clrb               clear LSB
0633 ED41             (         fmem.asm):00075                  std   R$D,u        save mem byte count to caller
0635 ED46             (         fmem.asm):00076                  std   R$Y,u        save memory upper limit to caller
0637 39               (         fmem.asm):00077                  rts                return
                      (/home/strick/go/s):00381         
                      (/home/strick/go/s):00382                  use    fsend.asm
                      (        fsend.asm):00001         **************************************************
                      (        fsend.asm):00002         * System Call: F$Send
                      (        fsend.asm):00003         *
                      (        fsend.asm):00004         * Function: Send a signal to a process
                      (        fsend.asm):00005         *
                      (        fsend.asm):00006         * Input:  A = Receiver's process ID
                      (        fsend.asm):00007         *         B = Signal code
                      (        fsend.asm):00008         *
                      (        fsend.asm):00009         * Output: None
                      (        fsend.asm):00010         *
                      (        fsend.asm):00011         * Error:  CC = C bit set; B = error code
                      (        fsend.asm):00012         *
0638 9E50             (        fsend.asm):00013         FSend    ldx   <D.Proc      get current process pointer
063A A641             (        fsend.asm):00014                  lda   R$A,u        get destination ID
063C 260C             (        fsend.asm):00015                  bne   L0652        it's ok, go on
063E 4C               (        fsend.asm):00016                  inca               add one
                      (        fsend.asm):00017         * Send signal to ALL process's
063F A184             (        fsend.asm):00018         L0647    cmpa  P$ID,x       find myself?
0641 2702             (        fsend.asm):00019                  beq   L064D        yes, skip it
0643 8D05             (        fsend.asm):00020                  bsr   L0652        send the signal
0645 4C               (        fsend.asm):00021         L064D    inca               move to next process
0646 26F7             (        fsend.asm):00022                  bne   L0647        go send it
0648 5F               (        fsend.asm):00023                  clrb               clear errors
0649 39               (        fsend.asm):00024                  rts                return
                      (        fsend.asm):00025         
                      (        fsend.asm):00026         * X   = process descriptor ptr of singal sender
                      (        fsend.asm):00027         * A   = process ID to send signal to
                      (        fsend.asm):00028         * R$B = signal code
064A 170539           (        fsend.asm):00029         L0652    lbsr  L0B2E        get pointer to destination descriptor
064D 3463             (        fsend.asm):00030                  pshs  cc,a,y,u     preserve registers
064F 2511             (        fsend.asm):00031                  bcs   L066A        error, can't get pointer return
0651 6D42             (        fsend.asm):00032                  tst   R$B,u        kill signal?
0653 260F             (        fsend.asm):00033                  bne   L066D        no, go on
0655 EC08             (        fsend.asm):00034                  ldd   P$User,x     get user #
0657 270B             (        fsend.asm):00035                  beq   L066D        he's super user, go on
0659 10A328           (        fsend.asm):00036                  cmpd  P$User,y     does he own the process?
065C 2706             (        fsend.asm):00037                  beq   L066D        yes, send the signal
065E C6E0             (        fsend.asm):00038                  ldb   #E$BPrcID    get bad process error
0660 6CE4             (        fsend.asm):00039                  inc   ,s           set Carry in CC on stack
0662 35E3             (        fsend.asm):00040         L066A    puls  cc,a,y,u,pc  return
                      (        fsend.asm):00041         
                      (        fsend.asm):00042         * Y = process descriptor of process receiving signal
0664 1A50             (        fsend.asm):00043         L066D    orcc  #IntMasks    shut down IRQ's
0666 E642             (        fsend.asm):00044                  ldb   R$B,u        get signal code
0668 2608             (        fsend.asm):00045                  bne   L067B        not a kill signal, skip ahead
066A C6E4             (        fsend.asm):00046                  ldb   #E$PrcAbt    get error 228
                      (        fsend.asm):00047                  IFNE  H6309
                      (        fsend.asm):00048                  oim   #Condem,P$State,y condem process
066C                  (        fsend.asm):00049         L067B    aim   #^Suspend,P$State,y   take process out of suspend state
                      (        fsend.asm):00050                  ELSE
066C A62C             (        fsend.asm):00051                  lda   P$State,y
066E 8A02             (        fsend.asm):00052                  ora   #Condem
0670 A72C             (        fsend.asm):00053                  sta   P$State,y
0672 A62C             (        fsend.asm):00054         L067B    lda   P$State,y
0674 84F7             (        fsend.asm):00055                  anda  #^Suspend
0676 A72C             (        fsend.asm):00056                  sta   P$State,y
                      (        fsend.asm):00057                  ENDC
0678 A6A819           (        fsend.asm):00058                  lda   <P$Signal,y  already have a pending signal?
067B 2709             (        fsend.asm):00059                  beq   L068F        nope, go on
067D 4A               (        fsend.asm):00060                  deca               is it a wakeup signal?
067E 2706             (        fsend.asm):00061                  beq   L068F        yes, skip ahead
0680 6CE4             (        fsend.asm):00062                  inc   ,s           set carry on stack
0682 C6E9             (        fsend.asm):00063                  ldb   #E$USigP     get pending signal error
0684 35E3             (        fsend.asm):00064                  puls  cc,a,y,u,pc  return
                      (        fsend.asm):00065         
                      (        fsend.asm):00066         * Update sleeping process queue
0686 E7A819           (        fsend.asm):00067         L068F    stb   P$Signal,y   save signal code in descriptor
0689 8E0049           (        fsend.asm):00068                  ldx   #(D.SProcQ-P$Queue) get pointer to sleeping process queue
                      (        fsend.asm):00069                  IFNE  H6309
                      (        fsend.asm):00070                  clrd               Faster than 2 memory clears
                      (        fsend.asm):00071                  ELSE
068C 4F               (        fsend.asm):00072                  clra
068D 5F               (        fsend.asm):00073                  clrb
                      (        fsend.asm):00074                  ENDC
068E 3184             (        fsend.asm):00075         L0697    leay  ,x           point Y to this process
0690 AE0D             (        fsend.asm):00076                  ldx   P$Queue,x    get pointer to next process in chain
0692 2736             (        fsend.asm):00077                  beq   L06D3        last one, go check waiting list
0694 EE04             (        fsend.asm):00078                  ldu   P$SP,x       get process stack pointer
0696 E344             (        fsend.asm):00079                  addd  R$X,u        add his sleep count
0698 AC62             (        fsend.asm):00080                  cmpx  2,s          is it destination process?
069A 26F2             (        fsend.asm):00081                  bne   L0697        no, skip to next process
069C 3406             (        fsend.asm):00082                  pshs  d            save sleep count
                      (        fsend.asm):00083                  IFNE  H6309
                      (        fsend.asm):00084                  tim   #TimSleep,P$State,x
                      (        fsend.asm):00085                  ELSE
069E A60C             (        fsend.asm):00086                  lda   P$State,x
06A0 8540             (        fsend.asm):00087                  bita  #TimSleep
                      (        fsend.asm):00088                  ENDC
06A2 2722             (        fsend.asm):00089                  beq   L06CF        no, update queue
06A4 ECE4             (        fsend.asm):00090                  ldd   ,s
06A6 271E             (        fsend.asm):00091                  beq   L06CF
06A8 EC44             (        fsend.asm):00092                  ldd   R$X,u
                      (        fsend.asm):00093                  IFNE  H6309
                      (        fsend.asm):00094                  ldw   ,s
                      (        fsend.asm):00095                  stw   R$X,u
                      (        fsend.asm):00096                  ELSE
06AA 3406             (        fsend.asm):00097                  pshs  d
06AC EC62             (        fsend.asm):00098                  ldd   2,s
06AE ED44             (        fsend.asm):00099                  std   R$X,u
06B0 3506             (        fsend.asm):00100                  puls  d
                      (        fsend.asm):00101                  ENDC
06B2 EE0D             (        fsend.asm):00102                  ldu   P$Queue,x
06B4 2710             (        fsend.asm):00103                  beq   L06CF
06B6 EDE4             (        fsend.asm):00104                  std   ,s
                      (        fsend.asm):00105                  IFNE   H6309
                      (        fsend.asm):00106                  tim   #TimSleep,P$State,u
                      (        fsend.asm):00107                  ELSE
06B8 A64C             (        fsend.asm):00108                  lda   P$State,u
06BA 8540             (        fsend.asm):00109                  bita  #TimSleep
                      (        fsend.asm):00110                  ENDC
06BC 2708             (        fsend.asm):00111                  beq   L06CF
06BE EE44             (        fsend.asm):00112                  ldu   P$SP,u
06C0 ECE4             (        fsend.asm):00113                  ldd   ,s
06C2 E344             (        fsend.asm):00114                  addd  R$X,u
06C4 ED44             (        fsend.asm):00115                  std   R$X,u
06C6 3262             (        fsend.asm):00116         L06CF    leas  2,s
06C8 200D             (        fsend.asm):00117                  bra   L06E0
06CA 8E0047           (        fsend.asm):00118         L06D3    ldx   #(D.WProcQ-P$Queue)
06CD 3184             (        fsend.asm):00119         L06D6    leay  ,x
06CF AE0D             (        fsend.asm):00120                  ldx   P$Queue,x
06D1 2718             (        fsend.asm):00121                  beq   L06F4
06D3 AC62             (        fsend.asm):00122                  cmpx  2,s
06D5 26F6             (        fsend.asm):00123                  bne   L06D6
06D7 EC0D             (        fsend.asm):00124         L06E0    ldd   P$Queue,x
06D9 ED2D             (        fsend.asm):00125                  std   P$Queue,y
06DB A68819           (        fsend.asm):00126                  lda   P$Signal,x
06DE 4A               (        fsend.asm):00127                  deca
06DF 2607             (        fsend.asm):00128                  bne   L06F1
06E1 A78819           (        fsend.asm):00129                  sta   P$Signal,x
06E4 A6E4             (        fsend.asm):00130                  lda   ,s
06E6 1F8A             (        fsend.asm):00131                  tfr   a,cc
06E8 103F2C           (        fsend.asm):00132         L06F1    os9   F$AProc      activate the process
06EB 35E3             (        fsend.asm):00133         L06F4    puls  cc,a,y,u,pc  restore & return
                      (/home/strick/go/s):00383         
                      (/home/strick/go/s):00384                  use    ficpt.asm
                      (        ficpt.asm):00001         **************************************************
                      (        ficpt.asm):00002         * System Call: F$Icpt
                      (        ficpt.asm):00003         *
                      (        ficpt.asm):00004         * Function: Sets the function to be called when a signal arrives.
                      (        ficpt.asm):00005         *
                      (        ficpt.asm):00006         *
                      (        ficpt.asm):00007         * Input:  X = Address of intercept routine
                      (        ficpt.asm):00008         *         U = Address of intercept routine data area
                      (        ficpt.asm):00009         *
                      (        ficpt.asm):00010         * Output: None
                      (        ficpt.asm):00011         *
                      (        ficpt.asm):00012         * Error:  CC = C bit set; B = error code
                      (        ficpt.asm):00013         *
06ED 9E50             (        ficpt.asm):00014         FIcpt    ldx   <D.Proc      get current process pointer
06EF EC44             (        ficpt.asm):00015                  ldd   R$X,u        Get vector for signal trap handler
                      (        ficpt.asm):00016                  IFNE  H6309
                      (        ficpt.asm):00017                  ldw   R$U,u        Get data area ptr for signal trap handler
                      (        ficpt.asm):00018                  stq   P$SigVec,x   Save them in descriptor
                      (        ficpt.asm):00019                  ELSE
06F1 ED881A           (        ficpt.asm):00020                  std   P$SigVec,x
06F4 EC48             (        ficpt.asm):00021                  ldd   R$U,u
06F6 ED881C           (        ficpt.asm):00022                  std   P$SigDat,x
                      (        ficpt.asm):00023                  ENDC
06F9 5F               (        ficpt.asm):00024                  clrb               clear errors
06FA 39               (        ficpt.asm):00025                  rts                return
                      (/home/strick/go/s):00385         
                      (/home/strick/go/s):00386                  use    fsleep.asm
                      (       fsleep.asm):00001         **************************************************
                      (       fsleep.asm):00002         * System Call: F$Sleep
                      (       fsleep.asm):00003         *
                      (       fsleep.asm):00004         * Function: Put the calling process to sleep
                      (       fsleep.asm):00005         *
                      (       fsleep.asm):00006         * Input:  X = Sleep time in ticks (0 = forever)
                      (       fsleep.asm):00007         *
                      (       fsleep.asm):00008         * Output: X = Decremented by the number of ticks that the process slept
                      (       fsleep.asm):00009         *
                      (       fsleep.asm):00010         * Error:  CC = C bit set; B = error code
                      (       fsleep.asm):00011         *
06FB 3401             (       fsleep.asm):00012         FSleep   pshs  cc           preserve interupt status
06FD 9E50             (       fsleep.asm):00013                  ldx   <D.Proc      Get current process pointer
                      (       fsleep.asm):00014         
                      (       fsleep.asm):00015         * F$Sleep bug fix.  Check if we're in system state.  If so return because you
                      (       fsleep.asm):00016         * should never sleep in system state.
06FF 9C4A             (       fsleep.asm):00017                  cmpx  <D.SysPrc    is it system process?
0701 2763             (       fsleep.asm):00018                  beq   SkpSleep     skip sleep call
0703 1A50             (       fsleep.asm):00019                  orcc  #IntMasks    disable interupts
0705 A68819           (       fsleep.asm):00020                  lda   P$Signal,x   get pending signal
0708 2713             (       fsleep.asm):00021                  beq   L0722        none there, skip ahead
070A 4A               (       fsleep.asm):00022                  deca               wakeup signal?
070B 2603             (       fsleep.asm):00023                  bne   L0715        no, skip ahead
070D A78819           (       fsleep.asm):00024                  sta   P$Signal,x   clear pending signal so we can wake up process
0710                  (       fsleep.asm):00025         L0715
                      (       fsleep.asm):00026                  IFNE   H6309
                      (       fsleep.asm):00027                  aim   #^Suspend,P$State,x
                      (       fsleep.asm):00028                  ELSE
0710 A60C             (       fsleep.asm):00029                  lda   P$State,x
0712 84F7             (       fsleep.asm):00030                  anda  #^Suspend
0714 A70C             (       fsleep.asm):00031                  sta   P$State,x
                      (       fsleep.asm):00032                  ENDC
0716 3501             (       fsleep.asm):00033         L071B    puls  cc
0718 103F2C           (       fsleep.asm):00034                  os9   F$AProc      activate the process
071B 205E             (       fsleep.asm):00035                  bra   L0780
071D EC44             (       fsleep.asm):00036         L0722    ldd   R$X,u        get callers X (contains sleep tick count)
071F 2747             (       fsleep.asm):00037                  beq   L076D        done, wake it up
                      (       fsleep.asm):00038                  IFNE  H6309
                      (       fsleep.asm):00039                  decd               subtract 1 from tick count
                      (       fsleep.asm):00040                  ELSE
0721 830001           (       fsleep.asm):00041                  subd  #$0001
                      (       fsleep.asm):00042                  ENDC
0724 ED44             (       fsleep.asm):00043                  std   R$X,u        save it back
0726 27EE             (       fsleep.asm):00044                  beq   L071B        zero, wake up process
0728 3430             (       fsleep.asm):00045                  pshs  x,y
072A 8E0049           (       fsleep.asm):00046                  ldx   #(D.SProcQ-P$Queue)
072D ED44             (       fsleep.asm):00047         L0732    std   R$X,u
072F AF62             (       fsleep.asm):00048                  stx   2,s
0731 AE0D             (       fsleep.asm):00049                  ldx   P$Queue,x
0733 2715             (       fsleep.asm):00050                  beq   L074F
                      (       fsleep.asm):00051                  IFNE   H6309
                      (       fsleep.asm):00052                  tim   #TimSleep,P$State,x
                      (       fsleep.asm):00053                  ELSE
0735 A60C             (       fsleep.asm):00054                  lda   P$State,x
0737 8540             (       fsleep.asm):00055                  bita  #TimSleep
                      (       fsleep.asm):00056                  ENDC
0739 270F             (       fsleep.asm):00057                  beq   L074F
073B 10AE04           (       fsleep.asm):00058                  ldy   P$SP,x       get process stack pointer
073E EC44             (       fsleep.asm):00059                  ldd   R$X,u
0740 A324             (       fsleep.asm):00060                  subd  R$X,y
0742 24E9             (       fsleep.asm):00061                  bcc   L0732
                      (       fsleep.asm):00062                  IFNE  H6309
                      (       fsleep.asm):00063                  negd
                      (       fsleep.asm):00064                  ELSE
0744 40               (       fsleep.asm):00065                  nega
0745 50               (       fsleep.asm):00066                  negb
0746 8200             (       fsleep.asm):00067                  sbca  #0
                      (       fsleep.asm):00068                  ENDC
0748 ED24             (       fsleep.asm):00069                  std   R$X,y
074A 3530             (       fsleep.asm):00070         L074F    puls  y,x
                      (       fsleep.asm):00071                  IFNE  H6309
                      (       fsleep.asm):00072                  oim   #TimSleep,P$State,x
                      (       fsleep.asm):00073                  ELSE
074C A60C             (       fsleep.asm):00074                  lda   P$State,x
074E 8A40             (       fsleep.asm):00075                  ora   #TimSleep
0750 A70C             (       fsleep.asm):00076                  sta   P$State,x
                      (       fsleep.asm):00077                  ENDC
0752 EC2D             (       fsleep.asm):00078                  ldd   P$Queue,y
0754 AF2D             (       fsleep.asm):00079                  stx   P$Queue,y
0756 ED0D             (       fsleep.asm):00080                  std   P$Queue,x
0758 AE44             (       fsleep.asm):00081                  ldx   R$X,u
075A 8D1F             (       fsleep.asm):00082                  bsr   L0780
075C AF44             (       fsleep.asm):00083                  stx   R$X,u
075E 9E50             (       fsleep.asm):00084                  ldx   <D.Proc
                      (       fsleep.asm):00085                  IFNE   H6309
                      (       fsleep.asm):00086                  aim   #^TimSleep,P$State,x
                      (       fsleep.asm):00087                  ELSE
0760 A60C             (       fsleep.asm):00088                  lda   P$State,x
0762 84BF             (       fsleep.asm):00089                  anda  #^TimSleep
0764 A70C             (       fsleep.asm):00090                  sta   P$State,x
                      (       fsleep.asm):00091                  ENDC
0766 3581             (       fsleep.asm):00092         SkpSleep puls  cc,pc
                      (       fsleep.asm):00093         
0768 8E0049           (       fsleep.asm):00094         L076D    ldx   #D.SProcQ-P$Queue
076B 3184             (       fsleep.asm):00095         L0770    leay  ,x
076D AE0D             (       fsleep.asm):00096                  ldx   P$Queue,x
076F 26FA             (       fsleep.asm):00097                  bne   L0770
0771 9E50             (       fsleep.asm):00098                  ldx   <D.Proc
0773 4F               (       fsleep.asm):00099                  clra
0774 5F               (       fsleep.asm):00100                  clrb
0775 AF2D             (       fsleep.asm):00101                  stx   P$Queue,y
0777 ED0D             (       fsleep.asm):00102                  std   P$Queue,x
0779 3501             (       fsleep.asm):00103                  puls  cc
                      (       fsleep.asm):00104         
077B 34F8             (       fsleep.asm):00105         L0780    pshs  dp,x,y,u,pc
077D 308C17           (       fsleep.asm):00106         L0782    leax  <L079C,pc
0780 AF67             (       fsleep.asm):00107                  stx   7,s
0782 9E50             (       fsleep.asm):00108                  ldx   <D.Proc
0784 E606             (       fsleep.asm):00109                  ldb   P$Task,x    This is related to the 'one-byte hack'
0786 D1D0             (       fsleep.asm):00110                  cmpb  <D.SysTsk   that stops OS9p1 from doing an F$AllTsk on
0788 2703             (       fsleep.asm):00111                  beq   L0792       _every_ system call.
078A 103F40           (       fsleep.asm):00112                  os9   F$DelTsk
078D EC04             (       fsleep.asm):00113         L0792    ldd   P$SP,x
                      (       fsleep.asm):00114                  IFNE  H6309
                      (       fsleep.asm):00115                  pshsw
                      (       fsleep.asm):00116                  ENDC
078F 3407             (       fsleep.asm):00117                  pshs  cc,d
0791 10EF04           (       fsleep.asm):00118                  sts   P$SP,x
0794 103F2D           (       fsleep.asm):00119                  os9   F$NProc
                      (       fsleep.asm):00120         
0797 3410             (       fsleep.asm):00121         L079C    pshs  x
0799 9E50             (       fsleep.asm):00122                  ldx   <D.Proc
079B ED04             (       fsleep.asm):00123                  std   P$SP,x
079D 5F               (       fsleep.asm):00124                  clrb
079E 3590             (       fsleep.asm):00125                  puls  x,pc
                      (/home/strick/go/s):00387         
                      (/home/strick/go/s):00388                  use    fallram.asm
                      (      fallram.asm):00001         **************************************************
                      (      fallram.asm):00002         * System Call: F$AllRAM
                      (      fallram.asm):00003         *
                      (      fallram.asm):00004         * Function: Allocate RAM blocks
                      (      fallram.asm):00005         *
                      (      fallram.asm):00006         * Input:  B = Desired block count
                      (      fallram.asm):00007         *
                      (      fallram.asm):00008         * Output: D = Beginning RAM block number
                      (      fallram.asm):00009         *
                      (      fallram.asm):00010         * Error:  CC = C bit set; B = error code
                      (      fallram.asm):00011         *
07A0 E642             (      fallram.asm):00012         FAllRAM  ldb   R$B,u        Get # blocks requested
07A2 3434             (      fallram.asm):00013                  pshs  b,x,y        Save regs
07A4 9E40             (      fallram.asm):00014                  ldx   <D.BlkMap    Get ptr to start of block map
07A6 3184             (      fallram.asm):00015         L0974    leay  ,x           Point Y to current block
07A8 E6E4             (      fallram.asm):00016                  ldb   ,s           Get # blocks requested
07AA 9C42             (      fallram.asm):00017         srchblk  cmpx  <D.BlkMap+2  Hit end of map yet?
07AC 2419             (      fallram.asm):00018                  bhs   L0995        Yes, exit with No RAM error
07AE A680             (      fallram.asm):00019                  lda   ,x+          Get block marker
07B0 26F4             (      fallram.asm):00020                  bne   L0974        Already used, start over with next block up
07B2 5A               (      fallram.asm):00021                  decb               Dec # blocks still needed
07B3 26F5             (      fallram.asm):00022                  bne   srchblk      Still more, keep checking
                      (      fallram.asm):00023         * Entry: Y=ptr to start of memory found
                      (      fallram.asm):00024         * Note: Due to fact that block map always starts @ $200 (up to $2FF), we
                      (      fallram.asm):00025         *       don't need to calc A
07B5 1F20             (      fallram.asm):00026         L0983    tfr   y,d          Copy start of requested block mem ptr to D (B)
07B7 A6E4             (      fallram.asm):00027                  lda   ,s           Get # blocks requested
07B9 E7E4             (      fallram.asm):00028                  stb   ,s           Save start block #
07BB 6CA0             (      fallram.asm):00029         L098D    inc   ,y+          Flag blocks as used
07BD 4A               (      fallram.asm):00030                  deca                (for all blocks allocated)
07BE 26FB             (      fallram.asm):00031                  bne   L098D        Do until done
07C0 3504             (      fallram.asm):00032                  puls  b            Get start block #
07C2 4F               (      fallram.asm):00033                  clra               (allow for D as per original calls)
07C3 ED41             (      fallram.asm):00034                  std   R$D,u        Save for caller
07C5 35B0             (      fallram.asm):00035                  puls  x,y,pc       Restore regs & return
                      (      fallram.asm):00036         
07C7 53               (      fallram.asm):00037         L0995    comb               Exit with No RAM error
07C8 C6ED             (      fallram.asm):00038                  ldb   #E$NoRAM
07CA E7E4             (      fallram.asm):00039                  stb   ,s
07CC 35B4             (      fallram.asm):00040                  puls  b,x,y,pc
                      (      fallram.asm):00041         
                      (      fallram.asm):00042         
                      (      fallram.asm):00043         **************************************************
                      (      fallram.asm):00044         * System Call: F$AlHRAM
                      (      fallram.asm):00045         *
                      (      fallram.asm):00046         * Function: Allocate RAM blocks from top of RAM
                      (      fallram.asm):00047         *
                      (      fallram.asm):00048         * Input:  B = Desired block count
                      (      fallram.asm):00049         *
                      (      fallram.asm):00050         * Output: D = Beginning RAM block number
                      (      fallram.asm):00051         *
                      (      fallram.asm):00052         * Error:  CC = C bit set; B = error code
                      (      fallram.asm):00053         *
07CE E642             (      fallram.asm):00054         FAlHRAM  ldb   R$B,u        Get # blocks to allocate
07D0 3434             (      fallram.asm):00055                  pshs  b,x,y        Preserve regs
07D2 9E42             (      fallram.asm):00056                  ldx   <D.BlkMap+2  Get ptr to end of block map
07D4 E6E4             (      fallram.asm):00057         L09A9    ldb   ,s           Get # blocks requested
07D6 9C40             (      fallram.asm):00058         L09AB    cmpx  <D.BlkMap    Are we at beginning of RAM yet?
07D8 23ED             (      fallram.asm):00059                  bls   L0995        Yes, exit with No RAM error
07DA A682             (      fallram.asm):00060                  lda   ,-x          Get RAM block marker
07DC 26F6             (      fallram.asm):00061                  bne   L09A9        If not free, start checking next one down
07DE 5A               (      fallram.asm):00062                  decb               Free block, dec # blocks left to find count
07DF 26F5             (      fallram.asm):00063                  bne   L09AB        Still more needed, keep checking
07E1 1F12             (      fallram.asm):00064                  tfr   x,y          Found enough contigous blocks, move ptr to Y
07E3 20D0             (      fallram.asm):00065                  bra   L0983        Go mark blocks as used, & return info to caller
                      (/home/strick/go/s):00389         
                      (/home/strick/go/s):00390                  use    fsprior.asm
                      (      fsprior.asm):00001         **************************************************
                      (      fsprior.asm):00002         * System Call: F$SPrior
                      (      fsprior.asm):00003         *
                      (      fsprior.asm):00004         * Function: Set a process' priority
                      (      fsprior.asm):00005         *
                      (      fsprior.asm):00006         * Input:  A = Process ID
                      (      fsprior.asm):00007         *         B = Priority (0 = lowest, 255 = highest)
                      (      fsprior.asm):00008         *
                      (      fsprior.asm):00009         * Output: None
                      (      fsprior.asm):00010         *
                      (      fsprior.asm):00011         * Error:  CC = C bit set; B = error code
                      (      fsprior.asm):00012         *
07E5 A641             (      fsprior.asm):00013         FSPrior  lda   R$A,u        get process #
07E7 17039C           (      fsprior.asm):00014                  lbsr  L0B2E        get pointer to it
07EA 2514             (      fsprior.asm):00015                  bcs   L07C0        error, return
07EC 9E50             (      fsprior.asm):00016                  ldx   <D.Proc      get current process
07EE EC08             (      fsprior.asm):00017                  ldd   P$User,x     get user #
07F0 2705             (      fsprior.asm):00018                  beq   L07B7        super user, go set priority
07F2 10A328           (      fsprior.asm):00019                  cmpd  P$User,y     user #'s match?
07F5 2606             (      fsprior.asm):00020                  bne   L07BD        no, return error
07F7 A642             (      fsprior.asm):00021         L07B7    lda   R$B,u        get new priority
07F9 A72A             (      fsprior.asm):00022                  sta   P$Prior,y    set it
07FB 5F               (      fsprior.asm):00023                  clrb               clear errors
07FC 39               (      fsprior.asm):00024                  rts                return
07FD 53               (      fsprior.asm):00025         L07BD    comb               set carry for error
07FE C6E0             (      fsprior.asm):00026                  ldb   #E$BPrcID
0800 39               (      fsprior.asm):00027         L07C0    rts
                      (/home/strick/go/s):00391         
                      (/home/strick/go/s):00392                  use    fid.asm
                      (          fid.asm):00001         **************************************************
                      (          fid.asm):00002         * System Call: F$ID
                      (          fid.asm):00003         *
                      (          fid.asm):00004         * Function: Return's caller's process ID
                      (          fid.asm):00005         *
                      (          fid.asm):00006         * Input:  None
                      (          fid.asm):00007         *
                      (          fid.asm):00008         * Output: A = Caller's process ID
                      (          fid.asm):00009         *         Y = User ID
                      (          fid.asm):00010         *
                      (          fid.asm):00011         * Error:  CC = C bit set; B = error code
                      (          fid.asm):00012         *
0801 9E50             (          fid.asm):00013         FID      ldx   <D.Proc      get current process pointer
0803 A684             (          fid.asm):00014                  lda   P$ID,x       get ID
0805 A741             (          fid.asm):00015                  sta   R$A,u        save it
0807 EC08             (          fid.asm):00016                  ldd   P$User,x     get user #
0809 ED46             (          fid.asm):00017                  std   R$Y,u        save it
080B 5F               (          fid.asm):00018                  clrb               clear error
080C 39               (          fid.asm):00019                  rts
                      (/home/strick/go/s):00393         
                      (/home/strick/go/s):00394                  IFEQ   H6309
                      (/home/strick/go/s):00395                  use    fcpymem.asm
                      (      fcpymem.asm):00001         **************************************************
                      (      fcpymem.asm):00002         * System Call: F$CpyMem
                      (      fcpymem.asm):00003         *
                      (      fcpymem.asm):00004         * Function: Copy external memory
                      (      fcpymem.asm):00005         *
                      (      fcpymem.asm):00006         * Input:  D = Starting memory block number
                      (      fcpymem.asm):00007         *         X = Offset in block to begin copy
                      (      fcpymem.asm):00008         *         Y = Byte count
                      (      fcpymem.asm):00009         *         U = Caller's destination buffer
                      (      fcpymem.asm):00010         *
                      (      fcpymem.asm):00011         * Output: None
                      (      fcpymem.asm):00012         *
                      (      fcpymem.asm):00013         * Error:  CC = C bit set; B = error code
                      (      fcpymem.asm):00014         *
                      (      fcpymem.asm):00015                  IFNE  H6309
                      (      fcpymem.asm):00016         * F$CpyMem for NitrOS-9 Level Two
                      (      fcpymem.asm):00017         * Notes:
                      (      fcpymem.asm):00018         * We currently check to see if the end of the buffer we are
                      (      fcpymem.asm):00019         * copying to will overflow past $FFFF, and exit if it does.
                      (      fcpymem.asm):00020         * Should this be changed to check if it overflows past the
                      (      fcpymem.asm):00021         * data area of a process, or at least into Vector page RAM
                      (      fcpymem.asm):00022         * and I/O ($FE00-$FFFF)???
                      (      fcpymem.asm):00023         *
080D                  (      fcpymem.asm):00024         FCpyMem  ldd   R$Y,u        get byte count
                      (      fcpymem.asm):00025                  beq   L0A01        nothing there so nothing to move, return
                      (      fcpymem.asm):00026                  addd  R$U,u        add it caller's buffer start ptr.
                      (      fcpymem.asm):00027                  cmpa  #$FE         Is it going to overwrite Vector or I/O pages?
                      (      fcpymem.asm):00028                  bhs   L0A01        Yes, exit without error
                      (      fcpymem.asm):00029                  leas  -$10,s       make a buffer for DAT image
                      (      fcpymem.asm):00030                  leay  ,s           point to it
                      (      fcpymem.asm):00031                  pshs  y,u          Preserve stack buffer ptr & register stack pointer
                      (      fcpymem.asm):00032                  ldx   <D.Proc      Get caller's task #
                      (      fcpymem.asm):00033                  ldf   P$Task,x     get task # of caller
                      (      fcpymem.asm):00034                  leay  P$DATImg,x   Point to DAT image in callers's process dsc.
                      (      fcpymem.asm):00035                  ldx   R$D,u        get caller's DAT image pointer
                      (      fcpymem.asm):00036                  lde   #$08         counter (for double byte moves)
                      (      fcpymem.asm):00037                  ldu   ,s           get temp. stack buffer pointer
                      (      fcpymem.asm):00038         
                      (      fcpymem.asm):00039         * This loop copies the DAT image from the caller's process descriptor into
                      (      fcpymem.asm):00040         * a temporary buffer on the stack
080D                  (      fcpymem.asm):00041         L09C7    equ   *
                      (      fcpymem.asm):00042                  clrd               Clear offset to 0
                      (      fcpymem.asm):00043                  bsr   L0B02         Short cut OS9 F$LDDDXY
                      (      fcpymem.asm):00044                  std   ,u++         save it to buffer
                      (      fcpymem.asm):00045                  leax  2,x          Bump ptr
                      (      fcpymem.asm):00046                  dece               Decrement loop counter
                      (      fcpymem.asm):00047                  bne   L09C7        Keep doing until 16 bytes is done
                      (      fcpymem.asm):00048         
                      (      fcpymem.asm):00049                  ldu   2,s          Get back register stack pointer
                      (      fcpymem.asm):00050                  lbsr  L0CA6        Short cut OS9 F$ResTsk
                      (      fcpymem.asm):00051                  bcs   L09FB        If error, deallocate our stack & exit with error
                      (      fcpymem.asm):00052                  tfr   b,e          New temp task # into E
                      (      fcpymem.asm):00053                  lslb               Multiply by 2 for 2 byte entries
                      (      fcpymem.asm):00054                  ldx   <D.TskIPt    Get ptr to task image table
                      (      fcpymem.asm):00055         * Make new temporary task use the memory blocks from the requested DAT image
                      (      fcpymem.asm):00056         *   from the caller, to help do a 1 shot F$Move command, because in general
                      (      fcpymem.asm):00057         * the temporary DAT image is not associated with a task.
                      (      fcpymem.asm):00058                  ldu   ,s           Get pointer to DAT image we just copied
                      (      fcpymem.asm):00059                  stu   b,x          Point new task image table to our DAT image copy
                      (      fcpymem.asm):00060                  ldu   2,s          Get back data area pointer
                      (      fcpymem.asm):00061                  tfr   w,d          Move temp & caller's task #'s into proper regs.
                      (      fcpymem.asm):00062                  pshs  a            Save new task #
                      (      fcpymem.asm):00063                  bsr   L0B25        F$Move the memory into the caller's requested area
                      (      fcpymem.asm):00064         * BAD Bug! Well, maybe not.  F$Move NEVER returns an error code
                      (      fcpymem.asm):00065         * but if it did, we'd skip the $RelTsk, and have an orphan task
                      (      fcpymem.asm):00066         * left over.
                      (      fcpymem.asm):00067         *         bcs   L09FB        If error, purge stack & return with error code
                      (      fcpymem.asm):00068                  puls  b            Get back new task #
                      (      fcpymem.asm):00069                  lbsr  L0CC3        Short cut OS9 F$RelTsk
080D                  (      fcpymem.asm):00070         L09FB    leas  <$14,s       Purge our stack buffer & return
                      (      fcpymem.asm):00071                  rts
                      (      fcpymem.asm):00072         
080D                  (      fcpymem.asm):00073         L0A01    clrb               No error & exit
                      (      fcpymem.asm):00074                  rts
                      (      fcpymem.asm):00075         
                      (      fcpymem.asm):00076         
                      (      fcpymem.asm):00077                  ELSE
                      (      fcpymem.asm):00078         
                      (      fcpymem.asm):00079         * F$CpyMem for OS-9 Level Two
080D EC46             (      fcpymem.asm):00080         FCpyMem  ldd   R$Y,u      byte count
080F 2755             (      fcpymem.asm):00081                  beq   L0A01      ..skip if none
0811 E348             (      fcpymem.asm):00082                  addd  R$U,u      plus dest buff
0813 2551             (      fcpymem.asm):00083                  bcs   L0A01
0815 3270             (      fcpymem.asm):00084                  leas  -$10,s
0817 31E4             (      fcpymem.asm):00085                  leay  ,s
0819 3426             (      fcpymem.asm):00086                  pshs  a,b,y      save buff end,img ptr
081B 9E50             (      fcpymem.asm):00087                  ldx   <D.Proc
081D E606             (      fcpymem.asm):00088                  ldb   P$Task,X
081F 3404             (      fcpymem.asm):00089                  pshs  b          save caller task#
0821 318840           (      fcpymem.asm):00090                  leay  P$DATImg,x
0824 AE41             (      fcpymem.asm):00091                  ldx   R$D,u      X=caller DAT img ptr
0826 C608             (      fcpymem.asm):00092                  ldb   #8
0828 3444             (      fcpymem.asm):00093                  pshs  b,u
082A EE66             (      fcpymem.asm):00094                  ldu   P$Task,s   U=tempdat ptr
                      (      fcpymem.asm):00095         
082C 4F               (      fcpymem.asm):00096         L09C7    clra             D=0000
082D 5F               (      fcpymem.asm):00097                  clrb
082E 103F48           (      fcpymem.asm):00098                  os9   F$LDDDXY   move user DAT image
0831 EDC1             (      fcpymem.asm):00099                  std   ,u++       to sys tempDAT img
0833 3002             (      fcpymem.asm):00100                  leax  2,x
0835 6AE4             (      fcpymem.asm):00101                  dec   ,s
0837 26F3             (      fcpymem.asm):00102                  bne   L09C7      ..loop
                      (      fcpymem.asm):00103         
0839 3544             (      fcpymem.asm):00104                  puls  b,u
083B AE44             (      fcpymem.asm):00105                  ldx   R$X,u      X=offset
083D EE48             (      fcpymem.asm):00106                  ldu   R$U,u      U=dest buffer
083F 10AE63           (      fcpymem.asm):00107                  ldy   3,s        Y=tmpDAT
                      (      fcpymem.asm):00108         
0842 3504             (      fcpymem.asm):00109                  puls  b
0844 2006             (      fcpymem.asm):00110                  bra   L09E7
                      (      fcpymem.asm):00111         
0846 3089E000         (      fcpymem.asm):00112         N09D6    leax  $E000,x
084A 3122             (      fcpymem.asm):00113                  leay  2,y
                      (      fcpymem.asm):00114         
                      (      fcpymem.asm):00115         *------------------------------------------------*
                      (      fcpymem.asm):00116         * Copy Loop:
                      (      fcpymem.asm):00117         
084C 8C2000           (      fcpymem.asm):00118         L09E7    cmpx  #$2000
084F 24F5             (      fcpymem.asm):00119                  bcc   N09D6
                      (      fcpymem.asm):00120         
0851 103F46           (      fcpymem.asm):00121         L09EC    os9   F$LDAXY    get byte
0854 3001             (      fcpymem.asm):00122                  leax  1,x
0856 1E13             (      fcpymem.asm):00123                  exg   x,u
                      (      fcpymem.asm):00124         
0858 103F4A           (      fcpymem.asm):00125                  os9   F$STABX    store byte
085B 3001             (      fcpymem.asm):00126                  leax  1,x        plus one
085D ACE4             (      fcpymem.asm):00127                  cmpx  ,s
085F 1E13             (      fcpymem.asm):00128                  exg   x,u
0861 25E9             (      fcpymem.asm):00129                  bcs   L09E7
0863 32E814           (      fcpymem.asm):00130                  leas  $14,s
                      (      fcpymem.asm):00131         
0866 5F               (      fcpymem.asm):00132         L0A01    clrb             ok
0867 39               (      fcpymem.asm):00133                  rts              end.
                      (      fcpymem.asm):00134         
                      (      fcpymem.asm):00135                  ENDC
                      (/home/strick/go/s):00396         
                      (/home/strick/go/s):00397                  use    fdelram.asm
                      (      fdelram.asm):00001         **************************************************
                      (      fdelram.asm):00002         * System Call: F$DelRAM
                      (      fdelram.asm):00003         *
                      (      fdelram.asm):00004         * Function: Deallocate RAM blocks
                      (      fdelram.asm):00005         *
                      (      fdelram.asm):00006         * Input:  B = Number of blocks
                      (      fdelram.asm):00007         *         X = Beginning block number
                      (      fdelram.asm):00008         *
                      (      fdelram.asm):00009         * Output: None
                      (      fdelram.asm):00010         *
                      (      fdelram.asm):00011         * Error:  CC = C bit set; B = error code
                      (      fdelram.asm):00012         *
0868 E642             (      fdelram.asm):00013         FDelRAM  ldb   R$B,u      # of blocks to de-allocate
086A 2722             (      fdelram.asm):00014                  beq   DelRAM.2   if none, exit
086C DC42             (      fdelram.asm):00015                  ldd   <D.BlkMap+2 get end of the block map
086E 9340             (      fdelram.asm):00016                  subd  <D.BlkMap  subtract out start of the block map
0870 A344             (      fdelram.asm):00017                  subd  R$X,u      take out starting block number
0872 231A             (      fdelram.asm):00018                  bls   DelRAM.2   exit if the starting block is ># of blocks available
0874 4D               (      fdelram.asm):00019                  tsta             check high byte of RAM #
0875 2606             (      fdelram.asm):00020                  bne   DelRAM.0   if not zero, skip it
0877 E142             (      fdelram.asm):00021                  cmpb  R$B,u      check against size of the block
0879 2402             (      fdelram.asm):00022                  bhs   DelRAM.0   if size is >RAM available
087B E742             (      fdelram.asm):00023                  stb   R$B,u      save actual # of blocks deleted
087D 9E40             (      fdelram.asm):00024         DelRAM.0 ldx   <D.BlkMap  get start address of the block map
087F EC44             (      fdelram.asm):00025                  ldd   R$X,u      starting address of the RAM to de-allocate
0881 308B             (      fdelram.asm):00026                  leax  d,x        slower, but smaller than ADDR
0883 E642             (      fdelram.asm):00027                  ldb   R$B,u      get actual # of blocks to de-allocate
     0885             (      fdelram.asm):00028         DelRAM.1 equ   *
                      (      fdelram.asm):00029                  IFNE  H6309
                      (      fdelram.asm):00030                  aim   #^RAMinUse,,x+  set to RAM not in use
                      (      fdelram.asm):00031                  ELSE
0885 A684             (      fdelram.asm):00032                  lda   ,x
0887 84FE             (      fdelram.asm):00033                  anda  #^RAMinUse
0889 A780             (      fdelram.asm):00034                  sta   ,x+
                      (      fdelram.asm):00035                  ENDC
088B 5A               (      fdelram.asm):00036                  decb             count down a block
088C 26F7             (      fdelram.asm):00037                  bne   DelRAM.1   continue
088E 5F               (      fdelram.asm):00038         DelRAM.2 clrb             and exit
088F 39               (      fdelram.asm):00039                  rts
                      (/home/strick/go/s):00398                  ENDC
                      (/home/strick/go/s):00399         
                      (/home/strick/go/s):00400                  use    fsswi.asm
                      (        fsswi.asm):00001         **************************************************
                      (        fsswi.asm):00002         * System Call: F$SSWI
                      (        fsswi.asm):00003         *
                      (        fsswi.asm):00004         * Function: Sets the SWI vector specified for the calling process.
                      (        fsswi.asm):00005         *
                      (        fsswi.asm):00006         * Input:  B = SWI vector (1-3) to modify
                      (        fsswi.asm):00007         *         U = Address of new SWI vector for process
                      (        fsswi.asm):00008         *
                      (        fsswi.asm):00009         * Output: None
                      (        fsswi.asm):00010         *
                      (        fsswi.asm):00011         * Error:  CC = C bit set; B = error code
                      (        fsswi.asm):00012         *
0890 9E50             (        fsswi.asm):00013         FSSWI    ldx   <D.Proc      get current process
0892 E641             (        fsswi.asm):00014                  ldb   R$A,u        get type code
0894 5A               (        fsswi.asm):00015                  decb               adjust for offset
0895 C103             (        fsswi.asm):00016                  cmpb  #3           legal value?
0897 2408             (        fsswi.asm):00017                  bcc   BadSWI       no, return error
0899 58               (        fsswi.asm):00018                  lslb               account for 2 bytes entry
089A CB13             (        fsswi.asm):00019                  addb  #P$SWI       go to start of P$SWI pointers
089C EE44             (        fsswi.asm):00020                  ldu   R$X,u        get address
089E EF85             (        fsswi.asm):00021                  stu   b,x          save to descriptor
08A0 39               (        fsswi.asm):00022                  rts                return
                      (        fsswi.asm):00023         
08A1 53               (        fsswi.asm):00024         BadSWI   comb
08A2 C6E3             (        fsswi.asm):00025                  ldb   #E$ISWI
08A4 39               (        fsswi.asm):00026                  rts
                      (/home/strick/go/s):00401         
                      (/home/strick/go/s):00402                  use    fstime.asm
                      (       fstime.asm):00001         **************************************************
                      (       fstime.asm):00002         * System Call: F$STime
                      (       fstime.asm):00003         *
                      (       fstime.asm):00004         * Function: Set system time
                      (       fstime.asm):00005         *
                      (       fstime.asm):00006         * Input:  X = Address of time packet:
                      (       fstime.asm):00007         *
                      (       fstime.asm):00008         *        Offset 0 = Year
                      (       fstime.asm):00009         *        Offset 1 = Month
                      (       fstime.asm):00010         *        Offset 2 = Day
                      (       fstime.asm):00011         *        Offset 3 = Hour
                      (       fstime.asm):00012         *        Offset 4 = Minute
                      (       fstime.asm):00013         *        Offset 5 = Second
                      (       fstime.asm):00014         *
                      (       fstime.asm):00015         * Output: System time/date set
                      (       fstime.asm):00016         *
                      (       fstime.asm):00017         * Error:  CC = C bit set; B = error code
                      (       fstime.asm):00018         *
08A5 AE44             (       fstime.asm):00019         FSTime   ldx   R$X,u           Get address that user wants time packet
                      (       fstime.asm):00020         ***         tfr   dp,a            Set MSB of D to direct page
                      (       fstime.asm):00021         ***         ldb   #D.Time         Offset to Time packet in direct page
                      (       fstime.asm):00022         ***         tfr   d,u             Point U to it
08A7 CE0028           (       fstime.asm):00023                  ldu   #D.Time    --- DP=0 always
08AA 109E50           (       fstime.asm):00024                  ldy   <D.Proc         Get ptr to process that called us
08AD A626             (       fstime.asm):00025                  lda   P$Task,y        Get task # from process
08AF D6D0             (       fstime.asm):00026                  ldb   <D.SysTsk       Get task # of system process
08B1 108E0006         (       fstime.asm):00027                  ldy   #6              6 byte packet to move
08B5 103F38           (       fstime.asm):00028                  os9   F$Move          Go move it
08B8 9E50             (       fstime.asm):00029                  ldx   <D.Proc         Get ptr to process that called us
08BA 3410             (       fstime.asm):00030                  pshs  x               Preserve it
08BC 9E4A             (       fstime.asm):00031                  ldx   <D.SysPrc       Get ptr to system process
08BE 9F50             (       fstime.asm):00032                  stx   <D.Proc         Save as current process
08C0 86C1             (       fstime.asm):00033                  lda   #Systm+Objct    Link to Clock module
08C2 308C0C           (       fstime.asm):00034                  leax  ClockNam,pc
08C5 103F00           (       fstime.asm):00035                  os9   F$Link
08C8 3510             (       fstime.asm):00036                  puls  x               Get back ptr to user's process
08CA 9F50             (       fstime.asm):00037                  stx   <D.Proc         Make it the active process again
08CC 2502             (       fstime.asm):00038                  bcs   ex@             If error in Link, exit with error code
08CE 6EA4             (       fstime.asm):00039                  jmp   ,y              Jump into Clock
08D0 39               (       fstime.asm):00040         ex@      rts
                      (       fstime.asm):00041         
08D1 436C6F63EB       (       fstime.asm):00042         ClockNam fcs   /Clock/
                      (/home/strick/go/s):00403         
                      (/home/strick/go/s):00404                  use    fallbit.asm
                      (      fallbit.asm):00001         **************************************************
                      (      fallbit.asm):00002         * System Call: F$AllBit
                      (      fallbit.asm):00003         *
                      (      fallbit.asm):00004         * Function: Sets bits in an allocation bitmap
                      (      fallbit.asm):00005         *
                      (      fallbit.asm):00006         * Input:  X = Address of allocation bitmap
                      (      fallbit.asm):00007         *         D = Number of first bit to set
                      (      fallbit.asm):00008         *         Y = Bit count (number of bits to set)
                      (      fallbit.asm):00009         *
                      (      fallbit.asm):00010         * Output: None
                      (      fallbit.asm):00011         *
                      (      fallbit.asm):00012         * Error:  CC = C bit set; B = error code
                      (      fallbit.asm):00013         *
08D6 EC41             (      fallbit.asm):00014         FAllBit  ldd   R$D,u        get bit # to start with
08D8 AE44             (      fallbit.asm):00015                  ldx   R$X,u        get address of allocation bit map
08DA 8D51             (      fallbit.asm):00016                  bsr   CalcBit      calculate byte & position & get first bit mask
                      (      fallbit.asm):00017                  IFGT  Level-1
08DC 109E50           (      fallbit.asm):00018                  ldy   <D.Proc      get current task #
08DF E626             (      fallbit.asm):00019                  ldb   P$Task,y     get task number
08E1 2008             (      fallbit.asm):00020                  bra   DoAllBit     go do it
                      (      fallbit.asm):00021         
                      (      fallbit.asm):00022         * F$AllBit (System State)
08E3 EC41             (      fallbit.asm):00023         FSAllBit ldd   R$D,u        get bit # to start with
08E5 AE44             (      fallbit.asm):00024                  ldx   R$X,u        get address of allocation bit map
08E7 8D44             (      fallbit.asm):00025                  bsr   CalcBit      calculate byte & pos & get first bit mask
08E9 D6D0             (      fallbit.asm):00026                  ldb   <D.SysTsk    Get system task #
                      (      fallbit.asm):00027                  ENDC
                      (      fallbit.asm):00028         
                      (      fallbit.asm):00029         * Main bit setting loop
     08EB             (      fallbit.asm):00030         DoAllBit equ   *
                      (      fallbit.asm):00031                  IFNE  H6309
                      (      fallbit.asm):00032                  ldw   R$Y,u        get # bits to set
                      (      fallbit.asm):00033                  ELSE
08EB 10AE46           (      fallbit.asm):00034                  ldy   R$Y,u        get # bits to set
                      (      fallbit.asm):00035                  ENDC
08EE 273B             (      fallbit.asm):00036                  beq   BitEx        nothing to set, return
08F0 A7E2             (      fallbit.asm):00037                  sta   ,-s          preserve current mask
08F2 2B12             (      fallbit.asm):00038                  bmi   SkpBit       If high bit set, skip ahead
                      (      fallbit.asm):00039                  IFGT  Level-1
08F4 103F49           (      fallbit.asm):00040                  os9   F$LDABX      go get original value from bit map
                      (      fallbit.asm):00041                  ELSE
                      (      fallbit.asm):00042                  lda   ,x
                      (      fallbit.asm):00043                  ENDC
08F7 AAE4             (      fallbit.asm):00044         NxtBitLp ora   ,s           OR it with the current mask
                      (      fallbit.asm):00045                  IFNE  H6309
                      (      fallbit.asm):00046                  decw               dec the bit counter
                      (      fallbit.asm):00047                  ELSE
08F9 313F             (      fallbit.asm):00048                  leay  -1,y
                      (      fallbit.asm):00049                  ENDC
08FB 2729             (      fallbit.asm):00050                  beq   BitStEx      done, go put the byte back into the task's map
08FD 64E4             (      fallbit.asm):00051                  lsr   ,s           shift out the lowest bit of original
08FF 24F6             (      fallbit.asm):00052                  bcc   NxtBitLp     if it is a 0, do next bit
                      (      fallbit.asm):00053                  IFGT  Level-1
0901 103F4A           (      fallbit.asm):00054                  os9   F$STABX      if it was a 1 (which means whole byte done),
                      (      fallbit.asm):00055                  ELSE
                      (      fallbit.asm):00056                  sta   ,x
                      (      fallbit.asm):00057                  ENDC
0904 3001             (      fallbit.asm):00058                  leax  1,x          store finished byte and bump ptr
0906 86FF             (      fallbit.asm):00059         SkpBit   lda   #$FF         preload a finished byte
0908 2007             (      fallbit.asm):00060                  bra   SkpBit2      skip ahead
                      (      fallbit.asm):00061         
     090A             (      fallbit.asm):00062         StFulByt equ   *
                      (      fallbit.asm):00063                  IFGT  Level-1
090A 103F4A           (      fallbit.asm):00064                  os9   F$STABX      store full byte
                      (      fallbit.asm):00065                  ELSE
                      (      fallbit.asm):00066                  sta   ,x
                      (      fallbit.asm):00067                  ENDC
090D 3001             (      fallbit.asm):00068                  leax  1,x          bump ptr up 1
                      (      fallbit.asm):00069                  IFNE  H6309
                      (      fallbit.asm):00070                  subw  #8           bump counter down by 8
090F                  (      fallbit.asm):00071         SkpBit2  cmpw  #8           is there at least 8 more (a full byte) to do?
                      (      fallbit.asm):00072                  ELSE
090F 3138             (      fallbit.asm):00073                  leay  -8,y
0911 108C0008         (      fallbit.asm):00074         SkpBit2  cmpy  #$0008
                      (      fallbit.asm):00075                  ENDC
0915 22F3             (      fallbit.asm):00076                  bhi   StFulByt     more than 1, go do current
0917 270D             (      fallbit.asm):00077                  beq   BitStEx      exactly 1 byte left, do final store & exit
                      (      fallbit.asm):00078         
                      (      fallbit.asm):00079         * Last byte: Not a full byte left loop
0919 44               (      fallbit.asm):00080         L085A    lsra               bump out least sig. bit
                      (      fallbit.asm):00081                  IFNE  H6309
                      (      fallbit.asm):00082                  decw               dec the bit counter
                      (      fallbit.asm):00083                  ELSE
091A 313F             (      fallbit.asm):00084                  leay  -1,y
                      (      fallbit.asm):00085                  ENDC
091C 26FB             (      fallbit.asm):00086                  bne   L085A        keep going until last one is shifted out
091E 43               (      fallbit.asm):00087                  coma               invert byte to get proper result
091F A7E4             (      fallbit.asm):00088                  sta   ,s           preserve a sec
                      (      fallbit.asm):00089                  IFGT  Level-1
0921 103F49           (      fallbit.asm):00090                  os9   F$LDABX      get byte for original map
                      (      fallbit.asm):00091                  ELSE
                      (      fallbit.asm):00092                  lda   ,x
                      (      fallbit.asm):00093                  ENDC
0924 AAE4             (      fallbit.asm):00094                  ora   ,s           merge with new mask
     0926             (      fallbit.asm):00095         BitStEx  equ   *
                      (      fallbit.asm):00096                  IFGT  Level-1
0926 103F4A           (      fallbit.asm):00097                  os9   F$STABX      store finished byte into task
                      (      fallbit.asm):00098                  ELSE
                      (      fallbit.asm):00099                  sta   ,x
                      (      fallbit.asm):00100                  ENDC
0929 3261             (      fallbit.asm):00101                  leas  1,s          eat the working copy of the mask
092B 5F               (      fallbit.asm):00102         BitEx    clrb               no error & return
092C 39               (      fallbit.asm):00103                  rts
                      (      fallbit.asm):00104         
                      (      fallbit.asm):00105         * Calculate address of first byte we want, and which bit in that byte, from
                      (      fallbit.asm):00106         *   a bit allocation map given the address of the map & the bit # we want to
                      (      fallbit.asm):00107         *   point to
                      (      fallbit.asm):00108         * Entry: D=Bit #
                      (      fallbit.asm):00109         *        X=Ptr to bit mask table
                      (      fallbit.asm):00110         * Exit:  A=Mask to point to bit # within byte we are starting on
                      (      fallbit.asm):00111         *        X=Ptr in allocation map to first byte we are starting on
092D 3424             (      fallbit.asm):00112         CalcBit  pshs  b,y          preserve registers
                      (      fallbit.asm):00113                  IFNE  H6309
                      (      fallbit.asm):00114                  lsrd               divide bit # by 8 to calculate byte # to start
                      (      fallbit.asm):00115                  lsrd               allocating at
                      (      fallbit.asm):00116                  lsrd
                      (      fallbit.asm):00117                  addr  d,x          offset that far into the map
                      (      fallbit.asm):00118                  ELSE
092F 44               (      fallbit.asm):00119                  lsra
0930 56               (      fallbit.asm):00120                  rorb
0931 44               (      fallbit.asm):00121                  lsra
0932 56               (      fallbit.asm):00122                  rorb
0933 44               (      fallbit.asm):00123                  lsra
0934 56               (      fallbit.asm):00124                  rorb
0935 308B             (      fallbit.asm):00125                  leax  d,x
                      (      fallbit.asm):00126                  ENDC
0937 3504             (      fallbit.asm):00127                  puls  b            restore bit position LSB
0939 318C06           (      fallbit.asm):00128                  leay  <MaskTbl,pc  point to mask table
093C C407             (      fallbit.asm):00129                  andb  #7           round it down to nearest bit
093E A6A5             (      fallbit.asm):00130                  lda   b,y          get bit mask
0940 35A0             (      fallbit.asm):00131                  puls  y,pc         restore & return
                      (      fallbit.asm):00132         
                      (      fallbit.asm):00133         * Bit position table (NOTE that bit #'s are done by left to right)
0942 8040201008040201 (      fallbit.asm):00134         MaskTbl  fcb   $80,$40,$20,$10,$08,$04,$02,$01
                      (      fallbit.asm):00135         
                      (      fallbit.asm):00136         
                      (      fallbit.asm):00137         **************************************************
                      (      fallbit.asm):00138         * System Call: F$DelBit
                      (      fallbit.asm):00139         *
                      (      fallbit.asm):00140         * Function: Clears bits in an allocation bitmap
                      (      fallbit.asm):00141         *
                      (      fallbit.asm):00142         * Input:  X = Address of allocation bitmap
                      (      fallbit.asm):00143         *         D = Number of first bit to clear
                      (      fallbit.asm):00144         *         Y = Bit count (number of bits to clear)
                      (      fallbit.asm):00145         *
                      (      fallbit.asm):00146         * Output: None
                      (      fallbit.asm):00147         *
                      (      fallbit.asm):00148         * Error:  CC = C bit set; B = error code
                      (      fallbit.asm):00149         *
094A EC41             (      fallbit.asm):00150         FDelBit  ldd   R$D,u        get bit # to start with
094C AE44             (      fallbit.asm):00151                  ldx   R$X,u        get addr. of bit allocation map
094E 8DDD             (      fallbit.asm):00152                  bsr   CalcBit      point to starting bit
                      (      fallbit.asm):00153                  IFGT  Level-1
0950 109E50           (      fallbit.asm):00154                  ldy   <D.Proc      get current Task #
0953 E626             (      fallbit.asm):00155                  ldb   P$Task,y     get task #
0955 2008             (      fallbit.asm):00156                  bra   DoDelBit     do rest of 0 bits
                      (      fallbit.asm):00157         
                      (      fallbit.asm):00158         * F$DelBit entry point for system state
0957 EC41             (      fallbit.asm):00159         FSDelBit ldd   R$D,u        get bit # to start with
0959 AE44             (      fallbit.asm):00160                  ldx   R$X,u        get addr. of bit allocation map
095B 8DD0             (      fallbit.asm):00161                  bsr   CalcBit      point to starting bit
095D D6D0             (      fallbit.asm):00162                  ldb   <D.SysTsk    get system task #
                      (      fallbit.asm):00163                  ENDC
                      (      fallbit.asm):00164         
     095F             (      fallbit.asm):00165         DoDelBit equ   *
                      (      fallbit.asm):00166                  IFNE  H6309
                      (      fallbit.asm):00167                  ldw   R$Y,u        get # bits to clear
                      (      fallbit.asm):00168                  ELSE
095F 10AE46           (      fallbit.asm):00169                  ldy   R$Y,u        get # bits to clear
                      (      fallbit.asm):00170                  ENDC
0962 273B             (      fallbit.asm):00171                  beq   L08E0        none, return
0964 43               (      fallbit.asm):00172                  coma               invert current bit mask
0965 A7E2             (      fallbit.asm):00173                  sta   ,-s          preserve on stack
0967 2A12             (      fallbit.asm):00174                  bpl   L08BC        if high bit clear, skip ahead
                      (      fallbit.asm):00175                  IFGT  Level-1
0969 103F49           (      fallbit.asm):00176                  os9   F$LDABX      go get byte from user's map
                      (      fallbit.asm):00177                  ELSE
                      (      fallbit.asm):00178                  lda   ,x
                      (      fallbit.asm):00179                  ENDC
096C A4E4             (      fallbit.asm):00180         L08AD    anda  ,s           AND it with current mask
                      (      fallbit.asm):00181                  IFNE  H6309
                      (      fallbit.asm):00182                  decw               dec the bits left counter
                      (      fallbit.asm):00183                  ELSE
096E 313F             (      fallbit.asm):00184                  leay  -1,y
                      (      fallbit.asm):00185                  ENDC
0970 2728             (      fallbit.asm):00186                  beq   BitDone      done, store finished byte back in task's map
0972 67E4             (      fallbit.asm):00187                  asr   ,s           shift out lowest bit, leaving highest alone
0974 25F6             (      fallbit.asm):00188                  bcs   L08AD        if it is a 1, do next bit
                      (      fallbit.asm):00189                  IFGT  Level-1
0976 103F4A           (      fallbit.asm):00190                  os9   F$STABX      if it was a 0 (which means whole byte done),
                      (      fallbit.asm):00191                  ELSE
                      (      fallbit.asm):00192                  sta   ,x
                      (      fallbit.asm):00193                  ENDC
0979 3001             (      fallbit.asm):00194                  leax  1,x          store finished byte & inc. ptr
097B 4F               (      fallbit.asm):00195         L08BC    clra               preload a cleared byte
097C 2007             (      fallbit.asm):00196                  bra   ChkFull      skip ahead
     097E             (      fallbit.asm):00197         L08BF    equ   *
                      (      fallbit.asm):00198                  IFGT  Level-1
097E 103F4A           (      fallbit.asm):00199                  os9   F$STABX      store full byte
                      (      fallbit.asm):00200                  ELSE
                      (      fallbit.asm):00201                  sta   ,x
                      (      fallbit.asm):00202                  ENDC
0981 3001             (      fallbit.asm):00203                  leax  1,x          bump ptr up by 1
                      (      fallbit.asm):00204                  IFNE  H6309
                      (      fallbit.asm):00205                  subw  #8           dec bits left counter by 8
0983                  (      fallbit.asm):00206         ChkFull  cmpw  #8           at least 1 full byte left?
                      (      fallbit.asm):00207                  ELSE
0983 3138             (      fallbit.asm):00208                  leay  -8,y
0985 108C0008         (      fallbit.asm):00209         ChkFull  cmpy  #8
                      (      fallbit.asm):00210                  ENDC
0989 22F3             (      fallbit.asm):00211                  bhi   L08BF        yes, do a whole byte in 1 shot
098B 270D             (      fallbit.asm):00212                  beq   BitDone      exactly 1, store byte & exit
098D 43               (      fallbit.asm):00213                  coma               < full byte left, invert bits
098E 44               (      fallbit.asm):00214         L08CF    lsra               shift out rightmost bit
                      (      fallbit.asm):00215                  IFNE  H6309
                      (      fallbit.asm):00216                  decw               dec bits left counter
                      (      fallbit.asm):00217                  ELSE
098F 313F             (      fallbit.asm):00218                  leay  -1,y
                      (      fallbit.asm):00219                  ENDC
0991 26FB             (      fallbit.asm):00220                  bne   L08CF        keep doing till done
0993 A7E4             (      fallbit.asm):00221                  sta   ,s           save finished mask
                      (      fallbit.asm):00222                  IFGT  Level-1
0995 103F49           (      fallbit.asm):00223                  os9   F$LDABX      get original byte from task
                      (      fallbit.asm):00224                  ELSE
                      (      fallbit.asm):00225                  lda   ,x
                      (      fallbit.asm):00226                  ENDC
0998 A4E4             (      fallbit.asm):00227                  anda  ,s           merge cleared bits with it
     099A             (      fallbit.asm):00228         BitDone  equ   *
                      (      fallbit.asm):00229                  IFGT  Level-1
099A 103F4A           (      fallbit.asm):00230                  os9   F$STABX      store finished byte into task
                      (      fallbit.asm):00231                  ELSE
                      (      fallbit.asm):00232                  sta   ,x
                      (      fallbit.asm):00233                  ENDC
099D 3261             (      fallbit.asm):00234                  leas  1,s          eat working copy of mask
099F 5F               (      fallbit.asm):00235         L08E0    clrb               eat error & return
09A0 39               (      fallbit.asm):00236                  rts
                      (      fallbit.asm):00237         
                      (      fallbit.asm):00238         
                      (      fallbit.asm):00239         **************************************************
                      (      fallbit.asm):00240         * System Call: F$SchBit
                      (      fallbit.asm):00241         *
                      (      fallbit.asm):00242         * Function: Search bitmap for a free area
                      (      fallbit.asm):00243         *
                      (      fallbit.asm):00244         * Input:  X = Address of allocation bitmap
                      (      fallbit.asm):00245         *         D = Starting bit number
                      (      fallbit.asm):00246         *         Y = Bit count (free bit block size)
                      (      fallbit.asm):00247         *         U = Address of end of allocation bitmap
                      (      fallbit.asm):00248         *
                      (      fallbit.asm):00249         * Output: D = Beginning bit number
                      (      fallbit.asm):00250         *         Y = Bit count
                      (      fallbit.asm):00251         *
                      (      fallbit.asm):00252         * Error:  CC = C bit set; B = error code
                      (      fallbit.asm):00253         *
09A1 EC41             (      fallbit.asm):00254         FSchBit  ldd   R$D,u        get start bit #
09A3 AE44             (      fallbit.asm):00255                  ldx   R$X,u        get addr. of allocation bit map
09A5 8D86             (      fallbit.asm):00256                  bsr   CalcBit      point to starting bit
                      (      fallbit.asm):00257                  IFGT  Level-1
09A7 109E50           (      fallbit.asm):00258                  ldy   <D.Proc      get task #
09AA E626             (      fallbit.asm):00259                  ldb   P$Task,y
09AC 2009             (      fallbit.asm):00260                  bra   DoSchBit     skip ahead
                      (      fallbit.asm):00261         
                      (      fallbit.asm):00262         * F$SchBit entry point for system
09AE EC41             (      fallbit.asm):00263         FSSchBit ldd   R$D,u        get start bit #
09B0 AE44             (      fallbit.asm):00264                  ldx   R$X,u        get addr. of allocation bit map
09B2 17FF78           (      fallbit.asm):00265                  lbsr  CalcBit      point to starting bit
09B5 D6D0             (      fallbit.asm):00266                  ldb   <D.SysTsk    get task #
                      (      fallbit.asm):00267         * Stack: 0,s : byte we are working on (from original map)
                      (      fallbit.asm):00268         *        1,s : Mask of which bit in current byte to start on
                      (      fallbit.asm):00269         *        2,s : Task number the allocation bit map is in
                      (      fallbit.asm):00270         *        3,s : Largest block found so far
                      (      fallbit.asm):00271         *        5,s : Starting bit # of requested (or closest) size found
                      (      fallbit.asm):00272         *        7,s : Starting bit # of current block being checked (2 bytes) (NOW IN Y)
                      (      fallbit.asm):00273                  ENDC
     09B7             (      fallbit.asm):00274         DoSchBit equ  *
                      (      fallbit.asm):00275                  IFNE  H6309
                      (      fallbit.asm):00276                  pshs  cc,d,x,y     preserve task # & bit mask & reserve stack space
                      (      fallbit.asm):00277                  clrd               faster than 2 memory clears
                      (      fallbit.asm):00278                  ELSE
09B7 3477             (      fallbit.asm):00279                  pshs  cc,d,x,y,u   preserve task # & bit mask & reserve stack space
09B9 4F               (      fallbit.asm):00280                  clra
09BA 5F               (      fallbit.asm):00281                  clrb
                      (      fallbit.asm):00282                  ENDC
09BB ED63             (      fallbit.asm):00283                  std   3,s          preserve it
                      (      fallbit.asm):00284                  IFNE  H6309
                      (      fallbit.asm):00285                  ldw   R$D,u        get start bit #
                      (      fallbit.asm):00286                  tfr   w,y          save as current block starting bit #
                      (      fallbit.asm):00287                  ELSE
09BD 10AE41           (      fallbit.asm):00288                  ldy   R$D,u
09C0 10AF67           (      fallbit.asm):00289                  sty   7,s
                      (      fallbit.asm):00290                  ENDC
09C3 200B             (      fallbit.asm):00291                  bra   Skipper      skip ahead
                      (      fallbit.asm):00292         
                      (      fallbit.asm):00293         * New start point for search at current location
     09C5             (      fallbit.asm):00294         RstSrch  equ   *
                      (      fallbit.asm):00295                  IFNE  H6309
                      (      fallbit.asm):00296                  tfr   w,y          preserve current block bit # start
                      (      fallbit.asm):00297                  ELSE
09C5 10AF67           (      fallbit.asm):00298                  sty   7,s
                      (      fallbit.asm):00299                  ENDC
                      (      fallbit.asm):00300         * Move to next bit position, and to next byte if current byte is done
09C8 6461             (      fallbit.asm):00301         MoveBit  lsr   1,s          move to next bit position
09CA 240F             (      fallbit.asm):00302                  bcc   CheckBit     if not the last one, check it
09CC 6661             (      fallbit.asm):00303                  ror   1,s          move bit position marker to 1st bit again
09CE 3001             (      fallbit.asm):00304                  leax  1,x          move byte ptr (in map) to next byte
                      (      fallbit.asm):00305         
                      (      fallbit.asm):00306         * Check if we are finished allocation map
09D0 AC48             (      fallbit.asm):00307         Skipper  cmpx  R$U,u        done entire map?
09D2 2425             (      fallbit.asm):00308                  bhs   BadNews      yes, couldn't fit in 1 block, notify caller
09D4 E662             (      fallbit.asm):00309                  ldb   2,s          get task number
                      (      fallbit.asm):00310                  IFGT  Level-1
09D6 103F49           (      fallbit.asm):00311                  os9   F$LDABX      get byte from bit allocation map
                      (      fallbit.asm):00312                  ELSE
                      (      fallbit.asm):00313                  lda   ,x
                      (      fallbit.asm):00314                  ENDC
09D9 A7E4             (      fallbit.asm):00315                  sta   ,s           preserve in scratch area
                      (      fallbit.asm):00316         
                      (      fallbit.asm):00317         * Main checking
     09DB             (      fallbit.asm):00318         CheckBit equ   *
                      (      fallbit.asm):00319                  IFNE  H6309
                      (      fallbit.asm):00320                  incw               increment current bit #
                      (      fallbit.asm):00321                  ELSE
09DB 3121             (      fallbit.asm):00322                  leay  1,y
                      (      fallbit.asm):00323                  ENDC
09DD A6E4             (      fallbit.asm):00324                  lda   ,s           get current byte
09DF A461             (      fallbit.asm):00325                  anda  1,s          mask out all but current bit position
09E1 26E2             (      fallbit.asm):00326                  bne   RstSrch      if bit not free, restart search from next bit
                      (      fallbit.asm):00327                  IFNE  H6309
                      (      fallbit.asm):00328                  tfr   w,d          dup current bit # into D
                      (      fallbit.asm):00329                  subr  y,d          calculate size we have free so far
                      (      fallbit.asm):00330                  ELSE
09E3 1F20             (      fallbit.asm):00331                  tfr   y,d
09E5 A367             (      fallbit.asm):00332                  subd  7,s
                      (      fallbit.asm):00333                  ENDC
09E7 10A346           (      fallbit.asm):00334                  cmpd  R$Y,u        as big as user requested?
09EA 2416             (      fallbit.asm):00335                  bhs   WereDone     yes, we are done
09EC 10A363           (      fallbit.asm):00336                  cmpd  $03,s        as big as the largest one we have found so far?
09EF 23D7             (      fallbit.asm):00337                  bls   MoveBit      no, move to next bit and keep going
09F1 ED63             (      fallbit.asm):00338                  std   $03,s        it is the largest, save current size
                      (      fallbit.asm):00339                  IFNE  H6309
                      (      fallbit.asm):00340                  sty   $05,s        save as start bit # of largest block found so far
                      (      fallbit.asm):00341                  ELSE
09F3 EC67             (      fallbit.asm):00342                  ldd   7,s
09F5 ED65             (      fallbit.asm):00343                  std   5,s
                      (      fallbit.asm):00344                  ENDC
09F7 20CF             (      fallbit.asm):00345                  bra   MoveBit      move to next bit and keep going
                      (      fallbit.asm):00346         
                      (      fallbit.asm):00347         * Couldn't find requested size block; tell user where the closest was found
                      (      fallbit.asm):00348         *   and how big it was
09F9 EC63             (      fallbit.asm):00349         BadNews  ldd   $03,s        get size of largest block we found
09FB ED46             (      fallbit.asm):00350                  std   R$Y,u        put into callers Y register
09FD 53               (      fallbit.asm):00351                  comb               set carry to indicate we couldn't get full size
09FE EC65             (      fallbit.asm):00352                  ldd   5,s          get starting bit # of largest block we found
0A00 2002             (      fallbit.asm):00353                  bra   BadSkip      skip ahead
                      (      fallbit.asm):00354         * Found one, tell user where it is
     0A02             (      fallbit.asm):00355         WereDone equ   *
                      (      fallbit.asm):00356                  IFNE  H6309
                      (      fallbit.asm):00357                  tfr   y,d          get start bit # of the block we found
                      (      fallbit.asm):00358                  ELSE
0A02 EC67             (      fallbit.asm):00359                  ldd   7,s
                      (      fallbit.asm):00360                  ENDC
0A04 ED41             (      fallbit.asm):00361         BadSkip  std   R$D,u        put starting bit # of block into callers D register
                      (      fallbit.asm):00362                  IFNE  H6309
                      (      fallbit.asm):00363                  leas  $07,s        eat our temporary stack area & return
                      (      fallbit.asm):00364                  ELSE
0A06 3269             (      fallbit.asm):00365                  leas  $09,s
                      (      fallbit.asm):00366                  ENDC
0A08 39               (      fallbit.asm):00367                  rts
                      (/home/strick/go/s):00405         
                      (/home/strick/go/s):00406                  use    fgprdsc.asm
                      (      fgprdsc.asm):00001         **************************************************
                      (      fgprdsc.asm):00002         * System Call: F$GPrDsc
                      (      fgprdsc.asm):00003         *
                      (      fgprdsc.asm):00004         * Function: Get copy of process descriptor
                      (      fgprdsc.asm):00005         *
                      (      fgprdsc.asm):00006         * Input:  A = Desired process ID
                      (      fgprdsc.asm):00007         *         X = 512 byte buffer pointer
                      (      fgprdsc.asm):00008         *
                      (      fgprdsc.asm):00009         * Output: None
                      (      fgprdsc.asm):00010         *
                      (      fgprdsc.asm):00011         * Error:  CC = C bit set; B = error code
                      (      fgprdsc.asm):00012         *
0A09 9E50             (      fgprdsc.asm):00013         FGPrDsc  ldx   <D.Proc     Get current process dsc. ptr.
0A0B E606             (      fgprdsc.asm):00014                  ldb   P$Task,x    Get task number
0A0D A641             (      fgprdsc.asm):00015                  lda   R$A,u       Get requested process ID #
0A0F 103F37           (      fgprdsc.asm):00016                  os9   F$GProcP    Get ptr to process to descriptor
0A12 250D             (      fgprdsc.asm):00017                  bcs   L0962       Error, exit with it
0A14 96D0             (      fgprdsc.asm):00018                  lda   <D.SysTsk   Get system task #
0A16 30A4             (      fgprdsc.asm):00019                  leax  ,y          Point X to the process descriptor
0A18 108E0200         (      fgprdsc.asm):00020                  ldy   #P$Size     Y=Size of process descriptor (512 bytes)
0A1C EE44             (      fgprdsc.asm):00021                  ldu   R$X,u       Get requested place to put copy of process dsc.
0A1E 103F38           (      fgprdsc.asm):00022                  os9   F$Move      Move it into caller's space
0A21 39               (      fgprdsc.asm):00023         L0962    rts
                      (/home/strick/go/s):00407         
                      (/home/strick/go/s):00408                  use    fgblkmp.asm
                      (      fgblkmp.asm):00001         **************************************************
                      (      fgblkmp.asm):00002         * System Call: F$GBlkMp
                      (      fgblkmp.asm):00003         *
                      (      fgblkmp.asm):00004         * Function:
                      (      fgblkmp.asm):00005         *
                      (      fgblkmp.asm):00006         * Input:  X = 1024 byte buffer pointer
                      (      fgblkmp.asm):00007         *
                      (      fgblkmp.asm):00008         * Output: D = Number of bytes per block
                      (      fgblkmp.asm):00009         *         Y = Size of system's memory block map
                      (      fgblkmp.asm):00010         *
                      (      fgblkmp.asm):00011         *
                      (      fgblkmp.asm):00012         * Error:  CC = C bit set; B = error code
                      (      fgblkmp.asm):00013         *
0A22 CC2000           (      fgblkmp.asm):00014         FGBlkMp  ldd   #DAT.BlSz   # bytes per MMU block (8k)
0A25 ED41             (      fgblkmp.asm):00015                  std   R$D,u       Put into caller's D register
0A27 DC42             (      fgblkmp.asm):00016                  ldd   <D.BlkMap+2 Get end of system block map ptr
0A29 9340             (      fgblkmp.asm):00017                  subd  <D.BlkMap   Subtract start of system block map ptr
0A2B ED46             (      fgblkmp.asm):00018                  std   R$Y,u       Store size of system block map in caller's Y reg.
0A2D 1F02             (      fgblkmp.asm):00019                  tfr   d,y
0A2F 96D0             (      fgblkmp.asm):00020                  lda   <D.SysTsk   Get system task #
0A31 9E50             (      fgblkmp.asm):00021                  ldx   <D.Proc     Get caller's task #
0A33 E606             (      fgblkmp.asm):00022                  ldb   P$Task,x    get task # of caller
0A35 9E40             (      fgblkmp.asm):00023                  ldx   <D.BlkMap   Get start ptr of system block map
0A37 EE44             (      fgblkmp.asm):00024         L0978    ldu   R$X,u       Get addr to put it that caller requested
0A39 103F38           (      fgblkmp.asm):00025                  os9   F$Move      Move it into caller's space
0A3C 39               (      fgblkmp.asm):00026                  rts
                      (/home/strick/go/s):00409         
                      (/home/strick/go/s):00410                  use    fgmoddr.asm
                      (      fgmoddr.asm):00001         **************************************************
                      (      fgmoddr.asm):00002         * System Call: F$GModDr
                      (      fgmoddr.asm):00003         *
                      (      fgmoddr.asm):00004         * Function: Get copy of module directory
                      (      fgmoddr.asm):00005         *
                      (      fgmoddr.asm):00006         * Input:  X = 2048 byte buffer pointer
                      (      fgmoddr.asm):00007         *
                      (      fgmoddr.asm):00008         * Output: None
                      (      fgmoddr.asm):00009         *
                      (      fgmoddr.asm):00010         * Error:  CC = C bit set; B = error code
                      (      fgmoddr.asm):00011         *
0A3D DC46             (      fgmoddr.asm):00012         FGModDr  ldd   <D.ModDir+2 Get end ptr of module directory
0A3F 9344             (      fgmoddr.asm):00013                  subd  <D.ModDir   Calculate maximum size of module directory
0A41 1F02             (      fgmoddr.asm):00014                  tfr   d,y         Put max. size in Y
0A43 DC58             (      fgmoddr.asm):00015                  ldd   <D.ModEnd   Get real end ptr of module dir
0A45 9344             (      fgmoddr.asm):00016                  subd  <D.ModDir   Calculate real size of module dir
0A47 AE44             (      fgmoddr.asm):00017                  ldx   R$X,u       Get requested buffer ptr to put it from caller
                      (      fgmoddr.asm):00018                  IFNE  H6309
                      (      fgmoddr.asm):00019                  addr  d,x         Calculate end addr. of directory after its copied
                      (      fgmoddr.asm):00020                  ELSE
0A49 308B             (      fgmoddr.asm):00021                  leax  d,x
                      (      fgmoddr.asm):00022                  ENDC
0A4B AF46             (      fgmoddr.asm):00023                  stx   R$Y,u       Preserve in caller's Y register
0A4D 9E44             (      fgmoddr.asm):00024                  ldx   <D.ModDir   Get start ptr of module directory
0A4F AF48             (      fgmoddr.asm):00025                  stx   R$U,u       Preserve in caller's U register
                      (      fgmoddr.asm):00026         
0A51 96D0             (      fgmoddr.asm):00027                  lda   <D.SysTsk   Get system task #
0A53 9E50             (      fgmoddr.asm):00028                  ldx   <D.Proc     Get current process task #
0A55 E606             (      fgmoddr.asm):00029                  ldb   P$Task,x
0A57 9E44             (      fgmoddr.asm):00030                  ldx   <D.ModDir   Get start ptr of module directory
0A59 20DC             (      fgmoddr.asm):00031                  bra   L0978      --- saves 4 bytes, adds 3 cycles
                      (      fgmoddr.asm):00032         ***         ldu   R$X,u       Get caller's buffer ptr
                      (      fgmoddr.asm):00033         ***         os9   F$Move      Copy module directory in caller's buffer
                      (      fgmoddr.asm):00034         ***         rts
                      (/home/strick/go/s):00411         
                      (/home/strick/go/s):00412                  use    fsuser.asm
                      (       fsuser.asm):00001         **************************************************
                      (       fsuser.asm):00002         * System Call: F$SUser
                      (       fsuser.asm):00003         *
                      (       fsuser.asm):00004         * Function: Set User ID number
                      (       fsuser.asm):00005         *
                      (       fsuser.asm):00006         * Input:  Y = Desired user ID number
                      (       fsuser.asm):00007         *
                      (       fsuser.asm):00008         * Output: None
                      (       fsuser.asm):00009         *
                      (       fsuser.asm):00010         * Error:  CC = C bit set; B = error code
                      (       fsuser.asm):00011         *
0A5B 9E50             (       fsuser.asm):00012         FSUser   ldx   <D.Proc      get current process dsc ptr
0A5D EC46             (       fsuser.asm):00013                  ldd   R$Y,u        get requested user number
0A5F ED08             (       fsuser.asm):00014                  std   P$User,x     save new user # in process descriptor
0A61 5F               (       fsuser.asm):00015                  clrb               no error
0A62 39               (       fsuser.asm):00016                  rts                and return
                      (/home/strick/go/s):00413         
                      (/home/strick/go/s):00414                  use    funload.asm
                      (      funload.asm):00001         **************************************************
                      (      funload.asm):00002         * System Call: F$UnLoad
                      (      funload.asm):00003         *
                      (      funload.asm):00004         * Function: Unlink a module by name
                      (      funload.asm):00005         *
                      (      funload.asm):00006         * Input:  A = Module type
                      (      funload.asm):00007         *         X = Pointer to module name
                      (      funload.asm):00008         *
                      (      funload.asm):00009         * Output: None
                      (      funload.asm):00010         *
                      (      funload.asm):00011         * Error:  CC = C bit set; B = error code
                      (      funload.asm):00012         *
0A63 3440             (      funload.asm):00013         FUnLoad  pshs  u            preserve register stack pointer
0A65 A641             (      funload.asm):00014                  lda   R$A,u        get module type
0A67 9E50             (      funload.asm):00015                  ldx   <D.Proc      get current process pointer
0A69 318840           (      funload.asm):00016                  leay  P$DATImg,x   point to DAT image
0A6C AE44             (      funload.asm):00017                  ldx   R$X,u        get pointer to name
0A6E 103F4E           (      funload.asm):00018                  os9   F$FModul     find it in module directory
0A71 3520             (      funload.asm):00019                  puls  y            restore register stack pointer
0A73 2539             (      funload.asm):00020                  bcs   L0A4F        couldn't find it, return error
0A75 AF24             (      funload.asm):00021                  stx   R$X,y        save update name pointer
                      (      funload.asm):00022                  IFNE  H6309
                      (      funload.asm):00023                  ldw   MD$Link,u    get link count
                      (      funload.asm):00024                  beq   L0A21        already 0 check if it's a I/O module
                      (      funload.asm):00025                  decw               subtract 1
                      (      funload.asm):00026                  stw   MD$Link,u    save it back
                      (      funload.asm):00027                  ELSE
0A77 AE46             (      funload.asm):00028                  ldx   MD$Link,u    get module link count
0A79 2706             (      funload.asm):00029                  beq   L0A21        branch if zero
0A7B 301F             (      funload.asm):00030                  leax  -1,x         else decrement
0A7D AF46             (      funload.asm):00031                  stx   MD$Link,u
                      (      funload.asm):00032                  ENDC
0A7F 262C             (      funload.asm):00033                  bne   L0A4E        not zero, don't remove from memory, return
                      (      funload.asm):00034         
                      (      funload.asm):00035         * Link count is zero, check if module can be removed from memory
0A81 81D0             (      funload.asm):00036         L0A21    cmpa  #FlMgr       is it a I/O module?
0A83 2525             (      funload.asm):00037                  blo   L0A4B        no, remove module from memory
                      (      funload.asm):00038         
                      (      funload.asm):00039         * Special handling for I/O module deletion
0A85 4F               (      funload.asm):00040                  clra
0A86 AED4             (      funload.asm):00041                  ldx   [MD$MPDAT,u] get 1st 2 blocks in DAT image of module
0A88 109E4C           (      funload.asm):00042                  ldy   <D.SysDAT    get pointer to system DAT image
0A8B 8B02             (      funload.asm):00043         L0A2B    adda  #2
0A8D 8110             (      funload.asm):00044                  cmpa  #DAT.ImSz    done entire DAT?
0A8F 2419             (      funload.asm):00045                  bcc   L0A4B        yes, delete the module from memory
0A91 ACA6             (      funload.asm):00046                  cmpx  a,y          find block?
0A93 26F6             (      funload.asm):00047                  bne   L0A2B        no, keep looking
0A95 48               (      funload.asm):00048                  lsla               multiply by 16 to calculate the offset
0A96 48               (      funload.asm):00049                  lsla
0A97 48               (      funload.asm):00050                  lsla
0A98 48               (      funload.asm):00051                  lsla
0A99 5F               (      funload.asm):00052                  clrb
0A9A E344             (      funload.asm):00053                  addd  MD$MPtr,u    add in the pointer
0A9C 1F01             (      funload.asm):00054                  tfr   d,x          copy it to X
0A9E 103F33           (      funload.asm):00055                  os9   F$IODel      delete the device from memory
0AA1 2407             (      funload.asm):00056                  bcc   L0A4B        no error, skip ahead
                      (      funload.asm):00057         
                      (      funload.asm):00058                  IFNE  H6309
                      (      funload.asm):00059                  ldw   MD$Link,u    put link count back
                      (      funload.asm):00060                  incw
                      (      funload.asm):00061                  stw   MD$Link,u
                      (      funload.asm):00062                  ELSE
0AA3 AE46             (      funload.asm):00063                  ldx   MD$Link,u    put link count back
0AA5 3001             (      funload.asm):00064                  leax  1,x
0AA7 AF46             (      funload.asm):00065                  stx   MD$Link,u
                      (      funload.asm):00066                  ENDC
0AA9 39               (      funload.asm):00067                  rts                Return with error
                      (      funload.asm):00068         
                      (      funload.asm):00069         * Delete module from memory
0AAA 17F737           (      funload.asm):00070         L0A4B    lbsr  DelMod       Delete module from memory
0AAD 5F               (      funload.asm):00071         L0A4E    clrb               clear errors
0AAE 39               (      funload.asm):00072         L0A4F    rts                return
                      (/home/strick/go/s):00415         
                      (/home/strick/go/s):00416                  use    ffind64.asm
                      (      ffind64.asm):00001         **************************************************
                      (      ffind64.asm):00002         * System Call: F$Find64
                      (      ffind64.asm):00003         *
                      (      ffind64.asm):00004         * Function: Find a 64 byte memory block
                      (      ffind64.asm):00005         *
                      (      ffind64.asm):00006         * Input:  X = Address of page table
                      (      ffind64.asm):00007         *         A = Block number
                      (      ffind64.asm):00008         *
                      (      ffind64.asm):00009         * Output: Y = Address of block
                      (      ffind64.asm):00010         *
                      (      ffind64.asm):00011         * Error:  CC = C bit set; B = error code
                      (      ffind64.asm):00012         *
0AAF AE44             (      ffind64.asm):00013         FFind64  ldx   R$X,u        Get block tbl ptr
0AB1 A641             (      ffind64.asm):00014                  lda   R$A,u        get path block #
                      (      ffind64.asm):00015         * Find a empty path block
0AB3 270F             (      ffind64.asm):00016                  beq   L0A70        None, return error
0AB5 5F               (      ffind64.asm):00017                  clrb               calculate address
                      (      ffind64.asm):00018                  IFNE  H6309
                      (      ffind64.asm):00019                  lsrd               (Divide by 4)
                      (      ffind64.asm):00020                  lsrd
                      (      ffind64.asm):00021                  ELSE
0AB6 44               (      ffind64.asm):00022                  lsra
0AB7 56               (      ffind64.asm):00023                  rorb
0AB8 44               (      ffind64.asm):00024                  lsra
0AB9 56               (      ffind64.asm):00025                  rorb
                      (      ffind64.asm):00026                  ENDC
0ABA A686             (      ffind64.asm):00027                  lda   a,x          is that block allocated?
0ABC 1F01             (      ffind64.asm):00028                  tfr   d,x          Move addr to X
0ABE 2704             (      ffind64.asm):00029                  beq   L0A70        no, return error
0AC0 6D84             (      ffind64.asm):00030                  tst   ,x           this the page table?
0AC2 2602             (      ffind64.asm):00031                  bne   L0A71        no, we can use this one
0AC4 43               (      ffind64.asm):00032         L0A70    coma               set carry & return
0AC5 39               (      ffind64.asm):00033                  rts
0AC6 AF46             (      ffind64.asm):00034         L0A71    stx   R$Y,u        save address of block
0AC8 39               (      ffind64.asm):00035                  rts                return
                      (      ffind64.asm):00036         
                      (      ffind64.asm):00037         
                      (      ffind64.asm):00038         **************************************************
                      (      ffind64.asm):00039         * System Call: F$All64
                      (      ffind64.asm):00040         *
                      (      ffind64.asm):00041         * Function: Allocate a 64 byte memory block
                      (      ffind64.asm):00042         *
                      (      ffind64.asm):00043         * Input:  X = Address of page table (0 if page table hasn't been allocated)
                      (      ffind64.asm):00044         *
                      (      ffind64.asm):00045         * Output: A = Block number
                      (      ffind64.asm):00046         *         X = Address of page table
                      (      ffind64.asm):00047         *         Y = Address of block
                      (      ffind64.asm):00048         *
                      (      ffind64.asm):00049         * Error:  CC = C bit set; B = error code
                      (      ffind64.asm):00050         *
                      (      ffind64.asm):00051         *
0AC9 AE44             (      ffind64.asm):00052         FAll64   ldx   R$X,u        get base address of page table
0ACB 2608             (      ffind64.asm):00053                  bne   L0A7F        it's been allocated, skip ahead
0ACD 8D10             (      ffind64.asm):00054                  bsr   L0A89        allocate the page
0ACF 250D             (      ffind64.asm):00055                  bcs   L0A88        error allocating, return
0AD1 AF84             (      ffind64.asm):00056                  stx   ,x           save base address in page table
0AD3 AF44             (      ffind64.asm):00057                  stx   R$X,u        save base address to caller's X
0AD5 8D20             (      ffind64.asm):00058         L0A7F    bsr   L0A9F        find a empty spot in path table
0AD7 2505             (      ffind64.asm):00059                  bcs   L0A88        couldn't find one, return error
0AD9 A741             (      ffind64.asm):00060                  sta   R$A,u        save block #
0ADB 10AF46           (      ffind64.asm):00061                  sty   R$Y,u        save address of block
0ADE 39               (      ffind64.asm):00062         L0A88    rts                return
                      (      ffind64.asm):00063         
                      (      ffind64.asm):00064         * Allocate a new base page
                      (      ffind64.asm):00065         * Exit: X=Ptr to newly allocated 256 byte page
0ADF 3440             (      ffind64.asm):00066         L0A89    pshs  u            preserve register stack pointer
                      (      ffind64.asm):00067                  IFNE  H6309
                      (      ffind64.asm):00068                  ldq   #$01000100   get block size (1 for SRqMem & 1 for TFM)
                      (      ffind64.asm):00069                  ELSE
0AE1 CC0100           (      ffind64.asm):00070                  ldd   #$0100
                      (      ffind64.asm):00071                  ENDC
0AE4 103F28           (      ffind64.asm):00072                  os9   F$SRqMem     request mem for it
0AE7 30C4             (      ffind64.asm):00073                  leax  ,u           point to it
0AE9 EEE4             (      ffind64.asm):00074                  ldu   ,s           restore register stack pointer
0AEB AFE4             (      ffind64.asm):00075                  stx   ,s           save pointer to new page on stack
0AED 2506             (      ffind64.asm):00076                  bcs   L0A9E        error on allocate, return
                      (      ffind64.asm):00077         * Clear freshly allocated page to 0's
                      (      ffind64.asm):00078                  IFNE  H6309
                      (      ffind64.asm):00079                  leay  TFMNull,pc   point to NULL byte
                      (      ffind64.asm):00080                  tfm   y,x+
                      (      ffind64.asm):00081                  ELSE
0AEF 5F               (      ffind64.asm):00082                  clrb
0AF0 6F80             (      ffind64.asm):00083         AllLoop  clr   ,x+
0AF2 5A               (      ffind64.asm):00084                  decb
0AF3 26FB             (      ffind64.asm):00085                  bne   AllLoop
                      (      ffind64.asm):00086                  ENDC
0AF5 3590             (      ffind64.asm):00087         L0A9E    puls  x,pc
                      (      ffind64.asm):00088         
                      (      ffind64.asm):00089                  IFNE  H6309
0AF7                  (      ffind64.asm):00090         TFMNull  fcb   0            used to clear memory
                      (      ffind64.asm):00091                  ENDC
                      (      ffind64.asm):00092         
                      (      ffind64.asm):00093         * Search page table for a free 64 byte block
                      (      ffind64.asm):00094         * Entry: X=Ptr to base page (the one with the 64 entry page index)
0AF7 3450             (      ffind64.asm):00095         L0A9F    pshs  x,u          preserve base page & register stack ptrs
0AF9 4F               (      ffind64.asm):00096                  clra               Index entry #=0
                      (      ffind64.asm):00097         * Main search loop
0AFA 3402             (      ffind64.asm):00098         L0AA2    pshs  a            Save which index entry we are checking
0AFC 5F               (      ffind64.asm):00099                  clrb               Set position within page we are checking to 0
0AFD A686             (      ffind64.asm):00100                  lda   a,x          Is the current index entry used?
0AFF 270B             (      ffind64.asm):00101                  beq   L0AB4        no, skip ahead
0B01 1F02             (      ffind64.asm):00102                  tfr   d,y          Yes, Move ptr to 256 byte block to Y
0B03 4F               (      ffind64.asm):00103                  clra               Clear offset for 64 byte blocks to 0
0B04 6DAB             (      ffind64.asm):00104         L0AAC    tst   d,y          Is this 64 byte block allocated?
0B06 2706             (      ffind64.asm):00105                  beq   L0AB6        No, skip ahead
0B08 CB40             (      ffind64.asm):00106                  addb  #$40         Yes, point to next 64 byte block in page
0B0A 24F8             (      ffind64.asm):00107                  bcc   L0AAC        If not done checking entire page, keep going
                      (      ffind64.asm):00108         
                      (      ffind64.asm):00109         * Index entry has a totally unused 256 byte page
0B0C 1A01             (      ffind64.asm):00110         L0AB4    orcc  #Carry       Set flag (didn't find one)
0B0E 31AB             (      ffind64.asm):00111         L0AB6    leay  d,y
0B10 3502             (      ffind64.asm):00112                  puls  a            Get which index entry we were checking
0B12 2425             (      ffind64.asm):00113                  bcc   L0AE1        If we found a blank entry, go allocate it
0B14 4C               (      ffind64.asm):00114                  inca               Didn't, move to next index entry
0B15 8140             (      ffind64.asm):00115                  cmpa  #64          Done entire index?
0B17 25E1             (      ffind64.asm):00116                  blo   L0AA2        no, keep looking
                      (      ffind64.asm):00117         
0B19 4F               (      ffind64.asm):00118                  clra               Yes, clear out to first entry
0B1A 6D86             (      ffind64.asm):00119         L0AC2    tst   a,x          Is this one used?
0B1C 270A             (      ffind64.asm):00120                  beq   L0AD0        No, skip ahead
0B1E 4C               (      ffind64.asm):00121                  inca               Increment index entry #
0B1F 8140             (      ffind64.asm):00122                  cmpa  #64          Done entire index?
0B21 25F7             (      ffind64.asm):00123                  blo   L0AC2        No, continue looking
                      (      ffind64.asm):00124         
0B23 53               (      ffind64.asm):00125                  comb               Done all of them, exit with Path table full error
0B24 C6C8             (      ffind64.asm):00126                  ldb   #E$PthFul
0B26 35D0             (      ffind64.asm):00127                  puls  x,u,pc
                      (      ffind64.asm):00128         * Found empty page
0B28 3412             (      ffind64.asm):00129         L0AD0    pshs  x,a          Preserve index ptr & index entry #
0B2A 8DB3             (      ffind64.asm):00130                  bsr   L0A89        Allocate & clear out new 256 byte page
0B2C 251A             (      ffind64.asm):00131                  bcs   L0AF0        If error,exit
0B2E 3184             (      ffind64.asm):00132                  leay  ,x           Point Y to start of new page
0B30 1F10             (      ffind64.asm):00133                  tfr   x,d          Also copy to D
0B32 1F89             (      ffind64.asm):00134                  tfr   a,b          Page # into B
0B34 3512             (      ffind64.asm):00135                  puls  x,a          Get back index ptr & index entry #
0B36 E786             (      ffind64.asm):00136                  stb   a,x          Save page # in proper index entry
0B38 5F               (      ffind64.asm):00137                  clrb               D=index entry #*256
                      (      ffind64.asm):00138         
                      (      ffind64.asm):00139         * D = Block Address
     0B39             (      ffind64.asm):00140         L0AE1    equ   *
                      (      ffind64.asm):00141                  IFNE  H6309
                      (      ffind64.asm):00142                  lsld               ???Calculate 256 byte page #?
                      (      ffind64.asm):00143                  lsld
                      (      ffind64.asm):00144                  tfr   y,u          U=Ptr to start of new page
                      (      ffind64.asm):00145                  ldw   #$3f         Clear out the 64 byte block we are using
                      (      ffind64.asm):00146                  leax  TFMNull,pc
                      (      ffind64.asm):00147                  tfm   x,u+
                      (      ffind64.asm):00148                  ELSE
0B39 58               (      ffind64.asm):00149                  aslb
0B3A 49               (      ffind64.asm):00150                  rola
0B3B 58               (      ffind64.asm):00151                  aslb
0B3C 49               (      ffind64.asm):00152                  rola
0B3D C63F             (      ffind64.asm):00153                  ldb   #$3f
0B3F 6FA5             (      ffind64.asm):00154         ClrIt    clr   b,y
0B41 5A               (      ffind64.asm):00155                  decb
0B42 26FB             (      ffind64.asm):00156                  bne   ClrIt
                      (      ffind64.asm):00157                  ENDC
0B44 A7A4             (      ffind64.asm):00158                  sta   ,y           Save 256 byte page # as 1st byte of block
0B46 35D0             (      ffind64.asm):00159                  puls  x,u,pc
                      (      ffind64.asm):00160         
0B48 3263             (      ffind64.asm):00161         L0AF0    leas  3,s
0B4A 35D0             (      ffind64.asm):00162                  puls  x,u,pc
                      (      ffind64.asm):00163         
                      (      ffind64.asm):00164         
                      (      ffind64.asm):00165         **************************************************
                      (      ffind64.asm):00166         * System Call: F$Ret64
                      (      ffind64.asm):00167         *
                      (      ffind64.asm):00168         * Function: Deallocate a 64 byte memory block
                      (      ffind64.asm):00169         *
                      (      ffind64.asm):00170         * Input:  X = Address of page table
                      (      ffind64.asm):00171         *         A = Block number
                      (      ffind64.asm):00172         *
                      (      ffind64.asm):00173         * Output: None
                      (      ffind64.asm):00174         *
                      (      ffind64.asm):00175         * Error:  CC = C bit set; B = error code
                      (      ffind64.asm):00176         *
0B4C A641             (      ffind64.asm):00177         FRet64   lda   R$A,u
0B4E AE44             (      ffind64.asm):00178                  ldx   R$X,u
0B50 3476             (      ffind64.asm):00179                  pshs  u,y,x,d
0B52 5F               (      ffind64.asm):00180                  clrb
0B53 4D               (      ffind64.asm):00181                  tsta
0B54 2724             (      ffind64.asm):00182                  beq   L0B22
                      (      ffind64.asm):00183                  IFNE  H6309
                      (      ffind64.asm):00184                  lsrd               (Divide by 4)
                      (      ffind64.asm):00185                  lsrd
                      (      ffind64.asm):00186                  ELSE
0B56 44               (      ffind64.asm):00187                  lsra
0B57 56               (      ffind64.asm):00188                  rorb
0B58 44               (      ffind64.asm):00189                  lsra
0B59 56               (      ffind64.asm):00190                  rorb
                      (      ffind64.asm):00191                  ENDC
0B5A 3402             (      ffind64.asm):00192                  pshs  a
0B5C A686             (      ffind64.asm):00193                  lda   a,x
0B5E 2718             (      ffind64.asm):00194                  beq   L0B20
0B60 1F02             (      ffind64.asm):00195                  tfr   d,y
0B62 6FA4             (      ffind64.asm):00196                  clr   ,y
0B64 5F               (      ffind64.asm):00197                  clrb
0B65 1F03             (      ffind64.asm):00198                  tfr   d,u
0B67 4F               (      ffind64.asm):00199                  clra
0B68 6DCB             (      ffind64.asm):00200         L0B10    tst   d,u
0B6A 260C             (      ffind64.asm):00201                  bne   L0B20
0B6C CB40             (      ffind64.asm):00202                  addb  #$40
0B6E 26F8             (      ffind64.asm):00203                  bne   L0B10
0B70 4C               (      ffind64.asm):00204                  inca
0B71 103F29           (      ffind64.asm):00205                  os9   F$SRtMem
0B74 A6E4             (      ffind64.asm):00206                  lda   ,s
0B76 6F86             (      ffind64.asm):00207                  clr   a,x
0B78 6FE0             (      ffind64.asm):00208         L0B20    clr   ,s+
0B7A 35F6             (      ffind64.asm):00209         L0B22    puls  pc,u,y,x,d
                      (/home/strick/go/s):00417         
                      (/home/strick/go/s):00418                  use    fgprocp.asm
                      (      fgprocp.asm):00001         **************************************************
                      (      fgprocp.asm):00002         * System Call: F$GProcP
                      (      fgprocp.asm):00003         *
                      (      fgprocp.asm):00004         * Function: Get process pointer
                      (      fgprocp.asm):00005         *
                      (      fgprocp.asm):00006         * Input:  A = Process ID
                      (      fgprocp.asm):00007         *
                      (      fgprocp.asm):00008         * Output: Y = Pointer to process descriptor
                      (      fgprocp.asm):00009         *
                      (      fgprocp.asm):00010         * Error:  CC = C bit set; B = error code
                      (      fgprocp.asm):00011         *
0B7C A641             (      fgprocp.asm):00012         FGProcP  lda   R$A,u        get process #
0B7E 8D06             (      fgprocp.asm):00013                  bsr   L0B2E        Get ptr to process descriptor
0B80 2503             (      fgprocp.asm):00014                  bcs   L0B2D        If error, exit with it
0B82 10AF46           (      fgprocp.asm):00015                  sty   R$Y,u        Save ptr in caller's Y
0B85 39               (      fgprocp.asm):00016         L0B2D    rts                Return
                      (      fgprocp.asm):00017         
                      (      fgprocp.asm):00018         * Entry: A=Process #
                      (      fgprocp.asm):00019         * Exit:  Y=Ptr to process descriptor
                      (      fgprocp.asm):00020         *  All others preserved
0B86 3416             (      fgprocp.asm):00021         L0B2E    pshs  d,x          Preserve regs
0B88 E6E4             (      fgprocp.asm):00022                  ldb   ,s           Get process # into B
0B8A 270C             (      fgprocp.asm):00023                  beq   L0B40        0, skip ahead
0B8C 9E48             (      fgprocp.asm):00024                  ldx   <D.PrcDBT    Get ptr to process descriptor block table
0B8E 3A               (      fgprocp.asm):00025                  abx                Point to specific process' entry
0B8F A684             (      fgprocp.asm):00026                  lda   ,x           Get MSB of process dsc. ptr
0B91 2705             (      fgprocp.asm):00027                  beq   L0B40        None there, exit with error
0B93 5F               (      fgprocp.asm):00028                  clrb               Clear LSB of process dsc. ptr (always fall on $200
0B94 1F02             (      fgprocp.asm):00029                  tfr   d,y            boundaries) & move ptr to Y
0B96 3596             (      fgprocp.asm):00030                  puls  d,x,pc       Restore regs & return
                      (      fgprocp.asm):00031         
0B98 3516             (      fgprocp.asm):00032         L0B40    puls  d,x          Get regs back
0B9A 53               (      fgprocp.asm):00033                  comb               Exit with Bad process ID error
0B9B C6E0             (      fgprocp.asm):00034                  ldb   #E$BPrcID
0B9D 39               (      fgprocp.asm):00035                  rts
                      (/home/strick/go/s):00419         
                      (/home/strick/go/s):00420                  use    fdelimg.asm
                      (      fdelimg.asm):00001         **************************************************
                      (      fdelimg.asm):00002         * System Call: F$DelImg
                      (      fdelimg.asm):00003         *
                      (      fdelimg.asm):00004         * Function: Deallocate image RAM blocks
                      (      fdelimg.asm):00005         *
                      (      fdelimg.asm):00006         * Input:  A = Beginning block number
                      (      fdelimg.asm):00007         *         B = Block count
                      (      fdelimg.asm):00008         *         X = Process descriptor pointer
                      (      fdelimg.asm):00009         *
                      (      fdelimg.asm):00010         * Output: None
                      (      fdelimg.asm):00011         *
                      (      fdelimg.asm):00012         * Error:  CC = C bit set; B = error code
                      (      fdelimg.asm):00013         *
0B9E AE44             (      fdelimg.asm):00014         FDelImg  ldx   R$X,u        get process pointer
0BA0 EC41             (      fdelimg.asm):00015                  ldd   R$D,u        get start block & block count
0BA2 338840           (      fdelimg.asm):00016                  leau  <P$DATImg,x  point to DAT image
0BA5 48               (      fdelimg.asm):00017                  lsla               2 bytes per block entry
0BA6 33C6             (      fdelimg.asm):00018                  leau  a,u          Point U to block entry
                      (      fdelimg.asm):00019         * Block count in B
0BA8                  (      fdelimg.asm):00020         L0B55
                      (      fdelimg.asm):00021                  IFNE  H6309
                      (      fdelimg.asm):00022                  ldw   ,u           Get block #
                      (      fdelimg.asm):00023                  addw  <D.BlkMap    Add it to map ptr
                      (      fdelimg.asm):00024                  aim   #^RAMinUse,0,w
                      (      fdelimg.asm):00025                  ldw   #DAT.Free    get empty block marker
                      (      fdelimg.asm):00026                  stw   ,u++         save it to process descriptor
                      (      fdelimg.asm):00027                  decb               done?
                      (      fdelimg.asm):00028                  bne   L0B55        No, keep going
                      (      fdelimg.asm):00029                  oim   #ImgChg,P$State,x
                      (      fdelimg.asm):00030                  ELSE
0BA8 4F               (      fdelimg.asm):00031                  clra
0BA9 1F02             (      fdelimg.asm):00032                  tfr   d,y
0BAB 3410             (      fdelimg.asm):00033                  pshs  x
0BAD ECC4             (      fdelimg.asm):00034         L0BLoop  ldd   ,u
0BAF D340             (      fdelimg.asm):00035                  addd  <D.BlkMap
0BB1 1F01             (      fdelimg.asm):00036                  tfr   d,x
0BB3 A684             (      fdelimg.asm):00037                  lda   ,x
0BB5 84FE             (      fdelimg.asm):00038                  anda  #^RAMinUse
0BB7 A784             (      fdelimg.asm):00039                  sta   ,x
0BB9 CC333E           (      fdelimg.asm):00040                  ldd   #DAT.Free
0BBC EDC1             (      fdelimg.asm):00041                  std   ,u++
0BBE 313F             (      fdelimg.asm):00042                  leay  -1,y
0BC0 26EB             (      fdelimg.asm):00043                  bne   L0BLoop
                      (      fdelimg.asm):00044         
0BC2 3510             (      fdelimg.asm):00045                  puls  x
0BC4 A60C             (      fdelimg.asm):00046                  lda   P$State,x
0BC6 8A10             (      fdelimg.asm):00047                  ora   #ImgChg
0BC8 A70C             (      fdelimg.asm):00048                  sta   P$State,x
                      (      fdelimg.asm):00049                  ENDC
0BCA 5F               (      fdelimg.asm):00050                  clrb
0BCB 39               (      fdelimg.asm):00051                  rts
                      (/home/strick/go/s):00421         
                      (/home/strick/go/s):00422                  use    fmapblk.asm
                      (      fmapblk.asm):00001         **************************************************
                      (      fmapblk.asm):00002         * System Call: F$MapBlk
                      (      fmapblk.asm):00003         *
                      (      fmapblk.asm):00004         * Function: Map specific block
                      (      fmapblk.asm):00005         *
                      (      fmapblk.asm):00006         * Input:  B = Number of blocks
                      (      fmapblk.asm):00007         *         X = Beginning block number
                      (      fmapblk.asm):00008         *
                      (      fmapblk.asm):00009         * Output: U = Address of first block
                      (      fmapblk.asm):00010         *
                      (      fmapblk.asm):00011         * Error:  CC = C bit set; B = error code
                      (      fmapblk.asm):00012         *
0BCC A642             (      fmapblk.asm):00013         FMapBlk  lda   R$B,u        get # blocks
0BCE 2733             (      fmapblk.asm):00014                  beq   L0BAA        can't map 0 blocks, return error
0BD0 8108             (      fmapblk.asm):00015                  cmpa  #DAT.BlCt    within range of DAT image?
0BD2 222F             (      fmapblk.asm):00016                  bhi   L0BAA        no, return error
0BD4 3270             (      fmapblk.asm):00017                  leas  -$10,s       make a buffer to hold DAT image
0BD6 AE44             (      fmapblk.asm):00018                  ldx   R$X,u        get start block #
0BD8 C601             (      fmapblk.asm):00019                  ldb   #1           block increment value
                      (      fmapblk.asm):00020                  IFNE  H6309
                      (      fmapblk.asm):00021         * Change to W 05/19/93 - used W since one cycle faster per block
                      (      fmapblk.asm):00022                  tfr   s,w          point to buffer
0BDA                  (      fmapblk.asm):00023         FMapBlk2 stx   ,w++         save block # to buffer
                      (      fmapblk.asm):00024                  ELSE
0BDA 1F42             (      fmapblk.asm):00025                  tfr   s,y          point to buffer
0BDC AFA1             (      fmapblk.asm):00026         FMapBlk2 stx   ,y++         save block # to buffer
                      (      fmapblk.asm):00027                  ENDC
0BDE 3A               (      fmapblk.asm):00028                  abx                Next block
0BDF 4A               (      fmapblk.asm):00029                  deca               done?
0BE0 26FA             (      fmapblk.asm):00030                  bne   FMapBlk2     no, keep going
0BE2 E642             (      fmapblk.asm):00031                  ldb   R$B,u        get block count again
0BE4 9E50             (      fmapblk.asm):00032                  ldx   <D.Proc      get process pointer
0BE6 318840           (      fmapblk.asm):00033                  leay  <P$DATImg,x  point to DAT image
0BE9 103F3E           (      fmapblk.asm):00034                  os9   F$FreeHB     find the highest free block offset
0BEC 2511             (      fmapblk.asm):00035                  bcs   L0BA6        no room, return error
                      (      fmapblk.asm):00036                  IFNE  H6309
                      (      fmapblk.asm):00037                  tfr   d,w          Preserve start block # & # of blocks
                      (      fmapblk.asm):00038                  ELSE
0BEE 3406             (      fmapblk.asm):00039                  pshs  d
                      (      fmapblk.asm):00040                  ENDC
0BF0 48               (      fmapblk.asm):00041                  lsla               Multiply start block # by 32
0BF1 48               (      fmapblk.asm):00042                  lsla
0BF2 48               (      fmapblk.asm):00043                  lsla
0BF3 48               (      fmapblk.asm):00044                  lsla
0BF4 48               (      fmapblk.asm):00045                  lsla
0BF5 5F               (      fmapblk.asm):00046                  clrb
0BF6 ED48             (      fmapblk.asm):00047                  std   R$U,u        save address of first block
                      (      fmapblk.asm):00048                  IFNE  H6309
                      (      fmapblk.asm):00049                  tfr   w,d          Restore offset
                      (      fmapblk.asm):00050                  ELSE
0BF8 3506             (      fmapblk.asm):00051                  puls  d
                      (      fmapblk.asm):00052                  ENDC
0BFA 33E4             (      fmapblk.asm):00053                  leau  ,s           move DAT image into process descriptor
0BFC 103F3C           (      fmapblk.asm):00054                  os9   F$SetImg     Change process dsc to reflect new blocks
0BFF 32E810           (      fmapblk.asm):00055         L0BA6    leas  <$10,s       Eat DAT image copy & return
0C02 39               (      fmapblk.asm):00056                  rts
                      (      fmapblk.asm):00057         
0C03 53               (      fmapblk.asm):00058         L0BAA    comb               Illegal Block address error
0C04 C6DB             (      fmapblk.asm):00059                  ldb   #E$IBA
0C06 39               (      fmapblk.asm):00060                  rts
                      (/home/strick/go/s):00423         
                      (/home/strick/go/s):00424                  use    fclrblk.asm
                      (      fclrblk.asm):00001         **************************************************
                      (      fclrblk.asm):00002         * System Call: F$ClrBlk
                      (      fclrblk.asm):00003         *
                      (      fclrblk.asm):00004         * Function: Clear RAM blocks
                      (      fclrblk.asm):00005         *
                      (      fclrblk.asm):00006         * Input:  B = Number of blocks
                      (      fclrblk.asm):00007         *         U = Address of first block
                      (      fclrblk.asm):00008         *
                      (      fclrblk.asm):00009         * Output: None
                      (      fclrblk.asm):00010         *
                      (      fclrblk.asm):00011         * Error:  CC = C bit set; B = error code
                      (      fclrblk.asm):00012         *
0C07 E642             (      fclrblk.asm):00013         FClrBlk  ldb   R$B,u
0C09 2737             (      fclrblk.asm):00014                  beq   L0BE9
0C0B EC48             (      fclrblk.asm):00015                  ldd   R$U,u
0C0D 5D               (      fclrblk.asm):00016                  tstb
0C0E 26F3             (      fclrblk.asm):00017                  bne   L0BAA
0C10 851F             (      fclrblk.asm):00018                  bita  #$1F
0C12 26EF             (      fclrblk.asm):00019                  bne   L0BAA
0C14 9E50             (      fclrblk.asm):00020                  ldx   <D.Proc
0C16 A604             (      fclrblk.asm):00021                  lda   P$SP,x
0C18 84E0             (      fclrblk.asm):00022                  anda  #$E0
0C1A A048             (      fclrblk.asm):00023                  suba  R$U,u
0C1C 2509             (      fclrblk.asm):00024                  bcs   L0BCE
0C1E 44               (      fclrblk.asm):00025                  lsra
0C1F 44               (      fclrblk.asm):00026                  lsra
0C20 44               (      fclrblk.asm):00027                  lsra
0C21 44               (      fclrblk.asm):00028                  lsra
0C22 44               (      fclrblk.asm):00029                  lsra
0C23 A142             (      fclrblk.asm):00030                  cmpa  R$B,u
0C25 25DC             (      fclrblk.asm):00031                  bcs   L0BAA
0C27                  (      fclrblk.asm):00032         L0BCE
                      (      fclrblk.asm):00033                  IFNE  H6309
                      (      fclrblk.asm):00034                  oim   #ImgChg,P$State,x
                      (      fclrblk.asm):00035                  ELSE
0C27 A60C             (      fclrblk.asm):00036                  lda   P$State,x
0C29 8A10             (      fclrblk.asm):00037                  ora   #ImgChg
0C2B A70C             (      fclrblk.asm):00038                  sta   P$State,x
                      (      fclrblk.asm):00039                  ENDC
0C2D A648             (      fclrblk.asm):00040                  lda   R$U,u
0C2F 44               (      fclrblk.asm):00041                  lsra
0C30 44               (      fclrblk.asm):00042                  lsra
0C31 44               (      fclrblk.asm):00043                  lsra
0C32 44               (      fclrblk.asm):00044                  lsra
0C33 318840           (      fclrblk.asm):00045                  leay  P$DATImg,x
0C36 31A6             (      fclrblk.asm):00046                  leay  a,y
0C38 E642             (      fclrblk.asm):00047                  ldb   R$B,u
0C3A 8E333E           (      fclrblk.asm):00048                  ldx   #DAT.Free
0C3D AFA1             (      fclrblk.asm):00049         L0BE4    stx   ,y++
0C3F 5A               (      fclrblk.asm):00050                  decb
0C40 26FB             (      fclrblk.asm):00051                  bne   L0BE4
0C42 5F               (      fclrblk.asm):00052         L0BE9    clrb
0C43 39               (      fclrblk.asm):00053                  rts
                      (/home/strick/go/s):00425         
                      (/home/strick/go/s):00426                  use    fgcmdir.asm
                      (      fgcmdir.asm):00001         **************************************************
                      (      fgcmdir.asm):00002         * System Call: F$GCMDir
                      (      fgcmdir.asm):00003         *
                      (      fgcmdir.asm):00004         * Notes:
                      (      fgcmdir.asm):00005         * This system call is only used by OS9p1 to get rid of all
                      (      fgcmdir.asm):00006         * the empty spaces in the module directory to keep it small
                      (      fgcmdir.asm):00007         * and compact.
                      (      fgcmdir.asm):00008         *
                      (      fgcmdir.asm):00009         * Input:  X = Address of allocation bitmap
                      (      fgcmdir.asm):00010         *         D = Number of first bit to set
                      (      fgcmdir.asm):00011         *         Y = Bit count (number of bits to set)
                      (      fgcmdir.asm):00012         *
                      (      fgcmdir.asm):00013         * Output: None
                      (      fgcmdir.asm):00014         *
                      (      fgcmdir.asm):00015         * Error:  CC = C bit set; B = error code
                      (      fgcmdir.asm):00016         *
0C44 9E44             (      fgcmdir.asm):00017         FGCMDir  ldx   <D.ModDir    get pointer to module directory start
0C46 2006             (      fgcmdir.asm):00018                  bra   L0C1D        skip ahead
0C48 EE84             (      fgcmdir.asm):00019         L0C17    ldu   MD$MPDAT,x   DAT initialized?
0C4A 2708             (      fgcmdir.asm):00020                  beq   L0C23        no it's empty skip ahead
0C4C 3008             (      fgcmdir.asm):00021                  leax  MD$ESize,x   move to next entry
0C4E 9C58             (      fgcmdir.asm):00022         L0C1D    cmpx  <D.ModEnd    end of module directory?
0C50 26F6             (      fgcmdir.asm):00023                  bne   L0C17        no, keep looking
0C52 2028             (      fgcmdir.asm):00024                  bra   L0C4B
                      (      fgcmdir.asm):00025         * Move all entrys up 1 slot in directory
0C54 1F12             (      fgcmdir.asm):00026         L0C23    tfr   x,y          move empty entry pointer to Y
0C56 2004             (      fgcmdir.asm):00027                  bra   L0C2B
0C58 EEA4             (      fgcmdir.asm):00028         L0C27    ldu   MD$MPDAT,y
0C5A 2609             (      fgcmdir.asm):00029                  bne   L0C34
0C5C 3128             (      fgcmdir.asm):00030         L0C2B    leay  MD$ESize,y
0C5E 109C58           (      fgcmdir.asm):00031                  cmpy  <D.ModEnd    done complete directory?
0C61 26F5             (      fgcmdir.asm):00032                  bne   L0C27        no, keep going
0C63 2015             (      fgcmdir.asm):00033                  bra   L0C49
                      (      fgcmdir.asm):00034         * Move entry up 1 slot in directory
     0C65             (      fgcmdir.asm):00035         L0C34    equ   *
                      (      fgcmdir.asm):00036                  IFNE  H6309
                      (      fgcmdir.asm):00037                  ldw   #MD$ESize
                      (      fgcmdir.asm):00038                  tfm   y+,x+
                      (      fgcmdir.asm):00039                  ELSE
0C65 EEA1             (      fgcmdir.asm):00040                  ldu   ,y++
0C67 EF81             (      fgcmdir.asm):00041                  stu   ,x++
0C69 EEA1             (      fgcmdir.asm):00042                  ldu   ,y++
0C6B EF81             (      fgcmdir.asm):00043                  stu   ,x++
0C6D EEA1             (      fgcmdir.asm):00044                  ldu   ,y++
0C6F EF81             (      fgcmdir.asm):00045                  stu   ,x++
0C71 EEA1             (      fgcmdir.asm):00046                  ldu   ,y++
0C73 EF81             (      fgcmdir.asm):00047                  stu   ,x++
                      (      fgcmdir.asm):00048                  ENDC
0C75 109C58           (      fgcmdir.asm):00049         L0C44    cmpy  <D.ModEnd    done complete directory?
0C78 26DE             (      fgcmdir.asm):00050                  bne   L0C27        no, keep going
                      (      fgcmdir.asm):00051         
0C7A 9F58             (      fgcmdir.asm):00052         L0C49    stx   <D.ModEnd    save new module directory end pointer
                      (      fgcmdir.asm):00053         * Shrink DAT table
0C7C 9E46             (      fgcmdir.asm):00054         L0C4B    ldx   <D.ModDir+2  get module directory DAT end pointer
0C7E 2004             (      fgcmdir.asm):00055                  bra   L0C53
                      (      fgcmdir.asm):00056         
0C80 EE84             (      fgcmdir.asm):00057         L0C4F    ldu   ,x
0C82 2708             (      fgcmdir.asm):00058                  beq   L0C5B
0C84 301E             (      fgcmdir.asm):00059         L0C53    leax  -2,x         Bump module ptr down by 2
0C86 9C5A             (      fgcmdir.asm):00060                  cmpx  <D.ModDAT    Hit beginning yet?
0C88 26F6             (      fgcmdir.asm):00061                  bne   L0C4F        No, keep checking
0C8A 5F               (      fgcmdir.asm):00062                  clrb               Yes, return without error
0C8B 39               (      fgcmdir.asm):00063                  rts
                      (      fgcmdir.asm):00064         
0C8C EE1E             (      fgcmdir.asm):00065         L0C5B    ldu   -2,x
0C8E 26F4             (      fgcmdir.asm):00066                  bne   L0C53
0C90 1F12             (      fgcmdir.asm):00067                  tfr   x,y
0C92 2004             (      fgcmdir.asm):00068                  bra   L0C67
                      (      fgcmdir.asm):00069         
0C94 EEA4             (      fgcmdir.asm):00070         L0C63    ldu   ,y
0C96 2609             (      fgcmdir.asm):00071                  bne   L0C70
0C98 313E             (      fgcmdir.asm):00072         L0C67    leay  -2,y
0C9A 109C5A           (      fgcmdir.asm):00073         L0C69    cmpy  <D.ModDAT
0C9D 24F5             (      fgcmdir.asm):00074                  bcc   L0C63
0C9F 2011             (      fgcmdir.asm):00075                  bra   L0C81
0CA1 3122             (      fgcmdir.asm):00076         L0C70    leay  2,y
0CA3 EEA4             (      fgcmdir.asm):00077                  ldu   ,y
0CA5 EF84             (      fgcmdir.asm):00078                  stu   ,x
0CA7 EEA3             (      fgcmdir.asm):00079         L0C76    ldu   ,--y
0CA9 EF83             (      fgcmdir.asm):00080                  stu   ,--x
0CAB 270B             (      fgcmdir.asm):00081                  beq   L0C87
0CAD 109C5A           (      fgcmdir.asm):00082                  cmpy  <D.ModDAT
0CB0 26F5             (      fgcmdir.asm):00083                  bne   L0C76
                      (      fgcmdir.asm):00084         
0CB2 9F5A             (      fgcmdir.asm):00085         L0C81    stx   <D.ModDAT
0CB4 8D0E             (      fgcmdir.asm):00086                  bsr   L0C95
0CB6 5F               (      fgcmdir.asm):00087                  clrb               Yes, return without error
0CB7 39               (      fgcmdir.asm):00088                  rts
                      (      fgcmdir.asm):00089         
0CB8 3122             (      fgcmdir.asm):00090         L0C87    leay  2,y
0CBA 3002             (      fgcmdir.asm):00091                  leax  2,x
0CBC 8D06             (      fgcmdir.asm):00092                  bsr   L0C95
0CBE 313C             (      fgcmdir.asm):00093                  leay  -4,y
0CC0 301E             (      fgcmdir.asm):00094                  leax  -2,x
0CC2 20D6             (      fgcmdir.asm):00095                  bra   L0C69
                      (      fgcmdir.asm):00096         
                      (      fgcmdir.asm):00097         * Update Module Dir Image Ptrs
0CC4 3440             (      fgcmdir.asm):00098         L0C95    pshs  u
0CC6 DE44             (      fgcmdir.asm):00099                  ldu   <D.ModDir
0CC8 2009             (      fgcmdir.asm):00100                  bra   L0CA4
0CCA 10ACC4           (      fgcmdir.asm):00101         L0C9B    cmpy  MD$MPDAT,u   same DAT ptrs?
0CCD 2602             (      fgcmdir.asm):00102                  bne   L0CA2        no, skip
0CCF AFC4             (      fgcmdir.asm):00103                  stx   MD$MPDAT,u   else update ptrs
0CD1 3348             (      fgcmdir.asm):00104         L0CA2    leau  MD$ESize,u   next entry
0CD3 119358           (      fgcmdir.asm):00105         L0CA4    cmpu  <D.ModEnd    last entry?
0CD6 26F2             (      fgcmdir.asm):00106                  bne   L0C9B        no
0CD8 35C0             (      fgcmdir.asm):00107                  puls  u,pc         else yes... return
                      (/home/strick/go/s):00427         
                      (/home/strick/go/s):00428                  use    fdebug.asm
                      (       fdebug.asm):00001         ******************************************************
                      (       fdebug.asm):00002         * F$Debug entry point
                      (       fdebug.asm):00003         *
                      (       fdebug.asm):00004         * Enter the debugger (or reboot)
                      (       fdebug.asm):00005         *
                      (       fdebug.asm):00006         * Input:  A = Function code
                      (       fdebug.asm):00007         *
                      (       fdebug.asm):00008         
     0CDA             (       fdebug.asm):00009         FDebug  equ   *
                      (       fdebug.asm):00010         * Determine if this is a system process or super user
                      (       fdebug.asm):00011         * Only they have permission to reboot
0CDA A641             (       fdebug.asm):00012                  lda   R$A,u
0CDC 81FF             (       fdebug.asm):00013                  cmpa  #255        reboot request
0CDE 2609             (       fdebug.asm):00014                  bne   leave       nope
0CE0 9E50             (       fdebug.asm):00015                  ldx   <D.Proc
0CE2 EC08             (       fdebug.asm):00016                  ldd   P$User,x    get user ID
0CE4 2704             (       fdebug.asm):00017                  beq   REBOOT
0CE6 53               (       fdebug.asm):00018                  comb
0CE7 C6D0             (       fdebug.asm):00019                  ldb   #E$UnkSvc
0CE9 39               (       fdebug.asm):00020         leave    rts
                      (       fdebug.asm):00021         
                      (       fdebug.asm):00022         * NOTE: HIGHLY MACHINE DEPENDENT CODE!
                      (       fdebug.asm):00023         * THIS CODE IS SPECIFIC TO THE COCO 3!
0CEA 1A50             (       fdebug.asm):00024         REBOOT   orcc  #IntMasks  turn off IRQ's
0CEC 5F               (       fdebug.asm):00025                  clrb
0CED F7FFA0           (       fdebug.asm):00026                  stb   >DAT.Regs   map in block 0
0CF0 F70071           (       fdebug.asm):00027                  stb   >$0071      cold reboot
0CF3 8638             (       fdebug.asm):00028                  lda   #$38        bottom of DECB block mapping
0CF5 B7FFA0           (       fdebug.asm):00029                  sta   >DAT.Regs   map in block zero
0CF8 F70071           (       fdebug.asm):00030                  stb   >$0071      and cold reboot here, too
0CFB CE0000           (       fdebug.asm):00031                  ldu   #$0000      force code to go at offset $0000
0CFE 308C15           (       fdebug.asm):00032                  leax  ReBootLoc,pc  reboot code
0D01 108E0028         (       fdebug.asm):00033                  ldy   #CodeSize
0D05 A680             (       fdebug.asm):00034         cit.loop lda   ,x+
0D07 A7C0             (       fdebug.asm):00035                  sta   ,u+
0D09 313F             (       fdebug.asm):00036                  leay  -1,y
0D0B 26F8             (       fdebug.asm):00037                  bne   cit.loop
0D0D 7FFEED           (       fdebug.asm):00038                  clr   >$FEED      cold reboot
0D10 7FFFD8           (       fdebug.asm):00039                  clr   >$FFD8      go to low speed
0D13 7E0000           (       fdebug.asm):00040                  jmp   >$0000      jump to the reset code
                      (       fdebug.asm):00041         
0D16                  (       fdebug.asm):00042         ReBootLoc
0D16 CC3808           (       fdebug.asm):00043                  ldd   #$3808      block $38, 8 times
0D19 8EFFA0           (       fdebug.asm):00044                  ldx   #DAT.Regs   where to put it
0D1C A708             (       fdebug.asm):00045         Lp       sta   8,x         put into map 1
0D1E A780             (       fdebug.asm):00046                  sta   ,x+         and into map 0
0D20 4C               (       fdebug.asm):00047                  inca
0D21 5A               (       fdebug.asm):00048                  decb              count down
0D22 26F8             (       fdebug.asm):00049                  bne   Lp
                      (       fdebug.asm):00050         
0D24 864C             (       fdebug.asm):00051                  lda   #$4C        standard DECB mapping
0D26 B7FF90           (       fdebug.asm):00052                  sta   >$FF90
0D29 7FFF91           (       fdebug.asm):00053                  clr   >DAT.Task   go to map type 0
0D2C 7FFFDE           (       fdebug.asm):00054                  clr   >$FFDE      and to all-ROM mode
0D2F CCFFFF           (       fdebug.asm):00055                  ldd   #$FFFF
                      (       fdebug.asm):00056         *         clrd              executes as CLRA on a 6809
0D32 104F             (       fdebug.asm):00057                  fdb   $104F
0D34 5D               (       fdebug.asm):00058                  tstb              is it a 6809?
0D35 2603             (       fdebug.asm):00059                  bne   Reset       yup, skip ahead
                      (       fdebug.asm):00060         *         ldmd  #$00        go to 6809 mode!
0D37 113D00           (       fdebug.asm):00061                  fcb   $11,$3D,$00
0D3A 6E9FFFFE         (       fdebug.asm):00062         Reset    jmp   [$FFFE]    do a reset
     0028             (       fdebug.asm):00063         CodeSize equ   *-ReBootLoc
                      (/home/strick/go/s):00429         
0D3E FA063B           (/home/strick/go/s):00430                  emod
     0D41             (/home/strick/go/s):00431         eom      equ   *
                      (/home/strick/go/s):00432                  end
