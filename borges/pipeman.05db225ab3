                      (/home/strick/go/s):00001         ********************************************************************
                      (/home/strick/go/s):00002         * PipeMan - OS-9 Level Two Named Pipe File Manager
                      (/home/strick/go/s):00003         *
                      (/home/strick/go/s):00004         * $Id$
                      (/home/strick/go/s):00005         *
                      (/home/strick/go/s):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/home/strick/go/s):00007         * Comment
                      (/home/strick/go/s):00008         * ------------------------------------------------------------------
                      (/home/strick/go/s):00009         *          1986/02/23  Kent D. Meyers
                      (/home/strick/go/s):00010         * Pipeman Modified to Include the SS.Ready I$GETSTT Call.
                      (/home/strick/go/s):00011         *
                      (/home/strick/go/s):00012         *          1986/03/26  Kent D. Meyers
                      (/home/strick/go/s):00013         * Major Bug Corrected.
                      (/home/strick/go/s):00014         *
                      (/home/strick/go/s):00015         *          1988/06/29  Kent D. Meyers
                      (/home/strick/go/s):00016         * Upgraded to Level II version.
                      (/home/strick/go/s):00017         *
                      (/home/strick/go/s):00018         *          1988/11/11  Chris J. Burke
                      (/home/strick/go/s):00019         * Added new labels and special defs.
                      (/home/strick/go/s):00020         * Added code to detect EOF in SS.Ready
                      (/home/strick/go/s):00021         * Reformatted to make the module easier to understand during coding.
                      (/home/strick/go/s):00022         *
                      (/home/strick/go/s):00023         *          1988/12/03  Chris J. Burke
                      (/home/strick/go/s):00024         * Added named pipes, etc for Level 2 upgrade, includes SS.SSig,
                      (/home/strick/go/s):00025         * SS.Relea, SS.Attr, SS.FD
                      (/home/strick/go/s):00026         *
                      (/home/strick/go/s):00027         *   1      1988/12/26  Chris J. Burke
                      (/home/strick/go/s):00028         * Release 1.0 for Tandy CoCo OS-9.
                      (/home/strick/go/s):00029         
                      (/home/strick/go/s):00030                  nam   PipeMan
                      (/home/strick/go/s):00031                  ttl   OS9 Level Two Named Pipe File Manager
                      (/home/strick/go/s):00032         
                      (/home/strick/go/s):00033         *
                      (/home/strick/go/s):00034         *   Copyright 1981, 1985, 1986, 1988 by Microware Systems Corporation
                      (/home/strick/go/s):00035         *   All Rights Reserved
                      (/home/strick/go/s):00036         *
                      (/home/strick/go/s):00037         *   Named pipe code by Burke & Burke.
                      (/home/strick/go/s):00038         *   All rights assigned to Microware Systems Corporation.
                      (/home/strick/go/s):00039         *
                      (/home/strick/go/s):00040         *   This file contains proprietary information of Microware Systems
                      (/home/strick/go/s):00041         *   Corporation.  Persons accessing this file will be held strictly
                      (/home/strick/go/s):00042         *   accountable for their use of the information herein.
                      (/home/strick/go/s):00043         *
                      (/home/strick/go/s):00044         
                      (/home/strick/go/s):00045         *
                      (/home/strick/go/s):00046         *   PIPEMAN
                      (/home/strick/go/s):00047         *
                      (/home/strick/go/s):00048         *   Pipe File Manager
                      (/home/strick/go/s):00049         *
                      (/home/strick/go/s):00050         *   WARNING
                      (/home/strick/go/s):00051         *   -------
                      (/home/strick/go/s):00052         *
                      (/home/strick/go/s):00053         *   Opening an existing named pipe emulates IOMan's I$Close and
                      (/home/strick/go/s):00054         *   I$Dup calls.  This file manager contains subroutines that
                      (/home/strick/go/s):00055         *   mimic the current operation of IOMan.  Any changes to IOMan's
                      (/home/strick/go/s):00056         *   FMEXEC, I$Close or I$Dup calls must also be made to this code.
                      (/home/strick/go/s):00057         *
                      (/home/strick/go/s):00058         *   Device Driver Static Storage Layout
                      (/home/strick/go/s):00059         *   -----------------------------------
                      (/home/strick/go/s):00060         *
                      (/home/strick/go/s):00061         *   $00-$01 V.List  Pointer in system map to pipe buffer for 1st
                      (/home/strick/go/s):00062         *                   pipe (16 bits).
                      (/home/strick/go/s):00063         *
                      (/home/strick/go/s):00064         *   Pipe Buffer Data Structure
                      (/home/strick/go/s):00065         *   --------------------------
                      (/home/strick/go/s):00066         *
                      (/home/strick/go/s):00067         *   $00-$01 PP.PD   Pointer to shared path descriptor
                      (/home/strick/go/s):00068         *   $02-$03 PP.Next Pointer to next pipe buffer in system map
                      (/home/strick/go/s):00069         *   $04-$05 PP.Prev Pointer to previous pipe buffer in system map
                      (/home/strick/go/s):00070         *   $06-$07 PP.Rsv2 Reserved
                      (/home/strick/go/s):00071         *
                      (/home/strick/go/s):00072         *   $08     PP.Data Data buffer begins at this offset
                      (/home/strick/go/s):00073         *
                      (/home/strick/go/s):00074         *   Path Descriptor Data Structure
                      (/home/strick/go/s):00075         *   ------------------------------
                      (/home/strick/go/s):00076         *
                      (/home/strick/go/s):00077         *   $00     PD.PD   Path number
                      (/home/strick/go/s):00078         *   $01     PD.MOD  Access permissions
                      (/home/strick/go/s):00079         *   $02     PD.CNT  Number of open images (e.g. I$DUP)
                      (/home/strick/go/s):00080         *   $05     PD.CPR  Current process ID
                      (/home/strick/go/s):00081         *   $06-$07 PD.RGS  Address of caller's register stack
                      (/home/strick/go/s):00082         *   $08-$09 PD.BUF  System space pipe buffer base pointer
                      (/home/strick/go/s):00083         *** PP.Read must have bit 4 clear; PP.Writ must be PP.Read XOR 4
                      (/home/strick/go/s):00084         *  $0A      PD.Read No bytes -- offset only
                      (/home/strick/go/s):00085         *   $0A     PD.RPID Process ID of reader waiting on signal
                      (/home/strick/go/s):00086         *   $0B     PD.RCT  Number of blocked readers
                      (/home/strick/go/s):00087         *   $0C     PD.RSIG Signal to send reader
                      (/home/strick/go/s):00088         *   $0D     PD.REOR Read EOR character
                      (/home/strick/go/s):00089         *  $0E      PD.Writ No bytes -- offset only
                      (/home/strick/go/s):00090         *   $0E     PD.WPID Process ID of writer waiting on signal
                      (/home/strick/go/s):00091         *   $0F     PD.WCT  Number of blocked writers
                      (/home/strick/go/s):00092         *   $10     PD.WSIG Signal to send writer
                      (/home/strick/go/s):00093         *   $11     PD.WEOR Write EOR character (dummy)
                      (/home/strick/go/s):00094         *** End of special section
                      (/home/strick/go/s):00095         *   $12-$13 PD.End  Pointer to end of pipe buffer
                      (/home/strick/go/s):00096         *   $14-$15 PD.NxtI Next in pointer
                      (/home/strick/go/s):00097         *   $16-$17 PD.NxtO Next out pointer
                      (/home/strick/go/s):00098         *   $18     PD.RFlg "Ready" flag
                      (/home/strick/go/s):00099         *   $19     PD.Wrtn "Written" flag
                      (/home/strick/go/s):00100         *   $1A-$1B PD.BCnt # queue elements currently bufered
                      (/home/strick/go/s):00101         *   $1C     PD.Own  Process ID of pipe original creator
                      (/home/strick/go/s):00102         *   $1D     PD.Keep Non-zero if this pipe has been kept open artificially
                      (/home/strick/go/s):00103         *   $1E-$1F PD.QSiz Max. size of queue (in elements)
                      (/home/strick/go/s):00104         *   .
                      (/home/strick/go/s):00105         *   .
                      (/home/strick/go/s):00106         *   $20     PD.DTP  Device type $02 = PIPE
                      (/home/strick/go/s):00107         *   $21     PD.ESiz Size of each queue element
                      (/home/strick/go/s):00108         *   $22-$23 PD.ECnt Max. elements in queue
                      (/home/strick/go/s):00109         *   $23-$3F PD.Name Pipe name (after moving PD.ECnt to PD.QSiz)
                      (/home/strick/go/s):00110         *
                      (/home/strick/go/s):00111         
                      (/home/strick/go/s):00112                  page  
                      (/home/strick/go/s):00113         *
                      (/home/strick/go/s):00114         *   Global equates
                      (/home/strick/go/s):00115         *
                      (/home/strick/go/s):00116                  IFP1  
                      (/home/strick/go/s):00117                  use   defsfile
                      (         defsfile):00001                  use   ../defsfile
     0002             (      ../defsfile):00001         Level    equ   2
                      (      ../defsfile):00002         
                      (      ../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (            os9.d):00637         * and for bytes in the system memory map at D.SysMem.
                      (            os9.d):00638         * A value of 0 indicates an unused/unassigned block.
                      (            os9.d):00639         * In the code, block assignment often involves incrementing a value
                      (            os9.d):00640         * from 0 to 1 rather than explict use of RAMinUse.
                      (            os9.d):00641         *
     0080             (            os9.d):00642         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00643         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00644         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00645         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00646         *
                      (            os9.d):00647         * Service Dispatch Table special entries
                      (            os9.d):00648         *
     00FE             (            os9.d):00649         IOEntry        EQU       254
                      (            os9.d):00650         
                      (            os9.d):00651                        ENDC      
                      (            os9.d):00652         
                      (            os9.d):00653                        TTL       Structure Formats
                      (            os9.d):00654                        PAG       
                      (            os9.d):00655         ************************************
                      (            os9.d):00656         * Module Directory Entry Definitions
                      (            os9.d):00657         *
                      (            os9.d):00658                        ORG       0
                      (            os9.d):00659                        IFGT      Level-1
0000                  (            os9.d):00660         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00661         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00662                        ENDC      
0004                  (            os9.d):00663         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00664         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00665         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00666         
                      (            os9.d):00667         ************************************
                      (            os9.d):00668         * Module Definitions
                      (            os9.d):00669         *
                      (            os9.d):00670         * Universal Module Offsets
                      (            os9.d):00671         *
                      (            os9.d):00672                        ORG       0
0000                  (            os9.d):00673         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00674         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00675         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00676         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00677         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00678         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00679         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00680         *
                      (            os9.d):00681         * Type-Dependent Module Offsets
                      (            os9.d):00682         *
                      (            os9.d):00683         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00684         *
0009                  (            os9.d):00685         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Program Module
                      (            os9.d):00688         *
000B                  (            os9.d):00689         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Driver, Device Descriptor Module
                      (            os9.d):00692         *
000D                  (            os9.d):00693         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00694         *
                      (            os9.d):00695         * Device Descriptor Module
                      (            os9.d):00696         *
                      (            os9.d):00697                        ORG       M$IDSize
0009                  (            os9.d):00698         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00699         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00700                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00701         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00702         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00703         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00704         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00705         *
                      (            os9.d):00706         * Configuration Module Entry Offsets
                      (            os9.d):00707         *
                      (            os9.d):00708                        ORG       M$IDSize
0009                  (            os9.d):00709         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00710         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00711         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00712         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00713         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00714         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00715         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00716         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00717         
0017                  (            os9.d):00718         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00719         OSVer          RMB       1                   OS version
0019                  (            os9.d):00720         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00721         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00722         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00723         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00724         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00725         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00726                        RMB       4                   reserved for future use
                      (            os9.d):00727         
                      (            os9.d):00728                        IFGT      Level-1
                      (            os9.d):00729         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00730         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00731         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00732         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00733         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00734                        ENDC      
                      (            os9.d):00735         
                      (            os9.d):00736         * Feature1 byte definitions
     0001             (            os9.d):00737         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00738         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00739         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00740         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00741         
                      (            os9.d):00742                        PAG       
                      (            os9.d):00743         **************************
                      (            os9.d):00744         * Module Field Definitions
                      (            os9.d):00745         *
                      (            os9.d):00746         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00747         *
     0087             (            os9.d):00748         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00749         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00750         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00751         
                      (            os9.d):00752         *
                      (            os9.d):00753         * Module Type/Language Field Masks
                      (            os9.d):00754         *
     00F0             (            os9.d):00755         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00756         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00757         
                      (            os9.d):00758         *
                      (            os9.d):00759         * Module Type Values
                      (            os9.d):00760         *
     00F0             (            os9.d):00761         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00762         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00763         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00764         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00765         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00766         Data           EQU       $40                 Data Module
     0030             (            os9.d):00767         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00768         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00769         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00770         
                      (            os9.d):00771         *
                      (            os9.d):00772         * Module Language Values
                      (            os9.d):00773         *
     0001             (            os9.d):00774         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00775         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00776         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00777         CCode          EQU       4                   C I-code
     0005             (            os9.d):00778         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00779         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00780         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00781         *
                      (            os9.d):00782         * Module Attributes / Revision byte
                      (            os9.d):00783         *
                      (            os9.d):00784         * Field Masks
                      (            os9.d):00785         *
     00F0             (            os9.d):00786         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00787         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00788         *
                      (            os9.d):00789         * Attribute Flags
                      (            os9.d):00790         *
     0080             (            os9.d):00791         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00792         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00793         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00794         
                      (            os9.d):00795         ********************
                      (            os9.d):00796         * Device Type Values
                      (            os9.d):00797         *
                      (            os9.d):00798         * These values define various classes of devices, which are
                      (            os9.d):00799         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00800         * in a device's device descriptor.
                      (            os9.d):00801         *
     0000             (            os9.d):00802         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00803         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00804         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00805         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00806         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00807         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00808         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00809         
                      (            os9.d):00810         *********************
                      (            os9.d):00811         * CRC Result Constant
                      (            os9.d):00812         *
     0080             (            os9.d):00813         CRCCon1        EQU       $80
     0FE3             (            os9.d):00814         CRCCon23       EQU       $0FE3
                      (            os9.d):00815         
                      (            os9.d):00816                        TTL       Process Information
                      (            os9.d):00817                        PAG       
                      (            os9.d):00818         ********************************
                      (            os9.d):00819         * Process Descriptor Definitions
                      (            os9.d):00820         *
                      (            os9.d):00821                        IFEQ      Level-1
                      (            os9.d):00822         
                      (            os9.d):00823         * Level 1 process descriptor defs
002A                  (            os9.d):00824         DefIOSiz       EQU       12
002A                  (            os9.d):00825         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00826         
                      (            os9.d):00827                        ORG       0
002A                  (            os9.d):00828         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00829         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00830         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00831         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00832         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00833         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00834         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00835         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00836         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00837         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00838         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00839         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00840         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00841         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00842         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00843         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00844         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00845         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00846         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00847         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00848         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00849         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00850         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00851         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00852         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00853                        RMB       $40-.               unused
002A                  (            os9.d):00854         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00855         
                      (            os9.d):00856         *
                      (            os9.d):00857         * Process State Flags
                      (            os9.d):00858         *
002A                  (            os9.d):00859         SysState       EQU       %10000000
002A                  (            os9.d):00860         TimSleep       EQU       %01000000
002A                  (            os9.d):00861         TimOut         EQU       %00100000
002A                  (            os9.d):00862         ImgChg         EQU       %00010000
002A                  (            os9.d):00863         Condem         EQU       %00000010
002A                  (            os9.d):00864         Dead           EQU       %00000001
                      (            os9.d):00865         
                      (            os9.d):00866                        ELSE      
                      (            os9.d):00867         
                      (            os9.d):00868         * Level 2 process descriptor defs
     0010             (            os9.d):00869         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00870         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00871         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00872         
                      (            os9.d):00873                        ORG       0
0000                  (            os9.d):00874         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00875         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00876         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00877         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00878         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00879         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00880         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00881         P$User         RMB       2                   User Index
000A                  (            os9.d):00882         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00883         P$Age          RMB       1                   Age
000C                  (            os9.d):00884         P$State        RMB       1                   Status
000D                  (            os9.d):00885         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00886         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00887         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00888         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00889         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00890         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00891         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00892         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00893         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00894         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00895         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00896                        RMB       $20-.               unused
0020                  (            os9.d):00897         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00898         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00899         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00900         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00901         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00902         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00903         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00904         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00905         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00906         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00907         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00908         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00909         P$Alarm        RMB       6
00C9                  (            os9.d):00910                        RMB       $200-.              Local stack
     0200             (            os9.d):00911         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00912         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00913         
                      (            os9.d):00914         *
                      (            os9.d):00915         * Process State Flags
                      (            os9.d):00916         *
     0080             (            os9.d):00917         SysState       EQU       %10000000
     0040             (            os9.d):00918         TimSleep       EQU       %01000000
     0020             (            os9.d):00919         TimOut         EQU       %00100000
     0010             (            os9.d):00920         ImgChg         EQU       %00010000
     0008             (            os9.d):00921         Suspend        EQU       %00001000
     0002             (            os9.d):00922         Condem         EQU       %00000010
     0001             (            os9.d):00923         Dead           EQU       %00000001
                      (            os9.d):00924         
                      (            os9.d):00925                        ENDC      
                      (            os9.d):00926         
                      (            os9.d):00927                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00928                        PAG       
                      (            os9.d):00929         *************************
                      (            os9.d):00930         * Path Descriptor Offsets
                      (            os9.d):00931         *
                      (            os9.d):00932                        ORG       0
0000                  (            os9.d):00933         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00934         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00935         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00936         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00937         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00938         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00939         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00940         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00941         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00942         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00943                        RMB       64-.                Path options
     0040             (            os9.d):00944         PDSIZE         EQU       .
                      (            os9.d):00945         
                      (            os9.d):00946         *
                      (            os9.d):00947         * Pathlist Special Symbols
                      (            os9.d):00948         *
     002F             (            os9.d):00949         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00950         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00951         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00952         
                      (            os9.d):00953                        PAG       
                      (            os9.d):00954         ****************************
                      (            os9.d):00955         * File Manager Entry Offsets
                      (            os9.d):00956         *
                      (            os9.d):00957                        ORG       0
0000                  (            os9.d):00958         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00959         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00960         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00961         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00962         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00963         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00964         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00965         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00966         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00967         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00968         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00969         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00970         FMCLOS         RMB       3                   Close File
                      (            os9.d):00971         
                      (            os9.d):00972         *****************************
                      (            os9.d):00973         * Device Driver Entry Offsets
                      (            os9.d):00974         *
                      (            os9.d):00975                        ORG       0
0000                  (            os9.d):00976         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00977         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00978         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00979         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00980         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00981         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00982         
                      (            os9.d):00983         *********************
                      (            os9.d):00984         * Device Table Format
                      (            os9.d):00985         *
                      (            os9.d):00986                        ORG       0
0000                  (            os9.d):00987         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00988         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00989         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00990         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00991         V$USRS         RMB       1                   use count
                      (            os9.d):00992                        IFGT      Level-1
0009                  (            os9.d):00993         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00994         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00995                        ENDC      
     000D             (            os9.d):00996         DEVSIZ         EQU       .
                      (            os9.d):00997         
                      (            os9.d):00998         *******************************
                      (            os9.d):00999         * Device Static Storage Offsets
                      (            os9.d):01000         *
                      (            os9.d):01001                        ORG       0
0000                  (            os9.d):01002         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):01003         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01004         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01005         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01006         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01007         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01008         
                      (            os9.d):01009         ********************************
                      (            os9.d):01010         * Interrupt Polling Table Format
                      (            os9.d):01011         *
                      (            os9.d):01012                        ORG       0
0000                  (            os9.d):01013         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01014         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01015         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01016         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01017         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01018         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01019                        IFGT      Level-1
0009                  (            os9.d):01020         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01021                        ENDC      
     000B             (            os9.d):01022         POLSIZ         EQU       .
                      (            os9.d):01023         
                      (            os9.d):01024         ********************
                      (            os9.d):01025         * VIRQ packet format
                      (            os9.d):01026         *
                      (            os9.d):01027                        ORG       0
0000                  (            os9.d):01028         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01029         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01030         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01031         Vi.PkSz        EQU       .
                      (            os9.d):01032         
     0001             (            os9.d):01033         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01034         
                      (            os9.d):01035                        PAG       
                      (            os9.d):01036         *************************************
                      (            os9.d):01037         * Machine Characteristics Definitions
                      (            os9.d):01038         *
     0000             (            os9.d):01039         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01040         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01041         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01042         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01043                        IFNE      H6309
0005                  (            os9.d):01044         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01045         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01046         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01047         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01048         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01049         R$X            EQU       6                   X Index register
0005                  (            os9.d):01050         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01051         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01052         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01053         R$Size         EQU       14                  Total register package size
                      (            os9.d):01054                        ELSE      
     0003             (            os9.d):01055         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01056         R$X            EQU       4                   X Index register
     0006             (            os9.d):01057         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01058         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01059         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01060         R$Size         EQU       12                  Total register package size
                      (            os9.d):01061                        ENDC      
                      (            os9.d):01062         
                      (            os9.d):01063         * MD register masks
                      (            os9.d):01064         * 6309 definitions
     0080             (            os9.d):01065         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01066         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01067         
     0080             (            os9.d):01068         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01069         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01070         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01071         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01072         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01073         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01074         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01075         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01076         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01077         Sign           EQU       %10000000           sign bit
                      (            os9.d):01078         
                      (            os9.d):01079                        TTL       Error Code Definitions
                      (            os9.d):01080                        PAG       
                      (            os9.d):01081         ************************
                      (            os9.d):01082         * Error Code Definitions
                      (            os9.d):01083         *
                      (            os9.d):01084         * Basic09 Error Codes
                      (            os9.d):01085         *
                      (            os9.d):01086                        ORG       10
000A                  (            os9.d):01087         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01088         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01089         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01090         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01091         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01092         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01093         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01094         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01095         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01096         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01097         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01098         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01099         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01100         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01101         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01102         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01103         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01104         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01105         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01106         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01107         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01108         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01109         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01110         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01111         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01112         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01113         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01114         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01115         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01116         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01117         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01118         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01119         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01120         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01121         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01122         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01123         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01124         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01125         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01126         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01127         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01128         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01129         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01130         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01131         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01132         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01133         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01134         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01135         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01136         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01137         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01138         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01139         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01140         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01141         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01142         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01143         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01144         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01145         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01146         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01147         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01148         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01149         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01150         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01151         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01152         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01153         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01154         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01155         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01156         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01157         
                      (            os9.d):01158         *
                      (            os9.d):01159         * System Dependent Error Codes
                      (            os9.d):01160         *
                      (            os9.d):01161         
                      (            os9.d):01162         * Level 2 windowing error codes
                      (            os9.d):01163                        ORG       183
00B7                  (            os9.d):01164         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01165         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01166         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01167         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01168         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01169                        RMB       1                   reserved
00BD                  (            os9.d):01170         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01171         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01172         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01173         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01174         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01175         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01176         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01177         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01178         
00C5                  (            os9.d):01179         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01180         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01181         E$Alias        RMB       1
                      (            os9.d):01182         
                      (            os9.d):01183         
                      (            os9.d):01184         *
                      (            os9.d):01185         * Standard NitrOS-9 Error Codes
                      (            os9.d):01186         *
                      (            os9.d):01187                        ORG       200
00C8                  (            os9.d):01188         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01189         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01190         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01191         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01192         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01193         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01194         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01195         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01196         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01197         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01198         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01199         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01200                        RMB       1
00D5                  (            os9.d):01201         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01202         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01203         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01204         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01205         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01206         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01207         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01208         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01209         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01210                        RMB       1
00DF                  (            os9.d):01211         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01212         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01213         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01214                        RMB       1
00E2                  (            os9.d):01215         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01216         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01217         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01218         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01219         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01220         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01221         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01222         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01223         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01224         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01225         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01226         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01227         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01228         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01229                        RMB       $F0-.               reserved
00F0                  (            os9.d):01230         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01231         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01232         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01233         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01234         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01235         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01236         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01237         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01238         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01239         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01240         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01241         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01242         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01243         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01244         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01245         
                      (            os9.d):01246         
                      (            os9.d):01247                        IFGT      Level-2
                      (            os9.d):01248         ***************************
                      (            os9.d):01249         * Level 3 Defs
                      (            os9.d):01250         *
                      (            os9.d):01251         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01252         *
00FF                  (            os9.d):01253         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01254         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01255         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01256         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01257         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01258         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01259                        ENDC      
                      (            os9.d):01260         
                      (            os9.d):01261                        ENDC      
                      (      ../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
     00E0             (            scf.d):00222         PARMASK        EQU       %11100000
                      (            scf.d):00223         
                      (            scf.d):00224         * PD.BAU definitions
                      (            scf.d):00225         *
                      (            scf.d):00226         * Baud rate
     0000             (            scf.d):00227         B110           EQU       %00000000
     0001             (            scf.d):00228         B300           EQU       %00000001
     0002             (            scf.d):00229         B600           EQU       %00000010
     0003             (            scf.d):00230         B1200          EQU       %00000011
     0004             (            scf.d):00231         B2400          EQU       %00000100
     0005             (            scf.d):00232         B4800          EQU       %00000101
     0006             (            scf.d):00233         B9600          EQU       %00000110
     0007             (            scf.d):00234         B19200         EQU       %00000111
     0008             (            scf.d):00235         B38400         EQU       %00001000
     0009             (            scf.d):00236         B57600         EQU       %00001001
     000A             (            scf.d):00237         B115200        EQU       %00001010
                      (            scf.d):00238         * Word size
     0000             (            scf.d):00239         WORD8          EQU       %00000000
     0020             (            scf.d):00240         WORD7          EQU       %00100000
                      (            scf.d):00241         * Stop bits
     0000             (            scf.d):00242         STOP1          EQU       %00000000
     0010             (            scf.d):00243         STOP2          EQU       %00010000
                      (            scf.d):00244         
                      (            scf.d):00245                        ENDC      
                      (      ../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (      ../defsfile):00006                  use   coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         ********************************
                      (           coco.d):00148         * Boot defs for NitrOS-9 Level 1
                      (           coco.d):00149         *
                      (           coco.d):00150         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00151         * system.
                      (           coco.d):00152         *
0004                  (           coco.d):00153         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE
                      (           coco.d):00156         
                      (           coco.d):00157         ******************************************
                      (           coco.d):00158         * Boot defs for NitrOS-9 Level 2 and above
                      (           coco.d):00159         *
                      (           coco.d):00160         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00161         * system.
                      (           coco.d):00162         *
     ED00             (           coco.d):00163         Bt.Start       SET       $ED00               Start address of the boot track in memory
     003B             (           coco.d):00164         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (           coco.d):00165         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (           coco.d):00166         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
                      (           coco.d):00167         
                      (           coco.d):00168                        ENDC
                      (           coco.d):00169         
                      (           coco.d):00170         * On the CoCo, the boot track is all of track 34
                      (           coco.d):00171         
     0022             (           coco.d):00172         Bt.Track       EQU       34                  Boot track
     0000             (           coco.d):00173         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (           coco.d):00174         
                      (           coco.d):00175         
     1080             (           coco.d):00176         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (           coco.d):00177         
                      (           coco.d):00178         
                      (           coco.d):00179                        IFEQ      Level-1
                      (           coco.d):00180         
                      (           coco.d):00181         *************************************************
                      (           coco.d):00182         *
                      (           coco.d):00183         * NitrOS-9 Level 1 Section
                      (           coco.d):00184         *
                      (           coco.d):00185         *************************************************
                      (           coco.d):00186         
0004                  (           coco.d):00187         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00188         
                      (           coco.d):00189                        ELSE      
                      (           coco.d):00190         
                      (           coco.d):00191         *************************************************
                      (           coco.d):00192         *
                      (           coco.d):00193         * NitrOS-9 Level 2 Section
                      (           coco.d):00194         *
                      (           coco.d):00195         *************************************************
                      (           coco.d):00196         
                      (           coco.d):00197         ****************************************
                      (           coco.d):00198         * Dynamic Address Translator Definitions
                      (           coco.d):00199         *
     0008             (           coco.d):00200         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00201         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00202         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00203         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00204         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00205         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00206         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00207         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00208         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00209         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00210         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00211         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00212         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00213         IOBlock        EQU       $3F
     003F             (           coco.d):00214         ROMBlock       EQU       $3F
     007F             (           coco.d):00215         IOAddr         EQU       $7F
     0001             (           coco.d):00216         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00217         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00218         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00219         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00220         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00221         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00222         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00223         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00224         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00225         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00226         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00227         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00228         
                      (           coco.d):00229         ***************************
                      (           coco.d):00230         * Color Computer 3 Specific
                      (           coco.d):00231         *
     0001             (           coco.d):00232         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00233         
                      (           coco.d):00234         ********************
                      (           coco.d):00235         * Hardware addresses
                      (           coco.d):00236         *
     FF00             (           coco.d):00237         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00238         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00239         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00240         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00241         
     0007             (           coco.d):00242         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00243         
                      (           coco.d):00244         * KrnBlk defines the block number of the 8K RAM block that is mapped to
                      (           coco.d):00245         * the top of CPU address space ($E000-$FFFF) for the system process, and
                      (           coco.d):00246         * which holds the Kernel. The top 2 pages of this CPU address space ($FFE0-
                      (           coco.d):00247         * $FFFF) has two special properties. Firstly, it contains the I/O space.
                      (           coco.d):00248         * Secondly, the parts that contain RAM map are not affected by the DAT
                      (           coco.d):00249         * mappings but, instead, *always* map that RAM to a fixed RAM block
                      (           coco.d):00250         * (KrnBlk). When a user process is mapped in, and requests enough memory,
                      (           coco.d):00251         * it will end up with its own block assigned for CPU address space $E000-
                      (           coco.d):00252         * $FFFF but the top of the address space is unusable by the user process:
                      (           coco.d):00253         * it still contains the I/O and the bit of RAM that's mapped to KrnBlk.
                      (           coco.d):00254         * Usually, the value of KrnBlk is fixed for a particular hardware design;
                      (           coco.d):00255         * For the COCO GIME, it's always $3F.
     003F             (           coco.d):00256         KrnBlk         SET       $3F
                      (           coco.d):00257         
                      (           coco.d):00258                        ENDC
                      (           coco.d):00259                        ENDC
                      (           coco.d):00260         
                      (/home/strick/go/s):00118                  use   pipe.d
                      (           pipe.d):00001                        IFNE      PIPE.D-1
                      (           pipe.d):00002         
     0001             (           pipe.d):00003         PIPE.D         SET       1
                      (           pipe.d):00004         
                      (           pipe.d):00005         ********************************************************************
                      (           pipe.d):00006         * PipeDefs - Pipe File Manager Definitions
                      (           pipe.d):00007         *
                      (           pipe.d):00008         * $Id$
                      (           pipe.d):00009         *
                      (           pipe.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           pipe.d):00011         * Comment
                      (           pipe.d):00012         * ------------------------------------------------------------------
                      (           pipe.d):00013         *          1988/12/03  Chris J. Burke
                      (           pipe.d):00014         * Coded from new PIPEMAN comments.
                      (           pipe.d):00015         
                      (           pipe.d):00016                        NAM       PipeDefs
                      (           pipe.d):00017                        TTL       Pipe File Manager Definitions
                      (           pipe.d):00018         
                      (           pipe.d):00019         *
                      (           pipe.d):00020         *   IOMan equates duplicated for PipeMan use
                      (           pipe.d):00021         *
                      (           pipe.d):00022         
     0010             (           pipe.d):00023         NPATHS         SET       16                  ;Maximum local paths per task -- must match IOMan
     001D             (           pipe.d):00024         NameMax        SET       29                  ;Maximum length of a file name
                      (           pipe.d):00025         
                      (           pipe.d):00026         *
                      (           pipe.d):00027         *   Device Driver Static Storage Layout
                      (           pipe.d):00028         *
                      (           pipe.d):00029                        ORG       V.User
0006                  (           pipe.d):00030         V.List         RMB       2                   ;Pointer to 1st pipe's pipe buffer
     0008             (           pipe.d):00031         PManMem        EQU       .                   ;Device driver memory (drive table equivalent)
                      (           pipe.d):00032         
                      (           pipe.d):00033         *
                      (           pipe.d):00034         *   Pipe Buffer Data Structure
                      (           pipe.d):00035         *
                      (           pipe.d):00036                        ORG       0
0000                  (           pipe.d):00037         PP.PD          RMB       2                   ;Pointer to shared path descriptor
0002                  (           pipe.d):00038         PP.Next        RMB       2                   ;Pointer to next pipe buffer in system map
0004                  (           pipe.d):00039         PP.Prev        RMB       2                   ;Pointer to previous pipe buffer in system map
0006                  (           pipe.d):00040         PP.Rsrv        RMB       2                   ;Reserved
     0008             (           pipe.d):00041         PP.Data        EQU       .                   ;Data buffer begins at this offset
                      (           pipe.d):00042         
                      (           pipe.d):00043         *
                      (           pipe.d):00044         *   Unique Path Descriptor Variables
                      (           pipe.d):00045         *
                      (           pipe.d):00046                        ORG       PD.FST
                      (           pipe.d):00047         *** PP.Read must have bit 4 clear; PP.Writ must be PP.Read XOR 4
     000A             (           pipe.d):00048         PD.Read        EQU       .
000A                  (           pipe.d):00049         PD.RPID        RMB       1                   ;Process ID of reader waiting on signal
000B                  (           pipe.d):00050         PD.RCT         RMB       1                   ;Number of blocked readers
000C                  (           pipe.d):00051         PD.RSIG        RMB       1                   ;Signal to send reader
000D                  (           pipe.d):00052         PD.REOR        RMB       1                   ;Read EOR character
     000E             (           pipe.d):00053         PD.Writ        EQU       .
000E                  (           pipe.d):00054         PD.WPID        RMB       1                   ;Process ID of writer waiting on signal
000F                  (           pipe.d):00055         PD.WCT         RMB       1                   ;Number of blocked writers
0010                  (           pipe.d):00056         PD.WSIG        RMB       1                   ;Signal to send writer
0011                  (           pipe.d):00057         PD.WEOR        RMB       1                   ;Write EOR character (dummy)
                      (           pipe.d):00058         *** End of special section
0012                  (           pipe.d):00059         PD.End         RMB       2                   ;Pointer to end of pipe buffer
0014                  (           pipe.d):00060         PD.NxtI        RMB       2                   ;Next in pointer
0016                  (           pipe.d):00061         PD.NxtO        RMB       2                   ;Next out pointer
0018                  (           pipe.d):00062         PD.RFlg        RMB       1                   ;"Ready" flag
0019                  (           pipe.d):00063         PD.Wrtn        RMB       1                   ;"Written" flag
001A                  (           pipe.d):00064         PD.BCnt        RMB       2                   ;# queue elements currently bufered
001C                  (           pipe.d):00065         PD.Own         RMB       1                   ;Process ID of pipe original creator
001D                  (           pipe.d):00066         PD.Keep        RMB       1                   ;Non-zero if pipe has been kept open artificailly
001E                  (           pipe.d):00067         PD.QSiz        RMB       2                   ;Max. elements in queue (copied from OPT section)
                      (           pipe.d):00068         
                      (           pipe.d):00069         *
                      (           pipe.d):00070         *   Path descriptor option section
                      (           pipe.d):00071         *
                      (           pipe.d):00072         *   Note that PD.Name overlaps with the last byte of PD.ECnt.
                      (           pipe.d):00073         *   PD.ECnt is copied to PD.QSiz as part of OPEN or CREATE,
                      (           pipe.d):00074         *   to make room for the pipe name.
                      (           pipe.d):00075         *
                      (           pipe.d):00076                        ORG       (PD.OPT+1)
0021                  (           pipe.d):00077         PD.ESiz        RMB       1                   ;Size of each queue element
0022                  (           pipe.d):00078         PD.ECnt        RMB       2                   ;Max. elements in queue (initial position)
                      (           pipe.d):00079                        IFGT      Level-1
                      (           pipe.d):00080                        ORG       (PD.OPT+3)
0023                  (           pipe.d):00081         PD.Name        RMB       NameMax
                      (           pipe.d):00082                        ENDC      
                      (           pipe.d):00083         
                      (           pipe.d):00084         *
                      (           pipe.d):00085         *   Device Descriptor definitions
                      (           pipe.d):00086         *
     0012             (           pipe.d):00087         IT.PDC         EQU       $12                 ;Pipe device class (like IT.DTP, IT.DVC)
                      (           pipe.d):00088                        ORG       IT.PDC
0012                  (           pipe.d):00089                        RMB       1                   ;Leave room for device class
0013                  (           pipe.d):00090         IT.ESiz        RMB       1                   ;Size of each queue element
0014                  (           pipe.d):00091         IT.ECnt        RMB       2                   ;Max. elements in queue (initial position)
                      (           pipe.d):00092         
                      (           pipe.d):00093         *   End of pipe.d
                      (           pipe.d):00094         
                      (           pipe.d):00095                        ENDC      
                      (           pipe.d):00096         
                      (/home/strick/go/s):00119                  ENDC  
                      (/home/strick/go/s):00120         
                      (/home/strick/go/s):00121         *
                      (/home/strick/go/s):00122         *   Local Equates
                      (/home/strick/go/s):00123         *
                      (/home/strick/go/s):00124         
     0003             (/home/strick/go/s):00125         XVER     equ   3          ;Version
                      (/home/strick/go/s):00126         
                      (/home/strick/go/s):00127         *   ASCII CONTROL CHARACTERS
                      (/home/strick/go/s):00128         
     000D             (/home/strick/go/s):00129         CR       equ   $0D
                      (/home/strick/go/s):00130         
                      (/home/strick/go/s):00131         *   CONDITION CODES
                      (/home/strick/go/s):00132         
                      (/home/strick/go/s):00133         *   PIPEMAN SPECIAL OFFSETS.
                      (/home/strick/go/s):00134         
     0000             (/home/strick/go/s):00135         PM.CPR   equ   PD.RPID-PD.READ
     0001             (/home/strick/go/s):00136         PM.CNT   equ   PD.RCT-PD.READ
     0002             (/home/strick/go/s):00137         PM.SIG   equ   PD.RSIG-PD.READ
     0003             (/home/strick/go/s):00138         PM.EOR   equ   PD.REOR-PD.READ
                      (/home/strick/go/s):00139         
                      (/home/strick/go/s):00140         *   IOMAN special offsets.
                      (/home/strick/go/s):00141         *
                      (/home/strick/go/s):00142         *   This constant is IOMAN release-dependent.
                      (/home/strick/go/s):00143         *   It is the number of bytes between the entry stack
                      (/home/strick/go/s):00144         *   pointer and the stacked PD pointer saved by *IOMAN*.
                      (/home/strick/go/s):00145         *   Currently, the stack looks like this:
                      (/home/strick/go/s):00146         *
                      (/home/strick/go/s):00147         *       A   PL
                      (/home/strick/go/s):00148         *       9   PH  <IOMAN post-SOPEN return address>
                      (/home/strick/go/s):00149         *       8   UL
                      (/home/strick/go/s):00150         *       7   UH
                      (/home/strick/go/s):00151         *       6   YL  +
                      (/home/strick/go/s):00152         *       5   YH  <PD pointer saved by IOMAN>
                      (/home/strick/go/s):00153         *       4   XL
                      (/home/strick/go/s):00154         *       3   XH
                      (/home/strick/go/s):00155         *       2   A
                      (/home/strick/go/s):00156         *       1   PL
                      (/home/strick/go/s):00157         * SP->  0   PH  <post OPEN/CREATE return address>
                      (/home/strick/go/s):00158         *               <start of stack to be used by PIPEMAN>
                      (/home/strick/go/s):00159         
     0005             (/home/strick/go/s):00160         IOMAGIC  equ   5          ;5 bytes to PD pointer
                      (/home/strick/go/s):00161         
                      (/home/strick/go/s):00162         *   Local pipe buffer equates
                      (/home/strick/go/s):00163         
     0020             (/home/strick/go/s):00164         CInit    equ   %00100000  ;Set this bit to override PD queue parameters
                      (/home/strick/go/s):00165         
                      (/home/strick/go/s):00166         *   Conditional assembly
                      (/home/strick/go/s):00167         
     0000             (/home/strick/go/s):00168         ANON     set   0          ;Anonymous pipes only
     0001             (/home/strick/go/s):00169         NAMED    set   1          ;Anonymous and named pipes
     0002             (/home/strick/go/s):00170         MSGS     set   2          ;Both types of pipes, and message queues
     0001             (/home/strick/go/s):00171         WIZBANG  set   NAMED      ;What features are we providing?
                      (/home/strick/go/s):00172         
     0000             (/home/strick/go/s):00173         NODIR    set   0          ;Don't allow DIR on pipe devices
     0001             (/home/strick/go/s):00174         YESDIR   set   1          ;Allow DIR on pipe devices
     0001             (/home/strick/go/s):00175         PIPEDIR  set   YESDIR     ;Does DIR work on pipes?
                      (/home/strick/go/s):00176         
     0000             (/home/strick/go/s):00177         SLOWPD   set   0          ;Slow PD location algorithm
     0001             (/home/strick/go/s):00178         QUICKPD  set   1          ;Fast PD location algorithm
     0001             (/home/strick/go/s):00179         PDALGO   set   QUICKPD    ;How to convert PD to system path #
                      (/home/strick/go/s):00180         
     0000             (/home/strick/go/s):00181         RECKLES  set   0          ;Don't check for certain errors
     0001             (/home/strick/go/s):00182         CAREFUL  set   1          ;Check for certain errors
     0001             (/home/strick/go/s):00183         CAUTION  set   CAREFUL
                      (/home/strick/go/s):00184         
                      (/home/strick/go/s):00185                  page  
                      (/home/strick/go/s):00186         *
                      (/home/strick/go/s):00187         *   Module Header
                      (/home/strick/go/s):00188         *
                      (/home/strick/go/s):00189         
     0001             (/home/strick/go/s):00190         edition  set   1
                      (/home/strick/go/s):00191         
0000 87CD05DB000DD183 (/home/strick/go/s):00192                  mod   MODSIZE,MODNAM,FlMgr+Objct,ReEnt+XVER,JmpTbl,$0000
     3400150000
                      (/home/strick/go/s):00193         
                      (/home/strick/go/s):00194         *   Module Name
                      (/home/strick/go/s):00195         
000D 506970654D61EE   (/home/strick/go/s):00196         MODNAM   fcs   "PipeMan"
0014 01               (/home/strick/go/s):00197                  fcb   edition
                      (/home/strick/go/s):00198         
                      (/home/strick/go/s):00199         *   Jump table
                      (/home/strick/go/s):00200         
0015 160024           (/home/strick/go/s):00201         JmpTbl   lbra  Create
0018 16003B           (/home/strick/go/s):00202                  lbra  Open
001B 1601EA           (/home/strick/go/s):00203                  lbra  MakDir
001E 1601E7           (/home/strick/go/s):00204                  lbra  ChgDir
0021 160227           (/home/strick/go/s):00205                  lbra  Delete
0024 16027A           (/home/strick/go/s):00206                  lbra  Seek
0027 160359           (/home/strick/go/s):00207                  lbra  Read
002A 1603E3           (/home/strick/go/s):00208                  lbra  Write
002D 160347           (/home/strick/go/s):00209                  lbra  ReadLn
0030 1603D0           (/home/strick/go/s):00210                  lbra  WriteLn
0033 16026D           (/home/strick/go/s):00211                  lbra  GetStt
0036 1602C5           (/home/strick/go/s):00212                  lbra  SetStt
0039 1601D0           (/home/strick/go/s):00213                  lbra  Close
                      (/home/strick/go/s):00214         
                      (/home/strick/go/s):00215                  page  
                      (/home/strick/go/s):00216         *
                      (/home/strick/go/s):00217         *   Create a named or anonymous pipe
                      (/home/strick/go/s):00218         *
                      (/home/strick/go/s):00219         *   The size of the queue is determined by examining
                      (/home/strick/go/s):00220         *   the path descriptor, since this information has
                      (/home/strick/go/s):00221         *   been copied there from the device descriptor.
                      (/home/strick/go/s):00222         *
                      (/home/strick/go/s):00223         *   Reg-U points to stacked registers of user.
                      (/home/strick/go/s):00224         *   Reg-Y points to path descriptor
                      (/home/strick/go/s):00225         *
                      (/home/strick/go/s):00226         *   If success, carry clear and X points to pipe buffer
                      (/home/strick/go/s):00227         *
                      (/home/strick/go/s):00228         
                      (/home/strick/go/s):00229         *   Create function allows user to override both element
                      (/home/strick/go/s):00230         *   count and element size.  Override is enabled if if bit
                      (/home/strick/go/s):00231         *   5 of the access mode is set.  For override, if MS bit
                      (/home/strick/go/s):00232         *   of Reg-Y is clear, just use Reg-Y as queue element
                      (/home/strick/go/s):00233         *   count.  If MS bit of Reg-Y is set, use LS byte of
                      (/home/strick/go/s):00234         *   Reg-Y as element size ($00 = no change) and bottom 7
                      (/home/strick/go/s):00235         *   bits of MS byte of Reg-Y as element count ($00 = no change)
                      (/home/strick/go/s):00236         
     003C             (/home/strick/go/s):00237         Create   equ   *
                      (/home/strick/go/s):00238         
003C A641             (/home/strick/go/s):00239                  lda   R$A,U      ;Get access mode
003E 8520             (/home/strick/go/s):00240                  bita  #CInit
0040 2714             (/home/strick/go/s):00241                  beq   Open
                      (/home/strick/go/s):00242         
                      (/home/strick/go/s):00243         *   Handle queue size override
                      (/home/strick/go/s):00244         
0042 EC46             (/home/strick/go/s):00245                  ldd   R$Y,U      ;Get queue size initializer
0044 2A0D             (/home/strick/go/s):00246                  bpl   SetCnt     ; (branch if just setting count)
                      (/home/strick/go/s):00247         
                      (/home/strick/go/s):00248         *   Set element size and count
                      (/home/strick/go/s):00249         
0046 5D               (/home/strick/go/s):00250                  tstb  
0047 2703             (/home/strick/go/s):00251                  beq   Creat00    ; (branch if using default size)
                      (/home/strick/go/s):00252         
0049 E7A821           (/home/strick/go/s):00253                  stb   PD.ESiz,Y  ;Reg-B = size of each element
                      (/home/strick/go/s):00254         
004C 847F             (/home/strick/go/s):00255         Creat00  anda  #$7F
004E 2706             (/home/strick/go/s):00256                  beq   Open       ; (branch if using default count)
                      (/home/strick/go/s):00257         
0050 1F89             (/home/strick/go/s):00258                  tfr   a,B
0052 4F               (/home/strick/go/s):00259                  clra  
                      (/home/strick/go/s):00260         
                      (/home/strick/go/s):00261         *   Set number of elements in queue from Reg-D
                      (/home/strick/go/s):00262         
0053 EDA822           (/home/strick/go/s):00263         SetCnt   std   PD.ECnt,Y  ;Reg-D = number of elements
                      (/home/strick/go/s):00264         
                      (/home/strick/go/s):00265         *   Enter here for normal OPEN
                      (/home/strick/go/s):00266         
     0056             (/home/strick/go/s):00267         Open     equ   *
                      (/home/strick/go/s):00268         
                      (/home/strick/go/s):00269         *   Move number of elements in queue to make room for name
                      (/home/strick/go/s):00270         
0056 ECA822           (/home/strick/go/s):00271                  ldd   PD.ECnt,Y
0059 EDA81E           (/home/strick/go/s):00272                  std   PD.QSiz,Y
                      (/home/strick/go/s):00273         
                      (/home/strick/go/s):00274         *   Parse pathname
                      (/home/strick/go/s):00275         
005C 5F               (/home/strick/go/s):00276                  clrb             ;Assume anonymous pipe
005D 4F               (/home/strick/go/s):00277                  clra             ;Assume not 1st pipe
005E AE44             (/home/strick/go/s):00278                  ldx   R$X,U      ;Point at file name in user's space
0060 3476             (/home/strick/go/s):00279                  pshs  U,Y,X,D    ;Save file name, PD, reg. base, 1st & anon flag
                      (/home/strick/go/s):00280         
                      (/home/strick/go/s):00281         *       Caller's Regs Ptr
                      (/home/strick/go/s):00282         *       PD Ptr
                      (/home/strick/go/s):00283         *       Path name uptr
                      (/home/strick/go/s):00284         *       Named flag
                      (/home/strick/go/s):00285         *  SP-> First flag
                      (/home/strick/go/s):00286         
0062 103F10           (/home/strick/go/s):00287                  os9   F$PrsNam   ;Error if driver name (e.g. /pipe) invalid
0065 2565             (/home/strick/go/s):00288                  bcs   BadName
                      (/home/strick/go/s):00289         
                      (/home/strick/go/s):00290         *   See if named or anonymous pipe requested.
                      (/home/strick/go/s):00291         
0067 170194           (/home/strick/go/s):00292                  lbsr  GtNext     ;Return CC=MI if at end of path name
006A 812F             (/home/strick/go/s):00293                  cmpa  #'/
006C 2712             (/home/strick/go/s):00294                  beq   HasName
                      (/home/strick/go/s):00295         
                      (/home/strick/go/s):00296         *   /pipe____
                      (/home/strick/go/s):00297         *    X   Y
                      (/home/strick/go/s):00298         *   Pipe is anonymous -- set up dummy name in PD.
                      (/home/strick/go/s):00299         *   Stack must match the named pipe setup
                      (/home/strick/go/s):00300         
006E 1F21             (/home/strick/go/s):00301         NotName  tfr   Y,X        ;Skip any trailing blanks
0070 103F10           (/home/strick/go/s):00302                  os9   F$PrsNam   ; (should return carry set)
0073 CC0001           (/home/strick/go/s):00303                  ldd   #1         ;Length of dummy name
0076 3436             (/home/strick/go/s):00304                  pshs  Y,X,D
                      (/home/strick/go/s):00305         
0078 10AE6A           (/home/strick/go/s):00306                  ldy   10,S       ;Get PD pointer
007B 6FA823           (/home/strick/go/s):00307                  clr   PD.Name,Y  ; and set dummy name
                      (/home/strick/go/s):00308         
007E 2038             (/home/strick/go/s):00309                  bra   GoCheck
                      (/home/strick/go/s):00310         
                      (/home/strick/go/s):00311         *   /pipe/foo____
                      (/home/strick/go/s):00312         *    X   Y
                      (/home/strick/go/s):00313         *   Pipe is named -- check length and flag on stack
                      (/home/strick/go/s):00314         
0080 1F21             (/home/strick/go/s):00315         HasName  tfr   Y,X
0082 103F10           (/home/strick/go/s):00316                  os9   F$PrsNam   ;Scan off the name
0085 2545             (/home/strick/go/s):00317                  bcs   BadName
                      (/home/strick/go/s):00318         
0087 C11D             (/home/strick/go/s):00319                  cmpb  #NameMax   ;Check length of name
0089 2241             (/home/strick/go/s):00320                  bhi   BadName
                      (/home/strick/go/s):00321         
                      (/home/strick/go/s):00322         *   Length OK.  X points to start of name, Y to end of name,
                      (/home/strick/go/s):00323         *   B has name length. 
                      (/home/strick/go/s):00324         *   Save registers & length, and do final parse to skip white
                      (/home/strick/go/s):00325         
008B 6361             (/home/strick/go/s):00326                  com   1,S        ;Set "named" flag
008D 4F               (/home/strick/go/s):00327                  clra  
008E 3436             (/home/strick/go/s):00328                  pshs  Y,X,D
                      (/home/strick/go/s):00329         
0090 1F21             (/home/strick/go/s):00330                  tfr   Y,X
0092 103F10           (/home/strick/go/s):00331                  os9   F$PrsNam   ;Error if trying for pipe subdirectory
0095 2433             (/home/strick/go/s):00332                  bcc   BadNam2
                      (/home/strick/go/s):00333         
                      (/home/strick/go/s):00334         *   /pipe/foo____
                      (/home/strick/go/s):00335         *            X   Y
                      (/home/strick/go/s):00336         *   Need to get the pipe name into our address space
                      (/home/strick/go/s):00337         *   Use the PD for a temporary buffer.
                      (/home/strick/go/s):00338         
0097 9E50             (/home/strick/go/s):00339         NameOK   ldx   <D.Proc    ;Pointer to caller's PD
0099 A606             (/home/strick/go/s):00340                  lda   P$Task,X   ; get caller's DAT image #
009B 9E4A             (/home/strick/go/s):00341                  ldx   <D.SysPrc  ;Pointer to our PD
009D E606             (/home/strick/go/s):00342                  ldb   P$Task,X   ; get system's DAT image #
009F 10AEE4           (/home/strick/go/s):00343                  ldy   0,S        ;Byte count
00A2 AE62             (/home/strick/go/s):00344                  ldx   2,S        ;Source address
00A4 EE6A             (/home/strick/go/s):00345                  ldu   10,S       ;Get PD pointer and convert to . . .
00A6 33C823           (/home/strick/go/s):00346                  leau  PD.Name,U  ;Destination address
00A9 170499           (/home/strick/go/s):00347                  lbsr  MovSet     ;Move block, set MSB of last byte.
                      (/home/strick/go/s):00348         
                      (/home/strick/go/s):00349         *   Wow!  Everybody's in the same address space now.
                      (/home/strick/go/s):00350         
                      (/home/strick/go/s):00351         *   Since this is a named pipe, force mode to UPDATE.
                      (/home/strick/go/s):00352         *   Also, do not permit DIR. access
                      (/home/strick/go/s):00353         
00AC AE6A             (/home/strick/go/s):00354                  ldx   10,S
00AE A601             (/home/strick/go/s):00355                  lda   PD.MOD,X
00B0 8580             (/home/strick/go/s):00356                  bita  #DIR.
00B2 2616             (/home/strick/go/s):00357                  bne   BadNam2
                      (/home/strick/go/s):00358         
00B4 8A03             (/home/strick/go/s):00359                  ora   #(READ.+WRITE.)
00B6 A701             (/home/strick/go/s):00360                  sta   PD.MOD,X
                      (/home/strick/go/s):00361         
                      (/home/strick/go/s):00362         *   See if this is an existing pipe.  To do this, we
                      (/home/strick/go/s):00363         *   must get the linked list head pointer from the
                      (/home/strick/go/s):00364         *   device driver's static storage.
                      (/home/strick/go/s):00365         *
                      (/home/strick/go/s):00366         *   Stack looks like this:
                      (/home/strick/go/s):00367         *
                      (/home/strick/go/s):00368         *   C   2   Sysmap Reg Pointer
                      (/home/strick/go/s):00369         *   A   2   Sysmap PD Pointer
                      (/home/strick/go/s):00370         *   8   2   Usrmap Path name pointer
                      (/home/strick/go/s):00371         *   7   1   Named pipe flag
                      (/home/strick/go/s):00372         *   6   1   First pipe flag
                      (/home/strick/go/s):00373         *   4   2   Usrmap Pipe name end pointer
                      (/home/strick/go/s):00374         *   2   2   Usrmap Pipe name start pointer
                      (/home/strick/go/s):00375         *   0   2   Name length
                      (/home/strick/go/s):00376         *   sp->
                      (/home/strick/go/s):00377         
00B8 AE6A             (/home/strick/go/s):00378         GoCheck  ldx   10,S       ;Get PD pointer
00BA AE03             (/home/strick/go/s):00379                  ldx   PD.DEV,X   ;Get device table pointer
00BC EE02             (/home/strick/go/s):00380                  ldu   V$Stat,X   ;Get static storage pointer
00BE AE46             (/home/strick/go/s):00381                  ldx   V.List,U   ;Get pointer to head of pipe bfr linked list
00C0 2614             (/home/strick/go/s):00382                  bne   Not1st     ; (reg-X = $0000 if no previous pipes)
                      (/home/strick/go/s):00383         
                      (/home/strick/go/s):00384         *   This is the 1st pipe for this descriptor.
                      (/home/strick/go/s):00385         *   Reg-X = $0000
                      (/home/strick/go/s):00386         *   Set flag and process as a new pipe.
                      (/home/strick/go/s):00387         
00C2 6366             (/home/strick/go/s):00388                  com   6,S        ;This is the first pipe
00C4 2032             (/home/strick/go/s):00389                  bra   NewPipe    ;This is a new pipe
                      (/home/strick/go/s):00390         
                      (/home/strick/go/s):00391         *   No time like the present for some error handlers
                      (/home/strick/go/s):00392         
                      (/home/strick/go/s):00393         *   Generic error, cleaning stack
                      (/home/strick/go/s):00394         
00C6 3268             (/home/strick/go/s):00395         BadXit2  leas  8,S
00C8 43               (/home/strick/go/s):00396                  coma             ;Set carry
00C9 39               (/home/strick/go/s):00397                  rts   
                      (/home/strick/go/s):00398         
                      (/home/strick/go/s):00399         *   Bad Pathname -- 2 versions, depending on
                      (/home/strick/go/s):00400         *   how much junk is on the stack.
                      (/home/strick/go/s):00401         
00CA 3266             (/home/strick/go/s):00402         BadNam2  leas  6,S        ;Clean stack
00CC C6D7             (/home/strick/go/s):00403         BadName  ldb   #E$BPNam
00CE 20F6             (/home/strick/go/s):00404                  bra   BadXit2
                      (/home/strick/go/s):00405         
                      (/home/strick/go/s):00406         *   Not Enough System RAM
                      (/home/strick/go/s):00407         
00D0 C6ED             (/home/strick/go/s):00408         TooBig   ldb   #E$NoRAM
00D2 3266             (/home/strick/go/s):00409         BadExit  leas  6,S        ;Clean stack
00D4 20F0             (/home/strick/go/s):00410                  bra   BadXit2
                      (/home/strick/go/s):00411         
                      (/home/strick/go/s):00412         *   Look up the pipe name, unless the pipe is anonymous.
                      (/home/strick/go/s):00413         *
                      (/home/strick/go/s):00414         *   Reg-U points to driver static storage.
                      (/home/strick/go/s):00415         *   Reg-X points to next pipe buffer to check.
                      (/home/strick/go/s):00416         
00D6 6D67             (/home/strick/go/s):00417         Not1st   tst   7,S        ;Unnamed pipes are always new
00D8 271E             (/home/strick/go/s):00418                  beq   NewPipe
                      (/home/strick/go/s):00419         
00DA 10AE6A           (/home/strick/go/s):00420                  ldy   10,S       ;point at PD
00DD 31A823           (/home/strick/go/s):00421                  leay  PD.Name,Y  ; then point at name in PD
                      (/home/strick/go/s):00422         
                      (/home/strick/go/s):00423         *   Main loop.  Always at least 1 pipe buffer to check first time through.
                      (/home/strick/go/s):00424         *   Reg-X points to buffer to check, or $0000 if none.
                      (/home/strick/go/s):00425         *   Reg-Y points to desired pipe name.
                      (/home/strick/go/s):00426         
00E0 3410             (/home/strick/go/s):00427         ChkLoop  pshs  X
00E2 AE84             (/home/strick/go/s):00428                  ldx   PP.PD,X    ;Point at PD for this pipe buffer
00E4 308823           (/home/strick/go/s):00429                  leax  PD.Name,X  ; and then point at name stored in PD
00E7 1700DC           (/home/strick/go/s):00430                  lbsr  Compare
00EA 3510             (/home/strick/go/s):00431                  puls  X
00EC 10270088         (/home/strick/go/s):00432                  lbeq  OldPipe    ; (got a match)
                      (/home/strick/go/s):00433         
00F0 EC02             (/home/strick/go/s):00434                  ldd   PP.Next,X  ;Don't fall off the edge
00F2 2704             (/home/strick/go/s):00435                  beq   NewPipe    ; (end of list)
                      (/home/strick/go/s):00436         
00F4 1F01             (/home/strick/go/s):00437                  tfr   D,X        ;Advance to next buffer
00F6 20E8             (/home/strick/go/s):00438                  bra   ChkLoop
                      (/home/strick/go/s):00439         
                      (/home/strick/go/s):00440         *   Pipe name not found.  Create a new pipe.
                      (/home/strick/go/s):00441         *
                      (/home/strick/go/s):00442         *   Reg-U points to driver static storage.
                      (/home/strick/go/s):00443         *   Reg-X points to last pipe buffer checked ($0000 if 1st pipe)
                      (/home/strick/go/s):00444         
00F8 10AE6A           (/home/strick/go/s):00445         NewPipe  ldy   10,S       ;Get PD pointer
                      (/home/strick/go/s):00446         
                      (/home/strick/go/s):00447                  IFEQ  (PIPEDIR-YESDIR)
00FB A621             (/home/strick/go/s):00448                  lda   PD.MOD,Y   ;Check pipe attributes
00FD 8580             (/home/strick/go/s):00449                  bita  #DIR.
00FF 2703             (/home/strick/go/s):00450                  beq   NEWP1
                      (/home/strick/go/s):00451         
                      (/home/strick/go/s):00452         *   Initialize pipe characteristics for DIR. bit set
                      (/home/strick/go/s):00453         
0101 17044E           (/home/strick/go/s):00454                  lbsr  SizDirP
                      (/home/strick/go/s):00455         *         beq    XYZZY       ;Special if no pipes created
                      (/home/strick/go/s):00456                  ENDC  
                      (/home/strick/go/s):00457         
                      (/home/strick/go/s):00458         *   Normal (non-dir) processing
                      (/home/strick/go/s):00459         
0104 ECA81E           (/home/strick/go/s):00460         NewP1    ldd   PD.QSiz,Y  ;Get max element count
0107 260C             (/home/strick/go/s):00461                  bne   DoNew      ; (graceful operation if no count)
                      (/home/strick/go/s):00462         
                      (/home/strick/go/s):00463         *   Default pipe parameters if none in PD.
                      (/home/strick/go/s):00464         
0109 CC0100           (/home/strick/go/s):00465                  ldd   #$0100     ;Assume 256 byte buffer, 1 byte element
010C A7A821           (/home/strick/go/s):00466                  sta   PD.ESiz,Y  ;Reg-A = 1
010F 830008           (/home/strick/go/s):00467                  subd  #PP.Data   ;Compute elements for total size = 256
0112 EDA81E           (/home/strick/go/s):00468                  std   PD.QSiz,Y  Use parameters in PD
                      (/home/strick/go/s):00469         
0115 1700C6           (/home/strick/go/s):00470         DoNew    lbsr  ECtoBC     ;Convert element count to byte count in D
0118 25B6             (/home/strick/go/s):00471                  bcs   TooBig     ; (carry set if too big)
                      (/home/strick/go/s):00472         
                      (/home/strick/go/s):00473         *   Carry has exit status
                      (/home/strick/go/s):00474         *   Reg-D = # bytes for queue, w/o overhead
                      (/home/strick/go/s):00475         *   Reg-X = previous buffer
                      (/home/strick/go/s):00476         *   Reg-U = driver static storage
                      (/home/strick/go/s):00477         
011A 1F32             (/home/strick/go/s):00478                  tfr   U,Y        ;Save static storage pointer
                      (/home/strick/go/s):00479         
011C C30008           (/home/strick/go/s):00480                  addd  #PP.Data   ;Add in overhead
011F 25AF             (/home/strick/go/s):00481                  bcs   TooBig
                      (/home/strick/go/s):00482         
0121 3406             (/home/strick/go/s):00483                  pshs  D          ;Save buffer size
0123 103F28           (/home/strick/go/s):00484                  os9   F$SrqMem   ;Attempt to allocate buffer
0126 3506             (/home/strick/go/s):00485                  puls  D          ;Recover size, clean stack, lose error msg
0128 25A6             (/home/strick/go/s):00486                  bcs   TooBig
                      (/home/strick/go/s):00487         
                      (/home/strick/go/s):00488         *   Found enough memory for pipe buffer.
                      (/home/strick/go/s):00489         *
                      (/home/strick/go/s):00490         *   Pointer in Reg-U
                      (/home/strick/go/s):00491         *   Size in Reg-D
                      (/home/strick/go/s):00492         *   Previous buffer in Reg-X.
                      (/home/strick/go/s):00493         *   Driver static storage in Reg-Y.
                      (/home/strick/go/s):00494         *
                      (/home/strick/go/s):00495         *   Initialize the buffer
                      (/home/strick/go/s):00496         
012A 3446             (/home/strick/go/s):00497                  pshs  U,D        ;Save buffer pointer & size
                      (/home/strick/go/s):00498         
                      (/home/strick/go/s):00499         *   Clear pipe buffer header
                      (/home/strick/go/s):00500         
012C C608             (/home/strick/go/s):00501                  ldb   #PP.Data   ;Size of header
012E 6FC0             (/home/strick/go/s):00502         ClrBuf   clr   ,U+
0130 5A               (/home/strick/go/s):00503                  decb  
0131 26FB             (/home/strick/go/s):00504                  bne   ClrBuf
                      (/home/strick/go/s):00505         
0133 3546             (/home/strick/go/s):00506                  puls  D,U
                      (/home/strick/go/s):00507         
                      (/home/strick/go/s):00508         *   Initialize path descriptor and other fields of pipe buffer
                      (/home/strick/go/s):00509         *   for new pipe.
                      (/home/strick/go/s):00510         *
                      (/home/strick/go/s):00511         *   Pointer in Reg-U
                      (/home/strick/go/s):00512         *   Size in Reg-D
                      (/home/strick/go/s):00513         *   Previous buffer in Reg-X.
                      (/home/strick/go/s):00514         *   Driver static storage in Reg-Y.
                      (/home/strick/go/s):00515         *
                      (/home/strick/go/s):00516         *   IOMan has already prefilled the PD to $00 and 
                      (/home/strick/go/s):00517         *   has set PD.CNT for this path to 1.
                      (/home/strick/go/s):00518         
0135 3430             (/home/strick/go/s):00519                  pshs  Y,X        ;Save static storage pointer & prev.buff
                      (/home/strick/go/s):00520         
0137 10AE6E           (/home/strick/go/s):00521                  ldy   (4+10),S   ;Get PD pointer to Reg-Y
013A 10AFC4           (/home/strick/go/s):00522                  sty   PP.PD,U    ;Save pointer to PD in pipe buffer
                      (/home/strick/go/s):00523         
013D 30CB             (/home/strick/go/s):00524                  leax  D,U        ;Point to end of pipe.buff + 1
013F AFA812           (/home/strick/go/s):00525                  stx   PD.End,Y
                      (/home/strick/go/s):00526         
0142 3048             (/home/strick/go/s):00527                  leax  PP.Data,U  ;Initial Next in & Next out pointers
0144 AFA814           (/home/strick/go/s):00528                  stx   PD.NxtI,Y
0147 AFA816           (/home/strick/go/s):00529                  stx   PD.NxtO,Y
                      (/home/strick/go/s):00530         
014A 9E50             (/home/strick/go/s):00531                  ldx   <D.Proc    ;Save ID of original creator
014C A684             (/home/strick/go/s):00532                  lda   P$ID,X
014E A7A81C           (/home/strick/go/s):00533                  sta   PD.Own,Y
                      (/home/strick/go/s):00534         
0151 3530             (/home/strick/go/s):00535                  puls  Y,X        ;Recover static storage pointer and prev.buff
                      (/home/strick/go/s):00536         
0153 AF44             (/home/strick/go/s):00537                  stx   PP.Prev,U  ;Save address of previous buffer ($0 if none)
0155 2604             (/home/strick/go/s):00538                  bne   LinkIn     ; (branch if this isn't the 1st pipe)
                      (/home/strick/go/s):00539         
                      (/home/strick/go/s):00540         *   Special -- this is the first pipe.
                      (/home/strick/go/s):00541         *   Set PP.Next to $0000 and store buffer address in device memory.
                      (/home/strick/go/s):00542         *
                      (/home/strick/go/s):00543         *   Reg-U = pointer to new buffer.
                      (/home/strick/go/s):00544         *   Reg-X = $0000.
                      (/home/strick/go/s):00545         *   Reg-Y = static storage
                      (/home/strick/go/s):00546         
                      (/home/strick/go/s):00547         **  Zero prefill of PP header covers this
                      (/home/strick/go/s):00548         **        stx     PP.Next,U       ;No next buffer
                      (/home/strick/go/s):00549         **        stx     PP.Prev,U       ;No previous buffer
0157 EF26             (/home/strick/go/s):00550                  stu   V.List,Y   ;Point driver static at this buffer
0159 2012             (/home/strick/go/s):00551                  bra   IsAsOld
                      (/home/strick/go/s):00552         
                      (/home/strick/go/s):00553         *   There are other named pipes.  Link this one in correctly
                      (/home/strick/go/s):00554         *   after the last one checked.
                      (/home/strick/go/s):00555         *
                      (/home/strick/go/s):00556         *   Reg-U = pointer to new buffer.
                      (/home/strick/go/s):00557         *   Reg-X = Pointer to previous buffer.
                      (/home/strick/go/s):00558         *   Reg-Y = static storage.
                      (/home/strick/go/s):00559         
015B EC02             (/home/strick/go/s):00560         LinkIn   ldd   PP.Next,X  ;Get old's next (could be $0000)
015D EF02             (/home/strick/go/s):00561                  stu   PP.Next,X  ;Set old's next pointing at new
015F ED42             (/home/strick/go/s):00562                  std   PP.Next,U  ;Set new's next where old's was
0161 AF44             (/home/strick/go/s):00563                  stx   PP.Prev,U  ;Set new's prev pointing at old
0163 3416             (/home/strick/go/s):00564                  pshs  X,D
0165 AEE4             (/home/strick/go/s):00565                  ldx   0,S        ;Point X at original old's next
0167 2702             (/home/strick/go/s):00566                  beq   Link9      ; (branch if no next -- $0000 set already)
0169 EF04             (/home/strick/go/s):00567                  stu   PP.Prev,X  ;Set prev of old's original next to new
016B 3516             (/home/strick/go/s):00568         Link9    puls  D,X
                      (/home/strick/go/s):00569         
                      (/home/strick/go/s):00570         *   Now we look pretty much like a new access to an old pipe.
                      (/home/strick/go/s):00571         *   Fix up pointers to match "old pipe" code
                      (/home/strick/go/s):00572         
016D 1F31             (/home/strick/go/s):00573         IsAsOld  tfr   U,X        ;Point Reg-X at pipe buffer
016F 1F23             (/home/strick/go/s):00574                  tfr   Y,U        ;Point Reg-U at driver static storage
0171 10AE6A           (/home/strick/go/s):00575                  ldy   10,S       ;Recover PD pointer
0174 AF28             (/home/strick/go/s):00576                  stx   PD.BUF,Y   ;Set up buffer pointer in PD
0176 2031             (/home/strick/go/s):00577                  bra   OpnXit     ; (go to common trailer code)
                      (/home/strick/go/s):00578         
                      (/home/strick/go/s):00579         *   Pipe name found.  Set up to access an old pipe.
                      (/home/strick/go/s):00580         *
                      (/home/strick/go/s):00581         *   Reg-U points to driver static storage.
                      (/home/strick/go/s):00582         *   Reg-X points to matching pipe buffer.
                      (/home/strick/go/s):00583         *
                      (/home/strick/go/s):00584         *   We need to make this look like a DUP call, so
                      (/home/strick/go/s):00585         *   there's some nasty code here to give back the
                      (/home/strick/go/s):00586         *   PD allocated by IOMan and go get the "original"
                      (/home/strick/go/s):00587         *   PD for this named pipe.
                      (/home/strick/go/s):00588         
     0178             (/home/strick/go/s):00589         OldPipe  equ   *
                      (/home/strick/go/s):00590         
                      (/home/strick/go/s):00591         ***                                                       ***
                      (/home/strick/go/s):00592         *   WARNING -- This code emulates IOMan's I$Close and I$Dup *
                      (/home/strick/go/s):00593         ***                                                       ***
                      (/home/strick/go/s):00594         
                      (/home/strick/go/s):00595         *
                      (/home/strick/go/s):00596         *   Processing to give back the new path descriptor and use
                      (/home/strick/go/s):00597         *   the original PD that the pipe was opened with.
                      (/home/strick/go/s):00598         *
                      (/home/strick/go/s):00599         *       Fake close of PD passed by IOMan
                      (/home/strick/go/s):00600         *       Fake dup of named pipe's "master" PD
                      (/home/strick/go/s):00601         *       Fix PD pointer saved on IOMAN's stack
                      (/home/strick/go/s):00602         *
                      (/home/strick/go/s):00603         *   All of the subroutines preserve all regs, except as noted
                      (/home/strick/go/s):00604         *   This section MUST preserve Reg-X and Reg-U.  There must
                      (/home/strick/go/s):00605         *   be exactly 14 bytes on the stack at this point.
                      (/home/strick/go/s):00606         
0178 10AE6A           (/home/strick/go/s):00607                  ldy   10,S       ;Get IOMAN PD pointer (original Reg-Y)
                      (/home/strick/go/s):00608         
                      (/home/strick/go/s):00609         *   Detach the path.
                      (/home/strick/go/s):00610         
017B 3440             (/home/strick/go/s):00611                  pshs  U
017D EE23             (/home/strick/go/s):00612                  ldu   PD.DEV,Y   ; Get device pointer
017F 103F81           (/home/strick/go/s):00613                  os9   I$Detach   ; Detach to compensate for IOMAN Attach
0182 3540             (/home/strick/go/s):00614                  puls  U
                      (/home/strick/go/s):00615         
                      (/home/strick/go/s):00616         *   Decrement use count
                      (/home/strick/go/s):00617         
0184 6A22             (/home/strick/go/s):00618                  dec   PD.CNT,Y   ;Decrement use count
                      (/home/strick/go/s):00619         
                      (/home/strick/go/s):00620         *   Give back unwanted PD
                      (/home/strick/go/s):00621         
                      (/home/strick/go/s):00622         *** This is the way I did it originally
0186 3410             (/home/strick/go/s):00623                  pshs  X
0188 A6A4             (/home/strick/go/s):00624                  lda   PD.PD,Y    ;Get system path number
018A 9E88             (/home/strick/go/s):00625                  ldx   <D.PthDBT  ;Point at path table index
018C 103F31           (/home/strick/go/s):00626                  os9   F$Ret64    ; and give back descriptor
018F 3510             (/home/strick/go/s):00627                  puls  X
                      (/home/strick/go/s):00628         *** This is the way the OSK named pipe manager does it.
                      (/home/strick/go/s):00629         *** I had to translate, of course, but the translated
                      (/home/strick/go/s):00630         *** version doesn't work right.
                      (/home/strick/go/s):00631         *        pshs    U,X
                      (/home/strick/go/s):00632         *        lda     PD.PD,Y         ;Get system path #
                      (/home/strick/go/s):00633         *        ldx     <D.PthDBT       ;Point at path table index
                      (/home/strick/go/s):00634         *        ldu     <D.SysDis       ;Point at system SVC dispatch table
                      (/home/strick/go/s):00635         *        jsr     [(F$Ret64*2),U] ;Do a RET64
                      (/home/strick/go/s):00636         *        puls    X,U
                      (/home/strick/go/s):00637         
                      (/home/strick/go/s):00638         *   Stack clean.
                      (/home/strick/go/s):00639         *   Update IOMAN variables.
                      (/home/strick/go/s):00640         *   Reg-Y = where IOMAN thinks the PD is.
                      (/home/strick/go/s):00641         
                      (/home/strick/go/s):00642                  IFEQ  (CAUTION-CAREFUL)
0191 10ACE813         (/home/strick/go/s):00643                  cmpy  (14+IOMAGIC),S ;Make sure the stack looks right (PD matches)
0195 2706             (/home/strick/go/s):00644                  beq   OKMagic
                      (/home/strick/go/s):00645         
                      (/home/strick/go/s):00646         *   Stack is wrong; declare bad magic!
                      (/home/strick/go/s):00647         
0197 53               (/home/strick/go/s):00648                  comb  
0198 C6BE             (/home/strick/go/s):00649                  ldb   #E$Bug
019A 326E             (/home/strick/go/s):00650                  leas  14,S
019C 39               (/home/strick/go/s):00651                  rts   
                      (/home/strick/go/s):00652                  ENDC  
                      (/home/strick/go/s):00653         
                      (/home/strick/go/s):00654         *   Stack is right; go fix PD pointers
                      (/home/strick/go/s):00655         
019D 10AE84           (/home/strick/go/s):00656         OKMagic  ldy   PP.PD,X    ;Get PD pointer of existing named pipe PD.
01A0 10AF6A           (/home/strick/go/s):00657                  sty   10,S       ;Point PD pointer at existing PD
01A3 10AFE813         (/home/strick/go/s):00658                  sty   (14+IOMAGIC),S ;Save new IOMAN PD pointer in IOMAN stack
01A7 6C22             (/home/strick/go/s):00659                  inc   PD.CNT,Y   ;Increment use count
                      (/home/strick/go/s):00660         
                      (/home/strick/go/s):00661         *   End of dangerous code
                      (/home/strick/go/s):00662         *   This section MUST have preserved Reg-X and Reg-U
                      (/home/strick/go/s):00663         
                      (/home/strick/go/s):00664         *   Exit code.
                      (/home/strick/go/s):00665         *
                      (/home/strick/go/s):00666         *   Reg-U points to driver static storage.
                      (/home/strick/go/s):00667         *   Reg-Y points to PD.
                      (/home/strick/go/s):00668         *   Reg-X points to matching pipe buffer.
                      (/home/strick/go/s):00669         *
                      (/home/strick/go/s):00670         *   Advance caller's path name pointer
                      (/home/strick/go/s):00671         
     01A9             (/home/strick/go/s):00672         OpnXit   equ   *
                      (/home/strick/go/s):00673         
                      (/home/strick/go/s):00674         *   Fix use count based on PD.Keep
                      (/home/strick/go/s):00675         
01A9 A622             (/home/strick/go/s):00676                  lda   PD.CNT,Y
01AB A0A81D           (/home/strick/go/s):00677                  suba  PD.Keep,Y
01AE A722             (/home/strick/go/s):00678                  sta   PD.CNT,Y   ;Get rid of any artificial openings
01B0 6FA81D           (/home/strick/go/s):00679                  clr   PD.Keep,Y
                      (/home/strick/go/s):00680         
                      (/home/strick/go/s):00681                  IFEQ  (PIPEDIR-YESDIR)
                      (/home/strick/go/s):00682         *   Handle prefill of pipe directory buffer
                      (/home/strick/go/s):00683         
01B3 A621             (/home/strick/go/s):00684                  lda   PD.Mod,Y   ;Is this a DIR. open?
01B5 8580             (/home/strick/go/s):00685                  bita  #DIR.
01B7 2703             (/home/strick/go/s):00686                  beq   OpnXt2
                      (/home/strick/go/s):00687         
01B9 1703B4           (/home/strick/go/s):00688                  lbsr  FilDirP    ;Send directory info to pipe
                      (/home/strick/go/s):00689                  ENDC  
                      (/home/strick/go/s):00690         
01BC EE6C             (/home/strick/go/s):00691         OpnXt2   ldu   12,S       ;Point at caller's registers
01BE EC64             (/home/strick/go/s):00692                  ldd   4,S        ;Get revised path name pointer
01C0 ED44             (/home/strick/go/s):00693                  std   R$X,U
                      (/home/strick/go/s):00694         
01C2 326E             (/home/strick/go/s):00695                  leas  14,S       ;Clean the stack
                      (/home/strick/go/s):00696         
                      (/home/strick/go/s):00697         *   Successful exit.  Reg-X points to pipe buffer.
                      (/home/strick/go/s):00698         
01C4 5F               (/home/strick/go/s):00699                  clrb  
01C5 39               (/home/strick/go/s):00700                  rts   
                      (/home/strick/go/s):00701         
                      (/home/strick/go/s):00702                  page  
                      (/home/strick/go/s):00703         *
                      (/home/strick/go/s):00704         *   Compare pipe names.
                      (/home/strick/go/s):00705         *
                      (/home/strick/go/s):00706         *   Can't use F$CmpNam here because the strings
                      (/home/strick/go/s):00707         *   are in system space.
                      (/home/strick/go/s):00708         *
                      (/home/strick/go/s):00709         *   Path names are pointed to by Reg-X and Reg-Y.
                      (/home/strick/go/s):00710         *   Case is ignored.  Returns NE if not equal, else
                      (/home/strick/go/s):00711         *   EQ.
                      (/home/strick/go/s):00712         *
                      (/home/strick/go/s):00713         
01C6 3432             (/home/strick/go/s):00714         Compare  pshs  Y,X,A      ;Reg-A is temp. storage
                      (/home/strick/go/s):00715         
                      (/home/strick/go/s):00716         *   Main comparison loop
                      (/home/strick/go/s):00717         
01C8 A680             (/home/strick/go/s):00718         Cmp001   lda   ,X+
01CA 84DF             (/home/strick/go/s):00719                  anda  #%11011111 ;Cheap and fast TOUPPER
01CC A7E4             (/home/strick/go/s):00720                  sta   0,S
                      (/home/strick/go/s):00721         
01CE A6A0             (/home/strick/go/s):00722                  lda   ,Y+
01D0 84DF             (/home/strick/go/s):00723                  anda  #%11011111 ;Cheap and fast TOUPPER
01D2 2B06             (/home/strick/go/s):00724                  bmi   Cmp.Y      ; (exit if we find end of Y-string)
                      (/home/strick/go/s):00725         
01D4 A1E4             (/home/strick/go/s):00726                  cmpa  0,S
01D6 27F0             (/home/strick/go/s):00727                  beq   Cmp001
                      (/home/strick/go/s):00728         
                      (/home/strick/go/s):00729         *   Names don't match.  Return CC=NE
                      (/home/strick/go/s):00730         
01D8 35B2             (/home/strick/go/s):00731                  puls  A,X,Y,PC
                      (/home/strick/go/s):00732         
                      (/home/strick/go/s):00733         *   End of "Y" string.  "X" character either matches or
                      (/home/strick/go/s):00734         *   it doesn't.  Return CC accordingly.
                      (/home/strick/go/s):00735         
01DA A1E4             (/home/strick/go/s):00736         Cmp.Y    cmpa  0,S
01DC 35B2             (/home/strick/go/s):00737                  puls  A,X,Y,PC
                      (/home/strick/go/s):00738         
                      (/home/strick/go/s):00739         *
                      (/home/strick/go/s):00740         *   Convert element count in D to byte count in D.
                      (/home/strick/go/s):00741         *   Return carry set if too big.
                      (/home/strick/go/s):00742         *
                      (/home/strick/go/s):00743         *   Reg-Y = PD pointer
                      (/home/strick/go/s):00744         *   Reg-D = Element count
                      (/home/strick/go/s):00745         *
                      (/home/strick/go/s):00746         
01DE 3406             (/home/strick/go/s):00747         ECtoBC   pshs  D
01E0 A6A821           (/home/strick/go/s):00748                  lda   PD.ESiz,Y  ;Get size of each element
01E3 E6E4             (/home/strick/go/s):00749                  ldb   0,S        ;Get MSB of element count
01E5 3D               (/home/strick/go/s):00750                  mul   
01E6 3406             (/home/strick/go/s):00751                  pshs  D
01E8 A6A821           (/home/strick/go/s):00752                  lda   PD.ESiz,Y  ;Get size of each element
01EB E663             (/home/strick/go/s):00753                  ldb   (2+1),S    ;Get LSB of element count
01ED 3D               (/home/strick/go/s):00754                  mul   
01EE AB61             (/home/strick/go/s):00755                  adda  1,S        ;C-bit set if too big
01F0 6DE1             (/home/strick/go/s):00756                  tst   ,S++       ;Z-bit clear if too big, C-bit OK
01F2 3262             (/home/strick/go/s):00757                  leas  2,S
01F4 2505             (/home/strick/go/s):00758                  bcs   EB.err
01F6 2603             (/home/strick/go/s):00759                  bne   EB.err
                      (/home/strick/go/s):00760         
                      (/home/strick/go/s):00761         *   OK exit
01F8 1CFE             (/home/strick/go/s):00762                  andcc  #^Carry
01FA 39               (/home/strick/go/s):00763                  rts   
                      (/home/strick/go/s):00764         
                      (/home/strick/go/s):00765         *   Error exit
01FB 1A01             (/home/strick/go/s):00766         EB.err   orcc  #Carry
01FD 39               (/home/strick/go/s):00767                  rts   
                      (/home/strick/go/s):00768         
                      (/home/strick/go/s):00769         *   Get next character of path name.
                      (/home/strick/go/s):00770         *   Reg-Y set up as if just did a PRSNAM.
                      (/home/strick/go/s):00771         
01FE 9E50             (/home/strick/go/s):00772         GtNext   ldx   <D.Proc
0200 E606             (/home/strick/go/s):00773                  ldb   P$Task,X
0202 1F21             (/home/strick/go/s):00774                  tfr   Y,X
0204 103F49           (/home/strick/go/s):00775                  os9   F$LDABX
0207 39               (/home/strick/go/s):00776                  rts   
                      (/home/strick/go/s):00777         
                      (/home/strick/go/s):00778                  page  
                      (/home/strick/go/s):00779         *
                      (/home/strick/go/s):00780         *   Error hook
                      (/home/strick/go/s):00781         *
     0208             (/home/strick/go/s):00782         MAKDIR   equ   *
     0208             (/home/strick/go/s):00783         CHGDIR   equ   *
0208 53               (/home/strick/go/s):00784         UNKNOWN  comb  
0209 C6D0             (/home/strick/go/s):00785                  ldb   #E$UNKSVC
020B 39               (/home/strick/go/s):00786                  rts   
                      (/home/strick/go/s):00787         
                      (/home/strick/go/s):00788                  page  
                      (/home/strick/go/s):00789         *
                      (/home/strick/go/s):00790         *   Close a pipe
                      (/home/strick/go/s):00791         *
                      (/home/strick/go/s):00792         *   If there are any other pipe users, leave the pipe
                      (/home/strick/go/s):00793         *   around.  Also, if the pipe is named and contains
                      (/home/strick/go/s):00794         *   any data, leave the pipe around even if there are
                      (/home/strick/go/s):00795         *   no remaining pipe users.
                      (/home/strick/go/s):00796         *
                      (/home/strick/go/s):00797         *   PD.Keep will be non-zero if the pipe has been kept
                      (/home/strick/go/s):00798         *   open artificially.
                      (/home/strick/go/s):00799         *
                      (/home/strick/go/s):00800         *   This routine is called each time a path to the pipe
                      (/home/strick/go/s):00801         *   is closed.
                      (/home/strick/go/s):00802         *
                      (/home/strick/go/s):00803         
     020C             (/home/strick/go/s):00804         CLOSE    equ   *
                      (/home/strick/go/s):00805         
                      (/home/strick/go/s):00806         *   Account for extra use count if pipe artificially kept open.
                      (/home/strick/go/s):00807         *   Then see if this is the last user of the pipe
                      (/home/strick/go/s):00808         
020C A6A81D           (/home/strick/go/s):00809                  lda   PD.Keep,Y  ;Account for extra pipe images
020F 40               (/home/strick/go/s):00810                  nega  
0210 6FA81D           (/home/strick/go/s):00811                  clr   PD.Keep,Y
0213 AB22             (/home/strick/go/s):00812                  adda  PD.CNT,Y
0215 A722             (/home/strick/go/s):00813                  sta   PD.CNT,Y   ;Set correct PD.CNT value
0217 2615             (/home/strick/go/s):00814                  bne   READERS    ; and branch if any users left
                      (/home/strick/go/s):00815         
                      (/home/strick/go/s):00816         *   No open paths to this pipe.
                      (/home/strick/go/s):00817         *   If it's named and not empty, leave it around anyway.
                      (/home/strick/go/s):00818         
0219 6DA823           (/home/strick/go/s):00819                  tst   PD.Name,Y  ;Named pipe?
021C 270C             (/home/strick/go/s):00820                  beq   CLOSE2
                      (/home/strick/go/s):00821         
021E ECA81A           (/home/strick/go/s):00822                  ldd   PD.BCnt,Y  ;How many elements buffered on named pipe?
0221 2707             (/home/strick/go/s):00823                  beq   CLOSE2
                      (/home/strick/go/s):00824         
                      (/home/strick/go/s):00825         *   Leave this named pipe around for a while
                      (/home/strick/go/s):00826         
0223 6C22             (/home/strick/go/s):00827                  inc   PD.CNT,Y   ;Create an extra image
0225 6CA81D           (/home/strick/go/s):00828                  inc   PD.Keep,Y  ; and remember that we did it
0228 201F             (/home/strick/go/s):00829                  bra   CLOXIT
                      (/home/strick/go/s):00830         
                      (/home/strick/go/s):00831         *   Delete the pipe.
                      (/home/strick/go/s):00832         *   Y = PD pointer.
                      (/home/strick/go/s):00833         
022A 8D38             (/home/strick/go/s):00834         CLOSE2   bsr   ZapPipe
022C 201B             (/home/strick/go/s):00835                  bra   CloXit     ;No error
                      (/home/strick/go/s):00836         
                      (/home/strick/go/s):00837         *   Open paths left.  What kind?
                      (/home/strick/go/s):00838         
022E A12B             (/home/strick/go/s):00839         READERS  cmpa  PD.RCT,Y   ;Are all open paths readers?
0230 2604             (/home/strick/go/s):00840                  bne   WRITERS
                      (/home/strick/go/s):00841         
                      (/home/strick/go/s):00842         *   All other open paths are readers.
                      (/home/strick/go/s):00843         *   Send signal to next reader (let him read a bit)
                      (/home/strick/go/s):00844         
0232 302A             (/home/strick/go/s):00845                  leax  PD.Read,Y
0234 2006             (/home/strick/go/s):00846                  bra   SENDSIG
                      (/home/strick/go/s):00847         
                      (/home/strick/go/s):00848         *   Not all readers.  What kind?
                      (/home/strick/go/s):00849         
0236 A12F             (/home/strick/go/s):00850         WRITERS  cmpa  PD.WCT,Y   ;Are all open paths writers?
0238 260F             (/home/strick/go/s):00851                  bne   CloXit
                      (/home/strick/go/s):00852         
                      (/home/strick/go/s):00853         *   All other open paths are writers.
                      (/home/strick/go/s):00854         *   Send signal to next writer (let him write a bit)
                      (/home/strick/go/s):00855         
023A 302E             (/home/strick/go/s):00856                  leax  PD.Writ,Y
                      (/home/strick/go/s):00857         
                      (/home/strick/go/s):00858         *   Send signal to next reader or writer
                      (/home/strick/go/s):00859         
023C A684             (/home/strick/go/s):00860         SENDSIG  lda   PM.CPR,X   ;Process ID to signal
023E 2709             (/home/strick/go/s):00861                  beq   CLOXIT
                      (/home/strick/go/s):00862         
0240 E602             (/home/strick/go/s):00863                  ldb   PM.SIG,X   ;Signal code to send
0242 2705             (/home/strick/go/s):00864                  beq   CLOXIT
                      (/home/strick/go/s):00865         
                      (/home/strick/go/s):00866         *   Committed to send signal:  clear the flag and send it
                      (/home/strick/go/s):00867         
0244 6F02             (/home/strick/go/s):00868                  clr   PM.SIG,X   ;Force no pending signal
0246 103F08           (/home/strick/go/s):00869                  os9   F$SEND
                      (/home/strick/go/s):00870         
                      (/home/strick/go/s):00871         *   Done with close
                      (/home/strick/go/s):00872         
0249 5F               (/home/strick/go/s):00873         CLOXIT   clrb  
024A 39               (/home/strick/go/s):00874                  rts   
                      (/home/strick/go/s):00875         
                      (/home/strick/go/s):00876                  page  
                      (/home/strick/go/s):00877         *
                      (/home/strick/go/s):00878         *   Delete a named pipe.
                      (/home/strick/go/s):00879         *
                      (/home/strick/go/s):00880         *   Reg-Y = PD
                      (/home/strick/go/s):00881         *   Reg-U = caller's registers
                      (/home/strick/go/s):00882         *   Reg-X = path name
                      (/home/strick/go/s):00883         *
                      (/home/strick/go/s):00884         
024B 8601             (/home/strick/go/s):00885         Delete   lda   #Read.
024D A721             (/home/strick/go/s):00886                  sta   PD.MOD,Y   ;Need only READ permission
024F 3472             (/home/strick/go/s):00887                  pshs  U,Y,X,A    ;***Match stack set up by IOMAN
0251 17FE02           (/home/strick/go/s):00888                  lbsr  Open       ;Try to open the pipe
0254 3572             (/home/strick/go/s):00889                  puls  U,Y,X,A    ;***Clean up special stack
0256 2507             (/home/strick/go/s):00890                  bcs   BadDel
                      (/home/strick/go/s):00891         
                      (/home/strick/go/s):00892         *   Disconnect from pipe, but keep pointer.
                      (/home/strick/go/s):00893         *   Then check to see if we're the only user.
                      (/home/strick/go/s):00894         *
                      (/home/strick/go/s):00895         *   Note -- The call to OPEN updated PD.CNT
                      (/home/strick/go/s):00896         *   and cleared PD.Keep.
                      (/home/strick/go/s):00897         
0258 6A22             (/home/strick/go/s):00898                  dec   PD.CNT,Y   ;Don't count ourselves
025A 2704             (/home/strick/go/s):00899                  beq   DoDel      ;If count is zero, OK to delete
                      (/home/strick/go/s):00900         
                      (/home/strick/go/s):00901         *   Pipe is in use.  Return E$FNA
                      (/home/strick/go/s):00902         
025C 53               (/home/strick/go/s):00903         FNAXIT   comb  
025D C6D6             (/home/strick/go/s):00904                  ldb   #E$FNA
                      (/home/strick/go/s):00905         
                      (/home/strick/go/s):00906         *   Exit w/ carry set and error code in B
                      (/home/strick/go/s):00907         
025F 39               (/home/strick/go/s):00908         BadDel   rts   
                      (/home/strick/go/s):00909         
                      (/home/strick/go/s):00910         *   Perform the delete.
                      (/home/strick/go/s):00911         
0260 8D02             (/home/strick/go/s):00912         DoDel    bsr   ZapPipe
0262 5F               (/home/strick/go/s):00913                  clrb  
0263 39               (/home/strick/go/s):00914                  rts   
                      (/home/strick/go/s):00915         
                      (/home/strick/go/s):00916         *
                      (/home/strick/go/s):00917         *   Return all memory for the pipe buffer specified
                      (/home/strick/go/s):00918         *   in the path descriptor, and remove it from the linked list.
                      (/home/strick/go/s):00919         *
                      (/home/strick/go/s):00920         *   Reg-Y = PD pointer
                      (/home/strick/go/s):00921         *   Pipe buffer pointer is at PD.BUF,Y
                      (/home/strick/go/s):00922         *
                      (/home/strick/go/s):00923         
0264 EE23             (/home/strick/go/s):00924         ZapPipe  ldu   PD.DEV,Y   ;Get device table pointer
0266 EE42             (/home/strick/go/s):00925                  ldu   V$Stat,U   ;Get static storage pointer
                      (/home/strick/go/s):00926         
0268 AE28             (/home/strick/go/s):00927                  ldx   PD.BUF,Y   ;Point to pipe's buffer
026A EC02             (/home/strick/go/s):00928                  ldd   PP.Next,X  ;Save pointer to current and next in list
026C 3406             (/home/strick/go/s):00929                  pshs  D
026E EC04             (/home/strick/go/s):00930                  ldd   PP.Prev,X  ;Save pointer to previous in list
0270 3406             (/home/strick/go/s):00931                  pshs  D
                      (/home/strick/go/s):00932         
                      (/home/strick/go/s):00933         *   Reg-D has pointer to previous.  If zero, we're zapping head of list.
                      (/home/strick/go/s):00934         *   Z-bit is already set accordingly
                      (/home/strick/go/s):00935         
0272 2612             (/home/strick/go/s):00936                  bne   OldHead
                      (/home/strick/go/s):00937         
                      (/home/strick/go/s):00938         *   New head of list.
                      (/home/strick/go/s):00939         *   Reg-X still points to buffer to be deleted
                      (/home/strick/go/s):00940         
0274 EC62             (/home/strick/go/s):00941                  ldd   2,S        ;Get pointer to next (may be $0000)
0276 ED46             (/home/strick/go/s):00942                  std   V.List,U   ; and set as new head
0278 3416             (/home/strick/go/s):00943                  pshs  X,D
027A AEE4             (/home/strick/go/s):00944                  ldx   0,S        ;Point Reg-X at next, set CC
027C 2704             (/home/strick/go/s):00945                  beq   Zap9
027E 6F04             (/home/strick/go/s):00946                  clr   (PP.Prev+0),X ; and set no prev for next
0280 6F05             (/home/strick/go/s):00947                  clr   (PP.Prev+1),X
0282 3516             (/home/strick/go/s):00948         Zap9     puls  D,X        ;Point back at pipe to delete
0284 200C             (/home/strick/go/s):00949                  bra   ZapIt
                      (/home/strick/go/s):00950         
                      (/home/strick/go/s):00951         *   No new head of list.  Just delete from linked list.
                      (/home/strick/go/s):00952         *   We know there is a previous buffer.
                      (/home/strick/go/s):00953         *
                      (/home/strick/go/s):00954         *   Reg-X points to buffer to be deleted.
                      (/home/strick/go/s):00955         *   Reg-D points to previous buffer.
                      (/home/strick/go/s):00956         
0286 EE02             (/home/strick/go/s):00957         OldHead  ldu   PP.Next,X  ;Get U pointing at our next (may be $0000)
0288 1E01             (/home/strick/go/s):00958                  exg   D,X        ;Point X at our prev, D at us
028A EF02             (/home/strick/go/s):00959                  stu   PP.Next,X  ;Save new next for out prev
028C 2702             (/home/strick/go/s):00960                  beq   Zap8
028E AF44             (/home/strick/go/s):00961                  stx   PP.Prev,U  ;Point our next's prev at our original prev
0290 1E01             (/home/strick/go/s):00962         Zap8     exg   D,X
                      (/home/strick/go/s):00963         
                      (/home/strick/go/s):00964         *   All cleaned up. Give back the buffer
                      (/home/strick/go/s):00965         *   Reg-X points to buffer, Reg-Y points to PD.
                      (/home/strick/go/s):00966         
0292 ECA812           (/home/strick/go/s):00967         ZapIt    ldd   PD.End,Y
0295 3410             (/home/strick/go/s):00968                  pshs  X
0297 A3E4             (/home/strick/go/s):00969                  subd  0,S        ;Get total bytes to Reg-D
0299 3540             (/home/strick/go/s):00970                  puls  U          ;Point at buffer, clean stack
029B 103F29           (/home/strick/go/s):00971                  os9   F$SRtMem
                      (/home/strick/go/s):00972         
                      (/home/strick/go/s):00973         *   Exit with whatever error F$SRtMem produces
                      (/home/strick/go/s):00974         
029E 3264             (/home/strick/go/s):00975                  leas  4,S        ;Clean stack
02A0 39               (/home/strick/go/s):00976                  rts   
                      (/home/strick/go/s):00977         
                      (/home/strick/go/s):00978                  page  
                      (/home/strick/go/s):00979         *
                      (/home/strick/go/s):00980         *   Dummy hook
                      (/home/strick/go/s):00981         *
     02A1             (/home/strick/go/s):00982         SEEK     equ   *
02A1 5F               (/home/strick/go/s):00983         Dummy    clrb  
02A2 39               (/home/strick/go/s):00984                  rts   
                      (/home/strick/go/s):00985         
                      (/home/strick/go/s):00986                  page  
                      (/home/strick/go/s):00987         *
                      (/home/strick/go/s):00988         *   GETSTT processing
                      (/home/strick/go/s):00989         *
                      (/home/strick/go/s):00990         *   Supports the following codes:
                      (/home/strick/go/s):00991         *
                      (/home/strick/go/s):00992         *   SS.Opt          Option section
                      (/home/strick/go/s):00993         *   SS.Ready        # bytes in queue
                      (/home/strick/go/s):00994         *   SS.Siz          Size of queue
                      (/home/strick/go/s):00995         *   SS.EOF          Queue empty
                      (/home/strick/go/s):00996         *   SS.FD           Bogus file descriptor   (WIZBANG==MSGS)
                      (/home/strick/go/s):00997         *   SS.ScSiz        Screen Size
                      (/home/strick/go/s):00998         *
                      (/home/strick/go/s):00999         *   SS.Opt handled in IOMAN, etc.
                      (/home/strick/go/s):01000         *   SS.Ready code by Kent Meyers, modified by Chris Burke
                      (/home/strick/go/s):01001         *   SS.Siz, SS.EOF, SS.FD, SS.ScSiz by Chris Burke
                      (/home/strick/go/s):01002         *
                      (/home/strick/go/s):01003         
02A3 A642             (/home/strick/go/s):01004         GETSTT   lda   R$B,U      Get User B Register ++
02A5 8101             (/home/strick/go/s):01005                  cmpa  #SS.READY  Test for Ready Call ++
02A7 2626             (/home/strick/go/s):01006                  bne   NotSSRDY
                      (/home/strick/go/s):01007         
                      (/home/strick/go/s):01008         *   Process SS.Rdy -- return # elements in queue
                      (/home/strick/go/s):01009         *   If more than 255, return 255.
                      (/home/strick/go/s):01010         
02A9 C6FF             (/home/strick/go/s):01011         G.Rdy    ldb   #255
02AB 6DA81A           (/home/strick/go/s):01012                  tst   (PD.BCnt+0),Y
02AE 2605             (/home/strick/go/s):01013                  bne   G.Rdy0     ;Accomodate large queues (256 or more bytes)
02B0 E6881B           (/home/strick/go/s):01014                  ldb   (PD.BCnt+1),X ;Get element count LSB
                      (/home/strick/go/s):01015         
                      (/home/strick/go/s):01016         *   Reg-B has LSB of element count, CC set based on value
                      (/home/strick/go/s):01017         
02B3 2708             (/home/strick/go/s):01018                  beq   RDNRDY     ;Not Ready if no characters
                      (/home/strick/go/s):01019         
02B5 E742             (/home/strick/go/s):01020         G.Rdy0   stb   R$B,U      ;Return count in B
                      (/home/strick/go/s):01021         
     02B7             (/home/strick/go/s):01022         SST.OK   equ   *
     02B7             (/home/strick/go/s):01023         SST.Ign  equ   *
                      (/home/strick/go/s):01024         
02B7 5F               (/home/strick/go/s):01025         G.OK     clrb             No Error ++
02B8 1FA8             (/home/strick/go/s):01026                  tfr   CC,A
02BA A7C4             (/home/strick/go/s):01027                  sta   R$CC,U
02BC 39               (/home/strick/go/s):01028                  rts              Return ++
                      (/home/strick/go/s):01029         
                      (/home/strick/go/s):01030         *   No characters for SS.Ready
                      (/home/strick/go/s):01031         
02BD 6DA819           (/home/strick/go/s):01032         RDNRDY   tst   PD.Wrtn,Y  Anybody writing to pipe?
02C0 2609             (/home/strick/go/s):01033                  bne   NOTEOF     (not OK if so)
                      (/home/strick/go/s):01034         
                      (/home/strick/go/s):01035         *   No writer
                      (/home/strick/go/s):01036         
02C2 E622             (/home/strick/go/s):01037                  ldb   PD.CNT,Y   Exactly one path open to pipe?
02C4 5A               (/home/strick/go/s):01038                  decb  
02C5 2604             (/home/strick/go/s):01039                  bne   NOTEOF     (OK if no, e.g. nobody or > 1)
                      (/home/strick/go/s):01040         
                      (/home/strick/go/s):01041         *   Internal error
                      (/home/strick/go/s):01042         
02C7 53               (/home/strick/go/s):01043         IntErr   comb  
02C8 C6FF             (/home/strick/go/s):01044                  ldb   #255
02CA 39               (/home/strick/go/s):01045                  rts   
                      (/home/strick/go/s):01046         
02CB 53               (/home/strick/go/s):01047         NOTEOF   comb             Set Error Flag ++
02CC C6F6             (/home/strick/go/s):01048                  ldb   #E$NOTRDY  Get Error Code ++
02CE 39               (/home/strick/go/s):01049                  rts              Return ++
                      (/home/strick/go/s):01050         
                      (/home/strick/go/s):01051         *   Not SS.Ready.  Check for SS.Siz
                      (/home/strick/go/s):01052         
02CF 8102             (/home/strick/go/s):01053         NotSSRdy cmpa  #SS.Size   Test for Size call
02D1 260B             (/home/strick/go/s):01054                  bne   NotSSSiz
                      (/home/strick/go/s):01055         
                      (/home/strick/go/s):01056         *   Process SS.Siz -- return size of queue in ELEMENTS.
                      (/home/strick/go/s):01057         
02D3 ECA81E           (/home/strick/go/s):01058         G.Siz    ldd   PD.QSiz,Y  ;Get max. # of queue elements
02D6 ED48             (/home/strick/go/s):01059                  std   R$U,U
02D8 6F44             (/home/strick/go/s):01060                  clr   (R$X+0),U  Set 16 MSB's to $0000
02DA 6F45             (/home/strick/go/s):01061                  clr   (R$X+1),U
02DC 20D9             (/home/strick/go/s):01062         GOK001   bra   G.OK
                      (/home/strick/go/s):01063         
                      (/home/strick/go/s):01064         *   Not SS.Siz.  Check for SS.EOF
                      (/home/strick/go/s):01065         
02DE 8106             (/home/strick/go/s):01066         NotSSSiz cmpa  #SS.EOF
02E0 260B             (/home/strick/go/s):01067                  bne   NotSSEOF
                      (/home/strick/go/s):01068         
                      (/home/strick/go/s):01069         *   Process SS.EOF
                      (/home/strick/go/s):01070         *   Handle like SS.Rdy, but preserve Reg-B
                      (/home/strick/go/s):01071         
02E2 8DEF             (/home/strick/go/s):01072         G.EOF    bsr   G.Siz
02E4 C600             (/home/strick/go/s):01073                  ldb   #0         ;NOT clrb -- preserve carry
02E6 E742             (/home/strick/go/s):01074                  stb   R$B,U
02E8 24CD             (/home/strick/go/s):01075                  bcc   G.OK       ;No error if ready
                      (/home/strick/go/s):01076         
02EA C6D3             (/home/strick/go/s):01077                  ldb   #E$EOF     ;Carry is already set
02EC 39               (/home/strick/go/s):01078                  rts   
                      (/home/strick/go/s):01079         
                      (/home/strick/go/s):01080         *   Not SS.EOF.  Check for SS.FD
                      (/home/strick/go/s):01081         
                      (/home/strick/go/s):01082                  IFEQ  (PIPEDIR-YESDIR)
02ED 810F             (/home/strick/go/s):01083         NotSSEOF cmpa  #SS.FD
02EF 2605             (/home/strick/go/s):01084                  bne   NotSSFD
                      (/home/strick/go/s):01085         
                      (/home/strick/go/s):01086         *   Process SS.FD
                      (/home/strick/go/s):01087         
02F1 1702B2           (/home/strick/go/s):01088                  lbsr  DoSSFD
02F4 20C1             (/home/strick/go/s):01089                  bra   G.OK       ;Successful always
                      (/home/strick/go/s):01090                  ELSE  
02F6                  (/home/strick/go/s):01091         NotSSEOF equ   *
                      (/home/strick/go/s):01092                  ENDC  
                      (/home/strick/go/s):01093         
                      (/home/strick/go/s):01094         *   Not SS.FD.  Check for SS.ScSiz
                      (/home/strick/go/s):01095         
02F6 8126             (/home/strick/go/s):01096         NotSSFD  cmpa  #SS.ScSiz  ;Force UNKNOWN here
02F8 1027FF0C         (/home/strick/go/s):01097                  lbeq  UnKnown
                      (/home/strick/go/s):01098         
     02FC             (/home/strick/go/s):01099         NotSCSZ  equ   *
                      (/home/strick/go/s):01100         
     02FC             (/home/strick/go/s):01101         NotSSAT  equ   *
                      (/home/strick/go/s):01102         
                      (/home/strick/go/s):01103         *   Process unknown GETSTT
                      (/home/strick/go/s):01104         
                      (/home/strick/go/s):01105         *        lbra    UNKNOWN
02FC 20B9             (/home/strick/go/s):01106                  bra   G.OK
                      (/home/strick/go/s):01107         *        bra     NotEOF
                      (/home/strick/go/s):01108         
                      (/home/strick/go/s):01109                  page  
                      (/home/strick/go/s):01110         *
                      (/home/strick/go/s):01111         *   SETSTT processing
                      (/home/strick/go/s):01112         *
                      (/home/strick/go/s):01113         *   Supports the following codes:
                      (/home/strick/go/s):01114         *
                      (/home/strick/go/s):01115         *   SS.Opt          Option section
                      (/home/strick/go/s):01116         *   SS.Siz          No effect unless size=0; then clears pipe buffer
                      (/home/strick/go/s):01117         *   SS.FD           No effect
                      (/home/strick/go/s):01118         *   SS.SSig         Set signal on data available
                      (/home/strick/go/s):01119         *   SS.Relea        Release signal
                      (/home/strick/go/s):01120         *
                      (/home/strick/go/s):01121         *   SS.Opt handled in IOMAN, etc.
                      (/home/strick/go/s):01122         *   SS.Siz, SS.SSig, SS.Relea by Chris Burke, modified
                      (/home/strick/go/s):01123         *   from OSK.
                      (/home/strick/go/s):01124         *
                      (/home/strick/go/s):01125         
02FE A642             (/home/strick/go/s):01126         SetStt   lda   R$B,U      Get User B Register ++
0300 8100             (/home/strick/go/s):01127                  cmpa  #SS.Opt
0302 27B3             (/home/strick/go/s):01128                  beq   SST.Ign    ; (ignore)
0304 810F             (/home/strick/go/s):01129                  cmpa  #SS.FD
0306 27AF             (/home/strick/go/s):01130                  beq   SST.Ign
                      (/home/strick/go/s):01131         
                      (/home/strick/go/s):01132         *   Check for SS.SIZ
                      (/home/strick/go/s):01133         
0308 8102             (/home/strick/go/s):01134                  cmpa  #SS.Size
030A 261C             (/home/strick/go/s):01135                  bne   NoS.Siz
                      (/home/strick/go/s):01136         
030C EC48             (/home/strick/go/s):01137                  ldd   R$U,U      ;Get caller's size
030E 26A7             (/home/strick/go/s):01138                  bne   SST.Ign
                      (/home/strick/go/s):01139         
                      (/home/strick/go/s):01140         *   Clear the pipe
                      (/home/strick/go/s):01141         
0310 AE28             (/home/strick/go/s):01142                  ldx   PD.Buf,Y
0312 3308             (/home/strick/go/s):01143                  leau  PP.Data,X
0314 EFA814           (/home/strick/go/s):01144                  stu   PD.NxtI,Y
0317 EFA816           (/home/strick/go/s):01145                  stu   PD.NxtO,Y
031A 6FA81A           (/home/strick/go/s):01146                  clr   (PD.BCnt+0),Y
031D 6FA81B           (/home/strick/go/s):01147                  clr   (PD.BCnt+1),Y
0320 6FA818           (/home/strick/go/s):01148                  clr   PD.RFlg,Y
0323 6FA819           (/home/strick/go/s):01149                  clr   PD.Wrtn,Y
                      (/home/strick/go/s):01150         
0326 208F             (/home/strick/go/s):01151         QST.OK   bra   SST.OK
                      (/home/strick/go/s):01152         
                      (/home/strick/go/s):01153         *   Check for SS.SSig
                      (/home/strick/go/s):01154         
0328 811A             (/home/strick/go/s):01155         NoS.Siz  cmpa  #SS.SSig
032A 2617             (/home/strick/go/s):01156                  bne   NoS.Sig
                      (/home/strick/go/s):01157         
032C 302A             (/home/strick/go/s):01158                  leax  PD.Read,Y  ;Point at read packet
032E 6D84             (/home/strick/go/s):01159                  tst   PM.Cpr,X   ;Error if already somebody waiting
0330 2699             (/home/strick/go/s):01160                  bne   NOTEOF
                      (/home/strick/go/s):01161         
                      (/home/strick/go/s):01162         *   Set signal trap
                      (/home/strick/go/s):01163         
0332 A625             (/home/strick/go/s):01164                  lda   PD.CPR,Y   ;Set process ID
0334 A784             (/home/strick/go/s):01165                  sta   PM.CPR,X
0336 A645             (/home/strick/go/s):01166                  lda   (R$X+1),U  ;Get signal code
0338 A702             (/home/strick/go/s):01167                  sta   PM.Sig,X
033A 6DA81A           (/home/strick/go/s):01168                  tst   PD.BCnt,Y  ;Immediate signal if
033D 1026FEFB         (/home/strick/go/s):01169                  lbne  SendSig
                      (/home/strick/go/s):01170         
0341 20E3             (/home/strick/go/s):01171                  bra   QST.OK
                      (/home/strick/go/s):01172         
                      (/home/strick/go/s):01173         *   Check for release of signal
                      (/home/strick/go/s):01174         
0343 811B             (/home/strick/go/s):01175         NoS.Sig  cmpa  #SS.Relea
0345 260C             (/home/strick/go/s):01176                  bne   NoS.Rel
                      (/home/strick/go/s):01177         
0347 302A             (/home/strick/go/s):01178                  leax  PD.Read,Y  ;Point at read packet
0349 A684             (/home/strick/go/s):01179                  lda   PM.CPR,X
034B A125             (/home/strick/go/s):01180                  cmpa  PD.CPR,Y   ;Our process set it?
034D 26D7             (/home/strick/go/s):01181                  bne   QST.OK
                      (/home/strick/go/s):01182         
                      (/home/strick/go/s):01183         *   Release signal trap
                      (/home/strick/go/s):01184         
034F 5F               (/home/strick/go/s):01185                  clrb  
0350 160193           (/home/strick/go/s):01186                  lbra  Switch
                      (/home/strick/go/s):01187         
                      (/home/strick/go/s):01188         *   Not SS.Relea.  Check for SS.Attr
                      (/home/strick/go/s):01189         
0353 811C             (/home/strick/go/s):01190         NoS.Rel  cmpa  #SS.Attr
0355 261D             (/home/strick/go/s):01191                  bne   NoS.Atr
                      (/home/strick/go/s):01192         
                      (/home/strick/go/s):01193         *   Change attributes if allowed
                      (/home/strick/go/s):01194         
0357 9E50             (/home/strick/go/s):01195                  ldx   <D.Proc
0359 A684             (/home/strick/go/s):01196                  lda   P$ID,X     ;Are we superuser?
035B 270F             (/home/strick/go/s):01197                  beq   SAT.OK
035D 6DA81C           (/home/strick/go/s):01198                  tst   PD.Own,Y   ;Is creator still attached?
0360 2603             (/home/strick/go/s):01199                  bne   SAT.XX
                      (/home/strick/go/s):01200         
0362 A7A81C           (/home/strick/go/s):01201                  sta   PD.Own,Y   ;Inherit pipe if owner abandoned it
                      (/home/strick/go/s):01202         
0365 A1A81C           (/home/strick/go/s):01203         SAT.XX   cmpa  PD.Own,Y
0368 1026FEF0         (/home/strick/go/s):01204                  lbne  FNAXit     ;If can't match PID, E$FNA error
                      (/home/strick/go/s):01205         
                      (/home/strick/go/s):01206         *   Change attributes.
                      (/home/strick/go/s):01207         *   Reg-U points at caller's registers
                      (/home/strick/go/s):01208         
036C A641             (/home/strick/go/s):01209         SAT.OK   lda   R$A,U
036E 8A03             (/home/strick/go/s):01210                  ora   #(READ.+WRITE.) ;We insist . . .
0370 A721             (/home/strick/go/s):01211                  sta   PD.MOD,Y
0372 20B2             (/home/strick/go/s):01212                  bra   QST.OK
                      (/home/strick/go/s):01213         
                      (/home/strick/go/s):01214         *   Unknown SETSTT
                      (/home/strick/go/s):01215         
0374 16FE91           (/home/strick/go/s):01216         NoS.Atr  lbra  Unknown
                      (/home/strick/go/s):01217         
                      (/home/strick/go/s):01218                  page  
                      (/home/strick/go/s):01219         *
                      (/home/strick/go/s):01220         *   Read CR-terminated line or element count from
                      (/home/strick/go/s):01221         *   pipe with no editing.  Note that this call is
                      (/home/strick/go/s):01222         *   not well defined for element sizes other than
                      (/home/strick/go/s):01223         *   1 byte.
                      (/home/strick/go/s):01224         *
                      (/home/strick/go/s):01225         
0377 E6A821           (/home/strick/go/s):01226         READLN   ldb   PD.ESiz,Y
037A 5A               (/home/strick/go/s):01227                  decb  
037B 2665             (/home/strick/go/s):01228                  bne   RddEOF     ;EOF error if more than 1 byte per element
                      (/home/strick/go/s):01229         
037D C60D             (/home/strick/go/s):01230                  ldb   #CR
037F E72D             (/home/strick/go/s):01231                  stb   PD.REOR,Y
0381 2002             (/home/strick/go/s):01232                  bra   READ001
                      (/home/strick/go/s):01233         
                      (/home/strick/go/s):01234         *
                      (/home/strick/go/s):01235         *   Read element count from pipe with no editing.
                      (/home/strick/go/s):01236         *
                      (/home/strick/go/s):01237         *   Note that if there are fewer elements in the pipe
                      (/home/strick/go/s):01238         *   than the user wants to read, and there are no writers
                      (/home/strick/go/s):01239         *   for the pipe, we return all elements followed by E$EOF.
                      (/home/strick/go/s):01240         *
                      (/home/strick/go/s):01241         
0383 6F2D             (/home/strick/go/s):01242         READ     clr   PD.REOR,Y
                      (/home/strick/go/s):01243         
                      (/home/strick/go/s):01244         *   Generic read.  PD.REOR = terminator if non-null
                      (/home/strick/go/s):01245         
0385 302A             (/home/strick/go/s):01246         READ001  leax  PD.Read,Y  ;Get PID of reader (us)
0387 1700F5           (/home/strick/go/s):01247                  lbsr  GETFREE
038A 2576             (/home/strick/go/s):01248                  bcs   RddRTS
                      (/home/strick/go/s):01249         
038C EC46             (/home/strick/go/s):01250                  ldd   R$Y,U      ;Desired element count
038E 2758             (/home/strick/go/s):01251                  beq   RddXit
                      (/home/strick/go/s):01252         
                      (/home/strick/go/s):01253         *   Set up for outer loop -- push zero element count
                      (/home/strick/go/s):01254         *   and space for buffer pointers on stack.
                      (/home/strick/go/s):01255         
0390 4F               (/home/strick/go/s):01256                  clra  
0391 5F               (/home/strick/go/s):01257                  clrb  
0392 3406             (/home/strick/go/s):01258                  pshs  D          ;Initial count of elements read
0394 327C             (/home/strick/go/s):01259                  leas  -4,S
0396 AE44             (/home/strick/go/s):01260                  ldx   R$X,U      ;Initial buffer start address
0398 2030             (/home/strick/go/s):01261                  bra   RddNext
                      (/home/strick/go/s):01262         
                      (/home/strick/go/s):01263         *   Enter here to block on read.  If there are no writers,
                      (/home/strick/go/s):01264         *   return E$EOF.
                      (/home/strick/go/s):01265         
039A 3410             (/home/strick/go/s):01266         CantRdd  pshs  X          ;Save buffer pointer
                      (/home/strick/go/s):01267         
039C 302A             (/home/strick/go/s):01268                  leax  PD.Read,Y
039E 170109           (/home/strick/go/s):01269                  lbsr  SigSlp
03A1 10250035         (/home/strick/go/s):01270                  lbcs  RddDone
                      (/home/strick/go/s):01271         
                      (/home/strick/go/s):01272         *   Inner loop to read bytes.
                      (/home/strick/go/s):01273         *   Here for initial attempt to read,
                      (/home/strick/go/s):01274         *   or to retry after blocking
                      (/home/strick/go/s):01275         
03A5 9E50             (/home/strick/go/s):01276         READOK   ldx   <D.PROC    ;Point to our task descriptor
03A7 E606             (/home/strick/go/s):01277                  ldb   P$TASK,X   ++LII
03A9 3510             (/home/strick/go/s):01278                  puls  X          ++LII Recover current buffer pointer
                      (/home/strick/go/s):01279         
                      (/home/strick/go/s):01280         *   Inner read loop.  Read one element.
                      (/home/strick/go/s):01281         *   Note that we could use F$Move for elements larger
                      (/home/strick/go/s):01282         *   than 1 byte, because queue size is always an even
                      (/home/strick/go/s):01283         *   multiple of element size.
                      (/home/strick/go/s):01284         
03AB 170171           (/home/strick/go/s):01285         RddMore  lbsr  DOREAD     ;Get byte to A, or CS
03AE 25EA             (/home/strick/go/s):01286                  bcs   CantRdd
                      (/home/strick/go/s):01287         
03B0 103F4A           (/home/strick/go/s):01288                  os9   F$STABX    ;Put byte in caller's buffer
03B3 3001             (/home/strick/go/s):01289                  leax  1,X
03B5 6D2D             (/home/strick/go/s):01290                  tst   PD.REOR,Y  ;Is there an EOR character?
03B7 2704             (/home/strick/go/s):01291                  beq   NotRdLn
                      (/home/strick/go/s):01292         
03B9 A12D             (/home/strick/go/s):01293                  cmpa  PD.REOR,Y  ;Did we match it?
03BB 2719             (/home/strick/go/s):01294                  beq   RddEOL
                      (/home/strick/go/s):01295         
03BD ACE4             (/home/strick/go/s):01296         NotRdLn  cmpx  0,S        ;Compare current addr. to end addr
03BF 25EA             (/home/strick/go/s):01297                  blo   RddMore    ; and loop until done
                      (/home/strick/go/s):01298         
                      (/home/strick/go/s):01299         *   Done with element.  Check for next.
                      (/home/strick/go/s):01300         
03C1 3410             (/home/strick/go/s):01301                  pshs  X          ;Save buffer pointer
                      (/home/strick/go/s):01302         
03C3 8D28             (/home/strick/go/s):01303                  bsr   CntDn      ;Update queue count, etc
03C5 10A346           (/home/strick/go/s):01304                  cmpd  R$Y,U      ;Got all elements?
03C8 2412             (/home/strick/go/s):01305                  bhs   RddTail
                      (/home/strick/go/s):01306         
                      (/home/strick/go/s):01307         *   Outer loop -- read one element at a time.
                      (/home/strick/go/s):01308         *
                      (/home/strick/go/s):01309         *   X = next data pointer
                      (/home/strick/go/s):01310         *   Y = PD pointer
                      (/home/strick/go/s):01311         
03CA AFE4             (/home/strick/go/s):01312         RddNext  stx   0,S        ;Set new start address
03CC E6A821           (/home/strick/go/s):01313                  ldb   PD.ESiz,Y  ;Size of one element
03CF 4F               (/home/strick/go/s):01314                  clra  
03D0 E3E4             (/home/strick/go/s):01315                  addd  0,S        ;Compute end address of current element bfr
03D2 ED62             (/home/strick/go/s):01316                  std   2,S
03D4 20CF             (/home/strick/go/s):01317                  bra   READOK     ;Go to element reading loop
                      (/home/strick/go/s):01318         
                      (/home/strick/go/s):01319         *   Read an EOL.  Advance element count
                      (/home/strick/go/s):01320         
03D6 3410             (/home/strick/go/s):01321         RddEOL   pshs  X          ;Save buffer pointer
03D8 8D13             (/home/strick/go/s):01322                  bsr   CntDn
                      (/home/strick/go/s):01323         
                      (/home/strick/go/s):01324         *   Read everything, or aborting
                      (/home/strick/go/s):01325         
03DA EC64             (/home/strick/go/s):01326         RddDone  ldd   4,S        ;Get element count
                      (/home/strick/go/s):01327         
                      (/home/strick/go/s):01328         *   Tail end of read
                      (/home/strick/go/s):01329         
03DC ED46             (/home/strick/go/s):01330         RddTail  std   R$Y,U
03DE 3266             (/home/strick/go/s):01331                  leas  6,S        ;Clean stack
03E0 2605             (/home/strick/go/s):01332                  bne   RddSome    ;Success if read more than 0 elements
                      (/home/strick/go/s):01333         
                      (/home/strick/go/s):01334         *   EOF error if no bytes read
                      (/home/strick/go/s):01335         
03E2 53               (/home/strick/go/s):01336         RddEOF   comb  
03E3 C6D3             (/home/strick/go/s):01337                  ldb   #E$EOF
03E5 2001             (/home/strick/go/s):01338                  bra   RddXit
                      (/home/strick/go/s):01339         
                      (/home/strick/go/s):01340         *   Successful exit
                      (/home/strick/go/s):01341         
03E7 5F               (/home/strick/go/s):01342         RddSome  clrb  
                      (/home/strick/go/s):01343         
03E8 302A             (/home/strick/go/s):01344         RddXit   leax  PD.Read,Y
03EA 1600F9           (/home/strick/go/s):01345                  lbra  SWITCH
                      (/home/strick/go/s):01346         
                      (/home/strick/go/s):01347         *   Decrement queued count, inc read count
                      (/home/strick/go/s):01348         
03ED CCFFFF           (/home/strick/go/s):01349         CntDn    ldd   #-1
03F0 2003             (/home/strick/go/s):01350                  bra   CUpDn
                      (/home/strick/go/s):01351         
                      (/home/strick/go/s):01352         *   Increment queued count, inc written count
                      (/home/strick/go/s):01353         
03F2 CC0001           (/home/strick/go/s):01354         CntUp    ldd   #1
                      (/home/strick/go/s):01355         
03F5 E3A81A           (/home/strick/go/s):01356         CUpDn    addd  PD.BCnt,Y  ;Modify count of elements queued
03F8 EDA81A           (/home/strick/go/s):01357                  std   PD.BCnt,Y
                      (/home/strick/go/s):01358         
                      (/home/strick/go/s):01359         *   Bump I/O count
                      (/home/strick/go/s):01360         
03FB EC66             (/home/strick/go/s):01361         IOCnt    ldd   (2+4),S    ;Bump count of elements read/written
03FD C30001           (/home/strick/go/s):01362                  addd  #1
0400 ED66             (/home/strick/go/s):01363                  std   (2+4),S
0402 39               (/home/strick/go/s):01364         RDDRTS   rts   
                      (/home/strick/go/s):01365         
                      (/home/strick/go/s):01366                  page  
                      (/home/strick/go/s):01367         *
                      (/home/strick/go/s):01368         *   Write CR-terminated line or element count to
                      (/home/strick/go/s):01369         *   pipe with no editing
                      (/home/strick/go/s):01370         *
                      (/home/strick/go/s):01371         
0403 E6A821           (/home/strick/go/s):01372         WRITELN  ldb   PD.ESiz,Y
0406 5A               (/home/strick/go/s):01373                  decb  
0407 26D9             (/home/strick/go/s):01374                  bne   RddEOF     ;EOF error if more than 1 byte per element
                      (/home/strick/go/s):01375         
0409 C60D             (/home/strick/go/s):01376                  ldb   #CR
040B E7A811           (/home/strick/go/s):01377                  stb   PD.WEOR,Y
040E 2003             (/home/strick/go/s):01378                  bra   Wrt001
                      (/home/strick/go/s):01379         
                      (/home/strick/go/s):01380         *
                      (/home/strick/go/s):01381         *   Write byte count to pipe with no editing.
                      (/home/strick/go/s):01382         *
                      (/home/strick/go/s):01383         
0410 6FA811           (/home/strick/go/s):01384         WRITE    clr   PD.WEOR,Y
                      (/home/strick/go/s):01385         
                      (/home/strick/go/s):01386         *   Generic entry point
                      (/home/strick/go/s):01387         
0413 302E             (/home/strick/go/s):01388         Wrt001   leax  PD.Writ,Y
0415 170067           (/home/strick/go/s):01389                  lbsr  GETFREE    ;Check I/O queue
0418 2555             (/home/strick/go/s):01390                  bcs   WrtXit
                      (/home/strick/go/s):01391         
041A EC46             (/home/strick/go/s):01392                  ldd   R$Y,U      ;Element count
041C 2751             (/home/strick/go/s):01393                  beq   WrtXit
                      (/home/strick/go/s):01394         
                      (/home/strick/go/s):01395         *   Set up for outer loop -- push zero element count
                      (/home/strick/go/s):01396         *   and space for buffer pointers on stack.
                      (/home/strick/go/s):01397         
041E 4F               (/home/strick/go/s):01398                  clra  
041F 5F               (/home/strick/go/s):01399                  clrb  
0420 3406             (/home/strick/go/s):01400                  pshs  D          ;Initial count of elements read
0422 327C             (/home/strick/go/s):01401                  leas  -4,S
0424 AE44             (/home/strick/go/s):01402                  ldx   R$X,U      ;Initial buffer start address
0426 2030             (/home/strick/go/s):01403                  bra   WrtNext
                      (/home/strick/go/s):01404         
                      (/home/strick/go/s):01405         *   Enter here to block on write
                      (/home/strick/go/s):01406         
0428 3410             (/home/strick/go/s):01407         CantWrt  pshs  X
                      (/home/strick/go/s):01408         
042A 302E             (/home/strick/go/s):01409                  leax  PD.Writ,Y
042C 17007B           (/home/strick/go/s):01410                  lbsr  SigSlp
042F 2542             (/home/strick/go/s):01411                  bcs   WrtErr
                      (/home/strick/go/s):01412         
                      (/home/strick/go/s):01413         *   Begin (or resume) write
                      (/home/strick/go/s):01414         
0431 9E50             (/home/strick/go/s):01415         WRITOK   ldx   <D.PROC    ++LII
0433 E606             (/home/strick/go/s):01416                  ldb   P$TASK,X   ;Get our DAT image #
0435 3510             (/home/strick/go/s):01417                  puls  X          ++LII
                      (/home/strick/go/s):01418         
                      (/home/strick/go/s):01419         *   Main write loop
                      (/home/strick/go/s):01420         
0437 103F49           (/home/strick/go/s):01421         WrtMore  os9   F$LDABX    ;Get a byte from caller's buffer
043A 1700B8           (/home/strick/go/s):01422                  lbsr  DOWRITE
043D 25E9             (/home/strick/go/s):01423                  bcs   CantWrt
                      (/home/strick/go/s):01424         
043F 3001             (/home/strick/go/s):01425                  leax  1,X
0441 6DA811           (/home/strick/go/s):01426                  tst   PD.WEOR,Y  ;EOL character defined?
0444 2705             (/home/strick/go/s):01427                  beq   NotWrLn
                      (/home/strick/go/s):01428         
0446 A1A811           (/home/strick/go/s):01429                  cmpa  PD.WEOR,Y
0449 2719             (/home/strick/go/s):01430                  beq   WrtEOL
                      (/home/strick/go/s):01431         
                      (/home/strick/go/s):01432         *   See if at end of buffer
                      (/home/strick/go/s):01433         
044B ACE4             (/home/strick/go/s):01434         NotWrLn  cmpx  0,S
044D 25E8             (/home/strick/go/s):01435                  blo   WrtMore
                      (/home/strick/go/s):01436         
                      (/home/strick/go/s):01437         *   Done with element.  Check for next.
                      (/home/strick/go/s):01438         
044F 3410             (/home/strick/go/s):01439                  pshs  X          ;Save buffer pointer
                      (/home/strick/go/s):01440         
0451 8D9F             (/home/strick/go/s):01441                  bsr   CntUp
0453 10A346           (/home/strick/go/s):01442                  cmpd  R$Y,U      ;Put all elements?
0456 2412             (/home/strick/go/s):01443                  bhs   WrtTail
                      (/home/strick/go/s):01444         
                      (/home/strick/go/s):01445         *   Outer loop -- write one element at a time.
                      (/home/strick/go/s):01446         
0458 AFE4             (/home/strick/go/s):01447         WrtNext  stx   0,S        ;Set new start address
045A E6A821           (/home/strick/go/s):01448                  ldb   PD.ESiz,Y  ;Size of one element
045D 4F               (/home/strick/go/s):01449                  clra  
045E E3E4             (/home/strick/go/s):01450                  addd  0,S        ;Compute end address of current element bfr
0460 ED62             (/home/strick/go/s):01451                  std   2,S
0462 20CD             (/home/strick/go/s):01452                  bra   WRITOK     ;Go to element reading loop
                      (/home/strick/go/s):01453         
                      (/home/strick/go/s):01454         *   Wrote an EOL.  Advance element count
                      (/home/strick/go/s):01455         
0464 3410             (/home/strick/go/s):01456         WrtEOL   pshs  X          ;Save buffer pointer
0466 8D8A             (/home/strick/go/s):01457                  bsr   CntUp
                      (/home/strick/go/s):01458         
                      (/home/strick/go/s):01459         *   Wrote everything, or aborting
                      (/home/strick/go/s):01460         
0468 EC64             (/home/strick/go/s):01461         WrtDone  ldd   4,S        ;Get element count
                      (/home/strick/go/s):01462         
                      (/home/strick/go/s):01463         *   Tail end of write
                      (/home/strick/go/s):01464         
046A ED46             (/home/strick/go/s):01465         WrtTail  std   R$Y,U
046C 3266             (/home/strick/go/s):01466                  leas  6,S        ;Clean stack
                      (/home/strick/go/s):01467         
                      (/home/strick/go/s):01468         *   Successful exit
                      (/home/strick/go/s):01469         
046E 5F               (/home/strick/go/s):01470         WrtSome  clrb  
                      (/home/strick/go/s):01471         
046F 302E             (/home/strick/go/s):01472         WrtXit   leax  PD.Writ,Y
0471 2073             (/home/strick/go/s):01473                  bra   SWITCH
                      (/home/strick/go/s):01474         
                      (/home/strick/go/s):01475         *   Error exit
                      (/home/strick/go/s):01476         
0473 3404             (/home/strick/go/s):01477         WrtErr   pshs  B
0475 EC65             (/home/strick/go/s):01478                  ldd   (4+1),S
0477 ED46             (/home/strick/go/s):01479                  std   R$Y,U
0479 3504             (/home/strick/go/s):01480                  puls  B
                      (/home/strick/go/s):01481         
047B 3266             (/home/strick/go/s):01482                  leas  6,S
047D 20F0             (/home/strick/go/s):01483                  bra   WrtXit
                      (/home/strick/go/s):01484         
                      (/home/strick/go/s):01485                  page  
                      (/home/strick/go/s):01486         *
                      (/home/strick/go/s):01487         *   I/O queue manipulation routines
                      (/home/strick/go/s):01488         *
                      (/home/strick/go/s):01489         
047F A684             (/home/strick/go/s):01490         GETFREE  lda   PM.CPR,X   ;Is any process using this resource?
0481 2721             (/home/strick/go/s):01491                  beq   SETPMCPR   ; (branch if not)
                      (/home/strick/go/s):01492         
0483 A125             (/home/strick/go/s):01493                  cmpa  PD.CPR,Y   ;Does caller control this resource?
0485 2721             (/home/strick/go/s):01494                  beq   OURDEVIC   ; (branch if so)
                      (/home/strick/go/s):01495         
0487 6C01             (/home/strick/go/s):01496                  inc   PM.CNT,X   ;Bump # of active r/w images
0489 E601             (/home/strick/go/s):01497                  ldb   PM.CNT,X
048B E122             (/home/strick/go/s):01498                  cmpb  PD.CNT,Y   ;See if equal to # of open images
048D 2603             (/home/strick/go/s):01499                  bne   SETQUEUE   ; (if not, run everybody else to free it)
                      (/home/strick/go/s):01500         
048F 17FDAA           (/home/strick/go/s):01501                  lbsr  SENDSIG    ;Yes -- wake up next process
                      (/home/strick/go/s):01502         
                      (/home/strick/go/s):01503         *   Process number in Reg-A
                      (/home/strick/go/s):01504         *   Put the process into the I/O queue and
                      (/home/strick/go/s):01505         *   sleep until a signal wakes us up
                      (/home/strick/go/s):01506         
0492 103F2B           (/home/strick/go/s):01507         SETQUEUE os9   F$IOQU
0495 6A01             (/home/strick/go/s):01508                  dec   PM.CNT,X   ;Caller is asleep, so 1 less active
0497 3410             (/home/strick/go/s):01509                  pshs  X
0499 9E50             (/home/strick/go/s):01510                  ldx   <D.PROC
049B E68819           (/home/strick/go/s):01511                  ldb   P$SIGNAL,X ;Get caller's signal
049E 3510             (/home/strick/go/s):01512                  puls  X
04A0 27DD             (/home/strick/go/s):01513                  beq   GETFREE    ;Loop until there's a signal
                      (/home/strick/go/s):01514         
04A2 43               (/home/strick/go/s):01515                  coma             ;Error if caller is waiting
04A3 39               (/home/strick/go/s):01516                  rts   
                      (/home/strick/go/s):01517         
                      (/home/strick/go/s):01518         *   Nobody using the resource.  Grab it.
                      (/home/strick/go/s):01519         
04A4 E625             (/home/strick/go/s):01520         SETPMCPR ldb   PD.CPR,Y
04A6 E784             (/home/strick/go/s):01521                  stb   PM.CPR,X   ;Make caller "owner"
                      (/home/strick/go/s):01522         
                      (/home/strick/go/s):01523         *   Exit -- caller owns the pipe
                      (/home/strick/go/s):01524         
04A8 5F               (/home/strick/go/s):01525         OURDEVIC clrb  
04A9 39               (/home/strick/go/s):01526                  rts   
                      (/home/strick/go/s):01527         
                      (/home/strick/go/s):01528         *
                      (/home/strick/go/s):01529         *   Set a wakeup signal for the calling process
                      (/home/strick/go/s):01530         *
                      (/home/strick/go/s):01531         
04AA E601             (/home/strick/go/s):01532         SigSlp   ldb   PM.CNT,X   ;Active image count
04AC 5C               (/home/strick/go/s):01533                  incb  
04AD E122             (/home/strick/go/s):01534                  cmpb  PD.CNT,Y   ;Everybody active?
04AF 260A             (/home/strick/go/s):01535                  bne   SgSlp01    ; (if not, try sending signals)
                      (/home/strick/go/s):01536         
                      (/home/strick/go/s):01537         *   Nobody on the other end to signal.
                      (/home/strick/go/s):01538         *   Error if anonymous, else hang out a bit.
                      (/home/strick/go/s):01539         
04B1 6DA823           (/home/strick/go/s):01540                  tst   PD.Name,Y  ;If anonymous pipe & nobody left, error
04B4 272C             (/home/strick/go/s):01541                  beq   WRITEROR
                      (/home/strick/go/s):01542         
                      (/home/strick/go/s):01543         *   Named pipe and nobody to signal.  Not an error if data in pipe.
                      (/home/strick/go/s):01544         
04B6 6DA81A           (/home/strick/go/s):01545                  tst   PD.BCnt,Y  ;Number of items in pipe
04B9 2727             (/home/strick/go/s):01546                  beq   WRITEROR
                      (/home/strick/go/s):01547         
                      (/home/strick/go/s):01548         *   Send signal to other end of pipe (may not be one, though)
                      (/home/strick/go/s):01549         
04BB E701             (/home/strick/go/s):01550         SgSlp01  stb   PM.CNT,X
04BD C601             (/home/strick/go/s):01551                  ldb   #S$WAKE
04BF E702             (/home/strick/go/s):01552                  stb   PM.SIG,X   ;Force caller's signal to "wakeup"
04C1 6F25             (/home/strick/go/s):01553                  clr   PD.CPR,Y
04C3 3410             (/home/strick/go/s):01554                  pshs  X
04C5 1F10             (/home/strick/go/s):01555                  tfr   X,D        ;Switch from reader to writer or vis-a-vis
04C7 C804             (/home/strick/go/s):01556                  eorb  #4
04C9 1F01             (/home/strick/go/s):01557                  tfr   D,X
04CB 17FD6E           (/home/strick/go/s):01558                  lbsr  SENDSIG    ;Send signal to opposite end of pipe
04CE 8E0000           (/home/strick/go/s):01559                  ldx   #0
04D1 103F0A           (/home/strick/go/s):01560                  os9   F$SLEEP    ;Caller sleeps until signaled
04D4 9E50             (/home/strick/go/s):01561                  ldx   <D.PROC
04D6 E68819           (/home/strick/go/s):01562                  ldb   P$SIGNAL,X
04D9 3510             (/home/strick/go/s):01563                  puls  X
04DB 6A01             (/home/strick/go/s):01564                  dec   PM.CNT,X   ;Caller is asleep, so 1 less active
04DD 5D               (/home/strick/go/s):01565                  tstb  
04DE 2604             (/home/strick/go/s):01566                  bne   GOTSIGNL   ;Error if opposite end set no signal
                      (/home/strick/go/s):01567         
04E0 5F               (/home/strick/go/s):01568                  clrb  
04E1 39               (/home/strick/go/s):01569                  rts   
                      (/home/strick/go/s):01570         
                      (/home/strick/go/s):01571         *   WRITE ERROR hook
                      (/home/strick/go/s):01572         
04E2 C6F5             (/home/strick/go/s):01573         WRITEROR ldb   #E$WRITE
                      (/home/strick/go/s):01574         
                      (/home/strick/go/s):01575         *   Generic error hook
                      (/home/strick/go/s):01576         
04E4 43               (/home/strick/go/s):01577         GOTSIGNL coma  
04E5 39               (/home/strick/go/s):01578                  rts   
                      (/home/strick/go/s):01579         
                      (/home/strick/go/s):01580         *
                      (/home/strick/go/s):01581         *   Release this end of the pipe, and
                      (/home/strick/go/s):01582         *   send a signal to the other end.
                      (/home/strick/go/s):01583         *
                      (/home/strick/go/s):01584         *   Enter pointing to variables for
                      (/home/strick/go/s):01585         *   this end; exit pointing to variables
                      (/home/strick/go/s):01586         *   for opposite end.
                      (/home/strick/go/s):01587         *
                      (/home/strick/go/s):01588         
04E6 3445             (/home/strick/go/s):01589         SWITCH   pshs  CC,B,U
04E8 6F84             (/home/strick/go/s):01590                  clr   PM.CPR,X   ;No process controlling current end
04EA 1F10             (/home/strick/go/s):01591                  tfr   X,D
04EC C804             (/home/strick/go/s):01592                  eorb  #4         ;Switch to other end (MAGIC)
04EE 1F01             (/home/strick/go/s):01593                  tfr   D,X
04F0 17FD49           (/home/strick/go/s):01594                  lbsr  SENDSIG    ;Awaken other end
04F3 35C5             (/home/strick/go/s):01595                  puls  CC,B,U,PC
                      (/home/strick/go/s):01596         
                      (/home/strick/go/s):01597         *
                      (/home/strick/go/s):01598         *   Write one byte to queue described in path
                      (/home/strick/go/s):01599         *   descriptor.  Return CS if queue full.
                      (/home/strick/go/s):01600         *   Doesn't update count of ELEMENTS queued.
                      (/home/strick/go/s):01601         *
                      (/home/strick/go/s):01602         
04F5 3414             (/home/strick/go/s):01603         DOWRITE  pshs  B,X
04F7 AEA814           (/home/strick/go/s):01604                  ldx   PD.NxtI,Y
04FA E6A818           (/home/strick/go/s):01605                  ldb   PD.RFlg,Y
04FD 2708             (/home/strick/go/s):01606                  beq   SETREADY   ;(say data available)
                      (/home/strick/go/s):01607         
04FF ACA816           (/home/strick/go/s):01608                  cmpx  PD.NxtO,Y
0502 2608             (/home/strick/go/s):01609                  bne   STORDATA   ;(branch if queue not full)
                      (/home/strick/go/s):01610         
                      (/home/strick/go/s):01611         *   Error -- queue is full
                      (/home/strick/go/s):01612         
0504 53               (/home/strick/go/s):01613                  comb  
0505 3594             (/home/strick/go/s):01614                  puls  B,X,PC
                      (/home/strick/go/s):01615         
                      (/home/strick/go/s):01616         *   Mark data available in queue
                      (/home/strick/go/s):01617         
0507 C601             (/home/strick/go/s):01618         SETREADY ldb   #1
0509 E7A818           (/home/strick/go/s):01619                  stb   PD.RFlg,Y
                      (/home/strick/go/s):01620         
                      (/home/strick/go/s):01621         *   Put data in Reg-A into queue, and advance
                      (/home/strick/go/s):01622         *   pointer to next in w/ wrap
                      (/home/strick/go/s):01623         
050C A780             (/home/strick/go/s):01624         STORDATA sta   ,X+
050E ACA812           (/home/strick/go/s):01625                  cmpx  PD.End,Y
0511 2504             (/home/strick/go/s):01626                  blo   WTNOWRAP
                      (/home/strick/go/s):01627         
0513 AE28             (/home/strick/go/s):01628                  ldx   PD.BUF,Y
0515 3008             (/home/strick/go/s):01629                  leax  PP.Data,X
                      (/home/strick/go/s):01630         
0517 AFA814           (/home/strick/go/s):01631         WTNOWRAP stx   PD.NxtI,Y
                      (/home/strick/go/s):01632         
                      (/home/strick/go/s):01633         * Don't step Character Input Counter.
                      (/home/strick/go/s):01634         
051A 6FA819           (/home/strick/go/s):01635                  clr   PD.Wrtn,Y
051D 3594             (/home/strick/go/s):01636                  puls  B,X,PC
                      (/home/strick/go/s):01637         
                      (/home/strick/go/s):01638         *
                      (/home/strick/go/s):01639         *   Read one byte from queue described in path
                      (/home/strick/go/s):01640         *   descriptor.  Return CS if none available.
                      (/home/strick/go/s):01641         *   Doesn't update count of ELEMENTS queued.
                      (/home/strick/go/s):01642         *
                      (/home/strick/go/s):01643         
051F A6A818           (/home/strick/go/s):01644         DOREAD   lda   PD.RFlg,Y  ;Any data?
0522 2602             (/home/strick/go/s):01645                  bne   DATAREDY
                      (/home/strick/go/s):01646         
                      (/home/strick/go/s):01647         *   No data -- return CS
                      (/home/strick/go/s):01648         
0524 53               (/home/strick/go/s):01649                  comb  
0525 39               (/home/strick/go/s):01650                  rts   
                      (/home/strick/go/s):01651         
                      (/home/strick/go/s):01652         *   Get data from queue
                      (/home/strick/go/s):01653         
0526 3410             (/home/strick/go/s):01654         DATAREDY pshs  X
0528 AEA816           (/home/strick/go/s):01655                  ldx   PD.NxtO,Y  ;Get next out pointer
052B A680             (/home/strick/go/s):01656                  lda   ,X+
052D ACA812           (/home/strick/go/s):01657                  cmpx  PD.End,Y
0530 2504             (/home/strick/go/s):01658                  blo   RDNOWRAP
                      (/home/strick/go/s):01659         
0532 AE28             (/home/strick/go/s):01660                  ldx   PD.BUF,Y
0534 3008             (/home/strick/go/s):01661                  leax  PP.Data,X
                      (/home/strick/go/s):01662         
                      (/home/strick/go/s):01663         *   Save updated next out pointer
                      (/home/strick/go/s):01664         
0536 AFA816           (/home/strick/go/s):01665         RDNOWRAP stx   PD.NxtO,Y
0539 ACA814           (/home/strick/go/s):01666                  cmpx  PD.NxtI,Y
053C 2603             (/home/strick/go/s):01667                  bne   NOTEMPTY
                      (/home/strick/go/s):01668         
053E 6FA818           (/home/strick/go/s):01669                  clr   PD.RFlg,Y  ;Mark queue empty
                      (/home/strick/go/s):01670         
                      (/home/strick/go/s):01671         *   Don't decrement Character Input Counter.
                      (/home/strick/go/s):01672         
     0541             (/home/strick/go/s):01673         NOTEMPTY equ   *
                      (/home/strick/go/s):01674         
                      (/home/strick/go/s):01675         *   Exit with character in Reg-A
                      (/home/strick/go/s):01676         
0541 1CFE             (/home/strick/go/s):01677                  andcc  #^Carry    ;Clear carry
0543 3590             (/home/strick/go/s):01678                  puls  X,PC
                      (/home/strick/go/s):01679         
                      (/home/strick/go/s):01680                  page  
                      (/home/strick/go/s):01681         *
                      (/home/strick/go/s):01682         *   Utility placed here to not make assembly listing obsolete.
                      (/home/strick/go/s):01683         *
                      (/home/strick/go/s):01684         
0545 103F38           (/home/strick/go/s):01685         MovSet   os9   F$Move     ;Do inter-process block move
                      (/home/strick/go/s):01686         
                      (/home/strick/go/s):01687         *   Force set MSB at end of name
                      (/home/strick/go/s):01688         
0548 1F20             (/home/strick/go/s):01689                  tfr   Y,D        ;Byte count to D
054A 5A               (/home/strick/go/s):01690                  decb  
054B A6C5             (/home/strick/go/s):01691                  lda   B,U        ;Get last byte of name
054D 8A80             (/home/strick/go/s):01692                  ora   #%10000000
054F A7C5             (/home/strick/go/s):01693                  sta   B,U
                      (/home/strick/go/s):01694         
0551 39               (/home/strick/go/s):01695                  rts   
                      (/home/strick/go/s):01696         
                      (/home/strick/go/s):01697                  IFEQ  (PIPEDIR-YESDIR)
                      (/home/strick/go/s):01698         
                      (/home/strick/go/s):01699         *
                      (/home/strick/go/s):01700         *   Find out how many pipes there are for the
                      (/home/strick/go/s):01701         *   current device, and set up device descriptor
                      (/home/strick/go/s):01702         *   so that pipe buffer will hold 32 bytes of
                      (/home/strick/go/s):01703         *   data for each.
                      (/home/strick/go/s):01704         *
                      (/home/strick/go/s):01705         *   Reg-Y = PD pointer
                      (/home/strick/go/s):01706         *
                      (/home/strick/go/s):01707         *   Exit with size set up in PD.
                      (/home/strick/go/s):01708         *   CC=EQ if no pipes.
                      (/home/strick/go/s):01709         *
                      (/home/strick/go/s):01710         
0552 3416             (/home/strick/go/s):01711         SizDirP  pshs  X,D
                      (/home/strick/go/s):01712         
0554 5F               (/home/strick/go/s):01713                  clrb             ;Clear count of pipes
0555 AE23             (/home/strick/go/s):01714                  ldx   PD.Dev,Y
0557 AE02             (/home/strick/go/s):01715                  ldx   V$Stat,X   ;Point at static storage
0559 AE06             (/home/strick/go/s):01716                  ldx   V.List,X   ;Get head of linked list
055B 2705             (/home/strick/go/s):01717                  beq   GotCnt
                      (/home/strick/go/s):01718         
                      (/home/strick/go/s):01719         *   There are some pipes.  Count them.
                      (/home/strick/go/s):01720         
055D 5C               (/home/strick/go/s):01721         PCount   incb  
055E AE02             (/home/strick/go/s):01722                  ldx   PP.Next,X  ;Track down linked list
0560 26FB             (/home/strick/go/s):01723                  bne   PCount
                      (/home/strick/go/s):01724         
                      (/home/strick/go/s):01725         *   Now Reg-B = pipe count.  Need 32 bytes per pipe.
                      (/home/strick/go/s):01726         
0562 5C               (/home/strick/go/s):01727         GotCnt   incb             ;Add one for us!
0563 8620             (/home/strick/go/s):01728                  lda   #32
0565 3D               (/home/strick/go/s):01729                  mul   
0566 EDA81E           (/home/strick/go/s):01730                  std   PD.QSiz,Y  ;Set element count for this pipe
0569 8601             (/home/strick/go/s):01731                  lda   #1
056B A7A821           (/home/strick/go/s):01732                  sta   PD.ESiz,Y  ;Set element size to 1 byte
                      (/home/strick/go/s):01733         
056E 3596             (/home/strick/go/s):01734                  puls  D,X,PC
                      (/home/strick/go/s):01735         
                      (/home/strick/go/s):01736         *
                      (/home/strick/go/s):01737         *   Fill pipe buffer with directory data.
                      (/home/strick/go/s):01738         *
                      (/home/strick/go/s):01739         *   The data is organized like an RBF directory:
                      (/home/strick/go/s):01740         *
                      (/home/strick/go/s):01741         *   Offset      Data
                      (/home/strick/go/s):01742         *   --------    --------------------------------
                      (/home/strick/go/s):01743         *   $00-$1C     Pipe name
                      (/home/strick/go/s):01744         *   $1D         DAT task number of pipe buffer
                      (/home/strick/go/s):01745         *   $1E-$1F     Address of pipe buffer in task
                      (/home/strick/go/s):01746         *
                      (/home/strick/go/s):01747         *
0570 3456             (/home/strick/go/s):01748         FilDirP  pshs  U,X,D
                      (/home/strick/go/s):01749         
0572 AE23             (/home/strick/go/s):01750                  ldx   PD.Dev,Y
0574 AE02             (/home/strick/go/s):01751                  ldx   V$Stat,X   ;Point at static storage
0576 AE06             (/home/strick/go/s):01752                  ldx   V.List,X   ;Get head of linked list
0578 2722             (/home/strick/go/s):01753                  beq   GotFil
                      (/home/strick/go/s):01754         
                      (/home/strick/go/s):01755         *   Write data for pipe buffer @X to pipe with PD @Y
                      (/home/strick/go/s):01756         
057A EE84             (/home/strick/go/s):01757         FD000    ldu   PP.PD,X    ;Point at PD for pipe to be dumped
057C 33C823           (/home/strick/go/s):01758                  leau  PD.Name,u
057F C61D             (/home/strick/go/s):01759                  ldb   #NameMax
                      (/home/strick/go/s):01760         
0581 A6C0             (/home/strick/go/s):01761         FD001    lda   ,u+        ;Write pipe name
0583 8D19             (/home/strick/go/s):01762                  bsr   QWrite
0585 5A               (/home/strick/go/s):01763                  decb  
0586 26F9             (/home/strick/go/s):01764                  bne   FD001
                      (/home/strick/go/s):01765         
0588 DE4A             (/home/strick/go/s):01766                  ldu   <D.SysPrc  ;Get system DAT image number
058A A646             (/home/strick/go/s):01767                  lda   P$Task,u
058C 8D10             (/home/strick/go/s):01768                  bsr   QWrite
                      (/home/strick/go/s):01769         
058E 3410             (/home/strick/go/s):01770                  pshs  X          ;Get pipe buffer pointer
0590 A6E0             (/home/strick/go/s):01771                  lda   ,S+
0592 8D0A             (/home/strick/go/s):01772                  bsr   QWrite
0594 A6E0             (/home/strick/go/s):01773                  lda   ,S+
0596 8D06             (/home/strick/go/s):01774                  bsr   QWrite
                      (/home/strick/go/s):01775         
                      (/home/strick/go/s):01776         *   Advance to next pipe buffer
                      (/home/strick/go/s):01777         
0598 AE02             (/home/strick/go/s):01778                  ldx   PP.Next,X
059A 26DE             (/home/strick/go/s):01779                  bne   FD000
                      (/home/strick/go/s):01780         
                      (/home/strick/go/s):01781         *   All done.  Restore regs & exit
                      (/home/strick/go/s):01782         
059C 35D6             (/home/strick/go/s):01783         GotFil   puls  D,X,U,PC
                      (/home/strick/go/s):01784         
                      (/home/strick/go/s):01785         *   Byte saver
                      (/home/strick/go/s):01786         
059E 16FF54           (/home/strick/go/s):01787         QWrite   lbra  DoWrite
                      (/home/strick/go/s):01788         
                      (/home/strick/go/s):01789         *
                      (/home/strick/go/s):01790         *   Immortal entry point
                      (/home/strick/go/s):01791         *
05A1 43               (/home/strick/go/s):01792         Immort   coma  
05A2 C226             (/home/strick/go/s):01793                  sbcb  #38
05A4 54               (/home/strick/go/s):01794                  lsrb  
05A5 42               (/home/strick/go/s):01795                  fcb   $42        ;SBCB op-code
                      (/home/strick/go/s):01796         
                      (/home/strick/go/s):01797         *   Fall through to SS.FD processing
                      (/home/strick/go/s):01798         
                      (/home/strick/go/s):01799         *
                      (/home/strick/go/s):01800         *   Routine to process SS.FD call on an open pipe.
                      (/home/strick/go/s):01801         *   Creates a pseudo-FD in the user's buffer (@R$X).
                      (/home/strick/go/s):01802         *   Desired byte count in R$Y.
                      (/home/strick/go/s):01803         *
                      (/home/strick/go/s):01804         *   The pseudo-file descriptor sector includes the following:
                      (/home/strick/go/s):01805         *
                      (/home/strick/go/s):01806         *   Offset      Description
                      (/home/strick/go/s):01807         *   --------    --------------------------------------
                      (/home/strick/go/s):01808         *   $00         Attributes
                      (/home/strick/go/s):01809         *   $01-$02     Owner's *PROCESS* ID
                      (/home/strick/go/s):01810         *   $03-$07     Zeros (date of last access)
                      (/home/strick/go/s):01811         *   $08         Use count
                      (/home/strick/go/s):01812         *   $09-$0C     Number of items queued
                      (/home/strick/go/s):01813         *   $0D-$0F     Zeros (creation date)
                      (/home/strick/go/s):01814         *   $10-$FF     Zeros (segment list -- at least 5 zeros needed)
                      (/home/strick/go/s):01815         *
                      (/home/strick/go/s):01816         
05A6 3476             (/home/strick/go/s):01817         DoSSFD   pshs  D,X,Y,U
                      (/home/strick/go/s):01818         
05A8 C615             (/home/strick/go/s):01819                  ldb   #(16+5)    ;Clear data on stack
05AA 6FE2             (/home/strick/go/s):01820         SSFD01   clr   ,-S
05AC 5A               (/home/strick/go/s):01821                  decb  
05AD 26FB             (/home/strick/go/s):01822                  bne   SSFD01
                      (/home/strick/go/s):01823         
                      (/home/strick/go/s):01824         *   Set attributes
05AF A621             (/home/strick/go/s):01825                  lda   PD.Mod,Y
05B1 A7E4             (/home/strick/go/s):01826                  sta   FD.ATT,S
                      (/home/strick/go/s):01827         
                      (/home/strick/go/s):01828         *   Set owner's process ID
05B3 A6A81C           (/home/strick/go/s):01829                  lda   PD.Own,Y
05B6 A762             (/home/strick/go/s):01830                  sta   (FD.OWN+1),S
                      (/home/strick/go/s):01831         
                      (/home/strick/go/s):01832         *   Set use count
05B8 A622             (/home/strick/go/s):01833                  lda   PD.CNT,Y
05BA A768             (/home/strick/go/s):01834                  sta   FD.LNK,S
                      (/home/strick/go/s):01835         
                      (/home/strick/go/s):01836         *   Set queue count
                      (/home/strick/go/s):01837         
05BC ECA81A           (/home/strick/go/s):01838                  ldd   PD.BCNT,Y
05BF ED6B             (/home/strick/go/s):01839                  std   (FD.SIZ+2),S
                      (/home/strick/go/s):01840         
                      (/home/strick/go/s):01841         *   Now copy the data into the caller's buffer
                      (/home/strick/go/s):01842         
05C1 9E4A             (/home/strick/go/s):01843                  ldx   <D.SysPrc  ;Pointer to our PD
05C3 A606             (/home/strick/go/s):01844                  lda   P$Task,X   ; get system's DAT image # (source)
05C5 9E50             (/home/strick/go/s):01845                  ldx   <D.Proc    ;Pointer to caller's PD
05C7 E606             (/home/strick/go/s):01846                  ldb   P$Task,X   ; get caller's DAT image # (dest)
05C9 10AE46           (/home/strick/go/s):01847                  ldy   R$Y,U      ;Byte count
05CC 30E4             (/home/strick/go/s):01848                  leax  0,S        ;Source address
05CE EE44             (/home/strick/go/s):01849                  ldu   R$X,U      ;Destination address
05D0 103F38           (/home/strick/go/s):01850                  os9   F$Move     ;Do the move
                      (/home/strick/go/s):01851         
                      (/home/strick/go/s):01852         *   All done.
                      (/home/strick/go/s):01853         
05D3 32E815           (/home/strick/go/s):01854                  leas  (16+5),S
05D6 35F6             (/home/strick/go/s):01855                  puls  U,X,Y,D,PC
                      (/home/strick/go/s):01856         
                      (/home/strick/go/s):01857                  ENDC  
                      (/home/strick/go/s):01858         
05D8 225AB3           (/home/strick/go/s):01859                  emod  
                      (/home/strick/go/s):01860         
     05DB             (/home/strick/go/s):01861         MODSIZE  equ   *
                      (/home/strick/go/s):01862         
                      (/home/strick/go/s):01863                  end   
