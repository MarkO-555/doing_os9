                      (/home/strick/6809):00001         ********************************************************************
                      (/home/strick/6809):00002         * debug - 6809/6309 debugger
                      (/home/strick/6809):00003         *
                      (/home/strick/6809):00004         * $Id$
                      (/home/strick/6809):00005         *
                      (/home/strick/6809):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/home/strick/6809):00007         * Comment
                      (/home/strick/6809):00008         * ------------------------------------------------------------------
                      (/home/strick/6809):00009         *   6      ????/??/??
                      (/home/strick/6809):00010         * From Tandy OS-9 Level Two VR 02.00.01.
                      (/home/strick/6809):00011         *
                      (/home/strick/6809):00012         *   9      2003/01/03  Boisy G. Pitre
                      (/home/strick/6809):00013         * From Tandy OS-9 Level Two Development System, back-ported to
                      (/home/strick/6809):00014         * OS-9 Level One.
                      (/home/strick/6809):00015         *
                      (/home/strick/6809):00016         *  10      2003/01/05  Boisy G. Pitre
                      (/home/strick/6809):00017         * Start of optimizations, works under NitrOS-9.
                      (/home/strick/6809):00018         *
                      (/home/strick/6809):00019         *  11      2004/06/23  Boisy G. Pitre
                      (/home/strick/6809):00020         * Verbose error messages, added System Debug code for potential
                      (/home/strick/6809):00021         * system-state debugger talking to an A6551 at $FF68.
                      (/home/strick/6809):00022         
                      (/home/strick/6809):00023                  nam   debug
                      (/home/strick/6809):00024                  ttl   6809/6309 debugger
                      (/home/strick/6809):00025         
                      (/home/strick/6809):00026         * Disassembled 02/07/06 13:05:58 by Disasm v1.6 (C) 1988 by RML
                      (/home/strick/6809):00027         
                      (/home/strick/6809):00028                  ifp1
                      (/home/strick/6809):00029                  use   defsfile
                      (         defsfile):00001                   use    ../defsfile
     0001             (      ../defsfile):00001         Level    equ   1
                      (      ../defsfile):00002         
                      (      ../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0018                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
0018                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
0018                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
0018                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
0018                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
0018                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
                      (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0018                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0018                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
0018                  (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0024                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0024                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0034                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0034                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0034                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0034                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0034                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
0034                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
0034                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
0034                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
0034                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
0034                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
0034                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0034                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0034                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0034                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0034                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0034                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0034                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0034                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0034                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0034                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0034                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
0034                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
0034                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
0034                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
0034                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
0034                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
0034                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0034                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0034                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0034                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0034                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0034                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0034                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0034                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0034                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
0070                  (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0080                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0080                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
                      (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
00B1                  (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
00B1                  (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
00B1                  (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
00B1                  (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
00B1                  (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
00B1                  (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
00B1                  (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
00B1                  (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
00B1                  (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
00B1                  (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
00B1                  (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
00B1                  (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
00B1                  (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
00B1                  (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
00B1                  (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
00B1                  (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
00B1                  (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0024                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0026                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
002A                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
002C                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
002E                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0030                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0032                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0034                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0036                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0038                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
003A                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
003C                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
003E                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0040                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0042                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0044                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0046                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0048                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0049                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
004B                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
004D                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
004F                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0051                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
     0053             (            os9.d):00456         D.Time         EQU       .                   Time
0053                  (            os9.d):00457         D.Year         RMB       1                   $53
0054                  (            os9.d):00458         D.Month        RMB       1                   $54
0055                  (            os9.d):00459         D.Day          RMB       1                   $55
0056                  (            os9.d):00460         D.Hour         RMB       1                   $56
0057                  (            os9.d):00461         D.Min          RMB       1                   $57
0058                  (            os9.d):00462         D.Sec          RMB       1                   $58
0059                  (            os9.d):00463         D.Tick         RMB       1                   $59
005A                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
005B                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
005C                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
005E                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0060                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0062                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0064                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0066                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0068                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
006A                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
006B                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
006D                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
006F                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0071                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0081                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0083                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0084                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0086                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0088                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0089                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
008A                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0100                  (            os9.d):00494         D.XSWI3        RMB       3
0103                  (            os9.d):00495         D.XSWI2        RMB       3
0106                  (            os9.d):00496         D.XSWI         RMB       3
0109                  (            os9.d):00497         D.XNMI         RMB       3
010C                  (            os9.d):00498         D.XIRQ         RMB       3
010F                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
     0020             (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
     0002             (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
     006E             (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0112                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0112                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0112                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0112                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
0112                  (            os9.d):00513         D.Time         EQU       .                   System Time
0112                  (            os9.d):00514         D.Year         RMB       1
0112                  (            os9.d):00515         D.Month        RMB       1
0112                  (            os9.d):00516         D.Day          RMB       1
0112                  (            os9.d):00517         D.Hour         RMB       1
0112                  (            os9.d):00518         D.Min          RMB       1
0112                  (            os9.d):00519         D.Sec          RMB       1
0112                  (            os9.d):00520         D.Tick         RMB       1
0112                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0112                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0112                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0112                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0112                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0112                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0112                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0112                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0112                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
0112                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
                      (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
0112                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
0112                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
0112                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
0112                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
0112                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0112                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0112                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0112                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
0112                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
0112                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
0112                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0112                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0112                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0112                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0112                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0112                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
0112                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
0112                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
0112                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0112                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
0112                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0112                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
0112                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0112                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0112                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
                      (            os9.d):00569                        RMB       4                   reserved
0112                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
0112                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0112                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0112                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0112                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0112                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0112                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0112                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0112                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0112                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0112                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0112                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
0112                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
0112                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
0112                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
0112                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
0112                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
0112                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
0112                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
0112                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
0112                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
0112                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
0112                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
0112                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
0112                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
0112                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
0112                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
0112                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
0112                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
0112                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
0112                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
0112                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
0112                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
0112                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
0112                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
0112                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
0112                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
0112                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
0112                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
0112                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
0112                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
0112                  (            os9.d):00619         D.Clock        RMB       2
0112                  (            os9.d):00620         D.XSWI3        RMB       2
0112                  (            os9.d):00621         D.XSWI2        RMB       2
0112                  (            os9.d):00622         D.XFIRQ        RMB       2
0112                  (            os9.d):00623         D.XIRQ         RMB       2
0112                  (            os9.d):00624         D.XSWI         RMB       2
0112                  (            os9.d):00625         D.XNMI         RMB       2
0112                  (            os9.d):00626         D.ErrRst       RMB       2
0112                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
0112                  (            os9.d):00628         D.SWI3         RMB       2
0112                  (            os9.d):00629         D.SWI2         RMB       2
0112                  (            os9.d):00630         D.FIRQ         RMB       2
0112                  (            os9.d):00631         D.IRQ          RMB       2
0112                  (            os9.d):00632         D.SWI          RMB       2
0112                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
0112                  (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
0112                  (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
0112                  (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
0112                  (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
0112                  (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0000                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0000                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0002                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0004             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0025                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0025                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0025                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
     000C             (            os9.d):00820         DefIOSiz       EQU       12
     0010             (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
0000                  (            os9.d):00824         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
0007                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
0008                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
0009                  (            os9.d):00832         P$User         RMB       2                   User Index $09
000B                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
000C                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
000D                  (            os9.d):00835         P$State        RMB       1                   Status $0D
000E                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
0010                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
0011                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
0012                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
0014                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
0016                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
0018                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
001A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
0026                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
0036                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
0037                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
0039                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
003B                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
003F                  (            os9.d):00849                        RMB       $40-.               unused
     0040             (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
     0080             (            os9.d):00855         SysState       EQU       %10000000
     0040             (            os9.d):00856         TimSleep       EQU       %01000000
     0020             (            os9.d):00857         TimOut         EQU       %00100000
     0010             (            os9.d):00858         ImgChg         EQU       %00010000
     0002             (            os9.d):00859         Condem         EQU       %00000010
     0001             (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
0040                  (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
0040                  (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
0040                  (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0040                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0040                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0040                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0040                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0040                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0040                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0040                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0040                  (            os9.d):00877         P$User         RMB       2                   User Index
0040                  (            os9.d):00878         P$Prior        RMB       1                   Priority
0040                  (            os9.d):00879         P$Age          RMB       1                   Age
0040                  (            os9.d):00880         P$State        RMB       1                   Status
0040                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
0040                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0040                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0040                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0040                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0040                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0040                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0040                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
0040                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
0040                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
0040                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
                      (            os9.d):00892                        RMB       $20-.               unused
0040                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0040                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0040                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
0040                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
0040                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
0040                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
0040                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
0040                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
0040                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
0040                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
0040                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
0040                  (            os9.d):00905         P$Alarm        RMB       6
                      (            os9.d):00906                        RMB       $200-.              Local stack
0040                  (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
0040                  (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
0040                  (            os9.d):00913         SysState       EQU       %10000000
0040                  (            os9.d):00914         TimSleep       EQU       %01000000
0040                  (            os9.d):00915         TimOut         EQU       %00100000
0040                  (            os9.d):00916         ImgChg         EQU       %00010000
0040                  (            os9.d):00917         Suspend        EQU       %00001000
0040                  (            os9.d):00918         Condem         EQU       %00000010
0040                  (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
0009                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     0009             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     0009             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
0005                  (            os9.d):01040         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01041         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01044         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01045         R$X            EQU       6                   X Index register
0005                  (            os9.d):01046         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01047         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01048         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
     0003             (            os9.d):01051         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01052         R$X            EQU       4                   X Index register
     0006             (            os9.d):01053         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01054         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01055         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
     EE00             (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
     1080             (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
00FF                  (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
00FF                  (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
00FF                  (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
00FF                  (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
00FF                  (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (      ../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002F                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
002F                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
002F                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
002F                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
002F                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
002F                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
002F                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
                      (            scf.d):00222         
                      (            scf.d):00223         * PD.BAU definitions
                      (            scf.d):00224         *
                      (            scf.d):00225         * Baud rate
     0000             (            scf.d):00226         B110           EQU       %00000000
     0001             (            scf.d):00227         B300           EQU       %00000001
     0002             (            scf.d):00228         B600           EQU       %00000010
     0003             (            scf.d):00229         B1200          EQU       %00000011
     0004             (            scf.d):00230         B2400          EQU       %00000100
     0005             (            scf.d):00231         B4800          EQU       %00000101
     0006             (            scf.d):00232         B9600          EQU       %00000110
     0007             (            scf.d):00233         B19200         EQU       %00000111
     0008             (            scf.d):00234         B38400         EQU       %00001000
     0009             (            scf.d):00235         B57600         EQU       %00001001
     000A             (            scf.d):00236         B115200        EQU       %00001010
                      (            scf.d):00237         * Word size
     0000             (            scf.d):00238         WORD8          EQU       %00000000
     0020             (            scf.d):00239         WORD7          EQU       %00100000
                      (            scf.d):00240         * Stop bits
     0000             (            scf.d):00241         STOP1          EQU       %00000000
     0010             (            scf.d):00242         STOP2          EQU       %00010000
                      (            scf.d):00243         
                      (            scf.d):00244                        ENDC      
                      (      ../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0040                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0040                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0040                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0040                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0040                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0040                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
0040                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0040                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0040                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0040                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0040                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0040                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0040                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0040                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
                      (            rbf.d):00239                        RMB       32-.                Reserved
0040                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
0040                  (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
0040                  (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
0040                  (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
0040                  (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (      ../defsfile):00006                  use   dragon.d
                      (         dragon.d):00001                  IFNE   DRAGON.D-1
     0001             (         dragon.d):00002         DRAGON.D set   1         
                      (         dragon.d):00003                                  
                      (         dragon.d):00004         ********************************************************************
                      (         dragon.d):00005         * DgnDefs - Dragon I/O Definitions
                      (         dragon.d):00006         *
                      (         dragon.d):00007         * $Id$
                      (         dragon.d):00008         *
                      (         dragon.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (         dragon.d):00010         * Comment
                      (         dragon.d):00011         * ------------------------------------------------------------------
                      (         dragon.d):00012         *          2004/11/16  P.Harvey-Smith.
                      (         dragon.d):00013         * Fixed the stupid error I made in the defines below that made all the
                      (         dragon.d):00014         * non DPxxxxx defines equal to FF00 !!!
                      (         dragon.d):00015         *
                      (         dragon.d):00016         *          2005/04/14  P.Harvey-Smith
                      (         dragon.d):00017         * Added non DP defines for ACIA on Dragon 64/Alpha
                      (         dragon.d):00018         *
                      (         dragon.d):00019         *          2005/04/21  P.Harvey-Smith
                      (         dragon.d):00020         * Fixed errors in defines for WD2797 non-DP registers.
                      (         dragon.d):00021         *
                      (         dragon.d):00022         
                      (         dragon.d):00023                  nam   DgnDefs  
                      (         dragon.d):00024                  ttl   Dragon I/O Definitions
                      (         dragon.d):00025                                  
                      (         dragon.d):00026         *************************************************
                      (         dragon.d):00027         *
                      (         dragon.d):00028         * NitrOS-9 Level 1 Section
                      (         dragon.d):00029         *
                      (         dragon.d):00030         *************************************************
                      (         dragon.d):00031         
     00FF             (         dragon.d):00032         HW.Page        SET       $FF                 Device descriptor hardware page
                      (         dragon.d):00033         
                      (         dragon.d):00034         **********************************
                      (         dragon.d):00035         * Power Line Frequency Definitions
                      (         dragon.d):00036         *
     0001             (         dragon.d):00037         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (         dragon.d):00038         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (         dragon.d):00039                        IFNDEF    PwrLnFrq
     0002             (         dragon.d):00040         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (         dragon.d):00041                        ENDC
                      (         dragon.d):00042         
                      (         dragon.d):00043         
                      (         dragon.d):00044         **********************************
                      (         dragon.d):00045         * Ticks per second
                      (         dragon.d):00046         *
                      (         dragon.d):00047                        IFNDEF    TkPerSec
                      (         dragon.d):00048                        IFEQ      PwrLnFrq-Hz50
0026                  (         dragon.d):00049         TkPerSec       SET       50
                      (         dragon.d):00050                        ELSE      
     003C             (         dragon.d):00051         TkPerSec       SET       60
                      (         dragon.d):00052                        ENDC      
                      (         dragon.d):00053                        ENDC
                      (         dragon.d):00054         
                      (         dragon.d):00055         
                      (         dragon.d):00056         ****************************************
                      (         dragon.d):00057         * Special character Bit position equates
                      (         dragon.d):00058         *
     0001             (         dragon.d):00059         SHIFTBIT       EQU       %00000001
     0002             (         dragon.d):00060         CNTRLBIT       EQU       %00000010
     0004             (         dragon.d):00061         ALTERBIT       EQU       %00000100
     0008             (         dragon.d):00062         UPBIT          EQU       %00001000
     0010             (         dragon.d):00063         DOWNBIT        EQU       %00010000
     0020             (         dragon.d):00064         LEFTBIT        EQU       %00100000
     0040             (         dragon.d):00065         RIGHTBIT       EQU       %01000000
     0080             (         dragon.d):00066         SPACEBIT       EQU       %10000000
                      (         dragon.d):00067         
                      (         dragon.d):00068         ******************
                      (         dragon.d):00069         * VDG Devices
                      (         dragon.d):00070         *
     FFC0             (         dragon.d):00071         A.TermV        SET       $FFC0               VDG Term
     FFC1             (         dragon.d):00072         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (         dragon.d):00073         A.V2           SET       $FFC2
     FFC3             (         dragon.d):00074         A.V3           SET       $FFC3
     FFC4             (         dragon.d):00075         A.V4           SET       $FFC4
     FFC5             (         dragon.d):00076         A.V5           SET       $FFC5
     FFC6             (         dragon.d):00077         A.V6           SET       $FFC6
     FFC7             (         dragon.d):00078         A.V7           SET       $FFC7
                      (         dragon.d):00079         
                      (         dragon.d):00080         ********************
                      (         dragon.d):00081         * VTIO Static Memory
                      (         dragon.d):00082         *
                      (         dragon.d):00083         * Definitions for ports on Dragon 32/64/Alpha.
                      (         dragon.d):00084         *
                      (         dragon.d):00085         *
     FF00             (         dragon.d):00086         IO              equ             $ff00           IO page on Dragon
                      (         dragon.d):00087         
                      (         dragon.d):00088         *
                      (         dragon.d):00089         * Most of these symbols will be defined twice, as some 
                      (         dragon.d):00090         * of the Dragon code, sets DP=$FF, and uses direct page
                      (         dragon.d):00091         * addressing to access the io ports, whilst some of it
                      (         dragon.d):00092         * uses absolute addressing.
                      (         dragon.d):00093         * The versions starting DP must be used with DP=$FF.
                      (         dragon.d):00094         *
                      (         dragon.d):00095         
                      (         dragon.d):00096         * PIA 0 and 1 standard on all Dragons.
     0000             (         dragon.d):00097         DPPIA0DA        EQU             $00             Side A Data/DDR
     FF00             (         dragon.d):00098         PIA0Base  EQU       DPPIA0DA+IO
     0001             (         dragon.d):00099         DPPIA0CRA       EQU             $01             Side A Control.
     0002             (         dragon.d):00100         DPPIA0DB        EQU             $02             Side B Data/DDR
     0003             (         dragon.d):00101         DPPIA0CRB       EQU             $03             Side B Control.
                      (         dragon.d):00102         
     FF00             (         dragon.d):00103         PIA0DA          EQU             DPPIA0DA+IO     Side A Data/DDR
     FF01             (         dragon.d):00104         PIA0CRA         EQU             DPPIA0CRA+IO    Side A Control.
     FF02             (         dragon.d):00105         PIA0DB          EQU             DPPIA0DB+IO     Side A Data/DDR
     FF03             (         dragon.d):00106         PIA0CRB         EQU             DPPIA0CRB+IO    Side A Control.
                      (         dragon.d):00107         
     0020             (         dragon.d):00108         DPPIA1DA        EQU             $20             Side A Data/DDR
     FF20             (         dragon.d):00109         PIA1Base  EQU       DPPIA1DA+IO
     0021             (         dragon.d):00110         DPPIA1CRA       EQU             $21             Side A Control.
     0022             (         dragon.d):00111         DPPIA1DB        EQU             $22             Side B Data/DDR
     0023             (         dragon.d):00112         DPPIA1CRB       EQU             $23             Side B Control.
                      (         dragon.d):00113         
     FF20             (         dragon.d):00114         PIA1DA          EQU             DPPIA1DA+IO     Side A Data/DDR
     FF21             (         dragon.d):00115         PIA1CRA         EQU             DPPIA1CRA+IO    Side A Control.
     FF22             (         dragon.d):00116         PIA1DB          EQU             DPPIA1DB+IO     Side A Data/DDR
     FF23             (         dragon.d):00117         PIA1CRB         EQU             DPPIA1CRB+IO    Side A Control.
                      (         dragon.d):00118         
                      (         dragon.d):00119         * Dragon Alpha has a third PIA at $FF24.
     0024             (         dragon.d):00120         DPPIA2DA        EQU             $24             Side A Data/DDR
     0025             (         dragon.d):00121         DPPIA2CRA       EQU             $25             Side A Control.
     0026             (         dragon.d):00122         DPPIA2DB        EQU             $26             Side B Data/DDR
     0027             (         dragon.d):00123         DPPIA2CRB       EQU             $27             Side B Control.
                      (         dragon.d):00124         
     FF24             (         dragon.d):00125         PIA2DA          EQU             DPPIA2DA+IO     Side A Data/DDR
     FF25             (         dragon.d):00126         PIA2CRA         EQU             DPPIA2CRA+IO    Side A Control.
     FF26             (         dragon.d):00127         PIA2DB          EQU             DPPIA2DB+IO     Side A Data/DDR
     FF27             (         dragon.d):00128         PIA2CRB         EQU             DPPIA2CRB+IO    Side A Control.
                      (         dragon.d):00129         
                      (         dragon.d):00130         * WD2797 Floppy disk controler, used in Alpha Note registers in reverse order !
     002F             (         dragon.d):00131         DPCmdRegA       EQU             $2F             command/status                  
     002E             (         dragon.d):00132         DPTrkRegA       EQU             $2E             Track register
     002D             (         dragon.d):00133         DPSecRegA       EQU             $2D             Sector register
     002C             (         dragon.d):00134         DPDataRegA      EQU             $2C             Data register
                      (         dragon.d):00135         
     FF2F             (         dragon.d):00136         CmdRegA         EQU             DPCMDREGA+IO    command/status                  
     FF2E             (         dragon.d):00137         TrkRegA         EQU             DPTRKREGA+IO    Track register
     FF2D             (         dragon.d):00138         SecRegA         EQU             DPSECREGA+IO    Sector register
     FF2C             (         dragon.d):00139         DataRegA        EQU             DPDATAREGA+IO   Data register
                      (         dragon.d):00140         
     FF2C             (         dragon.d):00141         DPort          SET       DataRegA               Disk controller base address
                      (         dragon.d):00142         
                      (         dragon.d):00143         * Constants for Alpha AY-8912 sound chip, which is used to control
                      (         dragon.d):00144         * Drive select and motor on the Alpha
     000E             (         dragon.d):00145         AYIOREG         EQU             $0E             AY-8912, IO Register number.
     0000             (         dragon.d):00146         AYIdle          EQU             $00             Make AY Idle.
     0001             (         dragon.d):00147         AYWriteReg      EQU             $01             Write AY Register
     0002             (         dragon.d):00148         AYReadReg       EQU             $02             Read AY Register
     0003             (         dragon.d):00149         AYREGLatch      EQU             $03             Latch register into AY
                      (         dragon.d):00150         
     0003             (         dragon.d):00151         DSMask          EQU             $03             Drive select mask.
     0004             (         dragon.d):00152         MotorMask       EQU             $04             Motor enable mask
     0008             (         dragon.d):00153         DDENMask        EQU             $08             DDEN Mask
     0010             (         dragon.d):00154         ENPMask         EQU             $10             Enable Precomp mask
     0020             (         dragon.d):00155         NMIMask         EQU             $20             NMI enable Mask
                      (         dragon.d):00156         
                      (         dragon.d):00157         * Dragon 64/Alpha Serial port.
     0004             (         dragon.d):00158         DPAciaData      EQU             $04             ACIA Rx/Tx Register
     0005             (         dragon.d):00159         DPAciaStat      EQU             $05             ACIA status register
     0006             (         dragon.d):00160         DPAciaCmd       EQU             $06             ACIA command register
     0007             (         dragon.d):00161         DPAciaCtrl      EQU             $07             ACIA control register
                      (         dragon.d):00162         
     FF04             (         dragon.d):00163         AciaData        EQU             DPAciaData+IO   ACIA Rx/Tx Register
     FF05             (         dragon.d):00164         AciaStat        EQU             DPAciaStat+IO   ACIA status register
     FF06             (         dragon.d):00165         AciaCmd         EQU             DPAciaCmd+IO    ACIA command register
     FF07             (         dragon.d):00166         AciaCtrl        EQU             DPAciaCtrl+IO   ACIA control register
                      (         dragon.d):00167         
                      (         dragon.d):00168         * DragonDos Cartrage IO for WD2797
                      (         dragon.d):00169         * WD2797 Floppy disk controler, used in DragonDos.
     0040             (         dragon.d):00170         DPCmdRegD       EQU             $40             command/status                  
     0041             (         dragon.d):00171         DPTrkRegD       EQU             $41             Track register
     0042             (         dragon.d):00172         DPSecRegD       EQU             $42             Sector register
     0043             (         dragon.d):00173         DPDataRegD      EQU             $43             Data register
                      (         dragon.d):00174         
     FF40             (         dragon.d):00175         CmdRegD         EQU             DPCMDREGD+IO    command/status                  
     FF41             (         dragon.d):00176         TrkRegD         EQU             DPTRKREGD+IO    Track register
     FF42             (         dragon.d):00177         SecRegD         EQU             DPSECREGD+IO    Sector register
     FF43             (         dragon.d):00178         DataRegD        EQU             DPDATAREGD+IO   Data register
                      (         dragon.d):00179         
     0048             (         dragon.d):00180         DPDSKCTL        EQU             $48             Disk DS/motor control reg
     FF48             (         dragon.d):00181         DSKCTL          EQU             DPDSKCTL+IO             
                      (         dragon.d):00182         
                      (         dragon.d):00183         * Disk IO bitmasks (DragonDos).
     0020             (         dragon.d):00184         NMIEnD          EQU             %00100000 
     0010             (         dragon.d):00185         WPCEnD          EQU             %00010000 
     0008             (         dragon.d):00186         SDensEnD        EQU             %00001000 
     0004             (         dragon.d):00187         MotorOnD        EQU             %00000100 
     0000             (         dragon.d):00188         Drive0D         EQU             %00000000
     0001             (         dragon.d):00189         Drive1D         EQU             %00000001
     0002             (         dragon.d):00190         Drive2D         EQU             %00000010
     0003             (         dragon.d):00191         Drive3D         EQU             %00000011
     0003             (         dragon.d):00192         DDosDriveMask   EQU             %00000011       Mask out all non drive select bits
     00FC             (         dragon.d):00193         DDosCtrlMask    EQU             %11111100       Mask in all non drive select bits
                      (         dragon.d):00194         
                      (         dragon.d):00195         
                      (         dragon.d):00196         * Disk IO bitmasks (Dragon Alpha).
     0008             (         dragon.d):00197         PIANMIEnA       EQU             %00001000       PIA2, CA2, used to enable/disable NMI 
     00F7             (         dragon.d):00198         PIANMIDisA      EQU             %11110111       Bitmask to force CA2 off, and disable NMI
                      (         dragon.d):00199         
     0080             (         dragon.d):00200         NMIEnA          EQU             %10000000       Flag to enable disable NMI, passed to AlphaDskCtl
     0040             (         dragon.d):00201         WPCEnA          EQU             %01000000       According to circuit trace by R.Harding.
     0020             (         dragon.d):00202         SDensEnA        EQU             %00100000       DDen, from circuit trace on R.Harding's machine.
     0010             (         dragon.d):00203         MotorOnA        EQU             %00010000       
     0001             (         dragon.d):00204         Drive0A         EQU             %00000001
     0002             (         dragon.d):00205         Drive1A         EQU             %00000010
     0004             (         dragon.d):00206         Drive2A         EQU             %00000100
     0008             (         dragon.d):00207         Drive3A         EQU             %00001000
     000F             (         dragon.d):00208         AlphaDrvMask    EQU             %00001111       Mask out all non drive select bits
     00F0             (         dragon.d):00209         AlphaCtrlMask   EQU             %11110000       Mask in all non drive select bits
                      (         dragon.d):00210         
     007F             (         dragon.d):00211         Mask58          EQU             %01111111       And mask to make sure 5.25" clock selected by WD2797
                      (         dragon.d):00212         
     003C             (         dragon.d):00213         NMICA2En        EQU             $3C             Value for PIA CRA to enable NMI
     0034             (         dragon.d):00214         NMICA2Dis       EQU             $34             Value for PIA CRA to disable NMI
                      (         dragon.d):00215         
                      (         dragon.d):00216         * Disk Commands
     00D0             (         dragon.d):00217         FrcInt          EQU     %11010000 
     0088             (         dragon.d):00218         ReadCmnd        EQU     %10001000 
     0000             (         dragon.d):00219         RestCmnd        EQU     %00000000 
     0010             (         dragon.d):00220         SeekCmnd        EQU     %00010000 
     0040             (         dragon.d):00221         StpICmnd        EQU     %01000000 
     00A8             (         dragon.d):00222         WritCmnd        EQU     %10101000 
     00F0             (         dragon.d):00223         WtTkCmnd        EQU     %11110000 
     0002             (         dragon.d):00224         Sid2Sel         EQU     %00000010 
                      (         dragon.d):00225         
                      (         dragon.d):00226         * Disk Status Bits
     0001             (         dragon.d):00227         BusyMask        EQU     %00000001 
     0004             (         dragon.d):00228         LostMask        EQU     %00000100 
     00F8             (         dragon.d):00229         ErrMask         EQU     %11111000 
     0008             (         dragon.d):00230         CRCMask         EQU     %00001000 
     0010             (         dragon.d):00231         RNFMask         EQU     %00010000 
     0020             (         dragon.d):00232         RTypMask        EQU     %00100000 
     0040             (         dragon.d):00233         WPMask          EQU     %01000000 
     0080             (         dragon.d):00234         NotRMask        EQU     %10000000 
                      (         dragon.d):00235         
     0001             (         dragon.d):00236         DensMask        EQU     %00000001 
     0002             (         dragon.d):00237         T80Mask         EQU     %00000010 
                      (         dragon.d):00238         
                      (         dragon.d):00239                         ENDC
                      (/home/strick/6809):00030                  endc
                      (/home/strick/6809):00031         
                      (/home/strick/6809):00032         * Changable settings
     000C             (/home/strick/6809):00033         NumBrkPt equ   12               number of breakpoints
     0145             (/home/strick/6809):00034         BuffSiz  equ   $145
     0050             (/home/strick/6809):00035         UnknSiz  equ   80
                      (/home/strick/6809):00036         
     0011             (/home/strick/6809):00037         tylg     set   Prgrm+Objct   
     0080             (/home/strick/6809):00038         atrv     set   ReEnt+rev
     0000             (/home/strick/6809):00039         rev      set   $00
     000B             (/home/strick/6809):00040         edition  set   11
                      (/home/strick/6809):00041         
0000 87CD09A8000D1180 (/home/strick/6809):00042         L0000    mod   eom,name,tylg,atrv,start,size
     8803490200
                      (/home/strick/6809):00043         
                      (/home/strick/6809):00044                  org   0
0000.                 (/home/strick/6809):00045         curraddr rmb   2
0002.                 (/home/strick/6809):00046         regstack rmb   2
0004.                 (/home/strick/6809):00047         u0004    rmb   2
0006.                 (/home/strick/6809):00048         buffptr  rmb   2
0008.                 (/home/strick/6809):00049         u0008    rmb   2
000A.                 (/home/strick/6809):00050         prevaddr rmb   2
000C.                 (/home/strick/6809):00051         bptable  rmb   2
000E.                 (/home/strick/6809):00052         isnarrow rmb   1
                      (/home/strick/6809):00053         * extra memory allocated at start
000F.                 (/home/strick/6809):00054                  rmb   (NumBrkPt*3)
0033.                 (/home/strick/6809):00055                  rmb   UnknSiz
0083.                 (/home/strick/6809):00056                  rmb   BuffSiz
01C8.                 (/home/strick/6809):00057                  rmb   R$Size
01D4.                 (/home/strick/6809):00058                  rmb   44
     0200             (/home/strick/6809):00059         size     equ   .
                      (/home/strick/6809):00060         
                      (/home/strick/6809):00061         * Debugger Errors
     0000             (/home/strick/6809):00062         E$BadCnt equ   0                illegal constant
     0001             (/home/strick/6809):00063         E$ZerDiv equ   1                divide by zero
     0002             (/home/strick/6809):00064         E$MulOvf equ   2                product > 65535
     0003             (/home/strick/6809):00065         E$OpMsng equ   3                operator not follwed by legal operand
     0004             (/home/strick/6809):00066         E$RParen equ   4                right paren missing
     0005             (/home/strick/6809):00067         E$RBrckt equ   5                right bracket missing
     0006             (/home/strick/6809):00068         E$RABrkt equ   6                right angle bracket > missing
     0007             (/home/strick/6809):00069         E$IllReg equ   7                illegal register
     0008             (/home/strick/6809):00070         E$BytOvf equ   8                value > 255 for byte
     0009             (/home/strick/6809):00071         E$CmdErr equ   9                illegal command
     000A             (/home/strick/6809):00072         E$NotRAM equ   10               memory is ROM
     000B             (/home/strick/6809):00073         E$BPTFull equ  11               breakpoint table full
     000C             (/home/strick/6809):00074         E$NoBkPt equ   12               breakpoint not found
     000D             (/home/strick/6809):00075         E$BadSWI equ   13               Illegal SWI
                      (/home/strick/6809):00076         
     000D             (/home/strick/6809):00077         name     equ   *
                      (/home/strick/6809):00078                  IFEQ  SYSDEBUG-1
                      (/home/strick/6809):00079                  fcc   /sys/
                      (/home/strick/6809):00080                  ENDC
000D 64656275E7       (/home/strick/6809):00081                  fcs   /debug/
0012 0B               (/home/strick/6809):00082                  fcb   edition
                      (/home/strick/6809):00083         
                      (/home/strick/6809):00084         * Convert word in D to Hex string at X and add space
0013                  (/home/strick/6809):00085         Word2HexSpc
0013 8D0C             (/home/strick/6809):00086                  bsr   Word2Hex
0015 2002             (/home/strick/6809):00087                  bra   L0019
0017 8D0E             (/home/strick/6809):00088         L0017    bsr   Byte2Hex
0019 3402             (/home/strick/6809):00089         L0019    pshs  a
001B 8620             (/home/strick/6809):00090                  lda   #C$SPAC
001D A780             (/home/strick/6809):00091                  sta   ,x+
001F 3582             (/home/strick/6809):00092                  puls  pc,a
                      (/home/strick/6809):00093         
                      (/home/strick/6809):00094         * Convert word in D to Hex string at X
0021 1E89             (/home/strick/6809):00095         Word2Hex exg   a,b              swap A/B
0023 8D02             (/home/strick/6809):00096                  bsr   Byte2Hex         work on upper 16 bits (now in B)
0025 1F89             (/home/strick/6809):00097                  tfr   a,b              and work on B
                      (/home/strick/6809):00098         * Convert byte in B to Hex string at X
0027 3404             (/home/strick/6809):00099         Byte2Hex pshs  b                save copy of B on stack
0029 C4F0             (/home/strick/6809):00100                  andb  #$F0             mask upper nibble
002B 54               (/home/strick/6809):00101                  lsrb                   and bring to lower nibble
002C 54               (/home/strick/6809):00102                  lsrb  
002D 54               (/home/strick/6809):00103                  lsrb  
002E 54               (/home/strick/6809):00104                  lsrb  
002F 8D04             (/home/strick/6809):00105                  bsr   Nibl2Hex         convert byte in B to ASCII
0031 3504             (/home/strick/6809):00106                  puls  b                get saved B
0033 C40F             (/home/strick/6809):00107                  andb  #$0F             do lower nibble
                      (/home/strick/6809):00108         * Convert lower nibble in B to Hex character at X
0035 C109             (/home/strick/6809):00109         Nibl2Hex cmpb  #$09             9?
0037 2302             (/home/strick/6809):00110                  bls   n@               branch if lower/same
0039 CB07             (/home/strick/6809):00111                  addb  #$07             else add 7
003B CB30             (/home/strick/6809):00112         n@       addb  #'0              and ASCII 0
003D E780             (/home/strick/6809):00113                  stb   ,x+              save B
003F 39               (/home/strick/6809):00114                  rts   
                      (/home/strick/6809):00115         
                      (/home/strick/6809):00116         * Convert byte in B to Decimal string at X (3 places)
0040                  (/home/strick/6809):00117         Word2Dec3
0040 3464             (/home/strick/6809):00118                  pshs  u,y,b
0042 4F               (/home/strick/6809):00119                  clra
0043 338C2F           (/home/strick/6809):00120                  leau  <DeciTbl+4,pcr   point to deci-table
0046 108E0003         (/home/strick/6809):00121                  ldy   #$0003           number of decimal places 
004A 2009             (/home/strick/6809):00122                  bra   w1
                      (/home/strick/6809):00123         * Convert word in D to Decimal string at X (5 places)
004C                  (/home/strick/6809):00124         Word2Dec5
004C 3464             (/home/strick/6809):00125                  pshs  u,y,b
004E 338C20           (/home/strick/6809):00126                  leau  <DeciTbl,pcr     point to deci-table
0051 108E0005         (/home/strick/6809):00127                  ldy   #$0005           number of decimal places 
0055 6FE4             (/home/strick/6809):00128         w1       clr   ,s               clear byte on stack
0057 A3C4             (/home/strick/6809):00129         w2       subd  ,u               subtract current place from D
0059 2504             (/home/strick/6809):00130                  bcs   w3               branch if negative
005B 6CE4             (/home/strick/6809):00131                  inc   ,s               else increment place
005D 20F8             (/home/strick/6809):00132                  bra   w2               and continue
005F E3C1             (/home/strick/6809):00133         w3       addd  ,u++             re-normalize D
0061 3404             (/home/strick/6809):00134                  pshs  b                save B
0063 E661             (/home/strick/6809):00135                  ldb   $01,s            get saved B
0065 CB30             (/home/strick/6809):00136                  addb  #'0              add ASCII 0
0067 E780             (/home/strick/6809):00137                  stb   ,x+              and save
0069 3504             (/home/strick/6809):00138                  puls  b                retrieve saved B
006B 313F             (/home/strick/6809):00139                  leay  -$01,y           subtract Y
006D 26E6             (/home/strick/6809):00140                  bne   w1               branch if not done
006F 35E4             (/home/strick/6809):00141                  puls  pc,u,y,b
                      (/home/strick/6809):00142         
0071 271003E80064000A (/home/strick/6809):00143         DeciTbl  fdb   10000,1000,100,10,1
     0001
                      (/home/strick/6809):00144         
                      (/home/strick/6809):00145         * Evaluate number specifier at X
007B 1700B5           (/home/strick/6809):00146         EvalSpec lbsr  EatSpace         skip spaces
007E 3001             (/home/strick/6809):00147                  leax  $01,x            point after byte in A
0080 8123             (/home/strick/6809):00148                  cmpa  #'#              decimal specifier?
0082 2742             (/home/strick/6809):00149                  beq   DoDec            branch if so
0084 8125             (/home/strick/6809):00150                  cmpa  #'%              binary specifier?
0086 2764             (/home/strick/6809):00151                  beq   DoBin            branch if so
0088 8124             (/home/strick/6809):00152                  cmpa  #'$              hex specifier?
008A 2702             (/home/strick/6809):00153                  beq   DoHex            branch if so
008C 301F             (/home/strick/6809):00154                  leax  -$01,x           back up
                      (/home/strick/6809):00155         
                      (/home/strick/6809):00156         * Make hex number
008E 327C             (/home/strick/6809):00157         DoHex    leas  -$04,s           make room on stack for hex
0090 8D71             (/home/strick/6809):00158                  bsr   Clr4             clear bytes on stack
0092 8D76             (/home/strick/6809):00159         L0086    bsr   AtoInt           get integer value at ,X
0094 2416             (/home/strick/6809):00160                  bcc   L00A0            branch if ok
0096 C141             (/home/strick/6809):00161                  cmpb  #'A              may be hex digit.. check for 
0098 10250080         (/home/strick/6809):00162                  lbcs  L0110            branch if not
009C C146             (/home/strick/6809):00163                  cmpb  #'F              check upperbound
009E 230A             (/home/strick/6809):00164                  bls   L009E            branch if ok
00A0 C161             (/home/strick/6809):00165                  cmpb  #'a              now check lowercase
00A2 2578             (/home/strick/6809):00166                  bcs   L0110            branch if not
00A4 C166             (/home/strick/6809):00167                  cmpb  #'f              check upperbound
00A6 2274             (/home/strick/6809):00168                  bhi   L0110            branch if not ok
00A8 C020             (/home/strick/6809):00169                  subb  #$20             else make uppercase
00AA C037             (/home/strick/6809):00170         L009E    subb  #$37             and get value
00AC E7E4             (/home/strick/6809):00171         L00A0    stb   ,s               save value on stack
00AE EC62             (/home/strick/6809):00172                  ldd   $02,s            get two bytes from stack
00B0 85F0             (/home/strick/6809):00173                  bita  #$F0             upper nibble set?
00B2 267B             (/home/strick/6809):00174                  bne   L0123            branch if so
                      (/home/strick/6809):00175                  IFNE  H6309
                      (/home/strick/6809):00176                  lsld
                      (/home/strick/6809):00177                  lsld
                      (/home/strick/6809):00178                  lsld
                      (/home/strick/6809):00179                  lsld
                      (/home/strick/6809):00180                  ELSE
00B4 58               (/home/strick/6809):00181                  lslb  
00B5 49               (/home/strick/6809):00182                  rola  
00B6 58               (/home/strick/6809):00183                  lslb  
00B7 49               (/home/strick/6809):00184                  rola  
00B8 58               (/home/strick/6809):00185                  lslb  
00B9 49               (/home/strick/6809):00186                  rola  
00BA 58               (/home/strick/6809):00187                  lslb  
00BB 49               (/home/strick/6809):00188                  rola  
                      (/home/strick/6809):00189                  ENDC
00BC EBE4             (/home/strick/6809):00190                  addb  ,s
00BE 8900             (/home/strick/6809):00191                  adca  #$00
00C0 ED62             (/home/strick/6809):00192                  std   $02,s
00C2 6C61             (/home/strick/6809):00193                  inc   $01,s
00C4 20CC             (/home/strick/6809):00194                  bra   L0086
                      (/home/strick/6809):00195         
                      (/home/strick/6809):00196         * Make decimal number
00C6 327C             (/home/strick/6809):00197         DoDec    leas  -$04,s           make room on stack
00C8 8D39             (/home/strick/6809):00198                  bsr   Clr4             clear it
00CA 8D3E             (/home/strick/6809):00199         L00BE    bsr   AtoInt           convert ASCII char in A
00CC 254E             (/home/strick/6809):00200                  bcs   L0110
00CE E7E4             (/home/strick/6809):00201                  stb   ,s               save integer char
00D0 EC62             (/home/strick/6809):00202                  ldd   $02,s            get word on stack
                      (/home/strick/6809):00203                  IFNE  H6309
                      (/home/strick/6809):00204                  lsld
                      (/home/strick/6809):00205                  ELSE
00D2 58               (/home/strick/6809):00206                  lslb
00D3 49               (/home/strick/6809):00207                  rola                   D * 2
                      (/home/strick/6809):00208                  ENDC
00D4 ED62             (/home/strick/6809):00209                  std   $02,s            save
                      (/home/strick/6809):00210                  IFNE  H6309
                      (/home/strick/6809):00211                  lsld
                      (/home/strick/6809):00212                  lsld
                      (/home/strick/6809):00213                  ELSE
00D6 58               (/home/strick/6809):00214                  lslb  
00D7 49               (/home/strick/6809):00215                  rola                   D * 4
00D8 58               (/home/strick/6809):00216                  lslb  
00D9 49               (/home/strick/6809):00217                  rola                   D * 8
                      (/home/strick/6809):00218                  ENDC
00DA 2553             (/home/strick/6809):00219                  bcs   L0123
00DC E362             (/home/strick/6809):00220                  addd  $02,s            add to word on stack
00DE 254F             (/home/strick/6809):00221                  bcs   L0123
00E0 EBE4             (/home/strick/6809):00222                  addb  ,s
00E2 8900             (/home/strick/6809):00223                  adca  #$00
00E4 2549             (/home/strick/6809):00224                  bcs   L0123
00E6 ED62             (/home/strick/6809):00225                  std   $02,s
00E8 6C61             (/home/strick/6809):00226                  inc   $01,s
00EA 20DE             (/home/strick/6809):00227                  bra   L00BE
                      (/home/strick/6809):00228         
                      (/home/strick/6809):00229         * Make binary number
00EC 327C             (/home/strick/6809):00230         DoBin    leas  -$04,s           make room on stack
00EE 8D13             (/home/strick/6809):00231                  bsr   Clr4             clear it
00F0 E680             (/home/strick/6809):00232         L00E4    ldb   ,x+              get char at X
00F2 C030             (/home/strick/6809):00233                  subb  #'0              subtract ASCII 0
00F4 2526             (/home/strick/6809):00234                  bcs   L0110            branch if lower
00F6 54               (/home/strick/6809):00235                  lsrb                   divide by 2
00F7 2623             (/home/strick/6809):00236                  bne   L0110            branch if not zero
00F9 6963             (/home/strick/6809):00237                  rol   $03,s            multiply 2,s * 2
00FB 6962             (/home/strick/6809):00238                  rol   $02,s
00FD 2530             (/home/strick/6809):00239                  bcs   L0123            branch if carry set
00FF 6C61             (/home/strick/6809):00240                  inc   $01,s
0101 20ED             (/home/strick/6809):00241                  bra   L00E4            get next char
                      (/home/strick/6809):00242         
                      (/home/strick/6809):00243         * Clear 4 bytes on stack
                      (/home/strick/6809):00244         * Exit:
                      (/home/strick/6809):00245         *   A,B = 0
     0103             (/home/strick/6809):00246         Clr4     equ   *
                      (/home/strick/6809):00247                  IFNE  H6309
                      (/home/strick/6809):00248                  clrd  
                      (/home/strick/6809):00249                  ELSE
0103 4F               (/home/strick/6809):00250                  clra  
0104 5F               (/home/strick/6809):00251                  clrb  
                      (/home/strick/6809):00252                  ENDC
0105 ED62             (/home/strick/6809):00253                  std   $02,s
0107 ED64             (/home/strick/6809):00254                  std   $04,s
0109 39               (/home/strick/6809):00255                  rts   
                      (/home/strick/6809):00256         
                      (/home/strick/6809):00257         * ASCII to Integer
                      (/home/strick/6809):00258         * Entry:
                      (/home/strick/6809):00259         *   X = address where byte is
                      (/home/strick/6809):00260         * Exit:
                      (/home/strick/6809):00261         *   X = address + 1
                      (/home/strick/6809):00262         *   Carry = clear: B = integer
                      (/home/strick/6809):00263         *   Carry = set: B = ASCII char value
010A E680             (/home/strick/6809):00264         AtoInt   ldb   ,x+              get char at X
010C C130             (/home/strick/6809):00265                  cmpb  #'0              zero?
010E 2504             (/home/strick/6809):00266                  bcs   L0108            branch if lower
0110 C139             (/home/strick/6809):00267                  cmpb  #'9              9?
0112 2303             (/home/strick/6809):00268                  bls   L010B            branch if lower/same
0114 1A01             (/home/strick/6809):00269         L0108    orcc  #Carry           else set carry
0116 39               (/home/strick/6809):00270                  rts                    and return
0117 C030             (/home/strick/6809):00271         L010B    subb  #'0              get real value
0119 1CFE             (/home/strick/6809):00272                  andcc #^Carry          clear carry
011B 39               (/home/strick/6809):00273                  rts                    return
                      (/home/strick/6809):00274         
011C 301F             (/home/strick/6809):00275         L0110    leax  -$01,x           back up X by 1
011E 6D61             (/home/strick/6809):00276                  tst   $01,s
0120 2706             (/home/strick/6809):00277                  beq   L011C
0122 EC62             (/home/strick/6809):00278                  ldd   $02,s
0124 1CFE             (/home/strick/6809):00279                  andcc #^Carry
0126 2004             (/home/strick/6809):00280                  bra   L0120
0128 1A04             (/home/strick/6809):00281         L011C    orcc  #Zero
012A 1A01             (/home/strick/6809):00282         L011E    orcc  #Carry
012C 3264             (/home/strick/6809):00283         L0120    leas  $04,s
012E 39               (/home/strick/6809):00284                  rts   
012F 1CFB             (/home/strick/6809):00285         L0123    andcc #^Zero
0131 20F7             (/home/strick/6809):00286                  bra   L011E
                      (/home/strick/6809):00287         
                      (/home/strick/6809):00288         * Eat spaces
0133 A680             (/home/strick/6809):00289         EatSpace lda   ,x+
0135 8120             (/home/strick/6809):00290                  cmpa  #C$SPAC
0137 27FA             (/home/strick/6809):00291                  beq   EatSpace
0139 301F             (/home/strick/6809):00292                  leax  -$01,x
013B 39               (/home/strick/6809):00293                  rts   
                      (/home/strick/6809):00294         
                      (/home/strick/6809):00295         * Multiply B,X * A
013C 3416             (/home/strick/6809):00296         MulAxBX  pshs  x,b,a
013E A663             (/home/strick/6809):00297                  lda   $03,s                    get bits 7-0 of X
0140 3D               (/home/strick/6809):00298                  mul                            multiply * b
0141 3406             (/home/strick/6809):00299                  pshs  b,a                      store product on stack
0143 A662             (/home/strick/6809):00300                  lda   $02,s                    get A on stack
0145 E664             (/home/strick/6809):00301                  ldb   $04,s                    and bits 15-8 of X
0147 3D               (/home/strick/6809):00302                  mul                            multiply
0148 3406             (/home/strick/6809):00303                  pshs  b,a                      store product
014A A664             (/home/strick/6809):00304                  lda   $04,s                    get A on stack
014C E667             (/home/strick/6809):00305                  ldb   $07,s                    and bits 7-0 of X
014E 8D13             (/home/strick/6809):00306                  bsr   L0157
0150 A665             (/home/strick/6809):00307                  lda   $05,s
0152 E666             (/home/strick/6809):00308                  ldb   $06,s
0154 8D0D             (/home/strick/6809):00309                  bsr   L0157
0156 1CFE             (/home/strick/6809):00310                  andcc #^Carry
0158 EC62             (/home/strick/6809):00311                  ldd   $02,s
015A AEE4             (/home/strick/6809):00312                  ldx   ,s
015C 2702             (/home/strick/6809):00313                  beq   L0154
015E 1A01             (/home/strick/6809):00314                  orcc  #Carry
0160 3268             (/home/strick/6809):00315         L0154    leas  $08,s
0162 39               (/home/strick/6809):00316                  rts   
0163 3D               (/home/strick/6809):00317         L0157    mul   
0164 E363             (/home/strick/6809):00318                  addd  $03,s
0166 ED63             (/home/strick/6809):00319                  std   $03,s
0168 2402             (/home/strick/6809):00320                  bcc   L0160
016A 6C62             (/home/strick/6809):00321                  inc   $02,s
016C 39               (/home/strick/6809):00322         L0160    rts   
016D 3436             (/home/strick/6809):00323         L0161    pshs  y,x,b,a
016F ECE4             (/home/strick/6809):00324                  ldd   ,s
0171 2604             (/home/strick/6809):00325                  bne   L016B
0173 1A01             (/home/strick/6809):00326                  orcc  #Carry
0175 2020             (/home/strick/6809):00327                  bra   L018B
0177 CC0010           (/home/strick/6809):00328         L016B    ldd   #$0010
017A E764             (/home/strick/6809):00329                  stb   $04,s
017C 5F               (/home/strick/6809):00330                  clrb  
017D 6863             (/home/strick/6809):00331         L0171    lsl   $03,s
017F 6962             (/home/strick/6809):00332                  rol   $02,s
0181 59               (/home/strick/6809):00333                  rolb  
0182 49               (/home/strick/6809):00334                  rola  
0183 A3E4             (/home/strick/6809):00335                  subd  ,s
0185 2B04             (/home/strick/6809):00336                  bmi   L017F
0187 6C63             (/home/strick/6809):00337                  inc   $03,s
0189 2002             (/home/strick/6809):00338                  bra   L0181
018B E3E4             (/home/strick/6809):00339         L017F    addd  ,s
018D 6A64             (/home/strick/6809):00340         L0181    dec   $04,s
018F 26EC             (/home/strick/6809):00341                  bne   L0171
0191 1F01             (/home/strick/6809):00342                  tfr   d,x
0193 EC62             (/home/strick/6809):00343                  ldd   $02,s
0195 1CFE             (/home/strick/6809):00344                  andcc #^Carry
0197 3266             (/home/strick/6809):00345         L018B    leas  $06,s
0199 39               (/home/strick/6809):00346                  rts   
                      (/home/strick/6809):00347         
                      (/home/strick/6809):00348         * Copy from Y to X until byte zero is encountered
019A A780             (/home/strick/6809):00349         l@       sta   ,x+
019C A6A0             (/home/strick/6809):00350         CopyY2X  lda   ,y+
019E 26FA             (/home/strick/6809):00351                  bne   l@
01A0 39               (/home/strick/6809):00352                  rts   
                      (/home/strick/6809):00353         
01A1 3460             (/home/strick/6809):00354         L0195    pshs  u,y
01A3 1F43             (/home/strick/6809):00355                  tfr   s,u
01A5 8D0C             (/home/strick/6809):00356                  bsr   L01A7
01A7 1CFE             (/home/strick/6809):00357                  andcc #^Carry
01A9 35E0             (/home/strick/6809):00358                  puls  pc,u,y
                      (/home/strick/6809):00359         
01AB 1F34             (/home/strick/6809):00360         L019F    tfr   u,s
01AD 1A01             (/home/strick/6809):00361                  orcc  #Carry
01AF 35E0             (/home/strick/6809):00362                  puls  pc,u,y
                      (/home/strick/6809):00363         
01B1 3001             (/home/strick/6809):00364         L01A5    leax  $01,x
01B3 8D20             (/home/strick/6809):00365         L01A7    bsr   L01C9
01B5 3406             (/home/strick/6809):00366                  pshs  b,a
01B7 8D70             (/home/strick/6809):00367         L01AB    bsr   L021D
01B9 812D             (/home/strick/6809):00368                  cmpa  #'-              subtract?
01BB 2608             (/home/strick/6809):00369                  bne   L01B9
01BD 8D14             (/home/strick/6809):00370                  bsr   L01C7
01BF 40               (/home/strick/6809):00371                  nega  
01C0 50               (/home/strick/6809):00372                  negb  
01C1 8200             (/home/strick/6809):00373                  sbca  #$00
01C3 2006             (/home/strick/6809):00374                  bra   L01BF
01C5 812B             (/home/strick/6809):00375         L01B9    cmpa  #'+              add?
01C7 2608             (/home/strick/6809):00376                  bne   L01C5
01C9 8D08             (/home/strick/6809):00377                  bsr   L01C7
01CB E3E4             (/home/strick/6809):00378         L01BF    addd  ,s
01CD EDE4             (/home/strick/6809):00379                  std   ,s
01CF 20E6             (/home/strick/6809):00380                  bra   L01AB
01D1 3586             (/home/strick/6809):00381         L01C5    puls  pc,b,a
01D3 3001             (/home/strick/6809):00382         L01C7    leax  $01,x
01D5 8D32             (/home/strick/6809):00383         L01C9    bsr   L01FD
01D7 3406             (/home/strick/6809):00384                  pshs  b,a
01D9 8D4E             (/home/strick/6809):00385         L01CD    bsr   L021D
01DB 812A             (/home/strick/6809):00386                  cmpa  #'*              multiply?
01DD 260F             (/home/strick/6809):00387                  bne   L01E2
01DF 8D26             (/home/strick/6809):00388                  bsr   L01FB
01E1 3410             (/home/strick/6809):00389                  pshs  x
01E3 AE62             (/home/strick/6809):00390                  ldx   $02,s
01E5 17FF54           (/home/strick/6809):00391                  lbsr  MulAxBX
01E8 2417             (/home/strick/6809):00392                  bcc   L01F5
01EA C602             (/home/strick/6809):00393                  ldb   #E$MulOvf
01EC 20BD             (/home/strick/6809):00394                  bra   L019F
01EE 812F             (/home/strick/6809):00395         L01E2    cmpa  #'/              divide?
01F0 26DF             (/home/strick/6809):00396                  bne   L01C5
01F2 8D13             (/home/strick/6809):00397                  bsr   L01FB
01F4 3410             (/home/strick/6809):00398                  pshs  x
01F6 AE62             (/home/strick/6809):00399                  ldx   $02,s
01F8 17FF72           (/home/strick/6809):00400                  lbsr  L0161
01FB 2404             (/home/strick/6809):00401                  bcc   L01F5
01FD C601             (/home/strick/6809):00402                  ldb   #E$ZerDiv
01FF 20AA             (/home/strick/6809):00403                  bra   L019F
0201 3510             (/home/strick/6809):00404         L01F5    puls  x
0203 EDE4             (/home/strick/6809):00405                  std   ,s
0205 20D2             (/home/strick/6809):00406                  bra   L01CD
0207 3001             (/home/strick/6809):00407         L01FB    leax  $01,x
0209 8D23             (/home/strick/6809):00408         L01FD    bsr   L0222
020B 3406             (/home/strick/6809):00409                  pshs  b,a
020D 8D1A             (/home/strick/6809):00410         L0201    bsr   L021D
020F 8126             (/home/strick/6809):00411                  cmpa  #'&              logical and?
0211 2608             (/home/strick/6809):00412                  bne   L020F
0213 8D17             (/home/strick/6809):00413                  bsr   L0220
0215 E461             (/home/strick/6809):00414                  andb  $01,s
0217 A4E4             (/home/strick/6809):00415                  anda  ,s
0219 200A             (/home/strick/6809):00416                  bra   L0219
021B 8121             (/home/strick/6809):00417         L020F    cmpa  #'!              logical or?
021D 26B2             (/home/strick/6809):00418                  bne   L01C5
021F 8D0B             (/home/strick/6809):00419                  bsr   L0220
0221 EA61             (/home/strick/6809):00420                  orb   $01,s
0223 AAE4             (/home/strick/6809):00421                  ora   ,s
0225 EDE4             (/home/strick/6809):00422         L0219    std   ,s
0227 20E4             (/home/strick/6809):00423                  bra   L0201
0229 16FF07           (/home/strick/6809):00424         L021D    lbra  EatSpace
022C 3001             (/home/strick/6809):00425         L0220    leax  $01,x
022E 8DF9             (/home/strick/6809):00426         L0222    bsr   L021D
0230 815E             (/home/strick/6809):00427                  cmpa  #'^              logical not?
0232 2606             (/home/strick/6809):00428                  bne   L022E
0234 8D0F             (/home/strick/6809):00429                  bsr   ParsExp
0236 53               (/home/strick/6809):00430                  comb                   not B
0237 43               (/home/strick/6809):00431                  coma                   not A
0238 200A             (/home/strick/6809):00432                  bra   L0238
023A 812D             (/home/strick/6809):00433         L022E    cmpa  #'-              negate?
023C 2609             (/home/strick/6809):00434                  bne   L023B
023E 8D05             (/home/strick/6809):00435                  bsr   ParsExp
0240 40               (/home/strick/6809):00436                  nega  
0241 50               (/home/strick/6809):00437                  negb  
0242 8200             (/home/strick/6809):00438                  sbca  #$00
0244 39               (/home/strick/6809):00439         L0238    rts   
                      (/home/strick/6809):00440         
0245 3001             (/home/strick/6809):00441         ParsExp  leax  $01,x
0247 8DE0             (/home/strick/6809):00442         L023B    bsr   L021D
0249 8128             (/home/strick/6809):00443                  cmpa  #'(              open paren?
024B 260F             (/home/strick/6809):00444                  bne   L0250
024D 17FF61           (/home/strick/6809):00445                  lbsr  L01A5
0250 3406             (/home/strick/6809):00446                  pshs  b,a
0252 8DD5             (/home/strick/6809):00447                  bsr   L021D
0254 8129             (/home/strick/6809):00448                  cmpa  #')              close paren?
0256 2736             (/home/strick/6809):00449                  beq   L0282
0258 C604             (/home/strick/6809):00450                  ldb   #E$RParen
025A 2015             (/home/strick/6809):00451                  bra   L0265
025C 815B             (/home/strick/6809):00452         L0250    cmpa  #'[
025E 2616             (/home/strick/6809):00453                  bne   L026A
0260 17FF4E           (/home/strick/6809):00454                  lbsr  L01A5
0263 1F02             (/home/strick/6809):00455                  tfr   d,y
0265 ECA4             (/home/strick/6809):00456                  ldd   ,y
0267 3406             (/home/strick/6809):00457                  pshs  b,a
0269 8DBE             (/home/strick/6809):00458                  bsr   L021D
026B 815D             (/home/strick/6809):00459                  cmpa  #']
026D 271F             (/home/strick/6809):00460                  beq   L0282
026F C605             (/home/strick/6809):00461                  ldb   #E$RBrckt
0271 3262             (/home/strick/6809):00462         L0265    leas  $02,s
0273 16FF35           (/home/strick/6809):00463         L0267    lbra  L019F
0276 813C             (/home/strick/6809):00464         L026A    cmpa  #'<
0278 2618             (/home/strick/6809):00465                  bne   L0286
027A 17FF34           (/home/strick/6809):00466                  lbsr  L01A5
027D 1F02             (/home/strick/6809):00467                  tfr   d,y
027F 4F               (/home/strick/6809):00468                  clra  
0280 E6A4             (/home/strick/6809):00469                  ldb   ,y
0282 3406             (/home/strick/6809):00470                  pshs  b,a
0284 8DA3             (/home/strick/6809):00471                  bsr   L021D
0286 813E             (/home/strick/6809):00472                  cmpa  #'>
0288 2704             (/home/strick/6809):00473                  beq   L0282
028A C606             (/home/strick/6809):00474                  ldb   #E$RABrkt
028C 20E3             (/home/strick/6809):00475                  bra   L0265
028E 3001             (/home/strick/6809):00476         L0282    leax  $01,x
0290 3586             (/home/strick/6809):00477                  puls  pc,b,a
                      (/home/strick/6809):00478         
0292 812E             (/home/strick/6809):00479         L0286    cmpa  #C$PERD
0294 2605             (/home/strick/6809):00480                  bne   L028F
0296 DC00             (/home/strick/6809):00481                  ldd   <curraddr
0298 3001             (/home/strick/6809):00482                  leax  $01,x
029A 39               (/home/strick/6809):00483                  rts   
                      (/home/strick/6809):00484         
029B 8127             (/home/strick/6809):00485         L028F    cmpa  #''              ASCII byte?
029D 2604             (/home/strick/6809):00486                  bne   L0297
029F EC81             (/home/strick/6809):00487                  ldd   ,x++
02A1 4F               (/home/strick/6809):00488                  clra  
02A2 39               (/home/strick/6809):00489                  rts   
                      (/home/strick/6809):00490         
02A3 8122             (/home/strick/6809):00491         L0297    cmpa  #'"              ASCII word?
02A5 2605             (/home/strick/6809):00492                  bne   L02A0
02A7 3001             (/home/strick/6809):00493                  leax  $01,x            point past quote char
02A9 EC81             (/home/strick/6809):00494                  ldd   ,x++
02AB 39               (/home/strick/6809):00495                  rts   
                      (/home/strick/6809):00496         
02AC 813A             (/home/strick/6809):00497         L02A0    cmpa  #':
02AE 2610             (/home/strick/6809):00498                  bne   L02B4
02B0 3001             (/home/strick/6809):00499                  leax  $01,x
02B2 8D1B             (/home/strick/6809):00500                  bsr   GetReg           get register that follows :
02B4 25BD             (/home/strick/6809):00501                  bcs   L0267            branch if error
02B6 4D               (/home/strick/6809):00502                  tsta                   is this byte or word register?
02B7 2B04             (/home/strick/6809):00503                  bmi   L02B1            branch if word
02B9 4F               (/home/strick/6809):00504                  clra                   else clear hi byte
02BA E6A4             (/home/strick/6809):00505                  ldb   ,y               and get byte at offset
02BC 39               (/home/strick/6809):00506                  rts   
02BD ECA4             (/home/strick/6809):00507         L02B1    ldd   ,y               get word at offset
02BF 39               (/home/strick/6809):00508         L02B3    rts                    return
                      (/home/strick/6809):00509         
02C0 17FDB8           (/home/strick/6809):00510         L02B4    lbsr  EvalSpec         evaluate number specifier
02C3 24FA             (/home/strick/6809):00511                  bcc   L02B3
02C5 2704             (/home/strick/6809):00512                  beq   L02BF
02C7 C603             (/home/strick/6809):00513                  ldb   #E$OpMsng
02C9 20A8             (/home/strick/6809):00514                  bra   L0267
02CB C600             (/home/strick/6809):00515         L02BF    ldb   #E$BadCnt
02CD 20A4             (/home/strick/6809):00516                  bra   L0267
                      (/home/strick/6809):00517         
                      (/home/strick/6809):00518         * Parse individual register
                      (/home/strick/6809):00519         * Entry:
                      (/home/strick/6809):00520         *   X = address of register to find
                      (/home/strick/6809):00521         * Exit:
                      (/home/strick/6809):00522         *   A = register offset value in table
                      (/home/strick/6809):00523         *   Y = ptr to register offset in stack
02CF C609             (/home/strick/6809):00524         GetReg   ldb   #RegEnts         get number of register entries
02D1 3404             (/home/strick/6809):00525                  pshs  b
02D3 EC84             (/home/strick/6809):00526                  ldd   ,x               get first two chars in D
02D5 10837370         (/home/strick/6809):00527                  cmpd  #$7370           sp?
02D9 2706             (/home/strick/6809):00528                  beq   L02D5            branch if so
02DB 10835350         (/home/strick/6809):00529                  cmpd  #$5350           SP?
02DF 260D             (/home/strick/6809):00530                  bne   L02E2            branch if not
02E1 3002             (/home/strick/6809):00531         L02D5    leax  $02,x            move past two chars
02E3 CC0002           (/home/strick/6809):00532                  ldd   #$0002
02E6 1FB8             (/home/strick/6809):00533                  tfr   dp,a
02E8 1F02             (/home/strick/6809):00534                  tfr   d,y
02EA 8680             (/home/strick/6809):00535                  lda   #$80
02EC 2032             (/home/strick/6809):00536                  bra   L0314
02EE 318D003C         (/home/strick/6809):00537         L02E2    leay  >RegList,pcr
02F2 A6A4             (/home/strick/6809):00538         L02E6    lda   ,y               get first char of register entry
02F4 E621             (/home/strick/6809):00539                  ldb   $01,y            get second char of register entry
02F6 260C             (/home/strick/6809):00540                  bne   L02F8            branch if two chars
02F8 A184             (/home/strick/6809):00541                  cmpa  ,x               same as user input?
02FA 2717             (/home/strick/6809):00542                  beq   L0307            yes, a match
02FC 8B20             (/home/strick/6809):00543                  adda  #$20             make lowercase
02FE A184             (/home/strick/6809):00544                  cmpa  ,x               same as user input?
0300 2711             (/home/strick/6809):00545                  beq   L0307            yes, a match
0302 2020             (/home/strick/6809):00546                  bra   L0318
0304 10A384           (/home/strick/6809):00547         L02F8    cmpd  ,x               same as user input?
0307 2708             (/home/strick/6809):00548                  beq   L0305            yes, a match
0309 C32020           (/home/strick/6809):00549                  addd  #$2020           make uppercase
030C 10A384           (/home/strick/6809):00550                  cmpd  ,x               same as user input?
030F 2613             (/home/strick/6809):00551                  bne   L0318            branch if not
0311 3001             (/home/strick/6809):00552         L0305    leax  $01,x            point X to next char
0313 3001             (/home/strick/6809):00553         L0307    leax  $01,x            point X to next char
0315 A622             (/home/strick/6809):00554                  lda   $02,y            get offset
0317 1F89             (/home/strick/6809):00555                  tfr   a,b              transfer to B
0319 C40F             (/home/strick/6809):00556                  andb  #$0F             mask off hi nibble
031B 109E02           (/home/strick/6809):00557                  ldy   <regstack        get stack in Y
031E 31A5             (/home/strick/6809):00558                  leay  b,y              move Y to offset in stack
0320 1CFE             (/home/strick/6809):00559         L0314    andcc #^Carry          clear carry
0322 3584             (/home/strick/6809):00560                  puls  pc,b             return
                      (/home/strick/6809):00561         
0324 3123             (/home/strick/6809):00562         L0318    leay  $03,y
0326 6AE4             (/home/strick/6809):00563                  dec   ,s
0328 26C8             (/home/strick/6809):00564                  bne   L02E6
032A 1A01             (/home/strick/6809):00565                  orcc  #Carry
032C 3584             (/home/strick/6809):00566                  puls  pc,b
                      (/home/strick/6809):00567         
                      (/home/strick/6809):00568         * Register list for 6809/6309
032E 4343             (/home/strick/6809):00569         RegList  fcc   "CC"
0330 00               (/home/strick/6809):00570                  fcb   R$CC
0331 4450             (/home/strick/6809):00571                  fcc   "DP"
0333 03               (/home/strick/6809):00572                  fcb   R$DP
0334 5043             (/home/strick/6809):00573                  fcc   "PC"
0336 8A               (/home/strick/6809):00574                  fcb   $80+R$PC
0337 41               (/home/strick/6809):00575                  fcc   "A"
0338 0001             (/home/strick/6809):00576                  fcb   $00,R$A
033A 42               (/home/strick/6809):00577                  fcc   "B"
033B 0002             (/home/strick/6809):00578                  fcb   $00,R$B
033D 44               (/home/strick/6809):00579                  fcc   "D"
033E 0081             (/home/strick/6809):00580                  fcb   $00,$80+R$A
                      (/home/strick/6809):00581                  IFNE  H6309
                      (/home/strick/6809):00582                  fcc   "E"
                      (/home/strick/6809):00583                  fcb   $00,R$E
                      (/home/strick/6809):00584                  fcc   "F"
                      (/home/strick/6809):00585                  fcb   $00,R$F
                      (/home/strick/6809):00586                  fcc   "W"
                      (/home/strick/6809):00587                  fcb   $00,$80+R$E
                      (/home/strick/6809):00588                  ENDC
0340 58               (/home/strick/6809):00589                  fcc   "X"
0341 0084             (/home/strick/6809):00590                  fcb   $00,$80+R$X
0343 59               (/home/strick/6809):00591                  fcc   "Y"
0344 0086             (/home/strick/6809):00592                  fcb   $00,$80+R$Y
0346 55               (/home/strick/6809):00593                  fcc   "U"
0347 0088             (/home/strick/6809):00594                  fcb   $00,$80+R$U
     0009             (/home/strick/6809):00595         RegEnts  equ   (*-RegList)/3
                      (/home/strick/6809):00596         
0349                  (/home/strick/6809):00597         start    
                      (/home/strick/6809):00598                  IFEQ  SYSDEBUG-1
                      (/home/strick/6809):00599                  lbsr  Init
                      (/home/strick/6809):00600                  ENDC
0349 32C90200         (/home/strick/6809):00601                  leas  >size,u          point S to end of memory
034D 3274             (/home/strick/6809):00602                  leas  -R$Size,s        back off size of register stack
034F 10DF02           (/home/strick/6809):00603                  sts   <regstack        save off
0352 10DF04           (/home/strick/6809):00604                  sts   <u0004
0355 318D0593         (/home/strick/6809):00605                  leay  >DefBrk,pcr
0359 10AF6A           (/home/strick/6809):00606                  sty   R$PC,s
035C 8680             (/home/strick/6809):00607                  lda   #Entire
035E A7E4             (/home/strick/6809):00608                  sta   R$CC,s
0360 1F41             (/home/strick/6809):00609                  tfr   s,x              X = size-R$Size
0362 3089FEBB         (/home/strick/6809):00610                  leax  >-BuffSiz,x      back off appropriate byte count
0366 9F06             (/home/strick/6809):00611                  stx   <buffptr         and save off ptr for line buffer
0368 3088B0           (/home/strick/6809):00612                  leax  <-UnknSiz,x      back off more
036B 9F08             (/home/strick/6809):00613                  stx   <u0008
036D 3088DC           (/home/strick/6809):00614                  leax  <-NumBrkPt*3,x
0370 9F0C             (/home/strick/6809):00615                  stx   <bptable         save pointer to breakpoint table
0372 0F00             (/home/strick/6809):00616                  clr   <curraddr
0374 0F01             (/home/strick/6809):00617                  clr   <curraddr+1
0376 0F0E             (/home/strick/6809):00618                  clr   <isnarrow
                      (/home/strick/6809):00619                  IFEQ  SYSDEBUG
0378 3436             (/home/strick/6809):00620                  pshs  y,x,b,a
037A 8601             (/home/strick/6809):00621                  lda   #$01             stdout
037C C626             (/home/strick/6809):00622                  ldb   #SS.ScSiz        get screen size
037E 103F8D           (/home/strick/6809):00623                  os9   I$GetStt         do it!
0381 2409             (/home/strick/6809):00624                  bcc   L0380
0383 C1D0             (/home/strick/6809):00625                  cmpb  #E$UnkSvc
0385 270C             (/home/strick/6809):00626                  beq   L0387
0387 3536             (/home/strick/6809):00627                  puls  x,y,b,a
0389 160531           (/home/strick/6809):00628                  lbra  L0735
038C 8C0033           (/home/strick/6809):00629         L0380    cmpx  #51              51 columns?
038F 2C02             (/home/strick/6809):00630                  bge   L0387            branch if so
0391 0C0E             (/home/strick/6809):00631                  inc   <isnarrow
0393 3536             (/home/strick/6809):00632         L0387    puls  x,y,b,a
                      (/home/strick/6809):00633                  ENDC
                      (/home/strick/6809):00634         
                      (/home/strick/6809):00635         * Clear breakpoint table
0395 6F80             (/home/strick/6809):00636         L036A    clr   ,x+
0397 9C06             (/home/strick/6809):00637                  cmpx  <buffptr
0399 25FA             (/home/strick/6809):00638                  bcs   L036A
039B 308D043C         (/home/strick/6809):00639                  leax  >IcptRtn,pcr
039F 8601             (/home/strick/6809):00640                  lda   #$01             SSWI Vector 1
03A1 103F0E           (/home/strick/6809):00641                  os9   F$SSWi           set software interrupt routine
03A4 103F09           (/home/strick/6809):00642                  os9   F$Icpt           set intercept routine
03A7 1705BE           (/home/strick/6809):00643                  lbsr  WritCR           write carriage return
03AA 9E06             (/home/strick/6809):00644                  ldx   <buffptr
03AC 318D053D         (/home/strick/6809):00645                  leay  >Title,pcr       point to title
                      (/home/strick/6809):00646         *         bsr  L03C2            print it
03B0 17FDE9           (/home/strick/6809):00647                  lbsr  CopyY2X          print it
03B3 1705B4           (/home/strick/6809):00648                  lbsr  WritLnOut
                      (/home/strick/6809):00649         
                      (/home/strick/6809):00650         * Show prompt and get input from standard input to process
03B6 318D0548         (/home/strick/6809):00651         GetInput leay  >Prompt,pcr      point to prompt
03BA 1705C0           (/home/strick/6809):00652                  lbsr  PrintY           print it
03BD 1705D8           (/home/strick/6809):00653                  lbsr  ReadLine         read line from std input
03C0 318D0570         (/home/strick/6809):00654                  leay  >CmdTbl,pcr      point to command table
03C4 A684             (/home/strick/6809):00655                  lda   ,x               get character from read buffer
03C6 8161             (/home/strick/6809):00656                  cmpa  #'a              compare against lowercase a
03C8 2504             (/home/strick/6809):00657                  bcs   L03A2            branch if lower
03CA 8020             (/home/strick/6809):00658                  suba  #$20             make uppercase
03CC A784             (/home/strick/6809):00659                  sta   ,x               and save
03CE 3123             (/home/strick/6809):00660         L03A2    leay  $03,y            walk through table
03D0 A6A4             (/home/strick/6809):00661                  lda   ,y               get char to compare against in A
03D2 2710             (/home/strick/6809):00662                  beq   SyntxErr         branch if done
03D4 A184             (/home/strick/6809):00663                  cmpa  ,x               same?
03D6 26F6             (/home/strick/6809):00664                  bne   L03A2            if not, get next
                      (/home/strick/6809):00665         * Here we have a command match, dispatch it
03D8 3001             (/home/strick/6809):00666                  leax  $01,x            move past char
03DA EC21             (/home/strick/6809):00667                  ldd   $01,y            get handle address
03DC 338DFC20         (/home/strick/6809):00668                  leau  >L0000,pcr       point to start of module
03E0 ADCB             (/home/strick/6809):00669                  jsr   d,u              and branch to subroutine
03E2 20D2             (/home/strick/6809):00670                  bra   GetInput
                      (/home/strick/6809):00671         
                      (/home/strick/6809):00672         * Command wasn't recognized
03E4 C609             (/home/strick/6809):00673         SyntxErr ldb   #E$CmdErr
03E6 8D02             (/home/strick/6809):00674                  bsr   ShowErr
03E8 20CC             (/home/strick/6809):00675                  bra   GetInput
                      (/home/strick/6809):00676         
03EA                  (/home/strick/6809):00677         ShowErr  
03EA C10D             (/home/strick/6809):00678                  cmpb   #E$BadSWI
03EC 2210             (/home/strick/6809):00679                  bhi    ShowErrNum
                      (/home/strick/6809):00680                  
03EE 318C11           (/home/strick/6809):00681                  leay   ETable,pcr       point to error string table
03F1 58               (/home/strick/6809):00682                  lslb                    multiply index by 2
03F2 ECA5             (/home/strick/6809):00683                  ldd    b,y              and get address in X
03F4 31AB             (/home/strick/6809):00684                  leay   d,y
03F6 9E06             (/home/strick/6809):00685                  ldx    <buffptr
03F8 17FDA1           (/home/strick/6809):00686                  lbsr   CopyY2X
03FB 160570           (/home/strick/6809):00687                  lbra   WritLnErr
                      (/home/strick/6809):00688         
03FE                  (/home/strick/6809):00689         ShowErrNum
                      (/home/strick/6809):00690                  IFEQ   SYSDEBUG
03FE 103F0F           (/home/strick/6809):00691                  os9    F$PErr   
0401 39               (/home/strick/6809):00692                  rts   
                      (/home/strick/6809):00693                  ELSE
                      (/home/strick/6809):00694                  pshs   b
                      (/home/strick/6809):00695                  leay   ErrMsg,pcr
                      (/home/strick/6809):00696                  ldx    <buffptr
                      (/home/strick/6809):00697                  lbsr   CopyY2X
                      (/home/strick/6809):00698                  puls   b
                      (/home/strick/6809):00699                  lbsr   Word2Dec3
                      (/home/strick/6809):00700                  lbra   WritLnErr
                      (/home/strick/6809):00701         
0402                  (/home/strick/6809):00702         ErrMsg   fcc    /ERROR #/
                      (/home/strick/6809):00703                  fcb    0
                      (/home/strick/6809):00704                  ENDC
                      (/home/strick/6809):00705         
0402 001C             (/home/strick/6809):00706         ETable   fdb   E0-ETable
0404 002D             (/home/strick/6809):00707                  fdb   E1-ETable
0406 003C             (/home/strick/6809):00708                  fdb   E2-ETable
0408 004E             (/home/strick/6809):00709                  fdb   E3-ETable
040A 005E             (/home/strick/6809):00710                  fdb   E4-ETable
040C 0068             (/home/strick/6809):00711                  fdb   E5-ETable
040E 0072             (/home/strick/6809):00712                  fdb   E6-ETable
0410 007C             (/home/strick/6809):00713                  fdb   E7-ETable
0412 008D             (/home/strick/6809):00714                  fdb   E8-ETable
0414 009B             (/home/strick/6809):00715                  fdb   E9-ETable
0416 00AB             (/home/strick/6809):00716                  fdb   E10-ETable
0418 00B6             (/home/strick/6809):00717                  fdb   E11-ETable
041A 00CC             (/home/strick/6809):00718                  fdb   E12-ETable
041C 00E1             (/home/strick/6809):00719                  fdb   E13-ETable
                      (/home/strick/6809):00720         
041E 496C6C6567616C20 (/home/strick/6809):00721         E0       fcc   "Illegal constant"
     636F6E7374616E74
042E 00               (/home/strick/6809):00722                  fcb   0
042F 4469766964652062 (/home/strick/6809):00723         E1       fcc   "Divide by zero" 
     79207A65726F
043D 00               (/home/strick/6809):00724                  fcb   0
043E 4D756C7469706C79 (/home/strick/6809):00725         E2       fcc   "Multiply overflow"
     206F766572666C6F
     77
044F 00               (/home/strick/6809):00726                  fcb   0
0450 496C6C6567616C20 (/home/strick/6809):00727         E3       fcc   "Illegal operand"
     6F706572616E64
045F 00               (/home/strick/6809):00728                  fcb   0
0460 29206D697373696E (/home/strick/6809):00729         E4       fcc   ") missing"
     67
0469 00               (/home/strick/6809):00730                  fcb   0
046A 7D206D697373696E (/home/strick/6809):00731         E5       fcc   "} missing"
     67
0473 00               (/home/strick/6809):00732                  fcb   0
0474 5D206D697373696E (/home/strick/6809):00733         E6       fcc   "] missing"
     67
047D 00               (/home/strick/6809):00734                  fcb   0
047E 496C6C6567616C20 (/home/strick/6809):00735         E7       fcc   "Illegal register"
     7265676973746572
048E 00               (/home/strick/6809):00736                  fcb   0
048F 42797465206F7665 (/home/strick/6809):00737         E8       fcc   "Byte overflow"
     72666C6F77
049C 00               (/home/strick/6809):00738                  fcb   0
049D 496C6C6567616C20 (/home/strick/6809):00739         E9       fcc   "Illegal command"
     636F6D6D616E64
04AC 00               (/home/strick/6809):00740                  fcb   0
04AD 524F4D204D656D6F (/home/strick/6809):00741         E10      fcc   "ROM Memory"
     7279
04B7 00               (/home/strick/6809):00742                  fcb   0
04B8 427265616B706F69 (/home/strick/6809):00743         E11      fcc   "Breakpoint table full"
     6E74207461626C65
     2066756C6C
04CD 00               (/home/strick/6809):00744                  fcb   0
04CE 427265616B706F69 (/home/strick/6809):00745         E12      fcc   "Breakpoint not found"
     6E74206E6F742066
     6F756E64
04E2 00               (/home/strick/6809):00746                  fcb   0
04E3 496C6C6567616C20 (/home/strick/6809):00747         E13      fcc   "Illegal SWI"
     535749
04EE 00               (/home/strick/6809):00748                  fcb   0
                      (/home/strick/6809):00749         
                      (/home/strick/6809):00750         
                      (/home/strick/6809):00751         *L03C2    lbra  CopyY2X
                      (/home/strick/6809):00752         
                      (/home/strick/6809):00753         * Show byte at current memptr
04EF A684             (/home/strick/6809):00754         DotCmd   lda   ,x               get byte after cmd byte
04F1 812E             (/home/strick/6809):00755                  cmpa  #C$PERD          is it a period?
04F3 2604             (/home/strick/6809):00756                  bne   L03CF            branch if not
04F5 DC0A             (/home/strick/6809):00757                  ldd   <prevaddr        else get previous address
04F7 200F             (/home/strick/6809):00758                  bra   L03DC
04F9 810D             (/home/strick/6809):00759         L03CF    cmpa  #C$CR            cr?
04FB 2604             (/home/strick/6809):00760                  bne   L03D7            branch if not
04FD DC00             (/home/strick/6809):00761         L03D3    ldd   <curraddr
04FF 2007             (/home/strick/6809):00762                  bra   L03DC
0501 17FC9D           (/home/strick/6809):00763         L03D7    lbsr  L0195
0504 1025FEE2         (/home/strick/6809):00764                  lbcs  ShowErr
0508 9E00             (/home/strick/6809):00765         L03DC    ldx   <curraddr        get current memory loc
050A 9F0A             (/home/strick/6809):00766                  stx   <prevaddr        store in previous memory loc
050C DD00             (/home/strick/6809):00767                  std   <curraddr        and save D in new memory loc
050E 3406             (/home/strick/6809):00768                  pshs  b,a
0510 8D32             (/home/strick/6809):00769                  bsr   L0415
0512 ECE4             (/home/strick/6809):00770                  ldd   ,s
0514 17FAFC           (/home/strick/6809):00771                  lbsr  Word2HexSpc
0517 3520             (/home/strick/6809):00772                  puls  y
0519 E6A4             (/home/strick/6809):00773                  ldb   ,y
051B 17FB09           (/home/strick/6809):00774                  lbsr  Byte2Hex
051E 160449           (/home/strick/6809):00775                  lbra  WritLnOut
                      (/home/strick/6809):00776         
                      (/home/strick/6809):00777         * Show previous byte
0521 DC00             (/home/strick/6809):00778         PrevByte ldd   <curraddr        get current memory address
                      (/home/strick/6809):00779                  IFNE  H6309
                      (/home/strick/6809):00780                  decd
                      (/home/strick/6809):00781                  ELSE
0523 830001           (/home/strick/6809):00782                  subd  #$0001           subtract 1
                      (/home/strick/6809):00783                  ENDC
0526 20E0             (/home/strick/6809):00784                  bra   L03DC
                      (/home/strick/6809):00785         
                      (/home/strick/6809):00786         * Set byte at current location
0528 8D47             (/home/strick/6809):00787         SetLoc   bsr   L043F
052A 1025FEBC         (/home/strick/6809):00788                  lbcs  ShowErr
052E 9E00             (/home/strick/6809):00789                  ldx   <curraddr
0530 E784             (/home/strick/6809):00790                  stb   ,x               store byte at curraddr
0532 E184             (/home/strick/6809):00791                  cmpb  ,x               compare (in case it is ROM)
0534 2707             (/home/strick/6809):00792                  beq   NextByte         branch if equal
0536 C60A             (/home/strick/6809):00793                  ldb   #E$NotRAM        else load B with error
0538 17FEAF           (/home/strick/6809):00794                  lbsr  ShowErr          and show it
053B 20C0             (/home/strick/6809):00795                  bra   L03D3
                      (/home/strick/6809):00796         
                      (/home/strick/6809):00797         * Show next byte
053D DC00             (/home/strick/6809):00798         NextByte ldd   <curraddr        get current memory address
                      (/home/strick/6809):00799                  IFNE  H6309
                      (/home/strick/6809):00800                  incd
                      (/home/strick/6809):00801                  ELSE
053F C30001           (/home/strick/6809):00802                  addd  #$0001           add one to it
                      (/home/strick/6809):00803                  ENDC
0542 20C4             (/home/strick/6809):00804                  bra   L03DC
0544 9E06             (/home/strick/6809):00805         L0415    ldx   <buffptr         load X with buffer pointer
0546 3406             (/home/strick/6809):00806                  pshs  b,a
0548 318D03BB         (/home/strick/6809):00807                  leay  >Spaces,pcr      point to spaces
                      (/home/strick/6809):00808         *         bsr   L03C2
054C 17FC4D           (/home/strick/6809):00809                  lbsr   CopyY2X
054F 3586             (/home/strick/6809):00810                  puls  pc,b,a
                      (/home/strick/6809):00811         
                      (/home/strick/6809):00812         * Calc expression
0551 17FC4D           (/home/strick/6809):00813         Calc     lbsr  L0195
0554 1025FE92         (/home/strick/6809):00814                  lbcs  ShowErr
0558 8DEA             (/home/strick/6809):00815                  bsr   L0415
055A 3406             (/home/strick/6809):00816                  pshs  b,a
055C 8624             (/home/strick/6809):00817                  lda   #'$              hex prefix
055E A780             (/home/strick/6809):00818                  sta   ,x+
0560 A6E4             (/home/strick/6809):00819                  lda   ,s
0562 17FAAE           (/home/strick/6809):00820                  lbsr  Word2HexSpc
0565 8623             (/home/strick/6809):00821                  lda   #'#              decimal prefix
0567 A780             (/home/strick/6809):00822                  sta   ,x+
0569 3506             (/home/strick/6809):00823                  puls  b,a
056B 17FADE           (/home/strick/6809):00824                  lbsr  Word2Dec5
056E 1603F9           (/home/strick/6809):00825                  lbra  WritLnOut
0571 17FC2D           (/home/strick/6809):00826         L043F    lbsr  L0195
0574 2507             (/home/strick/6809):00827                  bcs   L044B
0576 4D               (/home/strick/6809):00828                  tsta  
0577 2704             (/home/strick/6809):00829                  beq   L044B
0579 C608             (/home/strick/6809):00830                  ldb   #E$BytOvf
057B 1A01             (/home/strick/6809):00831                  orcc  #Carry
057D 39               (/home/strick/6809):00832         L044B    rts   
                      (/home/strick/6809):00833         
                      (/home/strick/6809):00834         * Show all registers
057E 1700F1           (/home/strick/6809):00835         ShowRegs lbsr  L0512
0581 275E             (/home/strick/6809):00836                  beq   L04AF
0583 17FD49           (/home/strick/6809):00837                  lbsr  GetReg
0586 1025FE60         (/home/strick/6809):00838                  lbcs  ShowErr
058A 3422             (/home/strick/6809):00839                  pshs  y,a              save pointer to register and offset
058C 1700E3           (/home/strick/6809):00840                  lbsr  L0512
058F 2616             (/home/strick/6809):00841                  bne   L0475
0591 8DB1             (/home/strick/6809):00842                  bsr   L0415
0593 3522             (/home/strick/6809):00843                  puls  y,a              retreive pointer to register and offset
0595 4D               (/home/strick/6809):00844                  tsta                   test A
0596 2A07             (/home/strick/6809):00845                  bpl   L046D            branch if positive, means one byte3
0598 ECA4             (/home/strick/6809):00846                  ldd   ,y               load D with two bytes
059A 17FA84           (/home/strick/6809):00847                  lbsr  Word2Hex
059D 2005             (/home/strick/6809):00848                  bra   L0472
059F E6A4             (/home/strick/6809):00849         L046D    ldb   ,y               load B with one byte
05A1 17FA83           (/home/strick/6809):00850                  lbsr  Byte2Hex
05A4 1603C3           (/home/strick/6809):00851         L0472    lbra  WritLnOut
05A7 A6E0             (/home/strick/6809):00852         L0475    lda   ,s+
05A9 2A0C             (/home/strick/6809):00853                  bpl   L0485
05AB 17FBF3           (/home/strick/6809):00854                  lbsr  L0195
05AE 3520             (/home/strick/6809):00855                  puls  y
05B0 102500FA         (/home/strick/6809):00856                  lbcs  L054E
05B4 EDA4             (/home/strick/6809):00857                  std   ,y
05B6 39               (/home/strick/6809):00858                  rts   
05B7 8DB8             (/home/strick/6809):00859         L0485    bsr   L043F
05B9 3520             (/home/strick/6809):00860                  puls  y
05BB 102500EF         (/home/strick/6809):00861                  lbcs  L054E
05BF E7A4             (/home/strick/6809):00862                  stb   ,y
05C1 39               (/home/strick/6809):00863                  rts   
                      (/home/strick/6809):00864         
05C2 50433D           (/home/strick/6809):00865         ShrtHdr  fcc   "PC="
05C5 00               (/home/strick/6809):00866                  fcb   $00
05C6 413D             (/home/strick/6809):00867                  fcc   "A="
05C8 00               (/home/strick/6809):00868                  fcb   $00
05C9 423D             (/home/strick/6809):00869                  fcc   "B="
05CB 00               (/home/strick/6809):00870                  fcb   $00
                      (/home/strick/6809):00871                  IFNE  H6309
                      (/home/strick/6809):00872                  fcc   "E="
                      (/home/strick/6809):00873                  fcb   $00
                      (/home/strick/6809):00874                  fcc   "F="
                      (/home/strick/6809):00875                  fcb   $00
                      (/home/strick/6809):00876                  ENDC
05CC 43433D           (/home/strick/6809):00877                  fcc   "CC="
05CF 00               (/home/strick/6809):00878                  fcb   $00
05D0 44503D           (/home/strick/6809):00879                  fcc   "DP="
05D3 00               (/home/strick/6809):00880                  fcb   $00
05D4 53503D           (/home/strick/6809):00881                  fcc   "SP="
05D7 00               (/home/strick/6809):00882                  fcb   $00
05D8 583D             (/home/strick/6809):00883                  fcc   "X="
05DA 00               (/home/strick/6809):00884                  fcb   $00
05DB 593D             (/home/strick/6809):00885                  fcc   "Y="
05DD 00               (/home/strick/6809):00886                  fcb   $00
05DE 553D             (/home/strick/6809):00887                  fcc   "U="
05E0 00               (/home/strick/6809):00888                  fcb   $00
                      (/home/strick/6809):00889         
05E1 0D0E             (/home/strick/6809):00890         L04AF    tst   <isnarrow        wide screen?
05E3 2754             (/home/strick/6809):00891                  beq   WidRegs          branch if so
05E5 3440             (/home/strick/6809):00892                  pshs  u                save U
05E7 9E06             (/home/strick/6809):00893                  ldx   <buffptr         point to buffer
05E9 318CD6           (/home/strick/6809):00894                  leay  <ShrtHdr,pcr
05EC DE02             (/home/strick/6809):00895                  ldu   <regstack
05EE 17FBAB           (/home/strick/6809):00896                  lbsr  CopyY2X
05F1 EC4A             (/home/strick/6809):00897                  ldd   R$PC,u
                      (/home/strick/6809):00898                  IFNE  H6309
                      (/home/strick/6809):00899                  lbsr  L0505
                      (/home/strick/6809):00900                  ELSE
05F3 8D70             (/home/strick/6809):00901                  bsr   L0505
                      (/home/strick/6809):00902                  ENDC
05F5 17FBA4           (/home/strick/6809):00903                  lbsr  CopyY2X
05F8 E641             (/home/strick/6809):00904                  ldb   R$A,u
                      (/home/strick/6809):00905                  IFNE  H6309
                      (/home/strick/6809):00906                  lbsr  L050F
                      (/home/strick/6809):00907                  ELSE
05FA 8D73             (/home/strick/6809):00908                  bsr   L050F
                      (/home/strick/6809):00909                  ENDC
05FC 17FB9D           (/home/strick/6809):00910                  lbsr  CopyY2X
05FF E642             (/home/strick/6809):00911                  ldb   R$B,u
                      (/home/strick/6809):00912                  IFNE  H6309
                      (/home/strick/6809):00913                  lbsr   L050F
                      (/home/strick/6809):00914                  ELSE
0601 8D6C             (/home/strick/6809):00915                  bsr   L050F
                      (/home/strick/6809):00916                  ENDC
0603 17FB96           (/home/strick/6809):00917                  lbsr  CopyY2X
                      (/home/strick/6809):00918                  IFNE  H6309
                      (/home/strick/6809):00919                  ldb   R$E,u
                      (/home/strick/6809):00920                  bsr   L050F
                      (/home/strick/6809):00921                  lbsr  CopyY2X
                      (/home/strick/6809):00922                  ldb   R$F,u
                      (/home/strick/6809):00923                  bsr   L050F
                      (/home/strick/6809):00924                  pshs  y
                      (/home/strick/6809):00925                  lbsr  WritLnOut
                      (/home/strick/6809):00926                  puls  y
                      (/home/strick/6809):00927                  lbsr  CopyY2X
                      (/home/strick/6809):00928                  ENDC
0606 E6C4             (/home/strick/6809):00929                  ldb   R$CC,u
0608 8D65             (/home/strick/6809):00930                  bsr   L050F
060A 17FB8F           (/home/strick/6809):00931                  lbsr  CopyY2X
060D E643             (/home/strick/6809):00932                  ldb   R$DP,u
060F 8D5E             (/home/strick/6809):00933                  bsr   L050F
                      (/home/strick/6809):00934                  IFEQ  H6309
0611 3420             (/home/strick/6809):00935                  pshs  y
0613 170354           (/home/strick/6809):00936                  lbsr  WritLnOut
0616 3520             (/home/strick/6809):00937                  puls  y
                      (/home/strick/6809):00938                  ENDC
0618 17FB81           (/home/strick/6809):00939                  lbsr  CopyY2X
061B 1F30             (/home/strick/6809):00940                  tfr   u,d
061D 8D46             (/home/strick/6809):00941                  bsr   L0505
061F 17FB7A           (/home/strick/6809):00942                  lbsr  CopyY2X
0622 EC44             (/home/strick/6809):00943                  ldd   R$X,u
0624 8D3F             (/home/strick/6809):00944                  bsr   L0505
                      (/home/strick/6809):00945                  IFNE  H6309
                      (/home/strick/6809):00946                  pshs  y
                      (/home/strick/6809):00947                  lbsr  WritLnOut
                      (/home/strick/6809):00948                  puls  y
                      (/home/strick/6809):00949                  ENDC
0626 17FB73           (/home/strick/6809):00950                  lbsr  CopyY2X
0629 EC46             (/home/strick/6809):00951                  ldd   R$Y,u
062B 8D38             (/home/strick/6809):00952                  bsr   L0505
062D 17FB6C           (/home/strick/6809):00953                  lbsr  CopyY2X
0630 EC48             (/home/strick/6809):00954                  ldd   R$U,u
0632 8D31             (/home/strick/6809):00955                  bsr   L0505
0634 170333           (/home/strick/6809):00956                  lbsr  WritLnOut
0637 35C0             (/home/strick/6809):00957                  puls  pc,u
                      (/home/strick/6809):00958         * Show registers in wide form
0639 17FF08           (/home/strick/6809):00959         WidRegs  lbsr  L0415
063C 318D02CC         (/home/strick/6809):00960                  leay  >RegHdr,pcr
0640 17FB59           (/home/strick/6809):00961                  lbsr  CopyY2X
0643 170324           (/home/strick/6809):00962                  lbsr  WritLnOut
0646 17FEFB           (/home/strick/6809):00963                  lbsr  L0415
0649 DC02             (/home/strick/6809):00964                  ldd   <regstack
064B 8D18             (/home/strick/6809):00965                  bsr   L0505            show SP
064D 109E02           (/home/strick/6809):00966                  ldy   <regstack
0650 8D1B             (/home/strick/6809):00967                  bsr   L050D            show CC
0652 8D19             (/home/strick/6809):00968                  bsr   L050D            show A
0654 8D17             (/home/strick/6809):00969                  bsr   L050D            show B
                      (/home/strick/6809):00970                  IFNE  H6309
                      (/home/strick/6809):00971                  bsr   L050D            show E
                      (/home/strick/6809):00972                  bsr   L050D            show F
                      (/home/strick/6809):00973                  ENDC
0656 8D15             (/home/strick/6809):00974                  bsr   L050D            show DP
0658 8D09             (/home/strick/6809):00975                  bsr   L0550            show X
065A 8D07             (/home/strick/6809):00976                  bsr   L0550            show Y
065C 8D05             (/home/strick/6809):00977                  bsr   L0550            show U
065E 8D03             (/home/strick/6809):00978                  bsr   L0550            show PC
0660 160307           (/home/strick/6809):00979                  lbra  WritLnOut
                      (/home/strick/6809):00980         
0663 ECA1             (/home/strick/6809):00981         L0550    ldd   ,y++
0665 16F9AB           (/home/strick/6809):00982         L0505    lbra  Word2HexSpc
0668 ECA1             (/home/strick/6809):00983         L0508    ldd   ,y++
066A 16F9B4           (/home/strick/6809):00984                  lbra  Word2Hex
066D E6A0             (/home/strick/6809):00985         L050D    ldb   ,y+
066F 16F9A5           (/home/strick/6809):00986         L050F    lbra  L0017
                      (/home/strick/6809):00987         
                      (/home/strick/6809):00988         * Eat spaces and compare char with CR
0672 17FABE           (/home/strick/6809):00989         L0512    lbsr  EatSpace
0675 810D             (/home/strick/6809):00990                  cmpa  #C$CR
0677 39               (/home/strick/6809):00991                  rts   
                      (/home/strick/6809):00992         
                      (/home/strick/6809):00993         * Set/show breakpoints
0678 8DF8             (/home/strick/6809):00994         SetBkpt  bsr   L0512            any parameters?
067A 261C             (/home/strick/6809):00995                  bne   L0538            branch if so
                      (/home/strick/6809):00996         * Here we show all breakpoints
067C 17FEC5           (/home/strick/6809):00997                  lbsr  L0415
067F 109E0C           (/home/strick/6809):00998                  ldy   <bptable         get breakpoints base
0682 C60C             (/home/strick/6809):00999                  ldb   #NumBrkPt        get breakpoint count
0684 3404             (/home/strick/6809):01000                  pshs  b                save on stack
0686 ECA4             (/home/strick/6809):01001         L0526    ldd   ,y               empty?
0688 2703             (/home/strick/6809):01002                  beq   L052D            branch if so
068A 17F986           (/home/strick/6809):01003                  lbsr  Word2HexSpc      else show breakpoint at Y
068D 3123             (/home/strick/6809):01004         L052D    leay  $03,y
068F 6AE4             (/home/strick/6809):01005                  dec   ,s               dec breakpoint count
0691 26F3             (/home/strick/6809):01006                  bne   L0526            continue searching
0693 3261             (/home/strick/6809):01007                  leas  $01,s            kill byte on stack
0695 1602D2           (/home/strick/6809):01008                  lbra  WritLnOut
                      (/home/strick/6809):01009         * Set breakpoint here
0698 17FB06           (/home/strick/6809):01010         L0538    lbsr  L0195
069B 2511             (/home/strick/6809):01011                  bcs   L054E
069D 3406             (/home/strick/6809):01012                  pshs  b,a              save desired breakpoint address
069F 8D15             (/home/strick/6809):01013                  bsr   SrchBkpt         search to see if it is already in table
06A1 270E             (/home/strick/6809):01014                  beq   L0551            if duplicate, just exit
                      (/home/strick/6809):01015                  IFNE  H6309
                      (/home/strick/6809):01016                  clrd                   else load D with empty address
                      (/home/strick/6809):01017                  ELSE
06A3 CC0000           (/home/strick/6809):01018                  ldd   #$0000           else load D with empty address
                      (/home/strick/6809):01019                  ENDC
06A6 8D0E             (/home/strick/6809):01020                  bsr   SrchBkpt         search for empty
06A8 2707             (/home/strick/6809):01021                  beq   L0551            branch if found
06AA C60B             (/home/strick/6809):01022                  ldb   #E$BPTFull       else table is full
06AC 3262             (/home/strick/6809):01023                  leas  $02,s            clean up stack
06AE 16FD39           (/home/strick/6809):01024         L054E    lbra  ShowErr          and show error
06B1 3506             (/home/strick/6809):01025         L0551    puls  b,a              get breakpoint address off stack
06B3 EDA4             (/home/strick/6809):01026                  std   ,y               and save it at breakpoint entry
06B5 39               (/home/strick/6809):01027                  rts                    then return
                      (/home/strick/6809):01028         
                      (/home/strick/6809):01029         * Search for existing breakpoint that matches address in D
06B6 3440             (/home/strick/6809):01030         SrchBkpt pshs  u                save U
06B8 1F03             (/home/strick/6809):01031                  tfr   d,u              transfer addr to search in U
06BA C60C             (/home/strick/6809):01032                  ldb   #NumBrkPt        get number of breakpoints
06BC 109E0C           (/home/strick/6809):01033                  ldy   <bptable         point Y to base of breakpoints
06BF 11A3A4           (/home/strick/6809):01034         L055F    cmpu  ,y               match?
06C2 2709             (/home/strick/6809):01035                  beq   L056D            branch if so
06C4 3123             (/home/strick/6809):01036                  leay  $03,y            else move to next entry
06C6 5A               (/home/strick/6809):01037                  decb                   dec couner
06C7 26F6             (/home/strick/6809):01038                  bne   L055F            if not 0, continue search
06C9 C60C             (/home/strick/6809):01039                  ldb   #E$NoBkPt
06CB 1CFB             (/home/strick/6809):01040                  andcc #^Zero
06CD 35C0             (/home/strick/6809):01041         L056D    puls  pc,u
                      (/home/strick/6809):01042         
                      (/home/strick/6809):01043         * Kill breakpoint(s)
06CF 8DA1             (/home/strick/6809):01044         KillBkpt bsr   L0512            any parameters?
06D1 270E             (/home/strick/6809):01045                  beq   KillAll          branch if none
06D3 17FACB           (/home/strick/6809):01046                  lbsr  L0195            else get parameter
06D6 25D6             (/home/strick/6809):01047                  bcs   L054E            branch if error
06D8 8DDC             (/home/strick/6809):01048                  bsr   SrchBkpt
06DA 26D2             (/home/strick/6809):01049                  bne   L054E
                      (/home/strick/6809):01050                  IFNE  H6309
                      (/home/strick/6809):01051                  clrd
                      (/home/strick/6809):01052                  ELSE
06DC 4F               (/home/strick/6809):01053                  clra  
06DD 5F               (/home/strick/6809):01054                  clrb  
                      (/home/strick/6809):01055                  ENDC
06DE EDA4             (/home/strick/6809):01056                  std   ,y
06E0 39               (/home/strick/6809):01057                  rts   
                      (/home/strick/6809):01058         * Kill all breakpoints
06E1 109E0C           (/home/strick/6809):01059         KillAll  ldy   <bptable
06E4 C624             (/home/strick/6809):01060                  ldb   #NumBrkPt*3
06E6 6FA0             (/home/strick/6809):01061         L0586    clr   ,y+
06E8 5A               (/home/strick/6809):01062                  decb  
06E9 26FB             (/home/strick/6809):01063                  bne   L0586
06EB 39               (/home/strick/6809):01064                  rts   
                      (/home/strick/6809):01065         
                      (/home/strick/6809):01066         * Go at address
06EC 8D84             (/home/strick/6809):01067         GoPC     bsr   L0512            any parameters?
06EE 270A             (/home/strick/6809):01068                  beq   L059A            branch if none
06F0 17FAAE           (/home/strick/6809):01069                  lbsr  L0195
06F3 25B9             (/home/strick/6809):01070                  bcs   L054E
06F5 109E02           (/home/strick/6809):01071                  ldy   <regstack        get execution stack
06F8 ED2A             (/home/strick/6809):01072                  std   R$PC,y           save new PC
                      (/home/strick/6809):01073         * Now we set up all breakpoints in memory
06FA 109E0C           (/home/strick/6809):01074         L059A    ldy   <bptable
06FD C60C             (/home/strick/6809):01075                  ldb   #R$Size          get register size
06FF 9E02             (/home/strick/6809):01076                  ldx   <regstack        point to registers
0701 AE0A             (/home/strick/6809):01077                  ldx   R$PC,x           get PC
0703 EEA4             (/home/strick/6809):01078         L05A3    ldu   ,y               get breakpoint at entry
0705 270C             (/home/strick/6809):01079                  beq   L05B3            branch if empty
0707 A6C4             (/home/strick/6809):01080                  lda   ,u               get byte at breakpoint address
0709 A722             (/home/strick/6809):01081                  sta   $02,y            save in breakpoint entry
070B ACA4             (/home/strick/6809):01082                  cmpx  ,y               is breakpoint same as PC?
070D 2704             (/home/strick/6809):01083                  beq   L05B3            branch if so
070F 863F             (/home/strick/6809):01084                  lda   #$3F             else take SWI instruction
0711 A7C4             (/home/strick/6809):01085                  sta   ,u               and store it at address of breakpoint
0713 3123             (/home/strick/6809):01086         L05B3    leay  $03,y            move to next breakpoint entry
0715 5A               (/home/strick/6809):01087                  decb                   decrement
0716 26EB             (/home/strick/6809):01088                  bne   L05A3            branch if not complete
0718 10DE02           (/home/strick/6809):01089                  lds   <regstack        get execution stack
071B 3B               (/home/strick/6809):01090                  rti                    run program
                      (/home/strick/6809):01091         
071C 8D7E             (/home/strick/6809):01092         MemDump  bsr   L0613
071E 258E             (/home/strick/6809):01093                  bcs   L054E
0720 0D0E             (/home/strick/6809):01094                  tst   <isnarrow
0722 2604             (/home/strick/6809):01095                  bne   L0615
0724 CA0F             (/home/strick/6809):01096                  orb   #$0F
0726 2002             (/home/strick/6809):01097                  bra   L0617
0728 CA07             (/home/strick/6809):01098         L0615    orb   #$07
072A 1E03             (/home/strick/6809):01099         L0617    exg   d,u
072C 0D0E             (/home/strick/6809):01100                  tst   <isnarrow
072E 2604             (/home/strick/6809):01101                  bne   L0621
0730 C4F0             (/home/strick/6809):01102                  andb  #$F0
0732 2002             (/home/strick/6809):01103                  bra   L0623
0734 C4F8             (/home/strick/6809):01104         L0621    andb  #$F8
0736 3446             (/home/strick/6809):01105         L0623    pshs  u,b,a
0738 10A362           (/home/strick/6809):01106                  cmpd  $02,s
073B 240C             (/home/strick/6809):01107                  bcc   L05D9
073D 10AEE4           (/home/strick/6809):01108         L05CD    ldy   ,s
0740 313F             (/home/strick/6809):01109                  leay  -$01,y
0742 10AC62           (/home/strick/6809):01110                  cmpy  $02,s
0745 3121             (/home/strick/6809):01111                  leay  $01,y
0747 2502             (/home/strick/6809):01112                  bcs   L05DB
0749 35C6             (/home/strick/6809):01113         L05D9    puls  pc,u,b,a
074B 9E06             (/home/strick/6809):01114         L05DB    ldx   <buffptr
074D 1F20             (/home/strick/6809):01115                  tfr   y,d
074F 17F8C1           (/home/strick/6809):01116                  lbsr  Word2HexSpc
0752 0D0E             (/home/strick/6809):01117                  tst   <isnarrow
0754 2604             (/home/strick/6809):01118                  bne   L0647
0756 C608             (/home/strick/6809):01119                  ldb   #8
0758 2002             (/home/strick/6809):01120                  bra   L0649
075A C604             (/home/strick/6809):01121         L0647    ldb   #4
075C 3404             (/home/strick/6809):01122         L0649    pshs  b
075E 0D0E             (/home/strick/6809):01123         L05E6    tst   <isnarrow
0760 2605             (/home/strick/6809):01124                  bne   L0654
0762 17FEFE           (/home/strick/6809):01125                  lbsr  L0550
0765 2003             (/home/strick/6809):01126                  bra   L0657
0767 17FEFE           (/home/strick/6809):01127         L0654    lbsr  L0508
076A 6AE4             (/home/strick/6809):01128         L0657    dec   ,s
076C 26F0             (/home/strick/6809):01129                  bne   L05E6
076E 0D0E             (/home/strick/6809):01130                  tst   <isnarrow
0770 2604             (/home/strick/6809):01131                  bne   L0663
0772 C610             (/home/strick/6809):01132                  ldb   #16
0774 2005             (/home/strick/6809):01133                  bra   L0668
0776 17F8A0           (/home/strick/6809):01134         L0663    lbsr  L0019
0779 C608             (/home/strick/6809):01135                  ldb   #8
077B E7E4             (/home/strick/6809):01136         L0668    stb   ,s
077D 10AE61           (/home/strick/6809):01137                  ldy   $01,s
0780 A6A0             (/home/strick/6809):01138         L05F7    lda   ,y+
0782 817E             (/home/strick/6809):01139                  cmpa  #'~
0784 2204             (/home/strick/6809):01140                  bhi   L0601
0786 8120             (/home/strick/6809):01141                  cmpa  #C$SPAC
0788 2402             (/home/strick/6809):01142                  bcc   L0603
078A 862E             (/home/strick/6809):01143         L0601    lda   #'.
078C A780             (/home/strick/6809):01144         L0603    sta   ,x+
078E 6AE4             (/home/strick/6809):01145                  dec   ,s
0790 26EE             (/home/strick/6809):01146                  bne   L05F7
0792 3261             (/home/strick/6809):01147                  leas  $01,s
0794 10AFE4           (/home/strick/6809):01148                  sty   ,s
0797 1701D0           (/home/strick/6809):01149                  lbsr  WritLnOut
079A 20A1             (/home/strick/6809):01150                  bra   L05CD
079C 17FA02           (/home/strick/6809):01151         L0613    lbsr  L0195
079F 2505             (/home/strick/6809):01152                  bcs   L061D
07A1 1F03             (/home/strick/6809):01153                  tfr   d,u
07A3 17F9FB           (/home/strick/6809):01154                  lbsr  L0195
07A6 39               (/home/strick/6809):01155         L061D    rts   
                      (/home/strick/6809):01156         
07A7 8DF3             (/home/strick/6809):01157         ClearMem bsr   L0613
07A9 1025FC3D         (/home/strick/6809):01158                  lbcs  ShowErr
07AD 3406             (/home/strick/6809):01159                  pshs  b,a      save fill word
07AF 11A3E4           (/home/strick/6809):01160         L0626    cmpu  ,s
07B2 2302             (/home/strick/6809):01161                  bls   L062D
07B4 3586             (/home/strick/6809):01162                  puls  pc,b,a
07B6 CC8008           (/home/strick/6809):01163         L062D    ldd   #$8008
07B9 A7C4             (/home/strick/6809):01164                  sta   ,u
07BB A1C4             (/home/strick/6809):01165         L0632    cmpa  ,u
07BD 2608             (/home/strick/6809):01166                  bne   L063E
07BF 44               (/home/strick/6809):01167                  lsra  
07C0 64C4             (/home/strick/6809):01168                  lsr   ,u
07C2 5A               (/home/strick/6809):01169                  decb  
07C3 26F6             (/home/strick/6809):01170                  bne   L0632
07C5 2010             (/home/strick/6809):01171                  bra   L064E
07C7 17FD7A           (/home/strick/6809):01172         L063E    lbsr  L0415
07CA CC2D20           (/home/strick/6809):01173                  ldd   #$2D20           dash, space
07CD ED81             (/home/strick/6809):01174                  std   ,x++
07CF 1F30             (/home/strick/6809):01175                  tfr   u,d
07D1 17F84D           (/home/strick/6809):01176                  lbsr  Word2Hex
07D4 170193           (/home/strick/6809):01177                  lbsr  WritLnOut
07D7 3341             (/home/strick/6809):01178         L064E    leau  1,u
07D9 20D4             (/home/strick/6809):01179                  bra   L0626
                      (/home/strick/6809):01180         
                      (/home/strick/6809):01181         * Intercept routine
     07DB             (/home/strick/6809):01182         IcptRtn  equ   *
                      (/home/strick/6809):01183                  IFNE  H6309
                      (/home/strick/6809):01184                  tfr  0,dp
                      (/home/strick/6809):01185                  ELSE
07DB 4F               (/home/strick/6809):01186                  clra  
07DC 1F8B             (/home/strick/6809):01187                  tfr   a,dp
                      (/home/strick/6809):01188                  ENDC
                      (/home/strick/6809):01189                  IFEQ  Level-1
07DE 9E4B             (/home/strick/6809):01190                  ldx   <D.Proc          get curr proc ptr
07E0 A607             (/home/strick/6809):01191                  lda   P$ADDR,x         get hi word of user addr
07E2 1F8B             (/home/strick/6809):01192                  tfr   a,dp             transfer it to DP
                      (/home/strick/6809):01193                  ENDC
07E4 10DF02           (/home/strick/6809):01194                  sts   <regstack
07E7 EC6A             (/home/strick/6809):01195                  ldd   R$PC,s
                      (/home/strick/6809):01196                  IFNE  H6309
                      (/home/strick/6809):01197                  decd
                      (/home/strick/6809):01198                  ELSE
07E9 830001           (/home/strick/6809):01199                  subd  #$0001
                      (/home/strick/6809):01200                  ENDC
07EC ED6A             (/home/strick/6809):01201                  std   R$PC,s
07EE 10DE04           (/home/strick/6809):01202                  lds   <u0004
07F1 17FEC2           (/home/strick/6809):01203                  lbsr  SrchBkpt
07F4 2705             (/home/strick/6809):01204                  beq   L0672
07F6 C60D             (/home/strick/6809):01205                  ldb   #E$BadSWI
07F8 17FBEF           (/home/strick/6809):01206                  lbsr  ShowErr
                      (/home/strick/6809):01207         * Clear breakpoints in memory
07FB 109E0C           (/home/strick/6809):01208         L0672    ldy   <bptable         point to break point table
07FE C60C             (/home/strick/6809):01209                  ldb   #NumBrkPt        get number of entries
0800 AEA4             (/home/strick/6809):01210         L0677    ldx   ,y               get address in entry
0802 2704             (/home/strick/6809):01211                  beq   L067F            branch if empty
0804 A622             (/home/strick/6809):01212                  lda   $02,y            get saved byte
0806 A784             (/home/strick/6809):01213                  sta   ,x               restore it
0808 3123             (/home/strick/6809):01214         L067F    leay  $03,y            move to next entry
080A 5A               (/home/strick/6809):01215                  decb                   dec counter
080B 26F3             (/home/strick/6809):01216                  bne   L0677            continue if not zero
080D 170158           (/home/strick/6809):01217                  lbsr  WritCR
0810 17FD31           (/home/strick/6809):01218                  lbsr  L0415
0813 318D0119         (/home/strick/6809):01219                  leay  >BkPtHdr,pcr
0817 17F982           (/home/strick/6809):01220                  lbsr  CopyY2X
081A 17014D           (/home/strick/6809):01221                  lbsr  WritLnOut
081D 17FDC1           (/home/strick/6809):01222                  lbsr  L04AF
0820 16FB93           (/home/strick/6809):01223                  lbra  GetInput
                      (/home/strick/6809):01224         
0823 8D14             (/home/strick/6809):01225         LinkMod  bsr   LinkIt           link to module
0825 1025FBC1         (/home/strick/6809):01226                  lbcs  ShowErr          branch if error
0829 9E06             (/home/strick/6809):01227                  ldx   <buffptr
082B 1F30             (/home/strick/6809):01228                  tfr   u,d
082D 3440             (/home/strick/6809):01229                  pshs  u
082F 17FCD6           (/home/strick/6809):01230                  lbsr  L03DC
0832 170135           (/home/strick/6809):01231                  lbsr  WritLnOut
0835 3540             (/home/strick/6809):01232                  puls  u
0837 201B             (/home/strick/6809):01233                  bra   L06CC
                      (/home/strick/6809):01234         
0839 17F8F7           (/home/strick/6809):01235         LinkIt   lbsr  EatSpace         skip over blank spaces at X
                      (/home/strick/6809):01236         *         lda   #$00
083C 4F               (/home/strick/6809):01237                  clra
083D 103F00           (/home/strick/6809):01238                  os9   F$Link           link to module name at X
0840 39               (/home/strick/6809):01239                  rts   
                      (/home/strick/6809):01240         
                      (/home/strick/6809):01241         * Prepare module for execution
0841 8DF6             (/home/strick/6809):01242         PrepMod  bsr   LinkIt
0843 1025FBA3         (/home/strick/6809):01243                  lbcs  ShowErr
0847 EC4B             (/home/strick/6809):01244                  ldd   M$Mem,u          get memory requirements
0849 C30200           (/home/strick/6809):01245                  addd  #512             add an extra 512 bytes
084C 103F07           (/home/strick/6809):01246                  os9   F$Mem            allocate, Y = upperbound
084F 2407             (/home/strick/6809):01247                  bcc   UnlinkIt         branch if ok
0851 17FB96           (/home/strick/6809):01248                  lbsr  ShowErr          show error
     0854             (/home/strick/6809):01249         L06CC    equ   *
                      (/home/strick/6809):01250                  IFEQ  Level-1
0854 103F02           (/home/strick/6809):01251                  os9   F$UnLink
                      (/home/strick/6809):01252                  ENDC
0857 39               (/home/strick/6809):01253                  rts                    and return
                      (/home/strick/6809):01254         
0858 103F02           (/home/strick/6809):01255         UnlinkIt os9   F$UnLink         unlink module
085B 3470             (/home/strick/6809):01256                  pshs  u,y,x            save u,y,x
085D A680             (/home/strick/6809):01257         L06D5    lda   ,x+              get next parameter char
085F 810D             (/home/strick/6809):01258                  cmpa  #C$CR            carriage return?
0861 26FA             (/home/strick/6809):01259                  bne   L06D5            branch if not
0863 5F               (/home/strick/6809):01260                  clrb                   start at zero
0864 A682             (/home/strick/6809):01261         L06DC    lda   ,-x              get parameter char
0866 A7A2             (/home/strick/6809):01262                  sta   ,-y              store in buffer
0868 5C               (/home/strick/6809):01263                  incb                   continue
0869 ACE4             (/home/strick/6809):01264                  cmpx  ,s               reached start of parameter?
086B 22F7             (/home/strick/6809):01265                  bhi   L06DC            branch if not
086D 10AF38           (/home/strick/6809):01266                  sty   -R$U,y
0870 3134             (/home/strick/6809):01267                  leay  -R$Size,y
0872 109F02           (/home/strick/6809):01268                  sty   <regstack
0875 4F               (/home/strick/6809):01269                  clra  
0876 ED21             (/home/strick/6809):01270                  std   R$A,y
0878 3556             (/home/strick/6809):01271                  puls  u,x,b,a
087A AF26             (/home/strick/6809):01272                  stx   R$Y,y
087C EC49             (/home/strick/6809):01273                  ldd   M$Exec,u         get exec offset in D
087E 30CB             (/home/strick/6809):01274                  leax  d,u              point X to execution address
0880 AF2A             (/home/strick/6809):01275                  stx   R$PC,y           save at PC
0882 1FA8             (/home/strick/6809):01276                  tfr   cc,a
0884 8A80             (/home/strick/6809):01277                  ora   #Entire
0886 A7A4             (/home/strick/6809):01278                  sta   R$CC,y
0888 1FB8             (/home/strick/6809):01279                  tfr   dp,a
088A 8B02             (/home/strick/6809):01280                  adda  #$02
088C 5F               (/home/strick/6809):01281                  clrb  
088D ED28             (/home/strick/6809):01282                  std   R$U,y
088F A723             (/home/strick/6809):01283                  sta   R$DP,y
0891 16FD4D           (/home/strick/6809):01284                  lbra  L04AF
                      (/home/strick/6809):01285         
                      (/home/strick/6809):01286         * Fork program (default is shell)
0894 17F89C           (/home/strick/6809):01287         ForkPrg  lbsr  EatSpace         skip leading spaces
                      (/home/strick/6809):01288                  IFNE  H6309
                      (/home/strick/6809):01289                  clrd
                      (/home/strick/6809):01290                  ELSE
0897 4F               (/home/strick/6809):01291                  clra  
0898 5F               (/home/strick/6809):01292                  clrb  
                      (/home/strick/6809):01293                  ENDC
0899 1F13             (/home/strick/6809):01294                  tfr   x,u              move param ptr to U
089B 1F02             (/home/strick/6809):01295                  tfr   d,y
089D 3121             (/home/strick/6809):01296         L0715    leay  $01,y
089F A680             (/home/strick/6809):01297                  lda   ,x+
08A1 810D             (/home/strick/6809):01298                  cmpa  #C$CR
08A3 26F8             (/home/strick/6809):01299                  bne   L0715
08A5 4F               (/home/strick/6809):01300                  clra  
08A6 308C0D           (/home/strick/6809):01301                  leax  <ShellNam,pcr
08A9 103F03           (/home/strick/6809):01302                  os9   F$Fork           fork shell plus any parameters
08AC 2503             (/home/strick/6809):01303                  bcs   L0729            branch if error
08AE 103F04           (/home/strick/6809):01304                  os9   F$Wait           wait for shell to finish
08B1 1025FB35         (/home/strick/6809):01305         L0729    lbcs  ShowErr          branch if error
08B5 39               (/home/strick/6809):01306                  rts                    and return
                      (/home/strick/6809):01307         
08B6 7368656C6C       (/home/strick/6809):01308         ShellNam fcc   "shell"
08BB 00               (/home/strick/6809):01309                  fcb   $00
                      (/home/strick/6809):01310         
                      (/home/strick/6809):01311         * Exit without error
08BC 5F               (/home/strick/6809):01312         ExitOk   clrb
08BD 103F06           (/home/strick/6809):01313         L0735    os9   F$Exit   
                      (/home/strick/6809):01314         
                      (/home/strick/6809):01315         * Search for byte or word from . to end address
                      (/home/strick/6809):01316         * Syntax: S endaddr byte
                      (/home/strick/6809):01317         *         S endaddr word
08C0 17FED9           (/home/strick/6809):01318         SrchMem  lbsr  L0613
08C3 1025FB23         (/home/strick/6809):01319                  lbcs  ShowErr
08C7 3440             (/home/strick/6809):01320                  pshs  u
08C9 9E00             (/home/strick/6809):01321                  ldx   <curraddr
08CB 4D               (/home/strick/6809):01322                  tsta                   byte or word?
08CC 260A             (/home/strick/6809):01323                  bne   L0750            branch if word
08CE E180             (/home/strick/6809):01324         L0746    cmpb  ,x+              byte in B match byte at ,X?
08D0 2711             (/home/strick/6809):01325                  beq   L075C            branch if so
08D2 ACE4             (/home/strick/6809):01326                  cmpx  ,s               is X equal to end?
08D4 26F8             (/home/strick/6809):01327                  bne   L0746            branch if not
08D6 35C0             (/home/strick/6809):01328                  puls  pc,u             else we're done
08D8 10A380           (/home/strick/6809):01329         L0750    cmpd  ,x+              byte in B match byte at ,X?
08DB 2706             (/home/strick/6809):01330                  beq   L075C            branch if so
08DD ACE4             (/home/strick/6809):01331                  cmpx  ,s
08DF 26F7             (/home/strick/6809):01332                  bne   L0750            branch if not
08E1 35C0             (/home/strick/6809):01333                  puls  pc,u
08E3 301F             (/home/strick/6809):01334         L075C    leax  -$01,x           back up to mem location found
08E5 1F10             (/home/strick/6809):01335                  tfr   x,d              put memory location in D
08E7 3262             (/home/strick/6809):01336                  leas  $02,s            wipe out stack
08E9 16FC1C           (/home/strick/6809):01337                  lbra  L03DC
                      (/home/strick/6809):01338         
08EC 3F               (/home/strick/6809):01339         DefBrk   swi
                      (/home/strick/6809):01340         
08ED 496E746572616374 (/home/strick/6809):01341         Title    fcc   "Interactive "
     69766520
                      (/home/strick/6809):01342                  IFEQ  SYSDEBUG-1
                      (/home/strick/6809):01343                  fcc   "System "
                      (/home/strick/6809):01344                  ENDC
08F9 4465627567676572 (/home/strick/6809):01345                  fcc   "Debugger"
0901 00               (/home/strick/6809):01346                  fcb   $00
                      (/home/strick/6809):01347         
0902                  (/home/strick/6809):01348         Prompt  
                      (/home/strick/6809):01349                  IFEQ  SYSDEBUG-1
                      (/home/strick/6809):01350                  fcc   "S"
                      (/home/strick/6809):01351                  ENDC
0902 44423A20         (/home/strick/6809):01352                  fcc   "DB: "
0906 00               (/home/strick/6809):01353                  fcb   $00
0907 20202020         (/home/strick/6809):01354         Spaces   fcc   "    "
090B 00               (/home/strick/6809):01355                  fcb   $00
                      (/home/strick/6809):01356         
                      (/home/strick/6809):01357                  IFNE  H6309
090C                  (/home/strick/6809):01358         RegHdr   fcc   " SP  CC  A  B  E  F DP  X    Y    U    PC"
                      (/home/strick/6809):01359                  ELSE
090C 2053502020434320 (/home/strick/6809):01360         RegHdr   fcc   " SP  CC  A  B DP  X    Y    U    PC"
     2041202042204450
     2020582020202059
     2020202055202020
     205043
                      (/home/strick/6809):01361                  ENDC
092F 00               (/home/strick/6809):01362                  fcb   $00
                      (/home/strick/6809):01363         
0930 424B5054         (/home/strick/6809):01364         BkPtHdr  fcc   "BKPT"
0934 3A20             (/home/strick/6809):01365         CmdTbl   fcc   ": "
0936 00               (/home/strick/6809):01366                  fcb   $00
0937 2E               (/home/strick/6809):01367                  fcc   /./
0938 04EF             (/home/strick/6809):01368                  fdb   DotCmd
093A 3D               (/home/strick/6809):01369                  fcc   /=/
093B 0528             (/home/strick/6809):01370                  fdb   SetLoc
093D 0D               (/home/strick/6809):01371                  fcb   C$CR
093E 053D             (/home/strick/6809):01372                  fdb   NextByte
0940 20               (/home/strick/6809):01373                  fcb   C$SPAC
0941 0551             (/home/strick/6809):01374                  fdb   Calc
0943 2D               (/home/strick/6809):01375                  fcc   /-/
0944 0521             (/home/strick/6809):01376                  fdb   PrevByte
0946 3A               (/home/strick/6809):01377                  fcc   /:/
0947 057E             (/home/strick/6809):01378                  fdb   ShowRegs
0949 4B               (/home/strick/6809):01379                  fcc   /K/
094A 06CF             (/home/strick/6809):01380                  fdb   KillBkpt
094C 4D               (/home/strick/6809):01381                  fcc   /M/
094D 071C             (/home/strick/6809):01382                  fdb   MemDump
094F 43               (/home/strick/6809):01383                  fcc   /C/
0950 07A7             (/home/strick/6809):01384                  fdb   ClearMem
0952 42               (/home/strick/6809):01385                  fcc   /B/
0953 0678             (/home/strick/6809):01386                  fdb   SetBkpt
0955 47               (/home/strick/6809):01387                  fcc   /G/
0956 06EC             (/home/strick/6809):01388                  fdb   GoPC
0958 4C               (/home/strick/6809):01389                  fcc   /L/
0959 0823             (/home/strick/6809):01390                  fdb   LinkMod
095B 45               (/home/strick/6809):01391                  fcc   /E/
095C 0841             (/home/strick/6809):01392                  fdb   PrepMod
095E 24               (/home/strick/6809):01393                  fcc   /$/
095F 0894             (/home/strick/6809):01394                  fdb   ForkPrg
0961 51               (/home/strick/6809):01395                  fcc   /Q/
0962 08BC             (/home/strick/6809):01396                  fdb   ExitOk
0964 53               (/home/strick/6809):01397                  fcc   /S/
0965 08C0             (/home/strick/6809):01398                  fdb   SrchMem
0967 00               (/home/strick/6809):01399                  fcb   $00
                      (/home/strick/6809):01400         
                      (/home/strick/6809):01401         ******** INPUT/OUTPUT ROUTINES ********
                      (/home/strick/6809):01402         *
                      (/home/strick/6809):01403         * WritCR - Write CR to stdout
0968 9E06             (/home/strick/6809):01404         WritCR   ldx   <buffptr
                      (/home/strick/6809):01405         * Append CR to <buffptr and write to stdout
096A                  (/home/strick/6809):01406         WritLnOut
096A 8D06             (/home/strick/6809):01407                  bsr   cr@
096C 2022             (/home/strick/6809):01408                  bra   llwout
096E                  (/home/strick/6809):01409         WritLnErr
096E 8D02             (/home/strick/6809):01410                  bsr   cr@
0970 201B             (/home/strick/6809):01411                  bra   llwerr
0972 860D             (/home/strick/6809):01412         cr@      lda   #C$CR
0974 A780             (/home/strick/6809):01413                  sta   ,x+
0976 9E06             (/home/strick/6809):01414                  ldx   <buffptr
0978 108E0051         (/home/strick/6809):01415                  ldy   #81
097C 39               (/home/strick/6809):01416                  rts
                      (/home/strick/6809):01417         
097D 1F21             (/home/strick/6809):01418         PrintY   tfr   y,x
097F 1F23             (/home/strick/6809):01419                  tfr   y,u
0981 108E0000         (/home/strick/6809):01420                  ldy   #$0000
0985 E6C0             (/home/strick/6809):01421         PrintYL  ldb   ,u+              get next char
0987 2707             (/home/strick/6809):01422                  beq   llwout           write it
0989 3121             (/home/strick/6809):01423                  leay  $01,y            increase Y
098B 20F8             (/home/strick/6809):01424                  bra   PrintYL          get more
                      (/home/strick/6809):01425         
                      (/home/strick/6809):01426                  IFEQ  SYSDEBUG
098D 8602             (/home/strick/6809):01427         llwerr   lda   #$02
098F 8C               (/home/strick/6809):01428                  fcb   $8C
                      (/home/strick/6809):01429         * Write To Standard Output
                      (/home/strick/6809):01430         * Entry:
                      (/home/strick/6809):01431         *    X = address of buffer to write
                      (/home/strick/6809):01432         * Exit:
                      (/home/strick/6809):01433         *    X = address of program's buffptr
0990 8601             (/home/strick/6809):01434         llwout   lda   #$01             stdout
0992 103F8C           (/home/strick/6809):01435                  os9   I$WritLn         write it!
0995 9E06             (/home/strick/6809):01436                  ldx   <buffptr
0997 39               (/home/strick/6809):01437                  rts   
                      (/home/strick/6809):01438         
                      (/home/strick/6809):01439         * Read From To Standard Input
                      (/home/strick/6809):01440         * Exit:
                      (/home/strick/6809):01441         *    X = address of buffer to data read
0998 9E06             (/home/strick/6809):01442         ReadLine ldx   <buffptr         point to buffer
099A 108E0050         (/home/strick/6809):01443                  ldy   #80              read up to 80 chars
099E 4F               (/home/strick/6809):01444                  clra                   from stdin
099F 103F8B           (/home/strick/6809):01445                  os9   I$ReadLn         do it!
09A2 9E06             (/home/strick/6809):01446                  ldx   <buffptr         reload X with line
09A4 39               (/home/strick/6809):01447                  rts   
                      (/home/strick/6809):01448         
                      (/home/strick/6809):01449                  ELSE
                      (/home/strick/6809):01450         
                      (/home/strick/6809):01451         * 6551 Parameters
09A5                  (/home/strick/6809):01452         ADDR     equ   $FF68     
                      (/home/strick/6809):01453         
09A5                  (/home/strick/6809):01454         A_RXD    equ   ADDR+$00
09A5                  (/home/strick/6809):01455         A_TXD    equ   ADDR+$00
09A5                  (/home/strick/6809):01456         A_STATUS equ   ADDR+$01
09A5                  (/home/strick/6809):01457         A_RESET  equ   ADDR+$01
09A5                  (/home/strick/6809):01458         A_CMD    equ   ADDR+$02
09A5                  (/home/strick/6809):01459         A_CTRL   equ   ADDR+$03
                      (/home/strick/6809):01460                                  
                      (/home/strick/6809):01461         * Baud rates
09A5                  (/home/strick/6809):01462         _B2400    equ   $1A      2400 bps, 8-N-1
09A5                  (/home/strick/6809):01463         _B4800    equ   $1C      4800 bps, 8-N-1
09A5                  (/home/strick/6809):01464         _B9600    equ   $1E      9600 bps, 8-N-1
09A5                  (/home/strick/6809):01465         _B19200   equ   $1F      19200 bps, 8-N-1
                      (/home/strick/6809):01466         
09A5                  (/home/strick/6809):01467         BAUD     equ   _B9600
                      (/home/strick/6809):01468         
                      (/home/strick/6809):01469         * Init - Initialize
                      (/home/strick/6809):01470         * Exit: Carry = 0: Init success; Carry = 1; Init failed
09A5                  (/home/strick/6809):01471         Init                     
                      (/home/strick/6809):01472                  sta   A_RESET    soft reset (value not important)
                      (/home/strick/6809):01473         * Set specific modes and functions:
                      (/home/strick/6809):01474         * - no parity, no echo, no Tx interrupt
                      (/home/strick/6809):01475         * no Rx interrupt, enable Tx/Rx
                      (/home/strick/6809):01476                  lda   #$0B
                      (/home/strick/6809):01477                  sta   A_CMD      save to command register
                      (/home/strick/6809):01478                  lda   #BAUD
                      (/home/strick/6809):01479                  sta   A_CTRL     select proper baud rate
                      (/home/strick/6809):01480         * Read any junk rx byte that may be in the register
                      (/home/strick/6809):01481                  lda   A_RXD
                      (/home/strick/6809):01482                  rts             
                      (/home/strick/6809):01483                                  
                      (/home/strick/6809):01484         * Read - Read one character
                      (/home/strick/6809):01485         * Exit:  A = character that was read
09A5                  (/home/strick/6809):01486         Read                     
09A5                  (/home/strick/6809):01487         r@       lda   A_STATUS   get status byte
                      (/home/strick/6809):01488                  anda  #$08       mask rx buffer status flag
                      (/home/strick/6809):01489                  beq   r@         loop if rx buffer empty
                      (/home/strick/6809):01490                  lda   A_RXD      get byte from ACIA data port
                      (/home/strick/6809):01491                  rts             
                      (/home/strick/6809):01492                                  
                      (/home/strick/6809):01493         * Write - Write one character
                      (/home/strick/6809):01494         * Entry: A = character to write
09A5                  (/home/strick/6809):01495         Write                    
                      (/home/strick/6809):01496                  pshs  a          save byte to write
09A5                  (/home/strick/6809):01497         w@       lda   A_STATUS   get status byte
                      (/home/strick/6809):01498                  anda  #$10       mask tx buffer status flag
                      (/home/strick/6809):01499                  beq   w@         loop if tx buffer full
                      (/home/strick/6809):01500                  puls  a          get byte
                      (/home/strick/6809):01501                  sta   A_TXD      save to ACIA data port
                      (/home/strick/6809):01502                  rts             
                      (/home/strick/6809):01503                                  
                      (/home/strick/6809):01504         * Term - Terminate
09A5                  (/home/strick/6809):01505         Term                     
                      (/home/strick/6809):01506                  rts             
                      (/home/strick/6809):01507                                  
                      (/home/strick/6809):01508         
                      (/home/strick/6809):01509         * llwout - Write an entire string
                      (/home/strick/6809):01510         * llwerr - Write an entire string
09A5                  (/home/strick/6809):01511         llwerr
09A5                  (/home/strick/6809):01512         llwout
                      (/home/strick/6809):01513                  pshs  a
09A5                  (/home/strick/6809):01514         l@       lda   ,x+
                      (/home/strick/6809):01515                  cmpa  #C$CR
                      (/home/strick/6809):01516                  beq   e@
                      (/home/strick/6809):01517                  leay  -1,y
                      (/home/strick/6809):01518                  beq   f@
                      (/home/strick/6809):01519                  bsr   Write
                      (/home/strick/6809):01520                  bra   l@
09A5                  (/home/strick/6809):01521         e@       bsr   Write
                      (/home/strick/6809):01522                  lda   #C$LF
                      (/home/strick/6809):01523                  bsr   Write
09A5                  (/home/strick/6809):01524         f@       ldx   <buffptr
                      (/home/strick/6809):01525                  clrb
                      (/home/strick/6809):01526                  puls  a,pc
                      (/home/strick/6809):01527         
                      (/home/strick/6809):01528         * ReadLine - Read an entire string, up to CR
                      (/home/strick/6809):01529         * Entry: X = address to place string being read (CR terminated)
                      (/home/strick/6809):01530         *        Y = maximum number of bytes to read (including nul byte)
09A5                  (/home/strick/6809):01531         ReadLine
                      (/home/strick/6809):01532                  ldx   <buffptr
                      (/home/strick/6809):01533                  pshs  y,x,a
                      (/home/strick/6809):01534                  ldy   #80
09A5                  (/home/strick/6809):01535         l@       bsr   Read         read 1 character
                      (/home/strick/6809):01536                  cmpa  #C$CR        carriage return?
                      (/home/strick/6809):01537                  beq   e@           branch if so...
                      (/home/strick/6809):01538                  cmpa  #$08         backspace?
                      (/home/strick/6809):01539                  beq   bs@           
                      (/home/strick/6809):01540                  cmpy  #$0000       anymore room?
                      (/home/strick/6809):01541                  beq   l@
                      (/home/strick/6809):01542                  leay  -1,y         back up one char
                      (/home/strick/6809):01543                  sta   ,x+          and save in input buffer
09A5                  (/home/strick/6809):01544         m@       bsr   Write        echo back out
                      (/home/strick/6809):01545                  bra   l@
09A5                  (/home/strick/6809):01546         e@       sta   ,x
                      (/home/strick/6809):01547                  bsr   Write
                      (/home/strick/6809):01548                  lda   #C$LF
                      (/home/strick/6809):01549                  bsr   Write
                      (/home/strick/6809):01550                  clrb
                      (/home/strick/6809):01551                  puls  a,x,y,pc
09A5                  (/home/strick/6809):01552         bs@      cmpx  1,s          are we at start
                      (/home/strick/6809):01553                  beq   l@           if so, do nothing
                      (/home/strick/6809):01554                  clr   ,-x          else erase last byte
                      (/home/strick/6809):01555                  lbsr  Write        write backspace
                      (/home/strick/6809):01556                  lda   #C$SPAC      a space...
                      (/home/strick/6809):01557                  lbsr  Write        write it
                      (/home/strick/6809):01558                  leay  1,y          count back up free char
                      (/home/strick/6809):01559                  lda   #$08         another backspace
                      (/home/strick/6809):01560                  bra   m@
                      (/home/strick/6809):01561         
                      (/home/strick/6809):01562                  ENDC
                      (/home/strick/6809):01563          
09A5 7DA84B           (/home/strick/6809):01564                  emod
     09A8             (/home/strick/6809):01565         eom      equ   *
                      (/home/strick/6809):01566                  end
