                      (     bootlink.asm):00001         * bootlink.asm, boot selection utility
                      (     bootlink.asm):00002         * Copyright (C) 2012-2014  Gene Heskett
                      (     bootlink.asm):00003         * License: GPLv2
                      (     bootlink.asm):00004         * See bootlink.doc for more licensing information
                      (     bootlink.asm):00005         *
                      (     bootlink.asm):00006         * A utility to facilitate using different boot vdisk images on
                      (     bootlink.asm):00007         * a hard drive as the next default vdisk to boot from.
                      (     bootlink.asm):00008         *
                      (     bootlink.asm):00009         * REQUIRES:
                      (     bootlink.asm):00010         * HDB-DOS 1.1a or I assume newer.
                      (     bootlink.asm):00011         * The boot sequence is this:
                      (     bootlink.asm):00012         * load the boottrack from the default vdisk 128 image coded into
                      (     bootlink.asm):00013         * HDB-DOS.
                      (     bootlink.asm):00014         *
                      (     bootlink.asm):00015         * That tracks boot module, if a boot from the hard drive module
                      (     bootlink.asm):00016         * will then interogate LSN0 of the selected disk, and will
                      (     bootlink.asm):00017         * then use that data to locate the selected OS9Boot file
                      (     bootlink.asm):00018         * from anyplace on the disk, well beyond the basic partitions
                      (     bootlink.asm):00019         * end address if it is one of the 256 HDB-DOS vdisks.
                      (     bootlink.asm):00020         *
                      (     bootlink.asm):00021         * The only reason to change this boottrack is if one wanted to
                      (     bootlink.asm):00022         * change the rel module to change the default boot screen from
                      (     bootlink.asm):00023         * what is being used in the default vdisk 128. I like rel_80
                      (     bootlink.asm):00024         * myself.
                      (     bootlink.asm):00025         *
                      (     bootlink.asm):00026         * Getting LSN0 from that drive, reading DD.BT, and DD.SIZ, it knows
                      (     bootlink.asm):00027         * where on the disks surface to get, and how much to get, to fetch
                      (     bootlink.asm):00028         * the OS9Boot file from ANYPLACE on the hard drive.  This means
                      (     bootlink.asm):00029         * that by re-writing the DD.BT and DD.SIZ values in the selected by
                      (     bootlink.asm):00030         * the boot module drive, we can effectively do exactly the same as
                      (     bootlink.asm):00031         * I believe that LINK.BAS is doing but which is hard to get to without
                      (     bootlink.asm):00032         * doing a full reset into rsdos. Something I rarely do.
                      (     bootlink.asm):00033         *
                      (     bootlink.asm):00034         * The intention is to be able to do something like:
                      (     bootlink.asm):00035         * >bootlink 129;reboot
                      (     bootlink.asm):00036         * choose 1 or let it time out and it will reboot using the boottrack
                      (     bootlink.asm):00037         * from HDB-DOS vdisk 128, but then get the OS9Boot file from vdisk 129
                      (     bootlink.asm):00038         * instead of the default 128.  Repeat the selection of which OS9Boot
                      (     bootlink.asm):00039         * for any HDB-DOS vdisk.
                      (     bootlink.asm):00040         *
                      (     bootlink.asm):00041         * Caveat: be sure there is an OS9Boot file on that vdisk, else you will
                      (     bootlink.asm):00042         * need to find that LINK.BAS and rerun it to restore your boot drives
                      (     bootlink.asm):00043         * LSN0 DD.BT and DD.SIZ to valid values.
                      (     bootlink.asm):00044         *
                      (     bootlink.asm):00045         * The code for bootlink follows:
                      (     bootlink.asm):00046         * various bits of the code can be traced by setting the debug level
                      (     bootlink.asm):00047         * IF the machine has a 6309 in it, I use those registers to mark where
                      (     bootlink.asm):00048         * the dump came from.
                      (     bootlink.asm):00049         * DEBUG set 1 traces the LSN0 file creation process for the boot device
                      (     bootlink.asm):00050         * DEBUG set 2 traces the LSN0 file creation process for the stp selected vdisk
                      (     bootlink.asm):00051         * DEBUG set 3 will trace the offset calcs
                      (     bootlink.asm):00052         * DEBUG set 4 traces new boot address additions
                      (     bootlink.asm):00053         * DEBUG set 5 traces LSN0 edits
                      (     bootlink.asm):00054         * DEBUG set 6 traces the decimal or ascii to hex conversions
                      (     bootlink.asm):00055         * DEBUG set 7 traces the math for the $276*HEXB function
                      (     bootlink.asm):00056         * DEBUG set 8 will check last coded display lines exit
                      (     bootlink.asm):00057         * Any non-zero traces entry state
     0000             (     bootlink.asm):00058         DEBUG   set 0
                      (     bootlink.asm):00059                 ttl bootlink - method of effecting reboots to different bootfiles
                      (     bootlink.asm):00060                 IFP1
                      (     bootlink.asm):00061                 use os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0018                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
0018                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
0018                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
0018                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
0018                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
0018                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
                      (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0018                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0018                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
0018                  (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0024                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0024                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0034                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0034                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0034                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0034                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0034                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
0034                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
0034                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
0034                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
0034                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
0034                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
0034                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0034                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0034                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0034                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0034                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0034                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0034                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0034                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0034                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0034                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0034                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
0034                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
0034                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
0034                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
0034                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
0034                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
0034                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0034                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0034                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0034                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0034                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0034                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0034                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0034                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0034                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
0070                  (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0080                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0080                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
                      (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
00B1                  (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
00B1                  (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
00B1                  (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
00B1                  (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
00B1                  (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
00B1                  (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
00B1                  (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
00B1                  (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
00B1                  (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
00B1                  (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
00B1                  (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
00B1                  (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
00B1                  (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
00B1                  (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
00B1                  (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
00B1                  (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
00B1                  (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0024                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0026                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
002A                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
002C                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
002E                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0030                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0032                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0034                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0036                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0038                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
003A                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
003C                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
003E                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0040                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0042                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0044                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0046                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0048                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0049                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
004B                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
004D                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
004F                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0051                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
     0053             (            os9.d):00456         D.Time         EQU       .                   Time
0053                  (            os9.d):00457         D.Year         RMB       1                   $53
0054                  (            os9.d):00458         D.Month        RMB       1                   $54
0055                  (            os9.d):00459         D.Day          RMB       1                   $55
0056                  (            os9.d):00460         D.Hour         RMB       1                   $56
0057                  (            os9.d):00461         D.Min          RMB       1                   $57
0058                  (            os9.d):00462         D.Sec          RMB       1                   $58
0059                  (            os9.d):00463         D.Tick         RMB       1                   $59
005A                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
005B                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
005C                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
005E                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0060                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0062                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0064                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0066                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0068                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
006A                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
006B                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
006D                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
006F                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0071                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0081                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0083                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0084                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0086                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0088                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0089                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
008A                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0100                  (            os9.d):00494         D.XSWI3        RMB       3
0103                  (            os9.d):00495         D.XSWI2        RMB       3
0106                  (            os9.d):00496         D.XSWI         RMB       3
0109                  (            os9.d):00497         D.XNMI         RMB       3
010C                  (            os9.d):00498         D.XIRQ         RMB       3
010F                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
     0020             (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
     0002             (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
     006E             (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0112                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0112                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0112                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0112                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
0112                  (            os9.d):00513         D.Time         EQU       .                   System Time
0112                  (            os9.d):00514         D.Year         RMB       1
0112                  (            os9.d):00515         D.Month        RMB       1
0112                  (            os9.d):00516         D.Day          RMB       1
0112                  (            os9.d):00517         D.Hour         RMB       1
0112                  (            os9.d):00518         D.Min          RMB       1
0112                  (            os9.d):00519         D.Sec          RMB       1
0112                  (            os9.d):00520         D.Tick         RMB       1
0112                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0112                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0112                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0112                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0112                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0112                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0112                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0112                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0112                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
0112                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
                      (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
0112                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
0112                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
0112                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
0112                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
0112                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0112                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0112                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0112                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
0112                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
0112                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
0112                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0112                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0112                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0112                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0112                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0112                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
0112                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
0112                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
0112                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0112                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
0112                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0112                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
0112                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0112                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0112                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
                      (            os9.d):00569                        RMB       4                   reserved
0112                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
0112                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0112                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0112                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0112                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0112                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0112                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0112                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0112                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0112                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0112                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0112                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
0112                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
0112                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
0112                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
0112                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
0112                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
0112                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
0112                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
0112                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
0112                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
0112                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
0112                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
0112                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
0112                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
0112                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
0112                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
0112                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
0112                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
0112                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
0112                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
0112                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
0112                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
0112                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
0112                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
0112                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
0112                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
0112                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
0112                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
0112                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
0112                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
0112                  (            os9.d):00619         D.Clock        RMB       2
0112                  (            os9.d):00620         D.XSWI3        RMB       2
0112                  (            os9.d):00621         D.XSWI2        RMB       2
0112                  (            os9.d):00622         D.XFIRQ        RMB       2
0112                  (            os9.d):00623         D.XIRQ         RMB       2
0112                  (            os9.d):00624         D.XSWI         RMB       2
0112                  (            os9.d):00625         D.XNMI         RMB       2
0112                  (            os9.d):00626         D.ErrRst       RMB       2
0112                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
0112                  (            os9.d):00628         D.SWI3         RMB       2
0112                  (            os9.d):00629         D.SWI2         RMB       2
0112                  (            os9.d):00630         D.FIRQ         RMB       2
0112                  (            os9.d):00631         D.IRQ          RMB       2
0112                  (            os9.d):00632         D.SWI          RMB       2
0112                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
0112                  (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
0112                  (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
0112                  (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
0112                  (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
0112                  (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0000                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0000                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0002                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0004             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0025                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0025                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0025                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
     000C             (            os9.d):00820         DefIOSiz       EQU       12
     0010             (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
0000                  (            os9.d):00824         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
0007                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
0008                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
0009                  (            os9.d):00832         P$User         RMB       2                   User Index $09
000B                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
000C                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
000D                  (            os9.d):00835         P$State        RMB       1                   Status $0D
000E                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
0010                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
0011                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
0012                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
0014                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
0016                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
0018                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
001A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
0026                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
0036                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
0037                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
0039                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
003B                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
003F                  (            os9.d):00849                        RMB       $40-.               unused
     0040             (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
     0080             (            os9.d):00855         SysState       EQU       %10000000
     0040             (            os9.d):00856         TimSleep       EQU       %01000000
     0020             (            os9.d):00857         TimOut         EQU       %00100000
     0010             (            os9.d):00858         ImgChg         EQU       %00010000
     0002             (            os9.d):00859         Condem         EQU       %00000010
     0001             (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
0040                  (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
0040                  (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
0040                  (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0040                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0040                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0040                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0040                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0040                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0040                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0040                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0040                  (            os9.d):00877         P$User         RMB       2                   User Index
0040                  (            os9.d):00878         P$Prior        RMB       1                   Priority
0040                  (            os9.d):00879         P$Age          RMB       1                   Age
0040                  (            os9.d):00880         P$State        RMB       1                   Status
0040                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
0040                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0040                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0040                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0040                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0040                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0040                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0040                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
0040                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
0040                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
0040                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
                      (            os9.d):00892                        RMB       $20-.               unused
0040                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0040                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0040                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
0040                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
0040                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
0040                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
0040                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
0040                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
0040                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
0040                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
0040                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
0040                  (            os9.d):00905         P$Alarm        RMB       6
                      (            os9.d):00906                        RMB       $200-.              Local stack
0040                  (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
0040                  (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
0040                  (            os9.d):00913         SysState       EQU       %10000000
0040                  (            os9.d):00914         TimSleep       EQU       %01000000
0040                  (            os9.d):00915         TimOut         EQU       %00100000
0040                  (            os9.d):00916         ImgChg         EQU       %00010000
0040                  (            os9.d):00917         Suspend        EQU       %00001000
0040                  (            os9.d):00918         Condem         EQU       %00000010
0040                  (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
0009                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     0009             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     0009             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
0005                  (            os9.d):01040         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01041         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01044         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01045         R$X            EQU       6                   X Index register
0005                  (            os9.d):01046         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01047         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01048         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
     0003             (            os9.d):01051         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01052         R$X            EQU       4                   X Index register
     0006             (            os9.d):01053         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01054         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01055         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
     EE00             (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
     1080             (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
00FF                  (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
00FF                  (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
00FF                  (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
00FF                  (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
00FF                  (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (     bootlink.asm):00062                 use rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0040                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0040                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0040                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0040                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0040                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0040                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
0040                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0040                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0040                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0040                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0040                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0040                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0040                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0040                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
                      (            rbf.d):00239                        RMB       32-.                Reserved
0040                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
0040                  (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
0040                  (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
0040                  (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
0040                  (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (     bootlink.asm):00063                 ENDC
     0011             (     bootlink.asm):00064         tylg    set Prgrm+Objct
     0081             (     bootlink.asm):00065         atrv    set ReEnt+rev
     0001             (     bootlink.asm):00066         rev     set 1
     0001             (     bootlink.asm):00067         ed      set 1
     0008             (     bootlink.asm):00068         srchcli set 8 amount of cli to search
     0080             (     bootlink.asm):00069         shdeflt set $80
     00DF             (     bootlink.asm):00070         MkUpper set $DF
                      (     bootlink.asm):00071         
0000 87CD0897000D1181 (     bootlink.asm):00072                 mod eom,name,tylg,atrv,start,msiz
     B700B50225
                      (     bootlink.asm):00073         
000D 626F6F746C696EEB (     bootlink.asm):00074         name    fcs /bootlink/
0015 01               (     bootlink.asm):00075                 fcb ed
                      (     bootlink.asm):00076         * All internally used strings here
0016 2F444440         (     bootlink.asm):00077         DNAME   fcc  '/DD@'
001A 000D             (     bootlink.asm):00078                 fdb  $0d
001C 2F534840         (     bootlink.asm):00079         SHNAME  fcc  '/SH@'
0020 000D             (     bootlink.asm):00080                 fdb  $0d
0022 2F7368           (     bootlink.asm):00081         SHDIR   fcc  '/sh'
0025 000D             (     bootlink.asm):00082                 fdb  $0d
0027 5348             (     bootlink.asm):00083         SHMOD   fcc  'SH'
0029 000D             (     bootlink.asm):00084                 fdb  $0d
002B 2F73682F4F533942 (     bootlink.asm):00085         SHBoot  fcc  '/sh/OS9Boot' have that file?
     6F6F74
0036 000D             (     bootlink.asm):00086                 fdb  $0d
0038 2F44442F5352432F (     bootlink.asm):00087         LSN0Sav fcc  '/DD/SRC/bootlink.LSN0'
     626F6F746C696E6B
     2E4C534E30
004D 000D             (     bootlink.asm):00088                 fdb  $0d
004F 2F44442F5352432F (     bootlink.asm):00089         LSN0tar fcc  '/DD/SRC/targetlink.LSN0'
     7461726765746C69
     6E6B2E4C534E30
0066 000D             (     bootlink.asm):00090                 fdb  $0d
0068 60               (     bootlink.asm):00091         bootmin fcb $60 only check high byte
0069 0001020304050607 (     bootlink.asm):00092         hextbll fcb $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
     08090A0B0C0D0E0F
0079 0010203040506070 (     bootlink.asm):00093         hextblh fcb $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
     8090A0B0C0D0E0F0
                      (     bootlink.asm):00094         
0089 6E6578742C207769 (     bootlink.asm):00095         vdpream fcc 'next, will do the equ of '
     6C6C20646F207468
     6520657175206F66
     20
00A2 646D6F6465       (     bootlink.asm):00096         vdmode$ fcc 'dmode' a printable string
00A7 202F736820737470 (     bootlink.asm):00097         dmodpar fcc ' /sh stp=$'
     3D24
00B1 3030             (     bootlink.asm):00098         dmodevd fcc '00'
00B3 0A               (     bootlink.asm):00099                 fcb $0a
00B4 0D               (     bootlink.asm):00100         dmodend fcb $0d
                      (     bootlink.asm):00101         
                      (     bootlink.asm):00102         * all allocated memory here
0000.                 (     bootlink.asm):00103         DBUF1   rmb 256 at 0,u drives base LSN0 when read in
0100.                 (     bootlink.asm):00104         DBUF2   rmb 256 at 256,u drives target LSN0
0200.                 (     bootlink.asm):00105         CMDL    rmb 2 READONLY pointer to command line args
0202.                 (     bootlink.asm):00106         OSID    rmb 2 holds 1st two bytes of OS9Boot
0204.                 (     bootlink.asm):00107         HEXB    rmb 1 scratchpad
0205.                 (     bootlink.asm):00108         STPHEX  rmb 3 storage for $276*HEXB
0208.                 (     bootlink.asm):00109         BFADR   rmb 3 size DD.BT
020B.                 (     bootlink.asm):00110         BFSIZ   rmb 2 size DD.SIZ
020D.                 (     bootlink.asm):00111         NBFADR  rmb 3 size new HDB-DOS DD.BT
0210.                 (     bootlink.asm):00112         NEWBTAD rmb 3 final addr move so 5 byte move works, is absolute addr
0213.                 (     bootlink.asm):00113         NBFSIZ  rmb 2 size new DD.SIZ
0215.                 (     bootlink.asm):00114         PATHN   rmb 1 pathnx I$Open returns
0216.                 (     bootlink.asm):00115         PATH2   rmb 1 pathno to sh@
0217.                 (     bootlink.asm):00116         DPRTSZ  rmb 3 size of device root part
021A.                 (     bootlink.asm):00117         OLDBTAD rmb 3 addr old boot file from LSN0 DD.BT
021D.                 (     bootlink.asm):00118         HEXASC  rmb 1 controls treatment of input, dec or hex
021E.                 (     bootlink.asm):00119         DLRPTR  rmb 2 save pointer to $ sign
0220.                 (     bootlink.asm):00120         ynumptr rmb 2 place to save x while getting input
0222.                 (     bootlink.asm):00121         stackp  rmb 2 place to hold stack at launch
0224.                 (     bootlink.asm):00122         ParamD  rmb 1 size of parameters passed at F$Fork that starts us
     0225             (     bootlink.asm):00123         msiz    equ .
                      (     bootlink.asm):00124         * any other strings are defined within the code as needed
                      (     bootlink.asm):00125         **********************************************
                      (     bootlink.asm):00126         * We run everything from here
00B5 10EFC90222       (     bootlink.asm):00127         start   sts stackp,u re-init the sp for exits!
00BA AFC90200         (     bootlink.asm):00128                 stx CMDL,u save for whatever ;)
00BE E7C90224         (     bootlink.asm):00129                 stb ParamD,u assume never over 256 bytes!
00C2 A7C9021D         (     bootlink.asm):00130                 sta HEXASC,u assume always 0 here
00C6 4F               (     bootlink.asm):00131                 clra
00C7 5F               (     bootlink.asm):00132                 clrb
00C8 EDC9021E         (     bootlink.asm):00133                 std  DLRPTR,u zero these
00CC A684             (     bootlink.asm):00134                 lda  ,x what char is x pointed at right now?
                      (     bootlink.asm):00135         * Ok, we have an argument, handle it
00CE 8124             (     bootlink.asm):00136         whatgot cmpa  #'$ what sort of an argument do we have?
                      (     bootlink.asm):00137         * is it a hex value, or a decimal, no leading $ sign?
00D0 2605             (     bootlink.asm):00138                 bne not$
00D2 1705A2           (     bootlink.asm):00139                 lbsr itshex
00D5 2003             (     bootlink.asm):00140                 bra  GotHEX
00D7 1705A7           (     bootlink.asm):00141         not$    lbsr numconv
00DA 17006F           (     bootlink.asm):00142         GotHEX  lbsr shomd got it show it
00DD 5F               (     bootlink.asm):00143                 clrb
00DE 3470             (     bootlink.asm):00144                 pshs u,y,x
00E0 170085           (     bootlink.asm):00145                 lbsr domode Link and UnLink screw with lots of stuff
00E3 3570             (     bootlink.asm):00146                 puls u,y,x
00E5 10250784         (     bootlink.asm):00147                 lbcs nodevic
00E9 5F               (     bootlink.asm):00148                 clrb
00EA 170097           (     bootlink.asm):00149                 lbsr GetLSNs works
00ED 1025078A         (     bootlink.asm):00150                 lbcs baddat
00F1 5F               (     bootlink.asm):00151                 clrb
00F2 170508           (     bootlink.asm):00152                 lbsr GetDin
00F5 10250782         (     bootlink.asm):00153                 lbcs baddat
00F9 5F               (     bootlink.asm):00154                 clrb
00FA 17045F           (     bootlink.asm):00155                 lbsr cklgimg
00FD 1025077A         (     bootlink.asm):00156                 lbcs baddat
0101 5F               (     bootlink.asm):00157                 clrb
0102 17008E           (     bootlink.asm):00158                 lbsr CalOfst
0105 10250772         (     bootlink.asm):00159                 lbcs baddat
0109 5F               (     bootlink.asm):00160                 clrb
010A 17023B           (     bootlink.asm):00161                 lbsr ShoRslt
010D 5F               (     bootlink.asm):00162                 clrb
010E 8D03             (     bootlink.asm):00163                 bsr  Cmitit actually do it!
0110 16077E           (     bootlink.asm):00164                 lbra end All done folks!
                      (     bootlink.asm):00165         
                      (     bootlink.asm):00166         ****SUBROUTINE****
0113 30C4             (     bootlink.asm):00167         Cmitit  leax DBUF1,u
0115 30C815           (     bootlink.asm):00168                 leax DD.BT,u
0118 31C90210         (     bootlink.asm):00169                 leay NEWBTAD,u
011C C605             (     bootlink.asm):00170                 ldb  #5 bytes to move
011E A6A0             (     bootlink.asm):00171         Comit   lda  ,y+
0120 A780             (     bootlink.asm):00172                 sta  ,x+
0122 5A               (     bootlink.asm):00173                 decb
0123 26F9             (     bootlink.asm):00174                 bne  Comit
0125 308DFEED         (     bootlink.asm):00175                 leax DNAME,pcr point at /sh@
0129 8602             (     bootlink.asm):00176                 lda  #WRITE.
012B 103F84           (     bootlink.asm):00177                 os9  I$Open
                      (     bootlink.asm):00178                 ifeq DEBUG-5
                      (     bootlink.asm):00179                 pshs cc
                      (     bootlink.asm):00180                 lde  #'O
                      (     bootlink.asm):00181                 ldf  #'P
                      (     bootlink.asm):00182                 os9  F$RegDmp
                      (     bootlink.asm):00183                 puls cc
                      (     bootlink.asm):00184                 endc
012E 251B             (     bootlink.asm):00185                 bcs  Comitnd
0130 A7C90215         (     bootlink.asm):00186                 sta  PATHN,u
0134 5F               (     bootlink.asm):00187                 clrb
0135 108E0100         (     bootlink.asm):00188                 ldy  #256   one sector
0139 30C4             (     bootlink.asm):00189                 leax DBUF1,u
013B A6C90215         (     bootlink.asm):00190                 lda  PATHN,u
013F 103F8A           (     bootlink.asm):00191                 os9  I$Write put the sector back
                      (     bootlink.asm):00192                 ifeq DEBUG-5
                      (     bootlink.asm):00193                 pshs cc
                      (     bootlink.asm):00194                 lde  #'W
                      (     bootlink.asm):00195                 ldf  #'R
                      (     bootlink.asm):00196                 os9  F$RegDmp
                      (     bootlink.asm):00197                 puls cc
                      (     bootlink.asm):00198                 endc
0142 2507             (     bootlink.asm):00199                 bcs  Comitnd
0144 A6C90215         (     bootlink.asm):00200                 lda  PATHN,u
0148 103F8F           (     bootlink.asm):00201                 os9  I$Close
                      (     bootlink.asm):00202                 ifeq DEBUG-5
                      (     bootlink.asm):00203                 pshs cc
                      (     bootlink.asm):00204                 lde  #'C
                      (     bootlink.asm):00205                 ldf  #'L
                      (     bootlink.asm):00206                 os9  F$RegDmp
                      (     bootlink.asm):00207                 puls cc
                      (     bootlink.asm):00208                 endc
014B 39               (     bootlink.asm):00209         Comitnd rts
                      (     bootlink.asm):00210         ****SUBROUTINE****
                      (     bootlink.asm):00211         * we should have the HDBDOS disk number in HEXB now
                      (     bootlink.asm):00212         * so show the equ dmode line but thats not how we'll do it
014C A6C90204         (     bootlink.asm):00213         shomd   lda  HEXB,u
0150 1704CC           (     bootlink.asm):00214                 lbsr hxb2asc
0153 308DFF5A         (     bootlink.asm):00215                 leax dmodevd,pcr
0157 ED84             (     bootlink.asm):00216                 std  ,x
0159 308DFF2C         (     bootlink.asm):00217                 leax vdpream,pcr
015D 8601             (     bootlink.asm):00218                 lda  #1
015F 108E002C         (     bootlink.asm):00219                 ldy  #1+dmodend-vdpream
0163 103F8A           (     bootlink.asm):00220                 os9  I$Write should show it on screen
0166 5F               (     bootlink.asm):00221                 clrb
0167 39               (     bootlink.asm):00222                 rts
                      (     bootlink.asm):00223         
                      (     bootlink.asm):00224         *****SUBROUTINE*****
                      (     bootlink.asm):00225         * now, set to fork dmode but crashes above
0168 5F               (     bootlink.asm):00226         domode  clrb clr any carry
0169 308DFEBA         (     bootlink.asm):00227                 leax SHMOD,pcr point at /sh\r string
016D 86F1             (     bootlink.asm):00228                 lda  #$f1
016F 3440             (     bootlink.asm):00229                 pshs u save it
0171 103F00           (     bootlink.asm):00230                 os9  F$Link
                      (     bootlink.asm):00231                 ifeq DEBUG-9
                      (     bootlink.asm):00232                 lde  #'F
                      (     bootlink.asm):00233                 ldf  #'L
                      (     bootlink.asm):00234                 pshs cc
                      (     bootlink.asm):00235                 os9  F$RegDmp
                      (     bootlink.asm):00236                 puls cc
                      (     bootlink.asm):00237                 endc
                      (     bootlink.asm):00238         
                      (     bootlink.asm):00239         * U now points at Header absolute address, but may not exist!
0174 102506F5         (     bootlink.asm):00240                 lbcs nodevic and this didn't work!
                      (     bootlink.asm):00241         * now, lets play here a bit
0178 1F32             (     bootlink.asm):00242                 tfr  u,y so we can use it
017A 3540             (     bootlink.asm):00243                 puls u  which should clean the stack
017C A6C90204         (     bootlink.asm):00244                 lda  HEXB,u
0180 A7A814           (     bootlink.asm):00245                 sta  IT.STP,y which should do it but screws the crc. do we care?
0183 39               (     bootlink.asm):00246                 rts  done here, works!        
                      (     bootlink.asm):00247         
0184 1702D9           (     bootlink.asm):00248         GetLSNs lbsr BaseLSN Get LSN0 from /DD@
0187 10250706         (     bootlink.asm):00249                 lbcs end nothing on stack here
018B 170320           (     bootlink.asm):00250                 lbsr SHLSN0 Get LSN0 from /sh@
018E 102506FF         (     bootlink.asm):00251                 lbcs end nothing on stack
                      (     bootlink.asm):00252                 ifne DEBUG if no debug, don't create check files
                      (     bootlink.asm):00253                 lbsr Creat1 make test files that can be dumped
                      (     bootlink.asm):00254                 lbcs end nothing on stack if we are here
                      (     bootlink.asm):00255                 lbsr Creat2 ditto
                      (     bootlink.asm):00256                 lbcs end stack s/b ok
                      (     bootlink.asm):00257                 endc
0192 39               (     bootlink.asm):00258                 rts
                      (     bootlink.asm):00259         
                      (     bootlink.asm):00260         **********CalOfst*********************
                      (     bootlink.asm):00261         * we have all the data, so we need to calculate
                      (     bootlink.asm):00262         * the additional LSN offset for the HEXB (stp) value we should have
                      (     bootlink.asm):00263         * this will be $276*HEXB, and will store the result in STPHEX,u
                      (     bootlink.asm):00264         * First, clear var holder & make some space on stack
0193 4F               (     bootlink.asm):00265         CalOfst clra
0194 A7C90205         (     bootlink.asm):00266                 sta  STPHEX,u
0198 A7C90206         (     bootlink.asm):00267                 sta  STPHEX+1,u
019C A7C90207         (     bootlink.asm):00268                 sta  STPHEX+2,u
01A0 327C             (     bootlink.asm):00269                 leas -4,s
01A2 A6C90204         (     bootlink.asm):00270                 lda  HEXB,u
01A6 C676             (     bootlink.asm):00271                 ldb  #$76
01A8 3D               (     bootlink.asm):00272                 mul
01A9 ED62             (     bootlink.asm):00273                 std  2,s
01AB A6C90204         (     bootlink.asm):00274                 lda  HEXB,u
01AF C602             (     bootlink.asm):00275                 ldb  #$02
01B1 3D               (     bootlink.asm):00276                 mul
01B2 EDE4             (     bootlink.asm):00277                 std  ,s
01B4 5F               (     bootlink.asm):00278                 clrb
01B5 A661             (     bootlink.asm):00279                 lda  1,s
01B7 E362             (     bootlink.asm):00280                 addd 2,s
01B9 ED62             (     bootlink.asm):00281                 std  2,s
01BB 2402             (     bootlink.asm):00282                 bcc missinc
01BD 6CE4             (     bootlink.asm):00283                 inc  ,s
01BF A6E4             (     bootlink.asm):00284         missinc lda  ,s
01C1 A761             (     bootlink.asm):00285                 sta  1,s
01C3 EC62             (     bootlink.asm):00286                 ldd  2,s
01C5 E3C90206         (     bootlink.asm):00287                 addd STPHEX+1,u
01C9 EDC90206         (     bootlink.asm):00288                 std  STPHEX+1,u
01CD A661             (     bootlink.asm):00289                 lda  1,s
01CF A9C90205         (     bootlink.asm):00290                 adca STPHEX,u
01D3 A7C90205         (     bootlink.asm):00291                 sta  STPHEX,u
01D7 3264             (     bootlink.asm):00292                 leas 4,s restore stack
                      (     bootlink.asm):00293                 ifeq DEBUG-3
                      (     bootlink.asm):00294                 ldd  HEXB,u
                      (     bootlink.asm):00295                 ldw  STPHEX+1,u
                      (     bootlink.asm):00296                 pshs cc
                      (     bootlink.asm):00297                 os9  F$RegDmp
                      (     bootlink.asm):00298                 puls cc
                      (     bootlink.asm):00299                 endc
                      (     bootlink.asm):00300         * here we do straight additions with carry for 3 bytes
01D9 4F               (     bootlink.asm):00301                 clra
01DA E6C90219         (     bootlink.asm):00302                 ldb  DPRTSZ+2,u get low byte of partition end
01DE EBC90207         (     bootlink.asm):00303                 addb STPHEX+2,u  add low byte of calculated vdisk
01E2 8900             (     bootlink.asm):00304                 adca #0 handle carry if
01E4 EBC9020F         (     bootlink.asm):00305                 addb NBFADR+2,u
01E8 8900             (     bootlink.asm):00306                 adca #0 handle any carry's
01EA E7C90212         (     bootlink.asm):00307                 stb  NEWBTAD+2,u
01EE 1F89             (     bootlink.asm):00308                 tfr  a,b do 2nd byte of 3, carry added above, now in b
01F0 4F               (     bootlink.asm):00309                 clra
01F1 EBC9020E         (     bootlink.asm):00310                 addb NBFADR+1,u very slim chance of carry, but not 0
01F5 8900             (     bootlink.asm):00311                 adca #0 transfer the carry to a
01F7 EBC90206         (     bootlink.asm):00312                 addb STPHEX+1,u
01FB 8900             (     bootlink.asm):00313                 adca #0 chance of carry, handle
01FD EBC90218         (     bootlink.asm):00314                 addb DPRTSZ+1,u
0201 8900             (     bootlink.asm):00315                 adca #0 chance of carry, handle
0203 E7C90211         (     bootlink.asm):00316                 stb  NEWBTAD+1,u
0207 1F89             (     bootlink.asm):00317                 tfr  a,b potential carry's in b now
0209 4F               (     bootlink.asm):00318                 clra
020A EBC9020D         (     bootlink.asm):00319                 addb NBFADR,u add to potential carry
020E EBC90205         (     bootlink.asm):00320                 addb STPHEX,u astronomical chance of carry here
0212 EBC90217         (     bootlink.asm):00321                 addb DPRTSZ,u or here, no place to put it anyway
0216 E7C90210         (     bootlink.asm):00322                 stb  NEWBTAD,u
                      (     bootlink.asm):00323                 ifeq DEBUG-4
                      (     bootlink.asm):00324                 ldw  NEWBTAD+1,u
                      (     bootlink.asm):00325                 pshs cc
                      (     bootlink.asm):00326                 os9 F$RegDmp
                      (     bootlink.asm):00327                 puls cc
                      (     bootlink.asm):00328                 endc
021A 39               (     bootlink.asm):00329                 rts  All done!!
                      (     bootlink.asm):00330         
                      (     bootlink.asm):00331         *********SUBROUTINES***********
                      (     bootlink.asm):00332         * support strings for ShoRslt
                      (     bootlink.asm):00333         
021B 4469736B20686173 (     bootlink.asm):00334         Shopart fcc 'Disk has an os9 partition size of = $'
     20616E206F733920
     706172746974696F
     6E2073697A65206F
     66203D2024
0240 303030303030     (     bootlink.asm):00335         partsiz fcc '000000'
0246 0A0D             (     bootlink.asm):00336                 fdb $0a0d works
0248 4F726967696E616C (     bootlink.asm):00337         Shoddbt fcc 'Original OS9Boot file location = $'
     204F5339426F6F74
     2066696C65206C6F
     636174696F6E203D
     2024
026A 303030303030     (     bootlink.asm):00338         Oldd.bt fcc '000000'
0270 0A0D             (     bootlink.asm):00339                 fdb $0a0d works
0272 4F726967696E616C (     bootlink.asm):00340         Shorsiz fcc 'Original OS9Boot file size is = $'
     204F5339426F6F74
     2066696C65207369
     7A65206973203D20
     24
0293 30303030         (     bootlink.asm):00341         Oldbsiz fcc '0000'
0297 0A0D             (     bootlink.asm):00342                 fdb $0a0d works
0299 546865206E657720 (     bootlink.asm):00343         Shonbad fcc 'The new bootfile location in /sh is = $'
     626F6F7466696C65
     206C6F636174696F
     6E20696E202F7368
     206973203D2024
02C0 303030303030     (     bootlink.asm):00344         nblocat fcc '000000'
02C6 0A0D             (     bootlink.asm):00345                 fdb $0a0d works
02C8 546869732077696C (     bootlink.asm):00346         Shabslo fcc 'This will be at actual $'
     6C20626520617420
     61637475616C2024
02E0 303030303030     (     bootlink.asm):00347         absolut fcc '000000'
02E6 20736563746F7220 (     bootlink.asm):00348                 fcc ' sector on the drive'
     6F6E207468652064
     72697665
02FA 0A0D             (     bootlink.asm):00349                 fdb  $0a0d works
02FC 546865206E657720 (     bootlink.asm):00350         Shnbsiz fcc 'The new OS9Boot file size is = $'
     4F5339426F6F7420
     66696C652073697A
     65206973203D2024
031C 30303030         (     bootlink.asm):00351         nbsize  fcc '0000'
0320 0A0D             (     bootlink.asm):00352                 fdb $0a0d
0322 5768696368206973 (     bootlink.asm):00353         Shhdbvd fcc 'Which is located in HDB-DOS disk $'
     206C6F6361746564
     20696E204844422D
     444F53206469736B
     2024
0344 3030             (     bootlink.asm):00354         Shdbdos fcc '00'
0346 0A0D             (     bootlink.asm):00355                 fdb $0a0d
     0348             (     bootlink.asm):00356         Sendstr equ * need ending data marker
0348 308DFEF4         (     bootlink.asm):00357         ShoRslt leax partsiz,pcr
034C A6C90217         (     bootlink.asm):00358                 lda  DPRTSZ,u
0350 1702CC           (     bootlink.asm):00359                 lbsr hxb2asc
0353 ED81             (     bootlink.asm):00360                 std  ,x++ first 2 ascii digits
0355 A6C90218         (     bootlink.asm):00361                 lda  DPRTSZ+1,u
0359 1702C3           (     bootlink.asm):00362                 lbsr hxb2asc
035C ED81             (     bootlink.asm):00363                 std  ,x++ next 2 ascii digits
035E A6C90219         (     bootlink.asm):00364                 lda  DPRTSZ+2,u
0362 1702BA           (     bootlink.asm):00365                 lbsr hxb2asc
0365 ED84             (     bootlink.asm):00366                 std  ,x last 2 ascii digits
0367 308DFEB0         (     bootlink.asm):00367                 leax Shopart,pcr now print it
036B 108E002D         (     bootlink.asm):00368                 ldy  #Shoddbt-Shopart
036F 8601             (     bootlink.asm):00369                 lda  #1
0371 103F8A           (     bootlink.asm):00370                 os9  I$Write
0374 5F               (     bootlink.asm):00371                 clrb
0375 308DFEF1         (     bootlink.asm):00372         ShDD.BT leax Oldd.bt,pcr
0379 A6C9021A         (     bootlink.asm):00373                 lda  OLDBTAD,u
037D 17029F           (     bootlink.asm):00374                 lbsr hxb2asc
0380 ED81             (     bootlink.asm):00375                 std  ,x++
0382 A6C9021B         (     bootlink.asm):00376                 lda  OLDBTAD+1,u
0386 170296           (     bootlink.asm):00377                 lbsr hxb2asc
0389 ED81             (     bootlink.asm):00378                 std  ,x++
038B A6C9021C         (     bootlink.asm):00379                 lda  OLDBTAD+2,u
038F 17028D           (     bootlink.asm):00380                 lbsr hxb2asc
0392 ED84             (     bootlink.asm):00381                 std  ,x
0394 308DFEB0         (     bootlink.asm):00382                 leax Shoddbt,pcr
0398 108E002A         (     bootlink.asm):00383                 ldy  #Shorsiz-Shoddbt
039C 8601             (     bootlink.asm):00384                 lda #1
039E 103F8A           (     bootlink.asm):00385                 os9 I$Write
03A1 5F               (     bootlink.asm):00386                 clrb
03A2 308DFEED         (     bootlink.asm):00387         oldbtsz leax  Oldbsiz,pcr
03A6 A6C9020B         (     bootlink.asm):00388                 lda  BFSIZ,u
03AA 170272           (     bootlink.asm):00389                 lbsr hxb2asc
03AD ED81             (     bootlink.asm):00390                 std  ,x++
03AF A6C9020C         (     bootlink.asm):00391                 lda  BFSIZ+1,u
03B3 170269           (     bootlink.asm):00392                 lbsr hxb2asc
03B6 ED84             (     bootlink.asm):00393                 std  ,x
03B8 308DFEB6         (     bootlink.asm):00394                 leax Shorsiz,pcr
03BC 108E0027         (     bootlink.asm):00395                 ldy  #Shonbad-Shorsiz
03C0 8601             (     bootlink.asm):00396                 lda  #1 stdout
03C2 103F8A           (     bootlink.asm):00397                 os9  I$Write
03C5 5F               (     bootlink.asm):00398                 clrb
03C6 308DFEF6         (     bootlink.asm):00399                 leax nblocat,pcr
03CA A6C9020D         (     bootlink.asm):00400                 lda NBFADR,u
03CE 17024E           (     bootlink.asm):00401                 lbsr hxb2asc
03D1 ED81             (     bootlink.asm):00402                 std  ,x++
03D3 A6C9020E         (     bootlink.asm):00403                 lda  NBFADR+1,u
03D7 170245           (     bootlink.asm):00404                 lbsr hxb2asc
03DA ED81             (     bootlink.asm):00405                 std  ,x++
03DC A6C9020F         (     bootlink.asm):00406                 lda  NBFADR+2,u
03E0 17023C           (     bootlink.asm):00407                 lbsr hxb2asc
03E3 ED84             (     bootlink.asm):00408                 std  ,x last byte
03E5 308DFEB0         (     bootlink.asm):00409                 leax Shonbad,pcr
03E9 108E002F         (     bootlink.asm):00410                 ldy  #Shabslo-Shonbad
03ED 8601             (     bootlink.asm):00411                 lda #1
03EF 103F8A           (     bootlink.asm):00412                 os9  I$Write
03F2 5F               (     bootlink.asm):00413                 clrb
                      (     bootlink.asm):00414         * now show its size
03F3 308DFF25         (     bootlink.asm):00415                 leax nbsize,pcr
03F7 A6C90213         (     bootlink.asm):00416                 lda  NBFSIZ,u
03FB 170221           (     bootlink.asm):00417                 lbsr hxb2asc
03FE ED81             (     bootlink.asm):00418                 std  ,x++
0400 A6C90214         (     bootlink.asm):00419                 lda  NBFSIZ+1,u
0404 170218           (     bootlink.asm):00420                 lbsr hxb2asc
0407 ED84             (     bootlink.asm):00421                 std ,x
0409 308DFEEF         (     bootlink.asm):00422                 leax Shnbsiz,pcr
040D 108E0026         (     bootlink.asm):00423                 ldy  #Shhdbvd-Shnbsiz
0411 8601             (     bootlink.asm):00424                 lda #1
0413 103F8A           (     bootlink.asm):00425                 os9  I$Write
0416 5F               (     bootlink.asm):00426                 clrb
0417 308DFEC5         (     bootlink.asm):00427         abslutA leax absolut,pcr
041B A6C90210         (     bootlink.asm):00428                 lda  NEWBTAD,u
041F 1701FD           (     bootlink.asm):00429                 lbsr hxb2asc
0422 ED81             (     bootlink.asm):00430                 std  ,x++
0424 A6C90211         (     bootlink.asm):00431                 lda  NEWBTAD+1,u
0428 1701F4           (     bootlink.asm):00432                 lbsr hxb2asc
042B ED81             (     bootlink.asm):00433                 std  ,x++
042D A6C90212         (     bootlink.asm):00434                 lda  NEWBTAD+2,u
0431 1701EB           (     bootlink.asm):00435                 lbsr hxb2asc
0434 ED84             (     bootlink.asm):00436                 std  ,x
0436 308DFE8E         (     bootlink.asm):00437                 leax Shabslo,pcr
043A 108E0034         (     bootlink.asm):00438                 ldy  #Shnbsiz-Shabslo
043E 8601             (     bootlink.asm):00439                 lda  #1
0440 103F8A           (     bootlink.asm):00440                 os9  I$Write
0443 5F               (     bootlink.asm):00441                 clrb
0444 308DFEFC         (     bootlink.asm):00442                 leax  Shdbdos,pcr
0448 A6C90204         (     bootlink.asm):00443                 lda   HEXB,u
044C 1701D0           (     bootlink.asm):00444                 lbsr hxb2asc
044F ED84             (     bootlink.asm):00445                 std  ,x
0451 308DFECD         (     bootlink.asm):00446                 leax Shhdbvd,pcr
0455 108E0026         (     bootlink.asm):00447                 ldy #Sendstr-Shhdbvd
0459 8601             (     bootlink.asm):00448                 lda  #1
045B 103F8A           (     bootlink.asm):00449                 os9  I$Write
045E 5F               (     bootlink.asm):00450                 clrb
045F 39               (     bootlink.asm):00451         ShoEnd  rts
                      (     bootlink.asm):00452         
                      (     bootlink.asm):00453         * Get the LSN0 data from /DD
                      (     bootlink.asm):00454         * arrive here with 1 bsr on stack
0460 8601             (     bootlink.asm):00455         BaseLSN lda  #READ. Read mode
0462 308DFBB0         (     bootlink.asm):00456                 leax DNAME,pcr point at device name
0466 103F84           (     bootlink.asm):00457                 os9  I$Open open it raw
0469 2542             (     bootlink.asm):00458                 bcs  Basend  report the error
046B A7C90215         (     bootlink.asm):00459                 sta  PATHN,u Save path#
046F 30C4             (     bootlink.asm):00460                 leax DBUF1,u point x at DBUF,u
0471 108E0100         (     bootlink.asm):00461                 ldy  #256    size of buffer
0475 A6C90215         (     bootlink.asm):00462                 lda  PATHN,u get path# back in case regs.a wrong
0479 103F89           (     bootlink.asm):00463                 os9  I$Read and read 256 byte of /dd@ LSN0
047C 252F             (     bootlink.asm):00464                 bcs  Basend report the error
                      (     bootlink.asm):00465         * got the sector, save the interesting data
047E 3410             (     bootlink.asm):00466                 pshs x
0480 308815           (     bootlink.asm):00467                 leax DD.BT,x
                      (     bootlink.asm):00468                 ifeq DEBUG-1
                      (     bootlink.asm):00469                 pshs cc
                      (     bootlink.asm):00470                 lde  #'O
                      (     bootlink.asm):00471                 ldf  #'A
                      (     bootlink.asm):00472                 os9  F$RegDmp look at x
                      (     bootlink.asm):00473                 puls cc
                      (     bootlink.asm):00474                 endc
0483 EC81             (     bootlink.asm):00475                 ldd  ,x++
0485 EDC9021A         (     bootlink.asm):00476                 std  OLDBTAD,u
0489 E680             (     bootlink.asm):00477                 ldb  ,x+
048B E7C9021C         (     bootlink.asm):00478                 stb  OLDBTAD+2,u
048F EC84             (     bootlink.asm):00479                 ldd  ,x
0491 EDC9020B         (     bootlink.asm):00480                 std  BFSIZ,u
0495 ECC4             (     bootlink.asm):00481                 ldd  DBUF1,u get partition size
0497 EDC90217         (     bootlink.asm):00482                 std  DPRTSZ,u
049B A642             (     bootlink.asm):00483                 lda  DBUF1+2,u last byte
049D A7C90219         (     bootlink.asm):00484                 sta  DPRTSZ+2,u
                      (     bootlink.asm):00485                 ifeq DEBUG-1
                      (     bootlink.asm):00486                 ldf #'B
                      (     bootlink.asm):00487                 pshs cc
                      (     bootlink.asm):00488                 os9  F$RegDmp
                      (     bootlink.asm):00489                 puls cc
                      (     bootlink.asm):00490                 endc
04A1 3510             (     bootlink.asm):00491                 puls x clean up the stack & restore x
04A3 A6C90215         (     bootlink.asm):00492                 lda  PATHN,u restore regs.a in case
04A7 103F8F           (     bootlink.asm):00493                 os9  I$Close and close path to /dd@
04AA 2501             (     bootlink.asm):00494                 bcs  Basend
04AC 5F               (     bootlink.asm):00495                 clrb
04AD 39               (     bootlink.asm):00496         Basend  rts
                      (     bootlink.asm):00497         
                      (     bootlink.asm):00498         ******************************************
                      (     bootlink.asm):00499         * Get the LSN0 data from /sh@
                      (     bootlink.asm):00500         * should arrive here with 1 bsr on stack
04AE 8601             (     bootlink.asm):00501         SHLSN0  lda  #READ.  read mode
04B0 308DFB68         (     bootlink.asm):00502                 leax SHNAME,pcr
04B4 103F84           (     bootlink.asm):00503                 os9 I$Open open it raw
04B7 2539             (     bootlink.asm):00504                 bcs SHCKend report the error
04B9 A7C90216         (     bootlink.asm):00505                 sta PATH2,u  save the path number
04BD 30C90100         (     bootlink.asm):00506                 leax DBUF2,u
04C1 108E0100         (     bootlink.asm):00507                 ldy #256
04C5 A6C90216         (     bootlink.asm):00508                 lda PATH2,u get our pathno back
04C9 103F89           (     bootlink.asm):00509                 os9 I$Read  and read the 256 bytes of /sh@
04CC 2524             (     bootlink.asm):00510                 bcs SHCKend report the error
04CE 3410             (     bootlink.asm):00511                 pshs x
04D0 30C90100         (     bootlink.asm):00512                 leax DBUF2,u get the location & size of this bootfile
04D4 308815           (     bootlink.asm):00513                 leax DD.BT,x
04D7 EC81             (     bootlink.asm):00514                 ldd  ,x++
04D9 EDC9020D         (     bootlink.asm):00515                 std  NBFADR,u
04DD A680             (     bootlink.asm):00516                 lda  ,x+
04DF A7C9020F         (     bootlink.asm):00517                 sta  NBFADR+2,u
04E3 EC84             (     bootlink.asm):00518                 ldd  ,x
04E5 EDC90213         (     bootlink.asm):00519                 std  NBFSIZ,u
                      (     bootlink.asm):00520                 ifeq DEBUG-1
                      (     bootlink.asm):00521                 pshs cc
                      (     bootlink.asm):00522                 lde  #'2
                      (     bootlink.asm):00523                 ldf  #'A
                      (     bootlink.asm):00524                 os9  F$RegDmp
                      (     bootlink.asm):00525                 puls cc
                      (     bootlink.asm):00526                 endc
04E9 3510             (     bootlink.asm):00527                 puls x
04EB A6C90216         (     bootlink.asm):00528                 lda PATH2,u
04EF 103F8F           (     bootlink.asm):00529                 os9 I$Close
                      (     bootlink.asm):00530         * we have added nothing to the stack
04F2 39               (     bootlink.asm):00531         SHCKend rts if err, report
                      (     bootlink.asm):00532         
                      (     bootlink.asm):00533         *****************************************
                      (     bootlink.asm):00534         * now create trace dumps
                      (     bootlink.asm):00535         * this could be removed in final
                      (     bootlink.asm):00536         * should arrive here with 1 bsr on stack
04F3 308DFB41         (     bootlink.asm):00537         Creat1  leax LSN0Sav,pcr point x at filename to save LSN0 in
04F7 C61B             (     bootlink.asm):00538                 ldb #UPDAT.+PREAD.+PWRIT. global read+write attr's
04F9 861B             (     bootlink.asm):00539                 lda #UPDAT.+PREAD.+PWRIT. real attr's go in regs.b dummy
04FB 103F83           (     bootlink.asm):00540                 os9 I$Create and create it, s/b empty file
04FE 251D             (     bootlink.asm):00541                 bcs Cr1fix
0500 A7C90215         (     bootlink.asm):00542         cont1   sta PATHN,u save the path# returned
0504 A6C90215         (     bootlink.asm):00543                 lda PATHN,u
0508 30C4             (     bootlink.asm):00544                 leax DBUF1,u point x at buffer we read from /dd@
050A 108E0100         (     bootlink.asm):00545                 ldy #256 amount to write
050E 103F8A           (     bootlink.asm):00546                 os9 I$Write and write it to the file
0511 2509             (     bootlink.asm):00547                 bcs Cr1end
0513 A6C90215         (     bootlink.asm):00548                 lda PATHN,u it could be played with, get it back
0517 5F               (     bootlink.asm):00549                 clrb just in case
0518 103F8F           (     bootlink.asm):00550                 os9 I$Close
051B 5F               (     bootlink.asm):00551                 clrb
051C 39               (     bootlink.asm):00552         Cr1end  rts should clean up the bsr on stack
                      (     bootlink.asm):00553         
051D 308DFB17         (     bootlink.asm):00554         Cr1fix  leax LSN0Sav,pcr
0521 103F87           (     bootlink.asm):00555                 os9  I$Delete
0524 25F6             (     bootlink.asm):00556                 bcs  Cr1end can't fix, some other error
0526 20CB             (     bootlink.asm):00557                 bra  Creat1 go back and try again
                      (     bootlink.asm):00558         
     0528             (     bootlink.asm):00559         Creat2  equ * lets go make the 2nd file
                      (     bootlink.asm):00560                 ifeq DEBUG-2
                      (     bootlink.asm):00561         * Tally we got here
                      (     bootlink.asm):00562                 lde #'C
                      (     bootlink.asm):00563                 ldf #'2
                      (     bootlink.asm):00564                 pshs cc
                      (     bootlink.asm):00565                 os9 F$RegDmp
                      (     bootlink.asm):00566                 puls cc
                      (     bootlink.asm):00567                 endc
0528 308DFB23         (     bootlink.asm):00568                 leax LSN0tar,pcr
052C 861B             (     bootlink.asm):00569                 lda #UPDAT.+PREAD.+PWRIT.
052E C61B             (     bootlink.asm):00570                 ldb #UPDAT.+PREAD.+PWRIT.
0530 103F83           (     bootlink.asm):00571                 os9 I$Create s/b empty file
0533 251B             (     bootlink.asm):00572                 bcs Cr2fix
0535 A7C90216         (     bootlink.asm):00573         cont2   sta PATH2,u
0539 30C90100         (     bootlink.asm):00574                 leax DBUF2,u
053D 108E0100         (     bootlink.asm):00575                 ldy #256
0541 103F8A           (     bootlink.asm):00576                 os9 I$Write
0544 2509             (     bootlink.asm):00577                 bcs Cr2end
0546 A6C90216         (     bootlink.asm):00578                 lda PATH2,u
054A 5F               (     bootlink.asm):00579                 clrb
054B 103F8F           (     bootlink.asm):00580                 os9 I$Close
054E 5F               (     bootlink.asm):00581                 clrb  successful, no?
054F 39               (     bootlink.asm):00582         Cr2end  rts should clean stack
                      (     bootlink.asm):00583         
0550 308DFAFB         (     bootlink.asm):00584         Cr2fix  leax LSN0tar,pcr
0554 5F               (     bootlink.asm):00585                 clrb clr error?
0555 103F87           (     bootlink.asm):00586                 os9  I$Delete
0558 25F5             (     bootlink.asm):00587                 bcs  Cr2end some other error, report
055A 20CC             (     bootlink.asm):00588                 bra  Creat2 else go back and try again
                      (     bootlink.asm):00589         * eventually these fixes need to check the return err
                      (     bootlink.asm):00590         * and if not 218, bail plumb out
                      (     bootlink.asm):00591         ******************************************
                      (     bootlink.asm):00592         * check legal image, do we have an os9
                      (     bootlink.asm):00593         * spec LSN0 in DBUF2,u?
                      (     bootlink.asm):00594         * should arrive here with 1 bsr on stack
055C 30C90100         (     bootlink.asm):00595         cklgimg leax DBUF2,u
0560 5F               (     bootlink.asm):00596                 clrb our error counter
0561 A680             (     bootlink.asm):00597                 lda ,x+ sets z flag if $00
                      (     bootlink.asm):00598                 ifeq DEBUG-9
                      (     bootlink.asm):00599                 tfr  pc,w
                      (     bootlink.asm):00600                 pshs cc
                      (     bootlink.asm):00601                 os9  F$RegDmp
                      (     bootlink.asm):00602                 puls cc
                      (     bootlink.asm):00603                 endc
0563 2701             (     bootlink.asm):00604                 beq badbuf1
0565 5C               (     bootlink.asm):00605                 incb
0566 A680             (     bootlink.asm):00606         badbuf1 lda ,x+ get next byte, better be a $02
0568 8102             (     bootlink.asm):00607                 cmpa #$02
                      (     bootlink.asm):00608                 ifeq DEBUG-9
                      (     bootlink.asm):00609                 pshs cc
                      (     bootlink.asm):00610                 tfr pc,w
                      (     bootlink.asm):00611                 os9  F$RegDmp
                      (     bootlink.asm):00612                 puls cc
                      (     bootlink.asm):00613                 endc
056A 2701             (     bootlink.asm):00614                 beq  badbuf2
056C 5C               (     bootlink.asm):00615                 incb
056D A680             (     bootlink.asm):00616         badbuf2 lda ,x+ better be a $76
056F 8176             (     bootlink.asm):00617                 cmpa #$76
                      (     bootlink.asm):00618                 ifeq DEBUG-9
                      (     bootlink.asm):00619                 pshs cc
                      (     bootlink.asm):00620                 tfr  pc,w
                      (     bootlink.asm):00621                 os9  F$RegDmp
                      (     bootlink.asm):00622                 puls cc
                      (     bootlink.asm):00623                 endc
0571 2701             (     bootlink.asm):00624                 beq badbuf3
0573 5C               (     bootlink.asm):00625                 incb
0574 30C90100         (     bootlink.asm):00626         badbuf3 leax DBUF2,u    reset x
0578 308815           (     bootlink.asm):00627                 leax DD.BT,x point x at DD.BT
057B A680             (     bootlink.asm):00628                 lda ,x+ first byte of DD.BT
057D 2701             (     bootlink.asm):00629                 beq bt1
057F 5C               (     bootlink.asm):00630                 incb
0580 A680             (     bootlink.asm):00631         bt1     lda ,x+ 2nd byte of DD.BT s/b a $00 too
0582 2701             (     bootlink.asm):00632                 beq bt2
0584 5C               (     bootlink.asm):00633                 incb
0585 A680             (     bootlink.asm):00634         bt2     lda ,x+ last byte of DD.BT s/b non-zero     
0587 2601             (     bootlink.asm):00635                 bne bt3 got something, skip the incb
0589 5C               (     bootlink.asm):00636                 incb
058A 5D               (     bootlink.asm):00637         bt3     tstb non zero? error!
                      (     bootlink.asm):00638                 ifeq DEBUG-9
                      (     bootlink.asm):00639                 pshs cc
                      (     bootlink.asm):00640                 tfr  pc,w
                      (     bootlink.asm):00641                 os9  F$RegDmp
                      (     bootlink.asm):00642                 puls cc
                      (     bootlink.asm):00643                 endc
058B 102602EC         (     bootlink.asm):00644                 lbne baddat
                      (     bootlink.asm):00645         * got this far, what size is it?
058F A680             (     bootlink.asm):00646                 lda ,x+ get 1st byte of DD.BSZ
                      (     bootlink.asm):00647         * now here, this is subjective, I've not seen a boot file
                      (     bootlink.asm):00648         * that wasn't at least #$5000 long
0591 A18DFAD3         (     bootlink.asm):00649                 cmpa bootmin,pcr   abs minn length IMO
                      (     bootlink.asm):00650                 ifeq DEBUG-9
                      (     bootlink.asm):00651                 pshs cc
                      (     bootlink.asm):00652                 tfr  pc,w
                      (     bootlink.asm):00653                 os9  F$RegDmp
                      (     bootlink.asm):00654                 puls cc
                      (     bootlink.asm):00655                 endc
0595 2401             (     bootlink.asm):00656                 bcc  noBinc
0597 5C               (     bootlink.asm):00657                 incb
                      (     bootlink.asm):00658         * no illegal value to 2nd byte, don't bother
                      (     bootlink.asm):00659         
                      (     bootlink.asm):00660         *********************************
                      (     bootlink.asm):00661         * now check the DD.DIR & regs.b is still $00 if got here
0598 30C90100         (     bootlink.asm):00662         noBinc  leax DBUF2,u point x at sh's buffer
059C 3008             (     bootlink.asm):00663                 leax DD.DIR,x now point at 1st byte of DD.dir
059E A680             (     bootlink.asm):00664                 lda  ,x+ /sb $00, no floppy can be non-zero
05A0 2701             (     bootlink.asm):00665                 beq dir1
05A2 5C               (     bootlink.asm):00666                 incb opps, really bad data
05A3 A680             (     bootlink.asm):00667         dir1    lda ,x+ 2nd byte, for floppy s/b $00 if mb made the disk
05A5 2701             (     bootlink.asm):00668                 beq dir2 is legal
05A7 5C               (     bootlink.asm):00669                 incb not zero, tally as bad
05A8 A680             (     bootlink.asm):00670         dir2    lda ,x+ get 3rd byte, s/b a $02
05AA 8102             (     bootlink.asm):00671                 cmpa #$02 as it should be for a valid floppy
05AC 2701             (     bootlink.asm):00672                 beq dir3
05AE 5C               (     bootlink.asm):00673                 incb not a $02, tally it as bad
05AF 5D               (     bootlink.asm):00674         dir3    tstb
                      (     bootlink.asm):00675                 ifeq DEBUG-9
                      (     bootlink.asm):00676                 pshs cc
                      (     bootlink.asm):00677                 tfr  pc,w
                      (     bootlink.asm):00678                 os9  F$RegDmp
                      (     bootlink.asm):00679                 puls cc
                      (     bootlink.asm):00680                 endc
05B0 2701             (     bootlink.asm):00681                 beq  getdrsh
05B2 5C               (     bootlink.asm):00682                 incb
05B3 8681             (     bootlink.asm):00683         getdrsh lda #READ.+DIR. open for read only
05B5 308DFA69         (     bootlink.asm):00684                 leax SHDIR,pcr
05B9 103F84           (     bootlink.asm):00685                 os9 I$Open see if is has a dir
                      (     bootlink.asm):00686                 ifeq DEBUG-9
                      (     bootlink.asm):00687                 pshs cc
                      (     bootlink.asm):00688                 tfr  pc,w
                      (     bootlink.asm):00689                 os9  F$RegDmp
                      (     bootlink.asm):00690                 puls cc
                      (     bootlink.asm):00691                 endc
05BC 2401             (     bootlink.asm):00692                 bcc scapinc
05BE 5C               (     bootlink.asm):00693                 incb
05BF 103F8F           (     bootlink.asm):00694         scapinc os9 I$Close clean up the path table
                      (     bootlink.asm):00695         ************************************************
                      (     bootlink.asm):00696         * got here ok, can we open the OS9Boot file?
05C2 308DFA65         (     bootlink.asm):00697         chkboot leax SHBoot,pcr
05C6 8601             (     bootlink.asm):00698                 lda  #READ.
05C8 103F84           (     bootlink.asm):00699                 os9  I$Open
                      (     bootlink.asm):00700                 ifeq DEBUG-9
                      (     bootlink.asm):00701                 pshs cc
                      (     bootlink.asm):00702                 tfr  pc,w
                      (     bootlink.asm):00703                 os9  F$RegDmp
                      (     bootlink.asm):00704                 puls cc
                      (     bootlink.asm):00705                 endc
05CB 2401             (     bootlink.asm):00706                 bcc scipinc
05CD 5C               (     bootlink.asm):00707                 incb
05CE A7C90216         (     bootlink.asm):00708         scipinc sta  PATH2,u file must exist
05D2 30C90202         (     bootlink.asm):00709                 leax OSID,u
05D6 108E0002         (     bootlink.asm):00710                 ldy  #0002 bytes to read
05DA 103F89           (     bootlink.asm):00711                 os9  I$Read
                      (     bootlink.asm):00712                 ifeq DEBUG-9
                      (     bootlink.asm):00713                 pshs cc
                      (     bootlink.asm):00714                 tfr  pc,w
                      (     bootlink.asm):00715                 os9  F$RegDmp
                      (     bootlink.asm):00716                 puls cc
                      (     bootlink.asm):00717                 endc
05DD 2401             (     bootlink.asm):00718                 bcc skpinc
05DF 5C               (     bootlink.asm):00719                 incb
05E0 3406             (     bootlink.asm):00720         skpinc  pshs d
05E2 ECC90202         (     bootlink.asm):00721                 ldd  OSID,u
05E6 108387CD         (     bootlink.asm):00722                 cmpd #$87CD header bytes?
                      (     bootlink.asm):00723                 ifeq DEBUG-9
                      (     bootlink.asm):00724                 pshs cc
                      (     bootlink.asm):00725                 lde  #'B
                      (     bootlink.asm):00726                 ldf  #'F
                      (     bootlink.asm):00727                 os9  F$RegDmp
                      (     bootlink.asm):00728                 puls cc
                      (     bootlink.asm):00729                 endc
05EA 3506             (     bootlink.asm):00730                 puls d
05EC 2701             (     bootlink.asm):00731                 beq  closeup
05EE 5C               (     bootlink.asm):00732                 incb
05EF A6C90216         (     bootlink.asm):00733         closeup lda PATH2,u
05F3 103F8F           (     bootlink.asm):00734                 os9 I$Close clean up path table
                      (     bootlink.asm):00735         * image looks good, we even have an OS9Boot file
                      (     bootlink.asm):00736         * that looks good, so
05F6 5D               (     bootlink.asm):00737                 tstb
05F7 10260280         (     bootlink.asm):00738                 lbne baddat
05FB 5F               (     bootlink.asm):00739                 clrb
05FC 39               (     bootlink.asm):00740         BadImg  rts We've weeded it out to about a -8.0000-21 chance of bad=good
                      (     bootlink.asm):00741         
                      (     bootlink.asm):00742         ************************************
                      (     bootlink.asm):00743         * got data, copy goodies to work buffers
05FD A6C4             (     bootlink.asm):00744         GetDin  lda ,u get first byte of part size
05FF A7C90217         (     bootlink.asm):00745                 sta DPRTSZ,u
0603 EC41             (     bootlink.asm):00746                 ldd 1,u get other 2 bytes
0605 EDC90218         (     bootlink.asm):00747                 std DPRTSZ+1,u Should now have devices size
0609 ECC815           (     bootlink.asm):00748                 ldd DD.SIZ,u current os9boot files size
060C EDC9020B         (     bootlink.asm):00749                 std BFSIZ,u and save it
0610 ECC815           (     bootlink.asm):00750                 ldd DD.BT,u get 2 byte of its location
0613 EDC90208         (     bootlink.asm):00751                 std BFADR,u and save that for later
0617 A6C817           (     bootlink.asm):00752                 lda DD.BT+2,u get last byte of addr
061A A7C9020A         (     bootlink.asm):00753                 sta BFADR+2,u and save it
061E 39               (     bootlink.asm):00754                 rts
                      (     bootlink.asm):00755         
                      (     bootlink.asm):00756         ************subroutines**************
                      (     bootlink.asm):00757         * hxb2asc
                      (     bootlink.asm):00758         * this routine was written up in the
                      (     bootlink.asm):00759         * Rainbow (11/92) by Tim Kientzle.
                      (     bootlink.asm):00760         * it will convert the value passed
                      (     bootlink.asm):00761         * in the A register to a pair of
                      (     bootlink.asm):00762         * ascii characters in A:B which
                      (     bootlink.asm):00763         * are the directly printable ASCII
                      (     bootlink.asm):00764         * representations of the original
                      (     bootlink.asm):00765         * contents of regs.a. Load regs.A
                      (     bootlink.asm):00766         * with byte of source number, call,
                      (     bootlink.asm):00767         * store A nd B in order in the
                      (     bootlink.asm):00768         * printable string on return.
                      (     bootlink.asm):00769         
061F 1F89             (     bootlink.asm):00770         hxb2asc tfr a,b Make copy of a in b
0621 840F             (     bootlink.asm):00771                 anda #$0f mask off lower digit
0623 8B90             (     bootlink.asm):00772                 adda #$90 generates carry if a>9
0625 19               (     bootlink.asm):00773                 daa in this operation
0626 8940             (     bootlink.asm):00774                 adca #$40 bring in the carry
0628 19               (     bootlink.asm):00775                 daa make final character
0629 1E89             (     bootlink.asm):00776                 exg a,b stash that in b, get a back
062B 44               (     bootlink.asm):00777                 lsra getting high nibble
062C 44               (     bootlink.asm):00778                 lsra into position to
062D 44               (     bootlink.asm):00779                 lsra convert it
062E 44               (     bootlink.asm):00780                 lsra
062F 8B90             (     bootlink.asm):00781                 adda #$90 and repeat for high nibble
0631 19               (     bootlink.asm):00782                 daa and generate carry from a>9
0632 8940             (     bootlink.asm):00783                 adca #$40
0634 19               (     bootlink.asm):00784                 daa
0635 39               (     bootlink.asm):00785                 rts returns with a:b=two hexidecimal characters
                      (     bootlink.asm):00786         
                      (     bootlink.asm):00787         *********************************************
                      (     bootlink.asm):00788         * a2h make 1 hex byte from two ascii chars
0636 AEC90200         (     bootlink.asm):00789         a2h     ldx  CMDL,u get arg pointer back
063A A680             (     bootlink.asm):00790                 lda ,x+ get the left hex char
063C AFC90200         (     bootlink.asm):00791                 stx CMDL,u save for next byte
0640 8030             (     bootlink.asm):00792                 suba #'0 reduce for decimal entries
0642 810A             (     bootlink.asm):00793                 cmpa #$0A
0644 2504             (     bootlink.asm):00794                 blo znine its 0-9
0646 84DF             (     bootlink.asm):00795                 anda #MkUpper
0648 8007             (     bootlink.asm):00796                 suba #$07 else sub 7 more for A-F values
064A 3410             (     bootlink.asm):00797         znine   pshs  x
064C 308DFA29         (     bootlink.asm):00798                 leax hextblh,pcr
0650 E686             (     bootlink.asm):00799                 ldb a,x
0652 E7C90204         (     bootlink.asm):00800                 stb HEXB,u write high nibble
0656 3510             (     bootlink.asm):00801                 puls  x restore it
                      (     bootlink.asm):00802                 ifeq DEBUG-6
                      (     bootlink.asm):00803                 lde #'a
                      (     bootlink.asm):00804                 ldf #'h
                      (     bootlink.asm):00805                 pshs cc
                      (     bootlink.asm):00806                 os9 F$RegDmp
                      (     bootlink.asm):00807                 puls cc
                      (     bootlink.asm):00808                 endc
                      (     bootlink.asm):00809         * now check, is there a high nibble?
0658 A684             (     bootlink.asm):00810                 lda  ,x x already inc'd
065A 8030             (     bootlink.asm):00811                 suba #'0 reduce to decimal
065C 810A             (     bootlink.asm):00812                 cmpa #$0A
065E 2504             (     bootlink.asm):00813                 blo  ninez
0660 84DF             (     bootlink.asm):00814                 anda #MkUpper
0662 8007             (     bootlink.asm):00815                 suba #$07 else sub 7 more for A-F inputs
0664 3410             (     bootlink.asm):00816         ninez   pshs  x
0666 308DF9FF         (     bootlink.asm):00817                 leax hextbll,pcr
066A E686             (     bootlink.asm):00818                 ldb  a,x
066C 3510             (     bootlink.asm):00819                 puls  x
066E EAC90204         (     bootlink.asm):00820                 orb  HEXB,u
0672 E7C90204         (     bootlink.asm):00821         nineex  stb  HEXB,u
                      (     bootlink.asm):00822                 ifeq DEBUG-6
                      (     bootlink.asm):00823                 lde #'A
                      (     bootlink.asm):00824                 ldf #'H   
                      (     bootlink.asm):00825                 pshs cc
                      (     bootlink.asm):00826                 os9  F$RegDmp
                      (     bootlink.asm):00827                 puls cc
                      (     bootlink.asm):00828                 endc
0676 39               (     bootlink.asm):00829                 rts
                      (     bootlink.asm):00830         
0677 3001             (     bootlink.asm):00831         itshex  leax 1,x throw away the $ sign
                      (     bootlink.asm):00832                 ifeq DEBUG-6
                      (     bootlink.asm):00833                 pshs cc
                      (     bootlink.asm):00834                 lde #'n
                      (     bootlink.asm):00835                 ldf #'c
                      (     bootlink.asm):00836                 os9 F$RegDmp
                      (     bootlink.asm):00837                 puls cc
                      (     bootlink.asm):00838                 endc
0679 AFC90200         (     bootlink.asm):00839                 stx  CMDL,u for a2h use
067D 17FFB6           (     bootlink.asm):00840                 lbsr a2h and convert to a hex byte
0680 39               (     bootlink.asm):00841                 rts
                      (     bootlink.asm):00842         
                      (     bootlink.asm):00843         ***********************************
                      (     bootlink.asm):00844         * we supposedly have found the cr without unzeroing HEXASC,u
                      (     bootlink.asm):00845         * so we use this conversion.
0681 AEC90200         (     bootlink.asm):00846         numconv ldx CMDL,u s/b first char of arg value
                      (     bootlink.asm):00847         * find the end
0685 5F               (     bootlink.asm):00848                 clrb find out how many chars we have
0686 A680             (     bootlink.asm):00849         findeod lda ,x+
                      (     bootlink.asm):00850                 ifeq DEBUG-6
                      (     bootlink.asm):00851                 lde #'f
                      (     bootlink.asm):00852                 ldf #'s
                      (     bootlink.asm):00853                 pshs cc
                      (     bootlink.asm):00854                 os9 F$RegDmp
                      (     bootlink.asm):00855                 puls cc
                      (     bootlink.asm):00856                 endc
0688 5C               (     bootlink.asm):00857                 incb
0689 810D             (     bootlink.asm):00858                 cmpa #$0D
068B 26F9             (     bootlink.asm):00859                 bne findeod
                      (     bootlink.asm):00860         * we have the cr, so
068D 301D             (     bootlink.asm):00861         foundcr leax -3,x  back to data?
068F EC84             (     bootlink.asm):00862                 ldd ,x get 2 bytes of decimal cli
                      (     bootlink.asm):00863                 ifeq DEBUG-6
                      (     bootlink.asm):00864                 lde #'c
                      (     bootlink.asm):00865                 ldf #'r found cr
                      (     bootlink.asm):00866                 pshs cc
                      (     bootlink.asm):00867                 os9 F$RegDmp lets see the data in A:B
                      (     bootlink.asm):00868                 puls cc
                      (     bootlink.asm):00869                 endc
0691 8139             (     bootlink.asm):00870         decmode cmpa #'9 make a hex digit out of regs.a
0693 2F02             (     bootlink.asm):00871                 ble gigo1
0695 8630             (     bootlink.asm):00872                 lda  #$30 load a zero
0697 8130             (     bootlink.asm):00873         gigo1   cmpa #'0
0699 2202             (     bootlink.asm):00874                 bhi gigo2
069B 8630             (     bootlink.asm):00875                 lda  #$30 load a zero
069D C030             (     bootlink.asm):00876         gigo2   subb #'0 leave a hex nibble
069F 8030             (     bootlink.asm):00877                 suba #'0 leave a hex nibble
06A1 2526             (     bootlink.asm):00878                 blo  add00 garbage, go
06A3 8139             (     bootlink.asm):00879                 cmpa #'9
06A5 2222             (     bootlink.asm):00880                 bhi  add00 garbage, go
                      (     bootlink.asm):00881                 ifeq DEBUG-6
                      (     bootlink.asm):00882                 lde  #'d
                      (     bootlink.asm):00883                 ldf  #'r
                      (     bootlink.asm):00884                 pshs cc
                      (     bootlink.asm):00885                 os9  F$RegDmp check A[2]:B[8] again good
                      (     bootlink.asm):00886                 puls cc
                      (     bootlink.asm):00887                 endc
06A7 E7C90204         (     bootlink.asm):00888                 stb  HEXB,u save lsnibble
06AB C60A             (     bootlink.asm):00889                 ldb  #$0A
06AD 3D               (     bootlink.asm):00890                 mul  multiply a:b
06AE 19               (     bootlink.asm):00891                 daa
06AF EBC90204         (     bootlink.asm):00892                 addb HEXB,u
06B3 E7C90204         (     bootlink.asm):00893                 stb  HEXB,u
                      (     bootlink.asm):00894         * now lets see what we have in B
                      (     bootlink.asm):00895                 ifeq DEBUG-6
                      (     bootlink.asm):00896                 ldf  #'1 low nibble in B?
                      (     bootlink.asm):00897                 pshs cc
                      (     bootlink.asm):00898                 os9 F$RegDmp is $10 for a 28 input
                      (     bootlink.asm):00899                 puls cc
                      (     bootlink.asm):00900                 endc
                      (     bootlink.asm):00901         * but we're not done, need to handle 1st digit if
06B7 301F             (     bootlink.asm):00902                 leax -1,x
06B9 A684             (     bootlink.asm):00903                 lda ,x
                      (     bootlink.asm):00904                 ifeq DEBUG-6
                      (     bootlink.asm):00905                 lde  #'d
                      (     bootlink.asm):00906                 ldf  #'2
                      (     bootlink.asm):00907                 pshs cc
                      (     bootlink.asm):00908                 os9 F$RegDmp wft am I getting?
                      (     bootlink.asm):00909                 puls cc
                      (     bootlink.asm):00910                 endc
06BB 8132             (     bootlink.asm):00911                 cmpa #'2
06BD 2706             (     bootlink.asm):00912                 beq add200
06BF 8131             (     bootlink.asm):00913                 cmpa #'1 can we get garbage here?  yes
06C1 2704             (     bootlink.asm):00914                 beq  add100 else add 200
06C3 2004             (     bootlink.asm):00915                 bra  add00 else garbage, add nothing
06C5 CB64             (     bootlink.asm):00916         add200  addb #$64
06C7 CB64             (     bootlink.asm):00917         add100  addb #$64
06C9 E7C90204         (     bootlink.asm):00918         add00   stb  HEXB,u
                      (     bootlink.asm):00919                 ifeq DEBUG-6
                      (     bootlink.asm):00920                 lde #'d
                      (     bootlink.asm):00921                 ldf #'e
                      (     bootlink.asm):00922                 pshs cc
                      (     bootlink.asm):00923                 os9 F$RegDmp show HEXB in b
                      (     bootlink.asm):00924                 puls cc
                      (     bootlink.asm):00925                 endc
06CD 5F               (     bootlink.asm):00926                 clrb kill false error
06CE 39               (     bootlink.asm):00927         numdone rts
                      (     bootlink.asm):00928         
                      (     bootlink.asm):00929         ****************************************************
                      (     bootlink.asm):00930         * exit messages
06CF 536F6D657468696E (     bootlink.asm):00931         FMTSTR  fcc  'Something is wrong, either with the hdb-dos disk chosen'
     672069732077726F
     6E672C2065697468
     6572207769746820
     746865206864622D
     646F73206469736B
     2063686F73656E
0706 0A0D             (     bootlink.asm):00932                 fdb  $0a0d
0708 20202020616E6420 (     bootlink.asm):00933                 fcc  '    and set into the /sh descriptor'
     73657420696E746F
     20746865202F7368
     2064657363726970
     746F72
072B 0A0D             (     bootlink.asm):00934                 fdb  $0a0d
072D 202020206F722074 (     bootlink.asm):00935                 fcc  '    or the format of the argument.'
     686520666F726D61
     74206F6620746865
     20617267756D656E
     742E
074F 0A0D             (     bootlink.asm):00936                 fdb  $0a0d        
0751 626F6F746C696E6B (     bootlink.asm):00937                 fcc  /bootlink needs a fixed size vdisk number argument/
     206E656564732061
     2066697865642073
     697A652076646973
     6B206E756D626572
     20617267756D656E
     74
0782 0A0D             (     bootlink.asm):00938                 fdb  $0a0d
0784 696E206120332064 (     bootlink.asm):00939                 fcc  /in a 3 digit format. If first char is a $ sign,/
     6967697420666F72
     6D61742E20496620
     6669727374206368
     6172206973206120
     24207369676E2C
07B3 0A0D             (     bootlink.asm):00940                 fdb  $0a0d
07B5 746865206E657874 (     bootlink.asm):00941                 fcc  /the next 2 nums are hex, else all 3 are decimal./
     2032206E756D7320
     617265206865782C
     20656C736520616C
     6C20332061726520
     646563696D616C2E
07E5 0A0D             (     bootlink.asm):00942                 fdb  $0a0d
07E7 6578616D706C653A (     bootlink.asm):00943                 fcc  /example: $80 or 128. Result will be used to control/
     20243830206F7220
     3132382E20526573
     756C742077696C6C
     2062652075736564
     20746F20636F6E74
     726F6C
081A 0A0D             (     bootlink.asm):00944                 fdb  $0a0d
081C 617320696E202264 (     bootlink.asm):00945                 fcc  'as in "dmode /sh stp=hex of above number.'
     6D6F6465202F7368
     207374703D686578
     206F662061626F76
     65206E756D626572
     2E
0845 0A0D             (     bootlink.asm):00946                 fdb  $0a0d
0847 203F             (     bootlink.asm):00947         ENDSTR  bra  forker1
0849 4E616D6564206465 (     bootlink.asm):00948         ndevmsg fcc  'Named device /sh is not in memory.'
     76696365202F7368
     206973206E6F7420
     696E206D656D6F72
     792E
086B 0A0D             (     bootlink.asm):00949         enddvmg fdb  $0a0d
086D 308CD9           (     bootlink.asm):00950         nodevic leax ndevmsg,pcr
0870 108E0022         (     bootlink.asm):00951                 ldy  #enddvmg-ndevmsg
0874 8601             (     bootlink.asm):00952                 lda  #1 stdout
0876 103F8A           (     bootlink.asm):00953                 os9  I$Write
0879 200D             (     bootlink.asm):00954                 bra  forker1
     087B             (     bootlink.asm):00955         numdun  equ  *
087B 308DFE50         (     bootlink.asm):00956         baddat  leax FMTSTR,pcr
087F 108E0178         (     bootlink.asm):00957                 ldy  #ENDSTR-FMTSTR
0883 8601             (     bootlink.asm):00958                 lda  #1 stdout
0885 103F8A           (     bootlink.asm):00959                 os9  I$Write
0888 5F               (     bootlink.asm):00960         forker1 clrb we just reported the error folks
                      (     bootlink.asm):00961         * arriving here with possible bsr on stack - restore
                      (     bootlink.asm):00962         * but make sure U is correct, a Link call screws it!
                      (     bootlink.asm):00963         * and this sp reload with U fucked is my crash just like
                      (     bootlink.asm):00964         * little green apples. GIGO of the hidden  sort. So...
0889 CE0000           (     bootlink.asm):00965                 ldu  #$0000 this seems to be where we started
088C 10EEC90222       (     bootlink.asm):00966                 lds  stackp,u  clear it for exit, leave b, cc as is
     0891             (     bootlink.asm):00967         bigdec  equ *
0891 103F06           (     bootlink.asm):00968         end     os9 F$Exit
0894 25C2CF           (     bootlink.asm):00969                 emod
     0897             (     bootlink.asm):00970         eom     equ *
                      (     bootlink.asm):00971         
