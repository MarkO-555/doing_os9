                      (         sub1.asm):00001         ********************************************************************
                      (         sub1.asm):00002         * sub1 - Sub1 Sub Battle Simulator subroutine
                      (         sub1.asm):00003         *
                      (         sub1.asm):00004         * $Id$
                      (         sub1.asm):00005         *
                      (         sub1.asm):00006         * There is a lot of extraneous and unneccessary instructions throughout
                      (         sub1.asm):00007         * the code. But since we use the jump table at module enter be careful
                      (         sub1.asm):00008         * when removing any thing and adjust it accordingly.
                      (         sub1.asm):00009         * No explicit edition byte in source.
                      (         sub1.asm):00010         *
                      (         sub1.asm):00011         * Edt/Rev  YYYY/MM/DD  Modified by
                      (         sub1.asm):00012         * Comment
                      (         sub1.asm):00013         * ------------------------------------------------------------------
                      (         sub1.asm):00014         *   0      2003/03/29  Paul W. Zibaila
                      (         sub1.asm):00015         * Disassembly of original distribution.
                      (         sub1.asm):00016         
                      (         sub1.asm):00017               nam sub1
                      (         sub1.asm):00018               ttl Sub1 Sub Battle Simulator subroutine
                      (         sub1.asm):00019         
                      (         sub1.asm):00020               ifp1
                      (         sub1.asm):00021               use defsfile
     0002             (         defsfile):00001         Level   equ   2
                      (         defsfile):00002                 use   os9.d   
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
     0080             (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
     00FE             (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0004                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
002A                  (            os9.d):00820         DefIOSiz       EQU       12
002A                  (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
002A                  (            os9.d):00824         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00832         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00835         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00849                        RMB       $40-.               unused
002A                  (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
002A                  (            os9.d):00855         SysState       EQU       %10000000
002A                  (            os9.d):00856         TimSleep       EQU       %01000000
002A                  (            os9.d):00857         TimOut         EQU       %00100000
002A                  (            os9.d):00858         ImgChg         EQU       %00010000
002A                  (            os9.d):00859         Condem         EQU       %00000010
002A                  (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
     0010             (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0000                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00877         P$User         RMB       2                   User Index
000A                  (            os9.d):00878         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00879         P$Age          RMB       1                   Age
000C                  (            os9.d):00880         P$State        RMB       1                   Status
000D                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00892                        RMB       $20-.               unused
0020                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00905         P$Alarm        RMB       6
00C9                  (            os9.d):00906                        RMB       $200-.              Local stack
     0200             (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
     0080             (            os9.d):00913         SysState       EQU       %10000000
     0040             (            os9.d):00914         TimSleep       EQU       %01000000
     0020             (            os9.d):00915         TimOut         EQU       %00100000
     0010             (            os9.d):00916         ImgChg         EQU       %00010000
     0008             (            os9.d):00917         Suspend        EQU       %00001000
     0002             (            os9.d):00918         Condem         EQU       %00000010
     0001             (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     000D             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     000B             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
0005                  (            os9.d):01040         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01041         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01044         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01045         R$X            EQU       6                   X Index register
0005                  (            os9.d):01046         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01047         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01048         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
     0003             (            os9.d):01051         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01052         R$X            EQU       4                   X Index register
     0006             (            os9.d):01053         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01054         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01055         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
00FF                  (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
00FF                  (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
     003B             (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
     ED00             (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
00FF                  (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (         defsfile):00003                 use   scf.d   
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
                      (            scf.d):00222         
                      (            scf.d):00223         * PD.BAU definitions
                      (            scf.d):00224         *
                      (            scf.d):00225         * Baud rate
     0000             (            scf.d):00226         B110           EQU       %00000000
     0001             (            scf.d):00227         B300           EQU       %00000001
     0002             (            scf.d):00228         B600           EQU       %00000010
     0003             (            scf.d):00229         B1200          EQU       %00000011
     0004             (            scf.d):00230         B2400          EQU       %00000100
     0005             (            scf.d):00231         B4800          EQU       %00000101
     0006             (            scf.d):00232         B9600          EQU       %00000110
     0007             (            scf.d):00233         B19200         EQU       %00000111
     0008             (            scf.d):00234         B38400         EQU       %00001000
     0009             (            scf.d):00235         B57600         EQU       %00001001
     000A             (            scf.d):00236         B115200        EQU       %00001010
                      (            scf.d):00237         * Word size
     0000             (            scf.d):00238         WORD8          EQU       %00000000
     0020             (            scf.d):00239         WORD7          EQU       %00100000
                      (            scf.d):00240         * Stop bits
     0000             (            scf.d):00241         STOP1          EQU       %00000000
     0010             (            scf.d):00242         STOP2          EQU       %00010000
                      (            scf.d):00243         
                      (            scf.d):00244                        ENDC      
                      (         sub1.asm):00022               endc
                      (         sub1.asm):00023         
                      (         sub1.asm):00024         * I/O path definitions
     0000             (         sub1.asm):00025         StdIn    equ   0
     0001             (         sub1.asm):00026         StdOut   equ   1
     0002             (         sub1.asm):00027         StdErr   equ   2
                      (         sub1.asm):00028         
                      (         sub1.asm):00029         
                      (         sub1.asm):00030         
                      (         sub1.asm):00031         *  defines for 5 bit zero offset instructions
     E640             (         sub1.asm):00032         Zldb_u   equ  $E640
     E600             (         sub1.asm):00033         Zldb_x   equ  $E600
     A700             (         sub1.asm):00034         Zsta_x   equ  $A700
     6F40             (         sub1.asm):00035         Zclr_u   equ  $6F40
     6F00             (         sub1.asm):00036         Zclr_x   equ  $6F00
                      (         sub1.asm):00037         
                      (         sub1.asm):00038         *   misc defines for SUB
     0169             (         sub1.asm):00039         SinTblSz equ $0169
     1666             (         sub1.asm):00040         CntrlSz  equ $1666
                      (         sub1.asm):00041         
     0126             (         sub1.asm):00042         SinDat   equ $0126
     1E25             (         sub1.asm):00043         CntrlDat equ $1E25
                      (         sub1.asm):00044         
                      (         sub1.asm):00045         * class D external label equates
                      (         sub1.asm):00046         
     0001             (         sub1.asm):00047         D0001    equ $0001
     0002             (         sub1.asm):00048         D0002    equ $0002
     0003             (         sub1.asm):00049         D0003    equ $0003
     0004             (         sub1.asm):00050         D0004    equ $0004
     0005             (         sub1.asm):00051         D0005    equ $0005
     0006             (         sub1.asm):00052         D0006    equ $0006
     0007             (         sub1.asm):00053         D0007    equ $0007
     0009             (         sub1.asm):00054         D0009    equ $0009
     000D             (         sub1.asm):00055         D000D    equ $000D
     000E             (         sub1.asm):00056         D000E    equ $000E
     0010             (         sub1.asm):00057         D0010    equ $0010
     0012             (         sub1.asm):00058         D0012    equ $0012
     0013             (         sub1.asm):00059         D0013    equ $0013
     0015             (         sub1.asm):00060         D0015    equ $0015
     0030             (         sub1.asm):00061         D0030    equ $0030
                      (         sub1.asm):00062         
                      (         sub1.asm):00063         * class X external label equates
                      (         sub1.asm):00064         
     0107             (         sub1.asm):00065         X0107    equ $0107     address of subroutine module entry point
     0291             (         sub1.asm):00066         X0291    equ $0291
     0295             (         sub1.asm):00067         X0295    equ $0295
     0296             (         sub1.asm):00068         X0296    equ $0296
     0297             (         sub1.asm):00069         X0297    equ $0297
     0298             (         sub1.asm):00070         X0298    equ $0298
     029A             (         sub1.asm):00071         X029A    equ $029A
     029C             (         sub1.asm):00072         X029C    equ $029C
     02A3             (         sub1.asm):00073         X02A3    equ $02A3    side FF = german 23 = American
     0355             (         sub1.asm):00074         X0355    equ $0355
     04F0             (         sub1.asm):00075         X04F0    equ $04F0
     04F2             (         sub1.asm):00076         X04F2    equ $04F2
     04F4             (         sub1.asm):00077         X04F4    equ $04F4
     04F5             (         sub1.asm):00078         X04F5    equ $04F5
     04F7             (         sub1.asm):00079         X04F7    equ $04F7
     04F8             (         sub1.asm):00080         X04F8    equ $04F8
     04F9             (         sub1.asm):00081         X04F9    equ $04F9
     04FA             (         sub1.asm):00082         X04FA    equ $04FA
     04FB             (         sub1.asm):00083         X04FB    equ $04FB
     04FC             (         sub1.asm):00084         X04FC    equ $04FC
     04FD             (         sub1.asm):00085         X04FD    equ $04FD
     04FE             (         sub1.asm):00086         X04FE    equ $04FE
     04FF             (         sub1.asm):00087         X04FF    equ $04FF
     0500             (         sub1.asm):00088         X0500    equ $0500
     05CE             (         sub1.asm):00089         X05CE    equ $05CE
     1D3F             (         sub1.asm):00090         X1D3F    equ $1D3F
     1D41             (         sub1.asm):00091         X1D41    equ $1D41
     1D44             (         sub1.asm):00092         X1D44    equ $1D44
     1D46             (         sub1.asm):00093         X1D46    equ $1D46
     1D47             (         sub1.asm):00094         X1D47    equ $1D47
     1D49             (         sub1.asm):00095         X1D49    equ $1D49      IT.EKO original value (echo)
     1D4A             (         sub1.asm):00096         X1D4A    equ $1D4A      IT.PAU original value (end of page pause)
     1D6D             (         sub1.asm):00097         X1D6D    equ $1D6D
     1D76             (         sub1.asm):00098         X1D76    equ $1D76
     1D88             (         sub1.asm):00099         X1D88    equ $1D88
     1D89             (         sub1.asm):00100         X1D89    equ $1D89
     1D8B             (         sub1.asm):00101         X1D8B    equ $1D8B
     1D8F             (         sub1.asm):00102         X1D8F    equ $1D8F
     1D91             (         sub1.asm):00103         X1D91    equ $1D91
     1D93             (         sub1.asm):00104         X1D93    equ $1D93
     1D95             (         sub1.asm):00105         X1D95    equ $1D95
     1DA5             (         sub1.asm):00106         X1DA5    equ $1DA5
     1DA7             (         sub1.asm):00107         X1DA7    equ $1DA7
     1DAD             (         sub1.asm):00108         X1DAD    equ $1DAD
     1DAF             (         sub1.asm):00109         X1DAF    equ $1DAF
     1DB9             (         sub1.asm):00110         X1DB9    equ $1DB9
     1DD9             (         sub1.asm):00111         X1DD9    equ $1DD9     temp storage for path num
     1DDA             (         sub1.asm):00112         X1DDA    equ $1DDA
     1DF6             (         sub1.asm):00113         X1DF6    equ $1DF6
     1DF9             (         sub1.asm):00114         X1DF9    equ $1DF9
     1E13             (         sub1.asm):00115         X1E13    equ $1E13
     1E16             (         sub1.asm):00116         X1E16    equ $1E16     year value
     1E17             (         sub1.asm):00117         X1E17    equ $1E17
     1E1D             (         sub1.asm):00118         X1E1D    equ $1E1D
     1E1E             (         sub1.asm):00119         X1E1E    equ $1E1E
     1E20             (         sub1.asm):00120         X1E20    equ $1E20
     1E22             (         sub1.asm):00121         X1E22    equ $1E22
     1E23             (         sub1.asm):00122         X1E23    equ $1E23
     1E24             (         sub1.asm):00123         X1E24    equ $1E24
     4265             (         sub1.asm):00124         X4265    equ $4265
     4C75             (         sub1.asm):00125         X4C75    equ $4C75    side      0=German 1=US
     4C76             (         sub1.asm):00126         X4C76    equ $4C76    game type
     4C77             (         sub1.asm):00127         X4C77    equ $4C77    game level
     4C78             (         sub1.asm):00128         X4C78    equ $4C78
     4C7A             (         sub1.asm):00129         X4C7A    equ $4C7A
     4C80             (         sub1.asm):00130         X4C80    equ $4C80
     4C81             (         sub1.asm):00131         X4C81    equ $4C81
     4C82             (         sub1.asm):00132         X4C82    equ $4C82
     4C83             (         sub1.asm):00133         X4C83    equ $4C83
     4C84             (         sub1.asm):00134         X4C84    equ $4C84
     4C85             (         sub1.asm):00135         X4C85    equ $4C85
     4C87             (         sub1.asm):00136         X4C87    equ $4C87
     4C88             (         sub1.asm):00137         X4C88    equ $4C88
     4C90             (         sub1.asm):00138         X4C90    equ $4C90
     4CA0             (         sub1.asm):00139         X4CA0    equ $4CA0
     4CA1             (         sub1.asm):00140         X4CA1    equ $4CA1
     4CA4             (         sub1.asm):00141         X4CA4    equ $4CA4
     4CA6             (         sub1.asm):00142         X4CA6    equ $4CA6
     4CA8             (         sub1.asm):00143         X4CA8    equ $4CA8
     4CA9             (         sub1.asm):00144         X4CA9    equ $4CA9
     4CAA             (         sub1.asm):00145         X4CAA    equ $4CAA
     4CAB             (         sub1.asm):00146         X4CAB    equ $4CAB
     4CAC             (         sub1.asm):00147         X4CAC    equ $4CAC
     4CB1             (         sub1.asm):00148         X4CB1    equ $4CB1
     4CB2             (         sub1.asm):00149         X4CB2    equ $4CB2
     4CB3             (         sub1.asm):00150         X4CB3    equ $4CB3
     4CB4             (         sub1.asm):00151         X4CB4    equ $4CB4
     4CBD             (         sub1.asm):00152         X4CBD    equ $4CBD
     4CCC             (         sub1.asm):00153         X4CCC    equ $4CCC
     4CCD             (         sub1.asm):00154         X4CCD    equ $4CCD
     4CCE             (         sub1.asm):00155         X4CCE    equ $4CCE
     4CCF             (         sub1.asm):00156         X4CCF    equ $4CCF
     4CE0             (         sub1.asm):00157         X4CE0    equ $4CE0
     4CEE             (         sub1.asm):00158         X4CEE    equ $4CEE
     4CEF             (         sub1.asm):00159         X4CEF    equ $4CEF
     4CF1             (         sub1.asm):00160         X4CF1    equ $4CF1
     4CF3             (         sub1.asm):00161         X4CF3    equ $4CF3
     4CF5             (         sub1.asm):00162         X4CF5    equ $4CF5
     4CF7             (         sub1.asm):00163         X4CF7    equ $4CF7
     4CF9             (         sub1.asm):00164         X4CF9    equ $4CF9
     4CFB             (         sub1.asm):00165         X4CFB    equ $4CFB
     4CFD             (         sub1.asm):00166         X4CFD    equ $4CFD
     4CFF             (         sub1.asm):00167         X4CFF    equ $4CFF
     4D00             (         sub1.asm):00168         X4D00    equ $4D00
     4D01             (         sub1.asm):00169         X4D01    equ $4D01
     4D02             (         sub1.asm):00170         X4D02    equ $4D02
     4D03             (         sub1.asm):00171         X4D03    equ $4D03
     4D04             (         sub1.asm):00172         X4D04    equ $4D04
     4D11             (         sub1.asm):00173         X4D11    equ $4D11
     4D12             (         sub1.asm):00174         X4D12    equ $4D12
     4D13             (         sub1.asm):00175         X4D13    equ $4D13
     4D1B             (         sub1.asm):00176         X4D1B    equ $4D1B
     4D1D             (         sub1.asm):00177         X4D1D    equ $4D1D
     4D1F             (         sub1.asm):00178         X4D1F    equ $4D1F
     4D21             (         sub1.asm):00179         X4D21    equ $4D21
     4D22             (         sub1.asm):00180         X4D22    equ $4D22
     4D27             (         sub1.asm):00181         X4D27    equ $4D27
     4D28             (         sub1.asm):00182         X4D28    equ $4D28
     4D29             (         sub1.asm):00183         X4D29    equ $4D29
     4D2B             (         sub1.asm):00184         X4D2B    equ $4D2B
     4D2E             (         sub1.asm):00185         X4D2E    equ $4D2E    radio status
     4D3B             (         sub1.asm):00186         X4D3B    equ $4D3B
     4D3C             (         sub1.asm):00187         X4D3C    equ $4D3C    new side value
     4D3D             (         sub1.asm):00188         X4D3D    equ $4D3D
     4D3E             (         sub1.asm):00189         X4D3E    equ $4D3E
     71B1             (         sub1.asm):00190         X71B1    equ $71B1
                      (         sub1.asm):00191         
                      (         sub1.asm):00192         * subroutines in sub6 that get loaded into the data area
     72C3             (         sub1.asm):00193         X72C3    equ $72C3
     72F3             (         sub1.asm):00194         X72F3    equ $72F3   seems to proceed character strings
     7304             (         sub1.asm):00195         X7304    equ $7304   calcs an integer based on input in d
     735B             (         sub1.asm):00196         X735B    equ $735B   Change palette routine
     7477             (         sub1.asm):00197         X7477    equ $7477   some sort of copy routine accepts acsii between $20-$5F ???
     74CC             (         sub1.asm):00198         X74CC    equ $74CC
     74D9             (         sub1.asm):00199         X74D9    equ $74D9
     7691             (         sub1.asm):00200         X7691    equ $7691
     76A4             (         sub1.asm):00201         X76A4    equ $76A4
     76B9             (         sub1.asm):00202         X76B9    equ $76B9
     7747             (         sub1.asm):00203         X7747    equ $7747
     77E5             (         sub1.asm):00204         X77E5    equ $77E5
     782E             (         sub1.asm):00205         X782E    equ $782E   2 place formatted integer output based on input in b
     7843             (         sub1.asm):00206         X7843    equ $7843
     7866             (         sub1.asm):00207         X7866    equ $7866
     7BF4             (         sub1.asm):00208         X7BF4    equ $7BF4
                      (         sub1.asm):00209         
                      (         sub1.asm):00210         
                      (         sub1.asm):00211              
     0021             (         sub1.asm):00212         tylg    set   SbRtn+Objct   
     0081             (         sub1.asm):00213         atrv    set   ReEnt+rev
     0001             (         sub1.asm):00214         rev     set   $01
                      (         sub1.asm):00215         *edition set  $01
                      (         sub1.asm):00216           
0000 87CD1614000D2181 (         sub1.asm):00217                 mod   eom,name,tylg,atrv,start,size
     1A00110000
                      (         sub1.asm):00218         
                      (         sub1.asm):00219         
                      (         sub1.asm):00220         
                      (         sub1.asm):00221         * OS9 data area definitions
     0000             (         sub1.asm):00222         size    equ .
                      (         sub1.asm):00223         
000D 737562B1         (         sub1.asm):00224         name    fcs "sub1"
                      (         sub1.asm):00225         *       fcb  edition                           no edition byte included in orig code
                      (         sub1.asm):00226         
                      (         sub1.asm):00227         * b contains an offset passed by call to smap
0011 308D0007         (         sub1.asm):00228         start   leax  >JumpTbl,pcr
0015 EC85             (         sub1.asm):00229                 ldd   b,x                index to subroutine offset
0017 BE0107           (         sub1.asm):00230                 ldx   X0107              holds the address of start from smap call
001A 6E8B             (         sub1.asm):00231                 jmp   d,x                nuttin' to it but to jump to it
                      (         sub1.asm):00232         
001C                  (         sub1.asm):00233         JumpTbl      
001C 0023             (         sub1.asm):00234         L001C   fdb   GoOpts-start        $0023
001E 0FC5             (         sub1.asm):00235                 fdb   GameSetup-start     $0FC5
0020 0A05             (         sub1.asm):00236                 fdb   Read_mission-start  $0A05
0022 0880             (         sub1.asm):00237                 fdb   MakeFile-start      $0880
0024 08BC             (         sub1.asm):00238                 fdb   ReadNewFile-start   $08BC
0026 0468             (         sub1.asm):00239                 fdb   L0479-start         $0468
0028 0B42             (         sub1.asm):00240                 fdb   Read_mission2-start $0B42
002A 0547             (         sub1.asm):00241                 fdb   SetParms2-start     $0547
002C 0DF1             (         sub1.asm):00242                 fdb   XmtSOS-start        $0DF1
002E 1243             (         sub1.asm):00243                 fdb   Return2Sea-start    $1243
0030 145C             (         sub1.asm):00244                 fdb   TransferTorp-start  $145C
0032 0E3C             (         sub1.asm):00245                 fdb   XmtPOS-start        $0E3C
                      (         sub1.asm):00246                 
0034 170DA6           (         sub1.asm):00247         GoOpts  lbsr  GetOPts
                      (         sub1.asm):00248         
                      (         sub1.asm):00249               
0037 CC0073           (         sub1.asm):00250                 ldd   #$0073
003A FD1DAF           (         sub1.asm):00251                 std   X1DAF
                      (         sub1.asm):00252                 
003D CC00F4           (         sub1.asm):00253                 ldd   #$00F4
0040 FD1DAD           (         sub1.asm):00254                 std   X1DAD
                      (         sub1.asm):00255         
                      (         sub1.asm):00256         * Open Path - Opens a path to the an existing file or device
                      (         sub1.asm):00257         *             as specified by the path list
                      (         sub1.asm):00258         * entry:
                      (         sub1.asm):00259         *       a -> access mode (D S PE PW PR E W R) 
                      (         sub1.asm):00260         *       x -> address of the path list 
                      (         sub1.asm):00261         *
                      (         sub1.asm):00262         * exit:
                      (         sub1.asm):00263         *       a -> path number 
                      (         sub1.asm):00264         *       x -> address of the last btye of the path list + 1 
                      (         sub1.asm):00265         *
                      (         sub1.asm):00266         * error:
                      (         sub1.asm):00267         *       CC -> Carry set on error
                      (         sub1.asm):00268         *       b  -> error code (if any)
                      (         sub1.asm):00269               
0043 8601             (         sub1.asm):00270                 lda   #READ.
0045 308D15B9         (         sub1.asm):00271                 leax  >SinTbl,pcr
0049 103F84           (         sub1.asm):00272                 os9   I$Open
004C 3402             (         sub1.asm):00273                 pshs  a                   save that path number
                      (         sub1.asm):00274         
                      (         sub1.asm):00275         * Read  - Reads n bytes from the specified path
                      (         sub1.asm):00276         * entry:
                      (         sub1.asm):00277         *       a -> path number
                      (         sub1.asm):00278         *       x -> address in which to store the data
                      (         sub1.asm):00279         *       y -> is the number of bytes to read
                      (         sub1.asm):00280         *
                      (         sub1.asm):00281         * exit:
                      (         sub1.asm):00282         *       y -> number of bytes read 
                      (         sub1.asm):00283         *
                      (         sub1.asm):00284         * error:
                      (         sub1.asm):00285         *       CC -> Carry set on error
                      (         sub1.asm):00286         *       b  -> error code (if any)
                      (         sub1.asm):00287         
004E 8E0126           (         sub1.asm):00288                 ldx   #SinDat
0051 108E0169         (         sub1.asm):00289                 ldy   #SinTblSz
0055 103F89           (         sub1.asm):00290                 os9   I$Read             load it in data 
                      (         sub1.asm):00291               
0058 3502             (         sub1.asm):00292                 puls  a                  clean up stack
                      (         sub1.asm):00293               
                      (         sub1.asm):00294         * Close Path - Terminates I/O path
                      (         sub1.asm):00295         *              (performs an impledd I$Detach call)
                      (         sub1.asm):00296         * entry:
                      (         sub1.asm):00297         *       a -> path number
                      (         sub1.asm):00298         *
                      (         sub1.asm):00299         * error:
                      (         sub1.asm):00300         *       CC -> Carry set on error
                      (         sub1.asm):00301         *       b  -> error code (if any)
                      (         sub1.asm):00302               
005A 103F8F           (         sub1.asm):00303                 os9   I$Close
                      (         sub1.asm):00304         
                      (         sub1.asm):00305         
005D 8601             (         sub1.asm):00306                 lda   #READ.
005F 308D149F         (         sub1.asm):00307                 leax  >Font,pcr
0063 103F84           (         sub1.asm):00308                 os9   I$Open
0066 3402             (         sub1.asm):00309                 pshs  a             No need for this here
                      (         sub1.asm):00310         
                      (         sub1.asm):00311         * Seek  - Repositions a file pointer
                      (         sub1.asm):00312         * entry:
                      (         sub1.asm):00313         *       a -> path number
                      (         sub1.asm):00314         *       x -> MS 16 bits of the desired file position
                      (         sub1.asm):00315         *       u -> LS 16 bits of the desired file position
                      (         sub1.asm):00316         *
                      (         sub1.asm):00317         * error:
                      (         sub1.asm):00318         *       CC -> Carry set on error
                      (         sub1.asm):00319         *       b  -> error code (if any)
                      (         sub1.asm):00320               
0068 8E0000           (         sub1.asm):00321                 ldx   #0
006B 108E0000         (         sub1.asm):00322                 ldy   #0            No need for this here  
006F CE0103           (         sub1.asm):00323                 ldu   #$0103        file position
0072 103F88           (         sub1.asm):00324                 os9   I$Seek
                      (         sub1.asm):00325                 
0075 8E4D3F           (         sub1.asm):00326                 ldx   #$4D3F        save address
0078 108E0308         (         sub1.asm):00327                 ldy   #$0308        num of bytes to read
007C A6E4             (         sub1.asm):00328                 lda   ,s            get the path ?? should still be set
007E 103F89           (         sub1.asm):00329                 os9   I$Read
                      (         sub1.asm):00330                 
0081 3502             (         sub1.asm):00331                 puls  a             get that same path number no need
0083 103F8F           (         sub1.asm):00332                 os9   I$Close       close the file        
0086 7C4C75           (         sub1.asm):00333                 inc   X4C75         increment side ?
                      (         sub1.asm):00334                 
0089 17006D           (         sub1.asm):00335                 lbsr  GetMisDat
008C 1701F2           (         sub1.asm):00336                 lbsr  GetSubStat
008F 17065B           (         sub1.asm):00337                 lbsr  GetShipmap
0092 170023           (         sub1.asm):00338                 lbsr  GetMap
0095 170365           (         sub1.asm):00339                 lbsr  GetConvoy
0098 1704EF           (         sub1.asm):00340                 lbsr  SetParams
009B 1705EF           (         sub1.asm):00341                 lbsr  SetMorePars
                      (         sub1.asm):00342                 
009E 8602             (         sub1.asm):00343                 lda   #2
00A0 B705CE           (         sub1.asm):00344                 sta   X05CE
                      (         sub1.asm):00345                 
00A3 CC0004           (         sub1.asm):00346                 ldd   #$0004
00A6 FD1D44           (         sub1.asm):00347                 std   X1D44
                      (         sub1.asm):00348                 
00A9 CC1234           (         sub1.asm):00349                 ldd   #$1234
00AC FD1D3F           (         sub1.asm):00350                 std   X1D3F
00AF FD1D41           (         sub1.asm):00351                 std   X1D41
                      (         sub1.asm):00352                 
00B2 160B8D           (         sub1.asm):00353                 lbra  GetControl1
                      (         sub1.asm):00354                 
00B5 103F06           (         sub1.asm):00355                 os9   F$Exit
                      (         sub1.asm):00356         
00B8                  (         sub1.asm):00357         GetMap
00B8 3476             (         sub1.asm):00358         L00B8   pshs  a,b,x,y,u
00BA 8601             (         sub1.asm):00359                 lda   #READ.
00BC 7D4C75           (         sub1.asm):00360                 tst   X4C75           test the side value 0=German 1=US
00BF 260A             (         sub1.asm):00361                 bne   MapUS
                      (         sub1.asm):00362               
00C1 308D147C         (         sub1.asm):00363                 leax  >Germap,pcr
00C5 108E0A9D         (         sub1.asm):00364                 ldy   #$0A9D          number of bytes to read when the file is open
00C9 2008             (         sub1.asm):00365                 bra   LoadMap
                      (         sub1.asm):00366         
00CB                  (         sub1.asm):00367         MapUS
00CB 308D1481         (         sub1.asm):00368         L00CB   leax  >USAmap,pcr
00CF 108E094E         (         sub1.asm):00369                 ldy   #$094E          number of bytes to read when the file is open
                      (         sub1.asm):00370         
00D3                  (         sub1.asm):00371         LoadMap
00D3 3420             (         sub1.asm):00372         L00D3   pshs  y               number of bytes to read when the file is open
00D5 103F84           (         sub1.asm):00373                 os9   I$Open          open it
00D8 10AEE4           (         sub1.asm):00374                 ldy   ,s              once again number of bytes to read when the file is open
00DB 3402             (         sub1.asm):00375                 pshs  a               save the path
00DD 8E1E25           (         sub1.asm):00376                 ldx   #CntrlDat       Set the addr to store the info
00E0 A6E4             (         sub1.asm):00377                 lda   ,s              get the path ???
00E2 103F89           (         sub1.asm):00378                 os9   I$Read          do the read 
00E5 3502             (         sub1.asm):00379                 puls  a               pull the path
00E7 103F8F           (         sub1.asm):00380                 os9   I$Close         close the path
                      (         sub1.asm):00381         
                      (         sub1.asm):00382         * decode and put it in memory
00EA 3520             (         sub1.asm):00383                 puls  y               get that number of bytes to read when the file is open
00EC 313F             (         sub1.asm):00384                 leay  -$01,y          drop it by one
00EE 8E1E25           (         sub1.asm):00385                 ldx   #CntrlDat       address where stored (from addr)
00F1 CE05CF           (         sub1.asm):00386                 ldu   #$05CF          destination address
00F4 170C75           (         sub1.asm):00387                 lbsr  Decode_copy
00F7 35F6             (         sub1.asm):00388                 puls  a,b,x,y,u,pc
                      (         sub1.asm):00389               
                      (         sub1.asm):00390         
00F9                  (         sub1.asm):00391         GetMisDat      
00F9 3476             (         sub1.asm):00392         L00F9   pshs  a,b,x,y,u
00FB 170B2C           (         sub1.asm):00393                 lbsr  Set_75
00FE 7F4D27           (         sub1.asm):00394                 clr   X4D27
                      (         sub1.asm):00395                 
0101 8601             (         sub1.asm):00396                 lda   #READ.
0103 308D13C9         (         sub1.asm):00397                 leax  >Mis_dat,pcr
0107 103F84           (         sub1.asm):00398                 os9   I$Open
010A B71DD9           (         sub1.asm):00399                 sta   X1DD9           stow path number
                      (         sub1.asm):00400              
010D 17008A           (         sub1.asm):00401                 lbsr  L019A
                      (         sub1.asm):00402                
0110 F602A3           (         sub1.asm):00403                 ldb   X02A3           load the Side value
0113 8633             (         sub1.asm):00404                 lda   #$33
0115 3D               (         sub1.asm):00405                 mul   
0116 1F03             (         sub1.asm):00406                 tfr   d,u             LS 16 bits of file position
0118 8E0000           (         sub1.asm):00407                 ldx   #0              MS 16 bits of file position
011B B61DD9           (         sub1.asm):00408                 lda   X1DD9           get our path number 
011E 103F88           (         sub1.asm):00409                 os9   I$Seek          reset the file pointer
                      (         sub1.asm):00410                 
0121 8E4C8A           (         sub1.asm):00411                 ldx   #$4C8A          address to store the data
0124 108E0033         (         sub1.asm):00412                 ldy   #$0033          number of bytes to read
0128 B61DD9           (         sub1.asm):00413                 lda   X1DD9           get the path number   (not needed)
012B 103F89           (         sub1.asm):00414                 os9   I$Read          read the data from the file
                      (         sub1.asm):00415                  
012E B61DD9           (         sub1.asm):00416                 lda   X1DD9           get the path number again (not needed)
0131 103F8F           (         sub1.asm):00417                 os9   I$Close         close the file
                      (         sub1.asm):00418                 
0134 F64CA8           (         sub1.asm):00419                 ldb   X4CA8
0137 5A               (         sub1.asm):00420                 decb  
0138 58               (         sub1.asm):00421                 lslb  
0139 308D14A2         (         sub1.asm):00422                 leax  >ByteTbl4,pcr
013D EC85             (         sub1.asm):00423                 ldd   b,x
013F FB4CA9           (         sub1.asm):00424                 addb  X4CA9
0142 8900             (         sub1.asm):00425                 adca  #0
0144 FD1E17           (         sub1.asm):00426                 std   X1E17
                      (         sub1.asm):00427                 
0147 F64CAA           (         sub1.asm):00428                 ldb   X4CAA
014A F71E16           (         sub1.asm):00429                 stb   X1E16            year value
                      (         sub1.asm):00430                 
014D F64CAB           (         sub1.asm):00431                 ldb   X4CAB
0150 7D4C76           (         sub1.asm):00432                 tst   X4C76            test game type value once
0153 2605             (         sub1.asm):00433                 bne   L015A            not target practice
0155 1700C3           (         sub1.asm):00434                 lbsr  L021B            was target practice
                      (         sub1.asm):00435                 
0158 C610             (         sub1.asm):00436                 ldb   #$10             on return load b
015A F74D22           (         sub1.asm):00437         L015A   stb   X4D22            always stow b either from X4CAB or a fixed value of $10
                      (         sub1.asm):00438         
015D 7D4C76           (         sub1.asm):00439                 tst   X4C76            test that game type value again
0160 272A             (         sub1.asm):00440                 beq   Ext_MD           if zero we're done
                      (         sub1.asm):00441         
0162 F64CA0           (         sub1.asm):00442                 ldb   X4CA0
0165 102B002F         (         sub1.asm):00443                 lbmi  Ext_MD2          if negative were done
0169 8609             (         sub1.asm):00444                 lda   #$09             otherwise multiply by 9
016B 3D               (         sub1.asm):00445                 mul   
016C 308D1427         (         sub1.asm):00446                 leax  >ByteTbl3,pcr    load pointer to bytetable
0170 308B             (         sub1.asm):00447                 leax  d,x              index into it and use that as copy from addr
0172 108E4C63         (         sub1.asm):00448                 ldy   #$4C63           set destination address to copy to
0176 8D16             (         sub1.asm):00449                 bsr   Copy_9           copy 9 bytes
                      (         sub1.asm):00450               
0178 F64CA1           (         sub1.asm):00451                 ldb   X4CA1
017B 2B1B             (         sub1.asm):00452                 bmi   Ext_MD2          if negative we're done
017D 8609             (         sub1.asm):00453                 lda   #$09             same as above for 9 more bytes 
017F 3D               (         sub1.asm):00454                 mul   
0180 308D1413         (         sub1.asm):00455                 leax  >ByteTbl3,pcr
0184 308B             (         sub1.asm):00456                 leax  d,x
0186 108E4C6C         (         sub1.asm):00457                 ldy   #$4C6C
018A 8D02             (         sub1.asm):00458                 bsr   Copy_9
                      (         sub1.asm):00459               
018C                  (         sub1.asm):00460         Ext_MD
018C 35F6             (         sub1.asm):00461         L018C   puls  a,b,x,y,u,pc
                      (         sub1.asm):00462         
                      (         sub1.asm):00463         
018E                  (         sub1.asm):00464         Copy_9
018E 8609             (         sub1.asm):00465         L018E   lda   #$09             for the use only twice I would have inlined this snippet 
                      (         sub1.asm):00466         
0190                  (         sub1.asm):00467         Loop_9
0190 E680             (         sub1.asm):00468         L0190   ldb   ,x+
0192 E7A0             (         sub1.asm):00469                 stb   ,y+
0194 4A               (         sub1.asm):00470                 deca  
0195 26F9             (         sub1.asm):00471                 bne   Loop_9   
0197 39               (         sub1.asm):00472                 rts   
                      (         sub1.asm):00473         
                      (         sub1.asm):00474         
0198                  (         sub1.asm):00475         Ext_MD2      
0198 35F6             (         sub1.asm):00476         L0198   puls  a,b,x,y,u,pc
                      (         sub1.asm):00477         
                      (         sub1.asm):00478         
019A 3476             (         sub1.asm):00479         L019A   pshs  a,b,x,y,u
019C F64C76           (         sub1.asm):00480                 ldb   X4C76            check that game type value again
019F C102             (         sub1.asm):00481                 cmpb  #$02             is it a 2 War Time Command ?       
01A1 1027005E         (         sub1.asm):00482                 lbeq  inc2             if so head for inc & inc
                      (         sub1.asm):00483                  
01A5 7D4C76           (         sub1.asm):00484                 tst   X4C76            check that game type value again
01A8 260F             (         sub1.asm):00485                 bne   L01B9            not target practice branch
                      (         sub1.asm):00486                 
01AA C624             (         sub1.asm):00487                 ldb   #$24             set some men loactaions with $
01AC F702A3           (         sub1.asm):00488                 stb   X02A3            the side value
01AF F74D3B           (         sub1.asm):00489                 stb   X4D3B
                      (         sub1.asm):00490                 
01B2 8601             (         sub1.asm):00491                 lda   #$01             US
01B4 B74C75           (         sub1.asm):00492                 sta   X4C75            set side value
01B7 35F6             (         sub1.asm):00493                 puls  a,b,x,y,u,pc
                      (         sub1.asm):00494         
                      (         sub1.asm):00495         
01B9 F61E16           (         sub1.asm):00496         L01B9   ldb   X1E16            year value
01BC F14D3D           (         sub1.asm):00497                 cmpb  X4D3D            new year value
01BF 2616             (         sub1.asm):00498                 bne   L01D7            not equal branch to next sub
                      (         sub1.asm):00499                 
01C1 F64C75           (         sub1.asm):00500                 ldb   X4C75            side value 
01C4 F14D3C           (         sub1.asm):00501                 cmpb  X4D3C            new side value
01C7 260E             (         sub1.asm):00502                 bne   L01D7            not equal branch to next sub
                      (         sub1.asm):00503                 
01C9 F602A3           (         sub1.asm):00504                 ldb   X02A3            Side value
01CC 5C               (         sub1.asm):00505                 incb                   bump it
01CD F14D3B           (         sub1.asm):00506                 cmpb  X4D3B            compare to mate
01D0 2705             (         sub1.asm):00507                 beq   L01D7            if equal branch to next sub
01D2 F702A3           (         sub1.asm):00508                 stb   X02A3            if not stow b at side value
01D5 35F6             (         sub1.asm):00509                 puls  a,b,x,y,u,pc
                      (         sub1.asm):00510         
                      (         sub1.asm):00511         
01D7 F64C75           (         sub1.asm):00512         L01D7   ldb   X4C75            side value
01DA F74D3C           (         sub1.asm):00513                 stb   X4D3C            new side value
                      (         sub1.asm):00514                 
01DD F61E16           (         sub1.asm):00515                 ldb   X1E16            year value
01E0 F74D3D           (         sub1.asm):00516                 stb   X4D3D            new year value
                      (         sub1.asm):00517                 
01E3 C027             (         sub1.asm):00518                 subb  #39              start year german b used as index below
                      (         sub1.asm):00519                 
01E5 B64C75           (         sub1.asm):00520                 lda   X4C75            side value
01E8 8100             (         sub1.asm):00521                 cmpa  #0               German ?
01EA 2606             (         sub1.asm):00522                 bne   Loadtb
                      (         sub1.asm):00523                 
01EC 308D001B         (         sub1.asm):00524                 leax  >ByteTblA,pcr    German
01F0 2004             (         sub1.asm):00525                 bra   Gotta
                      (         sub1.asm):00526                 
01F2 308D001D         (         sub1.asm):00527         Loadtb  leax  >ByteTblB,pcr    American
01F6 A685             (         sub1.asm):00528         Gotta   lda   b,x  
01F8 B702A3           (         sub1.asm):00529                 sta   X02A3            side value
                      (         sub1.asm):00530           
01FB 5C               (         sub1.asm):00531                 incb                   bump b by one
01FC A685             (         sub1.asm):00532                 lda   b,x              index into x again
01FE B74D3B           (         sub1.asm):00533                 sta   X4D3B            stow that
0201 35F6             (         sub1.asm):00534                 puls  a,b,x,y,u,pc
                      (         sub1.asm):00535         
                      (         sub1.asm):00536         
0203 7C02A3           (         sub1.asm):00537         inc2    inc   X02A3            side value
0206 7C4D3B           (         sub1.asm):00538                 inc   X4D3B
0209 35F6             (         sub1.asm):00539                 puls  a,b,x,y,u,pc
                      (         sub1.asm):00540                 
                      (         sub1.asm):00541         
020B                  (         sub1.asm):00542         ByteTblA
020B 0002090F151B2124 (         sub1.asm):00543         L020B   fcb   $00,$02,$09,$0F,$15,$1B,$21,$24
                      (         sub1.asm):00544         
0213                  (         sub1.asm):00545         ByteTblB
0213 000000242E32393C (         sub1.asm):00546         L0213   fcb   $00,$00,$00,$24,$2E,$32,$39,$3C
                      (         sub1.asm):00547         
                      (         sub1.asm):00548         
021B 3476             (         sub1.asm):00549         L021B   pshs  a,b,x,y,u
                      (         sub1.asm):00550         
021D C6FF             (         sub1.asm):00551                 ldb   #$FF             set b to $FF
021F 8E4C8A           (         sub1.asm):00552                 ldx   #$4C8A           start address to set bytes
0222 E780             (         sub1.asm):00553         Loop25  stb   ,x+              set byte and bump pointer
0224 8C4CA4           (         sub1.asm):00554                 cmpx  #$4CA4           have we moved 25 bytes?
0227 25F9             (         sub1.asm):00555                 blo   Loop25           nope loop again
                      (         sub1.asm):00556                 
0229 CC0000           (         sub1.asm):00557                 ldd   #0000            I'm sure there is a reason these
022C FD4CA4           (         sub1.asm):00558                 std   X4CA4            jump all over the place
022F FD4CA6           (         sub1.asm):00559                 std   X4CA6            but it sure isn't self evident
                      (         sub1.asm):00560                 
0232 7F4C90           (         sub1.asm):00561                 clr   X4C90
                      (         sub1.asm):00562                 
0235 C605             (         sub1.asm):00563                 ldb   #$05
0237 F74CB1           (         sub1.asm):00564                 stb   X4CB1
                      (         sub1.asm):00565                 
023A C610             (         sub1.asm):00566                 ldb   #$10
023C F74CAB           (         sub1.asm):00567                 stb   X4CAB
                      (         sub1.asm):00568                 
023F 7F4CB3           (         sub1.asm):00569                 clr   X4CB3
0242 7F4CB4           (         sub1.asm):00570                 clr   X4CB4
                      (         sub1.asm):00571                 
0245 8E0579           (         sub1.asm):00572                 ldx   #$0579
0248 C606             (         sub1.asm):00573                 ldb   #$06
024A E701             (         sub1.asm):00574                 stb   $01,x
                      (         sub1.asm):00575                 
024C 8660             (         sub1.asm):00576                 lda   #$60
024E A702             (         sub1.asm):00577                 sta   $02,x
0250 B71DF6           (         sub1.asm):00578                 sta   X1DF6
                      (         sub1.asm):00579                 
0253 CC0064           (         sub1.asm):00580                 ldd   #$0064
0256 ED03             (         sub1.asm):00581                 std   $03,x
                      (         sub1.asm):00582                 
0258 867F             (         sub1.asm):00583                 lda   #$7F
025A A705             (         sub1.asm):00584                 sta   $05,x
025C B71DF9           (         sub1.asm):00585                 sta   X1DF9
                      (         sub1.asm):00586                 
025F CC3FFF           (         sub1.asm):00587                 ldd   #$3FFF
0262 ED06             (         sub1.asm):00588                 std   $06,x
                      (         sub1.asm):00589         
0264 6F8812           (         sub1.asm):00590                 clr   $12,x            this gets overwritten below
0267 6F08             (         sub1.asm):00591                 clr   $08,x
                      (         sub1.asm):00592         *                              $09.x is not manipulated 
                      (         sub1.asm):00593                 
0269 300A             (         sub1.asm):00594                 leax  $0A,x            so now x is pointed to $0583
                      (         sub1.asm):00595         
026B CC0108           (         sub1.asm):00596                 ldd   #$0108           this is cute a=$01 b=$08
026E A780             (         sub1.asm):00597         Set8    sta   ,x+              set 8 bytes to 1
0270 5A               (         sub1.asm):00598                 decb                   dec the counter
0271 26FB             (         sub1.asm):00599                 bne   Set8
                      (         sub1.asm):00600                 
                      (         sub1.asm):00601         *                              so when we're finished here starting $0580 we have  
                      (         sub1.asm):00602         *                               0580     $06,$60,$00,$64,$7F,$3F,$FF,$00
                      (         sub1.asm):00603         *                               0588      ??,$01,$01,$01,$01,$01,$01,$01
                      (         sub1.asm):00604         *                               0590     $01,$01
                      (         sub1.asm):00605         
0273 7F0296           (         sub1.asm):00606                 clr   X0296
                      (         sub1.asm):00607                 
0276 CC0320           (         sub1.asm):00608                 ldd   #$0320
0279 FD1D6D           (         sub1.asm):00609                 std   X1D6D
                      (         sub1.asm):00610                 
027C 1701FA           (         sub1.asm):00611                 lbsr  L0479            branch down and set some more based at $0579
027F 35F6             (         sub1.asm):00612                 puls  a,b,x,y,u,pc
                      (         sub1.asm):00613               
                      (         sub1.asm):00614          
0281                  (         sub1.asm):00615         GetSubStat      
0281 3476             (         sub1.asm):00616         L0281   pshs  a,b,x,y,u
0283 86FF             (         sub1.asm):00617                 lda   #$FF
0285 B70295           (         sub1.asm):00618                 sta   X0295
                      (         sub1.asm):00619                 
0288 8601             (         sub1.asm):00620                 lda   #READ.
028A 308D1263         (         sub1.asm):00621                 leax  >SubStat,pcr
028E 103F84           (         sub1.asm):00622                 os9   I$Open
                      (         sub1.asm):00623               
0291 B71DD9           (         sub1.asm):00624                 sta   X1DD9            stow the path num
                      (         sub1.asm):00625               
0294 B64CB1           (         sub1.asm):00626                 lda   X4CB1            First read of sub stats        
0297 C622             (         sub1.asm):00627                 ldb   #$22
0299 3D               (         sub1.asm):00628                 mul   
029A 8E0000           (         sub1.asm):00629                 ldx   #0               MS 16 bits of file position
029D 1F03             (         sub1.asm):00630                 tfr   d,u              LS 16 bits of file position
029F B61DD9           (         sub1.asm):00631                 lda   X1DD9            get the path num
02A2 103F88           (         sub1.asm):00632                 os9   I$Seek           reset file pointer to the head of the file  
                      (         sub1.asm):00633               
02A5 8E4CCC           (         sub1.asm):00634                 ldx   #$4CCC           destination address
02A8 108E0022         (         sub1.asm):00635                 ldy   #$0022           number of bytes to read
02AC B61DD9           (         sub1.asm):00636                 lda   X1DD9            get that pesky path number (not needed)
02AF 103F89           (         sub1.asm):00637                 os9   I$Read           read the data
                      (         sub1.asm):00638                 
02B2 B64CB2           (         sub1.asm):00639                 lda   X4CB2            second read of sub stats
02B5 C60D             (         sub1.asm):00640                 ldb   #$0D
02B7 3D               (         sub1.asm):00641                 mul   
02B8 C300CC           (         sub1.asm):00642                 addd  #$00CC
02BB 8E0000           (         sub1.asm):00643                 ldx   #0               MS 16 bits of file position
02BE 1F03             (         sub1.asm):00644                 tfr   d,u              LS 16 bits of file position
02C0 B61DD9           (         sub1.asm):00645                 lda   X1DD9            get path num
02C3 103F88           (         sub1.asm):00646                 os9   I$Seek           position the file pointer
                      (         sub1.asm):00647                 
02C6 8E4CBD           (         sub1.asm):00648                 ldx   #$4CBD           destination address
02C9 108E000D         (         sub1.asm):00649                 ldy   #$000D           number of bytes to read
02CD B61DD9           (         sub1.asm):00650                 lda   X1DD9            get the path num (not needed)
02D0 103F89           (         sub1.asm):00651                 os9   I$Read           read the data
                      (         sub1.asm):00652               
02D3 B64C75           (         sub1.asm):00653                 lda   X4C75            test side value  
02D6 8100             (         sub1.asm):00654                 cmpa  #0               is it zero?  German
02D8 2705             (         sub1.asm):00655                 beq   Geroff           if so branch to get next file pos
02DA CE0134           (         sub1.asm):00656                 ldu   #$0134           LS 16 bits of file position
02DD 2003             (         sub1.asm):00657                 bra   SetMS1           go get the MS word
02DF CE01AC           (         sub1.asm):00658         Geroff  ldu   #$01AC           LS 16 bits of file position
02E2 8E0000           (         sub1.asm):00659         SetMS1  ldx   #$0000           MS 16 bits of file position
02E5 B61DD9           (         sub1.asm):00660                 lda   X1DD9            get path num
02E8 103F88           (         sub1.asm):00661                 os9   I$Seek           position the file pointer
                      (         sub1.asm):00662               
02EB 8E0501           (         sub1.asm):00663                 ldx   #$0501           destination addr
02EE 108E0078         (         sub1.asm):00664                 ldy   #$0078           number bytes to read
02F2 B61DD9           (         sub1.asm):00665                 lda   X1DD9            get path num
02F5 103F89           (         sub1.asm):00666                 os9   I$Read           read the data
                      (         sub1.asm):00667               
02F8 B64C75           (         sub1.asm):00668                 lda   X4C75            test side for next read value
02FB 8100             (         sub1.asm):00669                 cmpa  #0               German ?
02FD 2705             (         sub1.asm):00670                 beq   Geroff2          set up next seek 
02FF CE0224           (         sub1.asm):00671                 ldu   #$0224           LS word of pos
0302 2003             (         sub1.asm):00672                 bra   SetMS2           go set MS word
0304 CE02A2           (         sub1.asm):00673         Geroff2 ldu   #$02A2           LS word of pos
0307 8E0000           (         sub1.asm):00674         SetMS2  ldx   #$0000           MS word of pos
030A B61DD9           (         sub1.asm):00675                 lda   X1DD9            get the path num
030D 103F88           (         sub1.asm):00676                 os9   I$Seek           set the file pointer
                      (         sub1.asm):00677               
0310 8E02B7           (         sub1.asm):00678                 ldx   #$02B7           destination address
0313 108E007E         (         sub1.asm):00679                 ldy   #$007E           number of bytes to read 
0317 B61DD9           (         sub1.asm):00680                 lda   X1DD9            get the path num  (not needed)
031A 103F89           (         sub1.asm):00681                 os9   I$Read           fetch the data
                      (         sub1.asm):00682               
031D B61DD9           (         sub1.asm):00683                 lda   X1DD9            get the path num (not needed)
0320 103F8F           (         sub1.asm):00684                 os9   I$Close          close the file
                      (         sub1.asm):00685               
0323 8E4A80           (         sub1.asm):00686                 ldx   #$4A80           load base addr for offset index addressing
0326 CE02B7           (         sub1.asm):00687                 ldu   #$02B7           load base addr for offset index addressing
                      (         sub1.asm):00688               
0329 C606             (         sub1.asm):00689                 ldb   #$06
032B 3404             (         sub1.asm):00690                 pshs  b
                      (         sub1.asm):00691         
032D                  (         sub1.asm):00692         Transtat      
032D 6F00             (         sub1.asm):00693         L032D   fdb   Zclr_x           clr 0,x  
                      (         sub1.asm):00694               
032F A641             (         sub1.asm):00695                 lda   $01,u
0331 A703             (         sub1.asm):00696                 sta   $03,x           
                      (         sub1.asm):00697               
0333 EC42             (         sub1.asm):00698                 ldd   $02,u
0335 ED04             (         sub1.asm):00699                 std   $04,x           
                      (         sub1.asm):00700               
0337 A644             (         sub1.asm):00701                 lda   $04,u
0339 A706             (         sub1.asm):00702                 sta   $06,x           
                      (         sub1.asm):00703               
033B EC45             (         sub1.asm):00704                 ldd   $05,u
033D ED07             (         sub1.asm):00705                 std   $07,x           
                      (         sub1.asm):00706               
033F CC0000           (         sub1.asm):00707                 ldd   #0               set up to clr word
0342 ED01             (         sub1.asm):00708                 std   $01,x           
0344 ED09             (         sub1.asm):00709                 std   $09,x           
                      (         sub1.asm):00710               
0346 308815           (         sub1.asm):00711                 leax  $15,x            bump pointer by 21
0349 33C815           (         sub1.asm):00712                 leau  $15,u
034C 6AE4             (         sub1.asm):00713                 dec   ,s               dec the counter
034E 26DD             (         sub1.asm):00714                 bne   Transtat         gone 6 times ? nope loop again
                      (         sub1.asm):00715               
0350 3504             (         sub1.asm):00716                 puls  b                clean up stack
                      (         sub1.asm):00717               
0352 8605             (         sub1.asm):00718                 lda   #$05
0354 170096           (         sub1.asm):00719                 lbsr  SetByte
                      (         sub1.asm):00720               
0357 F61E16           (         sub1.asm):00721                 ldb   X1E16           load year value
035A 7D4C75           (         sub1.asm):00722                 tst   X4C75           test side value 0=German 1=US
035D 10260039         (         sub1.asm):00723                 lbne  tst2A           test value not zero skip to compare b $2A
0361 C127             (         sub1.asm):00724                 cmpb  #$27            is it 39 ?
0363 2612             (         sub1.asm):00725                 bne   tst28           nope goto next test
0365 8602             (         sub1.asm):00726                 lda   #2
0367 170083           (         sub1.asm):00727                 lbsr  SetByte
036A 8603             (         sub1.asm):00728                 lda   #3
036C 17007E           (         sub1.asm):00729                 lbsr  SetByte
036F 8604             (         sub1.asm):00730                 lda   #4
0371 170079           (         sub1.asm):00731                 lbsr  SetByte
0374 160074           (         sub1.asm):00732                 lbra  ExtSubStat
                      (         sub1.asm):00733               
0377 C128             (         sub1.asm):00734         tst28   cmpb  #$28            is it 40 ?
0379 2618             (         sub1.asm):00735                 bne   tst29           nope go to next test
037B 8602             (         sub1.asm):00736                 lda   #2
037D 17006D           (         sub1.asm):00737                 lbsr  SetByte
                      (         sub1.asm):00738                 
0380 FC1E17           (         sub1.asm):00739                 ldd   X1E17
0383 1083005A         (         sub1.asm):00740                 cmpd  #$005A
0387 102E0060         (         sub1.asm):00741                 lbgt  ExtSubStat
                      (         sub1.asm):00742                 
038B 8603             (         sub1.asm):00743                 lda   #3
038D 17005D           (         sub1.asm):00744                 lbsr  SetByte
0390 160058           (         sub1.asm):00745                 lbra  ExtSubStat
                      (         sub1.asm):00746               
0393 C129             (         sub1.asm):00747         tst29   cmpb  #$29            is it 41 ?
0395 2603             (         sub1.asm):00748                 bne   tst2a
0397 160051           (         sub1.asm):00749                 lbra  ExtSubStat
                      (         sub1.asm):00750                 
039A C12A             (         sub1.asm):00751         tst2a   cmpb  #$2A            is it 42 ?
039C 2603             (         sub1.asm):00752                 bne   tst2b
039E 16004A           (         sub1.asm):00753                 lbra  ExtSubStat
                      (         sub1.asm):00754                 
03A1 C12B             (         sub1.asm):00755         tst2b   cmpb  #$2B            is it 43 ?
03A3 260D             (         sub1.asm):00756                 bne   tst2c
03A5 7D4C75           (         sub1.asm):00757                 tst   X4C75           test side value
03A8 2741             (         sub1.asm):00758                 beq   ExtSubStat      german ?
                      (         sub1.asm):00759                 
03AA 8604             (         sub1.asm):00760                 lda   #4
03AC 17003E           (         sub1.asm):00761                 lbsr  SetByte
03AF 160039           (         sub1.asm):00762                 lbra  ExtSubStat
                      (         sub1.asm):00763                 
03B2 C12C             (         sub1.asm):00764         tst2c   cmpb  #$2C            is it 44 ?
03B4 2624             (         sub1.asm):00765                 bne   tstlst
03B6 7D4C75           (         sub1.asm):00766                 tst   X4C75
03B9 1026002E         (         sub1.asm):00767                 lbne  ExtSubStat
03BD FC1E17           (         sub1.asm):00768                 ldd   X1E17
03C0 10830099         (         sub1.asm):00769                 cmpd  #$0099
03C4 10230023         (         sub1.asm):00770                 lbls  ExtSubStat
                      (         sub1.asm):00771                 
03C8 8602             (         sub1.asm):00772         L03C8   lda   #2
03CA 170020           (         sub1.asm):00773                 lbsr  SetByte
03CD 8604             (         sub1.asm):00774                 lda   #4
03CF 17001B           (         sub1.asm):00775                 lbsr  SetByte
03D2 8603             (         sub1.asm):00776                 lda   #3
03D4 170016           (         sub1.asm):00777                 lbsr  SetByte
03D7 160011           (         sub1.asm):00778                 lbra  ExtSubStat
                      (         sub1.asm):00779                 
03DA 7D4C75           (         sub1.asm):00780         tstlst  tst   X4C75
03DD 27E9             (         sub1.asm):00781                 beq   L03C8
03DF 8605             (         sub1.asm):00782                 lda   #5
03E1 C615             (         sub1.asm):00783                 ldb   #$15
03E3 3D               (         sub1.asm):00784                 mul   
03E4 8E4A80           (         sub1.asm):00785                 ldx   #$4A80
03E7 308B             (         sub1.asm):00786                 leax  d,x
03E9 6F00             (         sub1.asm):00787                 fdb   Zclr_x          clr 0,x
                      (         sub1.asm):00788         
03EB                  (         sub1.asm):00789         ExtSubStat
03EB 35F6             (         sub1.asm):00790         L03EB   puls  a,b,x,y,u,pc
                      (         sub1.asm):00791         
                      (         sub1.asm):00792         
                      (         sub1.asm):00793         *  a is passed by caller
                      (         sub1.asm):00794         *  Calcs an offset from base addr and sets it to FF
                      (         sub1.asm):00795         *  
03ED                  (         sub1.asm):00796         SetByte
03ED 3476             (         sub1.asm):00797         L03ED   pshs  a,b,x,y,u
03EF C615             (         sub1.asm):00798                 ldb   #$15
03F1 3D               (         sub1.asm):00799                 mul   
03F2 8E4A80           (         sub1.asm):00800                 ldx   #$4A80
03F5 308B             (         sub1.asm):00801                 leax  d,x
03F7 86FF             (         sub1.asm):00802                 lda   #$FF
03F9 A700             (         sub1.asm):00803                 fdb   Zsta_x
03FB 35F6             (         sub1.asm):00804                 puls  a,b,x,y,u,pc
                      (         sub1.asm):00805         
                      (         sub1.asm):00806         
03FD                  (         sub1.asm):00807         GetConvoy
03FD 3476             (         sub1.asm):00808         L03FD   pshs  a,b,x,y,u
03FF B64C76           (         sub1.asm):00809                 lda   X4C76           check the game type byte
0402 2602             (         sub1.asm):00810                 bne   ReadConvoy      not target practice
0404 35F6             (         sub1.asm):00811                 puls  a,b,x,y,u,pc
                      (         sub1.asm):00812         
                      (         sub1.asm):00813         
0406                  (         sub1.asm):00814         ReadConvoy
0406 308D10B6         (         sub1.asm):00815         L0406   leax  >Convoys,pcr
040A 8601             (         sub1.asm):00816                 lda   #READ.
040C 103F84           (         sub1.asm):00817                 os9   I$Open
040F B71DD9           (         sub1.asm):00818                 sta   X1DD9           save that path num
0412 8E4C90           (         sub1.asm):00819                 ldx   #$4C90          set up destination addr
0415 108E0579         (         sub1.asm):00820                 ldy   #$0579          addr for inner loop RCLop2
                      (         sub1.asm):00821                 
0419 C604             (         sub1.asm):00822                 ldb   #4              loop counter
041B 3404             (         sub1.asm):00823                 pshs  b               push on the stack
041D E680             (         sub1.asm):00824         RCloop  ldb   ,x+             get the first byte at 4C90 and bump the pointer
041F 102B0045         (         sub1.asm):00825                 lbmi  RCLend          go to loop end        
0423 8616             (         sub1.asm):00826                 lda   #$16            calc the seek position
0425 3D               (         sub1.asm):00827                 mul   
0426 1F03             (         sub1.asm):00828                 tfr   d,u             LS Word file pos
0428 3430             (         sub1.asm):00829                 pshs  x,y             save destination and bytes to read 
042A 8E0000           (         sub1.asm):00830                 ldx   #0              MS Word file pos
042D B61DD9           (         sub1.asm):00831                 lda   X1DD9           path num
0430 103F88           (         sub1.asm):00832                 os9   I$Seek          reset the file pointer
0433 AE62             (         sub1.asm):00833                 ldx   $02,s           get the val off the stack
0435 108E0016         (         sub1.asm):00834                 ldy   #$0016          bytes to read 
0439 B61DD9           (         sub1.asm):00835                 lda   X1DD9           path num
043C 103F89           (         sub1.asm):00836                 os9   I$Read          fetch the data 
                      (         sub1.asm):00837                 
043F 3530             (         sub1.asm):00838                 puls  x,y             grab the old x and y
0441 C603             (         sub1.asm):00839                 ldb   #3              set up an inner loop 
                      (         sub1.asm):00840         
0443 3404             (         sub1.asm):00841         RCLop2  pshs  b               push the counter on the stack
0445 E622             (         sub1.asm):00842                 ldb   $02,y           get the third byte at y
0447 CB3B             (         sub1.asm):00843                 addb  #$3B            add to it
0449 7D4C75           (         sub1.asm):00844                 tst   X4C75           test side value 
044C 2702             (         sub1.asm):00845                 beq   RCx1            if zero (german) stow it and get new thing to work on
044E CB15             (         sub1.asm):00846                 addb  #$15            otherwise add some more to it then 
0450 E722             (         sub1.asm):00847         RCx1    stb   $02,y           stow it back
0452 E625             (         sub1.asm):00848                 ldb   $05,y           get the next one to work with
0454 CB27             (         sub1.asm):00849                 addb  #$27            add to it
0456 7D4C75           (         sub1.asm):00850                 tst   X4C75           check that side value
0459 2702             (         sub1.asm):00851                 beq   RCx2            if zero (german) stow that and cycle the loop
045B CB0B             (         sub1.asm):00852                 addb  #$0B            otherwise add some more then
045D E725             (         sub1.asm):00853         RCx2    stb   $05,y           stow it back
045F 3121             (         sub1.asm):00854                 leay  $01,y           bump pointer +1
0461 3504             (         sub1.asm):00855                 puls  b               pull the loop counter
0463 5A               (         sub1.asm):00856                 decb                  decrement it
0464 26DD             (         sub1.asm):00857                 bne   RCLop2          loop if we haven't gone 3 times
                      (         sub1.asm):00858                 
0466 313D             (         sub1.asm):00859                 leay  -$03,y          after 3 loops move y back to start of inner loop value
0468 31A816           (         sub1.asm):00860         RCLend  leay  $16,y           set y up for the next $16 byte read        
046B 6AE4             (         sub1.asm):00861                 dec   ,s              dec the outer loop counter
046D 26AE             (         sub1.asm):00862                 bne   RCloop          not gone four times ? loop again
                      (         sub1.asm):00863                 
046F 3504             (         sub1.asm):00864                 puls  b               otherwise clean up stack
                      (         sub1.asm):00865                 
0471 B61DD9           (         sub1.asm):00866                 lda   X1DD9           get that good old path number
0474 103F8F           (         sub1.asm):00867                 os9   I$Close         and close the file
0477 35F6             (         sub1.asm):00868                 puls  a,b,x,y,u,pc    return
                      (         sub1.asm):00869                 
                      (         sub1.asm):00870         
                      (         sub1.asm):00871         *  what do I do in the great scheme of things???        
0479 3476             (         sub1.asm):00872         L0479   pshs  a,b,x,y,u       our generic save all
                      (         sub1.asm):00873         
047B F60296           (         sub1.asm):00874                 ldb   X0296
047E 8616             (         sub1.asm):00875                 lda   #$16
0480 3D               (         sub1.asm):00876                 mul                   calc an offset
0481 8E0579           (         sub1.asm):00877                 ldx   #$0579          get the base address
0484 308B             (         sub1.asm):00878                 leax  d,x             set the pointer to base + offset
0486 A604             (         sub1.asm):00879                 lda   $04,x        
0488 2A08             (         sub1.asm):00880                 bpl   PosVal          is it positive ? branch
048A A602             (         sub1.asm):00881                 lda   $02,x           otherwise shift a couple bytes
048C A704             (         sub1.asm):00882                 sta   $04,x           first then go on
048E A605             (         sub1.asm):00883                 lda   $05,x
0490 A707             (         sub1.asm):00884                 sta   $07,x
                      (         sub1.asm):00885         
0492 8601             (         sub1.asm):00886         PosVal  lda   #$01
0494 A708             (         sub1.asm):00887                 sta   $08,x
                      (         sub1.asm):00888                 
0496 F60296           (         sub1.asm):00889                 ldb   X0296
0499 170013           (         sub1.asm):00890                 lbsr  L04AF
                      (         sub1.asm):00891                 
049C 8607             (         sub1.asm):00892                 lda   #$07            outer loop counter
049E 330A             (         sub1.asm):00893                 leau  $0A,x           load u with x+10
                      (         sub1.asm):00894         
04A0 E6C6             (         sub1.asm):00895         Outloop ldb   a,u             load b with u+counter (inner counter)
04A2 2706             (         sub1.asm):00896                 beq   Decout          is it zero branch out
04A4 170033           (         sub1.asm):00897         In_loop lbsr  L04DA           not zero  
04A7 5A               (         sub1.asm):00898                 decb                  dec inner counter
04A8 26FA             (         sub1.asm):00899                 bne   In_loop
04AA 4A               (         sub1.asm):00900         Decout  deca  
04AB 2AF3             (         sub1.asm):00901                 bpl   Outloop
04AD 35F6             (         sub1.asm):00902                 puls  a,b,x,y,u,pc
                      (         sub1.asm):00903         
                      (         sub1.asm):00904         
                      (         sub1.asm):00905         *       value passed in b from caller
04AF 3476             (         sub1.asm):00906         L04AF   pshs  a,b,x,y,u
04B1 CE4A02           (         sub1.asm):00907                 ldu   #$4A02          set base offset
04B4 8615             (         sub1.asm):00908                 lda   #$15            compute offset
04B6 3D               (         sub1.asm):00909                 mul   
04B7 33CB             (         sub1.asm):00910                 leau  d,u             set base + offset
04B9 6F40             (         sub1.asm):00911                 fdb   Zclr_u          clear the byte at u
04BB 6FC810           (         sub1.asm):00912                 clr   $10,u
                      (         sub1.asm):00913                 
04BE FC1DF6           (         sub1.asm):00914                 ldd   X1DF6
04C1 ED43             (         sub1.asm):00915                 std   $03,u
                      (         sub1.asm):00916                 
04C3 FC1DF9           (         sub1.asm):00917                 ldd   X1DF9
04C6 ED46             (         sub1.asm):00918                 std   $06,u
                      (         sub1.asm):00919                 
04C8 FC1D6D           (         sub1.asm):00920                 ldd   X1D6D
04CB ED49             (         sub1.asm):00921                 std   $09,u
                      (         sub1.asm):00922                 
04CD E601             (         sub1.asm):00923                 ldb   1,x             could have pulled x off the stack 
04CF 4F               (         sub1.asm):00924                 clra                  instead of mucking around with u
04D0 ED41             (         sub1.asm):00925                 std   $01,u
                      (         sub1.asm):00926                 
04D2 AFC812           (         sub1.asm):00927                 stx   $12,u
                      (         sub1.asm):00928                 
04D5 FF71B1           (         sub1.asm):00929                 stu   X71B1           stow $4a02 at 71b1
04D8 35F6             (         sub1.asm):00930                 puls  a,b,x,y,u,pc
                      (         sub1.asm):00931         
                      (         sub1.asm):00932          
04DA 3476             (         sub1.asm):00933         L04DA   pshs  a,b,x,y,u
04DC C641             (         sub1.asm):00934                 ldb   #$41
04DE F71E13           (         sub1.asm):00935                 stb   X1E13
                      (         sub1.asm):00936                 
04E1 CE42B5           (         sub1.asm):00937                 ldu   #$42B5          set base address
04E4 E640             (         sub1.asm):00938         L04E4   fdb   Zldb_u          ldb ,u
04E6 2A55             (         sub1.asm):00939                 bpl   L053D
                      (         sub1.asm):00940                 
04E8 3410             (         sub1.asm):00941                 pshs  x               we've pushed it once
04EA 308D0FCA         (         sub1.asm):00942                 leax  >ByteTblF,pcr
04EE A686             (         sub1.asm):00943                 lda   a,x
04F0 A7C812           (         sub1.asm):00944                 sta   $12,u
04F3 3510             (         sub1.asm):00945                 puls  x
                      (         sub1.asm):00946                 
04F5 6F40             (         sub1.asm):00947                 fdb   Zclr_u          clr ,u
04F7 6FC810           (         sub1.asm):00948                 clr   $10,u
                      (         sub1.asm):00949                 
04FA FC1DF6           (         sub1.asm):00950                 ldd   X1DF6
04FD ED43             (         sub1.asm):00951                 std   $03,u
                      (         sub1.asm):00952                 
04FF CC1FFF           (         sub1.asm):00953                 ldd   #$1FFF
0502 BD76A4           (         sub1.asm):00954                 jsr   X76A4
0505 E344             (         sub1.asm):00955                 addd  $04,u
0507 ED44             (         sub1.asm):00956                 std   $04,u
                      (         sub1.asm):00957                 
0509 FC1DF9           (         sub1.asm):00958                 ldd   X1DF9
050C ED46             (         sub1.asm):00959                 std   $06,u
050E CC1FFD           (         sub1.asm):00960                 ldd   #$1FFD
0511 BD76A4           (         sub1.asm):00961                 jsr   X76A4
0514 E347             (         sub1.asm):00962                 addd  $07,u
0516 ED47             (         sub1.asm):00963                 std   $07,u
                      (         sub1.asm):00964                 
0518 FC1D6D           (         sub1.asm):00965                 ldd   X1D6D
051B ED49             (         sub1.asm):00966                 std   $09,u
051D E601             (         sub1.asm):00967                 ldb   $01,x
051F 4F               (         sub1.asm):00968                 clra  
0520 ED41             (         sub1.asm):00969                 std   $01,u
                      (         sub1.asm):00970                 
0522 FC71B1           (         sub1.asm):00971                 ldd   X71B1
0525 EDC813           (         sub1.asm):00972                 std   $13,u
                      (         sub1.asm):00973                 
0528 3440             (         sub1.asm):00974                 pshs  u
052A 3143             (         sub1.asm):00975                 leay  $03,u
052C CE4C84           (         sub1.asm):00976                 ldu   #$4C84
052F BD74D9           (         sub1.asm):00977                 jsr   X74D9
0532 1F32             (         sub1.asm):00978                 tfr   u,y
0534 3540             (         sub1.asm):00979                 puls  u
                      (         sub1.asm):00980                 
0536 10AF4E           (         sub1.asm):00981                 sty   $0E,u
0539 A74D             (         sub1.asm):00982                 sta   $0D,u
053B 35F6             (         sub1.asm):00983                 puls  a,b,x,y,u,pc
                      (         sub1.asm):00984                 
                      (         sub1.asm):00985                 
053D 33C815           (         sub1.asm):00986         L053D   leau  $15,u
0540 7A1E13           (         sub1.asm):00987                 dec   X1E13
0543 1026FF9D         (         sub1.asm):00988                 lbne  L04E4
                      (         sub1.asm):00989                 
0547 35F6             (         sub1.asm):00990                 puls  a,b,x,y,u,pc
                      (         sub1.asm):00991         
                      (         sub1.asm):00992         
                      (         sub1.asm):00993         *     reads a byte from std in not explicitly called
0549 3476             (         sub1.asm):00994         N0549   pshs  a,b,x,y,u
054B 4F               (         sub1.asm):00995                 clra  
054C 8E1DDA           (         sub1.asm):00996                 ldx   #$1DDA
054F 108E0001         (         sub1.asm):00997                 ldy   #1
0553 103F89           (         sub1.asm):00998                 os9   I$Read
0556 35F6             (         sub1.asm):00999                 puls  a,b,x,y,u,pc
                      (         sub1.asm):01000         
                      (         sub1.asm):01001         
0558                  (         sub1.asm):01002         SetParms2
0558 3476             (         sub1.asm):01003         L0558   pshs  a,b,x,y,u
055A B64C80           (         sub1.asm):01004                 lda   X4C80
055D 8103             (         sub1.asm):01005                 cmpa  #3
055F 2717             (         sub1.asm):01006                 beq   ExtSP2          if three were done
0561 4C               (         sub1.asm):01007                 inca                  bump a
0562 B74C80           (         sub1.asm):01008                 sta   X4C80           and save it back
0565 8E4CA4           (         sub1.asm):01009                 ldx   #$4CA4          set up index
0568 6D86             (         sub1.asm):01010                 tst   a,x             test 
056A 2607             (         sub1.asm):01011                 bne   SetP2       
                      (         sub1.asm):01012         
056C 86FF             (         sub1.asm):01013                 lda   #$FF
056E B74C80           (         sub1.asm):01014                 sta   X4C80
0571 2005             (         sub1.asm):01015                 bra   ExtSP2
                      (         sub1.asm):01016         
0573 8604             (         sub1.asm):01017         SetP2   lda   #4
0575 B74C81           (         sub1.asm):01018                 sta   X4C81
0578                  (         sub1.asm):01019         ExtSP2
0578 35F6             (         sub1.asm):01020         L0578   puls  a,b,x,y,u,pc
                      (         sub1.asm):01021         
                      (         sub1.asm):01022         
                      (         sub1.asm):01023         * Not labeled by the disassembler
057A 3460             (         sub1.asm):01024         N057A   pshs  y,u
057C 108E1E0D         (         sub1.asm):01025                 ldy   #$1E0D
0580 CE4C84           (         sub1.asm):01026                 ldu   #$4C84
0583 BD74D9           (         sub1.asm):01027                 jsr   X74D9
0586 44               (         sub1.asm):01028                 lsra  
0587 44               (         sub1.asm):01029                 lsra  
0588 35E0             (         sub1.asm):01030                 puls  y,u,pc
                      (         sub1.asm):01031         
                      (         sub1.asm):01032         
058A                  (         sub1.asm):01033         SetParams
058A 3476             (         sub1.asm):01034         L058A   pshs  a,b,x,y,u
058C CC0000           (         sub1.asm):01035                 ldd   #0             zero (clear) these words
058F FD4C78           (         sub1.asm):01036                 std   X4C78
0592 FD4C7A           (         sub1.asm):01037                 std   X4C7A
                      (         sub1.asm):01038                 
0595 C6FF             (         sub1.asm):01039                 ldb   #$FF           set these bytes
0597 F74D2B           (         sub1.asm):01040                 stb   X4D2B
059A F74C80           (         sub1.asm):01041                 stb   X4C80
                      (         sub1.asm):01042                 
059D 86FF             (         sub1.asm):01043                 lda   #$FF           switching from accb to acca makes no sense
059F B74D28           (         sub1.asm):01044                 sta   X4D28
                      (         sub1.asm):01045                 
05A2 7F4D11           (         sub1.asm):01046                 clr   X4D11          clear these bytes
05A5 7F4D29           (         sub1.asm):01047                 clr   X4D29
05A8 7F4C82           (         sub1.asm):01048                 clr   X4C82
05AB 7F0500           (         sub1.asm):01049                 clr   X0500
                      (         sub1.asm):01050                 
05AE 5F               (         sub1.asm):01051                 clrb                 now we clear an acc 
05AF F74CEE           (         sub1.asm):01052                 stb   X4CEE          and store the val at these
05B2 F70355           (         sub1.asm):01053                 stb   X0355
05B5 F70298           (         sub1.asm):01054                 stb   X0298
                      (         sub1.asm):01055                 
05B8 17FF9D           (         sub1.asm):01056                 lbsr  SetParms2      call a sub to set some others
                      (         sub1.asm):01057                 
05BB 860A             (         sub1.asm):01058                 lda   #$0A
05BD B71D47           (         sub1.asm):01059                 sta   X1D47
                      (         sub1.asm):01060                 
05C0 8601             (         sub1.asm):01061                 lda   #1
05C2 B71D46           (         sub1.asm):01062                 sta   X1D46
                      (         sub1.asm):01063                 
05C5 863C             (         sub1.asm):01064                 lda   #$3C
05C7 B71D76           (         sub1.asm):01065                 sta   X1D76
                      (         sub1.asm):01066                 
05CA C663             (         sub1.asm):01067                 ldb   #$63
05CC F74D12           (         sub1.asm):01068                 stb   X4D12
05CF F74D13           (         sub1.asm):01069                 stb   X4D13
                      (         sub1.asm):01070                 
05D2 CC6300           (         sub1.asm):01071                 ldd   #$6300
05D5 FD4D1F           (         sub1.asm):01072                 std   X4D1F
05D8 FD4D1B           (         sub1.asm):01073                 std   X4D1B
05DB FD4D1D           (         sub1.asm):01074                 std   X4D1D
                      (         sub1.asm):01075                 
05DE B64CE0           (         sub1.asm):01076                 lda   X4CE0
05E1 B74D21           (         sub1.asm):01077                 sta   X4D21
                      (         sub1.asm):01078                 
05E4 F64CCF           (         sub1.asm):01079                 ldb   X4CCF
05E7 F74D00           (         sub1.asm):01080                 stb   X4D00
                      (         sub1.asm):01081                 
05EA F64CCE           (         sub1.asm):01082                 ldb   X4CCE
05ED F74CFF           (         sub1.asm):01083                 stb   X4CFF
                      (         sub1.asm):01084                 
05F0 FB4CCF           (         sub1.asm):01085                 addb  X4CCF
05F3 F14CAC           (         sub1.asm):01086                 cmpb  X4CAC
                      (         sub1.asm):01087                 
05F6 230F             (         sub1.asm):01088                 bls   Setpar2
                      (         sub1.asm):01089                 
05F8 F64CCD           (         sub1.asm):01090                 ldb   X4CCD
05FB F74D00           (         sub1.asm):01091                 stb   X4D00
                      (         sub1.asm):01092                
05FE B64CAC           (         sub1.asm):01093                 lda   X4CAC
0601 B04CCD           (         sub1.asm):01094                 suba  X4CCD
0604 B74CFF           (         sub1.asm):01095                 sta   X4CFF
                      (         sub1.asm):01096         
0607 B64CCC           (         sub1.asm):01097         Setpar2 lda   X4CCC
060A B74D01           (         sub1.asm):01098                 sta   X4D01
                      (         sub1.asm):01099                
060D B64CCD           (         sub1.asm):01100                 lda   X4CCD
0610 B74D02           (         sub1.asm):01101                 sta   X4D02
                      (         sub1.asm):01102                
0613 7F4D03           (         sub1.asm):01103                 clr   X4D03
0616 7F4D04           (         sub1.asm):01104                 clr   X4D04
                      (         sub1.asm):01105                
0619 CC0001           (         sub1.asm):01106                 ldd   #1
061C FD1E1E           (         sub1.asm):01107                 std   X1E1E
061F FD1E20           (         sub1.asm):01108                 std   X1E20
                      (         sub1.asm):01109                
0622 F71E22           (         sub1.asm):01110                 stb   X1E22
                      (         sub1.asm):01111                
0625 7F1E1D           (         sub1.asm):01112                 clr   X1E1D
                      (         sub1.asm):01113                 
0628 108E0000         (         sub1.asm):01114                 ldy   #0
062C 6FA94D2D         (         sub1.asm):01115         SPLoop  clr   $4D2D,y
0630 3121             (         sub1.asm):01116                 leay  1,y
0632 108C000E         (         sub1.asm):01117                 cmpy  #$000E
0636 25F4             (         sub1.asm):01118                 bcs   SPLoop
                      (         sub1.asm):01119         
0638 7F4CEE           (         sub1.asm):01120                 clr   X4CEE
                      (         sub1.asm):01121                 
063B 7D4C76           (         sub1.asm):01122                 tst   X4C76          test game type value
063E 261B             (         sub1.asm):01123                 bne   Setpar3        not target practice
                      (         sub1.asm):01124                 
0640 7F4C81           (         sub1.asm):01125                 clr   X4C81
                      (         sub1.asm):01126         
0643 865F             (         sub1.asm):01127                 lda   #$5F
0645 B74C84           (         sub1.asm):01128                 sta   X4C84
                      (         sub1.asm):01129         
0648 867F             (         sub1.asm):01130                 lda   #$7F
064A B74C87           (         sub1.asm):01131                 sta   X4C87
                      (         sub1.asm):01132         
064D CCE678           (         sub1.asm):01133                 ldd   #$E678
0650 FD4C85           (         sub1.asm):01134                 std   X4C85
                      (         sub1.asm):01135         
0653 CC4E20           (         sub1.asm):01136                 ldd   #$4E20
0656 FD4C88           (         sub1.asm):01137                 std   X4C88
                      (         sub1.asm):01138         
0659 35F6             (         sub1.asm):01139                 puls  a,b,x,y,u,pc
                      (         sub1.asm):01140         
                      (         sub1.asm):01141         
065B                  (         sub1.asm):01142         Setpar3
065B F64CB3           (         sub1.asm):01143         L065B   ldb   X4CB3
065E 8615             (         sub1.asm):01144                 lda   #$15
0660 3D               (         sub1.asm):01145                 mul   
0661 8E02B7           (         sub1.asm):01146                 ldx   #$02B7
0664 308B             (         sub1.asm):01147                 leax  d,x            calc an index
0666 E600             (         sub1.asm):01148                 fdb   Zldb_x         to calc an index
0668 8604             (         sub1.asm):01149                 lda   #$04
066A 3D               (         sub1.asm):01150                 mul   
066B FD4CFB           (         sub1.asm):01151                 std   X4CFB          stow that value
066E FD4CF3           (         sub1.asm):01152                 std   X4CF3
0671 FD4CFD           (         sub1.asm):01153                 std   X4CFD
0674 FD4CF5           (         sub1.asm):01154                 std   X4CF5
                      (         sub1.asm):01155                 
0677 E601             (         sub1.asm):01156                 ldb   $01,x          get bytes at the pointer
0679 F74C84           (         sub1.asm):01157                 stb   X4C84          and save them elsewhere
                      (         sub1.asm):01158          
067C EC02             (         sub1.asm):01159                 ldd   $02,x
067E FD4C85           (         sub1.asm):01160                 std   X4C85
                      (         sub1.asm):01161          
0681 E604             (         sub1.asm):01162                 ldb   $04,x
0683 F74C87           (         sub1.asm):01163                 stb   X4C87
                      (         sub1.asm):01164          
0686 EC05             (         sub1.asm):01165                 ldd   $05,x
0688 FD4C88           (         sub1.asm):01166                 std   X4C88
                      (         sub1.asm):01167                 
068B 35F6             (         sub1.asm):01168                 puls  a,b,x,y,u,pc
                      (         sub1.asm):01169         
068D                  (         sub1.asm):01170         SetMorePars
068D 3476             (         sub1.asm):01171         L068D   pshs  a,b,x,y,u
068F 8E4A56           (         sub1.asm):01172                 ldx   #$4A56
0692 86FF             (         sub1.asm):01173                 lda   #$FF
0694 A700             (         sub1.asm):01174                 fdb   Zsta_x
                      (         sub1.asm):01175              
0696 308815           (         sub1.asm):01176                 leax  $15,x
0699 A700             (         sub1.asm):01177                 fdb   Zsta_x
                      (         sub1.asm):01178                 
069B B64C77           (         sub1.asm):01179                 lda   X4C77          game level
069E 308D0043         (         sub1.asm):01180                 leax  >ByteTblC,pcr
06A2 E686             (         sub1.asm):01181                 ldb   a,x
06A4 F71E23           (         sub1.asm):01182                 stb   X1E23
                      (         sub1.asm):01183                 
06A7 308D003E         (         sub1.asm):01184                 leax  >Gstring,pcr
06AB E686             (         sub1.asm):01185                 ldb   a,x
06AD F71E24           (         sub1.asm):01186                 stb   X1E24          always a G
                      (         sub1.asm):01187                 
06B0 FC4CBD           (         sub1.asm):01188                 ldd   X4CBD
06B3 CE0003           (         sub1.asm):01189                 ldu   #3
06B6 BD76B9           (         sub1.asm):01190                 jsr   X76B9
06B9 FD1DDA           (         sub1.asm):01191                 std   X1DDA
                      (         sub1.asm):01192                 
06BC F64C77           (         sub1.asm):01193                 ldb   X4C77          game level
06BF 4F               (         sub1.asm):01194                 clra                 zero ms byte
06C0 1F02             (         sub1.asm):01195                 tfr   d,y            transfer game level to y
06C2 FC4CBD           (         sub1.asm):01196                 ldd   X4CBD
06C5 108C0003         (         sub1.asm):01197                 cmpy  #$0003         Expert level ?
06C9 2718             (         sub1.asm):01198                 beq   ExtSMP
                      (         sub1.asm):01199                 
06CB F31DDA           (         sub1.asm):01200                 addd  X1DDA
06CE 108C0002         (         sub1.asm):01201                 cmpy  #$0002         Advanced level ?
06D2 270C             (         sub1.asm):01202                 beq   ExtSMP1
                      (         sub1.asm):01203                 
06D4 F31DDA           (         sub1.asm):01204                 addd  X1DDA
06D7 108C0001         (         sub1.asm):01205                 cmpy  #$0001         Intermediate level ?
06DB 2703             (         sub1.asm):01206                 beq   ExtSMP1
                      (         sub1.asm):01207                 
06DD F31DDA           (         sub1.asm):01208                 addd  X1DDA          must be Novice
                      (         sub1.asm):01209         
06E0 FD4CBD           (         sub1.asm):01210         ExtSMP1 std   X4CBD
                      (         sub1.asm):01211         
06E3                  (         sub1.asm):01212         ExtSMP
06E3 35F6             (         sub1.asm):01213         L06E3   puls  a,b,x,y,u,pc
                      (         sub1.asm):01214         
                      (         sub1.asm):01215         
06E5                  (         sub1.asm):01216         ByteTblC
06E5 14191E2D         (         sub1.asm):01217         L06E5   fcb   $14,$19,$1E,$2D
                      (         sub1.asm):01218         
                      (         sub1.asm):01219         
06E9                  (         sub1.asm):01220         Gstring
06E9 47474747         (         sub1.asm):01221         L06E9   fcc  "GGGG"          all bytes $47
                      (         sub1.asm):01222         
                      (         sub1.asm):01223         
06ED                  (         sub1.asm):01224         GetShipmap
06ED 3476             (         sub1.asm):01225         L06ED   pshs  a,b,x,y,u
06EF 8601             (         sub1.asm):01226                 lda   #READ.
06F1 308D0E1B         (         sub1.asm):01227                 leax  >Shipmap,pcr
06F5 103F84           (         sub1.asm):01228                 os9   I$Open
06F8 B71DD9           (         sub1.asm):01229                 sta   X1DD9          stow the path num
                      (         sub1.asm):01230                 
06FB 8E5041           (         sub1.asm):01231                 ldx   #$5041         destination address
06FE 108E0050         (         sub1.asm):01232                 ldy   #$0050         number of bytes to read
0702 103F89           (         sub1.asm):01233                 os9   I$Read         fetch the data
                      (         sub1.asm):01234         
0705 3452             (         sub1.asm):01235                 pshs  a,x,u          why ??
0707 8E0000           (         sub1.asm):01236                 ldx   #0             MS Word of file pos
070A CE0C9D           (         sub1.asm):01237                 ldu   #$0C9D         LS Word of file pos
070D B61DD9           (         sub1.asm):01238                 lda   X1DD9          path num
0710 103F88           (         sub1.asm):01239                 os9   I$Seek         reset file pointer
0713 3552             (         sub1.asm):01240                 puls  a,x,u          pull what we just saved and then over write it
                      (         sub1.asm):01241                 
0715 8E5091           (         sub1.asm):01242                 ldx   #$5091         destination address
0718 108E1135         (         sub1.asm):01243                 ldy   #$1135         bytes to read
071C B61DD9           (         sub1.asm):01244                 lda   X1DD9          get the path num
071F 103F89           (         sub1.asm):01245                 os9   I$Read         fetch the data
                      (         sub1.asm):01246                 
0722 7D4C75           (         sub1.asm):01247                 tst   X4C75          test side value
0725 263C             (         sub1.asm):01248                 bne   Shpmap2        Not German 
                      (         sub1.asm):01249                 
0727 3452             (         sub1.asm):01250                 pshs  a,x,u          duh
0729 8E0000           (         sub1.asm):01251                 ldx   #0             MS Word of file pos
072C CE0080           (         sub1.asm):01252                 ldu   #$0080         LS Word of file pos
072F B61DD9           (         sub1.asm):01253                 lda   X1DD9          load the same path num
0732 103F88           (         sub1.asm):01254                 os9   I$Seek         reset the file pointer
                      (         sub1.asm):01255                 
0735 3552             (         sub1.asm):01256                 puls  a,x,u          pull em and overwrite em ??
0737 8E61C6           (         sub1.asm):01257                 ldx   #$61C6         destination
073A 108E0C1D         (         sub1.asm):01258                 ldy   #$0C1D         number of bytes to read
073E B61DD9           (         sub1.asm):01259                 lda   X1DD9          path num
0741 103F89           (         sub1.asm):01260                 os9   I$Read         fetch the data
                      (         sub1.asm):01261                 
0744 3452             (         sub1.asm):01262                 pshs  a,x,u          duh
0746 8E0000           (         sub1.asm):01263                 ldx   #0             MS Word of file pos
0749 CE2A9C           (         sub1.asm):01264                 ldu   #$2A9C         LS Word of file pos
074C B61DD9           (         sub1.asm):01265                 lda   X1DD9          get that path num 
074F 103F88           (         sub1.asm):01266                 os9   I$Seek         reset the file pointer
                      (         sub1.asm):01267                 
0752 3552             (         sub1.asm):01268                 puls  a,x,u          pull em and over write them duh
0754 8E6DE3           (         sub1.asm):01269                 ldx   #$6DE3         destination addr
0757 108E0230         (         sub1.asm):01270                 ldy   #$0230         number of byets to read
075B B61DD9           (         sub1.asm):01271                 lda   X1DD9          same path num again
075E 103F89           (         sub1.asm):01272                 os9   I$Read         fetch the data
                      (         sub1.asm):01273                 
0761 2057             (         sub1.asm):01274                 bra   Shpmap3
                      (         sub1.asm):01275                 
0763 3452             (         sub1.asm):01276         Shpmap2 pshs  a,x,u
0765 8E0000           (         sub1.asm):01277                 ldx   #0             MW Word of file pos
0768 CE0050           (         sub1.asm):01278                 ldu   #$0050         LS Word of file pos
076B B61DD9           (         sub1.asm):01279                 lda   X1DD9          path num
076E 103F88           (         sub1.asm):01280                 os9   I$Seek         reset the file pointer
                      (         sub1.asm):01281                 
0771 3552             (         sub1.asm):01282                 puls  a,x,u          waste of time
0773 8E5061           (         sub1.asm):01283                 ldx   #$5061         destination addr
0776 108E0030         (         sub1.asm):01284                 ldy   #$0030         number of byets to read
077A B61DD9           (         sub1.asm):01285                 lda   X1DD9          path num
077D 103F89           (         sub1.asm):01286                 os9   I$Read
                      (         sub1.asm):01287                 
0780 3452             (         sub1.asm):01288                 pshs  a,x,u          waste of time
0782 8E0000           (         sub1.asm):01289                 ldx   #0             MW Word of file pos
0785 CE1DD2           (         sub1.asm):01290                 ldu   #$1DD2         LS Word of file pos
0788 B61DD9           (         sub1.asm):01291                 lda   X1DD9          path num
078B 103F88           (         sub1.asm):01292                 os9   I$Seek         reset the file pointer
                      (         sub1.asm):01293                 
078E 3552             (         sub1.asm):01294                 puls  a,x,u          waste of time
0790 8E61C6           (         sub1.asm):01295                 ldx   #$61C6         destination addr
0793 108E0CCA         (         sub1.asm):01296                 ldy   #$0CCA         number of byets to read
0797 B61DD9           (         sub1.asm):01297                 lda   X1DD9          path num
079A 103F89           (         sub1.asm):01298                 os9   I$Read
                      (         sub1.asm):01299                 
079D 3452             (         sub1.asm):01300                 pshs  a,x,u          waste of time
079F 8E0000           (         sub1.asm):01301                 ldx   #0             MW Word of file pos
07A2 CE2CCC           (         sub1.asm):01302                 ldu   #$2CCC         LS Word of file pos
07A5 B61DD9           (         sub1.asm):01303                 lda   X1DD9          path num
07A8 103F88           (         sub1.asm):01304                 os9   I$Seek         reset the file pointer
                      (         sub1.asm):01305                 
07AB 3552             (         sub1.asm):01306                 puls  a,x,u          waste of time
07AD 8E6E90           (         sub1.asm):01307                 ldx   #$6E90         destination addr
07B0 108E02CA         (         sub1.asm):01308                 ldy   #$02CA         number of byets to read
07B4 B61DD9           (         sub1.asm):01309                 lda   X1DD9          path num
07B7 103F89           (         sub1.asm):01310                 os9   I$Read
                      (         sub1.asm):01311         
07BA B61DD9           (         sub1.asm):01312         Shpmap3 lda   X1DD9          its the same stinking path num all along ...
07BD 103F8F           (         sub1.asm):01313                 os9   I$Close
                      (         sub1.asm):01314                 
07C0 35F6             (         sub1.asm):01315                 puls  a,b,x,y,u,pc
                      (         sub1.asm):01316         
                      (         sub1.asm):01317         
07C2 3402             (         sub1.asm):01318         GetFile pshs  a
07C4 CC0000           (         sub1.asm):01319                 ldd   #0000
07C7 BD77E5           (         sub1.asm):01320                 jsr   X77E5
                      (         sub1.asm):01321                 
07CA BD7747           (         sub1.asm):01322                 jsr   X7747
                      (         sub1.asm):01323                 
07CD CC0039           (         sub1.asm):01324                 ldd   #$0039
07D0 FD1DA7           (         sub1.asm):01325                 std   X1DA7
                      (         sub1.asm):01326                 
07D3 CC0050           (         sub1.asm):01327                 ldd   #$0050
07D6 FD1DA5           (         sub1.asm):01328                 std   X1DA5
                      (         sub1.asm):01329                 
07D9 BD72F3           (         sub1.asm):01330                 jsr   X72F3          this writes the strings?
07DC 456E746572204669 (         sub1.asm):01331                 fcc  "Enter Filename: "
     6C656E616D653A20
07EC 00               (         sub1.asm):01332                 fcb   C$NULL
07ED CC               (         sub1.asm):01333                 fcb   $CC
07EE 00               (         sub1.asm):01334                 fcb   C$NULL
07EF 45               (         sub1.asm):01335                 fcb   $45
                      (         sub1.asm):01336                 
07F0 FD1DA7           (         sub1.asm):01337                 std   X1DA7
                      (         sub1.asm):01338                 
07F3 CC0056           (         sub1.asm):01339                 ldd   #$0056
07F6 FD1DA5           (         sub1.asm):01340                 std   X1DA5
                      (         sub1.asm):01341                 
07F9 BD72F3           (         sub1.asm):01342                 jsr   X72F3          this writes the strings?
07FC 2D3E             (         sub1.asm):01343                 fcc  "->"
07FE 00               (         sub1.asm):01344                 fcb   C$NULL
                      (         sub1.asm):01345                 
07FF 7F4265           (         sub1.asm):01346                 clr   X4265
0802 170002           (         sub1.asm):01347                 lbsr  GetKBinp
0805 3582             (         sub1.asm):01348                 puls  a,pc
                      (         sub1.asm):01349         
                      (         sub1.asm):01350         
0807                  (         sub1.asm):01351         GetKBinp
0807 3472             (         sub1.asm):01352         L0807   pshs  a,x,y,u
0809 8E4265           (         sub1.asm):01353                 ldx   #$4265         base addr to store data
080C BD74CC           (         sub1.asm):01354                 jsr   X74CC
                      (         sub1.asm):01355         
080F 301F             (         sub1.asm):01356                 leax  -$01,x
0811 17006B           (         sub1.asm):01357         ReadKey lbsr  L087F
                      (         sub1.asm):01358         
0814 4F               (         sub1.asm):01359                 clra                 set path stdin   
0815 3410             (         sub1.asm):01360                 pshs  x              address to store data ($4264) 
0817 108E0001         (         sub1.asm):01361                 ldy   #$01           get one byte
081B 103F89           (         sub1.asm):01362                 os9   I$Read         fetch the byte
081E 3510             (         sub1.asm):01363                 puls  x              no need for this
0820 E684             (         sub1.asm):01364                 ldb   ,x             load b with the keyboard value
                      (         sub1.asm):01365                    
0822 C108             (         sub1.asm):01366                 cmpb  #C$BSP         is it a back space ? (ctrl-h)
0824 10270033         (         sub1.asm):01367                 lbeq  IsBSP
                      (         sub1.asm):01368                 
0828 C11B             (         sub1.asm):01369                 cmpb  #C$EOF         is it an ESC (ctrl-break)
082A 1027004D         (         sub1.asm):01370                 lbeq  IsEOF
                      (         sub1.asm):01371                 
082E C105             (         sub1.asm):01372                 cmpb  #C$QUIT        is it ENQ (ctrl-e)
0830 10270047         (         sub1.asm):01373                 lbeq  IsEOF
                      (         sub1.asm):01374                 
0834 7D029C           (         sub1.asm):01375                 tst   X029C
0837 10260040         (         sub1.asm):01376                 lbne  IsEOF
                      (         sub1.asm):01377                 
083B C10D             (         sub1.asm):01378                 cmpb  #C$CR          carriage return
083D 10270035         (         sub1.asm):01379                 lbeq  EndKey
                      (         sub1.asm):01380                 
                      (         sub1.asm):01381         *                            argument passed in b to this routine        
0841 BD7477           (         sub1.asm):01382                 jsr   X7477          some sort of copy routine ??
0844 8C4275           (         sub1.asm):01383                 cmpx  #$4275         so we read 16 bytes ?
0847 250D             (         sub1.asm):01384                 blo   NextKey        bump x and read again
                      (         sub1.asm):01385                 
0849 10BE1DA5         (         sub1.asm):01386                 ldy   X1DA5
084D 3138             (         sub1.asm):01387                 leay  -$08,y
084F 10BF1DA5         (         sub1.asm):01388                 sty   X1DA5        
0853 16FFBB           (         sub1.asm):01389                 lbra  ReadKey
                      (         sub1.asm):01390                 
0856 3001             (         sub1.asm):01391         NextKey leax  $01,x          bump x by one
0858 16FFB6           (         sub1.asm):01392                 lbra  ReadKey        read the next key press
                      (         sub1.asm):01393                 
085B 8C4265           (         sub1.asm):01394         IsBSP   cmpx  #$4265  
085E 1027FFAF         (         sub1.asm):01395                 lbeq  ReadKey
0862 301F             (         sub1.asm):01396                 leax  -$01,x
                      (         sub1.asm):01397                 
0864 C620             (         sub1.asm):01398                 ldb   #C$SPAC
                      (         sub1.asm):01399         *                            argument passed in b to this routine        
0866 BD7477           (         sub1.asm):01400                 jsr   X7477          some sort of copy routine ??
0869 10BE1DA5         (         sub1.asm):01401                 ldy   X1DA5
086D 3130             (         sub1.asm):01402                 leay  -16,y
086F 10BF1DA5         (         sub1.asm):01403                 sty   X1DA5
0873 16FF9B           (         sub1.asm):01404                 lbra  ReadKey
                      (         sub1.asm):01405         
0876 7F029C           (         sub1.asm):01406         EndKey  clr   X029C
0879 35F2             (         sub1.asm):01407                 puls  a,x,y,u,pc
                      (         sub1.asm):01408         
                      (         sub1.asm):01409         
087B C61B             (         sub1.asm):01410         IsEOF   ldb   #C$EOF
087D 20F7             (         sub1.asm):01411                 bra   EndKey
                      (         sub1.asm):01412         
087F 3406             (         sub1.asm):01413         L087F   pshs  a,b
0881 C65F             (         sub1.asm):01414                 ldb   #'_            $5F
                      (         sub1.asm):01415         *                            argument passed in b to this routine
0883 BD7477           (         sub1.asm):01416                 jsr   X7477          some sort of copy routine ??
                      (         sub1.asm):01417         
0886 FC1DA5           (         sub1.asm):01418                 ldd   X1DA5
0889 830008           (         sub1.asm):01419                 subd  #$08
088C FD1DA5           (         sub1.asm):01420                 std   X1DA5
                      (         sub1.asm):01421         
088F 3586             (         sub1.asm):01422                 puls  a,b,pc
                      (         sub1.asm):01423         
                      (         sub1.asm):01424         
                      (         sub1.asm):01425         *   Not explicitly called not labeled by disasm
0891                  (         sub1.asm):01426         MakeFile
0891 3476             (         sub1.asm):01427         N0891   pshs  a,b,x,y,u
0893 17FF2C           (         sub1.asm):01428                 lbsr  GetFile
0896 C11B             (         sub1.asm):01429                 cmpb  #C$EOF
0898 1027002C         (         sub1.asm):01430                 lbeq  DontMake
                      (         sub1.asm):01431         
                      (         sub1.asm):01432         * Delete File - Deletes a specified disk file
                      (         sub1.asm):01433         *            
                      (         sub1.asm):01434         * entry:
                      (         sub1.asm):01435         *       x -> address of the path list 
                      (         sub1.asm):01436         *
                      (         sub1.asm):01437         * exit:
                      (         sub1.asm):01438         *       x -> address of the last btye of the path list + 1 
                      (         sub1.asm):01439         *
                      (         sub1.asm):01440         * error:
                      (         sub1.asm):01441         *       CC -> Carry set on error
                      (         sub1.asm):01442         *       b  -> error code (if any)
                      (         sub1.asm):01443                 
089C 8E4265           (         sub1.asm):01444                 ldx   #$4265         pointer to file name string
089F 103F87           (         sub1.asm):01445                 os9   I$Delete       delete file if exsits
                      (         sub1.asm):01446         
                      (         sub1.asm):01447         
                      (         sub1.asm):01448         * Create File - Creates and opens a disk file
                      (         sub1.asm):01449         *            
                      (         sub1.asm):01450         * entry:
                      (         sub1.asm):01451         *       a -> access mode (write (2) or update (3))
                      (         sub1.asm):01452         *       b -> file attributes
                      (         sub1.asm):01453         *            Bit   Definition
                      (         sub1.asm):01454         *             0    Read
                      (         sub1.asm):01455         *             1    Write
                      (         sub1.asm):01456         *             2    Execute
                      (         sub1.asm):01457         *             3    Public Read
                      (         sub1.asm):01458         *             4    Public Write
                      (         sub1.asm):01459         *             5    Public Execute
                      (         sub1.asm):01460         *             6    Shareable file
                      (         sub1.asm):01461         *       x -> address of the path list 
                      (         sub1.asm):01462         *
                      (         sub1.asm):01463         * exit:
                      (         sub1.asm):01464         *       a -> path number
                      (         sub1.asm):01465         *       x -> address of the last btye of the path list + 1 
                      (         sub1.asm):01466         *
                      (         sub1.asm):01467         * error:
                      (         sub1.asm):01468         *       CC -> Carry set on error
                      (         sub1.asm):01469         *       b  -> error code (if any)
                      (         sub1.asm):01470                 
08A2 8E4265           (         sub1.asm):01471                 ldx   #$4265         pointer to file name string           
08A5 CC025B           (         sub1.asm):01472                 ldd   #(WRITE.*$100)+READ.+WRITE.+PREAD.+PWRIT.+SHARE. $025B
08A8 103F83           (         sub1.asm):01473                 os9   I$Create       create the file
08AB 2512             (         sub1.asm):01474                 bcs   CallErr        if error occured call error handler
08AD B71DD9           (         sub1.asm):01475                 sta   X1DD9          store the path number
                      (         sub1.asm):01476         
                      (         sub1.asm):01477         
                      (         sub1.asm):01478         * Write - Writes to a file or device
                      (         sub1.asm):01479         *            
                      (         sub1.asm):01480         * entry:
                      (         sub1.asm):01481         *       a -> path number
                      (         sub1.asm):01482         *       x -> starting address of the data to write 
                      (         sub1.asm):01483         *       y -> number of bytes to write
                      (         sub1.asm):01484         * exit:
                      (         sub1.asm):01485         *       y -> number of bytes written 
                      (         sub1.asm):01486         *
                      (         sub1.asm):01487         * error:
                      (         sub1.asm):01488         *       CC -> Carry set on error
                      (         sub1.asm):01489         *       b  -> error code (if any)
                      (         sub1.asm):01490                 
                      (         sub1.asm):01491         *                            path still set from create call        
08B0 8E0109           (         sub1.asm):01492                 ldx   #$0109         starting address of data 
08B3 108E7E04         (         sub1.asm):01493                 ldy   #$7E04         number of bytes to write
08B7 103F8A           (         sub1.asm):01494                 os9   I$Write        move the data
08BA 2503             (         sub1.asm):01495                 bcs   CallErr        if error occured call error handler
08BC 160003           (         sub1.asm):01496                 lbra  NoError
                      (         sub1.asm):01497                 
08BF 170065           (         sub1.asm):01498         CallErr lbsr  ErrMsg
08C2 B61DD9           (         sub1.asm):01499         NoError lda   X1DD9          load the path number
08C5 103F8F           (         sub1.asm):01500                 os9   I$Close        close the file
                      (         sub1.asm):01501         
08C8                  (         sub1.asm):01502         DontMake
08C8 7C0297           (         sub1.asm):01503         L08C8   inc   X0297      
08CB 35F6             (         sub1.asm):01504                 puls  a,b,x,y,u,pc
                      (         sub1.asm):01505         
                      (         sub1.asm):01506         
08CD                  (         sub1.asm):01507         ReadNewFile
08CD 3476             (         sub1.asm):01508         N08CD   pshs  a,b,x,y,u
08CF 17FEF0           (         sub1.asm):01509                 lbsr  GetFile
08D2 C11B             (         sub1.asm):01510                 cmpb  #C$EOF
08D4 1027004A         (         sub1.asm):01511                 lbeq  NoFile
                      (         sub1.asm):01512                 
08D8 FE1D8B           (         sub1.asm):01513                 ldu   X1D8B          we overwrite this below
08DB 3440             (         sub1.asm):01514                 pshs  u              so we save it now
                      (         sub1.asm):01515                 
08DD 8E4265           (         sub1.asm):01516                 ldx   #$4265         address of path list
08E0 8601             (         sub1.asm):01517                 lda   #READ.         access mode
08E2 103F84           (         sub1.asm):01518                 os9   I$Open         open the filr
08E5 2527             (         sub1.asm):01519                 bcs   CallEr2        if error occured call error handler
08E7 B71DD9           (         sub1.asm):01520                 sta   X1DD9          stow the path number
                      (         sub1.asm):01521                 
                      (         sub1.asm):01522                 
                      (         sub1.asm):01523         * Get status  - Returns the status of a file or device
                      (         sub1.asm):01524         *               Wildcard call exit status differs based on cal code
                      (         sub1.asm):01525         * entry:
                      (         sub1.asm):01526         *       a -> path number 
                      (         sub1.asm):01527         *       b -> function code 2 (SS.Size)
                      (         sub1.asm):01528         *
                      (         sub1.asm):01529         * exit:
                      (         sub1.asm):01530         *       x -> MS 16 bits of the current file size 
                      (         sub1.asm):01531         *       u -> LS 16 bits of the current file size 
                      (         sub1.asm):01532         *
                      (         sub1.asm):01533         * error:
                      (         sub1.asm):01534         *       CC -> Carry set on error
                      (         sub1.asm):01535         *       b  -> error code (if any)
                      (         sub1.asm):01536         *
                      (         sub1.asm):01537                 
08EA C602             (         sub1.asm):01538                 ldb   #SS.Size       get the curent file size
08EC 103F8D           (         sub1.asm):01539                 os9   I$GetStt       make the call
08EF 1F31             (         sub1.asm):01540                 tfr   u,x            move u to x but why ??
08F1 11837E04         (         sub1.asm):01541                 cmpu  #$7E04         check the file size
08F5 2705             (         sub1.asm):01542                 beq   Readfile       if it's the right size go read it
08F7 C6F9             (         sub1.asm):01543                 ldb   #E$Btyp        otherwise wrong type error
08F9 160012           (         sub1.asm):01544                 lbra  CallEr2
                      (         sub1.asm):01545         
08FC                  (         sub1.asm):01546         ReadFile        
08FC B61DD9           (         sub1.asm):01547         L08FC   lda   X1DD9          load the path num
08FF 8E0109           (         sub1.asm):01548                 ldx   #$0109         addr to stow data
0902 108E7E04         (         sub1.asm):01549                 ldy   #$7E04         bytes to read
0906 103F89           (         sub1.asm):01550                 os9   I$Read         make the call
0909 2503             (         sub1.asm):01551                 bcs   CallEr2
090B 160003           (         sub1.asm):01552                 lbra  NoErr
090E 170016           (         sub1.asm):01553         CallEr2 lbsr  ErrMsg
                      (         sub1.asm):01554         
0911 3540             (         sub1.asm):01555         NoErr   puls  u              get our old value
0913 FF1D8B           (         sub1.asm):01556                 stu   X1D8B          and return it
                      (         sub1.asm):01557                 
0916 8E1E25           (         sub1.asm):01558                 ldx   #$1E25
0919 BF1D89           (         sub1.asm):01559                 stx   X1D89
                      (         sub1.asm):01560                 
091C B61DD9           (         sub1.asm):01561                 lda   X1DD9      l   Looks like this gets overwriten too?
                      (         sub1.asm):01562         *                            $0109 + $7E04 = $7F0D  
091F 103F8F           (         sub1.asm):01563                 os9   I$Close        close the file
0922 7C0297           (         sub1.asm):01564         NoFile  inc   X0297
0925 35F6             (         sub1.asm):01565                 puls  a,b,x,y,u,pc
                      (         sub1.asm):01566         
                      (         sub1.asm):01567         * b contains error code from calling routine
0927 3476             (         sub1.asm):01568         ErrMsg  pshs  a,b,x,y,u
0929 8E0050           (         sub1.asm):01569                 ldx   #$0050
092C BF1DA5           (         sub1.asm):01570                 stx   X1DA5
                      (         sub1.asm):01571                 
092F 8E0039           (         sub1.asm):01572                 ldx   #$0039
0932 308810           (         sub1.asm):01573                 leax  16,x
0935 BF1DA7           (         sub1.asm):01574                 stx   X1DA7
                      (         sub1.asm):01575                 
0938 BD72F3           (         sub1.asm):01576                 jsr   X72F3          this writes the strings?
093B 4552524F522023   (         sub1.asm):01577                 fcc   "ERROR #"
0942 00               (         sub1.asm):01578                 fcb   C$NULL
                      (         sub1.asm):01579                 
0943 3404             (         sub1.asm):01580                 pshs  b
0945 4F               (         sub1.asm):01581                 clra  
0946 BD7304           (         sub1.asm):01582                 jsr   X7304          calcs a integer based on input in d
                      (         sub1.asm):01583                 
0949 BD72F3           (         sub1.asm):01584                 jsr   X72F3          this writes the strings?
094C 203A20           (         sub1.asm):01585                 fcc   " : "
094F 00               (         sub1.asm):01586                 fcb   C$NULL
                      (         sub1.asm):01587                 
0950 3504             (         sub1.asm):01588                 puls  b
0952 C1F9             (         sub1.asm):01589                 cmpb  #E$Btyp        bad type ??
0954 2616             (         sub1.asm):01590                 bne   ChkBPth
                      (         sub1.asm):01591                 
0956 BD72F3           (         sub1.asm):01592                 jsr   X72F3          this writes the strings?
0959 57524F4E47204649 (         sub1.asm):01593                 fcc   "WRONG FILE TYPE"
     4C452054595045
0968 00               (         sub1.asm):01594                 fcb   C$NULL
0969 16               (         sub1.asm):01595                 fcb   C$CLSALL       flag to skip # of bytes after next null
096A 00               (         sub1.asm):01596                 fcb   C$NULL
096B 54               (         sub1.asm):01597                 fcb   $54  
                      (         sub1.asm):01598                    
096C C1D7             (         sub1.asm):01599         ChkBPth cmpb  #E$BPNam       bad path name
096E 2613             (         sub1.asm):01600                 bne   ChkPNF
0970 BD72F3           (         sub1.asm):01601                 jsr   X72F3          this writes the strings?
0973 4241442050415448 (         sub1.asm):01602                 fcc   "BAD PATHNAME"
     4E414D45
097F 00               (         sub1.asm):01603                 fcb   C$NULL
0980 16               (         sub1.asm):01604                 fcb   C$CLSALL       flag to skip # of bytes after next null
0981 00               (         sub1.asm):01605                 fcb   C$NULL
0982 3D               (         sub1.asm):01606                 fcb   $3D
                      (         sub1.asm):01607         
0983 C1D8             (         sub1.asm):01608         ChkPNF  cmpb  #E$PNNF        path not found
0985 2615             (         sub1.asm):01609                 bne   ChkDrv
0987 BD72F3           (         sub1.asm):01610                 jsr   X72F3          this writes the strings?
098A 46494C45204E4F54 (         sub1.asm):01611                 fcc  "FILE NOT FOUND"
     20464F554E44
0998 00               (         sub1.asm):01612                 fcb   C$NULL
0999 16               (         sub1.asm):01613                 fcb   C$CLSALL       flag to skip # of bytes after next null
099A 00               (         sub1.asm):01614                 fcb   C$NULL
099B 24               (         sub1.asm):01615                 fcb   $24
                      (         sub1.asm):01616                 
099C C1F0             (         sub1.asm):01617         ChkDrv  cmpb  #E$Unit        Illegal drive num
099E 2D10             (         sub1.asm):01618                 blt   SomERR         none of the above and less than E$Unit
                      (         sub1.asm):01619         *                            E$Unit and greater yields disk error of some kind        
09A0 BD72F3           (         sub1.asm):01620                 jsr   X72F3          this writes the strings?
09A3 4449534B20455252 (         sub1.asm):01621                 fcc  "DISK ERROR"
     4F52
09AD 00               (         sub1.asm):01622                 fcb   C$NULL
09AE 20               (         sub1.asm):01623                 fcb   $20
09AF 10               (         sub1.asm):01624                 fcb   $10            this will skip over SomERR msg string
                      (         sub1.asm):01625                 
09B0 BD72F3           (         sub1.asm):01626         SomERR  jsr   X72F3          this writes the strings?
09B3 53595354454D2045 (         sub1.asm):01627                 fcc  "SYSTEM ERROR"
     52524F52
09BF 00               (         sub1.asm):01628                 fcb   C$NULL
                      (         sub1.asm):01629                 
09C0 BE1DA7           (         sub1.asm):01630                 ldx   X1DA7
09C3 308810           (         sub1.asm):01631                 leax  16,x
09C6 BF1DA7           (         sub1.asm):01632                 stx   X1DA7
                      (         sub1.asm):01633                 
09C9 8E0060           (         sub1.asm):01634                 ldx   #$0060
09CC BF1DA5           (         sub1.asm):01635                 stx   X1DA5
                      (         sub1.asm):01636                 
09CF BD72F3           (         sub1.asm):01637                 jsr   X72F3          this writes the strings?
09D2 507265737320616E (         sub1.asm):01638                 fcc  "Press any key to continue"
     79206B657920746F
     20636F6E74696E75
     65
09EB 00               (         sub1.asm):01639                 fcb   C$NULL
                      (         sub1.asm):01640         
                      (         sub1.asm):01641         *       after a string write byte after second null sends to here
09EC 4F               (         sub1.asm):01642                 clra                 set stdin  
09ED 8E1DDA           (         sub1.asm):01643                 ldx   #$1DDA         addr to save byte
09F0 108E0001         (         sub1.asm):01644                 ldy   #$01           only need one          
09F4 103F89           (         sub1.asm):01645                 os9   I$Read         get the input
09F7 35F6             (         sub1.asm):01646                 puls  a,b,x,y,u,pc   we're done here return to caller
                      (         sub1.asm):01647         
                      (         sub1.asm):01648         
09F9                  (         sub1.asm):01649         Zero_txt_area
09F9 3476             (         sub1.asm):01650         L09F9   pshs  a,b,x,y,u
09FB 8E1E25           (         sub1.asm):01651                 ldx   #$1E25         clears $2440 bytes
09FE CC0000           (         sub1.asm):01652                 ldd   #$0000
0A01 ED81             (         sub1.asm):01653         ClrLoop std   ,x++
0A03 8C4265           (         sub1.asm):01654                 cmpx  #$4265
0A06 2DF9             (         sub1.asm):01655                 blt   ClrLoop
                      (         sub1.asm):01656                 
0A08 CC0008           (         sub1.asm):01657                 ldd   #$0008
0A0B FD1DA5           (         sub1.asm):01658                 std   X1DA5
                      (         sub1.asm):01659                 
0A0E CC0002           (         sub1.asm):01660                 ldd   #$0002
0A11 FD1DA7           (         sub1.asm):01661                 std   X1DA7
                      (         sub1.asm):01662                 
0A14 35F6             (         sub1.asm):01663                 puls  a,b,x,y,u,pc
                      (         sub1.asm):01664         
0A16                  (         sub1.asm):01665         Read_mission
0A16 3476             (         sub1.asm):01666         L0A16   pshs  a,b,x,y,u
0A18 17FFDE           (         sub1.asm):01667                 lbsr  Zero_txt_area  clear mission text area
0A1B 308D0AC2         (         sub1.asm):01668                 leax  >Mis_txt,pcr   get the name of the file to open
0A1F 8601             (         sub1.asm):01669                 lda   #READ.         in read only mode
0A21 103F84           (         sub1.asm):01670                 os9   I$Open         open the file
0A24 B71DD9           (         sub1.asm):01671                 sta   X1DD9          path number
                      (         sub1.asm):01672                 
0A27 CE4CB5           (         sub1.asm):01673                 ldu   #$4CB5         base addr
0A2A F60298           (         sub1.asm):01674                 ldb   X0298          get value stored
0A2D 58               (         sub1.asm):01675                 lslb                 multiply by 2
0A2E 7D4C76           (         sub1.asm):01676                 tst   X4C76          check that game type byte 
0A31 2602             (         sub1.asm):01677                 bne   L0A35          not target practice use this byte as offset
0A33 C606             (         sub1.asm):01678                 ldb   #$06           is target practice use a +6 offset       
0A35 EEC5             (         sub1.asm):01679         L0A35   ldu   b,u            LS Word of file seek
0A37 8E0000           (         sub1.asm):01680                 ldx   #$0000         MS Word of file seek
0A3A B61DD9           (         sub1.asm):01681                 lda   X1DD9          get the path number which should still be in a
0A3D 103F88           (         sub1.asm):01682                 os9   I$Seek         repostion file pointer
                      (         sub1.asm):01683                 
0A40 BE1D8B           (         sub1.asm):01684                 ldx   X1D8B
0A43 3410             (         sub1.asm):01685                 pshs  x
0A45 8E1E25           (         sub1.asm):01686                 ldx   #$1E25
0A48 BF1D8B           (         sub1.asm):01687                 stx   X1D8B
                      (         sub1.asm):01688         
0A4B 8E4265           (         sub1.asm):01689         L0A4B   ldx   #$4265         addr to stow the data
0A4E 108E0001         (         sub1.asm):01690                 ldy   #$01           number of bytes to read
0A52 B61DD9           (         sub1.asm):01691                 lda   X1DD9          load the path number
0A55 103F89           (         sub1.asm):01692                 os9   I$Read         read one byte
0A58 F64265           (         sub1.asm):01693                 ldb   X4265          put that byte in b
0A5B C140             (         sub1.asm):01694                 cmpb  #'@            is it an @  $40            
0A5D 1027002C         (         sub1.asm):01695                 lbeq  L0A8D
                      (         sub1.asm):01696                 
0A61 C125             (         sub1.asm):01697                 cmpb  #'%            is it a %   $25
0A63 10270026         (         sub1.asm):01698                 lbeq  L0A8D
                      (         sub1.asm):01699                 
0A67 C10D             (         sub1.asm):01700                 cmpb  #C$CR          is it a carriage return ?
0A69 2709             (         sub1.asm):01701                 beq   L0A74
                      (         sub1.asm):01702                 
0A6B C10A             (         sub1.asm):01703                 cmpb  #C$LF          is it a line feed
0A6D 270E             (         sub1.asm):01704                 beq   L0A7D
                      (         sub1.asm):01705         
                      (         sub1.asm):01706         *                            argument passed in b to this routine        
0A6F BD7477           (         sub1.asm):01707                 jsr   X7477          nope then some sort of copy routine ??
0A72 20D7             (         sub1.asm):01708                 bra   L0A4B          loop again
                      (         sub1.asm):01709                 
0A74 CC0008           (         sub1.asm):01710         L0A74   ldd   #$0008
0A77 FD1DA5           (         sub1.asm):01711                 std   X1DA5
0A7A 16FFCE           (         sub1.asm):01712                 lbra  L0A4B
                      (         sub1.asm):01713                 
0A7D BE1DA7           (         sub1.asm):01714         L0A7D   ldx   X1DA7
0A80 3008             (         sub1.asm):01715                 leax  $08,x
0A82 8C006B           (         sub1.asm):01716                 cmpx  #$006B
0A85 2CED             (         sub1.asm):01717                 bge   L0A74
                      (         sub1.asm):01718                 
0A87 BF1DA7           (         sub1.asm):01719                 stx   X1DA7
0A8A 16FFBE           (         sub1.asm):01720                 lbra  L0A4B
                      (         sub1.asm):01721                 
0A8D B61DD9           (         sub1.asm):01722         L0A8D   lda   X1DD9          get the path num and
0A90 103F8F           (         sub1.asm):01723                 os9   I$Close        close the file
                      (         sub1.asm):01724                 
0A93 3510             (         sub1.asm):01725                 puls  x
0A95 BF1D8B           (         sub1.asm):01726                 stx   X1D8B
                      (         sub1.asm):01727                 
0A98 8D05             (         sub1.asm):01728                 bsr   SetandSwap
                      (         sub1.asm):01729                 
0A9A 170098           (         sub1.asm):01730                 lbsr  MVMissn
                      (         sub1.asm):01731                 
0A9D 35F6             (         sub1.asm):01732                 puls  a,b,x,y,u,pc
                      (         sub1.asm):01733         
                      (         sub1.asm):01734         
0A9F                  (         sub1.asm):01735         SetandSwap
0A9F 3476             (         sub1.asm):01736         L0A9F   pshs  a,b,x,y,u
0AA1 86FF             (         sub1.asm):01737                 lda   #$FF
0AA3 B70297           (         sub1.asm):01738                 sta   X0297
                      (         sub1.asm):01739                 
0AA6 8603             (         sub1.asm):01740                 lda   #$03
0AA8 B71D88           (         sub1.asm):01741                 sta   X1D88
                      (         sub1.asm):01742                 
0AAB FC1D8B           (         sub1.asm):01743                 ldd   X1D8B
0AAE 3406             (         sub1.asm):01744                 pshs  d
                      (         sub1.asm):01745                 
0AB0 CC1E25           (         sub1.asm):01746                 ldd   #$1E25
0AB3 FD1D8B           (         sub1.asm):01747                 std   X1D8B
                      (         sub1.asm):01748                 
0AB6 FC1DAD           (         sub1.asm):01749                 ldd   X1DAD
0AB9 3406             (         sub1.asm):01750                 pshs  d
                      (         sub1.asm):01751                 
0ABB CC013F           (         sub1.asm):01752                 ldd   #$013F
0ABE FD1DAD           (         sub1.asm):01753                 std   X1DAD
                      (         sub1.asm):01754                 
0AC1 CC0000           (         sub1.asm):01755                 ldd   #$0000
0AC4 FD1D8F           (         sub1.asm):01756                 std   X1D8F
0AC7 FD1D91           (         sub1.asm):01757                 std   X1D91
0ACA FD1D95           (         sub1.asm):01758                 std   X1D95
                      (         sub1.asm):01759                 
0ACD CC013F           (         sub1.asm):01760                 ldd   #$013F
0AD0 FD1D93           (         sub1.asm):01761                 std   X1D93
0AD3 BD7BF4           (         sub1.asm):01762                 jsr   X7BF4
0AD6 FD1D93           (         sub1.asm):01763                 std   X1D93
                      (         sub1.asm):01764                 
0AD9 CC0000           (         sub1.asm):01765                 ldd   #$0000
0ADC FD1D8F           (         sub1.asm):01766                 std   X1D8F
                      (         sub1.asm):01767                 
0ADF CC0073           (         sub1.asm):01768                 ldd   #$0073
0AE2 FD1D91           (         sub1.asm):01769                 std   X1D91
0AE5 FD1D95           (         sub1.asm):01770                 std   X1D95
0AE8 BD7BF4           (         sub1.asm):01771                 jsr   X7BF4
                      (         sub1.asm):01772                 
0AEB CC0000           (         sub1.asm):01773                 ldd   #$0000
0AEE FD1D8F           (         sub1.asm):01774                 std   X1D8F
0AF1 FD1D91           (         sub1.asm):01775                 std   X1D91
0AF4 FD1D93           (         sub1.asm):01776                 std   X1D93
                      (         sub1.asm):01777                 
0AF7 CC0073           (         sub1.asm):01778                 ldd   #$0073
0AFA FD1D95           (         sub1.asm):01779                 std   X1D95
0AFD BD7BF4           (         sub1.asm):01780                 jsr   X7BF4
0B00 FD1D95           (         sub1.asm):01781                 std   X1D95
                      (         sub1.asm):01782                 
0B03 CC013F           (         sub1.asm):01783                 ldd   #$013F
0B06 FD1D8F           (         sub1.asm):01784                 std   X1D8F
0B09 FD1D93           (         sub1.asm):01785                 std   X1D93
                      (         sub1.asm):01786                 
0B0C CC0000           (         sub1.asm):01787                 ldd   #$0000
0B0F FD1D91           (         sub1.asm):01788                 std   X1D91
0B12 BD7BF4           (         sub1.asm):01789                 jsr   X7BF4
                      (         sub1.asm):01790                 
0B15 3516             (         sub1.asm):01791                 puls  d,x
0B17 FD1DAD           (         sub1.asm):01792                 std   X1DAD
0B1A BF1D8B           (         sub1.asm):01793                 stx   X1D8B
                      (         sub1.asm):01794         
0B1D 8E1E25           (         sub1.asm):01795                 ldx   #$1E25         address 1
0B20 FE1D8B           (         sub1.asm):01796                 ldu   X1D8B          address 2
0B23 108E2440         (         sub1.asm):01797                 ldy   #$2440         number of bytes to swap
0B27 E684             (         sub1.asm):01798         L0B27   ldb   ,x             get a byte from each
0B29 A6C4             (         sub1.asm):01799                 lda   ,u
0B2B E7C0             (         sub1.asm):01800                 stb   ,u+            swap them and bump pointers
0B2D A780             (         sub1.asm):01801                 sta   ,x+
0B2F 313F             (         sub1.asm):01802                 leay  -$01,y         decrement the counter
0B31 26F4             (         sub1.asm):01803                 bne   L0B27          loop till we are finished
                      (         sub1.asm):01804                 
0B33 35F6             (         sub1.asm):01805                 puls  a,b,x,y,u,pc
                      (         sub1.asm):01806         
                      (         sub1.asm):01807         
0B35 3476             (         sub1.asm):01808         MVMissn pshs  a,b,x,y,u
0B37 4F               (         sub1.asm):01809                 clra                 stdin path
0B38 8E4265           (         sub1.asm):01810                 ldx   #$4265         address to save data
0B3B 108E0001         (         sub1.asm):01811                 ldy   #$01           bytes to read
0B3F 103F89           (         sub1.asm):01812                 os9   I$Read         read byte
                      (         sub1.asm):01813                 
0B42 FE1D8B           (         sub1.asm):01814                 ldu   X1D8B          get save address
0B45 8E1E25           (         sub1.asm):01815                 ldx   #$1E25         get from address      
0B48 EC81             (         sub1.asm):01816         MVLoop  ldd   ,x++           load a word from x and bump by a word
0B4A EDC1             (         sub1.asm):01817                 std   ,u++           stow that word at u and bump by a word
0B4C 8C4265           (         sub1.asm):01818                 cmpx  #$4265         have we gotten to the end ??
0B4F 2DF7             (         sub1.asm):01819                 blt   MVLoop         nope loop again
                      (         sub1.asm):01820                 
0B51 35F6             (         sub1.asm):01821                 puls  a,b,x,y,u,pc
                      (         sub1.asm):01822         
                      (         sub1.asm):01823         
                      (         sub1.asm):01824         *   Not explicitly called not labeled by disasm
                      (         sub1.asm):01825         *   similar to Read_mission at L0A16
0B53                  (         sub1.asm):01826         Read_mission2
0B53 3476             (         sub1.asm):01827         N0B53   pshs  a,b,x,y,u
0B55 86FF             (         sub1.asm):01828                 lda   #$FF
0B57 B70297           (         sub1.asm):01829                 sta   X0297
                      (         sub1.asm):01830                 
0B5A 7F4D3E           (         sub1.asm):01831                 clr   X4D3E
                      (         sub1.asm):01832                
0B5D 8E1E25           (         sub1.asm):01833                 ldx   #$1E25         clear the bytes between $1E25 - $4265 
0B60 CC0000           (         sub1.asm):01834                 ldd   #$0000
0B63 ED81             (         sub1.asm):01835         L0B63   std   ,x++
0B65 8C4265           (         sub1.asm):01836                 cmpx  #$4265
0B68 2DF9             (         sub1.asm):01837                 blt   L0B63
                      (         sub1.asm):01838                 
0B6A 17FF32           (         sub1.asm):01839                 lbsr  SetandSwap     so now we swap the cleared bytes
                      (         sub1.asm):01840                 
0B6D CC0008           (         sub1.asm):01841                 ldd   #$0008
0B70 FD1DA5           (         sub1.asm):01842                 std   X1DA5
                      (         sub1.asm):01843                 
0B73 CC0002           (         sub1.asm):01844                 ldd   #$0002
0B76 FD1DA7           (         sub1.asm):01845                 std   X1DA7
                      (         sub1.asm):01846                 
0B79 308D0964         (         sub1.asm):01847                 leax  >Mis_txt,pcr
0B7D 8601             (         sub1.asm):01848                 lda   #READ.
0B7F 103F84           (         sub1.asm):01849                 os9   I$Open
0B82 B71DD9           (         sub1.asm):01850                 sta   X1DD9          save path num
                      (         sub1.asm):01851                 
0B85 CE4CB5           (         sub1.asm):01852                 ldu   #$4CB5         base address
0B88 F60298           (         sub1.asm):01853                 ldb   X0298          get stored value
0B8B 58               (         sub1.asm):01854                 lslb                 multiply by two
0B8C 7D4C76           (         sub1.asm):01855                 tst   X4C76          check that game type byte
0B8F 2602             (         sub1.asm):01856                 bne   L0B93          not target practice use this value
0B91 C606             (         sub1.asm):01857                 ldb   #$06           otherwise is target practice use a +6 offset
0B93 EEC5             (         sub1.asm):01858         L0B93   ldu   b,u            LS word of file position to seek
0B95 8E0000           (         sub1.asm):01859                 ldx   #$0000         MS word of file positioin to seek
0B98 B61DD9           (         sub1.asm):01860                 lda   X1DD9          get the path num that is still in a
0B9B 103F88           (         sub1.asm):01861                 os9   I$Seek         reset the file pointer
                      (         sub1.asm):01862                 
0B9E 8E4265           (         sub1.asm):01863         L0B9E   ldx   #$4265         addr to stow data
0BA1 108E0001         (         sub1.asm):01864                 ldy   #$01           get one byte
0BA5 B61DD9           (         sub1.asm):01865                 lda   X1DD9          get that path numm that's already there
0BA8 103F89           (         sub1.asm):01866                 os9   I$Read         read a byte
                      (         sub1.asm):01867                 
0BAB F64265           (         sub1.asm):01868                 ldb   X4265          load it in b
0BAE C140             (         sub1.asm):01869                 cmpb  #'@            is it an @ $40
0BB0 1027003A         (         sub1.asm):01870                 lbeq  ClsMisTx
                      (         sub1.asm):01871                 
0BB4 C125             (         sub1.asm):01872                 cmpb  #'%            is it a %  $25
0BB6 10270034         (         sub1.asm):01873                 lbeq  ClsMisTx
                      (         sub1.asm):01874                 
0BBA C10D             (         sub1.asm):01875                 cmpb  #C$CR
0BBC 2717             (         sub1.asm):01876                 beq   L0BD5
                      (         sub1.asm):01877                 
0BBE C10A             (         sub1.asm):01878                 cmpb  #C$LF
0BC0 271C             (         sub1.asm):01879                 beq   L0BDE
                      (         sub1.asm):01880                 
0BC2 7D4D3E           (         sub1.asm):01881                 tst   X4D3E
0BC5 2609             (         sub1.asm):01882                 bne   L0BD0
                      (         sub1.asm):01883                 
0BC7 17002F           (         sub1.asm):01884                 lbsr  InpReady
0BCA B74D3E           (         sub1.asm):01885                 sta   X4D3E
                      (         sub1.asm):01886                 
0BCD 170306           (         sub1.asm):01887                 lbsr  MCode
                      (         sub1.asm):01888         
                      (         sub1.asm):01889         *                            argument passed in b to this routine
0BD0 BD7477           (         sub1.asm):01890         L0BD0   jsr   X7477          some sort of copy routine ??
0BD3 20C9             (         sub1.asm):01891                 bra   L0B9E          loop again
                      (         sub1.asm):01892                 
0BD5 CC0008           (         sub1.asm):01893         L0BD5   ldd   #$0008
0BD8 FD1DA5           (         sub1.asm):01894                 std   X1DA5
0BDB 16FFC0           (         sub1.asm):01895                 lbra  L0B9E          loop again
                      (         sub1.asm):01896                 
0BDE BE1DA7           (         sub1.asm):01897         L0BDE   ldx   X1DA7
0BE1 3008             (         sub1.asm):01898                 leax  $08,x
0BE3 8C006B           (         sub1.asm):01899                 cmpx  #$006B
0BE6 2CED             (         sub1.asm):01900                 bge   L0BD5
0BE8 BF1DA7           (         sub1.asm):01901                 stx   X1DA7
0BEB 16FFB0           (         sub1.asm):01902                 lbra  L0B9E          loop again
                      (         sub1.asm):01903         
0BEE                  (         sub1.asm):01904         ClsMisTx
0BEE B61DD9           (         sub1.asm):01905         L0BEE   lda   X1DD9
0BF1 103F8F           (         sub1.asm):01906                 os9   I$Close
0BF4 17FF3E           (         sub1.asm):01907                 lbsr  MVMissn
0BF7 35F6             (         sub1.asm):01908                 puls  a,b,x,y,u,pc
                      (         sub1.asm):01909         
0BF9                  (         sub1.asm):01910         InpReady
0BF9 3434             (         sub1.asm):01911         L0BF9   pshs  b,x,y
0BFB 4F               (         sub1.asm):01912                 clra                 set path stdin
0BFC C601             (         sub1.asm):01913                 ldb   #SS.Ready      test if data available
0BFE 103F8D           (         sub1.asm):01914                 os9   I$GetStt       make the call
0C01 2403             (         sub1.asm):01915                 bcc   ReadKey2       if ready go read it
0C03 4F               (         sub1.asm):01916                 clra                 not read clear a again
0C04 35B4             (         sub1.asm):01917                 puls  b,x,y,pc       pull b back over any error code
                      (         sub1.asm):01918         
0C06                  (         sub1.asm):01919         ReadKey2
0C06 4F               (         sub1.asm):01920         L0C06   clra                 set path stdin
0C07 8E1DDA           (         sub1.asm):01921                 ldx   #$1DDA         set address to hold data
0C0A 108E0001         (         sub1.asm):01922                 ldy   #$01           read one byte       
0C0E 103F89           (         sub1.asm):01923                 os9   I$Read         make the call
0C11 B61DDA           (         sub1.asm):01924                 lda   X1DDA          load the data in a
0C14 8103             (         sub1.asm):01925                 cmpa  #C$INTR        is it a key board interrupt (ctrl-C)
0C16 270B             (         sub1.asm):01926                 beq   EndKey2
0C18 8105             (         sub1.asm):01927                 cmpa  #C$QUIT        is it a keyboard abort (ctrl-E)
0C1A 2707             (         sub1.asm):01928                 beq   EndKey2
0C1C 7D029C           (         sub1.asm):01929                 tst   X029C
0C1F 2602             (         sub1.asm):01930                 bne   EndKey2
0C21 35B4             (         sub1.asm):01931                 puls  b,x,y,pc
                      (         sub1.asm):01932         
                      (         sub1.asm):01933         
0C23                  (         sub1.asm):01934         EndKey2
0C23 7F029C           (         sub1.asm):01935         L0C23   clr   X029C
0C26 861B             (         sub1.asm):01936                 lda   #C$EOF
0C28 35B4             (         sub1.asm):01937                 puls  b,x,y,pc
                      (         sub1.asm):01938         
                      (         sub1.asm):01939         
0C2A                  (         sub1.asm):01940         Set_75
0C2A 3476             (         sub1.asm):01941         L0C2A   pshs  a,b,x,y,u
0C2C 108E0075         (         sub1.asm):01942                 ldy   #$0075         number of bytes to set
0C30 8E42B5           (         sub1.asm):01943                 ldx   #$42B5         base address
0C33 86FF             (         sub1.asm):01944                 lda   #$FF           value to set them to
0C35 A700             (         sub1.asm):01945         Loop75  fdb   Zsta_x         sta ,x
0C37 308815           (         sub1.asm):01946                 leax  $15,x          bump x by $15
0C3A 313F             (         sub1.asm):01947                 leay  -$01,y         decrement the counter
0C3C 1026FFF5         (         sub1.asm):01948                 lbne  Loop75         are we done ? nope loop again
0C40 35F6             (         sub1.asm):01949                 puls  a,b,x,y,u,pc
                      (         sub1.asm):01950         
                      (         sub1.asm):01951         
0C42                  (         sub1.asm):01952         GetControl1
0C42 3476             (         sub1.asm):01953         L0C42   pshs  a,b,x,y,u
                      (         sub1.asm):01954         
0C44 8601             (         sub1.asm):01955                 lda   #READ.
0C46 308D08E6         (         sub1.asm):01956                 leax  >Control1,pcr
0C4A 103F84           (         sub1.asm):01957                 os9   I$Open
                      (         sub1.asm):01958                
0C4D 8E1E25           (         sub1.asm):01959                 ldx   #CntrlDat      address to store
0C50 108E1666         (         sub1.asm):01960                 ldy   #CntrlSz       bytes to read
0C54 103F89           (         sub1.asm):01961                 os9   I$Read
                      (         sub1.asm):01962                
0C57 103F8F           (         sub1.asm):01963                 os9   I$Close        close the file
                      (         sub1.asm):01964                
0C5A 8E1E25           (         sub1.asm):01965                 ldx   #CntrlDat
0C5D 108E1666         (         sub1.asm):01966                 ldy   #CntrlSz
0C61 FE1D8B           (         sub1.asm):01967                 ldu   X1D8B
0C64 170105           (         sub1.asm):01968                 lbsr  Decode_copy
                      (         sub1.asm):01969                
0C67 CC0109           (         sub1.asm):01970                 ldd   #$0109         PRN,CTN
0C6A BD735B           (         sub1.asm):01971                 jsr   X735B          call Change palette 
                      (         sub1.asm):01972                
0C6D CC0236           (         sub1.asm):01973                 ldd   #$0236         PRN,CTN
0C70 BD735B           (         sub1.asm):01974                 jsr   X735B          call Change palette
                      (         sub1.asm):01975                
0C73 8603             (         sub1.asm):01976                 lda   #$03
0C75 B71D88           (         sub1.asm):01977                 sta   X1D88
                      (         sub1.asm):01978                
0C78 BE1D8B           (         sub1.asm):01979                 ldx   X1D8B
0C7B BF1D89           (         sub1.asm):01980                 stx   X1D89
                      (         sub1.asm):01981                
0C7E 4F               (         sub1.asm):01982                 clra                 make a zero
0C7F 3402             (         sub1.asm):01983         GCloop  pshs  a              push it on the stack for a counter
0C81 8E0020           (         sub1.asm):01984                 ldx   #$0020         huh ?
0C84 3014             (         sub1.asm):01985                 leax  -$0C,x
0C86 BF1DA5           (         sub1.asm):01986                 stx   X1DA5          stow that
                      (         sub1.asm):01987                
0C89 308D08D2         (         sub1.asm):01988                 leax  >ByteTbl1,pcr
0C8D E686             (         sub1.asm):01989                 ldb   a,x              
0C8F 4F               (         sub1.asm):01990                 clra                 make a zero again  (still)
0C90 C30004           (         sub1.asm):01991                 addd  #$04           add four to value loaded from ByteTbl1
0C93 FD1DA7           (         sub1.asm):01992                 std   X1DA7
                      (         sub1.asm):01993                
0C96 BD72F3           (         sub1.asm):01994                 jsr   X72F3          this writes the strings?
0C99 303030           (         sub1.asm):01995                 fcc  "000"
0C9C 00               (         sub1.asm):01996                 fcb   C$NULL
                      (         sub1.asm):01997                
0C9D 3502             (         sub1.asm):01998                 puls  a              pull our counter
0C9F 4C               (         sub1.asm):01999                 inca                 bump it
0CA0 8104             (         sub1.asm):02000                 cmpa  #Tbl1sz        made 4 loops ??
0CA2 26DB             (         sub1.asm):02001                 bne   GCloop         nope go again
                      (         sub1.asm):02002                
0CA4 4F               (         sub1.asm):02003                 clra                 clear a
0CA5 308D08B6         (         sub1.asm):02004                 leax  >ByteTbl1,pcr
0CA9 108E02A7         (         sub1.asm):02005                 ldy   #$02A7
                      (         sub1.asm):02006         
0CAD 3402             (         sub1.asm):02007         GClop2  pshs  a
0CAF C620             (         sub1.asm):02008                 ldb   #C$SPAC
0CB1 E728             (         sub1.asm):02009                 stb   $08,y          save it once
0CB3 E7A0             (         sub1.asm):02010                 stb   ,y+            save it twice
0CB5 E680             (         sub1.asm):02011                 ldb   ,x+            get the ByteTbl1 byte and bump pointer
0CB7 C014             (         sub1.asm):02012                 subb  #$14           subtract $14
0CB9 E728             (         sub1.asm):02013                 stb   $08,y
0CBB E7A0             (         sub1.asm):02014                 stb   ,y+
0CBD 3502             (         sub1.asm):02015                 puls  a
0CBF 4C               (         sub1.asm):02016                 inca  
0CC0 8104             (         sub1.asm):02017                 cmpa  #Tbl1sz
0CC2 26E9             (         sub1.asm):02018                 bne   GClop2
                      (         sub1.asm):02019                 
0CC4 CC0000           (         sub1.asm):02020                 ldd   #$0000
0CC7 FD4CFD           (         sub1.asm):02021                 std   X4CFD
0CCA FD4CF9           (         sub1.asm):02022                 std   X4CF9
0CCD FD4CFB           (         sub1.asm):02023                 std   X4CFB
0CD0 FD4CF7           (         sub1.asm):02024                 std   X4CF7
0CD3 FD4CF5           (         sub1.asm):02025                 std   X4CF5
0CD6 FD4CF1           (         sub1.asm):02026                 std   X4CF1
0CD9 FD4CF3           (         sub1.asm):02027                 std   X4CF3
0CDC FD4CEF           (         sub1.asm):02028                 std   X4CEF
                      (         sub1.asm):02029                
0CDF 17005E           (         sub1.asm):02030                 lbsr  SetandJsr1
0CE2 170071           (         sub1.asm):02031                 lbsr  SetandJsr2
0CE5 1700A6           (         sub1.asm):02032                 lbsr  SetandJsr3
0CE8 1700B9           (         sub1.asm):02033                 lbsr  SetandJsr4
                      (         sub1.asm):02034         
0CEB BD7843           (         sub1.asm):02035                 jsr   X7843
                      (         sub1.asm):02036         
0CEE BD7866           (         sub1.asm):02037                 jsr   X7866
                      (         sub1.asm):02038                
0CF1 86FF             (         sub1.asm):02039                 lda   #$FF
0CF3 B74D28           (         sub1.asm):02040                 sta   X4D28
                      (         sub1.asm):02041                 
0CF6 8601             (         sub1.asm):02042                 lda   #READ.
0CF8 308D0035         (         sub1.asm):02043                 leax  >Diesel,pcr
0CFC 103F84           (         sub1.asm):02044                 os9   I$Open
                      (         sub1.asm):02045                 
0CFF B71DD9           (         sub1.asm):02046                 sta   X1DD9          stow the path number
0D02 8E0000           (         sub1.asm):02047                 ldx   #$0000         MS 16 bits of file pos
0D05 CE0072           (         sub1.asm):02048                 ldu   #$0072         LS 16 bits of file pos
0D08 103F88           (         sub1.asm):02049                 os9   I$Seek         move file pointer
                      (         sub1.asm):02050                 
0D0B FC1D8B           (         sub1.asm):02051                 ldd   X1D8B          start with some value
0D0E C32D63           (         sub1.asm):02052                 addd  #$2D63         add a big offset to it
0D11 1F01             (         sub1.asm):02053                 tfr   d,x            move it to x in  prep for the read
                      (         sub1.asm):02054                 
0D13 C608             (         sub1.asm):02055                 ldb   #$08           Loop counter
0D15 3414             (         sub1.asm):02056         DRloop  pshs  b,x            push em
                      (         sub1.asm):02057         
0D17 B61DD9           (         sub1.asm):02058                 lda   X1DD9          get the path num
0D1A 108E000C         (         sub1.asm):02059                 ldy   #$000C         read 12 bytes
0D1E 103F89           (         sub1.asm):02060                 os9   I$Read         copy the bytes
                      (         sub1.asm):02061                 
0D21 3514             (         sub1.asm):02062                 puls  b,x            get the counter and orig destination addr
0D23 308850           (         sub1.asm):02063                 leax  $50,x          bump it by 80
0D26 5A               (         sub1.asm):02064                 decb                 dec the counter
0D27 26EC             (         sub1.asm):02065                 bne   DRloop         go again if not zero
                      (         sub1.asm):02066         
0D29 B61DD9           (         sub1.asm):02067                 lda   X1DD9          get the path num
0D2C 103F8F           (         sub1.asm):02068                 os9   I$Close        close the file
                      (         sub1.asm):02069         
0D2F 35F6             (         sub1.asm):02070                 puls  a,b,x,y,u,pc
                      (         sub1.asm):02071         
                      (         sub1.asm):02072         
0D31                  (         sub1.asm):02073         Diesel
0D31 7375622F64696573 (         sub1.asm):02074         L0D31   fcc  "sub/diesel.dat"
     656C2E646174
0D3F 00               (         sub1.asm):02075                 fcb   C$NULL
                      (         sub1.asm):02076         
0D40                  (         sub1.asm):02077         SetandJsr1
0D40 3476             (         sub1.asm):02078         L0D40   pshs  a,b,x,y,u
0D42 CC0092           (         sub1.asm):02079                 ldd   #$0092
0D45 FD1DA7           (         sub1.asm):02080                 std   X1DA7
                      (         sub1.asm):02081                 
0D48 CC00C8           (         sub1.asm):02082                 ldd   #$00C8
0D4B FD1DA5           (         sub1.asm):02083                 std   X1DA5
                      (         sub1.asm):02084                 
0D4E F64D11           (         sub1.asm):02085                 ldb   X4D11
0D51 BD782E           (         sub1.asm):02086                 jsr   X782E          2 place formatted output
                      (         sub1.asm):02087                 
0D54 35F6             (         sub1.asm):02088                 puls  a,b,x,y,u,pc
                      (         sub1.asm):02089                 
0D56                  (         sub1.asm):02090         SetandJsr2        
0D56 3476             (         sub1.asm):02091         L0D56   pshs  a,b,x,y,u
0D58 CC00A2           (         sub1.asm):02092                 ldd   #$00A2
0D5B FD1DA7           (         sub1.asm):02093                 std   X1DA7
                      (         sub1.asm):02094                 
0D5E CC00C8           (         sub1.asm):02095                 ldd   #$00C8
0D61 FD1DA5           (         sub1.asm):02096                 std   X1DA5
                      (         sub1.asm):02097                 
0D64 F64D12           (         sub1.asm):02098                 ldb   X4D12
0D67 BD782E           (         sub1.asm):02099                 jsr   X782E          2 place formatted output
0D6A 35F6             (         sub1.asm):02100                 puls  a,b,x,y,u,pc
                      (         sub1.asm):02101                 
                      (         sub1.asm):02102                 
                      (         sub1.asm):02103         * Decodes ??? and copies data
                      (         sub1.asm):02104         *  x -> from address
                      (         sub1.asm):02105         *  u -> to address      
0D6C                  (         sub1.asm):02106         Decode_copy
0D6C 3476             (         sub1.asm):02107         L0D6C   pshs  a,b,x,y,u
                      (         sub1.asm):02108         
0D6E A680             (         sub1.asm):02109         Decotr  lda   ,x+
0D70 2A0D             (         sub1.asm):02110                 bpl   Declp2
0D72 847F             (         sub1.asm):02111                 anda  #$7F
0D74 313F             (         sub1.asm):02112                 leay  -1,y
0D76 E680             (         sub1.asm):02113                 ldb   ,x+
                      (         sub1.asm):02114                 
0D78 E7C0             (         sub1.asm):02115         Declp1  stb   ,u+
0D7A 4A               (         sub1.asm):02116                 deca  
0D7B 26FB             (         sub1.asm):02117                 bne   Declp1
                      (         sub1.asm):02118                 
0D7D 2009             (         sub1.asm):02119                 bra   Dectr1
                      (         sub1.asm):02120         
0D7F E680             (         sub1.asm):02121         Declp2  ldb   ,x+
0D81 E7C0             (         sub1.asm):02122                 stb   ,u+
0D83 313F             (         sub1.asm):02123                 leay  -1,y
0D85 4A               (         sub1.asm):02124                 deca  
0D86 26F7             (         sub1.asm):02125                 bne   Declp2
0D88 313F             (         sub1.asm):02126         Dectr1  leay  -1,y
0D8A 26E2             (         sub1.asm):02127                 bne   Decotr
                      (         sub1.asm):02128                 
0D8C 35F6             (         sub1.asm):02129                 puls  a,b,x,y,u,pc
                      (         sub1.asm):02130         
0D8E                  (         sub1.asm):02131         SetandJsr3
0D8E 3476             (         sub1.asm):02132         L0D8E   pshs  a,b,x,y,u
0D90 CC00B2           (         sub1.asm):02133                 ldd   #$00B2
0D93 FD1DA7           (         sub1.asm):02134                 std   X1DA7
                      (         sub1.asm):02135                 
0D96 CC00C8           (         sub1.asm):02136                 ldd   #$00C8
0D99 FD1DA5           (         sub1.asm):02137                 std   X1DA5
                      (         sub1.asm):02138                 
0D9C F64D13           (         sub1.asm):02139                 ldb   X4D13
0D9F BD782E           (         sub1.asm):02140                 jsr   X782E          2 place formatted output
0DA2 35F6             (         sub1.asm):02141                 puls  a,b,x,y,u,pc
                      (         sub1.asm):02142         
                      (         sub1.asm):02143         
0DA4                  (         sub1.asm):02144         SetandJsr4
0DA4 3476             (         sub1.asm):02145         L0DA4   pshs  a,b,x,y,u
0DA6 CC0092           (         sub1.asm):02146                 ldd   #$0092
0DA9 FD1DA7           (         sub1.asm):02147                 std   X1DA7
                      (         sub1.asm):02148                 
0DAC CC0112           (         sub1.asm):02149                 ldd   #$0112
0DAF FD1DA5           (         sub1.asm):02150                 std   X1DA5
                      (         sub1.asm):02151                 
0DB2 4F               (         sub1.asm):02152                 clra  
                      (         sub1.asm):02153                 
0DB3 F61E1D           (         sub1.asm):02154                 ldb   X1E1D
0DB6 308D001E         (         sub1.asm):02155                 leax  >ByteTblE,pcr
0DBA E685             (         sub1.asm):02156                 ldb   b,x
0DBC BD782E           (         sub1.asm):02157                 jsr   X782E          2 place formatted output
                      (         sub1.asm):02158                 
0DBF 8E0128           (         sub1.asm):02159                 ldx   #$0128
0DC2 BF1DA5           (         sub1.asm):02160                 stx   X1DA5
                      (         sub1.asm):02161                 
0DC5 308D000A         (         sub1.asm):02162                 leax  >ByteTblD,pcr
0DC9 F61E1D           (         sub1.asm):02163                 ldb   X1E1D
0DCC E685             (         sub1.asm):02164                 ldb   b,x
                      (         sub1.asm):02165         *                            argument passed in b to this routine
0DCE BD7477           (         sub1.asm):02166                 jsr   X7477          some sort of copy routine ??
                      (         sub1.asm):02167                 
0DD1 35F6             (         sub1.asm):02168                 puls  a,b,x,y,u,pc
                      (         sub1.asm):02169         
                      (         sub1.asm):02170         
0DD3                  (         sub1.asm):02171         ByteTblD
0DD3 5353534D48       (         sub1.asm):02172         L0DD3   fcb  $53,$53,$53,$4D,$48         SSSMH 
                      (         sub1.asm):02173         
                      (         sub1.asm):02174         
0DD8                  (         sub1.asm):02175         ByteTblE
0DD8 01051E0A04       (         sub1.asm):02176         L0DD8   fcb  $01,$05,$1E,$0A,$04
                      (         sub1.asm):02177         
                      (         sub1.asm):02178         
                      (         sub1.asm):02179         
                      (         sub1.asm):02180         * Get Status - Returns the status of a file or device
                      (         sub1.asm):02181         * entry:
                      (         sub1.asm):02182         *       a -> path number
                      (         sub1.asm):02183         *       b -> SS.Opt (function code 00) 
                      (         sub1.asm):02184         *            Reads the option section of the path descriptor,
                      (         sub1.asm):02185         *            copies it to the 32 byte area pointed to by x
                      (         sub1.asm):02186         *       x -> address to receive data packet
                      (         sub1.asm):02187         *
                      (         sub1.asm):02188         * error:
                      (         sub1.asm):02189         *       CC -> Carry set on error
                      (         sub1.asm):02190         *       b  -> error code (if any)
                      (         sub1.asm):02191         
0DDD                  (         sub1.asm):02192         GetOpts
0DDD 3436             (         sub1.asm):02193         L0DDD   pshs a,b,x,y
0DDF CC0100           (         sub1.asm):02194                 ldd   #(StdOut*$100)+SS.Opt
0DE2 8E4265           (         sub1.asm):02195                 ldx   #$4265
0DE5 3410             (         sub1.asm):02196                 pshs  x              unneeded
0DE7 103F8D           (         sub1.asm):02197                 os9   I$GetStt
0DEA 3510             (         sub1.asm):02198                 puls  x              unneeded
0DEC A604             (         sub1.asm):02199                 lda   $04,x          IT.EKO
0DEE B71D49           (         sub1.asm):02200                 sta   X1D49          save orig
0DF1 6F04             (         sub1.asm):02201                 clr   $04,x          set it to NO echo
0DF3 A607             (         sub1.asm):02202                 lda   $07,x          IT.PAU
0DF5 B71D4A           (         sub1.asm):02203                 sta   X1D4A          save orig value
0DF8 6F07             (         sub1.asm):02204                 clr   $07,x          set it to NO pause
                      (         sub1.asm):02205                 
0DFA CC0100           (         sub1.asm):02206                 ldd   #(StdOut*$100)+SS.Opt
                      (         sub1.asm):02207                 
0DFD 103F8E           (         sub1.asm):02208                 os9   I$SetStt       reset them            
0E00 35B6             (         sub1.asm):02209                 puls  a,b,x,y,pc
                      (         sub1.asm):02210         
                      (         sub1.asm):02211         
0E02                  (         sub1.asm):02212         XmtSOS
0E02 7D4D2E           (         sub1.asm):02213         N0E02   tst   X4D2E
0E05 271A             (         sub1.asm):02214                 beq   SendSOS
0E07 BD72C3           (         sub1.asm):02215                 jsr   X72C3
0E0A 5468652072616469 (         sub1.asm):02216                 fcc  "The radio is out, Sir"
     6F206973206F7574
     2C20536972
0E1F 00               (         sub1.asm):02217                 fcb   C$NULL
0E20 39               (         sub1.asm):02218                 rts   
                      (         sub1.asm):02219         
0E21                  (         sub1.asm):02220         SendSOS
0E21 BD72C3           (         sub1.asm):02221         L0E21   jsr   X72C3
0E24 53656E64696E6720 (         sub1.asm):02222                 fcc  "Sending S.O.S., Sir"
     532E4F2E532E2C20
     536972
0E37 00               (         sub1.asm):02223                 fcb   C$NULL
                      (         sub1.asm):02224                
0E38 C653             (         sub1.asm):02225                 ldb   #'S
0E3A 170099           (         sub1.asm):02226                 lbsr  MCode
                      (         sub1.asm):02227                
0E3D C64F             (         sub1.asm):02228                 ldb   #'O
0E3F 170094           (         sub1.asm):02229                 lbsr  MCode
                      (         sub1.asm):02230                
0E42 C653             (         sub1.asm):02231                 ldb   #'S
0E44 17008F           (         sub1.asm):02232                 lbsr  MCode
                      (         sub1.asm):02233                
0E47 C6FF             (         sub1.asm):02234                 ldb   #$FF
0E49 F74C83           (         sub1.asm):02235                 stb   X4C83
0E4C 39               (         sub1.asm):02236                 rts   
                      (         sub1.asm):02237         
0E4D                  (         sub1.asm):02238         XmtPOS
0E4D 7D4D2E           (         sub1.asm):02239         N0E4D   tst   X4D2E
0E50 271A             (         sub1.asm):02240                 beq   SendPOS
0E52 BD72C3           (         sub1.asm):02241                 jsr   X72C3
0E55 5468652072616469 (         sub1.asm):02242                 fcc  "The radio is out, Sir"
     6F206973206F7574
     2C20536972
0E6A 00               (         sub1.asm):02243                 fcb   C$NULL
0E6B 39               (         sub1.asm):02244                 rts   
                      (         sub1.asm):02245         
0E6C                  (         sub1.asm):02246         SendPOS
0E6C BD72C3           (         sub1.asm):02247         L0E6C   jsr   X72C3
0E6F 526164696F696E67 (         sub1.asm):02248                 fcc  "Radioing position, Sir"
     20706F736974696F
     6E2C20536972
0E85 00               (         sub1.asm):02249                 fcb   C$NULL
                      (         sub1.asm):02250                
0E86 F64C84           (         sub1.asm):02251                 ldb   X4C84
0E89 BD7691           (         sub1.asm):02252                 jsr   X7691
0E8C 170047           (         sub1.asm):02253                 lbsr  MCode
                      (         sub1.asm):02254                 
0E8F BD7691           (         sub1.asm):02255                 jsr   X7691
0E92 170041           (         sub1.asm):02256                 lbsr  MCode
                      (         sub1.asm):02257                 
0E95 BD7691           (         sub1.asm):02258                 jsr   X7691
0E98 17003B           (         sub1.asm):02259                 lbsr  MCode
                      (         sub1.asm):02260                 
0E9B F64C87           (         sub1.asm):02261                 ldb   X4C87
0E9E BD7691           (         sub1.asm):02262                 jsr   X7691
0EA1 170032           (         sub1.asm):02263                 lbsr  MCode
                      (         sub1.asm):02264                 
0EA4 BD7691           (         sub1.asm):02265                 jsr   X7691
0EA7 17002C           (         sub1.asm):02266                 lbsr  MCode
                      (         sub1.asm):02267                 
0EAA BD7691           (         sub1.asm):02268                 jsr   X7691
0EAD 170026           (         sub1.asm):02269                 lbsr  MCode
                      (         sub1.asm):02270                 
                      (         sub1.asm):02271                 
0EB0 C645             (         sub1.asm):02272                 ldb   #'E            cute litte Easter Egg :-)
0EB2 170021           (         sub1.asm):02273                 lbsr  MCode
                      (         sub1.asm):02274                 
0EB5 C650             (         sub1.asm):02275                 ldb   #'P
0EB7 17001C           (         sub1.asm):02276                 lbsr  MCode
                      (         sub1.asm):02277                 
0EBA C659             (         sub1.asm):02278                 ldb   #'Y
0EBC 170017           (         sub1.asm):02279                 lbsr  MCode
                      (         sub1.asm):02280                 
0EBF C658             (         sub1.asm):02281                 ldb   #'X
0EC1 170012           (         sub1.asm):02282                 lbsr  MCode
                      (         sub1.asm):02283         
0EC4 C6FF             (         sub1.asm):02284                 ldb   #$FF
0EC6 F74C83           (         sub1.asm):02285                 stb   X4C83
0EC9 39               (         sub1.asm):02286                 rts   
                      (         sub1.asm):02287         
                      (         sub1.asm):02288         
                      (         sub1.asm):02289         * Set Status - Sets the status of a file or device
                      (         sub1.asm):02290         * entry:
                      (         sub1.asm):02291         *       a -> path number
                      (         sub1.asm):02292         *       b -> SS.Tone (function code 98) Sound through termional output device          
                      (         sub1.asm):02293         *       x -> duration and amplitude of the tone
                      (         sub1.asm):02294         *            LSB duration in ticks (60 sec) in the range of 0-255
                      (         sub1.asm):02295         *            MSB amplitude of the tone in the range of 0-63
                      (         sub1.asm):02296         *       y -> relative frequency counter (0 = low, 4095 = high)
                      (         sub1.asm):02297         * exit:
                      (         sub1.asm):02298         *       Same as entry
                      (         sub1.asm):02299         * error:
                      (         sub1.asm):02300         *       There are no error conditions set
                      (         sub1.asm):02301         *  
                      (         sub1.asm):02302         *  Therefore duration and amplitude passed in accd
                      (         sub1.asm):02303         *                           freq is passed in y
                      (         sub1.asm):02304         
0ECA                  (         sub1.asm):02305         SoundGen
0ECA 3476             (         sub1.asm):02306         L0ECA   pshs  a,b,x,y,u
0ECC 1F01             (         sub1.asm):02307                 tfr   d,x
0ECE CC0198           (         sub1.asm):02308                 ldd   #(StdOut*$100)+SS.Tone
0ED1 103F8E           (         sub1.asm):02309                 os9   I$SetStt
0ED4 35F6             (         sub1.asm):02310                 puls  a,b,x,y,u,pc
                      (         sub1.asm):02311         
                      (         sub1.asm):02312         * Looks like a morse code generator based on character input        
0ED6                  (         sub1.asm):02313         MCode        
0ED6 3476             (         sub1.asm):02314         L0ED6   pshs  a,b,x,y,u
0ED8 C120             (         sub1.asm):02315                 cmpb  #C$SPAC
0EDA 2611             (         sub1.asm):02316                 bne   L0EED          not a space process more
0EDC 17005E           (         sub1.asm):02317                 lbsr  TimeDly1       otherwise appropriate dead time
0EDF 17005B           (         sub1.asm):02318                 lbsr  TimeDly1
0EE2 170058           (         sub1.asm):02319                 lbsr  TimeDly1
0EE5 170055           (         sub1.asm):02320                 lbsr  TimeDly1
0EE8 170052           (         sub1.asm):02321                 lbsr  TimeDly1
0EEB                  (         sub1.asm):02322         ExtMCode 
0EEB 35F6             (         sub1.asm):02323                 puls  a,b,x,y,u,pc
                      (         sub1.asm):02324         
                      (         sub1.asm):02325         
                      (         sub1.asm):02326         
0EED C127             (         sub1.asm):02327         L0EED   cmpb  #''            is it a tick $27
0EEF 2DFA             (         sub1.asm):02328                 blt   ExtMcode
0EF1 C161             (         sub1.asm):02329                 cmpb  #'a
0EF3 2D02             (         sub1.asm):02330                 blt   L0EF7          whats wrong with this logic?
0EF5 C020             (         sub1.asm):02331                 subb  #$20           make upper case
0EF7 C17A             (         sub1.asm):02332         L0EF7   cmpb  #'z            this should have been Uppercase Z
                      (         sub1.asm):02333         *                            can't be less than a but greater than z
0EF9 2EF0             (         sub1.asm):02334                 bgt   ExtMCode
0EFB C027             (         sub1.asm):02335                 subb  #$27           now we subtract the position of the '
                      (         sub1.asm):02336         *                            to be zero based in the table        
0EFD 308D0662         (         sub1.asm):02337                 leax  >ByteTbl2,pcr
0F01 E685             (         sub1.asm):02338                 ldb   b,x
0F03 8608             (         sub1.asm):02339                 lda   #$08
                      (         sub1.asm):02340         
0F05 4A               (         sub1.asm):02341         L0F05   deca  
0F06 58               (         sub1.asm):02342                 lslb  
0F07 24FC             (         sub1.asm):02343                 bcc   L0F05
                      (         sub1.asm):02344         
0F09 58               (         sub1.asm):02345         Sndloop lslb  
0F0A 2414             (         sub1.asm):02346                 bcc   L0F20
0F0C 3406             (         sub1.asm):02347                 pshs  a,b
0F0E CC3F04           (         sub1.asm):02348                 ldd   #$3F04         setup sound amplitude/duration 
0F11 1F01             (         sub1.asm):02349                 tfr   d,x            move it to x where it should have been
0F13 108E0FD7         (         sub1.asm):02350                 ldy   #$0FD7         load the freq value
0F17 17FFB0           (         sub1.asm):02351                 lbsr  SoundGen       make the noise 
0F1A 8D21             (         sub1.asm):02352                 bsr   TimeDly1
0F1C 3506             (         sub1.asm):02353                 puls  a,b
0F1E 2012             (         sub1.asm):02354                 bra   Sndcntr
                      (         sub1.asm):02355                 
0F20 3406             (         sub1.asm):02356         L0F20   pshs  a,b
0F22 CC3F0C           (         sub1.asm):02357                 ldd   #$3F0C        setup sound amplitude/duration
0F25 1F01             (         sub1.asm):02358                 tfr   d,x           move that to x where it should have been in the first place
0F27 108E0FD7         (         sub1.asm):02359                 ldy   #$0FD7        load with freq value
0F2B 17FF9C           (         sub1.asm):02360                 lbsr  SoundGen      make the noise
0F2E 8D0D             (         sub1.asm):02361                 bsr   TimeDly1
0F30 3506             (         sub1.asm):02362                 puls  a,b
                      (         sub1.asm):02363         
0F32 4A               (         sub1.asm):02364         Sndcntr deca  
0F33 26D4             (         sub1.asm):02365                 bne   Sndloop
                      (         sub1.asm):02366                 
0F35 8D06             (         sub1.asm):02367                 bsr   TimeDly1
0F37 8D04             (         sub1.asm):02368                 bsr   TimeDly1
0F39 8D02             (         sub1.asm):02369                 bsr   TimeDly1
0F3B 35F6             (         sub1.asm):02370                 puls  a,b,x,y,u,pc
                      (         sub1.asm):02371         
                      (         sub1.asm):02372         
0F3D                  (         sub1.asm):02373         TimeDly1
0F3D 3410             (         sub1.asm):02374         L0F3D   pshs  x
0F3F 8E2710           (         sub1.asm):02375                 ldx   #$2710
0F42 301F             (         sub1.asm):02376         TD1loop leax  -1,x
0F44 26FC             (         sub1.asm):02377                 bne   TD1Loop
0F46 3510             (         sub1.asm):02378                 puls  x
0F48 39               (         sub1.asm):02379                 rts   
                      (         sub1.asm):02380         
                      (         sub1.asm):02381         * caller passes a pointer to string data in x
0F49                  (         sub1.asm):02382         MenuSelect
0F49 3462             (         sub1.asm):02383         L0F49   pshs  a,y,u
0F4B CC0000           (         sub1.asm):02384                 ldd   #$0000
0F4E FD1DB9           (         sub1.asm):02385                 std   X1DB9
                      (         sub1.asm):02386                 
0F51 BD77E5           (         sub1.asm):02387                 jsr   X77E5
                      (         sub1.asm):02388                 
0F54 FE1D8B           (         sub1.asm):02389                 ldu   X1D8B
0F57 3440             (         sub1.asm):02390                 pshs  u
                      (         sub1.asm):02391                 
0F59 CE1E25           (         sub1.asm):02392                 ldu   #$1E25
0F5C FF1D8B           (         sub1.asm):02393                 stu   X1D8B
0F5F FF1D89           (         sub1.asm):02394                 stu   X1D89
                      (         sub1.asm):02395                 
0F62 108E0006         (         sub1.asm):02396                 ldy   #$0006
0F66 10BF1DA7         (         sub1.asm):02397                 sty   X1DA7
                      (         sub1.asm):02398                 
0F6A 108E0030         (         sub1.asm):02399                 ldy   #$0030
0F6E 10BF1DA5         (         sub1.asm):02400                 sty   X1DA5
                      (         sub1.asm):02401                 
0F72 E680             (         sub1.asm):02402                 ldb   ,x+
0F74 3404             (         sub1.asm):02403                 pshs  b
0F76 3404             (         sub1.asm):02404                 pshs  b
0F78 BD74CC           (         sub1.asm):02405                 jsr   X74CC
                      (         sub1.asm):02406                 
0F7B 170045           (         sub1.asm):02407                 lbsr  L0FC3
0F7E 170042           (         sub1.asm):02408                 lbsr  L0FC3
                      (         sub1.asm):02409                 
0F81 BD74CC           (         sub1.asm):02410         L0F81   jsr   X74CC
0F84 17003C           (         sub1.asm):02411                 lbsr  L0FC3
0F87 6AE4             (         sub1.asm):02412                 dec   ,s
0F89 26F6             (         sub1.asm):02413                 bne   L0F81
                      (         sub1.asm):02414                 
0F8B 3546             (         sub1.asm):02415                 puls  a,b,u
0F8D FF1D8B           (         sub1.asm):02416                 stu   X1D8B
                      (         sub1.asm):02417                 
0F90 CE1E25           (         sub1.asm):02418                 ldu   #$1E25
0F93 FF1D89           (         sub1.asm):02419                 stu   X1D89
                      (         sub1.asm):02420                 
0F96 BD7747           (         sub1.asm):02421                 jsr   X7747
                      (         sub1.asm):02422                 
0F99 CB30             (         sub1.asm):02423                 addb  #$30
0F9B 3404             (         sub1.asm):02424                 pshs  b
                      (         sub1.asm):02425                 
0F9D 17FC59           (         sub1.asm):02426         ChkInp  lbsr  InpReady
0FA0 4D               (         sub1.asm):02427                 tsta                 not ready a = 0
0FA1 27FA             (         sub1.asm):02428                 beq   ChkInp         loop till we get an input
                      (         sub1.asm):02429                 
0FA3 1F89             (         sub1.asm):02430                 tfr   a,b            move the returned value to b
0FA5 4F               (         sub1.asm):02431                 clra  
0FA6 C10D             (         sub1.asm):02432                 cmpb  #C$CR
0FA8 2710             (         sub1.asm):02433                 beq   L0FBA
                      (         sub1.asm):02434                 
0FAA C11B             (         sub1.asm):02435                 cmpb  #C$EOF
0FAC 270F             (         sub1.asm):02436                 beq   L0FBD
                      (         sub1.asm):02437                 
0FAE C131             (         sub1.asm):02438                 cmpb  #'1            Looking for input 1 - 7 max depending on menu
0FB0 2DEB             (         sub1.asm):02439                 blt   ChkInp          less than 1 loop again
                      (         sub1.asm):02440                 
0FB2 E1E4             (         sub1.asm):02441                 cmpb  ,s
0FB4 2EE7             (         sub1.asm):02442                 bgt   ChkInp
                      (         sub1.asm):02443                 
0FB6 C031             (         sub1.asm):02444                 subb  #'1            subtract "one" ($31) from it so we are now zero based 
0FB8 2005             (         sub1.asm):02445                 bra   L0FBF
                      (         sub1.asm):02446                 
0FBA 5F               (         sub1.asm):02447         L0FBA   clrb  
0FBB 2002             (         sub1.asm):02448                 bra   L0FBF
                      (         sub1.asm):02449                 
0FBD C6FF             (         sub1.asm):02450         L0FBD   ldb   #$FF
0FBF 3261             (         sub1.asm):02451         L0FBF   leas  $01,s
0FC1 35E2             (         sub1.asm):02452                 puls  a,y,u,pc
                      (         sub1.asm):02453         
                      (         sub1.asm):02454         
0FC3 108E0030         (         sub1.asm):02455         L0FC3   ldy   #$0030
0FC7 10BF1DA5         (         sub1.asm):02456                 sty   X1DA5
                      (         sub1.asm):02457                 
0FCB 10BE1DA7         (         sub1.asm):02458                 ldy   X1DA7
0FCF 312C             (         sub1.asm):02459                 leay  $0C,y
0FD1 10BF1DA7         (         sub1.asm):02460                 sty   X1DA7
0FD5 39               (         sub1.asm):02461                 rts   
                      (         sub1.asm):02462         
                      (         sub1.asm):02463         
0FD6                  (         sub1.asm):02464         GameSetup
0FD6 3476             (         sub1.asm):02465         N0FD6   pshs  a,b,x,y,u
0FD8 B64C75           (         sub1.asm):02466                 lda   X4C75          current side
0FDB B74D3C           (         sub1.asm):02467                 sta   X4D3C          new side value
                      (         sub1.asm):02468                 
0FDE B61E16           (         sub1.asm):02469                 lda   X1E16          current year value
0FE1 B74D3D           (         sub1.asm):02470                 sta   X4D3D          new year value
                      (         sub1.asm):02471                 
0FE4 CC0000           (         sub1.asm):02472                 ldd   #$0000         make room for 4 items
0FE7 3406             (         sub1.asm):02473                 pshs  d
0FE9 3406             (         sub1.asm):02474                 pshs  d
                      (         sub1.asm):02475                 
0FEB 308D034E         (         sub1.asm):02476                 leax  >GameType,pcr
0FEF 17FF57           (         sub1.asm):02477                 lbsr  MenuSelect
0FF2 5D               (         sub1.asm):02478                 tstb  
0FF3 102B0259         (         sub1.asm):02479                 lbmi  Ex_GS          minus value returned were outa here
0FF7 C100             (         sub1.asm):02480                 cmpb  #$00           1 was selected (target practice)
0FF9 10270054         (         sub1.asm):02481                 lbeq  CaptName       go prompt for capt name
0FFD E7E4             (         sub1.asm):02482                 stb   ,s             push value on the stack
                      (         sub1.asm):02483                 
0FFF 308D0385         (         sub1.asm):02484                 leax  >GameLev,pcr
1003 17FF43           (         sub1.asm):02485                 lbsr  MenuSelect
1006 5D               (         sub1.asm):02486                 tstb  
1007 102B0245         (         sub1.asm):02487                 lbmi  Ex_GS          minus value returned were outa here 
100B E763             (         sub1.asm):02488                 stb   $03,s          push that value on the stack
                      (         sub1.asm):02489                 
100D 308D03BB         (         sub1.asm):02490                 leax  >SideChoose,pcr
1011 17FF35           (         sub1.asm):02491                 lbsr  MenuSelect
1014 5D               (         sub1.asm):02492                 tstb  
1015 102B0237         (         sub1.asm):02493                 lbmi  Ex_GS          minus value returned were outa here
1019 E761             (         sub1.asm):02494                 stb   $01,s          push that on the stack
                      (         sub1.asm):02495                 
101B A6E4             (         sub1.asm):02496                 lda   ,s             get the game type from stack
101D 8102             (         sub1.asm):02497                 cmpa  #$02           3 selected War time command ?
101F 271A             (         sub1.asm):02498                 beq   WTCmnd
                      (         sub1.asm):02499                 
1021 C101             (         sub1.asm):02500                 cmpb  #$01           check side American ?
1023 2706             (         sub1.asm):02501                 beq   USAin
1025 308D03CA         (         sub1.asm):02502                 leax  >YearChoose,pcr 
1029 2004             (         sub1.asm):02503                 bra   YrSel
102B 308D040D         (         sub1.asm):02504         USAin   leax  >YearChoose2,pcr
102F 17FF17           (         sub1.asm):02505         YrSel   lbsr  MenuSelect
1032 5D               (         sub1.asm):02506                 tstb  
1033 102B0219         (         sub1.asm):02507                 lbmi  Ex_GS          minus value returned were outa here
1037 E762             (         sub1.asm):02508                 stb   $02,s          push on stack
1039 2016             (         sub1.asm):02509                 bra   CaptName
                      (         sub1.asm):02510         
103B                  (         sub1.asm):02511         WTCmnd
103B 6F62             (         sub1.asm):02512         L103B   clr   $02,s           clear the year value
103D 3402             (         sub1.asm):02513                 pshs  a               push game type
103F C101             (         sub1.asm):02514                 cmpb  #$01            check side American ?
1041 2707             (         sub1.asm):02515                 beq   Ameri
1043 86FF             (         sub1.asm):02516                 lda   #$FF            German
1045 B702A3           (         sub1.asm):02517                 sta   X02A3           side vlaue
1048 2005             (         sub1.asm):02518                 bra   L104F
104A 8623             (         sub1.asm):02519         Ameri   lda   #$23            American
104C B702A3           (         sub1.asm):02520                 sta   X02A3           side value
104F 3502             (         sub1.asm):02521         L104F   puls  a
                      (         sub1.asm):02522         
1051                  (         sub1.asm):02523         CaptName
1051 CC0000           (         sub1.asm):02524         L1051   ldd   #$0000
1054 BD77E5           (         sub1.asm):02525                 jsr   X77E5
1057 BD7747           (         sub1.asm):02526                 jsr   X7747
                      (         sub1.asm):02527                 
105A CC0039           (         sub1.asm):02528                 ldd   #$0039
105D FD1DA7           (         sub1.asm):02529                 std   X1DA7
                      (         sub1.asm):02530                 
1060 CC0050           (         sub1.asm):02531                 ldd   #$0050
1063 FD1DA5           (         sub1.asm):02532                 std   X1DA5
                      (         sub1.asm):02533                 
1066 BD72F3           (         sub1.asm):02534                 jsr   X72F3           this writes the strings?
1069 456E746572204361 (         sub1.asm):02535                 fcc  "Enter Captain's Name: "
     707461696E277320
     4E616D653A20
107F 00               (         sub1.asm):02536                 fcb   C$NULL
1080 CC               (         sub1.asm):02537                 fcb   $CC
1081 00               (         sub1.asm):02538                 fcb   C$NULL
1082 45               (         sub1.asm):02539                 fcb   $45
                      (         sub1.asm):02540                 
1083 FD1DA7           (         sub1.asm):02541                 std   X1DA7
                      (         sub1.asm):02542                 
1086 CC0056           (         sub1.asm):02543                 ldd   #$0056
1089 FD1DA5           (         sub1.asm):02544                 std   X1DA5
                      (         sub1.asm):02545                 
108C BD72F3           (         sub1.asm):02546                 jsr   X72F3           this writes the strings?
108F 2D3E             (         sub1.asm):02547                 fcc   "->"
1091 00               (         sub1.asm):02548                 fcb   C$NULL
                      (         sub1.asm):02549                 
                      (         sub1.asm):02550         *       copies in the current captains name          
1092 8E4265           (         sub1.asm):02551                 ldx   #$4265          destination address
1095 108E0335         (         sub1.asm):02552                 ldy   #$0335          source address
1099 8619             (         sub1.asm):02553                 lda   #$19            bytes to read
109B E6A0             (         sub1.asm):02554         L109B   ldb   ,y+             get the byte
109D 2705             (         sub1.asm):02555                 beq   L10A4           if we find a zero exit loop
109F E780             (         sub1.asm):02556                 stb   ,x+             not zero move the data
10A1 4A               (         sub1.asm):02557                 deca                  decrement the loop counter
10A2 26F7             (         sub1.asm):02558                 bne   L109B           loop till done
                      (         sub1.asm):02559         
10A4 6F84             (         sub1.asm):02560         L10A4   clr   ,x              clear the byte at x
10A6 17F75E           (         sub1.asm):02561                 lbsr  GetKBinp        get keyboard input
10A9 C11B             (         sub1.asm):02562                 cmpb  #C$EOF
10AB 102701A1         (         sub1.asm):02563                 lbeq  Ex_GS
                      (         sub1.asm):02564                 
10AF B64265           (         sub1.asm):02565                 lda   X4265           base address of keyboard input  
10B2 810D             (         sub1.asm):02566                 cmpa  #C$CR           a carriage return ?
10B4 2606             (         sub1.asm):02567                 bne   HaveNam         anything else must be a name
10B6 308D053F         (         sub1.asm):02568                 leax  >Nameless,pcr   was a CR no name chosen
10BA 2003             (         sub1.asm):02569                 bra   CopyNam
10BC 8E4265           (         sub1.asm):02570         HaveNam ldx   #$4265          set base address for name string
10BF 8619             (         sub1.asm):02571         CopyNam lda   #$19            max bytes to copy   
10C1 108E0335         (         sub1.asm):02572                 ldy   #$0335          captains name storage
10C5 E680             (         sub1.asm):02573         Cpy2Nam ldb   ,x+             get byte
10C7 C10D             (         sub1.asm):02574                 cmpb  #C$CR           is it a carriage return?
10C9 2705             (         sub1.asm):02575                 beq   NMDone          if so were done         
10CB E7A0             (         sub1.asm):02576                 stb   ,y+             otherwise move the byte
10CD 4A               (         sub1.asm):02577                 deca                  dec the counter
10CE 26F5             (         sub1.asm):02578                 bne   Cpy2Nam
                      (         sub1.asm):02579                 
                      (         sub1.asm):02580                 
10D0 6FA4             (         sub1.asm):02581         NMDone  clr   ,y
                      (         sub1.asm):02582                 
10D2 3506             (         sub1.asm):02583                 puls  a,b
10D4 B74C76           (         sub1.asm):02584                 sta   X4C76          game type
10D7 F74C75           (         sub1.asm):02585                 stb   X4C75          side
10DA 3502             (         sub1.asm):02586                 puls  a              year
10DC C100             (         sub1.asm):02587                 cmpb  #$00           test side German ?
10DE 2704             (         sub1.asm):02588                 beq   GRyear
                      (         sub1.asm):02589                 
10E0 8B2A             (         sub1.asm):02590         USyear  adda  #42            US first year          
10E2 2002             (         sub1.asm):02591                 bra   SavYear
                      (         sub1.asm):02592                 
10E4 8B27             (         sub1.asm):02593         GRyear  adda  #39            German first year
10E6 B71E16           (         sub1.asm):02594         SavYear sta   X1E16          save the year value
                      (         sub1.asm):02595         
10E9 3502             (         sub1.asm):02596                 puls  a        
10EB B74C77           (         sub1.asm):02597                 sta   X4C77          game level
                      (         sub1.asm):02598                 
10EE 8603             (         sub1.asm):02599                 lda   #$03
10F0 B705CE           (         sub1.asm):02600                 sta   X05CE
                      (         sub1.asm):02601                 
10F3 CC0000           (         sub1.asm):02602                 ldd   #$0000
10F6 FD04F0           (         sub1.asm):02603                 std   X04F0
10F9 FD04F2           (         sub1.asm):02604                 std   X04F2
10FC FD04F4           (         sub1.asm):02605                 std   X04F4
10FF FD04F5           (         sub1.asm):02606                 std   X04F5
1102 FD029A           (         sub1.asm):02607                 std   X029A
                      (         sub1.asm):02608                 
1105 7F04F7           (         sub1.asm):02609                 clr   X04F7
1108 7F04F8           (         sub1.asm):02610                 clr   X04F8
110B 7F04F9           (         sub1.asm):02611                 clr   X04F9
110E 7F04FA           (         sub1.asm):02612                 clr   X04FA
1111 7F04FB           (         sub1.asm):02613                 clr   X04FB
1114 7F04FC           (         sub1.asm):02614                 clr   X04FC
1117 7F04FD           (         sub1.asm):02615                 clr   X04FD
111A 7F04FE           (         sub1.asm):02616                 clr   X04FE
111D 7F04FF           (         sub1.asm):02617                 clr   X04FF
                      (         sub1.asm):02618                 
1120 17EFD6           (         sub1.asm):02619                 lbsr  GetMisDat
1123 17F15B           (         sub1.asm):02620                 lbsr  GetSubStat
1126 17F5C4           (         sub1.asm):02621                 lbsr  GetShipmap
1129 17EF8C           (         sub1.asm):02622                 lbsr  GetMap 
112C 17F2CE           (         sub1.asm):02623                 lbsr  GetConvoy
112F 17F458           (         sub1.asm):02624                 lbsr  SetParams
1132 17FB0D           (         sub1.asm):02625                 lbsr  GetControl1
1135 17F555           (         sub1.asm):02626                 lbsr  SetMorePars
                      (         sub1.asm):02627                 
1138 B64C76           (         sub1.asm):02628                 lda   X4C76          test the game type value
113B 8102             (         sub1.asm):02629                 cmpa  #$02           is it war time command ?
113D 1026010A         (         sub1.asm):02630                 lbne  GetMission     no then get your mission
                      (         sub1.asm):02631                 
1141 CC0000           (         sub1.asm):02632                 ldd   #$0000
1144 BD77E5           (         sub1.asm):02633                 jsr   X77E5
                      (         sub1.asm):02634                 
1147 FE1D8B           (         sub1.asm):02635                 ldu   X1D8B
114A 3440             (         sub1.asm):02636                 pshs  u
114C CE1E25           (         sub1.asm):02637                 ldu   #$1E25
114F FF1D8B           (         sub1.asm):02638                 stu   X1D8B
                      (         sub1.asm):02639                 
1152 108E0029         (         sub1.asm):02640                 ldy   #$0029
1156 10BF1DA7         (         sub1.asm):02641                 sty   X1DA7
                      (         sub1.asm):02642                 
115A 108E0010         (         sub1.asm):02643                 ldy   #$0010
115E 10BF1DA5         (         sub1.asm):02644                 sty   X1DA5
                      (         sub1.asm):02645                 
1162 7D4C75           (         sub1.asm):02646                 tst   X4C75          test side value 0 = German 1 = US
1165 2646             (         sub1.asm):02647                 bne   ImUSA
                      (         sub1.asm):02648                 
1167 BD72F3           (         sub1.asm):02649                 jsr   X72F3          this writes the strings?
116A 4974206973207468 (         sub1.asm):02650                 fcc  "It is the year 1939, and"
     6520796561722031
     3933392C20616E64
1182 00               (         sub1.asm):02651                 fcb   C$NULL
                      (         sub1.asm):02652         
1183 108E0032         (         sub1.asm):02653                 ldy   #$0032
1187 10BF1DA7         (         sub1.asm):02654                 sty   X1DA7
                      (         sub1.asm):02655         
118B 108E0010         (         sub1.asm):02656                 ldy   #$0010
118F 10BF1DA5         (         sub1.asm):02657                 sty   X1DA5
                      (         sub1.asm):02658         
1193 BD72F3           (         sub1.asm):02659                 jsr   X72F3          this writes the strings?
1196 4765726D616E7920 (         sub1.asm):02660                 fcc  "Germany has started"
     6861732073746172
     746564
11A9 00               (         sub1.asm):02661                 fcb   C$NULL
11AA 16               (         sub1.asm):02662                 fcb   C$CLSALL       flag to skip # of bytes after next null
11AB 00               (         sub1.asm):02663                 fcb   C$NULL
11AC 4D               (         sub1.asm):02664                 fcb   $4D            bytes to skip (US opening message)
                      (         sub1.asm):02665         
11AD BD72F3           (         sub1.asm):02666         ImUSA   jsr   X72F3          this writes the strings?
11B0 4974206973207468 (         sub1.asm):02667                 fcc  "It is the year 1942, and the"
     6520796561722031
     3934322C20616E64
     20746865
11CC 00               (         sub1.asm):02668                 fcb   C$NULL
                      (         sub1.asm):02669                 
11CD 108E0032         (         sub1.asm):02670                 ldy   #$0032
11D1 10BF1DA7         (         sub1.asm):02671                 sty   X1DA7
                      (         sub1.asm):02672                 
11D5 108E0010         (         sub1.asm):02673                 ldy   #$0010
11D9 10BF1DA5         (         sub1.asm):02674                 sty   X1DA5
                      (         sub1.asm):02675                 
11DD BD72F3           (         sub1.asm):02676                 jsr   X72F3          this writes the strings?
11E0 556E697465642053 (         sub1.asm):02677                 fcc  "United States has entered"
     7461746573206861
     7320656E74657265
     64
11F9 00               (         sub1.asm):02678                 fcb   C$NULL
                      (         sub1.asm):02679         *                            ends up here at the null after germay started string
                      (         sub1.asm):02680         
11FA 108E003A         (         sub1.asm):02681                 ldy   #$003A
11FE 10BF1DA7         (         sub1.asm):02682                 sty   X1DA7
                      (         sub1.asm):02683                 
1202 108E0010         (         sub1.asm):02684                 ldy   #$0010
1206 10BF1DA5         (         sub1.asm):02685                 sty   X1DA5
                      (         sub1.asm):02686                 
120A BD72F3           (         sub1.asm):02687                 jsr   X72F3          this writes the strings?
120D 576F726C64205761 (         sub1.asm):02688                 fcc  "World War II."
     722049492E
121A 00               (         sub1.asm):02689                 fcb   C$NULL
                      (         sub1.asm):02690                 
121B 8E0063           (         sub1.asm):02691                 ldx   #$0063
121E BF1DA7           (         sub1.asm):02692                 stx   X1DA7
                      (         sub1.asm):02693                 
1221 8E0048           (         sub1.asm):02694                 ldx   #$0048
1224 BF1DA5           (         sub1.asm):02695                 stx   X1DA5
                      (         sub1.asm):02696                 
1227 BD72F3           (         sub1.asm):02697                 jsr   X72F3          this writes the strings?
122A 507265737320616E (         sub1.asm):02698                 fcc  "Press any key"
     79206B6579
1237 00               (         sub1.asm):02699                 fcb   C$NULL
                      (         sub1.asm):02700                 
1238 3540             (         sub1.asm):02701                 puls  u
123A FF1D8B           (         sub1.asm):02702                 stu   X1D8B
123D BD7747           (         sub1.asm):02703                 jsr   X7747
                      (         sub1.asm):02704         
                      (         sub1.asm):02705         
1240 4F               (         sub1.asm):02706                 clra                 set path to StdIn 
1241 8E1DDA           (         sub1.asm):02707                 ldx   #$1DDA         place to store input
1244 108E0001         (         sub1.asm):02708                 ldy   #1             get one byte
1248 103F89           (         sub1.asm):02709                 os9   I$Read         go fetch it
                      (         sub1.asm):02710         
124B                  (         sub1.asm):02711         GetMission
124B 17F7C8           (         sub1.asm):02712         L124B   lbsr  Read_Mission
124E 35F6             (         sub1.asm):02713                 puls  a,b,x,y,u,pc
                      (         sub1.asm):02714         
1250                  (         sub1.asm):02715         Ex_GS
1250 3264             (         sub1.asm):02716         L1250   leas  $04,s          clean up the stack
1252 35F6             (         sub1.asm):02717                 puls  a,b,x,y,u,pc
                      (         sub1.asm):02718                 
                      (         sub1.asm):02719                 
                      (         sub1.asm):02720         
1254                  (         sub1.asm):02721         Return2Sea
1254 3476             (         sub1.asm):02722         N1254   pshs  a,b,x,y,u
1256 CC0000           (         sub1.asm):02723                 ldd   #$0000
1259 FD029A           (         sub1.asm):02724                 std   X029A
                      (         sub1.asm):02725                 
125C 7F04FA           (         sub1.asm):02726                 clr   X04FA
125F 7F04FB           (         sub1.asm):02727                 clr   X04FB
1262 7F04FC           (         sub1.asm):02728                 clr   X04FC
1265 7F04FD           (         sub1.asm):02729                 clr   X04FD
1268 7F04FE           (         sub1.asm):02730                 clr   X04FE
126B 7F04FF           (         sub1.asm):02731                 clr   X04FF
                      (         sub1.asm):02732                 
126E 8603             (         sub1.asm):02733                 lda   #$03
1270 B705CE           (         sub1.asm):02734                 sta   X05CE
                      (         sub1.asm):02735                 
1273 BE1E17           (         sub1.asm):02736                 ldx   X1E17
1276 F61E16           (         sub1.asm):02737                 ldb   X1E16          year value 
1279 3414             (         sub1.asm):02738                 pshs  b,x
                      (         sub1.asm):02739                 
127B 17EE7B           (         sub1.asm):02740                 lbsr  GetMisDat
127E 17F000           (         sub1.asm):02741                 lbsr  GetSubStat
1281 17F469           (         sub1.asm):02742                 lbsr  GetShipmap
1284 17EE31           (         sub1.asm):02743                 lbsr  GetMap
1287 17F173           (         sub1.asm):02744                 lbsr  GetConvoy
128A 17F2FD           (         sub1.asm):02745                 lbsr  SetParams
128D 17F9B2           (         sub1.asm):02746                 lbsr  GetControl1
1290 17F3FA           (         sub1.asm):02747                 lbsr  SetMorePars
1293 17F763           (         sub1.asm):02748                 lbsr  Zero_txt_area
                      (         sub1.asm):02749           
1296 8E0029           (         sub1.asm):02750                 ldx   #$0029
1299 BF1DA7           (         sub1.asm):02751                 stx   X1DA7
                      (         sub1.asm):02752           
129C 8E0038           (         sub1.asm):02753                 ldx   #$0038
129F BF1DA5           (         sub1.asm):02754                 stx   X1DA5
                      (         sub1.asm):02755           
12A2 10BE1D8B         (         sub1.asm):02756                 ldy   X1D8B
                      (         sub1.asm):02757           
12A6 CE1E25           (         sub1.asm):02758                 ldu   #$1E25
12A9 FF1D8B           (         sub1.asm):02759                 stu   X1D8B
                      (         sub1.asm):02760           
12AC BE1E17           (         sub1.asm):02761                 ldx   X1E17
12AF F61E16           (         sub1.asm):02762                 ldb   X1E16          year value
12B2 E1E0             (         sub1.asm):02763                 cmpb  ,s+
12B4 2704             (         sub1.asm):02764                 beq   L12BA
12B6 3089016D         (         sub1.asm):02765                 leax  365,x
12BA 1F10             (         sub1.asm):02766         L12BA   tfr   x,d
12BC A3E1             (         sub1.asm):02767                 subd  ,s++
12BE 10830001         (         sub1.asm):02768                 cmpd  #1
12C2 2C03             (         sub1.asm):02769                 bge   L12C7
12C4 CC0001           (         sub1.asm):02770                 ldd   #1
                      (         sub1.asm):02771         
12C7 BD72F3           (         sub1.asm):02772         L12C7   jsr   X72F3          this writes the strings?
12CA 4166746572206120 (         sub1.asm):02773                 fcc   "After a leave of "
     6C65617665206F66
     20
12DB 00               (         sub1.asm):02774                 fcb   C$NULL
                      (         sub1.asm):02775         
12DC BD7304           (         sub1.asm):02776                 jsr   X7304          calcs a integer based on input passed in d 
                      (         sub1.asm):02777         
12DF BD72F3           (         sub1.asm):02778                 jsr   X72F3          this writes the strings?
12E2 20646179732C     (         sub1.asm):02779                 fcc   " days,"
12E8 00               (         sub1.asm):02780                 fcb   C$NULL
                      (         sub1.asm):02781                 
12E9 BE1DA7           (         sub1.asm):02782                 ldx   X1DA7
12EC 3009             (         sub1.asm):02783                 leax  9,x
12EE BF1DA7           (         sub1.asm):02784                 stx   X1DA7
                      (         sub1.asm):02785                 
12F1 CC0038           (         sub1.asm):02786                 ldd   #$0038
12F4 FD1DA5           (         sub1.asm):02787                 std   X1DA5
                      (         sub1.asm):02788                 
12F7 BD72F3           (         sub1.asm):02789                 jsr   X72F3          this writes the strings?
12FA 796F752067657420 (         sub1.asm):02790                 fcc   "you get a new mission."
     61206E6577206D69
     7373696F6E2E
1310 00               (         sub1.asm):02791                 fcb   C$NULL
                      (         sub1.asm):02792                 
1311 8E0063           (         sub1.asm):02793                 ldx   #$0063
1314 BF1DA7           (         sub1.asm):02794                 stx   X1DA7
                      (         sub1.asm):02795                 
1317 8E0068           (         sub1.asm):02796                 ldx   #$0068
131A BF1DA5           (         sub1.asm):02797                 stx   X1DA5
                      (         sub1.asm):02798                 
131D BD72F3           (         sub1.asm):02799                 jsr   X72F3          this writes the strings?
1320 507265737320616E (         sub1.asm):02800                 fcc   "Press any key"
     79206B6579
132D 00               (         sub1.asm):02801                 fcb   C$NULL
                      (         sub1.asm):02802                 
132E 10BF1D8B         (         sub1.asm):02803                 sty   X1D8B
                      (         sub1.asm):02804                 
1332 17F76A           (         sub1.asm):02805                 lbsr  SetandSwap
1335 17F7FD           (         sub1.asm):02806                 lbsr  MVMissn
1338 17F6DB           (         sub1.asm):02807                 lbsr  Read_Mission
133B 35F6             (         sub1.asm):02808                 puls  a,b,x,y,u,pc
                      (         sub1.asm):02809         
                      (         sub1.asm):02810         
133D                  (         sub1.asm):02811         GameType
133D 03               (         sub1.asm):02812         L133D   fcb   $03            seems to flag number of choices
133E 2053454C45435420 (         sub1.asm):02813                 fcc   " SELECT GAME TYPE"
     47414D4520545950
     45
134F 00               (         sub1.asm):02814                 fcb   C$NULL
1350 312E205461726765 (         sub1.asm):02815                 fcc   "1. Target practice"
     7420707261637469
     6365
1362 00               (         sub1.asm):02816                 fcb   C$NULL
1363 322E2053696E676C (         sub1.asm):02817                 fcc   "2. Single mission"
     65206D697373696F
     6E
1374 00               (         sub1.asm):02818                 fcb   C$NULL
1375 332E205761727469 (         sub1.asm):02819                 fcc   "3. Wartime command"
     6D6520636F6D6D61
     6E64
1387 00               (         sub1.asm):02820                 fcb   C$NULL
                      (         sub1.asm):02821         
1388                  (         sub1.asm):02822         GameLev
1388 04               (         sub1.asm):02823         L1388   fcb   $04            seems to flag number of choices
1389 2053454C45435420 (         sub1.asm):02824                 fcc   " SELECT GAME LEVEL"
     47414D45204C4556
     454C
139B 00               (         sub1.asm):02825                 fcb   C$NULL
139C 312E204E6F766963 (         sub1.asm):02826                 fcc   "1. Novice"
     65
13A5 00               (         sub1.asm):02827                 fcb   C$NULL
13A6 322E20496E746572 (         sub1.asm):02828                 fcc   "2. Intermediate"
     6D656469617465
13B5 00               (         sub1.asm):02829                 fcb   C$NULL
13B6 332E20416476616E (         sub1.asm):02830                 fcc   "3. Advanced"
     636564
13C1 00               (         sub1.asm):02831                 fcb   C$NULL
13C2 342E204578706572 (         sub1.asm):02832                 fcc   "4. Expert"
     74
13CB 00               (         sub1.asm):02833                 fcb   C$NULL
                      (         sub1.asm):02834         
                      (         sub1.asm):02835         
13CC                  (         sub1.asm):02836         SideChoose
13CC 02               (         sub1.asm):02837         L13CC   fcb   $02            seems to flag number of choices
13CD 202043484F4F5345 (         sub1.asm):02838                 fcc   "  CHOOSE A SIDE"
     20412053494445
13DC 00               (         sub1.asm):02839                 fcb   C$NULL
13DD 312E204765726D61 (         sub1.asm):02840                 fcc   "1. German"
     6E
13E6 00               (         sub1.asm):02841                 fcb   C$NULL
13E7 322E20416D657269 (         sub1.asm):02842                 fcc   "2. American"
     63616E
13F2 00               (         sub1.asm):02843                 fcb   C$NULL
                      (         sub1.asm):02844         
                      (         sub1.asm):02845         
13F3                  (         sub1.asm):02846         YearChoose
13F3 07               (         sub1.asm):02847         L13F3   fcb   $07            seems to flag number of choices
13F4 202043484F4F5345 (         sub1.asm):02848                 fcc   "  CHOOSE A YEAR"
     20412059454152
1403 00               (         sub1.asm):02849                 fcb   C$NULL
1404 312E2031393339   (         sub1.asm):02850                 fcc   "1. 1939"
140B 00               (         sub1.asm):02851                 fcb   C$NULL
140C 322E2031393430   (         sub1.asm):02852                 fcc   "2. 1940"
1413 00               (         sub1.asm):02853                 fcb   C$NULL
1414 332E2031393431   (         sub1.asm):02854                 fcc   "3. 1941"
141B 00               (         sub1.asm):02855                 fcb   C$NULL
141C 342E2031393432   (         sub1.asm):02856                 fcc   "4. 1942"
1423 00               (         sub1.asm):02857                 fcb   C$NULL
1424 352E2031393433   (         sub1.asm):02858                 fcc   "5. 1943"
142B 00               (         sub1.asm):02859                 fcb   C$NULL
142C 362E2031393434   (         sub1.asm):02860                 fcc   "6. 1944"
1433 00               (         sub1.asm):02861                 fcb   C$NULL
1434 372E2031393435   (         sub1.asm):02862                 fcc   "7. 1945"
143B 00               (         sub1.asm):02863                 fcb   C$NULL
                      (         sub1.asm):02864         
                      (         sub1.asm):02865         
143C                  (         sub1.asm):02866         YearChoose2
143C 04               (         sub1.asm):02867         L143C   fcb   $04            seems to flag number of choices
143D 202043484F4F5345 (         sub1.asm):02868                 fcc   "  CHOOSE A YEAR"
     20412059454152
144C 00               (         sub1.asm):02869                 fcb   C$NULL
144D 312E2031393432   (         sub1.asm):02870                 fcc   "1. 1942"
1454 00               (         sub1.asm):02871                 fcb   C$NULL
1455 322E2031393433   (         sub1.asm):02872                 fcc   "2. 1943"
145C 00               (         sub1.asm):02873                 fcb   C$NULL
145D 332E2031393434   (         sub1.asm):02874                 fcc   "3. 1944"
1464 00               (         sub1.asm):02875                 fcb   C$NULL
1465 342E2031393435   (         sub1.asm):02876                 fcc   "4. 1945"
146C 00               (         sub1.asm):02877                 fcb   C$NULL
                      (         sub1.asm):02878         
                      (         sub1.asm):02879         
                      (         sub1.asm):02880         
146D                  (         sub1.asm):02881         TransferTorp
146D 3476             (         sub1.asm):02882         N146D   pshs  a,b,x,y,u
146F 308D000B         (         sub1.asm):02883                 leax  >TorpTrans,pcr
1473 17FAD3           (         sub1.asm):02884                 lbsr  MenuSelect
1476 F70291           (         sub1.asm):02885                 stb   X0291
1479 7C0297           (         sub1.asm):02886                 inc   X0297
147C 35F6             (         sub1.asm):02887                 puls  a,b,x,y,u,pc
                      (         sub1.asm):02888         
                      (         sub1.asm):02889         
147E                  (         sub1.asm):02890         TorpTrans
147E 02               (         sub1.asm):02891         L147E   fcb   $02            seems to flag number of choices
147F 20205452414E5346 (         sub1.asm):02892                 fcc   "  TRANSFER A TORPEDO"
     4552204120544F52
     5045444F
1493 00               (         sub1.asm):02893                 fcb   C$NULL
1494 312E20466F727761 (         sub1.asm):02894                 fcc   "1. Forward to Aft"
     726420746F204166
     74
14A5 00               (         sub1.asm):02895                 fcb   C$NULL
14A6 322E204166742074 (         sub1.asm):02896                 fcc   "2. Aft to Forward"
     6F20466F72776172
     64
14B7 00               (         sub1.asm):02897                 fcb   C$NULL
                      (         sub1.asm):02898         
                      (         sub1.asm):02899         
14B8                  (         sub1.asm):02900         ByteTblF
14B8 040506070001     (         sub1.asm):02901         L14B8   fcb   $04,$05,$06,$07,$00,$01
14BE 0203             (         sub1.asm):02902                 fcb   $02,$03
                      (         sub1.asm):02903         
                      (         sub1.asm):02904         
14C0                  (         sub1.asm):02905         Convoys
14C0 7375622F636F6E76 (         sub1.asm):02906         L14C0   fcc  "sub/convoys.dat"
     6F79732E646174
14CF 0D               (         sub1.asm):02907                 fcb   C$CR
                      (         sub1.asm):02908         
                      (         sub1.asm):02909         
14D0                  (         sub1.asm):02910         Mis_dat
14D0 7375622F6D697373 (         sub1.asm):02911         L14D0   fcc  "sub/missions.dat"
     696F6E732E646174
14E0 0D               (         sub1.asm):02912                 fcb   C$CR
                      (         sub1.asm):02913         
                      (         sub1.asm):02914         
14E1                  (         sub1.asm):02915         Mis_txt
14E1 7375622F6D697373 (         sub1.asm):02916         L14E1   fcc  "sub/mission.txt"
     696F6E2E747874
14F0 0D               (         sub1.asm):02917                 fcb   C$CR
                      (         sub1.asm):02918         
                      (         sub1.asm):02919         
14F1                  (         sub1.asm):02920         SubStat
14F1 7375622F73756273 (         sub1.asm):02921         L14F1   fcc  "sub/substats.dat"
     746174732E646174
1501 0D               (         sub1.asm):02922                 fcb   C$CR
                      (         sub1.asm):02923         
                      (         sub1.asm):02924         
1502                  (         sub1.asm):02925         Font
1502 7375622F666F6E74 (         sub1.asm):02926         L1502   fcc  "sub/fonts.dat"
     732E646174
150F 0D               (         sub1.asm):02927                 fcb   C$CR
                      (         sub1.asm):02928         
                      (         sub1.asm):02929         
1510                  (         sub1.asm):02930         Shipmap
1510 7375622F73686970 (         sub1.asm):02931         L1510   fcc  "sub/shipmap2.dat"
     6D6170322E646174
1520 0D               (         sub1.asm):02932                 fcb   C$CR
                      (         sub1.asm):02933         
                      (         sub1.asm):02934         
1521                  (         sub1.asm):02935         Invert
1521 7375622F696E7665 (         sub1.asm):02936                 fcc  "sub/invert.pic" had no disasm generated label
     72742E706963
152F 0D               (         sub1.asm):02937                 fcb   C$CR
                      (         sub1.asm):02938         
                      (         sub1.asm):02939         
1530                  (         sub1.asm):02940         Control1
1530 7375622F636F6E74 (         sub1.asm):02941         L1530   fcc  "sub/control1.cmp"
     726F6C312E636D70
1540 0D               (         sub1.asm):02942                 fcb   C$CR
                      (         sub1.asm):02943         
                      (         sub1.asm):02944         
1541                  (         sub1.asm):02945         Germap
1541 7375622F6765726D (         sub1.asm):02946         L1541   fcc  "sub/germap.cmp"
     61702E636D70
154F 0D               (         sub1.asm):02947                 fcb   C$CR
                      (         sub1.asm):02948         
                      (         sub1.asm):02949         
1550                  (         sub1.asm):02950         USAmap
1550 7375622F7573616D (         sub1.asm):02951         L1550   fcc  "sub/usamap.cmp"
     61702E636D70
155E 0D               (         sub1.asm):02952                 fcb   C$CR
                      (         sub1.asm):02953         
                      (         sub1.asm):02954         
155F                  (         sub1.asm):02955         ByteTbl1
155F 184978A8         (         sub1.asm):02956         L155F   fcb   $18,$49,$78,$A8
     0004             (         sub1.asm):02957         Tbl1sz  equ   *-ByteTbl1
                      (         sub1.asm):02958         
1563                  (         sub1.asm):02959         ByteTbl2
1563 61525273734C     (         sub1.asm):02960         L1563   fcb   $61,$52,$52,$73,$73,$4C
1569 5E6A2D203038     (         sub1.asm):02961                 fcb   $5E,$6A,$2D,$20,$30,$38
156F 3C3E3F2F2723     (         sub1.asm):02962                 fcb   $3C,$3E,$3F,$2F,$27,$23
1575 214755737373     (         sub1.asm):02963                 fcb   $21,$47,$55,$73,$73,$73
157B 73730617150B     (         sub1.asm):02964                 fcb   $73,$73,$06,$17,$15,$0B
1581 031D091F0718     (         sub1.asm):02965                 fcb   $03,$1D,$09,$1F,$07,$18
1587 0A1B04050819     (         sub1.asm):02966                 fcb   $0A,$1B,$04,$05,$08,$19
158D 120D0F020E1E     (         sub1.asm):02967                 fcb   $12,$0D,$0F,$02,$0E,$1E
1593 0C161413         (         sub1.asm):02968                 fcb   $0C,$16,$14,$13
                      (         sub1.asm):02969         
                      (         sub1.asm):02970         
1597                  (         sub1.asm):02971         ByteTbl3
1597 0172400045FD     (         sub1.asm):02972         L1597   fcb   $01,$72,$40,$00,$45,$FD
159D E80014007E00     (         sub1.asm):02973                 fcb   $E8,$00,$14,$00,$7E,$00
15A3 00374000FF14     (         sub1.asm):02974                 fcb   $00,$37,$40,$00,$FF,$14
15A9 007500007300     (         sub1.asm):02975                 fcb   $00,$75,$00,$00,$73,$00
15AF 00FF1E007500     (         sub1.asm):02976                 fcb   $00,$FF,$1E,$00,$75,$00
15B5 00730000FF24     (         sub1.asm):02977                 fcb   $00,$73,$00,$00,$FF,$24
15BB 007717B4562F     (         sub1.asm):02978                 fcb   $00,$77,$17,$B4,$56,$2F
15C1 68FF240077F5     (         sub1.asm):02979                 fcb   $68,$FF,$24,$00,$77,$F5
15C7 CB561892FF28     (         sub1.asm):02980                 fcb   $CB,$56,$18,$92,$FF,$28
15CD 005F00005500     (         sub1.asm):02981                 fcb   $00,$5F,$00,$00,$55,$00
15D3 00FF18006000     (         sub1.asm):02982                 fcb   $00,$FF,$18,$00,$60,$00
15D9 00550000FF1E     (         sub1.asm):02983                 fcb   $00,$55,$00,$00,$FF,$1E
                      (         sub1.asm):02984         
                      (         sub1.asm):02985         
15DF                  (         sub1.asm):02986         ByteTbl4
15DF 0000001F003B     (         sub1.asm):02987         L15DF   fcb   $00,$00,$00,$1F,$00,$3B
15E5 005A00780097     (         sub1.asm):02988                 fcb   $00,$5A,$00,$78,$00,$97
15EB 00B500D400F3     (         sub1.asm):02989                 fcb   $00,$B5,$00,$D4,$00,$F3
15F1 01110130014E     (         sub1.asm):02990                 fcb   $01,$11,$01,$30,$01,$4E
15F7 016D             (         sub1.asm):02991                 fcb   $01,$6D
                      (         sub1.asm):02992         
                      (         sub1.asm):02993         
15F9                  (         sub1.asm):02994         Nameless
15F9 4E616D656C657373 (         sub1.asm):02995         L15F9   fcc  "Nameless"
1601 0D               (         sub1.asm):02996                 fcb   C$CR
                      (         sub1.asm):02997         
1602                  (         sub1.asm):02998         SinTbl
1602 7375622F73696E74 (         sub1.asm):02999         L1602   fcc  "sub/sintbl.dat"
     626C2E646174
1610 0D               (         sub1.asm):03000                 fcb   C$CR
                      (         sub1.asm):03001         
1611 9ABAED           (         sub1.asm):03002                 emod 
1614                  (         sub1.asm):03003         eom
     1614             (         sub1.asm):03004         L1614   equ *
                      (         sub1.asm):03005                 end
