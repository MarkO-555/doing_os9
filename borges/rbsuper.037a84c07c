                      (/home/strick/go/s):00001         ********************************************************************
                      (/home/strick/go/s):00002         * rbsuper - RBF Super Caching Device Driver
                      (/home/strick/go/s):00003         *
                      (/home/strick/go/s):00004         * $Id$
                      (/home/strick/go/s):00005         *
                      (/home/strick/go/s):00006         * (C) 2004 Boisy G. Pitre - Licensed to Cloud-9
                      (/home/strick/go/s):00007         *
                      (/home/strick/go/s):00008         * RBSuper is the framework for a new type of RBF device driver -- one
                      (/home/strick/go/s):00009         * that fetches native-size, or PHYSICAL sectors.  A physical sector is
                      (/home/strick/go/s):00010         * a sector that is sized to its device.  For example, all IDE drives and
                      (/home/strick/go/s):00011         * pretty much all SCSI drives have 512 byte sectors; CD-ROMs have 2048
                      (/home/strick/go/s):00012         * byte sectors.
                      (/home/strick/go/s):00013         *
                      (/home/strick/go/s):00014         * As a high-level driver, this module is responsible for managing
                      (/home/strick/go/s):00015         * the cache, verifying writes, etc.
                      (/home/strick/go/s):00016         *
                      (/home/strick/go/s):00017         * The actual reading and writing of sectors is performed by the
                      (/home/strick/go/s):00018         * low-level driver, which can be designed for any device.
                      (/home/strick/go/s):00019         *
                      (/home/strick/go/s):00020         * Conditionals:
                      (/home/strick/go/s):00021         *   H6309 - if set, assembles for 6309
                      (/home/strick/go/s):00022         *   USECS - if set, uses critical section code (slows down driver)
                      (/home/strick/go/s):00023         *   HDBDOS - if set, adds code to handle HDB-DOS partitions
                      (/home/strick/go/s):00024         * And somewhere this flag has been lost GH 2012/11/13
                      (/home/strick/go/s):00025         * Only found when I trashed my systems vdisks
     0001             (/home/strick/go/s):00026         HDBDOS  set 1
                      (/home/strick/go/s):00027         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/home/strick/go/s):00028         * Comment
                      (/home/strick/go/s):00029         * ------------------------------------------------------------------
                      (/home/strick/go/s):00030         *          2004/04/10  Boisy G. Pitre
                      (/home/strick/go/s):00031         * Created due to Mark's constant harping about a NitrOS-9 driver for
                      (/home/strick/go/s):00032         * the SuperIDE Interface.  Here ya go, Marlette.
                      (/home/strick/go/s):00033         *
                      (/home/strick/go/s):00034         *          2005/12/12  Boisy G. Pitre
                      (/home/strick/go/s):00035         * The SS.VarSect call has been moved from the low level driver to rbsuper
                      (/home/strick/go/s):00036         * for efficiency.  Also it no longer calls SS.DSize every time it is called.
                      (/home/strick/go/s):00037         * Instead, it only calls it the first time, then caches the sector size value
                      (/home/strick/go/s):00038         * and returns that value on subsequent calls.
                      (/home/strick/go/s):00039         *
                      (/home/strick/go/s):00040         *          2005/12/13  Boisy G. Pitre
                      (/home/strick/go/s):00041         * Employed a trick to "shift" the idea of where the driver's static
                      (/home/strick/go/s):00042         * data starts at the start of each entry point.  This saves about 200
                      (/home/strick/go/s):00043         * bytes of memory.
                      (/home/strick/go/s):00044         *
                      (/home/strick/go/s):00045         * 1        2006/08/20  Boisy G. Pitre
                      (/home/strick/go/s):00046         * Fixed bug where linking to a non-existent module in Init would cause a crash
                      (/home/strick/go/s):00047         * because IOMan calls the Term routine when Init returns an error.  Added a simple
                      (/home/strick/go/s):00048         * one line test in Term to see if a value was non-zero which would indicate if Init
                      (/home/strick/go/s):00049         *
                      (/home/strick/go/s):00050         * 2        2008/02/05  Boisy G. Pitre
                      (/home/strick/go/s):00051         * Fixed bug where DNS HDB flag was being pulled from PD.TYP byte instead of PD.DNS.
                      (/home/strick/go/s):00052         *
                      (/home/strick/go/s):00053         * 3        2011/12/22  Boisy G. Pitre
                      (/home/strick/go/s):00054         * Made a "fast path" for 256 byte sector devices to read/write directly into PD.BUF
                      (/home/strick/go/s):00055         * instead of using the cache, for performance reasons.
                      (/home/strick/go/s):00056         * Conditionalized critical section code since it may not be needed, and affects performance.
                      (/home/strick/go/s):00057         
                      (/home/strick/go/s):00058                        NAM       rbsuper             
                      (/home/strick/go/s):00059                        TTL       RBF Super Caching Device Driver
                      (/home/strick/go/s):00060         
                      (/home/strick/go/s):00061                        IFP1      
                      (/home/strick/go/s):00062                        USE       defsfile
                      (         defsfile):00001                  use   ../defsfile
     0002             (      ../defsfile):00001         Level    equ   2
                      (      ../defsfile):00002         
                      (      ../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (            os9.d):00637         * and for bytes in the system memory map at D.SysMem.
                      (            os9.d):00638         * A value of 0 indicates an unused/unassigned block.
                      (            os9.d):00639         * In the code, block assignment often involves incrementing a value
                      (            os9.d):00640         * from 0 to 1 rather than explict use of RAMinUse.
                      (            os9.d):00641         *
     0080             (            os9.d):00642         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00643         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00644         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00645         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00646         *
                      (            os9.d):00647         * Service Dispatch Table special entries
                      (            os9.d):00648         *
     00FE             (            os9.d):00649         IOEntry        EQU       254
                      (            os9.d):00650         
                      (            os9.d):00651                        ENDC      
                      (            os9.d):00652         
                      (            os9.d):00653                        TTL       Structure Formats
                      (            os9.d):00654                        PAG       
                      (            os9.d):00655         ************************************
                      (            os9.d):00656         * Module Directory Entry Definitions
                      (            os9.d):00657         *
                      (            os9.d):00658                        ORG       0
                      (            os9.d):00659                        IFGT      Level-1
0000                  (            os9.d):00660         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00661         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00662                        ENDC      
0004                  (            os9.d):00663         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00664         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00665         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00666         
                      (            os9.d):00667         ************************************
                      (            os9.d):00668         * Module Definitions
                      (            os9.d):00669         *
                      (            os9.d):00670         * Universal Module Offsets
                      (            os9.d):00671         *
                      (            os9.d):00672                        ORG       0
0000                  (            os9.d):00673         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00674         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00675         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00676         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00677         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00678         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00679         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00680         *
                      (            os9.d):00681         * Type-Dependent Module Offsets
                      (            os9.d):00682         *
                      (            os9.d):00683         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00684         *
0009                  (            os9.d):00685         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Program Module
                      (            os9.d):00688         *
000B                  (            os9.d):00689         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Driver, Device Descriptor Module
                      (            os9.d):00692         *
000D                  (            os9.d):00693         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00694         *
                      (            os9.d):00695         * Device Descriptor Module
                      (            os9.d):00696         *
                      (            os9.d):00697                        ORG       M$IDSize
0009                  (            os9.d):00698         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00699         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00700                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00701         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00702         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00703         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00704         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00705         *
                      (            os9.d):00706         * Configuration Module Entry Offsets
                      (            os9.d):00707         *
                      (            os9.d):00708                        ORG       M$IDSize
0009                  (            os9.d):00709         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00710         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00711         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00712         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00713         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00714         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00715         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00716         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00717         
0017                  (            os9.d):00718         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00719         OSVer          RMB       1                   OS version
0019                  (            os9.d):00720         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00721         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00722         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00723         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00724         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00725         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00726                        RMB       4                   reserved for future use
                      (            os9.d):00727         
                      (            os9.d):00728                        IFGT      Level-1
                      (            os9.d):00729         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00730         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00731         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00732         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00733         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00734                        ENDC      
                      (            os9.d):00735         
                      (            os9.d):00736         * Feature1 byte definitions
     0001             (            os9.d):00737         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00738         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00739         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00740         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00741         
                      (            os9.d):00742                        PAG       
                      (            os9.d):00743         **************************
                      (            os9.d):00744         * Module Field Definitions
                      (            os9.d):00745         *
                      (            os9.d):00746         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00747         *
     0087             (            os9.d):00748         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00749         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00750         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00751         
                      (            os9.d):00752         *
                      (            os9.d):00753         * Module Type/Language Field Masks
                      (            os9.d):00754         *
     00F0             (            os9.d):00755         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00756         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00757         
                      (            os9.d):00758         *
                      (            os9.d):00759         * Module Type Values
                      (            os9.d):00760         *
     00F0             (            os9.d):00761         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00762         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00763         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00764         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00765         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00766         Data           EQU       $40                 Data Module
     0030             (            os9.d):00767         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00768         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00769         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00770         
                      (            os9.d):00771         *
                      (            os9.d):00772         * Module Language Values
                      (            os9.d):00773         *
     0001             (            os9.d):00774         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00775         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00776         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00777         CCode          EQU       4                   C I-code
     0005             (            os9.d):00778         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00779         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00780         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00781         *
                      (            os9.d):00782         * Module Attributes / Revision byte
                      (            os9.d):00783         *
                      (            os9.d):00784         * Field Masks
                      (            os9.d):00785         *
     00F0             (            os9.d):00786         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00787         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00788         *
                      (            os9.d):00789         * Attribute Flags
                      (            os9.d):00790         *
     0080             (            os9.d):00791         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00792         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00793         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00794         
                      (            os9.d):00795         ********************
                      (            os9.d):00796         * Device Type Values
                      (            os9.d):00797         *
                      (            os9.d):00798         * These values define various classes of devices, which are
                      (            os9.d):00799         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00800         * in a device's device descriptor.
                      (            os9.d):00801         *
     0000             (            os9.d):00802         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00803         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00804         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00805         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00806         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00807         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00808         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00809         
                      (            os9.d):00810         *********************
                      (            os9.d):00811         * CRC Result Constant
                      (            os9.d):00812         *
     0080             (            os9.d):00813         CRCCon1        EQU       $80
     0FE3             (            os9.d):00814         CRCCon23       EQU       $0FE3
                      (            os9.d):00815         
                      (            os9.d):00816                        TTL       Process Information
                      (            os9.d):00817                        PAG       
                      (            os9.d):00818         ********************************
                      (            os9.d):00819         * Process Descriptor Definitions
                      (            os9.d):00820         *
                      (            os9.d):00821                        IFEQ      Level-1
                      (            os9.d):00822         
                      (            os9.d):00823         * Level 1 process descriptor defs
002A                  (            os9.d):00824         DefIOSiz       EQU       12
002A                  (            os9.d):00825         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00826         
                      (            os9.d):00827                        ORG       0
002A                  (            os9.d):00828         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00829         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00830         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00831         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00832         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00833         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00834         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00835         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00836         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00837         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00838         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00839         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00840         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00841         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00842         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00843         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00844         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00845         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00846         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00847         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00848         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00849         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00850         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00851         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00852         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00853                        RMB       $40-.               unused
002A                  (            os9.d):00854         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00855         
                      (            os9.d):00856         *
                      (            os9.d):00857         * Process State Flags
                      (            os9.d):00858         *
002A                  (            os9.d):00859         SysState       EQU       %10000000
002A                  (            os9.d):00860         TimSleep       EQU       %01000000
002A                  (            os9.d):00861         TimOut         EQU       %00100000
002A                  (            os9.d):00862         ImgChg         EQU       %00010000
002A                  (            os9.d):00863         Condem         EQU       %00000010
002A                  (            os9.d):00864         Dead           EQU       %00000001
                      (            os9.d):00865         
                      (            os9.d):00866                        ELSE      
                      (            os9.d):00867         
                      (            os9.d):00868         * Level 2 process descriptor defs
     0010             (            os9.d):00869         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00870         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00871         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00872         
                      (            os9.d):00873                        ORG       0
0000                  (            os9.d):00874         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00875         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00876         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00877         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00878         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00879         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00880         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00881         P$User         RMB       2                   User Index
000A                  (            os9.d):00882         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00883         P$Age          RMB       1                   Age
000C                  (            os9.d):00884         P$State        RMB       1                   Status
000D                  (            os9.d):00885         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00886         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00887         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00888         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00889         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00890         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00891         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00892         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00893         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00894         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00895         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00896                        RMB       $20-.               unused
0020                  (            os9.d):00897         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00898         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00899         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00900         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00901         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00902         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00903         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00904         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00905         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00906         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00907         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00908         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00909         P$Alarm        RMB       6
00C9                  (            os9.d):00910                        RMB       $200-.              Local stack
     0200             (            os9.d):00911         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00912         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00913         
                      (            os9.d):00914         *
                      (            os9.d):00915         * Process State Flags
                      (            os9.d):00916         *
     0080             (            os9.d):00917         SysState       EQU       %10000000
     0040             (            os9.d):00918         TimSleep       EQU       %01000000
     0020             (            os9.d):00919         TimOut         EQU       %00100000
     0010             (            os9.d):00920         ImgChg         EQU       %00010000
     0008             (            os9.d):00921         Suspend        EQU       %00001000
     0002             (            os9.d):00922         Condem         EQU       %00000010
     0001             (            os9.d):00923         Dead           EQU       %00000001
                      (            os9.d):00924         
                      (            os9.d):00925                        ENDC      
                      (            os9.d):00926         
                      (            os9.d):00927                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00928                        PAG       
                      (            os9.d):00929         *************************
                      (            os9.d):00930         * Path Descriptor Offsets
                      (            os9.d):00931         *
                      (            os9.d):00932                        ORG       0
0000                  (            os9.d):00933         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00934         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00935         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00936         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00937         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00938         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00939         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00940         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00941         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00942         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00943                        RMB       64-.                Path options
     0040             (            os9.d):00944         PDSIZE         EQU       .
                      (            os9.d):00945         
                      (            os9.d):00946         *
                      (            os9.d):00947         * Pathlist Special Symbols
                      (            os9.d):00948         *
     002F             (            os9.d):00949         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00950         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00951         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00952         
                      (            os9.d):00953                        PAG       
                      (            os9.d):00954         ****************************
                      (            os9.d):00955         * File Manager Entry Offsets
                      (            os9.d):00956         *
                      (            os9.d):00957                        ORG       0
0000                  (            os9.d):00958         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00959         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00960         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00961         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00962         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00963         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00964         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00965         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00966         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00967         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00968         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00969         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00970         FMCLOS         RMB       3                   Close File
                      (            os9.d):00971         
                      (            os9.d):00972         *****************************
                      (            os9.d):00973         * Device Driver Entry Offsets
                      (            os9.d):00974         *
                      (            os9.d):00975                        ORG       0
0000                  (            os9.d):00976         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00977         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00978         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00979         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00980         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00981         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00982         
                      (            os9.d):00983         *********************
                      (            os9.d):00984         * Device Table Format
                      (            os9.d):00985         *
                      (            os9.d):00986                        ORG       0
0000                  (            os9.d):00987         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00988         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00989         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00990         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00991         V$USRS         RMB       1                   use count
                      (            os9.d):00992                        IFGT      Level-1
0009                  (            os9.d):00993         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00994         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00995                        ENDC      
     000D             (            os9.d):00996         DEVSIZ         EQU       .
                      (            os9.d):00997         
                      (            os9.d):00998         *******************************
                      (            os9.d):00999         * Device Static Storage Offsets
                      (            os9.d):01000         *
                      (            os9.d):01001                        ORG       0
0000                  (            os9.d):01002         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):01003         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01004         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01005         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01006         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01007         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01008         
                      (            os9.d):01009         ********************************
                      (            os9.d):01010         * Interrupt Polling Table Format
                      (            os9.d):01011         *
                      (            os9.d):01012                        ORG       0
0000                  (            os9.d):01013         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01014         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01015         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01016         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01017         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01018         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01019                        IFGT      Level-1
0009                  (            os9.d):01020         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01021                        ENDC      
     000B             (            os9.d):01022         POLSIZ         EQU       .
                      (            os9.d):01023         
                      (            os9.d):01024         ********************
                      (            os9.d):01025         * VIRQ packet format
                      (            os9.d):01026         *
                      (            os9.d):01027                        ORG       0
0000                  (            os9.d):01028         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01029         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01030         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01031         Vi.PkSz        EQU       .
                      (            os9.d):01032         
     0001             (            os9.d):01033         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01034         
                      (            os9.d):01035                        PAG       
                      (            os9.d):01036         *************************************
                      (            os9.d):01037         * Machine Characteristics Definitions
                      (            os9.d):01038         *
     0000             (            os9.d):01039         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01040         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01041         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01042         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01043                        IFNE      H6309
0005                  (            os9.d):01044         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01045         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01046         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01047         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01048         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01049         R$X            EQU       6                   X Index register
0005                  (            os9.d):01050         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01051         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01052         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01053         R$Size         EQU       14                  Total register package size
                      (            os9.d):01054                        ELSE      
     0003             (            os9.d):01055         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01056         R$X            EQU       4                   X Index register
     0006             (            os9.d):01057         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01058         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01059         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01060         R$Size         EQU       12                  Total register package size
                      (            os9.d):01061                        ENDC      
                      (            os9.d):01062         
                      (            os9.d):01063         * MD register masks
                      (            os9.d):01064         * 6309 definitions
     0080             (            os9.d):01065         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01066         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01067         
     0080             (            os9.d):01068         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01069         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01070         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01071         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01072         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01073         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01074         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01075         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01076         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01077         Sign           EQU       %10000000           sign bit
                      (            os9.d):01078         
                      (            os9.d):01079                        TTL       Error Code Definitions
                      (            os9.d):01080                        PAG       
                      (            os9.d):01081         ************************
                      (            os9.d):01082         * Error Code Definitions
                      (            os9.d):01083         *
                      (            os9.d):01084         * Basic09 Error Codes
                      (            os9.d):01085         *
                      (            os9.d):01086                        ORG       10
000A                  (            os9.d):01087         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01088         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01089         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01090         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01091         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01092         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01093         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01094         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01095         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01096         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01097         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01098         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01099         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01100         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01101         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01102         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01103         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01104         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01105         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01106         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01107         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01108         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01109         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01110         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01111         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01112         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01113         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01114         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01115         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01116         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01117         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01118         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01119         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01120         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01121         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01122         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01123         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01124         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01125         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01126         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01127         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01128         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01129         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01130         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01131         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01132         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01133         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01134         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01135         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01136         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01137         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01138         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01139         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01140         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01141         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01142         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01143         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01144         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01145         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01146         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01147         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01148         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01149         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01150         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01151         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01152         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01153         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01154         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01155         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01156         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01157         
                      (            os9.d):01158         *
                      (            os9.d):01159         * System Dependent Error Codes
                      (            os9.d):01160         *
                      (            os9.d):01161         
                      (            os9.d):01162         * Level 2 windowing error codes
                      (            os9.d):01163                        ORG       183
00B7                  (            os9.d):01164         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01165         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01166         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01167         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01168         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01169                        RMB       1                   reserved
00BD                  (            os9.d):01170         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01171         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01172         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01173         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01174         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01175         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01176         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01177         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01178         
00C5                  (            os9.d):01179         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01180         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01181         E$Alias        RMB       1
                      (            os9.d):01182         
                      (            os9.d):01183         
                      (            os9.d):01184         *
                      (            os9.d):01185         * Standard NitrOS-9 Error Codes
                      (            os9.d):01186         *
                      (            os9.d):01187                        ORG       200
00C8                  (            os9.d):01188         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01189         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01190         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01191         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01192         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01193         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01194         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01195         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01196         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01197         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01198         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01199         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01200                        RMB       1
00D5                  (            os9.d):01201         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01202         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01203         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01204         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01205         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01206         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01207         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01208         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01209         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01210                        RMB       1
00DF                  (            os9.d):01211         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01212         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01213         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01214                        RMB       1
00E2                  (            os9.d):01215         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01216         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01217         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01218         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01219         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01220         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01221         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01222         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01223         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01224         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01225         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01226         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01227         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01228         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01229                        RMB       $F0-.               reserved
00F0                  (            os9.d):01230         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01231         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01232         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01233         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01234         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01235         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01236         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01237         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01238         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01239         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01240         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01241         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01242         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01243         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01244         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01245         
                      (            os9.d):01246         
                      (            os9.d):01247                        IFGT      Level-2
                      (            os9.d):01248         ***************************
                      (            os9.d):01249         * Level 3 Defs
                      (            os9.d):01250         *
                      (            os9.d):01251         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01252         *
00FF                  (            os9.d):01253         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01254         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01255         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01256         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01257         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01258         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01259                        ENDC      
                      (            os9.d):01260         
                      (            os9.d):01261                        ENDC      
                      (      ../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
     00E0             (            scf.d):00222         PARMASK        EQU       %11100000
                      (            scf.d):00223         
                      (            scf.d):00224         * PD.BAU definitions
                      (            scf.d):00225         *
                      (            scf.d):00226         * Baud rate
     0000             (            scf.d):00227         B110           EQU       %00000000
     0001             (            scf.d):00228         B300           EQU       %00000001
     0002             (            scf.d):00229         B600           EQU       %00000010
     0003             (            scf.d):00230         B1200          EQU       %00000011
     0004             (            scf.d):00231         B2400          EQU       %00000100
     0005             (            scf.d):00232         B4800          EQU       %00000101
     0006             (            scf.d):00233         B9600          EQU       %00000110
     0007             (            scf.d):00234         B19200         EQU       %00000111
     0008             (            scf.d):00235         B38400         EQU       %00001000
     0009             (            scf.d):00236         B57600         EQU       %00001001
     000A             (            scf.d):00237         B115200        EQU       %00001010
                      (            scf.d):00238         * Word size
     0000             (            scf.d):00239         WORD8          EQU       %00000000
     0020             (            scf.d):00240         WORD7          EQU       %00100000
                      (            scf.d):00241         * Stop bits
     0000             (            scf.d):00242         STOP1          EQU       %00000000
     0010             (            scf.d):00243         STOP2          EQU       %00010000
                      (            scf.d):00244         
                      (            scf.d):00245                        ENDC      
                      (      ../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (      ../defsfile):00006                  use   coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         ********************************
                      (           coco.d):00148         * Boot defs for NitrOS-9 Level 1
                      (           coco.d):00149         *
                      (           coco.d):00150         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00151         * system.
                      (           coco.d):00152         *
0004                  (           coco.d):00153         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE
                      (           coco.d):00156         
                      (           coco.d):00157         ******************************************
                      (           coco.d):00158         * Boot defs for NitrOS-9 Level 2 and above
                      (           coco.d):00159         *
                      (           coco.d):00160         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00161         * system.
                      (           coco.d):00162         *
     ED00             (           coco.d):00163         Bt.Start       SET       $ED00               Start address of the boot track in memory
     003B             (           coco.d):00164         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (           coco.d):00165         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (           coco.d):00166         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
                      (           coco.d):00167         
                      (           coco.d):00168                        ENDC
                      (           coco.d):00169         
                      (           coco.d):00170         * On the CoCo, the boot track is all of track 34
                      (           coco.d):00171         
     0022             (           coco.d):00172         Bt.Track       EQU       34                  Boot track
     0000             (           coco.d):00173         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (           coco.d):00174         
                      (           coco.d):00175         
     1080             (           coco.d):00176         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (           coco.d):00177         
                      (           coco.d):00178         
                      (           coco.d):00179                        IFEQ      Level-1
                      (           coco.d):00180         
                      (           coco.d):00181         *************************************************
                      (           coco.d):00182         *
                      (           coco.d):00183         * NitrOS-9 Level 1 Section
                      (           coco.d):00184         *
                      (           coco.d):00185         *************************************************
                      (           coco.d):00186         
0004                  (           coco.d):00187         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00188         
                      (           coco.d):00189                        ELSE      
                      (           coco.d):00190         
                      (           coco.d):00191         *************************************************
                      (           coco.d):00192         *
                      (           coco.d):00193         * NitrOS-9 Level 2 Section
                      (           coco.d):00194         *
                      (           coco.d):00195         *************************************************
                      (           coco.d):00196         
                      (           coco.d):00197         ****************************************
                      (           coco.d):00198         * Dynamic Address Translator Definitions
                      (           coco.d):00199         *
     0008             (           coco.d):00200         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00201         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00202         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00203         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00204         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00205         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00206         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00207         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00208         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00209         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00210         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00211         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00212         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00213         IOBlock        EQU       $3F
     003F             (           coco.d):00214         ROMBlock       EQU       $3F
     007F             (           coco.d):00215         IOAddr         EQU       $7F
     0001             (           coco.d):00216         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00217         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00218         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00219         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00220         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00221         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00222         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00223         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00224         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00225         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00226         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00227         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00228         
                      (           coco.d):00229         ***************************
                      (           coco.d):00230         * Color Computer 3 Specific
                      (           coco.d):00231         *
     0001             (           coco.d):00232         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00233         
                      (           coco.d):00234         ********************
                      (           coco.d):00235         * Hardware addresses
                      (           coco.d):00236         *
     FF00             (           coco.d):00237         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00238         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00239         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00240         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00241         
     0007             (           coco.d):00242         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00243         
                      (           coco.d):00244         * KrnBlk defines the block number of the 8K RAM block that is mapped to
                      (           coco.d):00245         * the top of CPU address space ($E000-$FFFF) for the system process, and
                      (           coco.d):00246         * which holds the Kernel. The top 2 pages of this CPU address space ($FFE0-
                      (           coco.d):00247         * $FFFF) has two special properties. Firstly, it contains the I/O space.
                      (           coco.d):00248         * Secondly, the parts that contain RAM map are not affected by the DAT
                      (           coco.d):00249         * mappings but, instead, *always* map that RAM to a fixed RAM block
                      (           coco.d):00250         * (KrnBlk). When a user process is mapped in, and requests enough memory,
                      (           coco.d):00251         * it will end up with its own block assigned for CPU address space $E000-
                      (           coco.d):00252         * $FFFF but the top of the address space is unusable by the user process:
                      (           coco.d):00253         * it still contains the I/O and the bit of RAM that's mapped to KrnBlk.
                      (           coco.d):00254         * Usually, the value of KrnBlk is fixed for a particular hardware design;
                      (           coco.d):00255         * For the COCO GIME, it's always $3F.
     003F             (           coco.d):00256         KrnBlk         SET       $3F
                      (           coco.d):00257         
                      (           coco.d):00258                        ENDC
                      (           coco.d):00259                        ENDC
                      (           coco.d):00260         
                      (/home/strick/go/s):00063                        USE       rbsuper.d
                      (        rbsuper.d):00001                     IFNE      RBSUPER.D-1
     0001             (        rbsuper.d):00002         RBSUPER.D   SET       1
                      (        rbsuper.d):00003         
                      (        rbsuper.d):00004         ********************************************************************
                      (        rbsuper.d):00005         * rbsuper.d - rbsuper definitions
                      (        rbsuper.d):00006         *
                      (        rbsuper.d):00007         * $Id$
                      (        rbsuper.d):00008         *
                      (        rbsuper.d):00009         * (C) 2004 Boisy G. Pitre - Licensed to Cloud-9
                      (        rbsuper.d):00010         *
                      (        rbsuper.d):00011         * These definitions make up the static storage environment for the
                      (        rbsuper.d):00012         * rbsuper driver.  Low level drivers share these variables with
                      (        rbsuper.d):00013         * rbsuper, and also have an area reserved exclusively for their use.
                      (        rbsuper.d):00014         *
                      (        rbsuper.d):00015         * Edt/Rev  YYYY/MM/DD  Modified by
                      (        rbsuper.d):00016         * Comment
                      (        rbsuper.d):00017         * ------------------------------------------------------------------
                      (        rbsuper.d):00018         *          2004/04/10  Boisy G. Pitre
                      (        rbsuper.d):00019         * Created.
                      (        rbsuper.d):00020         *
                      (        rbsuper.d):00021         *          2005/11/27  Boisy G. Pitre
                      (        rbsuper.d):00022         * Moved SCSI base addresses and I/O offsets to here.
                      (        rbsuper.d):00023         *
                      (        rbsuper.d):00024         *          2005/12/13  Boisy G. Pitre
                      (        rbsuper.d):00025         * Employed a "trick" whereby driver's U is pointed UOFFSET bytes
                      (        rbsuper.d):00026         * into the static storage for faster, smaller code generation.
                      (        rbsuper.d):00027         *
                      (        rbsuper.d):00028         *          2005/12/13  Boisy G. Pitre
                      (        rbsuper.d):00029         * Rearranged order of driver statics for smaller code size
                      (        rbsuper.d):00030         
                      (        rbsuper.d):00031         * Interface Address
     FF00             (        rbsuper.d):00032         SDAddr         SET       $FF00
     00FF             (        rbsuper.d):00033         SDMPI          SET       $FF
                      (        rbsuper.d):00034         
                      (        rbsuper.d):00035         *
                      (        rbsuper.d):00036         * IT.DNS Definitions for all Low Level Drivers
                      (        rbsuper.d):00037         *
     0008             (        rbsuper.d):00038         DNS.HDB        EQU       %00001000
                      (        rbsuper.d):00039         
                      (        rbsuper.d):00040         *
                      (        rbsuper.d):00041         * IT.DNS Definitions for Low Level SCSI Driver
                      (        rbsuper.d):00042         *
     0010             (        rbsuper.d):00043         DNS.TURBO      EQU       %00010000
                      (        rbsuper.d):00044         
     0800             (        rbsuper.d):00045         maxcache       SET       2048
     0008             (        rbsuper.d):00046         DrvCount       EQU       8
     0040             (        rbsuper.d):00047         llreserve      EQU       64
                      (        rbsuper.d):00048         
     013F             (        rbsuper.d):00049         UOFFSET        EQU       DRVBEG+(DRVMEM*DrvCount)
                      (        rbsuper.d):00050         
                      (        rbsuper.d):00051                        ORG       0
0000                  (        rbsuper.d):00052         V.LLSema       RMB       1                   low-level semaphore variable
0001                  (        rbsuper.d):00053         V.LastDrv      RMB       1                   last drive to access cache
0002                  (        rbsuper.d):00054         V.PhysSect     RMB       3                   physical (HW) sector
0005                  (        rbsuper.d):00055         V.LogSect      RMB       3                   logical (256 byte) sector
0008                  (        rbsuper.d):00056         V.SectSize     RMB       1                   sector size
0009                  (        rbsuper.d):00057         V.SectCnt      RMB       1                   number of hw sectors to read from interface
000A                  (        rbsuper.d):00058         V.Log2Phys     RMB       1                   number of logical (256) byte sectors to 1 physical sector
000B                  (        rbsuper.d):00059         V.CchAddr      RMB       2                   address of cache in system memory
000D                  (        rbsuper.d):00060         V.CchSize      RMB       2                   size of cache in bytes
000F                  (        rbsuper.d):00061         V.CchPSpot     RMB       2                   pointer to target physical sector in cache
0011                  (        rbsuper.d):00062         V.CchLSpot     RMB       2                   pointer to target logical sector in cache
0013                  (        rbsuper.d):00063         V.CchDirty     RMB       1                   cache dirty flag (0 = cache is stable, !0 = cache is dirty)
0014                  (        rbsuper.d):00064         V.CchBase      RMB       3                   logical sector at start of cache
0017                  (        rbsuper.d):00065         V.HDBDrive     RMB       1                   IT.STP (used as HDB-DOS drive number if HDB-DOS partition)
0018                  (        rbsuper.d):00066         V.HDBPart      RMB       1                   HDB-DOS partition flag (0 = not HDB-DOS partition, !0 = is)
0019                  (        rbsuper.d):00067         V.SSCache      RMB       DrvCount            sector size cache table for each drive
0021                  (        rbsuper.d):00068         V.LLAddr       RMB       2                   low level module address
0023                  (        rbsuper.d):00069         V.LLInit       RMB       2                   low level init entry point
0025                  (        rbsuper.d):00070         V.LLRead       RMB       2                   low level read entry point
0027                  (        rbsuper.d):00071         V.LLWrite      RMB       2                   low level write entry point
0029                  (        rbsuper.d):00072         V.LLGtSt       RMB       2                   low level getstat entry point
002B                  (        rbsuper.d):00073         V.LLStSt       RMB       2                   low level setstat entry point
002D                  (        rbsuper.d):00074         V.LLTerm       RMB       2                   low level term entry point
                      (        rbsuper.d):00075         * Low Level Driver Memory starts here
     002F             (        rbsuper.d):00076         V.LLMem        EQU       .                   start of low level driver memory
002F                  (        rbsuper.d):00077                        RMB       llreserve           reserved area... low level driver uses this as it wants
     0040             (        rbsuper.d):00078         V.LLMemSz      EQU       .-V.LLMem
                      (        rbsuper.d):00079         * Note: we trick rbsuper too so that it thinks its static storage starts at
                      (        rbsuper.d):00080         * zero when it really starts beyond DRVBEG+(DRVMEM*DrvCount).
006F                  (        rbsuper.d):00081                        RMB       UOFFSET
     01AE             (        rbsuper.d):00082         V.RBSuper      EQU       .                   end of RBSuper's (and ll driver's) memory requirements
                      (        rbsuper.d):00083         
                      (        rbsuper.d):00084                        ENDC
                      (        rbsuper.d):00085         
                      (/home/strick/go/s):00064                        ENDC      
                      (/home/strick/go/s):00065         
     00E1             (/home/strick/go/s):00066         tylg           SET       Drivr+Objct
     0080             (/home/strick/go/s):00067         atrv           SET       ReEnt+rev
     0000             (/home/strick/go/s):00068         rev            SET       0
     0002             (/home/strick/go/s):00069         edition        SET       2
                      (/home/strick/go/s):00070         
0000 87CD037A000EE180 (/home/strick/go/s):00071                        MOD       eom,name,tylg,atrv,start,V.RBSuper
     A3001601AE
                      (/home/strick/go/s):00072         
000D FF               (/home/strick/go/s):00073                        FCB       DIR.+SHARE.+PEXEC.+PREAD.+PWRIT.+EXEC.+UPDAT.
                      (/home/strick/go/s):00074         
000E 524253757065F2   (/home/strick/go/s):00075         name           FCS       /RBSuper/
0015 02               (/home/strick/go/s):00076                        FCB       edition
                      (/home/strick/go/s):00077         
0016 1602E0           (/home/strick/go/s):00078         start          lbra      Init
0019 2032             (/home/strick/go/s):00079                        bra       Read
001B 12               (/home/strick/go/s):00080                        nop       
001C 16022D           (/home/strick/go/s):00081                        lbra      Write
001F 1601DD           (/home/strick/go/s):00082                        lbra      GetStat
0022 160194           (/home/strick/go/s):00083                        lbra      SetStat
                      (/home/strick/go/s):00084         
                      (/home/strick/go/s):00085         *
                      (/home/strick/go/s):00086         * Term
                      (/home/strick/go/s):00087         *
                      (/home/strick/go/s):00088         * Entry:
                      (/home/strick/go/s):00089         *    U  = address of device memory area
                      (/home/strick/go/s):00090         * 
                      (/home/strick/go/s):00091         * Exit:
                      (/home/strick/go/s):00092         *    CC = carry set on error
                      (/home/strick/go/s):00093         *    B  = error code
                      (/home/strick/go/s):00094         * 
0025 33C9013F         (/home/strick/go/s):00095         Term           leau      UOFFSET,u
                      (/home/strick/go/s):00096         * Free memory allocated for cache
0029 A64D             (/home/strick/go/s):00097                        lda       V.CchSize,u         get cache size into A
                      (/home/strick/go/s):00098         * Note, the next line fixes a bug where the system would crash when F$Link in Init failed.
                      (/home/strick/go/s):00099         * If it fails, V.CchSize will never get set, and since it is set to 0 initally, we assume
                      (/home/strick/go/s):00100         * that init failed if V.CchSize is 0 and thus we simply return.
002B 271F             (/home/strick/go/s):00101                        beq       ret@
002D 1F31             (/home/strick/go/s):00102                        tfr       u,x                 move statics ptr into X for safety
002F EE4B             (/home/strick/go/s):00103                        ldu       V.CchAddr,u         and load U with cache address
0031 2703             (/home/strick/go/s):00104                        beq       nofree@
0033 103F29           (/home/strick/go/s):00105                        os9       F$SRtMem            return cache memory to system
0036 1F13             (/home/strick/go/s):00106         nofree@        tfr       x,u                 and restore statics ptr
                      (/home/strick/go/s):00107         * Call low-level driver term
0038 AEC82D           (/home/strick/go/s):00108                        ldx       V.LLTerm,u
003B 1701D0           (/home/strick/go/s):00109                        lbsr      LLCall
                      (/home/strick/go/s):00110         * Unlink low-level driver
                      (/home/strick/go/s):00111                        IFGT      Level-1
003E 9E50             (/home/strick/go/s):00112                        ldx       D.Proc              get curr proc ptr
0040 DC4A             (/home/strick/go/s):00113                        ldd       D.SysPrc            get system process desc ptr
0042 DD50             (/home/strick/go/s):00114                        std       D.Proc              and make current proc
                      (/home/strick/go/s):00115                        ENDC      
0044 EEC821           (/home/strick/go/s):00116                        ldu       V.LLAddr,u          get the address of the low-level module
0047 103F02           (/home/strick/go/s):00117                        os9       F$Unlink            unlink it
                      (/home/strick/go/s):00118                        IFGT      Level-1
004A 9F50             (/home/strick/go/s):00119                        stx       D.Proc              restore
                      (/home/strick/go/s):00120                        ENDC      
004C 39               (/home/strick/go/s):00121         ret@           rts                           return
                      (/home/strick/go/s):00122         
                      (/home/strick/go/s):00123         *
                      (/home/strick/go/s):00124         * Read
                      (/home/strick/go/s):00125         *
                      (/home/strick/go/s):00126         * Entry:
                      (/home/strick/go/s):00127         *    B  = MSB of the disk's LSN
                      (/home/strick/go/s):00128         *    X  = LSB of the disk's LSN
                      (/home/strick/go/s):00129         *    Y  = address of path descriptor
                      (/home/strick/go/s):00130         *    U  = address of device memory area
                      (/home/strick/go/s):00131         *
                      (/home/strick/go/s):00132         * Exit:
                      (/home/strick/go/s):00133         *    CC = carry set on error
                      (/home/strick/go/s):00134         *    B  = error code
                      (/home/strick/go/s):00135         *
004D 33C9013F         (/home/strick/go/s):00136         Read           leau      UOFFSET,u
0051 8C0000           (/home/strick/go/s):00137                        cmpx      #$0000              LSN 0?
0054 2663             (/home/strick/go/s):00138                        bne       ReadSect            branch if not
0056 5D               (/home/strick/go/s):00139                        tstb                          LSN 0?
0057 2660             (/home/strick/go/s):00140                        bne       ReadSect            branch if not
0059 8D5E             (/home/strick/go/s):00141                        bsr       ReadSect            else read LSN0
005B 254A             (/home/strick/go/s):00142                        bcs       bye                 if error, return
                      (/home/strick/go/s):00143         * Code to deal with copying LSN0
005D 30C9FED0         (/home/strick/go/s):00144                        leax      DRVBEG-UOFFSET,u    point X to start of drive table
0061 E6A821           (/home/strick/go/s):00145                        ldb       PD.DRV,y            get drive number
0064 2706             (/home/strick/go/s):00146         lsn@           beq       CopyLSN0            branch if zero
0066 308826           (/home/strick/go/s):00147                        leax      DRVMEM,x            else increase X by drive table size
0069 5A               (/home/strick/go/s):00148                        decb                          decrement drive number
006A 20F8             (/home/strick/go/s):00149                        bra       lsn@                branch to loop
                      (/home/strick/go/s):00150         
                      (/home/strick/go/s):00151         * X = drive table pointer for PD.DRV
                      (/home/strick/go/s):00152         * Copy DD.SIZ bytes (LSN0) from buffer to drive table
     006C             (/home/strick/go/s):00153         CopyLSN0       EQU       *
006C EE28             (/home/strick/go/s):00154                        ldu       PD.BUF,y
                      (/home/strick/go/s):00155                        IFNE      H6309
                      (/home/strick/go/s):00156                        ldw       #DD.SIZ
                      (/home/strick/go/s):00157                        tfm       u+,x+
                      (/home/strick/go/s):00158                        ELSE      
006E C615             (/home/strick/go/s):00159                        ldb       #DD.SIZ
0070 3702             (/home/strick/go/s):00160         CpyLSNLp       pulu      a                   one cycle less than lda ,u+
0072 A780             (/home/strick/go/s):00161                        sta       ,x+
0074 5A               (/home/strick/go/s):00162                        decb      
0075 26F9             (/home/strick/go/s):00163                        bne       CpyLSNLp
                      (/home/strick/go/s):00164                        ENDC      
0077 39               (/home/strick/go/s):00165         rret           rts       
                      (/home/strick/go/s):00166         
                      (/home/strick/go/s):00167                        IFNE      HDBDOS
                      (/home/strick/go/s):00168         * For HDB-DOS, we must add in drive number
                      (/home/strick/go/s):00169         * First, multiply drive number in descriptor by $276 (630 sectors),
                      (/home/strick/go/s):00170         * then, add the product to the PSect
0078                  (/home/strick/go/s):00171         ComputeHDB               
                      (/home/strick/go/s):00172                        IFNE      H6309
                      (/home/strick/go/s):00173                        clra      
                      (/home/strick/go/s):00174                        ldb       V.HDBDrive,u
                      (/home/strick/go/s):00175                        muld      #$0276
                      (/home/strick/go/s):00176                        addw      V.PhysSect+1,u
                      (/home/strick/go/s):00177                        stw       V.PhysSect+1,u
                      (/home/strick/go/s):00178                        adcb      V.PhysSect,u
                      (/home/strick/go/s):00179                        stb       V.PhysSect,u
                      (/home/strick/go/s):00180                        ELSE      
0078 327C             (/home/strick/go/s):00181                        leas      -4,s                make a stack to store product of $276 * DriveNum
007A A6C817           (/home/strick/go/s):00182                        lda       V.HDBDrive,u        get drive number
007D C676             (/home/strick/go/s):00183                        ldb       #$76
007F 3D               (/home/strick/go/s):00184                        mul       
0080 ED62             (/home/strick/go/s):00185                        std       2,s
0082 A6C817           (/home/strick/go/s):00186                        lda       V.HDBDrive,u
0085 C602             (/home/strick/go/s):00187                        ldb       #$02
0087 3D               (/home/strick/go/s):00188                        mul       
0088 EDE4             (/home/strick/go/s):00189                        std       ,s
008A 5F               (/home/strick/go/s):00190                        clrb      
008B A661             (/home/strick/go/s):00191                        lda       1,s
008D E362             (/home/strick/go/s):00192                        addd      2,s
008F ED62             (/home/strick/go/s):00193                        std       2,s
0091 2402             (/home/strick/go/s):00194                        bcc       f@
0093 6CE4             (/home/strick/go/s):00195                        inc       ,s
0095 A6E4             (/home/strick/go/s):00196         f@             lda       ,s
0097 A761             (/home/strick/go/s):00197                        sta       1,s
0099 EC62             (/home/strick/go/s):00198                        ldd       2,s
009B E343             (/home/strick/go/s):00199                        addd      V.PhysSect+1,u
009D ED43             (/home/strick/go/s):00200                        std       V.PhysSect+1,u
009F A661             (/home/strick/go/s):00201                        lda       1,s
00A1 A942             (/home/strick/go/s):00202                        adca      V.PhysSect,u
00A3 A742             (/home/strick/go/s):00203                        sta       V.PhysSect,u
00A5 3264             (/home/strick/go/s):00204                        leas      4,s
                      (/home/strick/go/s):00205                        ENDC      
                      (/home/strick/go/s):00206                        ENDC      
00A7 39               (/home/strick/go/s):00207         bye            rts       
                      (/home/strick/go/s):00208         
                      (/home/strick/go/s):00209         * 256 byte sector device: setup for low level driver to put 256 byte sector directly into PD.BUF
00A8                  (/home/strick/go/s):00210         Read256
00A8 17016A           (/home/strick/go/s):00211                        lbsr      Log2Phys
                      (/home/strick/go/s):00212         * We may not have to do this (and disturb the cache as a result)
                      (/home/strick/go/s):00213         *               lda       PD.DRV,y            get current drive number
                      (/home/strick/go/s):00214         *               sta       V.LastDrv,u         and make this the current drive
00AB 8601             (/home/strick/go/s):00215                        lda       #1
00AD A749             (/home/strick/go/s):00216                        sta       V.SectCnt,u
00AF AE28             (/home/strick/go/s):00217                        ldx       PD.BUF,y             put address of PD.BUF directly into cache spot
00B1 AF4F             (/home/strick/go/s):00218                        stx       V.CchPSpot,u
                      (/home/strick/go/s):00219         * Call low-level driver read
00B3 AEC825           (/home/strick/go/s):00220                        ldx       V.LLRead,u
00B6 160155           (/home/strick/go/s):00221                        lbra      LLCall
                      (/home/strick/go/s):00222         
                      (/home/strick/go/s):00223         * Read Sector
                      (/home/strick/go/s):00224         *
                      (/home/strick/go/s):00225         * The sector will be read from either the cache or the controller.
                      (/home/strick/go/s):00226         * A cache "hit" is verified by two methods:
                      (/home/strick/go/s):00227         * 1. Comparing the drive number of the drive for the current path to
                      (/home/strick/go/s):00228         *    the drive number of the last path -- if they match, we *MAY*
                      (/home/strick/go/s):00229         *    have a cache hit.  If not, we fill the cache
                      (/home/strick/go/s):00230         * 2. If #1 matches, then we know the current drive and the last drive
                      (/home/strick/go/s):00231         *    are the same.  We then check the logical sector to see if it is
                      (/home/strick/go/s):00232         *    in the cache.
                      (/home/strick/go/s):00233         *
                      (/home/strick/go/s):00234         * Entry:
                      (/home/strick/go/s):00235         *    Y = address of path descriptor
                      (/home/strick/go/s):00236         *    U = address of device memory area
                      (/home/strick/go/s):00237         *    B = Sector bits 23-16
                      (/home/strick/go/s):00238         *    X = Sector bits 15-0
                      (/home/strick/go/s):00239         *
00B9 8D7D             (/home/strick/go/s):00240         ReadSect       bsr       PreXfr              to pre-transfer stuff
00BB 25EA             (/home/strick/go/s):00241                        bcs       bye                 branch if error
                      (/home/strick/go/s):00242                        IFNE      HDBDOS
00BD 6DC818           (/home/strick/go/s):00243                        tst       V.HDBPart,u         HDB-DOS partition?
00C0 272E             (/home/strick/go/s):00244                        beq       NotHDB
                      (/home/strick/go/s):00245         * This is the HDB-DOS partition "read" code path.
                      (/home/strick/go/s):00246         * As an HDB-DOS partition, we are interested ONLY in reading the first 256 bytes
                      (/home/strick/go/s):00247         * regardless of the size of the cache.
00C2 A648             (/home/strick/go/s):00248                        lda       V.SectSize,u        get sector size (0=256,1=512,2=1024,etc)
00C4 308D00ED         (/home/strick/go/s):00249                        leax      SCTTBL,pcr
00C8 A686             (/home/strick/go/s):00250                        lda       a,x
00CA A74A             (/home/strick/go/s):00251                        sta       V.Log2Phys,u        set logical sectors per phys
00CC 8601             (/home/strick/go/s):00252                        lda       #$01                get sector count
00CE A749             (/home/strick/go/s):00253                        sta       V.SectCnt,u         and store it
00D0 A7C813           (/home/strick/go/s):00254                        sta       V.CchDirty,u        the cache will ALWAYS be dirty in HDB-DOS mode
00D3 A645             (/home/strick/go/s):00255                        lda       V.LogSect,u         get logical sector stored earlier
00D5 A742             (/home/strick/go/s):00256                        sta       V.PhysSect,u        save off logical sector as physical one
00D7 EC46             (/home/strick/go/s):00257                        ldd       V.LogSect+1,u       get logical sector stored earlier
00D9 ED43             (/home/strick/go/s):00258                        std       V.PhysSect+1,u      save off logical sector as physical sector
00DB 17014C           (/home/strick/go/s):00259                        lbsr      AddSectorOffset     add in partition offset and HDB-DOS drive
00DE 8D98             (/home/strick/go/s):00260                        bsr       ComputeHDB          and compute HDB-DOS offset
                      (/home/strick/go/s):00261         * Set up the pointer to the buffer
00E0 AE4B             (/home/strick/go/s):00262                        ldx       V.CchAddr,u         get address of cache
00E2 AF4F             (/home/strick/go/s):00263                        stx       V.CchPSpot,u        save in current sector pointer
                      (/home/strick/go/s):00264         * Call low-level driver
00E4 AEC825           (/home/strick/go/s):00265                        ldx       V.LLRead,u
00E7 170124           (/home/strick/go/s):00266                        lbsr      LLCall
00EA 25BB             (/home/strick/go/s):00267                        bcs       bye
00EC AE4B             (/home/strick/go/s):00268                        ldx       V.CchAddr,u         get cache pointer which holds HDB-DOS sector
00EE 2012             (/home/strick/go/s):00269                        bra       CopyXToPDBUF
                      (/home/strick/go/s):00270                        ENDC      
00F0                  (/home/strick/go/s):00271         NotHDB
                      (/home/strick/go/s):00272         * New: Dec 20, 2011
                      (/home/strick/go/s):00273         * Fast path opportunity: if sector size is 256 bytes, call LLRead right into PD.BUF
00F0 6D48             (/home/strick/go/s):00274                        tst       V.SectSize,u        (0=256 byte sector device)
00F2 27B4             (/home/strick/go/s):00275                        beq       Read256 
00F4 8D1F             (/home/strick/go/s):00276                        bsr       ValidateCache
00F6 251C             (/home/strick/go/s):00277                        bcs       ex@
                      (/home/strick/go/s):00278         * Copy appropriate 256 byte sector from V.CchAddr to PD.BUF,y
00F8 A64D             (/home/strick/go/s):00279                        lda       V.CchSize,u         get hi byte of cache size
00FA 4A               (/home/strick/go/s):00280                        deca      
00FB A447             (/home/strick/go/s):00281                        anda      V.LogSect+2,u
00FD 5F               (/home/strick/go/s):00282                        clrb      
00FE AE4B             (/home/strick/go/s):00283                        ldx       V.CchAddr,u
0100 308B             (/home/strick/go/s):00284                        leax      d,x
0102 3420             (/home/strick/go/s):00285         CopyXToPDBUF   pshs      y
0104 10AE28           (/home/strick/go/s):00286                        ldy       PD.BUF,y
                      (/home/strick/go/s):00287                        IFNE      H6309
                      (/home/strick/go/s):00288                        ldw       #256
                      (/home/strick/go/s):00289                        tfm       x+,y+
                      (/home/strick/go/s):00290                        clrb      
                      (/home/strick/go/s):00291                        puls      y,pc
                      (/home/strick/go/s):00292                        ELSE      
0107 6FE2             (/home/strick/go/s):00293                        clr       ,-s
0109 EC81             (/home/strick/go/s):00294         next@          ldd       ,x++
010B EDA1             (/home/strick/go/s):00295                        std       ,y++
010D 6CE4             (/home/strick/go/s):00296                        inc       ,s
010F 2AF8             (/home/strick/go/s):00297                        bpl       next@
0111 5F               (/home/strick/go/s):00298                        clrb      
0112 35A2             (/home/strick/go/s):00299                        puls      a,y,pc
                      (/home/strick/go/s):00300                        ENDC      
0114 39               (/home/strick/go/s):00301         ex@            rts       
                      (/home/strick/go/s):00302         
                      (/home/strick/go/s):00303         * ValidateCache
                      (/home/strick/go/s):00304         *
                      (/home/strick/go/s):00305         * Check if the cache is coherent (i.e. contains requested sector).
                      (/home/strick/go/s):00306         * If the cache is NOT coherent, it calls 'FillCache' to fill it.
0115                  (/home/strick/go/s):00307         ValidateCache            
                      (/home/strick/go/s):00308         * We must determine if the currently requested sector is already in cache.
                      (/home/strick/go/s):00309         * First, is this drive the same as the last drive that accessed the cache?
                      (/home/strick/go/s):00310         * If not, then we need to fill the cache with sectors from the current drive.
0115 6DC813           (/home/strick/go/s):00311                        tst       V.CchDirty,u        has cache been initialized?
0118 261C             (/home/strick/go/s):00312                        bne       nomatch             branch if not
011A A6A821           (/home/strick/go/s):00313                        lda       PD.DRV,y            get current drive
011D A141             (/home/strick/go/s):00314                        cmpa      V.LastDrv,u         save as last drive to access cache?
011F 2615             (/home/strick/go/s):00315                        bne       nomatch             if not, fill cache
                      (/home/strick/go/s):00316         * Same drive as last access... is this sector in cache?
0121 E645             (/home/strick/go/s):00317                        ldb       V.LogSect,u         save off logical sector
0123 E1C814           (/home/strick/go/s):00318                        cmpb      V.CchBase,u         compare bits 23-16
0126 260E             (/home/strick/go/s):00319                        bne       nomatch             branch if not the same
0128 A646             (/home/strick/go/s):00320                        lda       V.LogSect+1,u       save off logical sector
012A E64D             (/home/strick/go/s):00321                        ldb       V.CchSize,u         get hi byte of cache size
012C 5A               (/home/strick/go/s):00322                        decb                          decrement (e.g. 8=7,4=3,2=1,1=0)
012D 53               (/home/strick/go/s):00323                        comb                          invert (e.g. 7=$F8,3=$FC,1=$FE,0=$FF)
012E E447             (/home/strick/go/s):00324                        andb      V.LogSect+2,u       mask out cached sectors
0130 10A3C815         (/home/strick/go/s):00325                        cmpd      V.CchBase+1,u       same as what's in cache?
0134 2731             (/home/strick/go/s):00326                        beq       exok@               YES, WE HAVE A CACHE HIT!!!
0136 2036             (/home/strick/go/s):00327         nomatch        bra       FillCache           no, we must fil the cache
                      (/home/strick/go/s):00328         *
                      (/home/strick/go/s):00329         * PreXfr
                      (/home/strick/go/s):00330         *
                      (/home/strick/go/s):00331         * Called at read/write to gather info from path descriptor and
                      (/home/strick/go/s):00332         * device descriptor.
0138 E745             (/home/strick/go/s):00333         PreXfr         stb       V.LogSect,u         save off logical sector
013A AF46             (/home/strick/go/s):00334                        stx       V.LogSect+1,u       save off logical sector
013C A6A822           (/home/strick/go/s):00335                        lda       PD.STP,y            get possible HDB-DOS drive number
013F A7C817           (/home/strick/go/s):00336                        sta       V.HDBDrive,u        save off in our statics
0142 A6A823           (/home/strick/go/s):00337                        lda       PD.TYP,y
0145 8403             (/home/strick/go/s):00338                        anda      #TYPH.SSM           lob off all but sector size bits
                      (/home/strick/go/s):00339         * SmartCache - check if our current cache can accommodate this sector size
0147 A148             (/home/strick/go/s):00340                        cmpa      V.SectSize,u        do we need to expand?
0149 2314             (/home/strick/go/s):00341                        bls       no@                 branch if not
                      (/home/strick/go/s):00342         * Yes, we need to free our current cache mem and alloc more
014B 3442             (/home/strick/go/s):00343                        pshs      a,u                 save regs
014D EC4D             (/home/strick/go/s):00344                        ldd       V.CchSize,u         get current cache size
014F EE4B             (/home/strick/go/s):00345                        ldu       V.CchAddr,u         and cache pointer
0151 2703             (/home/strick/go/s):00346                        beq       nofree@
0153 103F29           (/home/strick/go/s):00347                        os9       F$SRtMem            return that memory
0156 3542             (/home/strick/go/s):00348         nofree@        puls      a,u                 restore regs
0158 1701FC           (/home/strick/go/s):00349                        lbsr      ExpandCache         go expand cache
015B 250C             (/home/strick/go/s):00350                        bcs       ex@                 and branch if error
015D A748             (/home/strick/go/s):00351                        sta       V.SectSize,u        save new sector size
015F                  (/home/strick/go/s):00352         no@
015F A6A824           (/home/strick/go/s):00353                        lda       PD.DNS,y            get DNS byte
0162 8408             (/home/strick/go/s):00354                        anda      #DNS.HDB            isolate HDB-DOS flag
0164 A7C818           (/home/strick/go/s):00355                        sta       V.HDBPart,u         and save state
0167 5F               (/home/strick/go/s):00356         exok@          clrb                          clear carry
0168 39               (/home/strick/go/s):00357                        rts                           return
0169 6F48             (/home/strick/go/s):00358         ex@            clr       V.SectSize,u        clear sector size to force realloc
016B 1A01             (/home/strick/go/s):00359                        orcc      #Carry              set carry (indicates error)
016D 39               (/home/strick/go/s):00360                        rts                           return
                      (/home/strick/go/s):00361         
                      (/home/strick/go/s):00362         * FillCache
                      (/home/strick/go/s):00363         *
                      (/home/strick/go/s):00364         * Fill the cache with sectors from the device.
                      (/home/strick/go/s):00365         *
                      (/home/strick/go/s):00366         * Destroys: A, B, X
016E                  (/home/strick/go/s):00367         FillCache                
016E A645             (/home/strick/go/s):00368                        lda       V.LogSect,u         get logical sector bits 23-16
0170 A7C814           (/home/strick/go/s):00369                        sta       V.CchBase,u         save as cached base
0173 A646             (/home/strick/go/s):00370                        lda       V.LogSect+1,u       save off logical sector
0175 E64D             (/home/strick/go/s):00371                        ldb       V.CchSize,u         get hi byte of cache size (1, 2, 4 or 8)
0177 5A               (/home/strick/go/s):00372                        decb                          decrement (e.g. 8=7,4=3,2=1,1=0)
0178 53               (/home/strick/go/s):00373                        comb                          invert (e.g. 7=$F8,3=$FC,1=$FE,0=$FF)
0179 E447             (/home/strick/go/s):00374                        andb      V.LogSect+2,u       mask out cached sectors
017B EDC815           (/home/strick/go/s):00375                        std       V.CchBase+1,u       save as cached base
017E 170094           (/home/strick/go/s):00376                        lbsr      Log2Phys            convert logical sectors to physical
0181 A6A821           (/home/strick/go/s):00377                        lda       PD.DRV,y            get current drive number
0184 A741             (/home/strick/go/s):00378                        sta       V.LastDrv,u         and make this the currently cached drive
                      (/home/strick/go/s):00379         * Set up the transfer
0186 E64D             (/home/strick/go/s):00380                        ldb       V.CchSize,u         get upper 8 bits of cache size
0188 A648             (/home/strick/go/s):00381                        lda       V.SectSize,u        get sector size (0=256,1=512,2=1024,etc)
018A 308C28           (/home/strick/go/s):00382                        leax      SCTTBL,pcr
018D A686             (/home/strick/go/s):00383                        lda       a,x
018F A74A             (/home/strick/go/s):00384                        sta       V.Log2Phys,u
0191 A648             (/home/strick/go/s):00385                        lda       V.SectSize,u        get sector size (0=256,1=512,2=1024,etc)
0193 2704             (/home/strick/go/s):00386                        beq       ok@
0195 54               (/home/strick/go/s):00387         lsr@           lsrb                          divide by 2
0196 4A               (/home/strick/go/s):00388                        deca                          decrement
0197 26FC             (/home/strick/go/s):00389                        bne       lsr@                else divide again
0199 E749             (/home/strick/go/s):00390         ok@            stb       V.SectCnt,u         save sector count
019B 5A               (/home/strick/go/s):00391                        decb      
019C 53               (/home/strick/go/s):00392                        comb      
019D E444             (/home/strick/go/s):00393                        andb      V.PhysSect+2,u
019F E744             (/home/strick/go/s):00394                        stb       V.PhysSect+2,u
                      (/home/strick/go/s):00395         * Set up the pointer to the buffer
01A1 AE4B             (/home/strick/go/s):00396                        ldx       V.CchAddr,u         get pointer to big buffer
01A3 AF4F             (/home/strick/go/s):00397                        stx       V.CchPSpot,u        save in current sector pointer
                      (/home/strick/go/s):00398         * Call low-level driver read
01A5 AEC825           (/home/strick/go/s):00399                        ldx       V.LLRead,u
01A8 8D64             (/home/strick/go/s):00400                        bsr       LLCall
01AA 2505             (/home/strick/go/s):00401                        bcs       ex@
01AC 6FC813           (/home/strick/go/s):00402                        clr       V.CchDirty,u        cache is no longer dirty
01AF 5F               (/home/strick/go/s):00403                        clrb      
01B0 39               (/home/strick/go/s):00404                        rts       
01B1 E7C813           (/home/strick/go/s):00405         ex@            stb       V.CchDirty,u        store error code as dirty flag
01B4 39               (/home/strick/go/s):00406                        rts       
                      (/home/strick/go/s):00407         
                      (/home/strick/go/s):00408         
01B5 01               (/home/strick/go/s):00409         SCTTBL         FCB       256/256
01B6 02               (/home/strick/go/s):00410                        FCB       512/256
01B7 04               (/home/strick/go/s):00411                        FCB       1024/256
01B8 08               (/home/strick/go/s):00412                        FCB       2048/256
                      (/home/strick/go/s):00413         
                      (/home/strick/go/s):00414         * GetStat/SetStat
                      (/home/strick/go/s):00415         *
                      (/home/strick/go/s):00416         * Entry:
                      (/home/strick/go/s):00417         *    R$B = function code
                      (/home/strick/go/s):00418         *    Y   = address of path descriptor
                      (/home/strick/go/s):00419         *    U   = address of device memory area
                      (/home/strick/go/s):00420         *
                      (/home/strick/go/s):00421         * Exit:
                      (/home/strick/go/s):00422         *    CC = carry set on error
                      (/home/strick/go/s):00423         *    B  = error code
                      (/home/strick/go/s):00424         *
01B9 33C9013F         (/home/strick/go/s):00425         SetStat        leau      UOFFSET,u
01BD AEC82B           (/home/strick/go/s):00426                        ldx       V.LLStSt,u
01C0 204C             (/home/strick/go/s):00427                        bra       LLCall
                      (/home/strick/go/s):00428         
01C2 E6A821           (/home/strick/go/s):00429         SSVarSect      ldb       PD.DRV,y            get drive number
01C5 30C819           (/home/strick/go/s):00430                        leax      V.SSCache,u         point to sector size cache table
01C8 3A               (/home/strick/go/s):00431                        abx       
01C9 A684             (/home/strick/go/s):00432                        lda       ,x                  get sector size
01CB 2627             (/home/strick/go/s):00433                        bne       go2@                if not zero, use that value
01CD 3410             (/home/strick/go/s):00434                        pshs      x
01CF AE26             (/home/strick/go/s):00435                        ldx       PD.RGS,y
01D1 3410             (/home/strick/go/s):00436                        pshs      x
01D3 3274             (/home/strick/go/s):00437                        leas      -R$Size,s
01D5 10EF26           (/home/strick/go/s):00438                        sts       PD.RGS,y
01D8 8626             (/home/strick/go/s):00439                        lda       #SS.DSize
01DA A762             (/home/strick/go/s):00440                        sta       R$B,s
01DC 8D2D             (/home/strick/go/s):00441                        bsr       gs2                 make a call to low level driver's SS.DSize
                      (/home/strick/go/s):00442         * Be sure that no instructions from here to the bcs modify carry
01DE A661             (/home/strick/go/s):00443                        lda       R$A,s
01E0 326C             (/home/strick/go/s):00444                        leas      R$Size,s
01E2 3510             (/home/strick/go/s):00445                        puls      x
01E4 AF26             (/home/strick/go/s):00446                        stx       PD.RGS,y
01E6 3510             (/home/strick/go/s):00447                        puls      x
01E8 2514             (/home/strick/go/s):00448                        bcs       ex@
01EA 8108             (/home/strick/go/s):00449                        cmpa      #8                  2048 byte sector?
01EC 2702             (/home/strick/go/s):00450                        beq       go@
01EE 44               (/home/strick/go/s):00451                        lsra                          else shift right
01EF 8C               (/home/strick/go/s):00452                        FCB       $8C                 skip next two bytes (cmpx...)
01F0 8603             (/home/strick/go/s):00453         go@            lda       #3
01F2 A784             (/home/strick/go/s):00454                        sta       ,x                  save newly acquired value off into cached size table
01F4 3402             (/home/strick/go/s):00455         go2@           pshs      a
01F6 A6A823           (/home/strick/go/s):00456                        lda       PD.TYP,y
01F9 84FC             (/home/strick/go/s):00457                        anda      #^TYPH.SSM
01FB AAE0             (/home/strick/go/s):00458                        ora       ,s+
                      (/home/strick/go/s):00459         * Boisy's Notes 3/27/06:
                      (/home/strick/go/s):00460         * Notice that we save the true sector size of the device in the PD.TYP byte of
                      (/home/strick/go/s):00461         * the path descriptor EACH TIME SS.VarSect is called.  This is important,
                      (/home/strick/go/s):00462         * because it alleviates the user from having to set this value in the device
                      (/home/strick/go/s):00463         * descriptor in a situation where the device being accessed has a larger sector
                      (/home/strick/go/s):00464         * size than what is in the device descriptor.
                      (/home/strick/go/s):00465         *
                      (/home/strick/go/s):00466         * Note that the value in the device descriptor IS used to initially determine
                      (/home/strick/go/s):00467         * the size of the cache at INIT time since we haven't even talked to the
                      (/home/strick/go/s):00468         * controller at that time yet to query it for its size.
                      (/home/strick/go/s):00469         *               sta       PD.TYP,y            and in path descriptor
01FD 5F               (/home/strick/go/s):00470                        clrb      
01FE 39               (/home/strick/go/s):00471         ex@            rts       
                      (/home/strick/go/s):00472         
                      (/home/strick/go/s):00473         
01FF 33C9013F         (/home/strick/go/s):00474         GetStat        leau      UOFFSET,u
0203 AE26             (/home/strick/go/s):00475                        ldx       PD.RGS,y            get registers
0205 E602             (/home/strick/go/s):00476                        ldb       R$B,x               get caller's B
0207 C112             (/home/strick/go/s):00477                        cmpb      #SS.VarSect
0209 27B7             (/home/strick/go/s):00478                        beq       SSVarSect
                      (/home/strick/go/s):00479         
020B AEC829           (/home/strick/go/s):00480         gs2            ldx       V.LLGtSt,u
                      (/home/strick/go/s):00481         
                      (/home/strick/go/s):00482         * Entry: Y = path desc ptr
                      (/home/strick/go/s):00483         *        U = statics ptr
                      (/home/strick/go/s):00484         *        X = address of routine to call
020E                  (/home/strick/go/s):00485         LLCall
                      (/home/strick/go/s):00486                        IFEQ      USECS-1
                      (/home/strick/go/s):00487                        pshs      a                   preserve A for duration of csacq_wait
                      (/home/strick/go/s):00488                        lda       #255                wait the maximum number of counts
                      (/home/strick/go/s):00489                        bsr       csacq_wait          acquire the critical section
                      (/home/strick/go/s):00490                        tsta                          test A for zero
                      (/home/strick/go/s):00491                        puls      a                   restore A
                      (/home/strick/go/s):00492                        beq       cserr               return if A was zero (semaphore wasn't acquired)
                      (/home/strick/go/s):00493                        ENDC
020E 3460             (/home/strick/go/s):00494                        pshs      u,y                 save U and Y
0210 AD84             (/home/strick/go/s):00495                        jsr       ,x                  call low level routine
0212 3560             (/home/strick/go/s):00496                        puls      y,u                 restore U and Y
                      (/home/strick/go/s):00497         
                      (/home/strick/go/s):00498                        IFEQ      USECS-1
                      (/home/strick/go/s):00499         * Critical Section Release - clear the critial section to zero, allowing others to use it
0214                  (/home/strick/go/s):00500         csrel          pshs      cc                  preserve CC
                      (/home/strick/go/s):00501                        clr       V.LLSema,u          clear critical section
                      (/home/strick/go/s):00502                        puls      cc,pc               restore CC and return
0214                  (/home/strick/go/s):00503         cserr          comb                          set the carry
                      (/home/strick/go/s):00504                        ldb       #111                and load B with error indicating a semaphore timeout
                      (/home/strick/go/s):00505                        ENDC
0214 39               (/home/strick/go/s):00506                        rts       
                      (/home/strick/go/s):00507         
                      (/home/strick/go/s):00508                        IFEQ      USECS-1
                      (/home/strick/go/s):00509         * Critical Section Acquire With Wait
                      (/home/strick/go/s):00510         *
                      (/home/strick/go/s):00511         * Entry:
                      (/home/strick/go/s):00512         *    A = number of times to check before giving up
                      (/home/strick/go/s):00513         *
                      (/home/strick/go/s):00514         * Exit:
                      (/home/strick/go/s):00515         *    A = status (>0 = Critical section acquired, 0 = Critical section not acquired)
                      (/home/strick/go/s):00516         *
0215                  (/home/strick/go/s):00517         csacq_wait     pshs      cc                  save CC on stack
                      (/home/strick/go/s):00518                        orcc      #IntMasks           mask interrupts
                      (/home/strick/go/s):00519                        tst       V.LLSema,u          does someone already have the critical section?
                      (/home/strick/go/s):00520                        bne       w@                  if so, then branch
                      (/home/strick/go/s):00521                        inc       V.LLSema,u          else claim critical section (0->1)
0215                  (/home/strick/go/s):00522         e@             puls      cc,pc               restore CC and return
0215                  (/home/strick/go/s):00523         w@             deca                          decrement our timeout counter
                      (/home/strick/go/s):00524                        beq       e@                  if zero, we've timed out, return
                      (/home/strick/go/s):00525                        puls      cc                  give interrupts a chance to breathe
                      (/home/strick/go/s):00526                        IFGT      Level-1
                      (/home/strick/go/s):00527         * Give up timeslice unless this is the system
                      (/home/strick/go/s):00528                        pshs      x
                      (/home/strick/go/s):00529                        ldx       D.Proc              get proc descriptor
                      (/home/strick/go/s):00530                        cmpx      D.SysPrc            system?
                      (/home/strick/go/s):00531                        beq       wd@                 yep, system cannot sleep
                      (/home/strick/go/s):00532         *               ldx       D.AProcQ            get active proc queue
                      (/home/strick/go/s):00533         *               beq       wd@                 if empty, return
                      (/home/strick/go/s):00534                        ldx       #$0001
                      (/home/strick/go/s):00535                        os9       F$Sleep             give up timeslice
0215                  (/home/strick/go/s):00536         wd@            puls      x                   return to caller
                      (/home/strick/go/s):00537                        ENDC      
                      (/home/strick/go/s):00538                        bra       csacq_wait          and try again
                      (/home/strick/go/s):00539                        ENDC
                      (/home/strick/go/s):00540         
                      (/home/strick/go/s):00541         
                      (/home/strick/go/s):00542         * Log2Phys - Convert logical sector to physical sector
                      (/home/strick/go/s):00543         *
                      (/home/strick/go/s):00544         * Stores V.PhysSect,u from V.LogSect,u based on V.SectSize,u
                      (/home/strick/go/s):00545         * Also adds IT.SOFF1-IT.SOFF3 to V.PhysSect,u for partitioning.
                      (/home/strick/go/s):00546         * Results are placed in V.PhysSect,u
0215 A645             (/home/strick/go/s):00547         Log2Phys       lda       V.LogSect,u
0217 A742             (/home/strick/go/s):00548                        sta       V.PhysSect,u
0219 EC46             (/home/strick/go/s):00549                        ldd       V.LogSect+1,u
021B ED43             (/home/strick/go/s):00550                        std       V.PhysSect+1,u
021D A648             (/home/strick/go/s):00551                        lda       V.SectSize,u
021F 2709             (/home/strick/go/s):00552                        beq       AddSectorOffset
0221 6442             (/home/strick/go/s):00553         DivBy2         lsr       V.PhysSect,u
0223 6643             (/home/strick/go/s):00554                        ror       V.PhysSect+1,u
0225 6644             (/home/strick/go/s):00555                        ror       V.PhysSect+2,u
0227 4A               (/home/strick/go/s):00556                        deca      
0228 26F7             (/home/strick/go/s):00557                        bne       DivBy2
                      (/home/strick/go/s):00558         * This routine adds the 3 byte sector offset in the
                      (/home/strick/go/s):00559         * device descriptor to the physical sector.
022A                  (/home/strick/go/s):00560         AddSectorOffset           
022A AE23             (/home/strick/go/s):00561                        ldx       PD.DEV,y
022C AE04             (/home/strick/go/s):00562                        ldx       V$DESC,x
022E EC8826           (/home/strick/go/s):00563                        ldd       IT.SOFF2,x
0231 E343             (/home/strick/go/s):00564                        addd      V.PhysSect+1,u
0233 ED43             (/home/strick/go/s):00565                        std       V.PhysSect+1,u
0235 A68825           (/home/strick/go/s):00566                        lda       IT.SOFF1,x
0238 A942             (/home/strick/go/s):00567                        adca      V.PhysSect,u
023A A742             (/home/strick/go/s):00568                        sta       V.PhysSect,u
023C 39               (/home/strick/go/s):00569         logex          rts       
                      (/home/strick/go/s):00570         
                      (/home/strick/go/s):00571         
                      (/home/strick/go/s):00572         * 256 byte sector device: setup for low level driver to put 256 byte sector directly into PD.BUF
023D                  (/home/strick/go/s):00573         Write256
023D 8DD6             (/home/strick/go/s):00574                        bsr      Log2Phys
                      (/home/strick/go/s):00575         * We may not have to do this (and disturb the cache as a result)
                      (/home/strick/go/s):00576         *               lda       PD.DRV,y            get current drive number
                      (/home/strick/go/s):00577         *               sta       V.LastDrv,u         and make this the current drive
023F 8601             (/home/strick/go/s):00578                        lda       #1
0241 A749             (/home/strick/go/s):00579                        sta       V.SectCnt,u
0243 AE28             (/home/strick/go/s):00580                        ldx       PD.BUF,y             put address of PD.BUF directly into cache spot
0245 AF4F             (/home/strick/go/s):00581                        stx       V.CchPSpot,u
                      (/home/strick/go/s):00582         * Call low-level driver read
0247 AEC827           (/home/strick/go/s):00583                        ldx       V.LLWrite,u
024A 20C2             (/home/strick/go/s):00584                        bra       LLCall
                      (/home/strick/go/s):00585         
                      (/home/strick/go/s):00586         * Write
                      (/home/strick/go/s):00587         *
                      (/home/strick/go/s):00588         * Entry:
                      (/home/strick/go/s):00589         *    B  = MSB of the disk's LSN
                      (/home/strick/go/s):00590         *    X  = LSB of the disk's LSN
                      (/home/strick/go/s):00591         *    Y  = address of path descriptor
                      (/home/strick/go/s):00592         *    U  = address of device memory area
                      (/home/strick/go/s):00593         *
                      (/home/strick/go/s):00594         * Exit:
                      (/home/strick/go/s):00595         *    CC = carry set on error
                      (/home/strick/go/s):00596         *    B  = error code
                      (/home/strick/go/s):00597         *
024C 33C9013F         (/home/strick/go/s):00598         Write          leau      UOFFSET,u
0250 17FEE5           (/home/strick/go/s):00599                        lbsr      PreXfr              to pre-transfer stuff
0253 25E7             (/home/strick/go/s):00600                        bcs       logex               branch if error
                      (/home/strick/go/s):00601                        IFNE      HDBDOS
0255 A6C818           (/home/strick/go/s):00602                        lda       V.HDBPart,u         HDB-DOS partition?
0258 2720             (/home/strick/go/s):00603                        beq       h@
                      (/home/strick/go/s):00604         * HDB-DOS partition code path
025A A7C813           (/home/strick/go/s):00605                        sta       V.CchDirty,u        cache is dirty
025D A648             (/home/strick/go/s):00606                        lda       V.SectSize,u        get sector size (0=256,1=512,2=1024,3=2048)
025F 308DFF52         (/home/strick/go/s):00607                        leax      SCTTBL,pcr
0263 A686             (/home/strick/go/s):00608                        lda       a,x
0265 A74A             (/home/strick/go/s):00609                        sta       V.Log2Phys,u        set logical sectors per phys
0267 A645             (/home/strick/go/s):00610                        lda       V.LogSect,u
0269 A742             (/home/strick/go/s):00611                        sta       V.PhysSect,u
026B EC46             (/home/strick/go/s):00612                        ldd       V.LogSect+1,u
026D ED43             (/home/strick/go/s):00613                        std       V.PhysSect+1,u
026F 8DB9             (/home/strick/go/s):00614                        bsr       AddSectorOffset     add in partition offset and HDB-DOS drive
0271 17FE04           (/home/strick/go/s):00615                        lbsr      ComputeHDB          and compute HDB-DOS offset
0274 AE28             (/home/strick/go/s):00616                        ldx       PD.BUF,y            get path desc buffer
0276 AF4F             (/home/strick/go/s):00617                        stx       V.CchPSpot,u        we write directly from PD.BUF
0278 2041             (/home/strick/go/s):00618                        bra       writeit
                      (/home/strick/go/s):00619                        ENDC      
                      (/home/strick/go/s):00620         * New: Dec 20, 2011
                      (/home/strick/go/s):00621         * Fast path opportunity: if sector size is 256 bytes, call LLRead right into PD.BUF
027A                  (/home/strick/go/s):00622         h@
027A 6D48             (/home/strick/go/s):00623                        tst       V.SectSize,u        (0=256 byte sector device)
027C 27BF             (/home/strick/go/s):00624                        beq       Write256
027E 17FE94           (/home/strick/go/s):00625                        lbsr      ValidateCache
0281 25B9             (/home/strick/go/s):00626                        bcs       logex
                      (/home/strick/go/s):00627         * Copy appropriate 256 byte sector from PD.BUF,y to V.CchAddr,u
                      (/home/strick/go/s):00628         * Determine where in the cache we copy this 256 byte sector
0283 8D90             (/home/strick/go/s):00629                        bsr       Log2Phys            compute physical sector from logical sector
0285 A64D             (/home/strick/go/s):00630                        lda       V.CchSize,u         get hi byte of cache size
0287 4A               (/home/strick/go/s):00631                        deca      
0288 A447             (/home/strick/go/s):00632                        anda      V.LogSect+2,u
028A 5F               (/home/strick/go/s):00633                        clrb      
028B AE4B             (/home/strick/go/s):00634                        ldx       V.CchAddr,u
028D 308B             (/home/strick/go/s):00635                        leax      d,x
028F AFC811           (/home/strick/go/s):00636                        stx       V.CchLSpot,u        save for possible verify later
0292 3420             (/home/strick/go/s):00637                        pshs      y                   save path desc for now
0294 10AE28           (/home/strick/go/s):00638                        ldy       PD.BUF,y
                      (/home/strick/go/s):00639                        IFNE      H6309
                      (/home/strick/go/s):00640                        ldw       #256
                      (/home/strick/go/s):00641                        tfm       y+,x+
                      (/home/strick/go/s):00642                        puls      y
                      (/home/strick/go/s):00643                        ELSE      
0297 6FE2             (/home/strick/go/s):00644                        clr       ,-s
0299 ECA1             (/home/strick/go/s):00645         loop@          ldd       ,y++
029B ED81             (/home/strick/go/s):00646                        std       ,x++
029D 6CE4             (/home/strick/go/s):00647                        inc       ,s
029F 2AF8             (/home/strick/go/s):00648                        bpl       loop@
02A1 3522             (/home/strick/go/s):00649                        puls      a,y
                      (/home/strick/go/s):00650                        ENDC      
                      (/home/strick/go/s):00651         * Now that sector is copied, determine where in cache we start
02A3 A647             (/home/strick/go/s):00652                        lda       V.LogSect+2,u       get logical sector bits 7-0
02A5 308D00CA         (/home/strick/go/s):00653                        leax      MASKTBL,pcr         point to base of cache
02A9 E648             (/home/strick/go/s):00654                        ldb       V.SectSize,u        get sector size in B
02AB A485             (/home/strick/go/s):00655                        anda      b,x
02AD 3402             (/home/strick/go/s):00656                        pshs      a
02AF A64D             (/home/strick/go/s):00657                        lda       V.CchSize,u         get upper 8 bits of cache size
02B1 4A               (/home/strick/go/s):00658                        deca      
02B2 A4E0             (/home/strick/go/s):00659                        anda      ,s+
02B4 5F               (/home/strick/go/s):00660                        clrb      
02B5 AE4B             (/home/strick/go/s):00661                        ldx       V.CchAddr,u         point to base of cache
02B7 308B             (/home/strick/go/s):00662                        leax      d,x
02B9 AF4F             (/home/strick/go/s):00663                        stx       V.CchPSpot,u
                      (/home/strick/go/s):00664         * Call low-level driver write routine
02BB 8601             (/home/strick/go/s):00665         writeit        lda       #$01
02BD A749             (/home/strick/go/s):00666                        sta       V.SectCnt,u
02BF AEC827           (/home/strick/go/s):00667                        ldx       V.LLWrite,u
02C2 17FF49           (/home/strick/go/s):00668                        lbsr      LLCall
                      (/home/strick/go/s):00669         * If verify flag is on, read back and compare
02C5 6DA828           (/home/strick/go/s):00670                        tst       PD.VFY,y            verify flag set?
02C8 2626             (/home/strick/go/s):00671                        bne       ex@                 if so, we don't verify -- just exit
                      (/home/strick/go/s):00672         * Read back physical sector into cache
02CA 6DC818           (/home/strick/go/s):00673                        tst       V.HDBPart,u         HDB-DOS partition?
02CD 2707             (/home/strick/go/s):00674                        beq       o@
                      (/home/strick/go/s):00675         * If in HDB-DOS mode, we simply place the base address of the cache into 
                      (/home/strick/go/s):00676         * V.CchPSpot... and V.CchLSpot for later verify
02CF AE4B             (/home/strick/go/s):00677                        ldx       V.CchAddr,u
02D1 AF4F             (/home/strick/go/s):00678                        stx       V.CchPSpot,u
02D3 AFC811           (/home/strick/go/s):00679                        stx       V.CchLSpot,u
02D6 8601             (/home/strick/go/s):00680         o@             lda       #$01
02D8 A749             (/home/strick/go/s):00681                        sta       V.SectCnt,u
02DA AEC825           (/home/strick/go/s):00682                        ldx       V.LLRead,u
02DD 17FF2E           (/home/strick/go/s):00683                        lbsr      LLCall
                      (/home/strick/go/s):00684         * Now compare PD.BUF to sector in cache just re-read         
02E0 AEC811           (/home/strick/go/s):00685                        ldx       V.CchLSpot,u        get spot in cache where 256 byte sector is.
02E3 10AE28           (/home/strick/go/s):00686                        ldy       PD.BUF,y            get pointer to buffer
02E6 4F               (/home/strick/go/s):00687                        clra      
02E7 E680             (/home/strick/go/s):00688         a@             ldb       ,x+                 get byte in cache
02E9 E1A0             (/home/strick/go/s):00689                        cmpb      ,y+                 compare against byte in PD.BUF
02EB 2605             (/home/strick/go/s):00690                        bne       err@
02ED 4A               (/home/strick/go/s):00691                        deca      
02EE 26F7             (/home/strick/go/s):00692                        bne       a@
02F0 5F               (/home/strick/go/s):00693         ex@            clrb      
02F1 39               (/home/strick/go/s):00694                        rts       
02F2 53               (/home/strick/go/s):00695         err@           comb      
02F3 C6F5             (/home/strick/go/s):00696                        ldb       #E$Write
02F5 E7C813           (/home/strick/go/s):00697                        stb       V.CchDirty,u        make cache dirty due to error
02F8 39               (/home/strick/go/s):00698                        rts       
                      (/home/strick/go/s):00699         
                      (/home/strick/go/s):00700         *
                      (/home/strick/go/s):00701         * Init
                      (/home/strick/go/s):00702         *
                      (/home/strick/go/s):00703         * Entry:
                      (/home/strick/go/s):00704         *    Y  = address of device descriptor
                      (/home/strick/go/s):00705         *    U  = address of device memory area
                      (/home/strick/go/s):00706         *
                      (/home/strick/go/s):00707         * Exit:
                      (/home/strick/go/s):00708         *    CC = carry set on error
                      (/home/strick/go/s):00709         *    B  = error code
                      (/home/strick/go/s):00710         *
02F9 3420             (/home/strick/go/s):00711         Init           pshs      y                   save device descriptor ptr on stack
02FB C608             (/home/strick/go/s):00712                        ldb       #DrvCount           get maximum drives supported
02FD E746             (/home/strick/go/s):00713                        stb       V.NDRV,u            save in our device memory
02FF 304F             (/home/strick/go/s):00714                        leax      DRVBEG,u            point X to the drive tables
0301 86FF             (/home/strick/go/s):00715                        lda       #$FF
                      (/home/strick/go/s):00716         * Invalidate V.NDRV drive tables
0303 A784             (/home/strick/go/s):00717         drvx           sta       DD.TOT,x
0305 A701             (/home/strick/go/s):00718                        sta       DD.TOT+1,x
0307 A702             (/home/strick/go/s):00719                        sta       DD.TOT+2,x
0309 308826           (/home/strick/go/s):00720                        leax      DRVMEM,x            point to next drive table
030C 5A               (/home/strick/go/s):00721                        decb                          decrement counter
030D 26F4             (/home/strick/go/s):00722                        bne       drvx                if not zero, continue
                      (/home/strick/go/s):00723         * Link to low-level driver
030F ECA828           (/home/strick/go/s):00724                        ldd       IT.LLDRV,y          point to name in descriptor
0312 30AB             (/home/strick/go/s):00725                        leax      d,y                 point to name in descriptor
0314 3440             (/home/strick/go/s):00726                        pshs      u
                      (/home/strick/go/s):00727                        IFGT      Level-1
0316 DC50             (/home/strick/go/s):00728                        ldd       D.Proc              get curr proc ptr
0318 3406             (/home/strick/go/s):00729                        pshs      d                   save on stack
031A DC4A             (/home/strick/go/s):00730                        ldd       D.SysPrc            get system process desc ptr
031C DD50             (/home/strick/go/s):00731                        std       D.Proc              and make current proc
                      (/home/strick/go/s):00732                        ENDC      
031E 8621             (/home/strick/go/s):00733                        lda       #Sbrtn+Objct
0320 103F00           (/home/strick/go/s):00734                        os9       F$Link              link to it
                      (/home/strick/go/s):00735                        IFGT      Level-1
0323 3510             (/home/strick/go/s):00736                        puls      x                   get curr proc ptr
0325 9F50             (/home/strick/go/s):00737                        stx       D.Proc              restore
                      (/home/strick/go/s):00738                        ENDC      
0327 1F31             (/home/strick/go/s):00739                        tfr       u,x                 transfer module address to X
0329 3540             (/home/strick/go/s):00740                        puls      u                   restore U
032B 33C9013F         (/home/strick/go/s):00741                        leau      UOFFSET,u
032F 251B             (/home/strick/go/s):00742                        bcs       ret@
0331 AFC821           (/home/strick/go/s):00743                        stx       V.LLAddr,u          else save module address
                      (/home/strick/go/s):00744         * setup entry points to low-level module
0334 30C823           (/home/strick/go/s):00745                        leax      V.LLInit,u
0337 8606             (/home/strick/go/s):00746                        lda       #6                  number of entry points
0339 10AF81           (/home/strick/go/s):00747         l@             sty       ,x++
033C 3123             (/home/strick/go/s):00748                        leay      3,y
033E 4A               (/home/strick/go/s):00749                        deca      
033F 26F8             (/home/strick/go/s):00750                        bne       l@
                      (/home/strick/go/s):00751         * Call low-level driver init
0341 10AEE4           (/home/strick/go/s):00752                        ldy       ,s                  grab path desc ptr
0344 AEC823           (/home/strick/go/s):00753                        ldx       V.LLInit,u
0347 17FEC4           (/home/strick/go/s):00754                        lbsr      LLCall
034A 2402             (/home/strick/go/s):00755                        bcc       r@
034C 35A0             (/home/strick/go/s):00756         ret@           puls      y,pc
                      (/home/strick/go/s):00757         * Allocate cache memory
034E A6A815           (/home/strick/go/s):00758         r@             lda       IT.TYP,y            get type byte
0351 8403             (/home/strick/go/s):00759                        anda      #TYPH.SSM           mask out all but sector size
                      (/home/strick/go/s):00760         * Added Dec 20, 2011: save off to V.SectSize (never got initialized until now!)
0353 A748             (/home/strick/go/s):00761                        sta       V.SectSize,u        clear out V.SectSize
0355 3520             (/home/strick/go/s):00762                        puls      y
                      (/home/strick/go/s):00763         * Fall through to ExpandCache
                      (/home/strick/go/s):00764         
                      (/home/strick/go/s):00765         * Entry: A = cache size to expand to (1 = 512, 2 = 1024, 3 = 2048)
                      (/home/strick/go/s):00766         * Exit:  D is destroyed
                      (/home/strick/go/s):00767         * Note: any previously allocated cache memory must have been
                      (/home/strick/go/s):00768         * freed before this call!
                      (/home/strick/go/s):00769         * 
0357                  (/home/strick/go/s):00770         ExpandCache              
0357 3412             (/home/strick/go/s):00771                        pshs      a,x
0359 308C13           (/home/strick/go/s):00772                        leax      CCHTBL,pcr
035C A686             (/home/strick/go/s):00773                        lda       a,x                 get 1, 2, 4 or 8 
035E A7C813           (/home/strick/go/s):00774                        sta       V.CchDirty,u        make cache dirty since we will expand it
0361 5F               (/home/strick/go/s):00775                        clrb      
0362 ED4D             (/home/strick/go/s):00776                        std       V.CchSize,u         save cache size (256, 512, 1024 or 2048)
0364 1F31             (/home/strick/go/s):00777                        tfr       u,x
0366 103F28           (/home/strick/go/s):00778                        os9       F$SRqMem            allocate cache memory
0369 EF0B             (/home/strick/go/s):00779                        stu       V.CchAddr,x         save cache ptr
036B 1F13             (/home/strick/go/s):00780                        tfr       x,u                 restore mem pointer
036D 3592             (/home/strick/go/s):00781         ex@            puls      a,x,pc
                      (/home/strick/go/s):00782         
                      (/home/strick/go/s):00783         
036F 01               (/home/strick/go/s):00784         CCHTBL         FCB       256/256
0370 02               (/home/strick/go/s):00785                        FCB       512/256
0371 04               (/home/strick/go/s):00786                        FCB       1024/256
0372 08               (/home/strick/go/s):00787                        FCB       2048/256
                      (/home/strick/go/s):00788         
0373 07060400         (/home/strick/go/s):00789         MASKTBL        FCB       $07,$06,$04,$00
                      (/home/strick/go/s):00790         
0377 84C07C           (/home/strick/go/s):00791                        EMOD      
     037A             (/home/strick/go/s):00792         eom            EQU       *
                      (/home/strick/go/s):00793                        END       
