                      (  krnp2_beta5.asm):00001         ********************************************************************
                      (  krnp2_beta5.asm):00002         * krnp2 - NitrOS-9 Level 2 Kernel Part 2
                      (  krnp2_beta5.asm):00003         *
                      (  krnp2_beta5.asm):00004         * $Id$
                      (  krnp2_beta5.asm):00005         *
                      (  krnp2_beta5.asm):00006         * Copyright (c) 1982 Microware Corporation
                      (  krnp2_beta5.asm):00007         *
                      (  krnp2_beta5.asm):00008         * Modified for 6309 Native mode by:
                      (  krnp2_beta5.asm):00009         *
                      (  krnp2_beta5.asm):00010         * Bill Nobel, L. Curtis Boyle & Wes Gale - Gale Force Enterprises
                      (  krnp2_beta5.asm):00011         *
                      (  krnp2_beta5.asm):00012         * Ed.    Comments                                       Who YY/MM/DD
                      (  krnp2_beta5.asm):00013         * ------------------------------------------------------------------
                      (  krnp2_beta5.asm):00014         *
                      (  krnp2_beta5.asm):00015         * 17.2   08/02/92 - Active in 6309 Native mode, No apparent bugs (BN)
                      (  krnp2_beta5.asm):00016         *                 - Optimized F$Fork (BN)
                      (  krnp2_beta5.asm):00017         *                 - Optimized F$Chain (BN)
                      (  krnp2_beta5.asm):00018         * 18.4   92/12/15 - Cut initial memory allocation routine - unnecessary
                      (  krnp2_beta5.asm):00019         * 18.5   93/01/18 - Fixed bug in F$Sleep (LCB)
                      (  krnp2_beta5.asm):00020         *                 - Optimized F$All64 to use tfm (BN)
                      (  krnp2_beta5.asm):00021         * NitrOS9 V1.09 - Move & optimized F$CpyMem to OS9P1
                      (  krnp2_beta5.asm):00022         * V1.10  93/05/23 - Slight opt to UnLink
                      (  krnp2_beta5.asm):00023         * V1.11  93/07/26 - Slight opt in F$Icpt
                      (  krnp2_beta5.asm):00024         *                 - Slight opt in F$Wait alarm clearing
                      (  krnp2_beta5.asm):00025         *                 - Slight opt to speed up path table full errors
                      (  krnp2_beta5.asm):00026         *                 - Changed LBEQ to BEQ in F$Unlink
                      (  krnp2_beta5.asm):00027         * V1.16  93/09/03 - Moved F$SUser to OS9P1 (WG)
                      (  krnp2_beta5.asm):00028         *        93/09/08 - Moved F$SUser back to OS9P2 for room in OS9P1 (LCB)
                      (  krnp2_beta5.asm):00029         *        93/09/10 - F$Find64 (L0A50) - Took out BSR to L0A5C, merged routine
                      (  krnp2_beta5.asm):00030         *                   in (only called from here), and took out PSHS/PULS D
                      (  krnp2_beta5.asm):00031         *                   Also modified error structure a bit to shorten it
                      (  krnp2_beta5.asm):00032         *        93/10/06 - Added conditional assembly to skip Network I/O ptrs since
                      (  krnp2_beta5.asm):00033         *                   Coco network never released by Tandy/Microware (in F$Fork)
                      (  krnp2_beta5.asm):00034         *                 - @ GotNProc (in F$Fork), saved 1 byte/cycle when inheriting
                      (  krnp2_beta5.asm):00035         *                   User # & priority
                      (  krnp2_beta5.asm):00036         *                 - Changed routine @ L01FB to use U instead of Y (slightly
                      (  krnp2_beta5.asm):00037         *                   smaller & slightly faster), and also used CLRB with STB
                      (  krnp2_beta5.asm):00038         *                   instead of CLR for clearing DAT block #'s (F$UnLink)
                      (  krnp2_beta5.asm):00039         *        93/12/17 - Moved F$CRCMod code here to give some room in OS9P1
                      (  krnp2_beta5.asm):00040         *        94/05/15 - Attempted opts in Unlink: Changed usage of W to D @ L0185
                      (  krnp2_beta5.asm):00041         *                   and L0198 and L01B5, also optimized L017C to eliminate a
                      (  krnp2_beta5.asm):00042         *                   branch (speeds up module dir search by 3 cycles/module
                      (  krnp2_beta5.asm):00043         *                   checked)
                      (  krnp2_beta5.asm):00044         *                 - Changed BRA L032F @ L02EC (AllProc error) to RTS
                      (  krnp2_beta5.asm):00045         *                 - Changed BRA L0629 @ L05DF to RTS
                      (  krnp2_beta5.asm):00046         *                 - Changed L066A & L067B from BRA L06F4 to PULS CC,A,Y,U,PC
                      (  krnp2_beta5.asm):00047         *                   (F$Send errors)
                      (  krnp2_beta5.asm):00048         *                 - Changed L0A2B from BRA L0A4F to RTS (F$UnLoad error)
                      (  krnp2_beta5.asm):00049         *                 - Changed L0C53 & L0C81 BRA L0C93 to CLRB/RTS (F$GCMDir)
                      (  krnp2_beta5.asm):00050         * -- Alan DeKok
                      (  krnp2_beta5.asm):00051         *        94/10/28 - added boot debug calls
                      (  krnp2_beta5.asm):00052         *                 - Changed code at ~L0D47 to allow F$Fork/F$Chain of Obj6309
                      (  krnp2_beta5.asm):00053         *        94/10/30 - Added error checking on F$Fork of CC3Go
                      (  krnp2_beta5.asm):00054         *                 - Minor mods to F$SSWI call
                      (  krnp2_beta5.asm):00055         *                 - Minor mods to F$STime
                      (  krnp2_beta5.asm):00056         *                 - Changed F$GModDr to BRA to similar code in F$GBlkMp
                      (  krnp2_beta5.asm):00057         *
                      (  krnp2_beta5.asm):00058         *  18r6  Back-ported to OS-9 Level Two from NitrOS-9 Level Two
                      (  krnp2_beta5.asm):00059         *
                      (  krnp2_beta5.asm):00060         *  18r7    2004/06/18  Boisy G. Pitre
                      (  krnp2_beta5.asm):00061         * Kernel no longer attempts a reboot when failing to open term device, but
                      (  krnp2_beta5.asm):00062         * crashes upon error.
                      (  krnp2_beta5.asm):00063         *
                      (  krnp2_beta5.asm):00064         *  19      2013/05/29  Boisy G. Pitre
                      (  krnp2_beta5.asm):00065         * F$Debug now incorporated, allows for reboot.
                      (  krnp2_beta5.asm):00066         *
                      (  krnp2_beta5.asm):00067         *  20      2019/12/08-25  L. Curtis Boyle
                      (  krnp2_beta5.asm):00068         * Krn/KrnP2 6809: Moved F$CpyMem code back into KRN, and direct calls to Move,
                      (  krnp2_beta5.asm):00069         *   ala 6309 version (several times faster)
                      (  krnp2_beta5.asm):00070         * 6809: Optimized F$Chain- speed up copying Process descriptor data (saves
                      (  krnp2_beta5.asm):00071         *    saves 750 cycles)
                      (  krnp2_beta5.asm):00072         * 6809: Optimized F$AllPrc- speed up clearing Process descriptor data (saves
                      (  krnp2_beta5.asm):00073         *    350 cycles
                      (  krnp2_beta5.asm):00074         * 6809/6309: Shrunk/sped up REBOOT copy code loop
                      (  krnp2_beta5.asm):00075         
                      (  krnp2_beta5.asm):00076         
                      (  krnp2_beta5.asm):00077                  nam    krnp2
                      (  krnp2_beta5.asm):00078                  ttl    NitrOS-9 Level 2 Kernel Part 2
                      (  krnp2_beta5.asm):00079         
                      (  krnp2_beta5.asm):00080         ** If Network I/O ptrs are disabled, F$Fork runs 72 cycles faster
     0000             (  krnp2_beta5.asm):00081         Network  equ    0             Set to 1 to enable network I/O ptrs
                      (  krnp2_beta5.asm):00082         
                      (  krnp2_beta5.asm):00083                IFP1
                      (  krnp2_beta5.asm):00084                  use    /dd/defs/deffile
     0002             ( /dd/defs/deffile):00001         Level    set     2
     0000             ( /dd/defs/deffile):00002         CoGrf    set     0
     0000             ( /dd/defs/deffile):00003         MATCHBOX set     0
                      ( /dd/defs/deffile):00004         *H6309    set     0
     0000             ( /dd/defs/deffile):00005         H6309    set     0
                      ( /dd/defs/deffile):00006                  use   /dd/defs/os9.d
                      (   /dd/defs/os9.d):00001         ********************************************************************
                      (   /dd/defs/os9.d):00002         * os9.d - NitrOS-9 System Definitions
                      (   /dd/defs/os9.d):00003         *
                      (   /dd/defs/os9.d):00004         * $Id$
                      (   /dd/defs/os9.d):00005         *
                      (   /dd/defs/os9.d):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/os9.d):00007         * Comment
                      (   /dd/defs/os9.d):00008         * ------------------------------------------------------------------
                      (   /dd/defs/os9.d):00009         *          1985/08/29  KMZ
                      (   /dd/defs/os9.d):00010         * Fixed DT.SBF/NFM values to 3/4
                      (   /dd/defs/os9.d):00011         *
                      (   /dd/defs/os9.d):00012         *          1985/09/01  KMZ
                      (   /dd/defs/os9.d):00013         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (   /dd/defs/os9.d):00014         *
                      (   /dd/defs/os9.d):00015         *          1985/09/03  KMZ/Robert F. Doggett
                      (   /dd/defs/os9.d):00016         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (   /dd/defs/os9.d):00017         * 68000 compatability.
                      (   /dd/defs/os9.d):00018         *
                      (   /dd/defs/os9.d):00019         *          1986/04/15  Mark G. Hawkins
                      (   /dd/defs/os9.d):00020         * F$AlHRAM System call added for COCO.
                      (   /dd/defs/os9.d):00021         *
                      (   /dd/defs/os9.d):00022         *          1986/09/08  Mark G. Hawkins
                      (   /dd/defs/os9.d):00023         * F$Alarm for COCO Clock Module.
                      (   /dd/defs/os9.d):00024         *
                      (   /dd/defs/os9.d):00025         *          1986/09/17  Mark G. Hawkins
                      (   /dd/defs/os9.d):00026         * SS.Tone For COCO.
                      (   /dd/defs/os9.d):00027         *
                      (   /dd/defs/os9.d):00028         *          1986/09/23  Mark G. Hawkins
                      (   /dd/defs/os9.d):00029         * Added F$NMLink and F$NMLoad for COCO.
                      (   /dd/defs/os9.d):00030         *
                      (   /dd/defs/os9.d):00031         *          1986/09/30  Mark G. Hawkins
                      (   /dd/defs/os9.d):00032         * Added Reserved User $70 to $7f in sytem calls.
                      (   /dd/defs/os9.d):00033         *
                      (   /dd/defs/os9.d):00034         *          1986/09/30  Mark G. Hawkins
                      (   /dd/defs/os9.d):00035         * Created Color Computer 3 Version of OS9Defs.
                      (   /dd/defs/os9.d):00036         *
                      (   /dd/defs/os9.d):00037         *          1998/10/03  Boisy G. Pitre
                      (   /dd/defs/os9.d):00038         * Consoldated Level 1/Level 2 os9defs.
                      (   /dd/defs/os9.d):00039         *
                      (   /dd/defs/os9.d):00040         *          2002/04/04  Boisy G. Pitre
                      (   /dd/defs/os9.d):00041         * Consoldated Level 2/Level 2 V3 os9defs.
                      (   /dd/defs/os9.d):00042         *
                      (   /dd/defs/os9.d):00043         *          2002/04/30  Boisy G. Pitre
                      (   /dd/defs/os9.d):00044         * Added NitrOS-9 definitions.
                      (   /dd/defs/os9.d):00045         *
                      (   /dd/defs/os9.d):00046         *          2003/05/30  Boisy G. Pitre
                      (   /dd/defs/os9.d):00047         * Added WD1002 sys vars to Level One section.
                      (   /dd/defs/os9.d):00048         *
                      (   /dd/defs/os9.d):00049         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/os9.d):00050         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (   /dd/defs/os9.d):00051         * changed the sizes from 2 to 3 bytes.
                      (   /dd/defs/os9.d):00052         * DT.NFM is now the same for both Level One and Level Two.
                      (   /dd/defs/os9.d):00053         * Added DT.CDFM type for future CD-ROM file manager
                      (   /dd/defs/os9.d):00054         *
                      (   /dd/defs/os9.d):00055         *          2003/11/05  Robert Gault
                      (   /dd/defs/os9.d):00056         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (   /dd/defs/os9.d):00057         *
                      (   /dd/defs/os9.d):00058         *              2005/11/02  P.Harvey-Smith
                      (   /dd/defs/os9.d):00059         * Added definitions for boot areas on Dragon computers.
                      (   /dd/defs/os9.d):00060         *
                      (   /dd/defs/os9.d):00061         *              2006/03/03  Boisy G. Pitre
                      (   /dd/defs/os9.d):00062         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (   /dd/defs/os9.d):00063         *
                      (   /dd/defs/os9.d):00064         * Added I$ModDsc call (modify device descriptor in system memory) BN/LCB
                      (   /dd/defs/os9.d):00065         *          2019/10/30  Bill Nobel, from discussions with L. Curtis Boyle
                      (   /dd/defs/os9.d):00066                        NAM       os9.d
                      (   /dd/defs/os9.d):00067                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (   /dd/defs/os9.d):00068         
                      (   /dd/defs/os9.d):00069         * Common definitions
     0001             (   /dd/defs/os9.d):00070         true           EQU       1                   useful name
     0000             (   /dd/defs/os9.d):00071         false          EQU       0                   useful name
                      (   /dd/defs/os9.d):00072         
                      (   /dd/defs/os9.d):00073                        PAG       
                      (   /dd/defs/os9.d):00074         *****************************************
                      (   /dd/defs/os9.d):00075         * System Service Request Code Definitions
                      (   /dd/defs/os9.d):00076         *
                      (   /dd/defs/os9.d):00077                        ORG       0
0000                  (   /dd/defs/os9.d):00078         F$Link         RMB       1                   Link to Module
0001                  (   /dd/defs/os9.d):00079         F$Load         RMB       1                   Load Module from File
0002                  (   /dd/defs/os9.d):00080         F$UnLink       RMB       1                   Unlink Module
0003                  (   /dd/defs/os9.d):00081         F$Fork         RMB       1                   Start New Process
0004                  (   /dd/defs/os9.d):00082         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (   /dd/defs/os9.d):00083         F$Chain        RMB       1                   Chain Process to New Module
0006                  (   /dd/defs/os9.d):00084         F$Exit         RMB       1                   Terminate Process
0007                  (   /dd/defs/os9.d):00085         F$Mem          RMB       1                   Set Memory Size
0008                  (   /dd/defs/os9.d):00086         F$Send         RMB       1                   Send Signal to Process
0009                  (   /dd/defs/os9.d):00087         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (   /dd/defs/os9.d):00088         F$Sleep        RMB       1                   Suspend Process
000B                  (   /dd/defs/os9.d):00089         F$SSpd         RMB       1                   Suspend Process
000C                  (   /dd/defs/os9.d):00090         F$ID           RMB       1                   Return Process ID
000D                  (   /dd/defs/os9.d):00091         F$SPrior       RMB       1                   Set Process Priority
000E                  (   /dd/defs/os9.d):00092         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (   /dd/defs/os9.d):00093         F$PErr         RMB       1                   Print Error
0010                  (   /dd/defs/os9.d):00094         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (   /dd/defs/os9.d):00095         F$CmpNam       RMB       1                   Compare Two Names
0012                  (   /dd/defs/os9.d):00096         F$SchBit       RMB       1                   Search Bit Map
0013                  (   /dd/defs/os9.d):00097         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (   /dd/defs/os9.d):00098         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (   /dd/defs/os9.d):00099         F$Time         RMB       1                   Get Current Time
0016                  (   /dd/defs/os9.d):00100         F$STime        RMB       1                   Set Current Time
0017                  (   /dd/defs/os9.d):00101         F$CRC          RMB       1                   Generate CRC ($17)
                      (   /dd/defs/os9.d):00102         
                      (   /dd/defs/os9.d):00103         
                      (   /dd/defs/os9.d):00104         * NitrOS-9 Level 2 system calls
0018                  (   /dd/defs/os9.d):00105         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (   /dd/defs/os9.d):00106         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (   /dd/defs/os9.d):00107         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (   /dd/defs/os9.d):00108         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (   /dd/defs/os9.d):00109         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (   /dd/defs/os9.d):00110         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (   /dd/defs/os9.d):00111         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (   /dd/defs/os9.d):00112                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (   /dd/defs/os9.d):00113         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (   /dd/defs/os9.d):00114         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (   /dd/defs/os9.d):00115         
                      (   /dd/defs/os9.d):00116         
                      (   /dd/defs/os9.d):00117         * NitrOS-9 Level 1 system call padding
                      (   /dd/defs/os9.d):00118         
                      (   /dd/defs/os9.d):00119         
0023                  (   /dd/defs/os9.d):00120         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (   /dd/defs/os9.d):00121         
                      (   /dd/defs/os9.d):00122         
                      (   /dd/defs/os9.d):00123                        ORG       $25
0025                  (   /dd/defs/os9.d):00124         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (   /dd/defs/os9.d):00125         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (   /dd/defs/os9.d):00126         
                      (   /dd/defs/os9.d):00127         
                      (   /dd/defs/os9.d):00128                        ORG       $27                 Beginning of System Reserved Calls
                      (   /dd/defs/os9.d):00129         * NitrOS-9 common system calls
0027                  (   /dd/defs/os9.d):00130         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (   /dd/defs/os9.d):00131         F$SRqMem       RMB       1                   System Memory Request
0029                  (   /dd/defs/os9.d):00132         F$SRtMem       RMB       1                   System Memory Return
002A                  (   /dd/defs/os9.d):00133         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (   /dd/defs/os9.d):00134         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (   /dd/defs/os9.d):00135         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (   /dd/defs/os9.d):00136         F$NProc        RMB       1                   Start Next Process
002E                  (   /dd/defs/os9.d):00137         F$VModul       RMB       1                   Validate Module
002F                  (   /dd/defs/os9.d):00138         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (   /dd/defs/os9.d):00139         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (   /dd/defs/os9.d):00140         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (   /dd/defs/os9.d):00141         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (   /dd/defs/os9.d):00142         F$IODel        RMB       1                   Delete I/O Module
                      (   /dd/defs/os9.d):00143         
                      (   /dd/defs/os9.d):00144         
0034                  (   /dd/defs/os9.d):00145         F$SLink        RMB       1                   System Link
0035                  (   /dd/defs/os9.d):00146         F$Boot         RMB       1                   Bootstrap System
0036                  (   /dd/defs/os9.d):00147         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (   /dd/defs/os9.d):00148         F$GProcP       RMB       1                   Get Process ptr
0038                  (   /dd/defs/os9.d):00149         F$Move         RMB       1                   Move Data (low bound first)
0039                  (   /dd/defs/os9.d):00150         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (   /dd/defs/os9.d):00151         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (   /dd/defs/os9.d):00152         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (   /dd/defs/os9.d):00153         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (   /dd/defs/os9.d):00154         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (   /dd/defs/os9.d):00155         F$FreeHB       RMB       1                   Get Free High Block
003F                  (   /dd/defs/os9.d):00156         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (   /dd/defs/os9.d):00157         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (   /dd/defs/os9.d):00158         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (   /dd/defs/os9.d):00159         F$ResTsk       RMB       1                   Reserve Task number
0043                  (   /dd/defs/os9.d):00160         F$RelTsk       RMB       1                   Release Task number
0044                  (   /dd/defs/os9.d):00161         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (   /dd/defs/os9.d):00162         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (   /dd/defs/os9.d):00163         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (   /dd/defs/os9.d):00164         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (   /dd/defs/os9.d):00165         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (   /dd/defs/os9.d):00166         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (   /dd/defs/os9.d):00167         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (   /dd/defs/os9.d):00168         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (   /dd/defs/os9.d):00169         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (   /dd/defs/os9.d):00170         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (   /dd/defs/os9.d):00171         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (   /dd/defs/os9.d):00172         F$MapBlk       RMB       1                   Map Specific Block
0050                  (   /dd/defs/os9.d):00173         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (   /dd/defs/os9.d):00174         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (   /dd/defs/os9.d):00175         F$GCMDir       RMB       1                   Pack module directory
0053                  (   /dd/defs/os9.d):00176         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (   /dd/defs/os9.d):00177         
                      (   /dd/defs/os9.d):00178         * Alan DeKok additions
0054                  (   /dd/defs/os9.d):00179         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (   /dd/defs/os9.d):00180         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (   /dd/defs/os9.d):00181         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (   /dd/defs/os9.d):00182         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (   /dd/defs/os9.d):00183         
                      (   /dd/defs/os9.d):00184         
                      (   /dd/defs/os9.d):00185         *
                      (   /dd/defs/os9.d):00186         * Numbers $70 through $7F are reserved for user definitions
                      (   /dd/defs/os9.d):00187         *
                      (   /dd/defs/os9.d):00188                        ORG       $70
                      (   /dd/defs/os9.d):00189         
                      (   /dd/defs/os9.d):00190         
                      (   /dd/defs/os9.d):00191         
                      (   /dd/defs/os9.d):00192         
0070                  (   /dd/defs/os9.d):00193         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (   /dd/defs/os9.d):00194         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (   /dd/defs/os9.d):00195         
0072                  (   /dd/defs/os9.d):00196                        RMB       $80-.               Reserved for user definitions
                      (   /dd/defs/os9.d):00197         
                      (   /dd/defs/os9.d):00198                        PAG       
                      (   /dd/defs/os9.d):00199         **************************************
                      (   /dd/defs/os9.d):00200         * I/O Service Request Code Definitions
                      (   /dd/defs/os9.d):00201         *
                      (   /dd/defs/os9.d):00202                        ORG       $80
0080                  (   /dd/defs/os9.d):00203         I$Attach       RMB       1                   Attach I/O Device
0081                  (   /dd/defs/os9.d):00204         I$Detach       RMB       1                   Detach I/O Device
0082                  (   /dd/defs/os9.d):00205         I$Dup          RMB       1                   Duplicate Path
0083                  (   /dd/defs/os9.d):00206         I$Create       RMB       1                   Create New File
0084                  (   /dd/defs/os9.d):00207         I$Open         RMB       1                   Open Existing File
0085                  (   /dd/defs/os9.d):00208         I$MakDir       RMB       1                   Make Directory File
0086                  (   /dd/defs/os9.d):00209         I$ChgDir       RMB       1                   Change Default Directory
0087                  (   /dd/defs/os9.d):00210         I$Delete       RMB       1                   Delete File
0088                  (   /dd/defs/os9.d):00211         I$Seek         RMB       1                   Change Current Position
0089                  (   /dd/defs/os9.d):00212         I$Read         RMB       1                   Read Data
008A                  (   /dd/defs/os9.d):00213         I$Write        RMB       1                   Write Data
008B                  (   /dd/defs/os9.d):00214         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (   /dd/defs/os9.d):00215         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (   /dd/defs/os9.d):00216         I$GetStt       RMB       1                   Get Path Status
008E                  (   /dd/defs/os9.d):00217         I$SetStt       RMB       1                   Set Path Status
008F                  (   /dd/defs/os9.d):00218         I$Close        RMB       1                   Close Path
0090                  (   /dd/defs/os9.d):00219         I$DeletX       RMB       1                   Delete from current exec dir
0091                  (   /dd/defs/os9.d):00220         I$ModDsc       RMB       1                   Modify SCF/RBF Descriptor in Memory
                      (   /dd/defs/os9.d):00221         
                      (   /dd/defs/os9.d):00222         *******************
                      (   /dd/defs/os9.d):00223         * File Access Modes
                      (   /dd/defs/os9.d):00224         *
     0001             (   /dd/defs/os9.d):00225         READ.          EQU       %00000001
     0002             (   /dd/defs/os9.d):00226         WRITE.         EQU       %00000010
     0003             (   /dd/defs/os9.d):00227         UPDAT.         EQU       READ.+WRITE.
     0004             (   /dd/defs/os9.d):00228         EXEC.          EQU       %00000100
     0008             (   /dd/defs/os9.d):00229         PREAD.         EQU       %00001000
     0010             (   /dd/defs/os9.d):00230         PWRIT.         EQU       %00010000
     0020             (   /dd/defs/os9.d):00231         PEXEC.         EQU       %00100000
     0040             (   /dd/defs/os9.d):00232         SHARE.         EQU       %01000000
     0080             (   /dd/defs/os9.d):00233         DIR.           EQU       %10000000
     0020             (   /dd/defs/os9.d):00234         ISIZ.          EQU       %00100000
                      (   /dd/defs/os9.d):00235         
                      (   /dd/defs/os9.d):00236         **************
                      (   /dd/defs/os9.d):00237         * Signal Codes
                      (   /dd/defs/os9.d):00238         *
                      (   /dd/defs/os9.d):00239                        ORG       0
0000                  (   /dd/defs/os9.d):00240         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (   /dd/defs/os9.d):00241         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (   /dd/defs/os9.d):00242         S$Abort        RMB       1                   Keyboard Abort
0003                  (   /dd/defs/os9.d):00243         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (   /dd/defs/os9.d):00244         S$Window       RMB       1                   Window Change
     0004             (   /dd/defs/os9.d):00245         S$HUP          EQU       S$Window            Hang Up
0005                  (   /dd/defs/os9.d):00246         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (   /dd/defs/os9.d):00247         
                      (   /dd/defs/os9.d):00248                        PAG       
                      (   /dd/defs/os9.d):00249         **********************************
                      (   /dd/defs/os9.d):00250         * Status Codes for GetStat/GetStat
                      (   /dd/defs/os9.d):00251         *
                      (   /dd/defs/os9.d):00252                        ORG       0
0000                  (   /dd/defs/os9.d):00253         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (   /dd/defs/os9.d):00254         SS.Ready       RMB       1                   Check for Device Ready
0002                  (   /dd/defs/os9.d):00255         SS.Size        RMB       1                   Read/Write File Size
0003                  (   /dd/defs/os9.d):00256         SS.Reset       RMB       1                   Device Restore
0004                  (   /dd/defs/os9.d):00257         SS.WTrk        RMB       1                   Device Write Track
0005                  (   /dd/defs/os9.d):00258         SS.Pos         RMB       1                   Get File Current Position
0006                  (   /dd/defs/os9.d):00259         SS.EOF         RMB       1                   Test for End of File
0007                  (   /dd/defs/os9.d):00260         SS.Link        RMB       1                   Link to Status routines
0008                  (   /dd/defs/os9.d):00261         SS.ULink       RMB       1                   Unlink Status routines
0009                  (   /dd/defs/os9.d):00262         SS.Feed        RMB       1                   Issue form feed
000A                  (   /dd/defs/os9.d):00263         SS.Frz         RMB       1                   Freeze DD. information
000B                  (   /dd/defs/os9.d):00264         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (   /dd/defs/os9.d):00265         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (   /dd/defs/os9.d):00266         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (   /dd/defs/os9.d):00267         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (   /dd/defs/os9.d):00268         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (   /dd/defs/os9.d):00269         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (   /dd/defs/os9.d):00270         SS.Lock        RMB       1                   Lock/Release record
0012                  (   /dd/defs/os9.d):00271         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (   /dd/defs/os9.d):00272         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (   /dd/defs/os9.d):00273         SS.BlkRd       RMB       1                   Block Read
0015                  (   /dd/defs/os9.d):00274         SS.BlkWr       RMB       1                   Block Write
0016                  (   /dd/defs/os9.d):00275         SS.Reten       RMB       1                   Retension cycle
0017                  (   /dd/defs/os9.d):00276         SS.WFM         RMB       1                   Write File Mark
0018                  (   /dd/defs/os9.d):00277         SS.RFM         RMB       1                   Read past File Mark
0019                  (   /dd/defs/os9.d):00278         SS.ELog        RMB       1                   Read Error Log
001A                  (   /dd/defs/os9.d):00279         SS.SSig        RMB       1                   Send signal on data ready
001B                  (   /dd/defs/os9.d):00280         SS.Relea       RMB       1                   Release device
001C                  (   /dd/defs/os9.d):00281         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (   /dd/defs/os9.d):00282         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (   /dd/defs/os9.d):00283         SS.Break       RMB       1                   Send break signal out acia
001E                  (   /dd/defs/os9.d):00284         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (   /dd/defs/os9.d):00285                        RMB       1                   Reserved
     0020             (   /dd/defs/os9.d):00286         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (   /dd/defs/os9.d):00287         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (   /dd/defs/os9.d):00288                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (   /dd/defs/os9.d):00289         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (   /dd/defs/os9.d):00290         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (   /dd/defs/os9.d):00291         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (   /dd/defs/os9.d):00292         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (   /dd/defs/os9.d):00293         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (   /dd/defs/os9.d):00294         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (   /dd/defs/os9.d):00295         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (   /dd/defs/os9.d):00296         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (   /dd/defs/os9.d):00297         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (   /dd/defs/os9.d):00298         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (   /dd/defs/os9.d):00299         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (   /dd/defs/os9.d):00300         
                      (   /dd/defs/os9.d):00301         * System Specific and User defined codes above $80
                      (   /dd/defs/os9.d):00302                        ORG       $80
0080                  (   /dd/defs/os9.d):00303         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (   /dd/defs/os9.d):00304         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (   /dd/defs/os9.d):00305         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (   /dd/defs/os9.d):00306         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (   /dd/defs/os9.d):00307         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (   /dd/defs/os9.d):00308         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (   /dd/defs/os9.d):00309         
                      (   /dd/defs/os9.d):00310         *               IFGT      Level-1
                      (   /dd/defs/os9.d):00311         * Level 2 Windowing
0086                  (   /dd/defs/os9.d):00312         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (   /dd/defs/os9.d):00313         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (   /dd/defs/os9.d):00314         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (   /dd/defs/os9.d):00315         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (   /dd/defs/os9.d):00316         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (   /dd/defs/os9.d):00317         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (   /dd/defs/os9.d):00318         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (   /dd/defs/os9.d):00319         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (   /dd/defs/os9.d):00320         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (   /dd/defs/os9.d):00321         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (   /dd/defs/os9.d):00322                        RMB       1                   Reserved
0091                  (   /dd/defs/os9.d):00323         SS.Palet       RMB       1                   Return palette information
0092                  (   /dd/defs/os9.d):00324         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (   /dd/defs/os9.d):00325         SS.ScTyp       RMB       1                   Get screen type information
0094                  (   /dd/defs/os9.d):00326         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (   /dd/defs/os9.d):00327         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (   /dd/defs/os9.d):00328         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (   /dd/defs/os9.d):00329         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (   /dd/defs/os9.d):00330         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (   /dd/defs/os9.d):00331         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (   /dd/defs/os9.d):00332         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (   /dd/defs/os9.d):00333         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (   /dd/defs/os9.d):00334         
                      (   /dd/defs/os9.d):00335         * sc6551 defined
     0099             (   /dd/defs/os9.d):00336         SS.CDSta       EQU       SS.GIP2
     009A             (   /dd/defs/os9.d):00337         SS.CDSig       EQU       SS.AnPal
     009B             (   /dd/defs/os9.d):00338         SS.CDRel       EQU       SS.FndBf
                      (   /dd/defs/os9.d):00339         * These are wide open in Level 1
                      (   /dd/defs/os9.d):00340         
                      (   /dd/defs/os9.d):00341         * sc6551 defined
                      (   /dd/defs/os9.d):00342         
                      (   /dd/defs/os9.d):00343                        ORG       $A0
                      (   /dd/defs/os9.d):00344         *
                      (   /dd/defs/os9.d):00345         * New Default SCF input buffer Set status call
00A0                  (   /dd/defs/os9.d):00346         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (   /dd/defs/os9.d):00347         SS.Hist        RMB       1                   Enable command-line history easily
                      (   /dd/defs/os9.d):00348         
                      (   /dd/defs/os9.d):00349         
                      (   /dd/defs/os9.d):00350                        ORG       $B0
                      (   /dd/defs/os9.d):00351         *
                      (   /dd/defs/os9.d):00352         * New WDDisk get/set status calls
00B0                  (   /dd/defs/os9.d):00353         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (   /dd/defs/os9.d):00354         
                      (   /dd/defs/os9.d):00355         *
                      (   /dd/defs/os9.d):00356         
                      (   /dd/defs/os9.d):00357         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (   /dd/defs/os9.d):00358         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (   /dd/defs/os9.d):00359         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (   /dd/defs/os9.d):00360         
     0081             (   /dd/defs/os9.d):00361         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (   /dd/defs/os9.d):00362         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (   /dd/defs/os9.d):00363         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (   /dd/defs/os9.d):00364         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (   /dd/defs/os9.d):00365         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (   /dd/defs/os9.d):00366         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (   /dd/defs/os9.d):00367         
                      (   /dd/defs/os9.d):00368         * SDisk 3 Definition Equates
     0080             (   /dd/defs/os9.d):00369         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (   /dd/defs/os9.d):00370         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (   /dd/defs/os9.d):00371         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (   /dd/defs/os9.d):00372         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (   /dd/defs/os9.d):00373         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (   /dd/defs/os9.d):00374         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (   /dd/defs/os9.d):00375         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (   /dd/defs/os9.d):00376         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (   /dd/defs/os9.d):00377         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return ($86)
                      (   /dd/defs/os9.d):00378         
                      (   /dd/defs/os9.d):00379         
                      (   /dd/defs/os9.d):00380                        TTL       Direct Page Definitions
                      (   /dd/defs/os9.d):00381                        PAG       
                      (   /dd/defs/os9.d):00382         
                      (   /dd/defs/os9.d):00383         **********************************
                      (   /dd/defs/os9.d):00384         * Direct Page Variable Definitions
                      (   /dd/defs/os9.d):00385         *
                      (   /dd/defs/os9.d):00386                        ORG       $00
0000                  (   /dd/defs/os9.d):00387         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (   /dd/defs/os9.d):00388         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (   /dd/defs/os9.d):00389         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (   /dd/defs/os9.d):00390                        RMB       5
0009                  (   /dd/defs/os9.d):00391         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (   /dd/defs/os9.d):00392         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (   /dd/defs/os9.d):00393         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (   /dd/defs/os9.d):00394         D.DWStat       RMB       2                   DriveWire statics page
0010                  (   /dd/defs/os9.d):00395         D.DWSrvID      RMB       1                   DriveWire server ID
                      (   /dd/defs/os9.d):00396         
     0011             (   /dd/defs/os9.d):00397         D.IRQTmp       EQU     $0011  ; 1 or 2 byte DP scratch var [strick yak adds]
                      (   /dd/defs/os9.d):00398         
                      (   /dd/defs/os9.d):00399                        ORG       $20
                      (   /dd/defs/os9.d):00400         
                      (   /dd/defs/os9.d):00401         
                      (   /dd/defs/os9.d):00402         * Level 1 DP vars
                      (   /dd/defs/os9.d):00403         
                      (   /dd/defs/os9.d):00404         *D.XSWI3        RMB       3
                      (   /dd/defs/os9.d):00405         *D.XSWI2        RMB       3
                      (   /dd/defs/os9.d):00406         *D.XFIRQ        RMB       3
                      (   /dd/defs/os9.d):00407         *D.XIRQ         RMB       3
                      (   /dd/defs/os9.d):00408         *D.XSWI         RMB       3
                      (   /dd/defs/os9.d):00409         *D.XNMI         RMB       3
                      (   /dd/defs/os9.d):00410         
                      (   /dd/defs/os9.d):00411         
                      (   /dd/defs/os9.d):00412         * Table Sizes
                      (   /dd/defs/os9.d):00413         
                      (   /dd/defs/os9.d):00414         
                      (   /dd/defs/os9.d):00415         * Level 2 DP vars
0020                  (   /dd/defs/os9.d):00416         D.Tasks        RMB       2                   Task User Table
0022                  (   /dd/defs/os9.d):00417         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (   /dd/defs/os9.d):00418         D.Init         RMB       2                   Initialization Module ptr
0026                  (   /dd/defs/os9.d):00419         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (   /dd/defs/os9.d):00420         D.Time         EQU       .                   System Time
0028                  (   /dd/defs/os9.d):00421         D.Year         RMB       1
0029                  (   /dd/defs/os9.d):00422         D.Month        RMB       1
002A                  (   /dd/defs/os9.d):00423         D.Day          RMB       1
002B                  (   /dd/defs/os9.d):00424         D.Hour         RMB       1
002C                  (   /dd/defs/os9.d):00425         D.Min          RMB       1
002D                  (   /dd/defs/os9.d):00426         D.Sec          RMB       1
002E                  (   /dd/defs/os9.d):00427         D.Tick         RMB       1
002F                  (   /dd/defs/os9.d):00428         D.Slice        RMB       1                   current slice remaining
0030                  (   /dd/defs/os9.d):00429         D.TSlice       RMB       1                   Ticks per Slice
0031                  (   /dd/defs/os9.d):00430         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (   /dd/defs/os9.d):00431         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (   /dd/defs/os9.d):00432         D.ErrCod       RMB       1                   Reset Error Code
0034                  (   /dd/defs/os9.d):00433         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (   /dd/defs/os9.d):00434         D.TkCnt        RMB       1                   Tick Counter
0036                  (   /dd/defs/os9.d):00435         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (   /dd/defs/os9.d):00436         D.BtSz         RMB       2                   Size of Boot
                      (   /dd/defs/os9.d):00437         
003A                  (   /dd/defs/os9.d):00438                        RMB       1                   Currently unused in NitrOS-9/6809
                      (   /dd/defs/os9.d):00439         
003B                  (   /dd/defs/os9.d):00440         D.CRC          RMB       1                   CRC checking mode flag
                      (   /dd/defs/os9.d):00441         
003C                  (   /dd/defs/os9.d):00442         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (   /dd/defs/os9.d):00443         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (   /dd/defs/os9.d):00444         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (   /dd/defs/os9.d):00445         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (   /dd/defs/os9.d):00446         
                      (   /dd/defs/os9.d):00447                        ORG       $40
0040                  (   /dd/defs/os9.d):00448         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (   /dd/defs/os9.d):00449         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (   /dd/defs/os9.d):00450         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (   /dd/defs/os9.d):00451         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (   /dd/defs/os9.d):00452         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (   /dd/defs/os9.d):00453         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (   /dd/defs/os9.d):00454         D.Proc         RMB       2                   Current Process ptr
0052                  (   /dd/defs/os9.d):00455         D.AProcQ       RMB       2                   Active Process Queue
0054                  (   /dd/defs/os9.d):00456         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (   /dd/defs/os9.d):00457         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (   /dd/defs/os9.d):00458         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (   /dd/defs/os9.d):00459         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (   /dd/defs/os9.d):00460         D.CldRes       RMB       2                   Cold Restart vector
005E                  (   /dd/defs/os9.d):00461         D.BtBug        RMB       3                   Boot debug information
0061                  (   /dd/defs/os9.d):00462         D.Pipe         RMB       2
                      (   /dd/defs/os9.d):00463         
                      (   /dd/defs/os9.d):00464                        ORG       $6B
006B                  (   /dd/defs/os9.d):00465         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (   /dd/defs/os9.d):00466         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (   /dd/defs/os9.d):00467         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (   /dd/defs/os9.d):00468         
                      (   /dd/defs/os9.d):00469                        ORG       $80
0080                  (   /dd/defs/os9.d):00470         D.DevTbl       RMB       2                   I/O Device Table
0082                  (   /dd/defs/os9.d):00471         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (   /dd/defs/os9.d):00472                        RMB       4                   reserved
0088                  (   /dd/defs/os9.d):00473         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (   /dd/defs/os9.d):00474         D.DMAReq       RMB       1                   DMA Request flag
                      (   /dd/defs/os9.d):00475         
                      (   /dd/defs/os9.d):00476         ********
                      (   /dd/defs/os9.d):00477         * CoCo 3 STUFF COMES NEXT
                      (   /dd/defs/os9.d):00478         * This area is used for the CoCo Hardware Registers
                      (   /dd/defs/os9.d):00479         *
                      (   /dd/defs/os9.d):00480                        ORG       $90
0090                  (   /dd/defs/os9.d):00481         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (   /dd/defs/os9.d):00482         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (   /dd/defs/os9.d):00483         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (   /dd/defs/os9.d):00484         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (   /dd/defs/os9.d):00485         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (   /dd/defs/os9.d):00486         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (   /dd/defs/os9.d):00487         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (   /dd/defs/os9.d):00488         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (   /dd/defs/os9.d):00489         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (   /dd/defs/os9.d):00490         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (   /dd/defs/os9.d):00491         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (   /dd/defs/os9.d):00492         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (   /dd/defs/os9.d):00493         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (   /dd/defs/os9.d):00494         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (   /dd/defs/os9.d):00495         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (   /dd/defs/os9.d):00496         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (   /dd/defs/os9.d):00497         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (   /dd/defs/os9.d):00498         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (   /dd/defs/os9.d):00499         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (   /dd/defs/os9.d):00500         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (   /dd/defs/os9.d):00501         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (   /dd/defs/os9.d):00502         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (   /dd/defs/os9.d):00503         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (   /dd/defs/os9.d):00504         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (   /dd/defs/os9.d):00505         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (   /dd/defs/os9.d):00506         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (   /dd/defs/os9.d):00507         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (   /dd/defs/os9.d):00508         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (   /dd/defs/os9.d):00509         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (   /dd/defs/os9.d):00510         D.Clock2       RMB       2                   CC Clock2 entry address
                      (   /dd/defs/os9.d):00511                        ORG       $C0
00C0                  (   /dd/defs/os9.d):00512         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (   /dd/defs/os9.d):00513         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (   /dd/defs/os9.d):00514         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (   /dd/defs/os9.d):00515         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (   /dd/defs/os9.d):00516         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (   /dd/defs/os9.d):00517         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (   /dd/defs/os9.d):00518         D.SysStk       RMB       2                   System stack
00CE                  (   /dd/defs/os9.d):00519         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (   /dd/defs/os9.d):00520         D.SysTsk       RMB       1                   System Task number
                      (   /dd/defs/os9.d):00521                        ORG       $E0
00E0                  (   /dd/defs/os9.d):00522         D.Clock        RMB       2
00E2                  (   /dd/defs/os9.d):00523         D.XSWI3        RMB       2
00E4                  (   /dd/defs/os9.d):00524         D.XSWI2        RMB       2
00E6                  (   /dd/defs/os9.d):00525         D.XFIRQ        RMB       2
00E8                  (   /dd/defs/os9.d):00526         D.XIRQ         RMB       2
00EA                  (   /dd/defs/os9.d):00527         D.XSWI         RMB       2
00EC                  (   /dd/defs/os9.d):00528         D.XNMI         RMB       2
00EE                  (   /dd/defs/os9.d):00529         D.ErrRst       RMB       2
00F0                  (   /dd/defs/os9.d):00530         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (   /dd/defs/os9.d):00531         D.SWI3         RMB       2
00F4                  (   /dd/defs/os9.d):00532         D.SWI2         RMB       2
00F6                  (   /dd/defs/os9.d):00533         D.FIRQ         RMB       2
00F8                  (   /dd/defs/os9.d):00534         D.IRQ          RMB       2
00FA                  (   /dd/defs/os9.d):00535         D.SWI          RMB       2
00FC                  (   /dd/defs/os9.d):00536         D.NMI          RMB       2
                      (   /dd/defs/os9.d):00537         
                      (   /dd/defs/os9.d):00538         *************************
                      (   /dd/defs/os9.d):00539         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (   /dd/defs/os9.d):00540         * and for bytes in the system memory map at D.SysMem.
                      (   /dd/defs/os9.d):00541         * A value of 0 indicates an unused/unassigned block.
                      (   /dd/defs/os9.d):00542         * In the code, block assignment often involves incrementing a value
                      (   /dd/defs/os9.d):00543         * from 0 to 1 rather than explict use of RAMinUse.
                      (   /dd/defs/os9.d):00544         *
     0080             (   /dd/defs/os9.d):00545         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (   /dd/defs/os9.d):00546         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (   /dd/defs/os9.d):00547         ModBlock       EQU       %00000010           Module in Block
     0001             (   /dd/defs/os9.d):00548         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (   /dd/defs/os9.d):00549         *
                      (   /dd/defs/os9.d):00550         * Service Dispatch Table special entries
                      (   /dd/defs/os9.d):00551         *
     00FE             (   /dd/defs/os9.d):00552         IOEntry        EQU       254
                      (   /dd/defs/os9.d):00553         
                      (   /dd/defs/os9.d):00554         
                      (   /dd/defs/os9.d):00555                        TTL       Structure Formats
                      (   /dd/defs/os9.d):00556                        PAG       
                      (   /dd/defs/os9.d):00557         ************************************
                      (   /dd/defs/os9.d):00558         * Module Directory Entry Definitions
                      (   /dd/defs/os9.d):00559         *
                      (   /dd/defs/os9.d):00560                        ORG       0
0000                  (   /dd/defs/os9.d):00561         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (   /dd/defs/os9.d):00562         MD$MBSiz       RMB       2                   Memory Block size
0004                  (   /dd/defs/os9.d):00563         MD$MPtr        RMB       2                   Module ptr
0006                  (   /dd/defs/os9.d):00564         MD$Link        RMB       2                   Module Link count
     0008             (   /dd/defs/os9.d):00565         MD$ESize       EQU       .                   Module Directory Entry size
                      (   /dd/defs/os9.d):00566         
                      (   /dd/defs/os9.d):00567         ************************************
                      (   /dd/defs/os9.d):00568         * Module Definitions
                      (   /dd/defs/os9.d):00569         *
                      (   /dd/defs/os9.d):00570         * Universal Module Offsets
                      (   /dd/defs/os9.d):00571         *
                      (   /dd/defs/os9.d):00572                        ORG       0
0000                  (   /dd/defs/os9.d):00573         M$ID           RMB       2                   ID Code
0002                  (   /dd/defs/os9.d):00574         M$Size         RMB       2                   Module Size
0004                  (   /dd/defs/os9.d):00575         M$Name         RMB       2                   Module Name
0006                  (   /dd/defs/os9.d):00576         M$Type         RMB       1                   Type / Language
0007                  (   /dd/defs/os9.d):00577         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (   /dd/defs/os9.d):00578         M$Parity       RMB       1                   Header Parity
     0009             (   /dd/defs/os9.d):00579         M$IDSize       EQU       .                   Module ID Size
                      (   /dd/defs/os9.d):00580         *
                      (   /dd/defs/os9.d):00581         * Type-Dependent Module Offsets
                      (   /dd/defs/os9.d):00582         *
                      (   /dd/defs/os9.d):00583         * System, File Manager, Device Driver, Program Module
                      (   /dd/defs/os9.d):00584         *
0009                  (   /dd/defs/os9.d):00585         M$Exec         RMB       2                   Execution Entry Offset
                      (   /dd/defs/os9.d):00586         *
                      (   /dd/defs/os9.d):00587         * Device Driver, Program Module
                      (   /dd/defs/os9.d):00588         *
000B                  (   /dd/defs/os9.d):00589         M$Mem          RMB       2                   Stack Requirement
                      (   /dd/defs/os9.d):00590         *
                      (   /dd/defs/os9.d):00591         * Device Driver, Device Descriptor Module
                      (   /dd/defs/os9.d):00592         *
000D                  (   /dd/defs/os9.d):00593         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (   /dd/defs/os9.d):00594         *
                      (   /dd/defs/os9.d):00595         * Device Descriptor Module
                      (   /dd/defs/os9.d):00596         *
                      (   /dd/defs/os9.d):00597                        ORG       M$IDSize
0009                  (   /dd/defs/os9.d):00598         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (   /dd/defs/os9.d):00599         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (   /dd/defs/os9.d):00600                        RMB       1                   M$Mode (defined above)
000E                  (   /dd/defs/os9.d):00601         M$Port         RMB       3                   Port Address
0011                  (   /dd/defs/os9.d):00602         M$Opt          RMB       1                   Device Default Options
0012                  (   /dd/defs/os9.d):00603         M$DTyp         RMB       1                   Device Type
     0012             (   /dd/defs/os9.d):00604         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (   /dd/defs/os9.d):00605         *
                      (   /dd/defs/os9.d):00606         * Configuration Module Entry Offsets
                      (   /dd/defs/os9.d):00607         *
                      (   /dd/defs/os9.d):00608                        ORG       M$IDSize
0009                  (   /dd/defs/os9.d):00609         MaxMem         RMB       3                   Maximum Free Memory
000C                  (   /dd/defs/os9.d):00610         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (   /dd/defs/os9.d):00611         DevCnt         RMB       1                   Entries in Device Table
000E                  (   /dd/defs/os9.d):00612         InitStr        RMB       2                   Initial Module Name
0010                  (   /dd/defs/os9.d):00613         SysStr         RMB       2                   System Device Name
0012                  (   /dd/defs/os9.d):00614         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (   /dd/defs/os9.d):00615         BootStr        RMB       2                   Bootstrap Module name
0016                  (   /dd/defs/os9.d):00616         ProtFlag       RMB       1                   Write protect enable flag
                      (   /dd/defs/os9.d):00617         
0017                  (   /dd/defs/os9.d):00618         OSLevel        RMB       1                   OS level
0018                  (   /dd/defs/os9.d):00619         OSVer          RMB       1                   OS version
0019                  (   /dd/defs/os9.d):00620         OSMajor        RMB       1                   OS major
001A                  (   /dd/defs/os9.d):00621         OSMinor        RMB       1                   OS minor
001B                  (   /dd/defs/os9.d):00622         Feature1       RMB       1                   feature byte 1
001C                  (   /dd/defs/os9.d):00623         Feature2       RMB       1                   feature byte 2
001D                  (   /dd/defs/os9.d):00624         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (   /dd/defs/os9.d):00625         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (   /dd/defs/os9.d):00626                        RMB       4                   reserved for future use
                      (   /dd/defs/os9.d):00627         
                      (   /dd/defs/os9.d):00628         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (   /dd/defs/os9.d):00629         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (   /dd/defs/os9.d):00630         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (   /dd/defs/os9.d):00631         KeyRptS        RMB       1                   Key repeat start constant
0029                  (   /dd/defs/os9.d):00632         KeyRptD        RMB       1                   Key repeat delay constant
                      (   /dd/defs/os9.d):00633         
                      (   /dd/defs/os9.d):00634         * Feature1 byte definitions
     0001             (   /dd/defs/os9.d):00635         CRCOn          EQU       %00000001           CRC checking on
     0000             (   /dd/defs/os9.d):00636         CRCOff         EQU       %00000000           CRC checking off
     0000             (   /dd/defs/os9.d):00637         Proc6809       EQU       %00000000           6809 procesor
     0002             (   /dd/defs/os9.d):00638         Proc6309       EQU       %00000010           6309 procesor
                      (   /dd/defs/os9.d):00639         
                      (   /dd/defs/os9.d):00640                        PAG       
                      (   /dd/defs/os9.d):00641         **************************
                      (   /dd/defs/os9.d):00642         * Module Field Definitions
                      (   /dd/defs/os9.d):00643         *
                      (   /dd/defs/os9.d):00644         * ID Field - First two bytes of a NitrOS-9 module
                      (   /dd/defs/os9.d):00645         *
     0087             (   /dd/defs/os9.d):00646         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (   /dd/defs/os9.d):00647         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (   /dd/defs/os9.d):00648         M$ID12         EQU       M$ID1*256+M$ID2
                      (   /dd/defs/os9.d):00649         
                      (   /dd/defs/os9.d):00650         *
                      (   /dd/defs/os9.d):00651         * Module Type/Language Field Masks
                      (   /dd/defs/os9.d):00652         *
     00F0             (   /dd/defs/os9.d):00653         TypeMask       EQU       %11110000           Type Field
     000F             (   /dd/defs/os9.d):00654         LangMask       EQU       %00001111           Language Field
                      (   /dd/defs/os9.d):00655         
                      (   /dd/defs/os9.d):00656         *
                      (   /dd/defs/os9.d):00657         * Module Type Values
                      (   /dd/defs/os9.d):00658         *
     00F0             (   /dd/defs/os9.d):00659         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (   /dd/defs/os9.d):00660         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (   /dd/defs/os9.d):00661         FlMgr          EQU       $D0                 File Manager
     00C0             (   /dd/defs/os9.d):00662         Systm          EQU       $C0                 System Module
     0050             (   /dd/defs/os9.d):00663         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (   /dd/defs/os9.d):00664         Data           EQU       $40                 Data Module
     0030             (   /dd/defs/os9.d):00665         Multi          EQU       $30                 Multi-Module
     0020             (   /dd/defs/os9.d):00666         Sbrtn          EQU       $20                 Subroutine Module
     0010             (   /dd/defs/os9.d):00667         Prgrm          EQU       $10                 Program Module
                      (   /dd/defs/os9.d):00668         
                      (   /dd/defs/os9.d):00669         *
                      (   /dd/defs/os9.d):00670         * Module Language Values
                      (   /dd/defs/os9.d):00671         *
     0001             (   /dd/defs/os9.d):00672         Objct          EQU       1                   6809 Object Code Module
     0002             (   /dd/defs/os9.d):00673         ICode          EQU       2                   Basic09 I-code
     0003             (   /dd/defs/os9.d):00674         PCode          EQU       3                   Pascal P-code
     0004             (   /dd/defs/os9.d):00675         CCode          EQU       4                   C I-code
     0005             (   /dd/defs/os9.d):00676         CblCode        EQU       5                   Cobol I-code
     0006             (   /dd/defs/os9.d):00677         FrtnCode       EQU       6                   Fortran I-code
     0007             (   /dd/defs/os9.d):00678         Obj6309        EQU       7                   6309 object code
                      (   /dd/defs/os9.d):00679         *
                      (   /dd/defs/os9.d):00680         * Module Attributes / Revision byte
                      (   /dd/defs/os9.d):00681         *
                      (   /dd/defs/os9.d):00682         * Field Masks
                      (   /dd/defs/os9.d):00683         *
     00F0             (   /dd/defs/os9.d):00684         AttrMask       EQU       %11110000           Attributes Field
     000F             (   /dd/defs/os9.d):00685         RevsMask       EQU       %00001111           Revision Level Field
                      (   /dd/defs/os9.d):00686         *
                      (   /dd/defs/os9.d):00687         * Attribute Flags
                      (   /dd/defs/os9.d):00688         *
     0080             (   /dd/defs/os9.d):00689         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (   /dd/defs/os9.d):00690         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (   /dd/defs/os9.d):00691         ModNat         EQU       %00100000           6309 native mode attribute
     0040             (   /dd/defs/os9.d):00692         BufWrits       EQU       ModProt             SCF buffered read supported (Coco only at this point)
     0010             (   /dd/defs/os9.d):00693         BufReads       EQU       %00010000           SCF buffered write supported (Coco only at this point)
                      (   /dd/defs/os9.d):00694         * LCB - propose we add Buffered Read/Buffered Write attribute bits for Coco (in descriptors and
                      (   /dd/defs/os9.d):00695         *   drivers for SCF), with one of them replacing ModProt. SCF would check Read/ReadLn and Write/WritLn
                      (   /dd/defs/os9.d):00696         *   calls, and if both the driver and descriptor have the appropriate bit set, it would do buffered 32
                      (   /dd/defs/os9.d):00697         *   byte (for now) reads/writes like the Grfdrv write call does now, for all bytes that are ASCII >$1F
                      (   /dd/defs/os9.d):00698         *   (ie non-control chars, which need special processing)
                      (   /dd/defs/os9.d):00699         
                      (   /dd/defs/os9.d):00700         
                      (   /dd/defs/os9.d):00701         ********************
                      (   /dd/defs/os9.d):00702         * Device Type Values
                      (   /dd/defs/os9.d):00703         *
                      (   /dd/defs/os9.d):00704         * These values define various classes of devices, which are
                      (   /dd/defs/os9.d):00705         * managed by a file manager module.  The Device Type is embedded
                      (   /dd/defs/os9.d):00706         * in a device's device descriptor.
                      (   /dd/defs/os9.d):00707         *
     0000             (   /dd/defs/os9.d):00708         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (   /dd/defs/os9.d):00709         DT.RBF         EQU       1                   Random Block File Manager
     0002             (   /dd/defs/os9.d):00710         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (   /dd/defs/os9.d):00711         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (   /dd/defs/os9.d):00712         DT.NFM         EQU       4                   Network File Manager
     0005             (   /dd/defs/os9.d):00713         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (   /dd/defs/os9.d):00714         DT.RFM                  EQU             6                                       Remote File Manager
                      (   /dd/defs/os9.d):00715         
                      (   /dd/defs/os9.d):00716         *********************
                      (   /dd/defs/os9.d):00717         * CRC Result Constant
                      (   /dd/defs/os9.d):00718         *
     0080             (   /dd/defs/os9.d):00719         CRCCon1        EQU       $80
     0FE3             (   /dd/defs/os9.d):00720         CRCCon23       EQU       $0FE3
                      (   /dd/defs/os9.d):00721         
                      (   /dd/defs/os9.d):00722                        TTL       Process Information
                      (   /dd/defs/os9.d):00723                        PAG       
                      (   /dd/defs/os9.d):00724         ********************************
                      (   /dd/defs/os9.d):00725         * Process Descriptor Definitions
                      (   /dd/defs/os9.d):00726         *
                      (   /dd/defs/os9.d):00727         
                      (   /dd/defs/os9.d):00728         * Level 1 process descriptor defs
                      (   /dd/defs/os9.d):00729         
                      (   /dd/defs/os9.d):00730         
                      (   /dd/defs/os9.d):00731         *
                      (   /dd/defs/os9.d):00732         * Process State Flags
                      (   /dd/defs/os9.d):00733         *
                      (   /dd/defs/os9.d):00734         
                      (   /dd/defs/os9.d):00735         
                      (   /dd/defs/os9.d):00736         * Level 2 process descriptor defs
     0010             (   /dd/defs/os9.d):00737         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (   /dd/defs/os9.d):00738         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (   /dd/defs/os9.d):00739         NumPaths       EQU       16                  Number of Local Paths
                      (   /dd/defs/os9.d):00740         
                      (   /dd/defs/os9.d):00741                        ORG       0
0000                  (   /dd/defs/os9.d):00742         P$ID           RMB       1                   Process ID
0001                  (   /dd/defs/os9.d):00743         P$PID          RMB       1                   Parent's ID
0002                  (   /dd/defs/os9.d):00744         P$SID          RMB       1                   Sibling's ID
0003                  (   /dd/defs/os9.d):00745         P$CID          RMB       1                   Child's ID
0004                  (   /dd/defs/os9.d):00746         P$SP           RMB       2                   Stack ptr
0006                  (   /dd/defs/os9.d):00747         P$Task         RMB       1                   Task Number
0007                  (   /dd/defs/os9.d):00748         P$PagCnt       RMB       1                   Memory Page Count
0008                  (   /dd/defs/os9.d):00749         P$User         RMB       2                   User Index
000A                  (   /dd/defs/os9.d):00750         P$Prior        RMB       1                   Priority
000B                  (   /dd/defs/os9.d):00751         P$Age          RMB       1                   Age
000C                  (   /dd/defs/os9.d):00752         P$State        RMB       1                   Status
000D                  (   /dd/defs/os9.d):00753         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (   /dd/defs/os9.d):00754         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (   /dd/defs/os9.d):00755         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (   /dd/defs/os9.d):00756         P$PModul       RMB       2                   Primary Module
0013                  (   /dd/defs/os9.d):00757         P$SWI          RMB       2                   SWI Entry Point
0015                  (   /dd/defs/os9.d):00758         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (   /dd/defs/os9.d):00759         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (   /dd/defs/os9.d):00760         P$Signal       RMB       1                   Signal Code
001A                  (   /dd/defs/os9.d):00761         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (   /dd/defs/os9.d):00762         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (   /dd/defs/os9.d):00763         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (   /dd/defs/os9.d):00764                        RMB       $20-.               unused
0020                  (   /dd/defs/os9.d):00765         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (   /dd/defs/os9.d):00766         P$Path         RMB       NumPaths            I/O Path Table
0040                  (   /dd/defs/os9.d):00767         P$DATImg       RMB       64                  DAT Image
0080                  (   /dd/defs/os9.d):00768         P$Links        RMB       32                  Block Link counts
00A0                  (   /dd/defs/os9.d):00769         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (   /dd/defs/os9.d):00770         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (   /dd/defs/os9.d):00771         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (   /dd/defs/os9.d):00772         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (   /dd/defs/os9.d):00773         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (   /dd/defs/os9.d):00774         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (   /dd/defs/os9.d):00775         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (   /dd/defs/os9.d):00776         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (   /dd/defs/os9.d):00777         P$Alarm        RMB       6
00C9                  (   /dd/defs/os9.d):00778                        RMB       $200-.              Local stack
     0200             (   /dd/defs/os9.d):00779         P$Stack        EQU       .                   Top of Stack
     0200             (   /dd/defs/os9.d):00780         P$Size         EQU       .                   Size of Process Descriptor
                      (   /dd/defs/os9.d):00781         
                      (   /dd/defs/os9.d):00782         *
                      (   /dd/defs/os9.d):00783         * Process State Flags
                      (   /dd/defs/os9.d):00784         *
     0080             (   /dd/defs/os9.d):00785         SysState       EQU       %10000000
     0040             (   /dd/defs/os9.d):00786         TimSleep       EQU       %01000000
     0020             (   /dd/defs/os9.d):00787         TimOut         EQU       %00100000
     0010             (   /dd/defs/os9.d):00788         ImgChg         EQU       %00010000
     0008             (   /dd/defs/os9.d):00789         Suspend        EQU       %00001000
     0002             (   /dd/defs/os9.d):00790         Condem         EQU       %00000010
     0001             (   /dd/defs/os9.d):00791         Dead           EQU       %00000001
                      (   /dd/defs/os9.d):00792         
                      (   /dd/defs/os9.d):00793         
                      (   /dd/defs/os9.d):00794                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (   /dd/defs/os9.d):00795                        PAG       
                      (   /dd/defs/os9.d):00796         *************************
                      (   /dd/defs/os9.d):00797         * Path Descriptor Offsets
                      (   /dd/defs/os9.d):00798         *
                      (   /dd/defs/os9.d):00799                        ORG       0
0000                  (   /dd/defs/os9.d):00800         PD.PD          RMB       1                   Path Number
0001                  (   /dd/defs/os9.d):00801         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (   /dd/defs/os9.d):00802         PD.CNT         RMB       1                   Number of Open Images
0003                  (   /dd/defs/os9.d):00803         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (   /dd/defs/os9.d):00804         PD.CPR         RMB       1                   Current Process
0006                  (   /dd/defs/os9.d):00805         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (   /dd/defs/os9.d):00806         PD.BUF         RMB       2                   Buffer Address
000A                  (   /dd/defs/os9.d):00807         PD.FST         RMB       32-.                File Manager's Storage
     0020             (   /dd/defs/os9.d):00808         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (   /dd/defs/os9.d):00809         PD.DTP         RMB       1                   Device Type
0021                  (   /dd/defs/os9.d):00810                        RMB       64-.                Path options
     0040             (   /dd/defs/os9.d):00811         PDSIZE         EQU       .
                      (   /dd/defs/os9.d):00812         
                      (   /dd/defs/os9.d):00813         *
                      (   /dd/defs/os9.d):00814         * Pathlist Special Symbols
                      (   /dd/defs/os9.d):00815         *
     002F             (   /dd/defs/os9.d):00816         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (   /dd/defs/os9.d):00817         PDIR           EQU       '.                  Directory
     0040             (   /dd/defs/os9.d):00818         PENTIR         EQU       '@                  Entire Device
                      (   /dd/defs/os9.d):00819         
                      (   /dd/defs/os9.d):00820                        PAG       
                      (   /dd/defs/os9.d):00821         ****************************
                      (   /dd/defs/os9.d):00822         * File Manager Entry Offsets
                      (   /dd/defs/os9.d):00823         *
                      (   /dd/defs/os9.d):00824                        ORG       0
0000                  (   /dd/defs/os9.d):00825         FMCREA         RMB       3                   Create (Open New) File
0003                  (   /dd/defs/os9.d):00826         FMOPEN         RMB       3                   Open File
0006                  (   /dd/defs/os9.d):00827         FMMDIR         RMB       3                   Make Directory
0009                  (   /dd/defs/os9.d):00828         FMCDIR         RMB       3                   Change Directory
000C                  (   /dd/defs/os9.d):00829         FMDLET         RMB       3                   Delete File
000F                  (   /dd/defs/os9.d):00830         FMSEEK         RMB       3                   Position File
0012                  (   /dd/defs/os9.d):00831         FMREAD         RMB       3                   Read from File
0015                  (   /dd/defs/os9.d):00832         FMWRIT         RMB       3                   Write to File
0018                  (   /dd/defs/os9.d):00833         FMRDLN         RMB       3                   ReadLn
001B                  (   /dd/defs/os9.d):00834         FMWRLN         RMB       3                   WritLn
001E                  (   /dd/defs/os9.d):00835         FMGSTA         RMB       3                   Get File Status
0021                  (   /dd/defs/os9.d):00836         FMSSTA         RMB       3                   Set File Status
0024                  (   /dd/defs/os9.d):00837         FMCLOS         RMB       3                   Close File
                      (   /dd/defs/os9.d):00838         
                      (   /dd/defs/os9.d):00839         *****************************
                      (   /dd/defs/os9.d):00840         * Device Driver Entry Offsets
                      (   /dd/defs/os9.d):00841         *
                      (   /dd/defs/os9.d):00842                        ORG       0
0000                  (   /dd/defs/os9.d):00843         D$INIT         RMB       3                   Device Initialization
0003                  (   /dd/defs/os9.d):00844         D$READ         RMB       3                   Read from Device
0006                  (   /dd/defs/os9.d):00845         D$WRIT         RMB       3                   Write to Device
0009                  (   /dd/defs/os9.d):00846         D$GSTA         RMB       3                   Get Device Status
000C                  (   /dd/defs/os9.d):00847         D$PSTA         RMB       3                   Put Device Status
000F                  (   /dd/defs/os9.d):00848         D$TERM         RMB       3                   Device Termination
                      (   /dd/defs/os9.d):00849         
                      (   /dd/defs/os9.d):00850         *********************
                      (   /dd/defs/os9.d):00851         * Device Table Format
                      (   /dd/defs/os9.d):00852         *
                      (   /dd/defs/os9.d):00853                        ORG       0
0000                  (   /dd/defs/os9.d):00854         V$DRIV         RMB       2                   Device Driver module
0002                  (   /dd/defs/os9.d):00855         V$STAT         RMB       2                   Device Driver Static storage
0004                  (   /dd/defs/os9.d):00856         V$DESC         RMB       2                   Device Descriptor module
0006                  (   /dd/defs/os9.d):00857         V$FMGR         RMB       2                   File Manager module
0008                  (   /dd/defs/os9.d):00858         V$USRS         RMB       1                   use count
0009                  (   /dd/defs/os9.d):00859         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (   /dd/defs/os9.d):00860         V$FMGREX       RMB       2                   File Manager execution address
     000D             (   /dd/defs/os9.d):00861         DEVSIZ         EQU       .
                      (   /dd/defs/os9.d):00862         
                      (   /dd/defs/os9.d):00863         *******************************
                      (   /dd/defs/os9.d):00864         * Device Static Storage Offsets
                      (   /dd/defs/os9.d):00865         *
                      (   /dd/defs/os9.d):00866                        ORG       0
0000                  (   /dd/defs/os9.d):00867         V.PAGE         RMB       1                   Port Extended Address
0001                  (   /dd/defs/os9.d):00868         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (   /dd/defs/os9.d):00869         V.LPRC         RMB       1                   Last Active Process ID
0004                  (   /dd/defs/os9.d):00870         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (   /dd/defs/os9.d):00871         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (   /dd/defs/os9.d):00872         V.USER         EQU       .                   Driver Allocation Origin
                      (   /dd/defs/os9.d):00873         
                      (   /dd/defs/os9.d):00874         ********************************
                      (   /dd/defs/os9.d):00875         * Interrupt Polling Table Format
                      (   /dd/defs/os9.d):00876         *
                      (   /dd/defs/os9.d):00877                        ORG       0
0000                  (   /dd/defs/os9.d):00878         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (   /dd/defs/os9.d):00879         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (   /dd/defs/os9.d):00880         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (   /dd/defs/os9.d):00881         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (   /dd/defs/os9.d):00882         Q$STAT         RMB       2                   Static Storage Address
0008                  (   /dd/defs/os9.d):00883         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
0009                  (   /dd/defs/os9.d):00884         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
     000B             (   /dd/defs/os9.d):00885         POLSIZ         EQU       .
                      (   /dd/defs/os9.d):00886         
                      (   /dd/defs/os9.d):00887         ********************
                      (   /dd/defs/os9.d):00888         * VIRQ packet format
                      (   /dd/defs/os9.d):00889         *
                      (   /dd/defs/os9.d):00890                        ORG       0
0000                  (   /dd/defs/os9.d):00891         Vi.Cnt         RMB       2                   count down counter
0002                  (   /dd/defs/os9.d):00892         Vi.Rst         RMB       2                   reset value for counter
0004                  (   /dd/defs/os9.d):00893         Vi.Stat        RMB       1                   status byte
     0005             (   /dd/defs/os9.d):00894         Vi.PkSz        EQU       .
                      (   /dd/defs/os9.d):00895         
     0001             (   /dd/defs/os9.d):00896         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (   /dd/defs/os9.d):00897         
                      (   /dd/defs/os9.d):00898                        PAG       
                      (   /dd/defs/os9.d):00899         *************************************
                      (   /dd/defs/os9.d):00900         * Machine Characteristics Definitions
                      (   /dd/defs/os9.d):00901         *
     0000             (   /dd/defs/os9.d):00902         R$CC           EQU       0                   Condition Codes register
     0001             (   /dd/defs/os9.d):00903         R$A            EQU       1                   A Accumulator
     0002             (   /dd/defs/os9.d):00904         R$B            EQU       2                   B Accumulator
     0001             (   /dd/defs/os9.d):00905         R$D            EQU       R$A                 Combined A:B Accumulator
                      (   /dd/defs/os9.d):00906                        IFNE      H6309
0005                  (   /dd/defs/os9.d):00907         R$E            EQU       3
0005                  (   /dd/defs/os9.d):00908         R$F            EQU       4
0005                  (   /dd/defs/os9.d):00909         R$W            EQU       R$E
0005                  (   /dd/defs/os9.d):00910         R$Q            EQU       R$A
0005                  (   /dd/defs/os9.d):00911         R$DP           EQU       5
0005                  (   /dd/defs/os9.d):00912         R$X            EQU       6
0005                  (   /dd/defs/os9.d):00913         R$Y            EQU       8
0005                  (   /dd/defs/os9.d):00914         R$U            EQU       10
0005                  (   /dd/defs/os9.d):00915         R$PC           EQU       12
0005                  (   /dd/defs/os9.d):00916         R$Size         EQU       14
                      (   /dd/defs/os9.d):00917                        ELSE
     0003             (   /dd/defs/os9.d):00918         R$DP           EQU       3                   Direct Page register
     0004             (   /dd/defs/os9.d):00919         R$X            EQU       4                   X Index register
     0006             (   /dd/defs/os9.d):00920         R$Y            EQU       6                   Y Index register
     0008             (   /dd/defs/os9.d):00921         R$U            EQU       8                   User Stack register
     000A             (   /dd/defs/os9.d):00922         R$PC           EQU       10                  Program Counter register
     000C             (   /dd/defs/os9.d):00923         R$Size         EQU       12                  Total register package size
                      (   /dd/defs/os9.d):00924                        ENDC
                      (   /dd/defs/os9.d):00925         
                      (   /dd/defs/os9.d):00926         * MD register masks
                      (   /dd/defs/os9.d):00927         * 6309 definitions
     0080             (   /dd/defs/os9.d):00928         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (   /dd/defs/os9.d):00929         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (   /dd/defs/os9.d):00930         
     0080             (   /dd/defs/os9.d):00931         Entire         EQU       %10000000           Full Register Stack flag
     0040             (   /dd/defs/os9.d):00932         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (   /dd/defs/os9.d):00933         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (   /dd/defs/os9.d):00934         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (   /dd/defs/os9.d):00935         Negative       EQU       %00001000           Negative flag
     0004             (   /dd/defs/os9.d):00936         Zero           EQU       %00000100           Zero flag
     0002             (   /dd/defs/os9.d):00937         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (   /dd/defs/os9.d):00938         Carry          EQU       %00000001           Carry bit
     0050             (   /dd/defs/os9.d):00939         IntMasks       EQU       IRQMask+FIRQMask
     0080             (   /dd/defs/os9.d):00940         Sign           EQU       %10000000           sign bit
                      (   /dd/defs/os9.d):00941         
                      (   /dd/defs/os9.d):00942                        TTL       Error Code Definitions
                      (   /dd/defs/os9.d):00943                        PAG       
                      (   /dd/defs/os9.d):00944         ************************
                      (   /dd/defs/os9.d):00945         * Error Code Definitions
                      (   /dd/defs/os9.d):00946         *
                      (   /dd/defs/os9.d):00947         * Basic09 Error Codes
                      (   /dd/defs/os9.d):00948         *
                      (   /dd/defs/os9.d):00949                        ORG       10
000A                  (   /dd/defs/os9.d):00950         E$UnkSym       RMB       1                   Unknown symbol
000B                  (   /dd/defs/os9.d):00951         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (   /dd/defs/os9.d):00952         E$IllStC       RMB       1                   Illegal statement construction
000D                  (   /dd/defs/os9.d):00953         E$ICOvf        RMB       1                   I-code overflow
000E                  (   /dd/defs/os9.d):00954         E$IChRef       RMB       1                   Illegal channel reference
000F                  (   /dd/defs/os9.d):00955         E$IllMod       RMB       1                   Illegal mode
0010                  (   /dd/defs/os9.d):00956         E$IllNum       RMB       1                   Illegal number
0011                  (   /dd/defs/os9.d):00957         E$IllPrf       RMB       1                   Illegal prefix
0012                  (   /dd/defs/os9.d):00958         E$IllOpd       RMB       1                   Illegal operand
0013                  (   /dd/defs/os9.d):00959         E$IllOpr       RMB       1                   Illegal operator
0014                  (   /dd/defs/os9.d):00960         E$IllRFN       RMB       1                   Illegal record field name
0015                  (   /dd/defs/os9.d):00961         E$IllDim       RMB       1                   Illegal dimension
0016                  (   /dd/defs/os9.d):00962         E$IllLit       RMB       1                   Illegal literal
0017                  (   /dd/defs/os9.d):00963         E$IllRet       RMB       1                   Illegal relational
0018                  (   /dd/defs/os9.d):00964         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (   /dd/defs/os9.d):00965         E$DimLrg       RMB       1                   Dimension too large
001A                  (   /dd/defs/os9.d):00966         E$LinLrg       RMB       1                   Line number too large
001B                  (   /dd/defs/os9.d):00967         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (   /dd/defs/os9.d):00968         E$NoPath       RMB       1                   Missing path number
001D                  (   /dd/defs/os9.d):00969         E$NoComa       RMB       1                   Missing coma
001E                  (   /dd/defs/os9.d):00970         E$NoDim        RMB       1                   Missing dimension
001F                  (   /dd/defs/os9.d):00971         E$NoDO         RMB       1                   Missing DO statement
0020                  (   /dd/defs/os9.d):00972         E$MFull        RMB       1                   Memory full
0021                  (   /dd/defs/os9.d):00973         E$NoGoto       RMB       1                   Missing GOTO
0022                  (   /dd/defs/os9.d):00974         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (   /dd/defs/os9.d):00975         E$NoLRef       RMB       1                   Missing line reference
0024                  (   /dd/defs/os9.d):00976         E$NoOprd       RMB       1                   Missing operand
0025                  (   /dd/defs/os9.d):00977         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (   /dd/defs/os9.d):00978         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (   /dd/defs/os9.d):00979         E$NoTO         RMB       1                   Missing TO statement
0028                  (   /dd/defs/os9.d):00980         E$NoVRef       RMB       1                   Missing variable reference
0029                  (   /dd/defs/os9.d):00981         E$EndQou       RMB       1                   Missing end quote
002A                  (   /dd/defs/os9.d):00982         E$SubLrg       RMB       1                   Too many subscripts
002B                  (   /dd/defs/os9.d):00983         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (   /dd/defs/os9.d):00984         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (   /dd/defs/os9.d):00985         E$DivZer       RMB       1                   Divice by zero
002E                  (   /dd/defs/os9.d):00986         E$TypMis       RMB       1                   Operand type mismatch
002F                  (   /dd/defs/os9.d):00987         E$StrOvf       RMB       1                   String stack overflow
0030                  (   /dd/defs/os9.d):00988         E$NoRout       RMB       1                   Unimplemented routine
0031                  (   /dd/defs/os9.d):00989         E$UndVar       RMB       1                   Undefined variable
0032                  (   /dd/defs/os9.d):00990         E$FltOvf       RMB       1                   Floating Overflow
0033                  (   /dd/defs/os9.d):00991         E$LnComp       RMB       1                   Line with compiler error
0034                  (   /dd/defs/os9.d):00992         E$ValRng       RMB       1                   Value out of range for destination
0035                  (   /dd/defs/os9.d):00993         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (   /dd/defs/os9.d):00994         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (   /dd/defs/os9.d):00995         E$SubRng       RMB       1                   Subscript out of range
0038                  (   /dd/defs/os9.d):00996         E$ParmEr       RMB       1                   Paraemter error
0039                  (   /dd/defs/os9.d):00997         E$SysOvf       RMB       1                   System stack overflow
003A                  (   /dd/defs/os9.d):00998         E$IOMism       RMB       1                   I/O type mismatch
003B                  (   /dd/defs/os9.d):00999         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (   /dd/defs/os9.d):01000         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (   /dd/defs/os9.d):01001         E$IllInp       RMB       1                   Illegal input format
003E                  (   /dd/defs/os9.d):01002         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (   /dd/defs/os9.d):01003         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (   /dd/defs/os9.d):01004         E$IllPNm       RMB       1                   Illegal path number
0041                  (   /dd/defs/os9.d):01005         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (   /dd/defs/os9.d):01006         E$NonRcO       RMB       1                   Non-record type operand
0043                  (   /dd/defs/os9.d):01007         E$IllA         RMB       1                   Illegal argument
0044                  (   /dd/defs/os9.d):01008         E$IllCnt       RMB       1                   Illegal control structure
0045                  (   /dd/defs/os9.d):01009         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (   /dd/defs/os9.d):01010         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (   /dd/defs/os9.d):01011         E$IllExp       RMB       1                   Illegal expression type
0048                  (   /dd/defs/os9.d):01012         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (   /dd/defs/os9.d):01013         E$ArrOvf       RMB       1                   Array size overflow
004A                  (   /dd/defs/os9.d):01014         E$UndLin       RMB       1                   Undefined line number
004B                  (   /dd/defs/os9.d):01015         E$MltLin       RMB       1                   Multiply defined line number
004C                  (   /dd/defs/os9.d):01016         E$MltVar       RMB       1                   Multiply defined variable
004D                  (   /dd/defs/os9.d):01017         E$IllIVr       RMB       1                   Illegal input variable
004E                  (   /dd/defs/os9.d):01018         E$SeekRg       RMB       1                   Seek out of range
004F                  (   /dd/defs/os9.d):01019         E$NoData       RMB       1                   Missing data statement
                      (   /dd/defs/os9.d):01020         
                      (   /dd/defs/os9.d):01021         *
                      (   /dd/defs/os9.d):01022         * System Dependent Error Codes
                      (   /dd/defs/os9.d):01023         *
                      (   /dd/defs/os9.d):01024         
                      (   /dd/defs/os9.d):01025         * Level 2 windowing error codes
                      (   /dd/defs/os9.d):01026                        ORG       183
00B7                  (   /dd/defs/os9.d):01027         E$IWTyp        RMB       1                   Illegal window type
00B8                  (   /dd/defs/os9.d):01028         E$WADef        RMB       1                   Window already defined
00B9                  (   /dd/defs/os9.d):01029         E$NFont        RMB       1                   Font not found
00BA                  (   /dd/defs/os9.d):01030         E$StkOvf       RMB       1                   Stack overflow
00BB                  (   /dd/defs/os9.d):01031         E$IllArg       RMB       1                   Illegal argument
00BC                  (   /dd/defs/os9.d):01032                        RMB       1                   reserved
00BD                  (   /dd/defs/os9.d):01033         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (   /dd/defs/os9.d):01034         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (   /dd/defs/os9.d):01035         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (   /dd/defs/os9.d):01036         E$IllCmd       RMB       1                   Illegal command
00C1                  (   /dd/defs/os9.d):01037         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (   /dd/defs/os9.d):01038         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (   /dd/defs/os9.d):01039         E$IWDef        RMB       1                   Illegal window definition
00C4                  (   /dd/defs/os9.d):01040         E$WUndef       RMB       1                   Window undefined
                      (   /dd/defs/os9.d):01041         
00C5                  (   /dd/defs/os9.d):01042         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (   /dd/defs/os9.d):01043         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (   /dd/defs/os9.d):01044         E$Alias        RMB       1
                      (   /dd/defs/os9.d):01045         
                      (   /dd/defs/os9.d):01046         
                      (   /dd/defs/os9.d):01047         *
                      (   /dd/defs/os9.d):01048         * Standard NitrOS-9 Error Codes
                      (   /dd/defs/os9.d):01049         *
                      (   /dd/defs/os9.d):01050                        ORG       200
00C8                  (   /dd/defs/os9.d):01051         E$PthFul       RMB       1                   Path Table full
00C9                  (   /dd/defs/os9.d):01052         E$BPNum        RMB       1                   Bad Path Number
00CA                  (   /dd/defs/os9.d):01053         E$Poll         RMB       1                   Polling Table Full
00CB                  (   /dd/defs/os9.d):01054         E$BMode        RMB       1                   Bad Mode
00CC                  (   /dd/defs/os9.d):01055         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (   /dd/defs/os9.d):01056         E$BMID         RMB       1                   Bad Module ID
00CE                  (   /dd/defs/os9.d):01057         E$DirFul       RMB       1                   Module Directory Full
00CF                  (   /dd/defs/os9.d):01058         E$MemFul       RMB       1                   Process Memory Full
00D0                  (   /dd/defs/os9.d):01059         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (   /dd/defs/os9.d):01060         E$ModBsy       RMB       1                   Module Busy
00D2                  (   /dd/defs/os9.d):01061         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (   /dd/defs/os9.d):01062         E$EOF          RMB       1                   End of File
00D4                  (   /dd/defs/os9.d):01063                        RMB       1
00D5                  (   /dd/defs/os9.d):01064         E$NES          RMB       1                   Non-Existing Segment
00D6                  (   /dd/defs/os9.d):01065         E$FNA          RMB       1                   File Not Accesible
00D7                  (   /dd/defs/os9.d):01066         E$BPNam        RMB       1                   Bad Path Name
00D8                  (   /dd/defs/os9.d):01067         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (   /dd/defs/os9.d):01068         E$SLF          RMB       1                   Segment List Full
00DA                  (   /dd/defs/os9.d):01069         E$CEF          RMB       1                   Creating Existing File
00DB                  (   /dd/defs/os9.d):01070         E$IBA          RMB       1                   Illegal Block Address
00DC                  (   /dd/defs/os9.d):01071         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (   /dd/defs/os9.d):01072         E$MNF          RMB       1                   Module Not Found
00DE                  (   /dd/defs/os9.d):01073                        RMB       1
00DF                  (   /dd/defs/os9.d):01074         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (   /dd/defs/os9.d):01075         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (   /dd/defs/os9.d):01076         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (   /dd/defs/os9.d):01077                        RMB       1
00E2                  (   /dd/defs/os9.d):01078         E$NoChld       RMB       1                   No Children
00E3                  (   /dd/defs/os9.d):01079         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (   /dd/defs/os9.d):01080         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (   /dd/defs/os9.d):01081         E$PrcFul       RMB       1                   Process Table Full
00E6                  (   /dd/defs/os9.d):01082         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (   /dd/defs/os9.d):01083         E$KwnMod       RMB       1                   Known Module
00E8                  (   /dd/defs/os9.d):01084         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (   /dd/defs/os9.d):01085         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (   /dd/defs/os9.d):01086         E$NEMod        RMB       1                   Non Existing Module
00EB                  (   /dd/defs/os9.d):01087         E$BNam         RMB       1                   Bad Name
00EC                  (   /dd/defs/os9.d):01088         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (   /dd/defs/os9.d):01089         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (   /dd/defs/os9.d):01090         E$DNE          RMB       1                   Directory not empty
00EF                  (   /dd/defs/os9.d):01091         E$NoTask       RMB       1                   No available Task number
                      (   /dd/defs/os9.d):01092                        RMB       $F0-.               reserved
00F0                  (   /dd/defs/os9.d):01093         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (   /dd/defs/os9.d):01094         E$Sect         RMB       1                   Bad Sector number
00F2                  (   /dd/defs/os9.d):01095         E$WP           RMB       1                   Write Protect
00F3                  (   /dd/defs/os9.d):01096         E$CRC          RMB       1                   Bad Check Sum
00F4                  (   /dd/defs/os9.d):01097         E$Read         RMB       1                   Read Error
00F5                  (   /dd/defs/os9.d):01098         E$Write        RMB       1                   Write Error
00F6                  (   /dd/defs/os9.d):01099         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (   /dd/defs/os9.d):01100         E$Seek         RMB       1                   Seek Error
00F8                  (   /dd/defs/os9.d):01101         E$Full         RMB       1                   Media Full
00F9                  (   /dd/defs/os9.d):01102         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (   /dd/defs/os9.d):01103         E$DevBsy       RMB       1                   Device Busy
00FB                  (   /dd/defs/os9.d):01104         E$DIDC         RMB       1                   Disk ID Change
00FC                  (   /dd/defs/os9.d):01105         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (   /dd/defs/os9.d):01106         E$Share        RMB       1                   Non-sharable file busy
00FE                  (   /dd/defs/os9.d):01107         E$DeadLk       RMB       1                   I/O Deadlock error
                      (   /dd/defs/os9.d):01108         
                      (   /dd/defs/os9.d):01109         
                      (   /dd/defs/os9.d):01110         ***************************
                      (   /dd/defs/os9.d):01111         * Level 3 Defs
                      (   /dd/defs/os9.d):01112         *
                      (   /dd/defs/os9.d):01113         * These definitions apply to NitrOS-9 Level 3
                      (   /dd/defs/os9.d):01114         *
                      (   /dd/defs/os9.d):01115         
                      ( /dd/defs/deffile):00007                  use   /dd/defs/rbf.d
                      (   /dd/defs/rbf.d):00001         ********************************************************************
                      (   /dd/defs/rbf.d):00002         * rbf.d - Random Block File Manager Definitions
                      (   /dd/defs/rbf.d):00003         *
                      (   /dd/defs/rbf.d):00004         * $Id$
                      (   /dd/defs/rbf.d):00005         *
                      (   /dd/defs/rbf.d):00006         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (   /dd/defs/rbf.d):00007         * that define the logical structure of a disk and allows access to the files
                      (   /dd/defs/rbf.d):00008         * in that structure.
                      (   /dd/defs/rbf.d):00009         *
                      (   /dd/defs/rbf.d):00010         * The data structures in this file give RBF its 'personality' and are used
                      (   /dd/defs/rbf.d):00011         * by RBF itself, as well as applications that will require disk I/O.
                      (   /dd/defs/rbf.d):00012         *
                      (   /dd/defs/rbf.d):00013         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/rbf.d):00014         * Comment
                      (   /dd/defs/rbf.d):00015         * ------------------------------------------------------------------
                      (   /dd/defs/rbf.d):00016         *          1982/07/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00017         * PD.Exten added to path descriptor and PE Entries defined.
                      (   /dd/defs/rbf.d):00018         *
                      (   /dd/defs/rbf.d):00019         *          1982/07/15  Robert F. Doggett
                      (   /dd/defs/rbf.d):00020         * V.FileHd inserted in driver static storage.
                      (   /dd/defs/rbf.d):00021         *
                      (   /dd/defs/rbf.d):00022         *          1982/09/10  WGP
                      (   /dd/defs/rbf.d):00023         * Level One/Level Two condionals added.
                      (   /dd/defs/rbf.d):00024         *
                      (   /dd/defs/rbf.d):00025         *          1982/09/17  WGP
                      (   /dd/defs/rbf.d):00026         *
                      (   /dd/defs/rbf.d):00027         *          1982/09/17  Robert F. Doggett
                      (   /dd/defs/rbf.d):00028         * PD.SLE renamed to PD.Creat.
                      (   /dd/defs/rbf.d):00029         *
                      (   /dd/defs/rbf.d):00030         *          1982/09/17  Robert F. Doggett
                      (   /dd/defs/rbf.d):00031         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (   /dd/defs/rbf.d):00032         *
                      (   /dd/defs/rbf.d):00033         *          1982/09/20  Robert F. Doggett
                      (   /dd/defs/rbf.d):00034         * Reserved areas added in static storage.
                      (   /dd/defs/rbf.d):00035         
                      (   /dd/defs/rbf.d):00036         *          1983/06/07  Robert F. Doggett
                      (   /dd/defs/rbf.d):00037         * Added InDriver flag in PD.SMF.
                      (   /dd/defs/rbf.d):00038         *
                      (   /dd/defs/rbf.d):00039         *          1983/06/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00040         * Added PE.Req tmp save for PE.Lock.
                      (   /dd/defs/rbf.d):00041         *
                      (   /dd/defs/rbf.d):00042         *          1983/08/08  Robert F. Doggett
                      (   /dd/defs/rbf.d):00043         * Reserved PD.SToff for Japanese.
                      (   /dd/defs/rbf.d):00044         *
                      (   /dd/defs/rbf.d):00045         *          1983/11/19  Robert F. Doggett
                      (   /dd/defs/rbf.d):00046         * Added V.ResBit in drive tables.
                      (   /dd/defs/rbf.d):00047         *
                      (   /dd/defs/rbf.d):00048         *          1983/12/12  Robert F. Doggett
                      (   /dd/defs/rbf.d):00049         * Added PE.Prior to save process priority.
                      (   /dd/defs/rbf.d):00050         *
                      (   /dd/defs/rbf.d):00051         *          1983/12/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00052         * Added BufBusy bit in state flag (PD.SMF).
                      (   /dd/defs/rbf.d):00053         *
                      (   /dd/defs/rbf.d):00054         *          1984/07/06  Mark G. Hawkins
                      (   /dd/defs/rbf.d):00055         * Added Bit Definitions for DD.FMT.
                      (   /dd/defs/rbf.d):00056         *
                      (   /dd/defs/rbf.d):00057         *          1987/06/23  Kevin K. Darling
                      (   /dd/defs/rbf.d):00058         * Updated with Dev Desc Info
                      (   /dd/defs/rbf.d):00059         *
                      (   /dd/defs/rbf.d):00060         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00061         * Updated comments for clarity.
                      (   /dd/defs/rbf.d):00062         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (   /dd/defs/rbf.d):00063         *
                      (   /dd/defs/rbf.d):00064         *          2004/04/14  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00065         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (   /dd/defs/rbf.d):00066         * addendum.  Pointed out by Rodney Hamilton.
                      (   /dd/defs/rbf.d):00067         *
                      (   /dd/defs/rbf.d):00068         *          2005/05/31  P.Harvey-Smith.
                      (   /dd/defs/rbf.d):00069         * Added defines for bit 2 of IT.DNS, which the format command uses to
                      (   /dd/defs/rbf.d):00070         * determine if a drive should have it's track 0 as single or double density
                      (   /dd/defs/rbf.d):00071         *
                      (   /dd/defs/rbf.d):00072         *          2005/11/23  Robert Gault
                      (   /dd/defs/rbf.d):00073         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (   /dd/defs/rbf.d):00074         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (   /dd/defs/rbf.d):00075         *
                      (   /dd/defs/rbf.d):00076         *          2005/12/11  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00077         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (   /dd/defs/rbf.d):00078         
                      (   /dd/defs/rbf.d):00079                        NAM       rbf.d
                      (   /dd/defs/rbf.d):00080                        TTL       Random Block File Manager Definitions
                      (   /dd/defs/rbf.d):00081         
                      (   /dd/defs/rbf.d):00082                        PAG
                      (   /dd/defs/rbf.d):00083         *******************************
                      (   /dd/defs/rbf.d):00084         * RBF Device Descriptor Offsets
                      (   /dd/defs/rbf.d):00085         *
                      (   /dd/defs/rbf.d):00086         * These definitions are for RBF device descriptors.
                      (   /dd/defs/rbf.d):00087         
                      (   /dd/defs/rbf.d):00088                        ORG       M$DTyp
0012                  (   /dd/defs/rbf.d):00089                        RMB       1                   Device type (DT.RBF)
0013                  (   /dd/defs/rbf.d):00090         IT.DRV         RMB       1                   Drive number
0014                  (   /dd/defs/rbf.d):00091         IT.STP         RMB       1                   Step rate
0015                  (   /dd/defs/rbf.d):00092         IT.TYP         RMB       1                   Disk device type information
0016                  (   /dd/defs/rbf.d):00093         IT.DNS         RMB       1                   Density capability
0017                  (   /dd/defs/rbf.d):00094         IT.CYL         RMB       2                   Number of cylinders
0019                  (   /dd/defs/rbf.d):00095         IT.SID         RMB       1                   Number of surfaces
001A                  (   /dd/defs/rbf.d):00096         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (   /dd/defs/rbf.d):00097         IT.SCT         RMB       2                   Default sectors/track
001D                  (   /dd/defs/rbf.d):00098         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (   /dd/defs/rbf.d):00099         IT.ILV         RMB       1                   Sector interleave offset
0020                  (   /dd/defs/rbf.d):00100         IT.SAS         RMB       1                   Segment allocation size
                      (   /dd/defs/rbf.d):00101         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (   /dd/defs/rbf.d):00102         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (   /dd/defs/rbf.d):00103         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (   /dd/defs/rbf.d):00104         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (   /dd/defs/rbf.d):00105         * The following fields are not copied to the path descriptor
0025                  (   /dd/defs/rbf.d):00106         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (   /dd/defs/rbf.d):00107         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (   /dd/defs/rbf.d):00108         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (   /dd/defs/rbf.d):00109         * These fields have been added because of SuperDriver.  They probably
                      (   /dd/defs/rbf.d):00110         * can be used in other drivers
                      (   /dd/defs/rbf.d):00111                        ORG       IT.WPC
0025                  (   /dd/defs/rbf.d):00112         IT.SOFF1       RMB       1
0026                  (   /dd/defs/rbf.d):00113         IT.SOFF2       RMB       1
0027                  (   /dd/defs/rbf.d):00114         IT.SOFF3       RMB       1
0028                  (   /dd/defs/rbf.d):00115         IT.LLDRV       RMB       2
002A                  (   /dd/defs/rbf.d):00116         IT.MPI         RMB       1
                      (   /dd/defs/rbf.d):00117         
                      (   /dd/defs/rbf.d):00118         
                      (   /dd/defs/rbf.d):00119         * IT.TYP Definitions
                      (   /dd/defs/rbf.d):00120         *
     0080             (   /dd/defs/rbf.d):00121         TYP.HARD       EQU       %10000000           Hard disk
     0000             (   /dd/defs/rbf.d):00122         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (   /dd/defs/rbf.d):00123         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (   /dd/defs/rbf.d):00124         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (   /dd/defs/rbf.d):00125         
                      (   /dd/defs/rbf.d):00126         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (   /dd/defs/rbf.d):00127         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (   /dd/defs/rbf.d):00128         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (   /dd/defs/rbf.d):00129         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (   /dd/defs/rbf.d):00130         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (   /dd/defs/rbf.d):00131         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (   /dd/defs/rbf.d):00132         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (   /dd/defs/rbf.d):00133         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (   /dd/defs/rbf.d):00134         
                      (   /dd/defs/rbf.d):00135         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (   /dd/defs/rbf.d):00136         TYP.5          EQU       %00000000           5" media
     0001             (   /dd/defs/rbf.d):00137         TYP.3          EQU       %00000001           3.5" media
     0002             (   /dd/defs/rbf.d):00138         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (   /dd/defs/rbf.d):00139         TYP.256        EQU       %00000000           256 byte sector media
     0004             (   /dd/defs/rbf.d):00140         TYP.512        EQU       %00000100           512 byte sector media
     0020             (   /dd/defs/rbf.d):00141         TYP.CCF        EQU       %00100000           CoCo format
     0000             (   /dd/defs/rbf.d):00142         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (   /dd/defs/rbf.d):00143         
                      (   /dd/defs/rbf.d):00144         * IT.DNS Definitions
                      (   /dd/defs/rbf.d):00145         *
                      (   /dd/defs/rbf.d):00146         
                      (   /dd/defs/rbf.d):00147         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (   /dd/defs/rbf.d):00148         
                      (   /dd/defs/rbf.d):00149         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (   /dd/defs/rbf.d):00150         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (   /dd/defs/rbf.d):00151         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (   /dd/defs/rbf.d):00152         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (   /dd/defs/rbf.d):00153         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (   /dd/defs/rbf.d):00154         
                      (   /dd/defs/rbf.d):00155         * Added PHS,2005-05-31, as format seems to use these
     0000             (   /dd/defs/rbf.d):00156         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (   /dd/defs/rbf.d):00157         DNS.MFM0       EQU       %00000100           Double density track 0
                      (   /dd/defs/rbf.d):00158         
                      (   /dd/defs/rbf.d):00159         * Floppy disk step rate definitions
     0000             (   /dd/defs/rbf.d):00160         STP.30ms       EQU       0                   30ms step rate
     0001             (   /dd/defs/rbf.d):00161         STP.20ms       EQU       1                   20ms step rate
     0002             (   /dd/defs/rbf.d):00162         STP.12ms       EQU       2                   12ms step rate
     0003             (   /dd/defs/rbf.d):00163         STP.6ms        EQU       3                   6ms step rate
                      (   /dd/defs/rbf.d):00164         
                      (   /dd/defs/rbf.d):00165                        PAG
                      (   /dd/defs/rbf.d):00166         *************************************
                      (   /dd/defs/rbf.d):00167         * Random Block Path Descriptor Format
                      (   /dd/defs/rbf.d):00168         *
                      (   /dd/defs/rbf.d):00169         * A path descriptor is created for every new path that is open
                      (   /dd/defs/rbf.d):00170         * via the I$Open system call (processed by IOMan).  Process
                      (   /dd/defs/rbf.d):00171         * descriptors track state information of a path.
                      (   /dd/defs/rbf.d):00172         *
                      (   /dd/defs/rbf.d):00173                        ORG       PD.FST
000A                  (   /dd/defs/rbf.d):00174         PD.SMF         RMB       1                   State flags
000B                  (   /dd/defs/rbf.d):00175         PD.CP          RMB       4                   Current logical byte position
000F                  (   /dd/defs/rbf.d):00176         PD.SIZ         RMB       4                   File size
0013                  (   /dd/defs/rbf.d):00177         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (   /dd/defs/rbf.d):00178         PD.SBP         RMB       3                   Segment beginning psn
0019                  (   /dd/defs/rbf.d):00179         PD.SSZ         RMB       3                   Segment size
001C                  (   /dd/defs/rbf.d):00180         PD.DSK         RMB       2                   Disk id
001E                  (   /dd/defs/rbf.d):00181         PD.DTB         RMB       2                   Drive table ptr
                      (   /dd/defs/rbf.d):00182                        ORG       PD.OPT
0020                  (   /dd/defs/rbf.d):00183                        RMB       1                   Device type
0021                  (   /dd/defs/rbf.d):00184         PD.DRV         RMB       1                   Drive number
0022                  (   /dd/defs/rbf.d):00185         PD.STP         RMB       1                   Step rate
0023                  (   /dd/defs/rbf.d):00186         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (   /dd/defs/rbf.d):00187         PD.DNS         RMB       1                   Density capability
0025                  (   /dd/defs/rbf.d):00188         PD.CYL         RMB       2                   Number of cylinders
0027                  (   /dd/defs/rbf.d):00189         PD.SID         RMB       1                   Number of surfaces
0028                  (   /dd/defs/rbf.d):00190         PD.VFY         RMB       1                   0=verify disk writes
0029                  (   /dd/defs/rbf.d):00191         PD.SCT         RMB       2                   Default sectors/track
002B                  (   /dd/defs/rbf.d):00192         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (   /dd/defs/rbf.d):00193         PD.ILV         RMB       1                   Sector interleave offset
002E                  (   /dd/defs/rbf.d):00194         PD.SAS         RMB       1                   Segment allocation size
002F                  (   /dd/defs/rbf.d):00195         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (   /dd/defs/rbf.d):00196         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (   /dd/defs/rbf.d):00197         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (   /dd/defs/rbf.d):00198         PD.ATT         RMB       1                   File attributes
0034                  (   /dd/defs/rbf.d):00199         PD.FD          RMB       3                   File descriptor psn
0037                  (   /dd/defs/rbf.d):00200         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (   /dd/defs/rbf.d):00201         PD.DCP         RMB       4                   File directory entry ptr
003E                  (   /dd/defs/rbf.d):00202         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (   /dd/defs/rbf.d):00203         
                      (   /dd/defs/rbf.d):00204         * State Flags
     0001             (   /dd/defs/rbf.d):00205         BUFMOD         EQU       $01                 Buffer modified
     0002             (   /dd/defs/rbf.d):00206         SINBUF         EQU       $02                 Sector in buffer
     0004             (   /dd/defs/rbf.d):00207         FDBUF          EQU       $04                 File descriptor in buffer
                      (   /dd/defs/rbf.d):00208         *EOFSEC equ $08 End of file sector
                      (   /dd/defs/rbf.d):00209         *EOF equ $10 End of file
     0020             (   /dd/defs/rbf.d):00210         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (   /dd/defs/rbf.d):00211         BufBusy        EQU       $40                 Buffer is currently busy
                      (   /dd/defs/rbf.d):00212         
                      (   /dd/defs/rbf.d):00213         ************************************
                      (   /dd/defs/rbf.d):00214         * Random Block Path Extension Format
                      (   /dd/defs/rbf.d):00215         *
                      (   /dd/defs/rbf.d):00216         * RBF paths under Level Two have additional information that
                      (   /dd/defs/rbf.d):00217         * is referenced by the path extension area.
                      (   /dd/defs/rbf.d):00218         *
                      (   /dd/defs/rbf.d):00219                        ORG       0
0000                  (   /dd/defs/rbf.d):00220         PE.PE          RMB       1                   PE path number
0001                  (   /dd/defs/rbf.d):00221         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (   /dd/defs/rbf.d):00222         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (   /dd/defs/rbf.d):00223         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (   /dd/defs/rbf.d):00224         PE.Lock        RMB       1                   Path lockout status
0008                  (   /dd/defs/rbf.d):00225         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (   /dd/defs/rbf.d):00226         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (   /dd/defs/rbf.d):00227         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (   /dd/defs/rbf.d):00228         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (   /dd/defs/rbf.d):00229         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (   /dd/defs/rbf.d):00230         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (   /dd/defs/rbf.d):00231         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (   /dd/defs/rbf.d):00232         PE.SigSg       RMB       1                   Signal code to send
0018                  (   /dd/defs/rbf.d):00233         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (   /dd/defs/rbf.d):00234                        RMB       32-.                Reserved
0020                  (   /dd/defs/rbf.d):00235         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (   /dd/defs/rbf.d):00236         
                      (   /dd/defs/rbf.d):00237         * PE.Lock status codes
     0000             (   /dd/defs/rbf.d):00238         Unlocked       EQU       0                   No portion of file is locked
     0001             (   /dd/defs/rbf.d):00239         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (   /dd/defs/rbf.d):00240         FileLock       EQU       2                   Entire file locked
     0004             (   /dd/defs/rbf.d):00241         EofLock        EQU       4                   End of file is locked
                      (   /dd/defs/rbf.d):00242         
                      (   /dd/defs/rbf.d):00243         
                      (   /dd/defs/rbf.d):00244                        PAG
                      (   /dd/defs/rbf.d):00245         ***********************
                      (   /dd/defs/rbf.d):00246         * LSN0 Disk Data Format
                      (   /dd/defs/rbf.d):00247         *
                      (   /dd/defs/rbf.d):00248         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (   /dd/defs/rbf.d):00249         * and contains information about the device's size and format.
                      (   /dd/defs/rbf.d):00250         *
                      (   /dd/defs/rbf.d):00251                        ORG       0
0000                  (   /dd/defs/rbf.d):00252         DD.TOT         RMB       3                   Total number of sectors
0003                  (   /dd/defs/rbf.d):00253         DD.TKS         RMB       1                   Track size in sectors
0004                  (   /dd/defs/rbf.d):00254         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (   /dd/defs/rbf.d):00255         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (   /dd/defs/rbf.d):00256         DD.DIR         RMB       3                   Address of root directory fd
000B                  (   /dd/defs/rbf.d):00257         DD.OWN         RMB       2                   Owner
000D                  (   /dd/defs/rbf.d):00258         DD.ATT         RMB       1                   Attributes
000E                  (   /dd/defs/rbf.d):00259         DD.DSK         RMB       2                   Disk ID
0010                  (   /dd/defs/rbf.d):00260         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (   /dd/defs/rbf.d):00261         DD.SPT         RMB       2                   Sectors/track
0013                  (   /dd/defs/rbf.d):00262         DD.RES         RMB       2                   Reserved for future use
     0015             (   /dd/defs/rbf.d):00263         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (   /dd/defs/rbf.d):00264         DD.BT          RMB       3                   System bootstrap sector
0018                  (   /dd/defs/rbf.d):00265         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (   /dd/defs/rbf.d):00266         DD.DAT         RMB       5                   Creation date
001F                  (   /dd/defs/rbf.d):00267         DD.NAM         RMB       32                  Volume name
003F                  (   /dd/defs/rbf.d):00268         DD.OPT         RMB       32                  Option area
                      (   /dd/defs/rbf.d):00269         
                      (   /dd/defs/rbf.d):00270         *************************
                      (   /dd/defs/rbf.d):00271         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (   /dd/defs/rbf.d):00272                 ORG $60         More options from device descriptor
0060                  (   /dd/defs/rbf.d):00273         VD.STP      RMB 1   This is for the /sh and /ih virtual disks in HDBDOS
0061                  (   /dd/defs/rbf.d):00274         VD.OFS      RMB 3   This is DT.WPC and DT.OSF combined, might be more
                      (   /dd/defs/rbf.d):00275         
                      (   /dd/defs/rbf.d):00276         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (   /dd/defs/rbf.d):00277         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (   /dd/defs/rbf.d):00278         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (   /dd/defs/rbf.d):00279         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (   /dd/defs/rbf.d):00280         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (   /dd/defs/rbf.d):00281         
                      (   /dd/defs/rbf.d):00282         
                      (   /dd/defs/rbf.d):00283                        PAG
                      (   /dd/defs/rbf.d):00284         ************************
                      (   /dd/defs/rbf.d):00285         * File Descriptor Format
                      (   /dd/defs/rbf.d):00286         *
                      (   /dd/defs/rbf.d):00287         * The file descriptor is a sector that is present for every file
                      (   /dd/defs/rbf.d):00288         * on an RBF device.  It contains attributes, modification dates,
                      (   /dd/defs/rbf.d):00289         * and segment information on a file.
                      (   /dd/defs/rbf.d):00290         *
                      (   /dd/defs/rbf.d):00291                        ORG       0
0000                  (   /dd/defs/rbf.d):00292         FD.ATT         RMB       1                   Attributes
0001                  (   /dd/defs/rbf.d):00293         FD.OWN         RMB       2                   Owner
0003                  (   /dd/defs/rbf.d):00294         FD.DAT         RMB       5                   Date last modified
0008                  (   /dd/defs/rbf.d):00295         FD.LNK         RMB       1                   Link count
0009                  (   /dd/defs/rbf.d):00296         FD.SIZ         RMB       4                   File size
000D                  (   /dd/defs/rbf.d):00297         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (   /dd/defs/rbf.d):00298         FD.SEG         EQU       .                   Beginning of segment list
                      (   /dd/defs/rbf.d):00299         * Segment List Entry Format
                      (   /dd/defs/rbf.d):00300                        ORG       0
0000                  (   /dd/defs/rbf.d):00301         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (   /dd/defs/rbf.d):00302         FDSL.B         RMB       2                   Segment size
     0005             (   /dd/defs/rbf.d):00303         FDSL.S         EQU       .                   Segment list entry size
     00FB             (   /dd/defs/rbf.d):00304         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (   /dd/defs/rbf.d):00305         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (   /dd/defs/rbf.d):00306         MINSEC         SET       16
                      (   /dd/defs/rbf.d):00307         
                      (   /dd/defs/rbf.d):00308         
                      (   /dd/defs/rbf.d):00309                        PAG
                      (   /dd/defs/rbf.d):00310         ************************
                      (   /dd/defs/rbf.d):00311         * Directory Entry Format
                      (   /dd/defs/rbf.d):00312         *
                      (   /dd/defs/rbf.d):00313         * Directory entries are part of a directory and define the name
                      (   /dd/defs/rbf.d):00314         * of the file, as well as a pointer to its file descriptor.
                      (   /dd/defs/rbf.d):00315         *
                      (   /dd/defs/rbf.d):00316                        ORG       0
0000                  (   /dd/defs/rbf.d):00317         DIR.NM         RMB       29                  File name
001D                  (   /dd/defs/rbf.d):00318         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (   /dd/defs/rbf.d):00319         DIR.SZ         EQU       .                   Directory record size
                      (   /dd/defs/rbf.d):00320         
                      (   /dd/defs/rbf.d):00321         
                      (   /dd/defs/rbf.d):00322                        PAG
                      (   /dd/defs/rbf.d):00323         ********************
                      (   /dd/defs/rbf.d):00324         * RBF Static Storage
                      (   /dd/defs/rbf.d):00325         *
                      (   /dd/defs/rbf.d):00326         * Overall Disk Static Storage
                      (   /dd/defs/rbf.d):00327         *
                      (   /dd/defs/rbf.d):00328         * Note:  This does not reserve any memory for drive tables.  Each
                      (   /dd/defs/rbf.d):00329         *        driver is responsible for reserving sufficient memory for
                      (   /dd/defs/rbf.d):00330         *        the appropriate number of tables.
                      (   /dd/defs/rbf.d):00331         *
                      (   /dd/defs/rbf.d):00332                        ORG       V.USER              Reserve required           ($06)
0006                  (   /dd/defs/rbf.d):00333         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (   /dd/defs/rbf.d):00334                        RMB       8                   reserved                   ($08)
     000F             (   /dd/defs/rbf.d):00335         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (   /dd/defs/rbf.d):00336         
                      (   /dd/defs/rbf.d):00337                        PAG
                      (   /dd/defs/rbf.d):00338         ****************
                      (   /dd/defs/rbf.d):00339         * Global Storage For Disk Drive Tables
                      (   /dd/defs/rbf.d):00340         *
                      (   /dd/defs/rbf.d):00341         * Each table contains the first 'DD.SIZ' bytes from
                      (   /dd/defs/rbf.d):00342         * LSN 0, and the current track, stepping rate,
                      (   /dd/defs/rbf.d):00343         * bitmap use flag, and disk type.
                      (   /dd/defs/rbf.d):00344         *
                      (   /dd/defs/rbf.d):00345                        ORG       0
0000                  (   /dd/defs/rbf.d):00346                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (   /dd/defs/rbf.d):00347         V.TRAK         RMB       2                   Current track
0017                  (   /dd/defs/rbf.d):00348         V.BMB          RMB       1                   Bit-map use flag
0018                  (   /dd/defs/rbf.d):00349         V.FileHd       RMB       2                   Open file list for this drive
001A                  (   /dd/defs/rbf.d):00350         V.DiskID       RMB       2                   Disk ID
001C                  (   /dd/defs/rbf.d):00351         V.BMapSz       RMB       1                   Bitmap Size
001D                  (   /dd/defs/rbf.d):00352         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (   /dd/defs/rbf.d):00353         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (   /dd/defs/rbf.d):00354         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (   /dd/defs/rbf.d):00355         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (   /dd/defs/rbf.d):00356         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (   /dd/defs/rbf.d):00357                        RMB       4                   Reserved
     0026             (   /dd/defs/rbf.d):00358         DRVMEM         EQU       .
                      (   /dd/defs/rbf.d):00359         
                      (   /dd/defs/rbf.d):00360         
                      ( /dd/defs/deffile):00008                  use   /dd/defs/scf.d
                      (   /dd/defs/scf.d):00001         ********************************************************************
                      (   /dd/defs/scf.d):00002         * scf.d - Sequential Character File Manager Definitions
                      (   /dd/defs/scf.d):00003         *
                      (   /dd/defs/scf.d):00004         * $Id$
                      (   /dd/defs/scf.d):00005         *
                      (   /dd/defs/scf.d):00006         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (   /dd/defs/scf.d):00007         * that define the logical structure of a serial device.
                      (   /dd/defs/scf.d):00008         *
                      (   /dd/defs/scf.d):00009         * The data structures in this file give SCF its 'personality' and are used
                      (   /dd/defs/scf.d):00010         * by SCF itself, as well as applications that will require disk I/O.
                      (   /dd/defs/scf.d):00011         *
                      (   /dd/defs/scf.d):00012         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/scf.d):00013         * Comment
                      (   /dd/defs/scf.d):00014         * ------------------------------------------------------------------
                      (   /dd/defs/scf.d):00015         *          1984/01/11  YO
                      (   /dd/defs/scf.d):00016         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (   /dd/defs/scf.d):00017         *
                      (   /dd/defs/scf.d):00018         *          1985/04/20  Mark G. Hawkins
                      (   /dd/defs/scf.d):00019         * Added V.PDLHd Path Descriptor List Head.
                      (   /dd/defs/scf.d):00020         *
                      (   /dd/defs/scf.d):00021         *          1985/04/21  Mark G. Hawkins
                      (   /dd/defs/scf.d):00022         * Added PD.PLP and PD.PST for modem handling.
                      (   /dd/defs/scf.d):00023         *
                      (   /dd/defs/scf.d):00024         *          1987/06/23  Kevin K. Darling
                      (   /dd/defs/scf.d):00025         * Updated with Dev Desc info.
                      (   /dd/defs/scf.d):00026         *
                      (   /dd/defs/scf.d):00027         *          1998/10/03  Boisy G. Pitre
                      (   /dd/defs/scf.d):00028         * Consolidated L1/L2 scfdefs.
                      (   /dd/defs/scf.d):00029         *
                      (   /dd/defs/scf.d):00030         *          2003/01/21  Boisy G. Pitre
                      (   /dd/defs/scf.d):00031         * Added symbolics for enhanced SCF line editing.
                      (   /dd/defs/scf.d):00032         *
                      (   /dd/defs/scf.d):00033         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/scf.d):00034         * Updated comments for clarity.
                      (   /dd/defs/scf.d):00035         *
                      (   /dd/defs/scf.d):00036         *          2004/05/17  Boisy G. Pitre
                      (   /dd/defs/scf.d):00037         * Added higher baud rates.
                      (   /dd/defs/scf.d):00038         
                      (   /dd/defs/scf.d):00039                        NAM       scf.d
                      (   /dd/defs/scf.d):00040                        TTL       Sequential File Manager Definitions
                      (   /dd/defs/scf.d):00041         
                      (   /dd/defs/scf.d):00042                        PAG
                      (   /dd/defs/scf.d):00043         *******************************
                      (   /dd/defs/scf.d):00044         * SCF Device Descriptor Offsets
                      (   /dd/defs/scf.d):00045         *
                      (   /dd/defs/scf.d):00046         * These definitions are for SCF device descriptors.
                      (   /dd/defs/scf.d):00047         
                      (   /dd/defs/scf.d):00048                        ORG       M$DTyp
0012                  (   /dd/defs/scf.d):00049         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (   /dd/defs/scf.d):00050         IT.UPC         RMB       1                   Uppercase flag
0014                  (   /dd/defs/scf.d):00051         IT.BSO         RMB       1                   Backspace behavior
0015                  (   /dd/defs/scf.d):00052         IT.DLO         RMB       1                   Delete behavior
0016                  (   /dd/defs/scf.d):00053         IT.EKO         RMB       1                   Echo flag
0017                  (   /dd/defs/scf.d):00054         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (   /dd/defs/scf.d):00055         IT.NUL         RMB       1                   End-of-line null count
0019                  (   /dd/defs/scf.d):00056         IT.PAU         RMB       1                   Page pause flag
001A                  (   /dd/defs/scf.d):00057         IT.PAG         RMB       1                   Number of lines per page
001B                  (   /dd/defs/scf.d):00058         IT.BSP         RMB       1                   Backspace character
001C                  (   /dd/defs/scf.d):00059         IT.DEL         RMB       1                   Delete-line character
001D                  (   /dd/defs/scf.d):00060         IT.EOR         RMB       1                   End-of-record character
001E                  (   /dd/defs/scf.d):00061         IT.EOF         RMB       1                   End-of-file character
001F                  (   /dd/defs/scf.d):00062         IT.RPR         RMB       1                   Reprint-line character
0020                  (   /dd/defs/scf.d):00063         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (   /dd/defs/scf.d):00064         IT.PSC         RMB       1                   Pause character
0022                  (   /dd/defs/scf.d):00065         IT.INT         RMB       1                   Interrupt character
0023                  (   /dd/defs/scf.d):00066         IT.QUT         RMB       1                   Quit character
0024                  (   /dd/defs/scf.d):00067         IT.BSE         RMB       1                   Backspace echo character
0025                  (   /dd/defs/scf.d):00068         IT.OVF         RMB       1                   Bell character
0026                  (   /dd/defs/scf.d):00069         IT.PAR         RMB       1                   Parity
0027                  (   /dd/defs/scf.d):00070         IT.BAU         RMB       1                   Baud rate
0028                  (   /dd/defs/scf.d):00071         IT.D2P         RMB       2                   Attached device name string offset
002A                  (   /dd/defs/scf.d):00072         IT.XON         RMB       1                   X-ON character
002B                  (   /dd/defs/scf.d):00073         IT.XOFF        RMB       1                   X-OFF character
002C                  (   /dd/defs/scf.d):00074         IT.COL         RMB       1                   Number of columns for display
002D                  (   /dd/defs/scf.d):00075         IT.ROW         RMB       1                   Number of rows for display
002E                  (   /dd/defs/scf.d):00076         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (   /dd/defs/scf.d):00077         
                      (   /dd/defs/scf.d):00078         * Window Descriptor Additions
                      (   /dd/defs/scf.d):00079         * For CoCo window, where IT.PAR = $80
                      (   /dd/defs/scf.d):00080                        ORG       IT.ROW+1
002E                  (   /dd/defs/scf.d):00081         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (   /dd/defs/scf.d):00082         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (   /dd/defs/scf.d):00083         IT.STY         RMB       1                   Screen type default
0031                  (   /dd/defs/scf.d):00084         IT.CPX         RMB       1                   Column start default
0032                  (   /dd/defs/scf.d):00085         IT.CPY         RMB       1                   Row start default
0033                  (   /dd/defs/scf.d):00086         IT.FGC         RMB       1                   Foreground color default
0034                  (   /dd/defs/scf.d):00087         IT.BGC         RMB       1                   Background color default
0035                  (   /dd/defs/scf.d):00088         IT.BDC         RMB       1                   Border color default
                      (   /dd/defs/scf.d):00089         
                      (   /dd/defs/scf.d):00090         
                      (   /dd/defs/scf.d):00091                        PAG
                      (   /dd/defs/scf.d):00092         ********************
                      (   /dd/defs/scf.d):00093         * SCF Static Storage
                      (   /dd/defs/scf.d):00094         *
                      (   /dd/defs/scf.d):00095         * SCF devices must reserve this space for SCF
                      (   /dd/defs/scf.d):00096         *
                      (   /dd/defs/scf.d):00097                        ORG       V.USER
0006                  (   /dd/defs/scf.d):00098         V.TYPE         RMB       1                   Device type or parity
0007                  (   /dd/defs/scf.d):00099         V.LINE         RMB       1                   Lines left until end of page
0008                  (   /dd/defs/scf.d):00100         V.PAUS         RMB       1                   Immediate Pause request
0009                  (   /dd/defs/scf.d):00101         V.DEV2         RMB       2                   Attached device's static
000B                  (   /dd/defs/scf.d):00102         V.INTR         RMB       1                   Interrupt char
000C                  (   /dd/defs/scf.d):00103         V.QUIT         RMB       1                   Quit char
000D                  (   /dd/defs/scf.d):00104         V.PCHR         RMB       1                   Pause char
000E                  (   /dd/defs/scf.d):00105         V.ERR          RMB       1                   Accumulated errors
000F                  (   /dd/defs/scf.d):00106         V.XON          RMB       1                   X-On char
0010                  (   /dd/defs/scf.d):00107         V.XOFF         RMB       1                   X-Off char
0011                  (   /dd/defs/scf.d):00108         V.KANJI        RMB       1                   Kanji mode flag
0012                  (   /dd/defs/scf.d):00109         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (   /dd/defs/scf.d):00110         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (   /dd/defs/scf.d):00111         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (   /dd/defs/scf.d):00112         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (   /dd/defs/scf.d):00113         V.SCF          EQU       .                   Total SCF manager static overhead
                      (   /dd/defs/scf.d):00114         
                      (   /dd/defs/scf.d):00115         
                      (   /dd/defs/scf.d):00116                        PAG
                      (   /dd/defs/scf.d):00117         ***********************
                      (   /dd/defs/scf.d):00118         * Character Definitions
                      (   /dd/defs/scf.d):00119         *
     0000             (   /dd/defs/scf.d):00120         C$NULL         SET       0                   Null char
     0001             (   /dd/defs/scf.d):00121         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (   /dd/defs/scf.d):00122         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (   /dd/defs/scf.d):00123         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (   /dd/defs/scf.d):00124         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (   /dd/defs/scf.d):00125         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (   /dd/defs/scf.d):00126         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (   /dd/defs/scf.d):00127         C$RARR         SET       $09                 Right Arrow
     0005             (   /dd/defs/scf.d):00128         C$EL           SET       $05                 Erase Line
     000A             (   /dd/defs/scf.d):00129         C$LF           SET       $0A                 Line feed
     000B             (   /dd/defs/scf.d):00130         C$HOME         SET       $0B                 Home position Code
     0015             (   /dd/defs/scf.d):00131         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (   /dd/defs/scf.d):00132         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (   /dd/defs/scf.d):00133         C$CR           SET       $0D                 Carriage return
     000C             (   /dd/defs/scf.d):00134         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (   /dd/defs/scf.d):00135         C$SI           SET       $0F                 Shift IN Code
     000E             (   /dd/defs/scf.d):00136         C$SO           SET       $0E                 Shift OUT Code
     0010             (   /dd/defs/scf.d):00137         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (   /dd/defs/scf.d):00138         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (   /dd/defs/scf.d):00139         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (   /dd/defs/scf.d):00140         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (   /dd/defs/scf.d):00141         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (   /dd/defs/scf.d):00142         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (   /dd/defs/scf.d):00143         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (   /dd/defs/scf.d):00144         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (   /dd/defs/scf.d):00145         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (   /dd/defs/scf.d):00146         C$RGT          SET       $1C                 Cursor right
     001D             (   /dd/defs/scf.d):00147         C$LFT          SET       $1D                 Cursor left
     001E             (   /dd/defs/scf.d):00148         C$UP           SET       $1E                 Cursor up
     001F             (   /dd/defs/scf.d):00149         C$DWN          SET       $1F                 Cursor down
     0020             (   /dd/defs/scf.d):00150         C$SPAC         SET       $20                 Space
     002E             (   /dd/defs/scf.d):00151         C$PERD         SET       '.
     002C             (   /dd/defs/scf.d):00152         C$COMA         SET       ',
                      (   /dd/defs/scf.d):00153         
                      (   /dd/defs/scf.d):00154         
                      (   /dd/defs/scf.d):00155                        PAG
                      (   /dd/defs/scf.d):00156         *********************************************
                      (   /dd/defs/scf.d):00157         * Sequential Character Path Descriptor Format
                      (   /dd/defs/scf.d):00158         *
                      (   /dd/defs/scf.d):00159         * A path descriptor is created for every new path that is open
                      (   /dd/defs/scf.d):00160         * via the I$Open system call (processed by IOMan).  Process
                      (   /dd/defs/scf.d):00161         * descriptors track state information of a path.
                      (   /dd/defs/scf.d):00162         *
                      (   /dd/defs/scf.d):00163                        ORG       PD.FST
000A                  (   /dd/defs/scf.d):00164         PD.DV2         RMB       2                   Output device table pointer
000C                  (   /dd/defs/scf.d):00165         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (   /dd/defs/scf.d):00166         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (   /dd/defs/scf.d):00167         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (   /dd/defs/scf.d):00168         PD.STS         RMB       2                   Status routine module addr
0012                  (   /dd/defs/scf.d):00169         PD.STM         RMB       2                   Reserved for status routine
                      (   /dd/defs/scf.d):00170                        ORG       PD.OPT
0020                  (   /dd/defs/scf.d):00171                        RMB       1                   Device type
0021                  (   /dd/defs/scf.d):00172         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (   /dd/defs/scf.d):00173         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (   /dd/defs/scf.d):00174         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (   /dd/defs/scf.d):00175         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (   /dd/defs/scf.d):00176         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (   /dd/defs/scf.d):00177         PD.NUL         RMB       1                   End of Line null count
0027                  (   /dd/defs/scf.d):00178         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (   /dd/defs/scf.d):00179         PD.PAG         RMB       1                   Lines per page
0029                  (   /dd/defs/scf.d):00180         PD.BSP         RMB       1                   Backspace character
002A                  (   /dd/defs/scf.d):00181         PD.DEL         RMB       1                   Delete Line character
002B                  (   /dd/defs/scf.d):00182         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (   /dd/defs/scf.d):00183         PD.EOF         RMB       1                   End of File character
002D                  (   /dd/defs/scf.d):00184         PD.RPR         RMB       1                   Repront Line character
002E                  (   /dd/defs/scf.d):00185         PD.DUP         RMB       1                   Dup Last Line character
002F                  (   /dd/defs/scf.d):00186         PD.PSC         RMB       1                   Pause character
0030                  (   /dd/defs/scf.d):00187         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (   /dd/defs/scf.d):00188         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (   /dd/defs/scf.d):00189         PD.BSE         RMB       1                   Backspace echo character
0033                  (   /dd/defs/scf.d):00190         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (   /dd/defs/scf.d):00191         PD.PAR         RMB       1                   Parity code
0035                  (   /dd/defs/scf.d):00192         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (   /dd/defs/scf.d):00193         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (   /dd/defs/scf.d):00194         PD.XON         RMB       1                   ACIA X-ON character
0039                  (   /dd/defs/scf.d):00195         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (   /dd/defs/scf.d):00196         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (   /dd/defs/scf.d):00197         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (   /dd/defs/scf.d):00198         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (   /dd/defs/scf.d):00199         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (   /dd/defs/scf.d):00200         PD.PST         RMB       1                   Current path status
                      (   /dd/defs/scf.d):00201         
                      (   /dd/defs/scf.d):00202         
                      (   /dd/defs/scf.d):00203         * PD.PST values Path Descriptor Status byte
                      (   /dd/defs/scf.d):00204         *
     0001             (   /dd/defs/scf.d):00205         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (   /dd/defs/scf.d):00206         
                      (   /dd/defs/scf.d):00207         
                      (   /dd/defs/scf.d):00208         * PD.PAR definitions
                      (   /dd/defs/scf.d):00209         *
                      (   /dd/defs/scf.d):00210         * Parity
     0000             (   /dd/defs/scf.d):00211         PARNONE        EQU       %00000000
     0020             (   /dd/defs/scf.d):00212         PARODD         EQU       %00100000
     0060             (   /dd/defs/scf.d):00213         PAREVEN        EQU       %01100000
     00A0             (   /dd/defs/scf.d):00214         PARMARK        EQU       %10100000
     00E0             (   /dd/defs/scf.d):00215         PARSPACE       EQU       %11100000
     00E0             (   /dd/defs/scf.d):00216         PARMASK        EQU       %11100000
                      (   /dd/defs/scf.d):00217         
                      (   /dd/defs/scf.d):00218         * PD.BAU definitions
                      (   /dd/defs/scf.d):00219         *
                      (   /dd/defs/scf.d):00220         * Baud rate
     0000             (   /dd/defs/scf.d):00221         B110           EQU       %00000000
     0001             (   /dd/defs/scf.d):00222         B300           EQU       %00000001
     0002             (   /dd/defs/scf.d):00223         B600           EQU       %00000010
     0003             (   /dd/defs/scf.d):00224         B1200          EQU       %00000011
     0004             (   /dd/defs/scf.d):00225         B2400          EQU       %00000100
     0005             (   /dd/defs/scf.d):00226         B4800          EQU       %00000101
     0006             (   /dd/defs/scf.d):00227         B9600          EQU       %00000110
     0007             (   /dd/defs/scf.d):00228         B19200         EQU       %00000111
     0008             (   /dd/defs/scf.d):00229         B38400         EQU       %00001000
     0009             (   /dd/defs/scf.d):00230         B57600         EQU       %00001001
     000A             (   /dd/defs/scf.d):00231         B115200        EQU       %00001010
                      (   /dd/defs/scf.d):00232         * Word size
     0000             (   /dd/defs/scf.d):00233         WORD8          EQU       %00000000
     0020             (   /dd/defs/scf.d):00234         WORD7          EQU       %00100000
                      (   /dd/defs/scf.d):00235         * Stop bits
     0000             (   /dd/defs/scf.d):00236         STOP1          EQU       %00000000
     0010             (   /dd/defs/scf.d):00237         STOP2          EQU       %00010000
                      (   /dd/defs/scf.d):00238         
                      ( /dd/defs/deffile):00009                  use   /dd/defs/coco.d
                      (  /dd/defs/coco.d):00001         ********************************************************************
                      (  /dd/defs/coco.d):00002         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (  /dd/defs/coco.d):00003         *
                      (  /dd/defs/coco.d):00004         * $Id$
                      (  /dd/defs/coco.d):00005         *
                      (  /dd/defs/coco.d):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (  /dd/defs/coco.d):00007         * Comment
                      (  /dd/defs/coco.d):00008         * ------------------------------------------------------------------
                      (  /dd/defs/coco.d):00009         *          1998/10/13  Boisy G. Pitre
                      (  /dd/defs/coco.d):00010         * Added defs by Bruce Isted from his Eliminator archive.
                      (  /dd/defs/coco.d):00011         *
                      (  /dd/defs/coco.d):00012         *          1998/10/31  Boisy G. Pitre
                      (  /dd/defs/coco.d):00013         * Merged cc3global.defs into this file.
                      (  /dd/defs/coco.d):00014         *
                      (  /dd/defs/coco.d):00015         *          2002/04/30  Boisy G. Pitre
                      (  /dd/defs/coco.d):00016         * Merged Level One and Level Two sysdefs.
                      (  /dd/defs/coco.d):00017         *
                      (  /dd/defs/coco.d):00018         *          2002/06/22  Boisy G. Pitre
                      (  /dd/defs/coco.d):00019         * Removed PIA.U4 and PIA.U8, improved comments
                      (  /dd/defs/coco.d):00020         *
                      (  /dd/defs/coco.d):00021         *          2003/11/05  Robert Gault
                      (  /dd/defs/coco.d):00022         * Made changes in window globals and grfdrv memory to handle regW
                      (  /dd/defs/coco.d):00023         * in 6809 systems.
                      (  /dd/defs/coco.d):00024         *
                      (  /dd/defs/coco.d):00025         *          2003/11/30  Boisy G. Pitre
                      (  /dd/defs/coco.d):00026         * Statics now are prefaced with V. to identify them easier in source.
                      (  /dd/defs/coco.d):00027         *
                      (  /dd/defs/coco.d):00028         *          2004/07/18  Boisy G. Pitre
                      (  /dd/defs/coco.d):00029         * Moved CoCo 3 Window stuff into cc3iodefs
                      (  /dd/defs/coco.d):00030         *
                      (  /dd/defs/coco.d):00031         *          2012/02/24  Boisy G. Pitre
                      (  /dd/defs/coco.d):00032         * Consolidated all CoCo-specific defs files into here.
                      (  /dd/defs/coco.d):00033         
                      (  /dd/defs/coco.d):00034                        NAM       CoCoDefs
                      (  /dd/defs/coco.d):00035                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (  /dd/defs/coco.d):00036         
                      (  /dd/defs/coco.d):00037         
                      (  /dd/defs/coco.d):00038         **********************
                      (  /dd/defs/coco.d):00039         * CPU Type Definitions
                      (  /dd/defs/coco.d):00040         *
     0001             (  /dd/defs/coco.d):00041         Color          SET       1
     0002             (  /dd/defs/coco.d):00042         Color3         SET       2
     0002             (  /dd/defs/coco.d):00043         CPUType        SET       Color3
                      (  /dd/defs/coco.d):00044         
                      (  /dd/defs/coco.d):00045         
                      (  /dd/defs/coco.d):00046         ******************************
                      (  /dd/defs/coco.d):00047         * Clock Speed Type Definitions
                      (  /dd/defs/coco.d):00048         *
     0001             (  /dd/defs/coco.d):00049         OneMHz         EQU       1
     0002             (  /dd/defs/coco.d):00050         TwoMHz         EQU       2
     0002             (  /dd/defs/coco.d):00051         CPUSpeed       SET       TwoMHz
                      (  /dd/defs/coco.d):00052         
                      (  /dd/defs/coco.d):00053         
                      (  /dd/defs/coco.d):00054         **********************************
                      (  /dd/defs/coco.d):00055         * Power Line Frequency Definitions
                      (  /dd/defs/coco.d):00056         *
     0001             (  /dd/defs/coco.d):00057         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (  /dd/defs/coco.d):00058         Hz60           EQU       2                   Assemble clock for 60 hz power
     0002             (  /dd/defs/coco.d):00059         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (  /dd/defs/coco.d):00060         
                      (  /dd/defs/coco.d):00061         
                      (  /dd/defs/coco.d):00062         **********************************
                      (  /dd/defs/coco.d):00063         * Ticks per second
                      (  /dd/defs/coco.d):00064         *
     003C             (  /dd/defs/coco.d):00065         TkPerSec       SET       60
                      (  /dd/defs/coco.d):00066         
                      (  /dd/defs/coco.d):00067         
                      (  /dd/defs/coco.d):00068         ******************
                      (  /dd/defs/coco.d):00069         * ACIA type set up
                      (  /dd/defs/coco.d):00070         *
                      (  /dd/defs/coco.d):00071                        ORG       1
0001                  (  /dd/defs/coco.d):00072         ACIA6850       RMB       1                   MC6850 acia.
0002                  (  /dd/defs/coco.d):00073         ACIA6551       RMB       1                   SY6551 acia.
0003                  (  /dd/defs/coco.d):00074         ACIA2661       RMB       1                   SC2661 acia.
     0002             (  /dd/defs/coco.d):00075         ACIATYPE       SET       ACIA6551
                      (  /dd/defs/coco.d):00076         
                      (  /dd/defs/coco.d):00077         
                      (  /dd/defs/coco.d):00078         ****************************************
                      (  /dd/defs/coco.d):00079         * Special character Bit position equates
                      (  /dd/defs/coco.d):00080         *
     0001             (  /dd/defs/coco.d):00081         SHIFTBIT       EQU       %00000001
     0002             (  /dd/defs/coco.d):00082         CNTRLBIT       EQU       %00000010
     0004             (  /dd/defs/coco.d):00083         ALTERBIT       EQU       %00000100
     0008             (  /dd/defs/coco.d):00084         UPBIT          EQU       %00001000
     0010             (  /dd/defs/coco.d):00085         DOWNBIT        EQU       %00010000
     0020             (  /dd/defs/coco.d):00086         LEFTBIT        EQU       %00100000
     0040             (  /dd/defs/coco.d):00087         RIGHTBIT       EQU       %01000000
     0080             (  /dd/defs/coco.d):00088         SPACEBIT       EQU       %10000000
                      (  /dd/defs/coco.d):00089         
                      (  /dd/defs/coco.d):00090         
                      (  /dd/defs/coco.d):00091         ******************
                      (  /dd/defs/coco.d):00092         * Device addresses for miscellaneous hardware
                      (  /dd/defs/coco.d):00093         *
     FF68             (  /dd/defs/coco.d):00094         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (  /dd/defs/coco.d):00095         A.ModP         SET       $FF6C               ModPak Address
     FF40             (  /dd/defs/coco.d):00096         DPort          SET       $FF40               Disk controller base address
     FF7F             (  /dd/defs/coco.d):00097         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (  /dd/defs/coco.d):00098         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (  /dd/defs/coco.d):00099         PIA0Base       EQU       $FF00
     FF20             (  /dd/defs/coco.d):00100         PIA1Base       EQU       $FF20
                      (  /dd/defs/coco.d):00101         
                      (  /dd/defs/coco.d):00102         
                      (  /dd/defs/coco.d):00103         ******************
                      (  /dd/defs/coco.d):00104         * VDG Devices
                      (  /dd/defs/coco.d):00105         *
     FFC0             (  /dd/defs/coco.d):00106         A.TermV        SET       $FFC0               VDG Term
     FFC1             (  /dd/defs/coco.d):00107         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (  /dd/defs/coco.d):00108         A.V2           SET       $FFC2
     FFC3             (  /dd/defs/coco.d):00109         A.V3           SET       $FFC3
     FFC4             (  /dd/defs/coco.d):00110         A.V4           SET       $FFC4
     FFC5             (  /dd/defs/coco.d):00111         A.V5           SET       $FFC5
     FFC6             (  /dd/defs/coco.d):00112         A.V6           SET       $FFC6
     FFC7             (  /dd/defs/coco.d):00113         A.V7           SET       $FFC7
                      (  /dd/defs/coco.d):00114         
                      (  /dd/defs/coco.d):00115         
                      (  /dd/defs/coco.d):00116         
                      (  /dd/defs/coco.d):00117         ********************************
                      (  /dd/defs/coco.d):00118         * Boot defs for NitrOS-9 Level 1
                      (  /dd/defs/coco.d):00119         *
                      (  /dd/defs/coco.d):00120         * These defs are not strictly for 'Boot', but are for booting the
                      (  /dd/defs/coco.d):00121         * system.
                      (  /dd/defs/coco.d):00122         *
                      (  /dd/defs/coco.d):00123         
                      (  /dd/defs/coco.d):00124         
                      (  /dd/defs/coco.d):00125         ******************************************
                      (  /dd/defs/coco.d):00126         * Boot defs for NitrOS-9 Level 2 and above
                      (  /dd/defs/coco.d):00127         *
                      (  /dd/defs/coco.d):00128         * These defs are not strictly for 'Boot', but are for booting the
                      (  /dd/defs/coco.d):00129         * system.
                      (  /dd/defs/coco.d):00130         *
     ED00             (  /dd/defs/coco.d):00131         Bt.Start       SET       $ED00               Start address of the boot track in memory
     003B             (  /dd/defs/coco.d):00132         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (  /dd/defs/coco.d):00133         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (  /dd/defs/coco.d):00134         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
                      (  /dd/defs/coco.d):00135         
                      (  /dd/defs/coco.d):00136         
                      (  /dd/defs/coco.d):00137         * On the CoCo, the boot track is all of track 34
                      (  /dd/defs/coco.d):00138         
     0022             (  /dd/defs/coco.d):00139         Bt.Track       EQU       34                  Boot track
     0000             (  /dd/defs/coco.d):00140         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (  /dd/defs/coco.d):00141         
                      (  /dd/defs/coco.d):00142         
     1080             (  /dd/defs/coco.d):00143         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (  /dd/defs/coco.d):00144         
                      (  /dd/defs/coco.d):00145         
                      (  /dd/defs/coco.d):00146         
                      (  /dd/defs/coco.d):00147         *************************************************
                      (  /dd/defs/coco.d):00148         *
                      (  /dd/defs/coco.d):00149         * NitrOS-9 Level 1 Section
                      (  /dd/defs/coco.d):00150         *
                      (  /dd/defs/coco.d):00151         *************************************************
                      (  /dd/defs/coco.d):00152         
                      (  /dd/defs/coco.d):00153         
                      (  /dd/defs/coco.d):00154         
                      (  /dd/defs/coco.d):00155         *************************************************
                      (  /dd/defs/coco.d):00156         *
                      (  /dd/defs/coco.d):00157         * NitrOS-9 Level 2 Section
                      (  /dd/defs/coco.d):00158         *
                      (  /dd/defs/coco.d):00159         *************************************************
                      (  /dd/defs/coco.d):00160         
                      (  /dd/defs/coco.d):00161         ****************************************
                      (  /dd/defs/coco.d):00162         * Dynamic Address Translator Definitions
                      (  /dd/defs/coco.d):00163         *
     0008             (  /dd/defs/coco.d):00164         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (  /dd/defs/coco.d):00165         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (  /dd/defs/coco.d):00166         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (  /dd/defs/coco.d):00167         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (  /dd/defs/coco.d):00168         DAT.Task       EQU       $FF91               Task Register address
     0020             (  /dd/defs/coco.d):00169         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (  /dd/defs/coco.d):00170         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (  /dd/defs/coco.d):00171         DAT.Free       EQU       $333E               Free Block Number
     003F             (  /dd/defs/coco.d):00172         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (  /dd/defs/coco.d):00173         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (  /dd/defs/coco.d):00174         DAT.WrPr       EQU       0                   no write protect
     0000             (  /dd/defs/coco.d):00175         DAT.WrEn       EQU       0                   no write enable
     0000             (  /dd/defs/coco.d):00176         SysTask        EQU       0                   Coco System Task number
     003F             (  /dd/defs/coco.d):00177         IOBlock        EQU       $3F
     003F             (  /dd/defs/coco.d):00178         ROMBlock       EQU       $3F
     007F             (  /dd/defs/coco.d):00179         IOAddr         EQU       $7F
     0001             (  /dd/defs/coco.d):00180         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (  /dd/defs/coco.d):00181         RAMCount       EQU       1                   initial blocks of RAM
     0005             (  /dd/defs/coco.d):00182         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (  /dd/defs/coco.d):00183         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (  /dd/defs/coco.d):00184         ByteType       EQU       2                   chk entire block of RAM
     0001             (  /dd/defs/coco.d):00185         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (  /dd/defs/coco.d):00186         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (  /dd/defs/coco.d):00187         * NOTE: this check assumes any NotRAM with a module will
                      (  /dd/defs/coco.d):00188         *       always start with $87CD in first two bytes of block
     0001             (  /dd/defs/coco.d):00189         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (  /dd/defs/coco.d):00190         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (  /dd/defs/coco.d):00191         LastRAM        EQU       IOBlock             maximum RAM block number
                      (  /dd/defs/coco.d):00192         
                      (  /dd/defs/coco.d):00193         ***************************
                      (  /dd/defs/coco.d):00194         * Color Computer 3 Specific
                      (  /dd/defs/coco.d):00195         *
     0001             (  /dd/defs/coco.d):00196         MappedIO       EQU       true                (Actually False but it works better this way)
                      (  /dd/defs/coco.d):00197         
                      (  /dd/defs/coco.d):00198         ********************
                      (  /dd/defs/coco.d):00199         * Hardware addresses
                      (  /dd/defs/coco.d):00200         *
     FF00             (  /dd/defs/coco.d):00201         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (  /dd/defs/coco.d):00202         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (  /dd/defs/coco.d):00203         BordReg        EQU       $FF9A               Border color register
     FFB0             (  /dd/defs/coco.d):00204         PalAdr         EQU       $FFB0               Palette registers
                      (  /dd/defs/coco.d):00205         
     0007             (  /dd/defs/coco.d):00206         HW.Page        SET       $07                 Device descriptor hardware page
                      (  /dd/defs/coco.d):00207         
                      (  /dd/defs/coco.d):00208         * KrnBlk defines the block number of the 8K RAM block that is mapped to
                      (  /dd/defs/coco.d):00209         * the top of CPU address space ($E000-$FFFF) for the system process, and
                      (  /dd/defs/coco.d):00210         * which holds the Kernel. The top 2 pages of this CPU address space ($FFE0-
                      (  /dd/defs/coco.d):00211         * $FFFF) has two special properties. Firstly, it contains the I/O space.
                      (  /dd/defs/coco.d):00212         * Secondly, the parts that contain RAM map are not affected by the DAT
                      (  /dd/defs/coco.d):00213         * mappings but, instead, *always* map that RAM to a fixed RAM block
                      (  /dd/defs/coco.d):00214         * (KrnBlk). When a user process is mapped in, and requests enough memory,
                      (  /dd/defs/coco.d):00215         * it will end up with its own block assigned for CPU address space $E000-
                      (  /dd/defs/coco.d):00216         * $FFFF but the top of the address space is unusable by the user process:
                      (  /dd/defs/coco.d):00217         * it still contains the I/O and the bit of RAM that's mapped to KrnBlk.
                      (  /dd/defs/coco.d):00218         * Usually, the value of KrnBlk is fixed for a particular hardware design;
                      (  /dd/defs/coco.d):00219         * For the COCO GIME, it's always $3F.
     003F             (  /dd/defs/coco.d):00220         KrnBlk         SET       $3F
                      (  /dd/defs/coco.d):00221         
                      (  /dd/defs/coco.d):00222         
                      ( /dd/defs/deffile):00010                  use   /dd/defs/cocovtio.d
                      (/dd/defs/cocovtio):00001         ********************************************************************
                      (/dd/defs/cocovtio):00002         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (/dd/defs/cocovtio):00003         *
                      (/dd/defs/cocovtio):00004         * $Id$
                      (/dd/defs/cocovtio):00005         *
                      (/dd/defs/cocovtio):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/defs/cocovtio):00007         * Comment
                      (/dd/defs/cocovtio):00008         * ------------------------------------------------------------------
                      (/dd/defs/cocovtio):00009         *          2004/07/18  Boisy G. Pitre
                      (/dd/defs/cocovtio):00010         * Started from systype
                      (/dd/defs/cocovtio):00011         
                      (/dd/defs/cocovtio):00012                        NAM       VTIODefs
                      (/dd/defs/cocovtio):00013                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (/dd/defs/cocovtio):00014         
                      (/dd/defs/cocovtio):00015         * Max size of Get/Put buffer to copy between user and grfdrv. There is room for up to 128, but
                      (/dd/defs/cocovtio):00016         *   we may use some of that for other things. Leaving at OS-9 Level II default (72) for now.
                      (/dd/defs/cocovtio):00017         * May try increasing to higher (maybe 96?) to see if it makes a noticable difference GPLoading
                      (/dd/defs/cocovtio):00018         * fonts, etc. in EOU bootup.
                      (/dd/defs/cocovtio):00019         
     0048             (/dd/defs/cocovtio):00020         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (/dd/defs/cocovtio):00021         
                      (/dd/defs/cocovtio):00022         ****************
                      (/dd/defs/cocovtio):00023         * Window Devices
                      (/dd/defs/cocovtio):00024         *
                      (/dd/defs/cocovtio):00025                        ORG       $FF9F
FF9F                  (/dd/defs/cocovtio):00026         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (/dd/defs/cocovtio):00027         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (/dd/defs/cocovtio):00028         A.W1           RMB       1                   $FFA1
FFA2                  (/dd/defs/cocovtio):00029         A.W2           RMB       1                   $FFA2
FFA3                  (/dd/defs/cocovtio):00030         A.W3           RMB       1                   $FFA3
FFA4                  (/dd/defs/cocovtio):00031         A.W4           RMB       1                   $FFA4
FFA5                  (/dd/defs/cocovtio):00032         A.W5           RMB       1                   $FFA5
FFA6                  (/dd/defs/cocovtio):00033         A.W6           RMB       1                   $FFA6
FFA7                  (/dd/defs/cocovtio):00034         A.W7           RMB       1                   $FFA7
FFA8                  (/dd/defs/cocovtio):00035         A.W8           RMB       1                   $FFA8
FFA9                  (/dd/defs/cocovtio):00036         A.W9           RMB       1                   $FFA9
FFAA                  (/dd/defs/cocovtio):00037         A.W10          RMB       1                   $FFAA
FFAB                  (/dd/defs/cocovtio):00038         A.W11          RMB       1                   $FFAB
FFAC                  (/dd/defs/cocovtio):00039         A.W12          RMB       1                   $FFAC
FFAD                  (/dd/defs/cocovtio):00040         A.W13          RMB       1                   $FFAD
FFAE                  (/dd/defs/cocovtio):00041         A.W14          RMB       1                   $FFAE
FFAF                  (/dd/defs/cocovtio):00042         A.W15          RMB       1                   $FFAF
                      (/dd/defs/cocovtio):00043         
                      (/dd/defs/cocovtio):00044         **********************************
                      (/dd/defs/cocovtio):00045         * Pointer Device Packet Definition
                      (/dd/defs/cocovtio):00046         *
                      (/dd/defs/cocovtio):00047                        ORG       0
0000                  (/dd/defs/cocovtio):00048         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (/dd/defs/cocovtio):00049         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (/dd/defs/cocovtio):00050         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (/dd/defs/cocovtio):00051                        RMB       2                   reserved
0005                  (/dd/defs/cocovtio):00052         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (/dd/defs/cocovtio):00053         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (/dd/defs/cocovtio):00054         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (/dd/defs/cocovtio):00055         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (/dd/defs/cocovtio):00056         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (/dd/defs/cocovtio):00057         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (/dd/defs/cocovtio):00058         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (/dd/defs/cocovtio):00059         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (/dd/defs/cocovtio):00060         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (/dd/defs/cocovtio):00061         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (/dd/defs/cocovtio):00062                        RMB       2                   Reserved
0012                  (/dd/defs/cocovtio):00063         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (/dd/defs/cocovtio):00064         Pt.BDY         RMB       2                   Button down Y value
0016                  (/dd/defs/cocovtio):00065         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (/dd/defs/cocovtio):00066         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (/dd/defs/cocovtio):00067         Pt.AcX         RMB       2                   Actual X Value
001A                  (/dd/defs/cocovtio):00068         Pt.AcY         RMB       2                   Actual Y Value
001C                  (/dd/defs/cocovtio):00069         Pt.WRX         RMB       2                   Window Relative X
001E                  (/dd/defs/cocovtio):00070         Pt.WRY         RMB       2                   Window Relative Y
     0020             (/dd/defs/cocovtio):00071         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (/dd/defs/cocovtio):00072         
                      (/dd/defs/cocovtio):00073         **************************
                      (/dd/defs/cocovtio):00074         * window regions for mouse
                      (/dd/defs/cocovtio):00075         *
     0000             (/dd/defs/cocovtio):00076         WR.Cntnt       EQU       0                   content region
     0001             (/dd/defs/cocovtio):00077         WR.Cntrl       EQU       1                   control region
     0002             (/dd/defs/cocovtio):00078         WR.OfWin       EQU       2                   off window
                      (/dd/defs/cocovtio):00079         
                      (/dd/defs/cocovtio):00080         *************************************
                      (/dd/defs/cocovtio):00081         * Standard system get/put buffer defs
                      (/dd/defs/cocovtio):00082         *
                      (/dd/defs/cocovtio):00083         *
                      (/dd/defs/cocovtio):00084         * system group numbers
                      (/dd/defs/cocovtio):00085         *
                      (/dd/defs/cocovtio):00086                        ORG       200
00C8                  (/dd/defs/cocovtio):00087         Grp.Fnt        RMB       1                   font group
00C9                  (/dd/defs/cocovtio):00088         Grp.Clip       RMB       1                   clipboard group
00CA                  (/dd/defs/cocovtio):00089         Grp.Ptr        RMB       1                   pointer group
00CB                  (/dd/defs/cocovtio):00090         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (/dd/defs/cocovtio):00091         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (/dd/defs/cocovtio):00092         Grp.Pat6       RMB       1                   pattern group 16 color
                      (/dd/defs/cocovtio):00093         *
                      (/dd/defs/cocovtio):00094         * font buffer numbers
                      (/dd/defs/cocovtio):00095         *
                      (/dd/defs/cocovtio):00096                        ORG       1
0001                  (/dd/defs/cocovtio):00097         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (/dd/defs/cocovtio):00098         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (/dd/defs/cocovtio):00099         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (/dd/defs/cocovtio):00100         *
                      (/dd/defs/cocovtio):00101         * pattern buffer numbers
                      (/dd/defs/cocovtio):00102         *
                      (/dd/defs/cocovtio):00103                        ORG       1
0001                  (/dd/defs/cocovtio):00104         Pat.Dot        RMB       1
0002                  (/dd/defs/cocovtio):00105         Pat.Vrt        RMB       1
0003                  (/dd/defs/cocovtio):00106         Pat.Hrz        RMB       1
0004                  (/dd/defs/cocovtio):00107         Pat.XHtc       RMB       1
0005                  (/dd/defs/cocovtio):00108         Pat.LSnt       RMB       1
0006                  (/dd/defs/cocovtio):00109         Pat.RSnt       RMB       1
0007                  (/dd/defs/cocovtio):00110         Pat.SDot       RMB       1
0008                  (/dd/defs/cocovtio):00111         Pat.BDot       RMB       1
                      (/dd/defs/cocovtio):00112         *
                      (/dd/defs/cocovtio):00113         * pointer buffer numbers
                      (/dd/defs/cocovtio):00114         *
                      (/dd/defs/cocovtio):00115                        ORG       1
0001                  (/dd/defs/cocovtio):00116         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (/dd/defs/cocovtio):00117         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (/dd/defs/cocovtio):00118         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (/dd/defs/cocovtio):00119         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (/dd/defs/cocovtio):00120         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (/dd/defs/cocovtio):00121         Ptr.Txt        RMB       1                   Text pointer
0007                  (/dd/defs/cocovtio):00122         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (/dd/defs/cocovtio):00123         
                      (/dd/defs/cocovtio):00124         **********************
                      (/dd/defs/cocovtio):00125         * KeyDrv Entry Points
                      (/dd/defs/cocovtio):00126                        ORG       0
0000                  (/dd/defs/cocovtio):00127         K$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00128         K$Term         RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00129         K$FnKey        RMB       3                   get function key states
0009                  (/dd/defs/cocovtio):00130         K$RdKey        RMB       3                   get key states
                      (/dd/defs/cocovtio):00131         
                      (/dd/defs/cocovtio):00132         **********************
                      (/dd/defs/cocovtio):00133         * JoyDrv Entry Points
                      (/dd/defs/cocovtio):00134                        ORG       0
0000                  (/dd/defs/cocovtio):00135         J$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00136         J$Term         RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00137         J$MsBtn        RMB       3                   get mouse button states
0009                  (/dd/defs/cocovtio):00138         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (/dd/defs/cocovtio):00139         J$JyBtn        RMB       3                   get joystick button states
000F                  (/dd/defs/cocovtio):00140         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (/dd/defs/cocovtio):00141         
                      (/dd/defs/cocovtio):00142         **********************
                      (/dd/defs/cocovtio):00143         * SndDrv Entry Points
                      (/dd/defs/cocovtio):00144                        ORG       0
0000                  (/dd/defs/cocovtio):00145         S$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00146         S$GetStt       RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00147         S$SetStt       RMB       3                   joystick termination
0009                  (/dd/defs/cocovtio):00148         S$Term         RMB       3                   get joystick X/Y coordinates
                      (/dd/defs/cocovtio):00149         
                      (/dd/defs/cocovtio):00150         ********************************
                      (/dd/defs/cocovtio):00151         * Window/Menu Bar Data Structure
                      (/dd/defs/cocovtio):00152         *
                      (/dd/defs/cocovtio):00153         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (/dd/defs/cocovtio):00154         * for use in the high level windowing package.
                      (/dd/defs/cocovtio):00155         *
     000A             (/dd/defs/cocovtio):00156         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (/dd/defs/cocovtio):00157         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (/dd/defs/cocovtio):00158         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (/dd/defs/cocovtio):00159         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (/dd/defs/cocovtio):00160         *
                      (/dd/defs/cocovtio):00161         * Menu Item Descriptor : (MN.ITEMS)
                      (/dd/defs/cocovtio):00162         * one required for each item within the menu
                      (/dd/defs/cocovtio):00163         *
                      (/dd/defs/cocovtio):00164                        ORG       0
0000                  (/dd/defs/cocovtio):00165         MI.TTL         RMB       MXTTLEN             item name
000F                  (/dd/defs/cocovtio):00166         MI.ENBL        RMB       1                   enable flag
0010                  (/dd/defs/cocovtio):00167         MI.RES         RMB       5                   reserved bytes
     0015             (/dd/defs/cocovtio):00168         MI.SIZ         EQU       .                   size of menu item descriptor
                      (/dd/defs/cocovtio):00169         *
                      (/dd/defs/cocovtio):00170         * Menu Descriptor :
                      (/dd/defs/cocovtio):00171         * one for each menu on the manu bar
                      (/dd/defs/cocovtio):00172         * each is pointed to by MB.MPTR below
                      (/dd/defs/cocovtio):00173         *
                      (/dd/defs/cocovtio):00174                        ORG       0
0000                  (/dd/defs/cocovtio):00175         MN.TTL         RMB       MXTTLEN             menu title
000F                  (/dd/defs/cocovtio):00176         MN.ID          RMB       1                   menu id number (1-255)
0010                  (/dd/defs/cocovtio):00177         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (/dd/defs/cocovtio):00178         MN.NITS        RMB       1                   number of items in menu
0012                  (/dd/defs/cocovtio):00179         MN.ENBL        RMB       1                   enable flag
0013                  (/dd/defs/cocovtio):00180         MN.RES         RMB       2                   reserved bytes
0015                  (/dd/defs/cocovtio):00181         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (/dd/defs/cocovtio):00182         MN.SIZ         EQU       .                   size of menu descriptor
                      (/dd/defs/cocovtio):00183         *
                      (/dd/defs/cocovtio):00184         * Window Descriptor:
                      (/dd/defs/cocovtio):00185         * one required for each application in a framed window
                      (/dd/defs/cocovtio):00186         *
                      (/dd/defs/cocovtio):00187                        ORG       0
0000                  (/dd/defs/cocovtio):00188         WN.TTL         RMB       20                  title of window for title bar
0014                  (/dd/defs/cocovtio):00189         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (/dd/defs/cocovtio):00190         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (/dd/defs/cocovtio):00191         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (/dd/defs/cocovtio):00192         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (/dd/defs/cocovtio):00193         WN.RES         RMB       7                   reserved bytes
0020                  (/dd/defs/cocovtio):00194         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (/dd/defs/cocovtio):00195         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (/dd/defs/cocovtio):00196         
                      (/dd/defs/cocovtio):00197         *************************
                      (/dd/defs/cocovtio):00198         * Window Type Definitions
                      (/dd/defs/cocovtio):00199         *
                      (/dd/defs/cocovtio):00200         * To be used in setting up the border of the window in
                      (/dd/defs/cocovtio):00201         * the SS.WnSel SETSTAT
                      (/dd/defs/cocovtio):00202         *
                      (/dd/defs/cocovtio):00203                        ORG       0
0000                  (/dd/defs/cocovtio):00204         WT.NBox        RMB       1                   No Box
0001                  (/dd/defs/cocovtio):00205         WT.FWin        RMB       1                   Framed Window
0002                  (/dd/defs/cocovtio):00206         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (/dd/defs/cocovtio):00207         WT.SBox        RMB       1                   Shadowed Box
0004                  (/dd/defs/cocovtio):00208         WT.DBox        RMB       1                   Double Box
0005                  (/dd/defs/cocovtio):00209         WT.PBox        RMB       1                   Plain Box
                      (/dd/defs/cocovtio):00210         
                      (/dd/defs/cocovtio):00211         *************************************
                      (/dd/defs/cocovtio):00212         * Pre-Defined Menu IDs for the system
                      (/dd/defs/cocovtio):00213         *
                      (/dd/defs/cocovtio):00214                        ORG       1
0001                  (/dd/defs/cocovtio):00215         MId.Mov        RMB       1                   move box
0002                  (/dd/defs/cocovtio):00216         MId.Cls        RMB       1                   close box
0003                  (/dd/defs/cocovtio):00217         MId.Grw        RMB       1                   grow box
0004                  (/dd/defs/cocovtio):00218         MId.SUp        RMB       1                   scroll up
0005                  (/dd/defs/cocovtio):00219         MId.SDn        RMB       1                   scroll down
0006                  (/dd/defs/cocovtio):00220         MId.SRt        RMB       1                   scroll right
0007                  (/dd/defs/cocovtio):00221         MId.SLt        RMB       1                   scroll left
0008                  (/dd/defs/cocovtio):00222         MId.Chr        RMB       1                   character was depressed
                      (/dd/defs/cocovtio):00223                        ORG       20
0014                  (/dd/defs/cocovtio):00224         MId.Tdy        RMB       1                   Tandy menu
0015                  (/dd/defs/cocovtio):00225         MId.Fil        RMB       1                   Files Menu
0016                  (/dd/defs/cocovtio):00226         MId.Edt        RMB       1                   Edit Menu
0017                  (/dd/defs/cocovtio):00227         MId.Sty        RMB       1                   Styles menu
0018                  (/dd/defs/cocovtio):00228         MId.Fnt        RMB       1                   Font menu
                      (/dd/defs/cocovtio):00229         
                      (/dd/defs/cocovtio):00230         
                      (/dd/defs/cocovtio):00231         ******************************************************************************
                      (/dd/defs/cocovtio):00232         ******************************************************************************
                      (/dd/defs/cocovtio):00233         **                                                                          **
                      (/dd/defs/cocovtio):00234         ** NitrOS-9 Windowing system Global data definitions                        **
                      (/dd/defs/cocovtio):00235         **                                                                          **
                      (/dd/defs/cocovtio):00236         ******************************************************************************
                      (/dd/defs/cocovtio):00237         ******************************************************************************
                      (/dd/defs/cocovtio):00238         **                                                                          **
                      (/dd/defs/cocovtio):00239         ** System memory block 0 layout:                                            **
                      (/dd/defs/cocovtio):00240         **                                                                          **
                      (/dd/defs/cocovtio):00241         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (/dd/defs/cocovtio):00242         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (/dd/defs/cocovtio):00243         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (/dd/defs/cocovtio):00244         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (/dd/defs/cocovtio):00245         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (/dd/defs/cocovtio):00246         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (/dd/defs/cocovtio):00247         ** $0010-$001F : unused (User definable)                                    **
                      (/dd/defs/cocovtio):00248         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (/dd/defs/cocovtio):00249         ** $0100-$011F : Task usage table                                           **
                      (/dd/defs/cocovtio):00250         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (/dd/defs/cocovtio):00251         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (/dd/defs/cocovtio):00252         ** $0300-$03FF : system's system call dispatch table                        **
                      (/dd/defs/cocovtio):00253         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (/dd/defs/cocovtio):00254         ** $0500-$05FF : process descriptor pointer table                           **
                      (/dd/defs/cocovtio):00255         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (/dd/defs/cocovtio):00256         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (/dd/defs/cocovtio):00257         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (/dd/defs/cocovtio):00258         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (/dd/defs/cocovtio):00259         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (/dd/defs/cocovtio):00260         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (/dd/defs/cocovtio):00261         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (/dd/defs/cocovtio):00262         ** $1248-$127F : ????  (unused)                                             **
                      (/dd/defs/cocovtio):00263         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (/dd/defs/cocovtio):00264         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (/dd/defs/cocovtio):00265         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (/dd/defs/cocovtio):00266         **                                                                          **
                      (/dd/defs/cocovtio):00267         ******************************************************************************
                      (/dd/defs/cocovtio):00268         ******************************************************************************
                      (/dd/defs/cocovtio):00269         
                      (/dd/defs/cocovtio):00270         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (/dd/defs/cocovtio):00271         MaxLines       EQU       25                  Max. Y coord text value
     0000             (/dd/defs/cocovtio):00272         Meg            SET       false               "true" if 1 or 2 meg machine
                      (/dd/defs/cocovtio):00273         
     0000             (/dd/defs/cocovtio):00274         COMP           EQU       0                   composite monitor
     0001             (/dd/defs/cocovtio):00275         RGB            EQU       1                   RGB Analog monitor 
     0002             (/dd/defs/cocovtio):00276         MONO           EQU       2                   monochrome monitor
                      (/dd/defs/cocovtio):00277         
     0001             (/dd/defs/cocovtio):00278         Monitor        SET       RGB
                      (/dd/defs/cocovtio):00279         
                      (/dd/defs/cocovtio):00280         * Global definitions
     0001             (/dd/defs/cocovtio):00281         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (/dd/defs/cocovtio):00282         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (/dd/defs/cocovtio):00283         CapsLck        EQU       %00000100           Capslock enabled
     0280             (/dd/defs/cocovtio):00284         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00285                      IFEQ      MaxLines-25
     00C6             (/dd/defs/cocovtio):00286         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00287                      ELSE      
0019                  (/dd/defs/cocovtio):00288         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00289                      ENDC      
                      (/dd/defs/cocovtio):00290         
                      (/dd/defs/cocovtio):00291         *****************************************************************************
                      (/dd/defs/cocovtio):00292         * Static memory area for each window (VTIO/TC9IO)
                      (/dd/defs/cocovtio):00293         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (/dd/defs/cocovtio):00294         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (/dd/defs/cocovtio):00295         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (/dd/defs/cocovtio):00296         * May have to have smaller limit for text to gfx screens, as it will run much
                      (/dd/defs/cocovtio):00297         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (/dd/defs/cocovtio):00298         *
                      (/dd/defs/cocovtio):00299         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (/dd/defs/cocovtio):00300         * V.SCF is to be resolved properly in pass 1!!
                      (/dd/defs/cocovtio):00301                        ORG       V.SCF
001D                  (/dd/defs/cocovtio):00302         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (/dd/defs/cocovtio):00303         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (/dd/defs/cocovtio):00304         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (/dd/defs/cocovtio):00305         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (/dd/defs/cocovtio):00306         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (/dd/defs/cocovtio):00307         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (/dd/defs/cocovtio):00308         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (/dd/defs/cocovtio):00309         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (/dd/defs/cocovtio):00310         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (/dd/defs/cocovtio):00311         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (/dd/defs/cocovtio):00312         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (/dd/defs/cocovtio):00313         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (/dd/defs/cocovtio):00314                        RMB       1                   unused                                       $2A
002B                  (/dd/defs/cocovtio):00315         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (/dd/defs/cocovtio):00316         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (/dd/defs/cocovtio):00317         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (/dd/defs/cocovtio):00318         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (/dd/defs/cocovtio):00319         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (/dd/defs/cocovtio):00320         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (/dd/defs/cocovtio):00321         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (/dd/defs/cocovtio):00322         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (/dd/defs/cocovtio):00323         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (/dd/defs/cocovtio):00324         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (/dd/defs/cocovtio):00325         CC3Parm        RMB       128-.               global parameter area
0080                  (/dd/defs/cocovtio):00326         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (/dd/defs/cocovtio):00327         CC3DSiz        EQU       .
                      (/dd/defs/cocovtio):00328         
                      (/dd/defs/cocovtio):00329         *****************************************************************************
                      (/dd/defs/cocovtio):00330         * GrfInt/WindInt global memory area
                      (/dd/defs/cocovtio):00331         * This area sits in system block 0 from $1000 to $10ff
     1000             (/dd/defs/cocovtio):00332         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (/dd/defs/cocovtio):00333                        ORG       0
0000                  (/dd/defs/cocovtio):00334         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (/dd/defs/cocovtio):00335         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (/dd/defs/cocovtio):00336         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (/dd/defs/cocovtio):00337         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (/dd/defs/cocovtio):00338         *g0003    rmb   2          NEW: UNUSED
0005                  (/dd/defs/cocovtio):00339         g0005          RMB       2                   Temp save in Windint RG
0007                  (/dd/defs/cocovtio):00340         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (/dd/defs/cocovtio):00341         G.MonTyp       RMB       1                   monitor type
     000A             (/dd/defs/cocovtio):00342         g000A          EQU       .                   Old label for compatibility
000A                  (/dd/defs/cocovtio):00343         G.CrDvFl       RMB       1                   Are we current device flag (only set when all
                      (/dd/defs/cocovtio):00344         *                           Parms have been moved to Dev Mem)
                      (/dd/defs/cocovtio):00345         *                           0=We are not on our device
                      (/dd/defs/cocovtio):00346         *                           1=We are the current device
                      (/dd/defs/cocovtio):00347         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (/dd/defs/cocovtio):00348         *                            whether or not to update GIME regs themselves
                      (/dd/defs/cocovtio):00349         *                            If not current device, they don't.)
000B                  (/dd/defs/cocovtio):00350         G.WinType      RMB       1                   current device's V.TYPE
000C                  (/dd/defs/cocovtio):00351         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (/dd/defs/cocovtio):00352         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (/dd/defs/cocovtio):00353         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (/dd/defs/cocovtio):00354         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (/dd/defs/cocovtio):00355         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (/dd/defs/cocovtio):00356         G.BelVec       RMB       2                   BELL routine vector
0019                  (/dd/defs/cocovtio):00357         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (/dd/defs/cocovtio):00358         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (/dd/defs/cocovtio):00359         G.BelTnF       RMB       1                   BELL tone flag
001D                  (/dd/defs/cocovtio):00360         g001D          RMB       3
0020                  (/dd/defs/cocovtio):00361         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (/dd/defs/cocovtio):00362         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (/dd/defs/cocovtio):00363         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (/dd/defs/cocovtio):00364         *                           00000010 : VDGInt found
                      (/dd/defs/cocovtio):00365         *                           10000000 : GrfDrv found
0025                  (/dd/defs/cocovtio):00366         g0025          RMB       1
0026                  (/dd/defs/cocovtio):00367         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (/dd/defs/cocovtio):00368         *         IFEQ  TC9-true
                      (/dd/defs/cocovtio):00369         *CurLght  rmb   1          current keyboard light settings
                      (/dd/defs/cocovtio):00370         *         ELSE  
0027                  (/dd/defs/cocovtio):00371         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (/dd/defs/cocovtio):00372         *         ENDC  
0028                  (/dd/defs/cocovtio):00373         G.LKeyCd       RMB       1                   last keyboard code
0029                  (/dd/defs/cocovtio):00374         G.KyRept       RMB       1                   key repeat counter
                      (/dd/defs/cocovtio):00375         * A secondary 3 key table (same format as g002D below)
002A                  (/dd/defs/cocovtio):00376         G.2Key1        RMB       1                   $2A
002B                  (/dd/defs/cocovtio):00377         G.2Key2        RMB       1                   $2B
002C                  (/dd/defs/cocovtio):00378         G.2Key3        RMB       1
                      (/dd/defs/cocovtio):00379         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (/dd/defs/cocovtio):00380         * than 3 are hit, the last key is overwritten with the very last key down that
                      (/dd/defs/cocovtio):00381         * was checked. Format for all three is the same as the PIA column/row byte @
                      (/dd/defs/cocovtio):00382         * KeyFlag below.
002D                  (/dd/defs/cocovtio):00383         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (/dd/defs/cocovtio):00384         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (/dd/defs/cocovtio):00385         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (/dd/defs/cocovtio):00386         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (/dd/defs/cocovtio):00387         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (/dd/defs/cocovtio):00388         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (/dd/defs/cocovtio):00389         *                           %00000111-Column # (Output, 0-7)
                      (/dd/defs/cocovtio):00390         *                           %00111000-Row # (Input, 0-6)
0033                  (/dd/defs/cocovtio):00391         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (/dd/defs/cocovtio):00392         G.KySns        RMB       1                   key sense byte
0035                  (/dd/defs/cocovtio):00393         G.KySame       RMB       1                   same key flag
0036                  (/dd/defs/cocovtio):00394         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (/dd/defs/cocovtio):00395                        RMB       1
0038                  (/dd/defs/cocovtio):00396         g0038          RMB       1                   grfdrv initialized flag
0039                  (/dd/defs/cocovtio):00397                        RMB       2
003B                  (/dd/defs/cocovtio):00398         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (/dd/defs/cocovtio):00399         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (/dd/defs/cocovtio):00400         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (/dd/defs/cocovtio):00401         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (/dd/defs/cocovtio):00402         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (/dd/defs/cocovtio):00403         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (/dd/defs/cocovtio):00404         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (/dd/defs/cocovtio):00405         *         IFEQ  TC9-true
                      (/dd/defs/cocovtio):00406         *KeyParm  rmb   1          keyboard command parameter byte
                      (/dd/defs/cocovtio):00407         *         ELSE  
0063                  (/dd/defs/cocovtio):00408         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (/dd/defs/cocovtio):00409         *         ENDC  
0064                  (/dd/defs/cocovtio):00410         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (/dd/defs/cocovtio):00411         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (/dd/defs/cocovtio):00412         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (/dd/defs/cocovtio):00413         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (/dd/defs/cocovtio):00414         G.CoTble       RMB       6                   co-module table ($68)
006E                  (/dd/defs/cocovtio):00415         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (/dd/defs/cocovtio):00416         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (/dd/defs/cocovtio):00417         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (/dd/defs/cocovtio):00418         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (/dd/defs/cocovtio):00419         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (/dd/defs/cocovtio):00420         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (/dd/defs/cocovtio):00421         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (/dd/defs/cocovtio):00422         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (/dd/defs/cocovtio):00423         g00BD          RMB       1                   Current screen type for work window table
00BE                  (/dd/defs/cocovtio):00424         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (/dd/defs/cocovtio):00425         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (/dd/defs/cocovtio):00426         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (/dd/defs/cocovtio):00427         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (/dd/defs/cocovtio):00428         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (/dd/defs/cocovtio):00429         G.MsSig        RMB       1                   mouse signal flag
00C7                  (/dd/defs/cocovtio):00430         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (/dd/defs/cocovtio):00431         g00D7          RMB       9
00E0                  (/dd/defs/cocovtio):00432         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (/dd/defs/cocovtio):00433         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (/dd/defs/cocovtio):00434         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (/dd/defs/cocovtio):00435         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (/dd/defs/cocovtio):00436         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (/dd/defs/cocovtio):00437         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (/dd/defs/cocovtio):00438         
                      (/dd/defs/cocovtio):00439         *****************************************************************************
                      (/dd/defs/cocovtio):00440         * GrfDrv global memory data definitions
                      (/dd/defs/cocovtio):00441         * This area sits in system block 0 from $1100 to $119E
     1100             (/dd/defs/cocovtio):00442         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (/dd/defs/cocovtio):00443                        ORG       0
0000                  (/dd/defs/cocovtio):00444         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (/dd/defs/cocovtio):00445         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (/dd/defs/cocovtio):00446         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (/dd/defs/cocovtio):00447         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (/dd/defs/cocovtio):00448         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (/dd/defs/cocovtio):00449         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (/dd/defs/cocovtio):00450         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (/dd/defs/cocovtio):00451         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (/dd/defs/cocovtio):00452         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (/dd/defs/cocovtio):00453         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (/dd/defs/cocovtio):00454         *                                              overlay width has been copied
000B                  (/dd/defs/cocovtio):00455         gr000B         RMB       1
000C                  (/dd/defs/cocovtio):00456         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (/dd/defs/cocovtio):00457         gr000E         RMB       1
000F                  (/dd/defs/cocovtio):00458         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (/dd/defs/cocovtio):00459         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (/dd/defs/cocovtio):00460         gr0012         RMB       6
0018                  (/dd/defs/cocovtio):00461         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (/dd/defs/cocovtio):00462         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (/dd/defs/cocovtio):00463         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (/dd/defs/cocovtio):00464         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (/dd/defs/cocovtio):00465         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (/dd/defs/cocovtio):00466         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (/dd/defs/cocovtio):00467         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (/dd/defs/cocovtio):00468         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (/dd/defs/cocovtio):00469         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (/dd/defs/cocovtio):00470         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (/dd/defs/cocovtio):00471         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (/dd/defs/cocovtio):00472         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (/dd/defs/cocovtio):00473         gr002C         RMB       2
002E                  (/dd/defs/cocovtio):00474         gr002E         RMB       2                   current window table entry
0030                  (/dd/defs/cocovtio):00475         gr0030         RMB       2                   current screen table ptr
0032                  (/dd/defs/cocovtio):00476         gr0032         RMB       1                   Last block # we used for buffers
0033                  (/dd/defs/cocovtio):00477         gr0033         RMB       2                   Last offset we used for buffers
0035                  (/dd/defs/cocovtio):00478         gr0035         RMB       1                   group
0036                  (/dd/defs/cocovtio):00479         gr0036         RMB       2                   offset
0038                  (/dd/defs/cocovtio):00480         gr0038         RMB       1                   group returned (new)
0039                  (/dd/defs/cocovtio):00481         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (/dd/defs/cocovtio):00482         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (/dd/defs/cocovtio):00483         gr003B         RMB       2                   end of vars ptr?
003D                  (/dd/defs/cocovtio):00484         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (/dd/defs/cocovtio):00485         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (/dd/defs/cocovtio):00486         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (/dd/defs/cocovtio):00487         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (/dd/defs/cocovtio):00488         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (/dd/defs/cocovtio):00489         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (/dd/defs/cocovtio):00490         gr0047         RMB       2                   'Working' X coordinate
0049                  (/dd/defs/cocovtio):00491         gr0049         RMB       2                   'Working' Y coordinate
004B                  (/dd/defs/cocovtio):00492         gr004B         RMB       2                   current X
004D                  (/dd/defs/cocovtio):00493         gr004D         RMB       2                   current Y
004F                  (/dd/defs/cocovtio):00494         gr004F         RMB       2                   X Size (in bytes)
0051                  (/dd/defs/cocovtio):00495         gr0051         RMB       2                   Y Size (in bytes)
0053                  (/dd/defs/cocovtio):00496         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (/dd/defs/cocovtio):00497         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (/dd/defs/cocovtio):00498         gr0057         RMB       1                   group
0058                  (/dd/defs/cocovtio):00499         gr0058         RMB       1                   buffer #
0059                  (/dd/defs/cocovtio):00500         gr0059         RMB       1                   save switch for overlay
005A                  (/dd/defs/cocovtio):00501         gr005A         RMB       1                   PRN
005B                  (/dd/defs/cocovtio):00502         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (/dd/defs/cocovtio):00503         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (/dd/defs/cocovtio):00504         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (/dd/defs/cocovtio):00505         Gr.STYMk       RMB       1                   STY marker
0061                  (/dd/defs/cocovtio):00506         gr0061         RMB       1                   foreground RGB data
0062                  (/dd/defs/cocovtio):00507         gr0062         RMB       1                   background RGB data
0063                  (/dd/defs/cocovtio):00508         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (/dd/defs/cocovtio):00509         gr0064         RMB       2                   PSet vector
0066                  (/dd/defs/cocovtio):00510         gr0066         RMB       2                   pset offset
0068                  (/dd/defs/cocovtio):00511         gr0068         RMB       2                   LSet vector
006A                  (/dd/defs/cocovtio):00512         gr006A         RMB       2                   max X co-ordinate
006C                  (/dd/defs/cocovtio):00513         gr006C         RMB       2                   max Y co-ordinate
006E                  (/dd/defs/cocovtio):00514         gr006E         RMB       2                   X pixel count
0070                  (/dd/defs/cocovtio):00515         gr0070         RMB       2                   Y pixel count
0072                  (/dd/defs/cocovtio):00516         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (/dd/defs/cocovtio):00517         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (/dd/defs/cocovtio):00518         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (/dd/defs/cocovtio):00519         gr0077         RMB       2                   Vector for right direction FFill
0079                  (/dd/defs/cocovtio):00520         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (/dd/defs/cocovtio):00521         gr007A         RMB       2                   Vector for left direction FFill
007C                  (/dd/defs/cocovtio):00522         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (/dd/defs/cocovtio):00523         gr007D         RMB       1                   buffer block #
007E                  (/dd/defs/cocovtio):00524         gr007E         RMB       2                   buffer offset #
0080                  (/dd/defs/cocovtio):00525         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (/dd/defs/cocovtio):00526         gr0082         RMB       3                   3 byte extended screen address
0085                  (/dd/defs/cocovtio):00527         gr0085         RMB       2                   temp
0087                  (/dd/defs/cocovtio):00528         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (/dd/defs/cocovtio):00529         gr0097         RMB       1                   temp
0098                  (/dd/defs/cocovtio):00530         gr0098         RMB       1                   temp
                      (/dd/defs/cocovtio):00531         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (/dd/defs/cocovtio):00532         gr0099         RMB       2                   temp
                      (/dd/defs/cocovtio):00533         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (/dd/defs/cocovtio):00534         gr009B         RMB       1                   counter temp
009C                  (/dd/defs/cocovtio):00535         gr009C         RMB       1
009D                  (/dd/defs/cocovtio):00536         gr009D         RMB       2                   offset to buffer in block
009F                  (/dd/defs/cocovtio):00537         gr009F         RMB       1
00A0                  (/dd/defs/cocovtio):00538         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (/dd/defs/cocovtio):00539         gr00A1         RMB       2                   vector routine for (changes lots)
                      (/dd/defs/cocovtio):00540         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (/dd/defs/cocovtio):00541         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (/dd/defs/cocovtio):00542         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (/dd/defs/cocovtio):00543         gr00A7         RMB       2
00A9                  (/dd/defs/cocovtio):00544         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (/dd/defs/cocovtio):00545         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (/dd/defs/cocovtio):00546         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (/dd/defs/cocovtio):00547         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (/dd/defs/cocovtio):00548         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (/dd/defs/cocovtio):00549         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (/dd/defs/cocovtio):00550         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (/dd/defs/cocovtio):00551         gr00B3         RMB       1                   temp veriable grfdrv
00B4                  (/dd/defs/cocovtio):00552         gr00B4         RMB       1                   temp veriable grfdrv
00B5                  (/dd/defs/cocovtio):00553         gr00B5         RMB       1                   regW for grfdrv
00B6                  (/dd/defs/cocovtio):00554         gr00B6         RMB       1
00B7                  (/dd/defs/cocovtio):00555         gr00B7         RMB       2
00B9                  (/dd/defs/cocovtio):00556         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (/dd/defs/cocovtio):00557         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (/dd/defs/cocovtio):00558         gr00BD         RMB       2                   previously used in grfdrv at $B6
                      (/dd/defs/cocovtio):00559         * EOU Beta 2 & up
00BF                  (/dd/defs/cocovtio):00560         grScrtch       RMB       2                   Scratch var for Grfdrv - use DP instead of stack for
                      (/dd/defs/cocovtio):00561         *                                            anything that does immediate calculations
00C1                  (/dd/defs/cocovtio):00562         gr00BF         RMB       256-.               Reserved for future use
                      (/dd/defs/cocovtio):00563         
                      (/dd/defs/cocovtio):00564         * GPLoad buffer - $1200 in system block    . Currently ends at $1247, and $1248-$127f is unused
     1200             (/dd/defs/cocovtio):00565         GPBuf          EQU       $1200               Usefull address (start of GP buffer copy memory)
0100                  (/dd/defs/cocovtio):00566         GPBufSz        RMB       gb0000              common move buffer for gpload/get/put (72 bytes default)
                      (/dd/defs/cocovtio):00567         
                      (/dd/defs/cocovtio):00568         *****************************************************************************
                      (/dd/defs/cocovtio):00569         * Window table entry structure
                      (/dd/defs/cocovtio):00570         * These tables sit in system block 0 and there is 1 for every window init'd
                      (/dd/defs/cocovtio):00571         * including any overlay windows.
     0020             (/dd/defs/cocovtio):00572         MaxWind        EQU       32                  maximum allowable window tables
     1290             (/dd/defs/cocovtio):00573         WinBase        EQU       $1290               base address to start of window tables
                      (/dd/defs/cocovtio):00574                        ORG       -$10
FFF0                  (/dd/defs/cocovtio):00575         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (/dd/defs/cocovtio):00576         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (/dd/defs/cocovtio):00577         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (/dd/defs/cocovtio):00578         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (/dd/defs/cocovtio):00579         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (/dd/defs/cocovtio):00580         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (/dd/defs/cocovtio):00581         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (/dd/defs/cocovtio):00582         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (/dd/defs/cocovtio):00583         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (/dd/defs/cocovtio):00584         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (/dd/defs/cocovtio):00585         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (/dd/defs/cocovtio):00586         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (/dd/defs/cocovtio):00587         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (/dd/defs/cocovtio):00588         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (/dd/defs/cocovtio):00589         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (/dd/defs/cocovtio):00590         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (/dd/defs/cocovtio):00591         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (/dd/defs/cocovtio):00592         Wt.Back        RMB       1                   background palette #                         $07
0008                  (/dd/defs/cocovtio):00593         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (/dd/defs/cocovtio):00594         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (/dd/defs/cocovtio):00595         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (/dd/defs/cocovtio):00596         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (/dd/defs/cocovtio):00597         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (/dd/defs/cocovtio):00598         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (/dd/defs/cocovtio):00599         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (/dd/defs/cocovtio):00600         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (/dd/defs/cocovtio):00601         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (/dd/defs/cocovtio):00602         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (/dd/defs/cocovtio):00603         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (/dd/defs/cocovtio):00604         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (/dd/defs/cocovtio):00605         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (/dd/defs/cocovtio):00606         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (/dd/defs/cocovtio):00607         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24/25,0-191/199)          $1D
001F                  (/dd/defs/cocovtio):00608         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (/dd/defs/cocovtio):00609         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (/dd/defs/cocovtio):00610         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (/dd/defs/cocovtio):00611         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (/dd/defs/cocovtio):00612         * NOTE: The following default settings are what the window was initialized
                      (/dd/defs/cocovtio):00613         *       with, and thus are the MAXIMUM start/size the window can handle
                      (/dd/defs/cocovtio):00614         *       until it is restarted (DWEnd & DWSet)
                      (/dd/defs/cocovtio):00615         *       They also appear to be used in WindInt to determine the coords &
                      (/dd/defs/cocovtio):00616         *       sizes for control+content regions
0026                  (/dd/defs/cocovtio):00617         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (/dd/defs/cocovtio):00618         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (/dd/defs/cocovtio):00619         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (/dd/defs/cocovtio):00620         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (/dd/defs/cocovtio):00621         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (/dd/defs/cocovtio):00622         Wt.Siz         EQU       .+$10
                      (/dd/defs/cocovtio):00623         
                      (/dd/defs/cocovtio):00624         *****************************************************************************
                      (/dd/defs/cocovtio):00625         * Screen table entrys
                      (/dd/defs/cocovtio):00626         * These tables sit in system block 0 base=$1A80
                      (/dd/defs/cocovtio):00627         
     0010             (/dd/defs/cocovtio):00628         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (/dd/defs/cocovtio):00629         STblBse        EQU       $1A80               base address of screen tables
                      (/dd/defs/cocovtio):00630                        ORG       0
0000                  (/dd/defs/cocovtio):00631         St.Sty         RMB       1                   Screen type                         $00
0001                  (/dd/defs/cocovtio):00632         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (/dd/defs/cocovtio):00633         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (/dd/defs/cocovtio):00634         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (/dd/defs/cocovtio):00635         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (/dd/defs/cocovtio):00636         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (/dd/defs/cocovtio):00637         St.Back        RMB       1                   Background palette register #       $07
0008                  (/dd/defs/cocovtio):00638         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (/dd/defs/cocovtio):00639         St.Res         RMB       7                   UNUSED???                           $09
                      (/dd/defs/cocovtio):00640         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (/dd/defs/cocovtio):00641         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (/dd/defs/cocovtio):00642         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (/dd/defs/cocovtio):00643         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
                      (/dd/defs/cocovtio):00644         * Other possibilities: Offset into screen to display (if we enable screens taller than
                      (/dd/defs/cocovtio):00645         *   a single screen), etc.
0010                  (/dd/defs/cocovtio):00646         St.Pals        RMB       16                  Palette register contents           $10
     0020             (/dd/defs/cocovtio):00647         St.Siz         EQU       .
                      (/dd/defs/cocovtio):00648         
                      (/dd/defs/cocovtio):00649         *****************************************************************************
                      (/dd/defs/cocovtio):00650         * Graphics buffer tables
                      (/dd/defs/cocovtio):00651         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (/dd/defs/cocovtio):00652         * data.
                      (/dd/defs/cocovtio):00653                        ORG       0
0000                  (/dd/defs/cocovtio):00654         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (/dd/defs/cocovtio):00655         Grf.Off        RMB       2                   back block header offset            $01
0003                  (/dd/defs/cocovtio):00656         Grf.Grp        RMB       1                   group #                             $03
0004                  (/dd/defs/cocovtio):00657         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (/dd/defs/cocovtio):00658         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (/dd/defs/cocovtio):00659         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (/dd/defs/cocovtio):00660         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (/dd/defs/cocovtio):00661         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (/dd/defs/cocovtio):00662         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (/dd/defs/cocovtio):00663         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (/dd/defs/cocovtio):00664         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (/dd/defs/cocovtio):00665         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (/dd/defs/cocovtio):00666         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (/dd/defs/cocovtio):00667         Grf.Siz        EQU       .                   $20
                      (/dd/defs/cocovtio):00668         
                      (/dd/defs/cocovtio):00669         *****************************************************************************
                      (/dd/defs/cocovtio):00670         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (/dd/defs/cocovtio):00671         * $1075-$0176
                      (/dd/defs/cocovtio):00672         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (/dd/defs/cocovtio):00673                        ORG       0
0000                  (/dd/defs/cocovtio):00674         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (/dd/defs/cocovtio):00675         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (/dd/defs/cocovtio):00676         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (/dd/defs/cocovtio):00677         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (/dd/defs/cocovtio):00678         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (/dd/defs/cocovtio):00679         Gt.BClr        RMB       1                   Background color                               $08
0009                  (/dd/defs/cocovtio):00680         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (/dd/defs/cocovtio):00681         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (/dd/defs/cocovtio):00682         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (/dd/defs/cocovtio):00683         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (/dd/defs/cocovtio):00684         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (/dd/defs/cocovtio):00685         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (/dd/defs/cocovtio):00686         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (/dd/defs/cocovtio):00687         GTabSz         EQU       .
                      (/dd/defs/cocovtio):00688         
                      (/dd/defs/cocovtio):00689         *****************************************************************************
                      (/dd/defs/cocovtio):00690         * This table is located in the graphics table memory and is offset from
                      (/dd/defs/cocovtio):00691         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (/dd/defs/cocovtio):00692         * WindInt.
                      (/dd/defs/cocovtio):00693         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (/dd/defs/cocovtio):00694         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (/dd/defs/cocovtio):00695         *  COMBINATION EVERY TIME
                      (/dd/defs/cocovtio):00696                        ORG       $0240
0240                  (/dd/defs/cocovtio):00697                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (/dd/defs/cocovtio):00698                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (/dd/defs/cocovtio):00699                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (/dd/defs/cocovtio):00700                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (/dd/defs/cocovtio):00701         
                      (/dd/defs/cocovtio):00702         *****************************************************************************
                      (/dd/defs/cocovtio):00703         * WindInt menu handling table entry definition
                      (/dd/defs/cocovtio):00704                        ORG       0
0000                  (/dd/defs/cocovtio):00705         MnuXNum        RMB       1                   menu #
0001                  (/dd/defs/cocovtio):00706         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (/dd/defs/cocovtio):00707         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (/dd/defs/cocovtio):00708                        RMB       1                   unused?
     0004             (/dd/defs/cocovtio):00709         MnuHSiz        EQU       .
                      (/dd/defs/cocovtio):00710         
                      (/dd/defs/cocovtio):00711         *****************************************************************************
                      (/dd/defs/cocovtio):00712         * Character binary switches
     0080             (/dd/defs/cocovtio):00713         Blink          EQU       %10000000           Blink characters (hardware text only)
     0080             (/dd/defs/cocovtio):00714         TChr           EQU       %10000000           transparent characters (both currently)
     0040             (/dd/defs/cocovtio):00715         Under          EQU       %01000000           underline characters (both)
     0020             (/dd/defs/cocovtio):00716         Bold           EQU       %00100000           bold characters (gfx only, maybe txt with color changes?)
     0010             (/dd/defs/cocovtio):00717         Prop           EQU       %00010000           proportional spacing of characters (gfx only)
     0008             (/dd/defs/cocovtio):00718         Scale          EQU       %00001000           automatic window scaling (gfx only)
     0004             (/dd/defs/cocovtio):00719         Invers         EQU       %00000100           inverse characters (both)
     0002             (/dd/defs/cocovtio):00720         NoCurs         EQU       %00000010           no cursor display (both)
     0001             (/dd/defs/cocovtio):00721         Protect        EQU       %00000001           device window protection (both)
                      (/dd/defs/cocovtio):00722         
                      (/dd/defs/cocovtio):00723         *****************************************************************************
                      (/dd/defs/cocovtio):00724         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (/dd/defs/cocovtio):00725         Current        EQU       $ff                 Current screen
                      (/dd/defs/cocovtio):00726         *         equ   1          640x200x2
                      (/dd/defs/cocovtio):00727         *         equ   2          320x200x4
                      (/dd/defs/cocovtio):00728         *         equ   3          640x200x4
                      (/dd/defs/cocovtio):00729         *         equ   4          320x200x16
                      (/dd/defs/cocovtio):00730         *         equ   $85        80 column text
                      (/dd/defs/cocovtio):00731         *         equ   $86        40 column text
                      (/dd/defs/cocovtio):00732         
                      (/dd/defs/cocovtio):00733         *************************************
                      (/dd/defs/cocovtio):00734         * Window default palette color codes
                      (/dd/defs/cocovtio):00735         *
                      (/dd/defs/cocovtio):00736                        ORG       0
0000                  (/dd/defs/cocovtio):00737         White.         RMB       1
0001                  (/dd/defs/cocovtio):00738         Blue.          RMB       1
0002                  (/dd/defs/cocovtio):00739         Black.         RMB       1
0003                  (/dd/defs/cocovtio):00740         Green.         RMB       1
0004                  (/dd/defs/cocovtio):00741         Red.           RMB       1
0005                  (/dd/defs/cocovtio):00742         Yellow.        RMB       1
0006                  (/dd/defs/cocovtio):00743         Magenta.       RMB       1
0007                  (/dd/defs/cocovtio):00744         Cyan.          RMB       1
                      (/dd/defs/cocovtio):00745         
                      ( /dd/defs/deffile):00011                  use   /dd/defs/cocosdc.d
                      (/dd/defs/cocosdc.):00001         ********************************************************************
                      (/dd/defs/cocosdc.):00002         * cocosdc.d - CoCo SDC definitions
                      (/dd/defs/cocosdc.):00003         *
                      (/dd/defs/cocosdc.):00004         * $Id$
                      (/dd/defs/cocosdc.):00005         *
                      (/dd/defs/cocosdc.):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/defs/cocosdc.):00007         * Comment
                      (/dd/defs/cocosdc.):00008         * ------------------------------------------------------------------
                      (/dd/defs/cocosdc.):00009         *          2014/05/02  Boisy G. Pitre
                      (/dd/defs/cocosdc.):00010         * Created
                      (/dd/defs/cocosdc.):00011         
                      (/dd/defs/cocosdc.):00012         
     FF4A             (/dd/defs/cocosdc.):00013         SDAddr         SET       $FF4A
                      (/dd/defs/cocosdc.):00014         
                      ( /dd/defs/deffile):00012                  use   /dd/defs/vdgdefs
                      ( /dd/defs/vdgdefs):00001                        IFNE      VDGDEFS-1
                      ( /dd/defs/vdgdefs):00002         
     0001             ( /dd/defs/vdgdefs):00003         VDGDEFS        SET       1
                      ( /dd/defs/vdgdefs):00004         
                      ( /dd/defs/vdgdefs):00005         ********************************************************************
                      ( /dd/defs/vdgdefs):00006         * VDGDefs - VDG Interface Definititions
                      ( /dd/defs/vdgdefs):00007         *
                      ( /dd/defs/vdgdefs):00008         * $Id$
                      ( /dd/defs/vdgdefs):00009         *
                      ( /dd/defs/vdgdefs):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      ( /dd/defs/vdgdefs):00011         * Comment
                      ( /dd/defs/vdgdefs):00012         * ------------------------------------------------------------------
                      ( /dd/defs/vdgdefs):00013         *          1991/05/07  Alan DeKok
                      ( /dd/defs/vdgdefs):00014         * Wrote original from VDGInt source.
                      ( /dd/defs/vdgdefs):00015         
                      ( /dd/defs/vdgdefs):00016                        NAM       VDGDefs
                      ( /dd/defs/vdgdefs):00017                        TTL       VDG Interface Definitions
                      ( /dd/defs/vdgdefs):00018         
                      ( /dd/defs/vdgdefs):00019         * Notes:
                      ( /dd/defs/vdgdefs):00020         *
                      ( /dd/defs/vdgdefs):00021         * All offsets from 'U' (address of device memory area)
                      ( /dd/defs/vdgdefs):00022         * (see p. 6-9, technical reference: U=start of driver data memory
                      ( /dd/defs/vdgdefs):00023         * NOTE: There is LOTS of stuff which is only used once, and some which
                      ( /dd/defs/vdgdefs):00024         * is not needed.  Here's a list of the un-needed, and un-used (other than
                      ( /dd/defs/vdgdefs):00025         * once)
                      ( /dd/defs/vdgdefs):00026         *
                      ( /dd/defs/vdgdefs):00027         * It would probably be benificial to patch VDGint to fix these problems,
                      ( /dd/defs/vdgdefs):00028         * unless anyone else has ideas as to why VDGint is doing things this way.
                      ( /dd/defs/vdgdefs):00029         *
                      ( /dd/defs/vdgdefs):00030         * Un-needed
                      ( /dd/defs/vdgdefs):00031         * VD.EPlt1  - (2) set to VD.NChar, and then read only
                      ( /dd/defs/vdgdefs):00032         * VD.EPlt2  - (2) set to same as VD.EPlt1, and then unused
                      ( /dd/defs/vdgdefs):00033         * VD.Chr1   - (1) set to same as VD.CChar, and then unused
                      ( /dd/defs/vdgdefs):00034         * VD.PlFlg  - (1) initialized to $08, and unused
                      ( /dd/defs/vdgdefs):00035         *
                      ( /dd/defs/vdgdefs):00036         * Un-used
                      ( /dd/defs/vdgdefs):00037         *
                      ( /dd/defs/vdgdefs):00038         * $1D       - (1) end of SCF memory requirements
                      ( /dd/defs/vdgdefs):00039         * VD.Strt1  - (2) CLRed, and then read (LDD) - left as $0000
                      ( /dd/defs/vdgdefs):00040         * $24-$2B   - (8)
                      ( /dd/defs/vdgdefs):00041         * $33-$34   - (2)
                      ( /dd/defs/vdgdefs):00042         * $7E-$FF   - (130)
                      ( /dd/defs/vdgdefs):00043         *
                      ( /dd/defs/vdgdefs):00044         * Total of 22 (150 in whole page) bytes unneeded or unused.
                      ( /dd/defs/vdgdefs):00045         
                      ( /dd/defs/vdgdefs):00046                        ORG       $1E
001E                  ( /dd/defs/vdgdefs):00047         VD.Start       RMB       1                   start of VD.XXXX data: number of VDG screens in use
001F                  ( /dd/defs/vdgdefs):00048         VD.Strt1       RMB       2                   (2) and another start
0021                  ( /dd/defs/vdgdefs):00049         VD.Caps        RMB       2                   caps lock info: $00=lower $FF=upper
0023                  ( /dd/defs/vdgdefs):00050         VD.DFlag       RMB       1                   0=current screen is valid, $01-$FF = update video
                      ( /dd/defs/vdgdefs):00051         * $24-$2B unused
0024                  ( /dd/defs/vdgdefs):00052                        RMB       8
002C                  ( /dd/defs/vdgdefs):00053         VD.NGChr       RMB       1                   number of additional characters to get
002D                  ( /dd/defs/vdgdefs):00054         VD.RTAdd       RMB       2                   (2) return address after getting characters
002F                  ( /dd/defs/vdgdefs):00055         VD.EPlt1       RMB       2                   (2) pointer to where to put next character
0031                  ( /dd/defs/vdgdefs):00056         VD.EPlt2       RMB       2                   (2) as above.
                      ( /dd/defs/vdgdefs):00057         * $33-$34 unused
0033                  ( /dd/defs/vdgdefs):00058                        RMB       2
0035                  ( /dd/defs/vdgdefs):00059         VD.CFlag       RMB       1                   true lowercase flag $10=true, $00=false
0036                  ( /dd/defs/vdgdefs):00060         VD.CFlg1       RMB       1                   VDG display code values
0037                  ( /dd/defs/vdgdefs):00061         VD.DGBuf       RMB       1                   number of currently displayed buffer
0038                  ( /dd/defs/vdgdefs):00062         VD.ScrnA       RMB       2                   (2) screen start address in system memory
003A                  ( /dd/defs/vdgdefs):00063         VD.ScrnE       RMB       2                   (2) address of end of screen
003C                  ( /dd/defs/vdgdefs):00064         VD.CrsrA       RMB       1                   (2) cursor address
003D                  ( /dd/defs/vdgdefs):00065         VD.CrsAL       RMB       1                   cursor address low
003E                  ( /dd/defs/vdgdefs):00066         VD.CChar       RMB       1                   value of character under cursor
003F                  ( /dd/defs/vdgdefs):00067         VD.Mode        RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0040                  ( /dd/defs/vdgdefs):00068         VD.Chr1        RMB       1                   same as under cursor character
0041                  ( /dd/defs/vdgdefs):00069         VD.CColr       RMB       1                   cursor color
0042                  ( /dd/defs/vdgdefs):00070         VD.Col         RMB       1                   number of columns for this screen
0043                  ( /dd/defs/vdgdefs):00071         VD.Row         RMB       1                   number of rows
0044                  ( /dd/defs/vdgdefs):00072         VD.TFlg1       RMB       1                   see WRITE ($0E)
0045                  ( /dd/defs/vdgdefs):00073         VD.Alpha       RMB       1                   0 when in alpha mode
0046                  ( /dd/defs/vdgdefs):00074         VD.Rdy         RMB       1                   device ready (see SS.DStat 0=not ready)
0047                  ( /dd/defs/vdgdefs):00075         VD.SBAdd       RMB       2                   (2) address of block screen is in
0049                  ( /dd/defs/vdgdefs):00076         VD.Blk         RMB       1                   Block number of screen
004A                  ( /dd/defs/vdgdefs):00077         VD.GBuff       RMB       1                   allocation for graphics buffers (block#)
004B                  ( /dd/defs/vdgdefs):00078         VD.AGBuf       RMB       2                   (2) additional graphics buffer
004D                  ( /dd/defs/vdgdefs):00079         VD.HiRes       RMB       1                   hi-res screen table (block value)
004E                  ( /dd/defs/vdgdefs):00080         VD.NBlk        RMB       1                   number of blocks in this screen
004F                  ( /dd/defs/vdgdefs):00081         VD.SType       RMB       1                   screen type -4
0050                  ( /dd/defs/vdgdefs):00082         VD.HR2         RMB       3                   (3) for screen number 2
0053                  ( /dd/defs/vdgdefs):00083         VD.HR3         RMB       3                   (3) for screen 3 (same 3 bytes as above)
0056                  ( /dd/defs/vdgdefs):00084         VD.FFMem       RMB       2                   (2) bottom of stack for flood fill
0058                  ( /dd/defs/vdgdefs):00085         VD.FFSPt       RMB       2                   (2) flood fill stack pointer
005A                  ( /dd/defs/vdgdefs):00086         VD.FFSTp       RMB       2                   (2) flood fill stack top pointer
005C                  ( /dd/defs/vdgdefs):00087         VD.FF6         RMB       1                   flood fill flag
005D                  ( /dd/defs/vdgdefs):00088         VD.MTabl       RMB       2                   (2) address of mask table for pixels in byte
005F                  ( /dd/defs/vdgdefs):00089         VD.PixBt       RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0060                  ( /dd/defs/vdgdefs):00090         VD.GCrsX       RMB       1                   graphics cursor X value
0061                  ( /dd/defs/vdgdefs):00091         VD.GCrsY       RMB       1                   graphics cursor Y
0062                  ( /dd/defs/vdgdefs):00092         VD.Msk1        RMB       1                   mask byte 1
0063                  ( /dd/defs/vdgdefs):00093         VD.Msk2        RMB       1                   mask byte 2 (00,55,AA,FF)
0064                  ( /dd/defs/vdgdefs):00094         VD.MCol        RMB       1                   color? (C003,8001)
0065                  ( /dd/defs/vdgdefs):00095         VD.MCol2       RMB       1                   color
0066                  ( /dd/defs/vdgdefs):00096         VD.PMask       RMB       1                   pixel mask for colors (i.e. $55, $CC etc)
0067                  ( /dd/defs/vdgdefs):00097         VD.FF1         RMB       1                   data for flood fill
0068                  ( /dd/defs/vdgdefs):00098         VD.FF2         RMB       1                   data for flood fill
0069                  ( /dd/defs/vdgdefs):00099         VD.FFMsk       RMB       1                   flood fill mask
006A                  ( /dd/defs/vdgdefs):00100         VD.FFFlg       RMB       1                   flood fill flag
006B                  ( /dd/defs/vdgdefs):00101         VD.Palet       RMB       16                  (16) current palette values
007B                  ( /dd/defs/vdgdefs):00102         VD.PlFlg       RMB       1                   initialized to $08 by L00DB, and then unused!
007C                  ( /dd/defs/vdgdefs):00103         VD.NChar       RMB       1                   character to process
007D                  ( /dd/defs/vdgdefs):00104         VD.NChr2       RMB       1                   and the next one
                      ( /dd/defs/vdgdefs):00105         
                      ( /dd/defs/vdgdefs):00106         * and RMB until we get 256 bytes reserved
                      ( /dd/defs/vdgdefs):00107         
                      ( /dd/defs/vdgdefs):00108                        ENDC      
                      ( /dd/defs/vdgdefs):00109         
                      (  krnp2_beta5.asm):00085                ENDC
                      (  krnp2_beta5.asm):00086         
     0000             (  krnp2_beta5.asm):00087         TC9      set    false       "true" use TC-9 6309 trap vector
     0014             (  krnp2_beta5.asm):00088         Edition  equ    20
     0000             (  krnp2_beta5.asm):00089         Revision equ    0
                      (  krnp2_beta5.asm):00090         
0000 87CD0CD8000DC080 (  krnp2_beta5.asm):00091                  mod    eom,MName,Systm,ReEnt+Revision,krnp2,$0100
     2C00130100
                      (  krnp2_beta5.asm):00092         
000D 4B726E50B2       (  krnp2_beta5.asm):00093         MName    fcs    /KrnP2/
0012 14               (  krnp2_beta5.asm):00094                  fcb    Edition
                      (  krnp2_beta5.asm):00095         
                      (  krnp2_beta5.asm):00096                IFEQ   TC9-1
                      (  krnp2_beta5.asm):00097         * Entry: None
                      (  krnp2_beta5.asm):00098         * Exit : Process killed & register dump produced for ser
0013                  (  krnp2_beta5.asm):00099         Trap     bitmd  #%01000000  illegal instruction?
                      (  krnp2_beta5.asm):00100                  bne    BadIns      yes, go process
                      (  krnp2_beta5.asm):00101                  bitmd  #%10000000  division by 0?
                      (  krnp2_beta5.asm):00102                  bne    Div0        yes, go process
                      (  krnp2_beta5.asm):00103                  jmp    [<D.XSWI]   act as if nothing happened
                      (  krnp2_beta5.asm):00104         
                      (  krnp2_beta5.asm):00105         * Process illegal instruction trap
0013                  (  krnp2_beta5.asm):00106         BadIns   bsr    SetProc     move the register stack here
                      (  krnp2_beta5.asm):00107                  ldb    #18         get error code for F$Exit
                      (  krnp2_beta5.asm):00108                  bra    TrapDone
                      (  krnp2_beta5.asm):00109         
                      (  krnp2_beta5.asm):00110         * Process division by 0 trap
0013                  (  krnp2_beta5.asm):00111         Div0     bsr    SetProc     move the register stack
                      (  krnp2_beta5.asm):00112                  ldb    #45         get error code for F$Exit
                      (  krnp2_beta5.asm):00113         * Return to system after the trap
                      (  krnp2_beta5.asm):00114         * Entry: B=Error code
                      (  krnp2_beta5.asm):00115         *        U=Pointer to register stack
0013                  (  krnp2_beta5.asm):00116         TrapDone stb    R$B,u       save the error code to register stack for F$Exit
                      (  krnp2_beta5.asm):00117                  lbra   FExit       enter F$Exit directly
                      (  krnp2_beta5.asm):00118         
                      (  krnp2_beta5.asm):00119         * Set process to system state & copy register stack for trap processing
0013                  (  krnp2_beta5.asm):00120         SetProc  ldd    <D.SysSvc   set system call processor to system side
                      (  krnp2_beta5.asm):00121                  std    <D.XSWI2
                      (  krnp2_beta5.asm):00122                  ldd    <D.SysIRQ   do the same thing for IRQ's
                      (  krnp2_beta5.asm):00123                  std    <D.XIRQ
                      (  krnp2_beta5.asm):00124                  ldx    <D.Proc     get current process pointer
                      (  krnp2_beta5.asm):00125                IFNE   H6309
                      (  krnp2_beta5.asm):00126                  oim    #SysState,P$State,x   mark process as system state
                      (  krnp2_beta5.asm):00127                ELSE
                      (  krnp2_beta5.asm):00128                  ldb    P$State,x
                      (  krnp2_beta5.asm):00129                  orb    #SysState
                      (  krnp2_beta5.asm):00130                  stb    P$State,x
                      (  krnp2_beta5.asm):00131                ENDC
                      (  krnp2_beta5.asm):00132         * copy register stack to process descriptor
                      (  krnp2_beta5.asm):00133                  sts    P$SP,x      save stack pointer
                      (  krnp2_beta5.asm):00134                  leas   (P$Stack-R$Size),x point S to register stack destination
                      (  krnp2_beta5.asm):00135                  andcc  #^IntMasks  force interrupts back on
                      (  krnp2_beta5.asm):00136                  leau   ,s          point to destination register stack
                      (  krnp2_beta5.asm):00137                  ldb    P$Task,x    get task # of destination
                      (  krnp2_beta5.asm):00138                  ldx    P$SP,x      get the user/system stack pointer
                      (  krnp2_beta5.asm):00139                  pshs   b           preserve task for a moment
                      (  krnp2_beta5.asm):00140                  tfr    x,d         copy it for easier calcs
                      (  krnp2_beta5.asm):00141                  bita   #%11100000  offset above block 0?
                      (  krnp2_beta5.asm):00142                  beq    done        yes, no calc needed get out
                      (  krnp2_beta5.asm):00143                  anda   #%00011111  make it a offset within a block
                      (  krnp2_beta5.asm):00144                  tfr    d,x         copy new offset
                      (  krnp2_beta5.asm):00145                  lsra               make A an offset into DAT image
                      (  krnp2_beta5.asm):00146                  lsra
                      (  krnp2_beta5.asm):00147                  lsra
                      (  krnp2_beta5.asm):00148                  lsra
0013                  (  krnp2_beta5.asm):00149         done     puls   b           restore task #
                      (  krnp2_beta5.asm):00150                  leax   -$6000,x    make it a pointer to where I'll map the block
                      (  krnp2_beta5.asm):00151                  tfr    u,y
                      (  krnp2_beta5.asm):00152                  pshs   cc,u        preserve IRQ status & dest pointer
                      (  krnp2_beta5.asm):00153                  ldu    <D.TskIPt
                      (  krnp2_beta5.asm):00154                  lslb               adjust task # to fit table
                      (  krnp2_beta5.asm):00155                  ldu    b,u         get the DAT image pointer
                      (  krnp2_beta5.asm):00156                  leau   a,u         point to the blocks needed
                      (  krnp2_beta5.asm):00157                  lda    1,u         get 1st block
                      (  krnp2_beta5.asm):00158                  ldb    3,u         get a second in case of overlap
                      (  krnp2_beta5.asm):00159                  orcc   #IntMasks   shut IRQ's down
                      (  krnp2_beta5.asm):00160                  std    >$FFA5      map in the blocks
                      (  krnp2_beta5.asm):00161                IFNE   H6309
                      (  krnp2_beta5.asm):00162                  ldw    #R$Size     get size of register stack
                      (  krnp2_beta5.asm):00163                  tfm    x+,y+       move 'em to process descriptor
                      (  krnp2_beta5.asm):00164                ELSE
                      (  krnp2_beta5.asm):00165                  ldb    #R$Size
0013                  (  krnp2_beta5.asm):00166         Uday     lda    ,x+
                      (  krnp2_beta5.asm):00167                  sta    ,y+
                      (  krnp2_beta5.asm):00168                  decb
                      (  krnp2_beta5.asm):00169                  bne    Uday
                      (  krnp2_beta5.asm):00170                ENDC
                      (  krnp2_beta5.asm):00171                  ldx    <D.SysDAT   get the system DAT image pointer
                      (  krnp2_beta5.asm):00172                  lda    $0B,x       get the original blocks
                      (  krnp2_beta5.asm):00173                  ldb    $0D,x
                      (  krnp2_beta5.asm):00174                  std    >$FFA5      map 'em back in
                      (  krnp2_beta5.asm):00175                  puls   cc,u,pc     restore IRQ's, register stack pointer & return
                      (  krnp2_beta5.asm):00176              ENDC
                      (  krnp2_beta5.asm):00177         
0013 8632             (  krnp2_beta5.asm):00178         krnp2    lda    #'2         into krnp2
0015 9D5E             (  krnp2_beta5.asm):00179                  jsr    <D.BtBug
                      (  krnp2_beta5.asm):00180                IFNE H6309
                      (  krnp2_beta5.asm):00181                  leay   <SvcTab,pc  install system calls
                      (  krnp2_beta5.asm):00182                ELSE
0017 318C6F           (  krnp2_beta5.asm):00183                  leay   SvcTab,pc   install system calls
                      (  krnp2_beta5.asm):00184                ENDC
001A 103F32           (  krnp2_beta5.asm):00185                  os9    F$SSvc
                      (  krnp2_beta5.asm):00186              IFEQ  TC9-1
                      (  krnp2_beta5.asm):00187                  leax   Trap,pc
                      (  krnp2_beta5.asm):00188                  stx    <D.SWI
                      (  krnp2_beta5.asm):00189              ENDC
                      (  krnp2_beta5.asm):00190         * Change to default directory
001D DE24             (  krnp2_beta5.asm):00191         L003A    ldu    <D.Init     get init module pointer
001F ECC810           (  krnp2_beta5.asm):00192                  ldd    SysStr,u    get pointer to system device name (usually '/dd')
0022 2712             (  krnp2_beta5.asm):00193                  beq    L004F       don't exist, open std device
0024 30CB             (  krnp2_beta5.asm):00194                  leax   d,u         point to name
0026 8678             (  krnp2_beta5.asm):00195                  lda    #'x         tried chd'ing
0028 9D5E             (  krnp2_beta5.asm):00196                  jsr    <D.BtBug
002A 8605             (  krnp2_beta5.asm):00197                  lda    #(EXEC.+READ.) get file mode
002C 103F86           (  krnp2_beta5.asm):00198                  os9    I$ChgDir    change to it
002F 2405             (  krnp2_beta5.asm):00199                  bcc    L004F       went ok, go on
0031 103F35           (  krnp2_beta5.asm):00200                  os9    F$Boot      try & load boot file
0034 24E7             (  krnp2_beta5.asm):00201                  bcc    L003A       go try again
0036 DE24             (  krnp2_beta5.asm):00202         L004F    ldu    <D.Init     get pointer to init
0038 ECC812           (  krnp2_beta5.asm):00203                  ldd    <StdStr,u   point to default device (usually '/term')
003B 2720             (  krnp2_beta5.asm):00204                  beq    L0077       don't exist go do OS9P3
003D 30CB             (  krnp2_beta5.asm):00205                  leax   d,u         point to it
003F 866F             (  krnp2_beta5.asm):00206                  lda    #'o         tried opening output window
0041 9D5E             (  krnp2_beta5.asm):00207                  jsr   <D.BtBug
0043 8603             (  krnp2_beta5.asm):00208                  lda    #UPDAT.     get file mode
0045 103F84           (  krnp2_beta5.asm):00209                  os9    I$Open      open path to it
0048 2402             (  krnp2_beta5.asm):00210                  bcc    L0066       went ok, save path #
                      (  krnp2_beta5.asm):00211         * LCB - not sure why this is remarked out and replaced with NOP's?
                      (  krnp2_beta5.asm):00212         *         os9    F$Boot      try & re-boot
                      (  krnp2_beta5.asm):00213         * nop
                      (  krnp2_beta5.asm):00214         * nop
                      (  krnp2_beta5.asm):00215         * nop
                      (  krnp2_beta5.asm):00216         *         bcc    L004F       go try again
                      (  krnp2_beta5.asm):00217         * nop
                      (  krnp2_beta5.asm):00218         * nop
004A 203B             (  krnp2_beta5.asm):00219                  bra    L009B       crash machine
                      (  krnp2_beta5.asm):00220         
004C 9E50             (  krnp2_beta5.asm):00221         L0066    ldx    <D.Proc     get current process pointer
004E A78830           (  krnp2_beta5.asm):00222                  sta    <P$Path,x   save stdin path
0051 103F82           (  krnp2_beta5.asm):00223                  os9    I$Dup       dupe it
0054 A78831           (  krnp2_beta5.asm):00224                  sta    <P$Path+1,x save stdout path
0057 103F82           (  krnp2_beta5.asm):00225                  os9    I$Dup       dupe it again
005A A78832           (  krnp2_beta5.asm):00226                  sta    <P$Path+2,x save stderr path
005D 308C22           (  krnp2_beta5.asm):00227         L0077    leax   <L0096,pc   point to 'OS9P3'
0060 86C0             (  krnp2_beta5.asm):00228                  lda    #Systm      get type
0062 103F00           (  krnp2_beta5.asm):00229                  os9    F$Link      try & link
0065 2502             (  krnp2_beta5.asm):00230                  bcs    L0083       not there, go on
0067 ADA4             (  krnp2_beta5.asm):00231                  jsr    ,y          execute it
                      (  krnp2_beta5.asm):00232         * Execute module listed in Init module
0069 DE24             (  krnp2_beta5.asm):00233         L0083    ldu    <D.Init     get init module pointer
006B EC4E             (  krnp2_beta5.asm):00234                  ldd    InitStr,u   get offset to name of first module
006D 30CB             (  krnp2_beta5.asm):00235                  leax   d,u         point to it
006F 8643             (  krnp2_beta5.asm):00236                  lda    #'C         tried to to CC3Go
0071 9D5E             (  krnp2_beta5.asm):00237                  jsr   <D.BtBug
0073 8601             (  krnp2_beta5.asm):00238                  lda    #Objct      get module type
0075 5F               (  krnp2_beta5.asm):00239                  clrb               get mem size
                      (  krnp2_beta5.asm):00240                IFNE   H6309
                      (  krnp2_beta5.asm):00241                  tfr    0,y         Get parameter size
                      (  krnp2_beta5.asm):00242                ELSE
0076 108E0000         (  krnp2_beta5.asm):00243                  ldy    #$0000
                      (  krnp2_beta5.asm):00244                ENDC
007A 103F03           (  krnp2_beta5.asm):00245                  os9    F$Fork      fork it
007D 2508             (  krnp2_beta5.asm):00246                  bcs    L009B       if error, crash the system
007F 103F2D           (  krnp2_beta5.asm):00247         L0093    os9    F$NProc     let it take over
                      (  krnp2_beta5.asm):00248         
0082 6B726E70B3       (  krnp2_beta5.asm):00249         L0096    fcs    /krnp3/
                      (  krnp2_beta5.asm):00250         
0087 0E6B             (  krnp2_beta5.asm):00251         L009B    jmp    <D.Crash
                      (  krnp2_beta5.asm):00252         
0089 02               (  krnp2_beta5.asm):00253         SvcTab   fcb    F$UnLink
008A 00B1             (  krnp2_beta5.asm):00254                  fdb    FUnLink-*-2
008C 39               (  krnp2_beta5.asm):00255                  fcb    F$AllRAM
008D 0706             (  krnp2_beta5.asm):00256                  fdb    FAllRAM-*-2
008F D3               (  krnp2_beta5.asm):00257                  fcb    F$AlHRAM+SysState
0090 0731             (  krnp2_beta5.asm):00258                  fdb    FAlHRAM-*-2
0092 03               (  krnp2_beta5.asm):00259                  fcb    F$Fork
0093 01A1             (  krnp2_beta5.asm):00260                  fdb    FFork-*-2
0095 04               (  krnp2_beta5.asm):00261                  fcb    F$Wait
0096 028C             (  krnp2_beta5.asm):00262                  fdb    FWait-*-2
0098 05               (  krnp2_beta5.asm):00263                  fcb    F$Chain
0099 0302             (  krnp2_beta5.asm):00264                  fdb    FChain-*-2
009B 06               (  krnp2_beta5.asm):00265                  fcb    F$Exit
009C 0494             (  krnp2_beta5.asm):00266                  fdb    FExit-*-2
009E 07               (  krnp2_beta5.asm):00267                  fcb    F$Mem
009F 052C             (  krnp2_beta5.asm):00268                  fdb    FMem-*-2
00A1 08               (  krnp2_beta5.asm):00269                  fcb    F$Send
00A2 0589             (  krnp2_beta5.asm):00270                  fdb    FSend-*-2
00A4 09               (  krnp2_beta5.asm):00271                  fcb    F$Icpt
00A5 063B             (  krnp2_beta5.asm):00272                  fdb    FIcpt-*-2
00A7 0A               (  krnp2_beta5.asm):00273                  fcb    F$Sleep
00A8 0646             (  krnp2_beta5.asm):00274                  fdb    FSleep-*-2
00AA 0D               (  krnp2_beta5.asm):00275                  fcb    F$SPrior
00AB 072D             (  krnp2_beta5.asm):00276                  fdb    FSPrior-*-2
00AD 0C               (  krnp2_beta5.asm):00277                  fcb    F$ID
00AE 0746             (  krnp2_beta5.asm):00278                  fdb    FID-*-2
00B0 0E               (  krnp2_beta5.asm):00279                  fcb    F$SSWI
00B1 0777             (  krnp2_beta5.asm):00280                  fdb    FSSWI-*-2
00B3 16               (  krnp2_beta5.asm):00281                  fcb    F$STime
00B4 0789             (  krnp2_beta5.asm):00282                  fdb    FSTime-*-2
00B6 12               (  krnp2_beta5.asm):00283                  fcb    F$SchBit
00B7 0882             (  krnp2_beta5.asm):00284                  fdb    FSchBit-*-2
00B9 92               (  krnp2_beta5.asm):00285                  fcb    F$SchBit+SysState
00BA 088C             (  krnp2_beta5.asm):00286                  fdb    FSSchBit-*-2
00BC 13               (  krnp2_beta5.asm):00287                  fcb    F$AllBit
00BD 07B1             (  krnp2_beta5.asm):00288                  fdb    FAllBit-*-2
00BF 93               (  krnp2_beta5.asm):00289                  fcb    F$AllBit+SysState
00C0 07BB             (  krnp2_beta5.asm):00290                  fdb    FSAllBit-*-2
00C2 14               (  krnp2_beta5.asm):00291                  fcb    F$DelBit
00C3 081F             (  krnp2_beta5.asm):00292                  fdb    FDelBit-*-2
00C5 94               (  krnp2_beta5.asm):00293                  fcb    F$DelBit+SysState
00C6 0829             (  krnp2_beta5.asm):00294                  fdb    FSDelBit-*-2
00C8 18               (  krnp2_beta5.asm):00295                  fcb    F$GPrDsc
00C9 08D8             (  krnp2_beta5.asm):00296                  fdb    FGPrDsc-*-2
00CB 19               (  krnp2_beta5.asm):00297                  fcb    F$GBlkMp
00CC 08EE             (  krnp2_beta5.asm):00298                  fdb    FGBlkMp-*-2
00CE 1A               (  krnp2_beta5.asm):00299                  fcb    F$GModDr
00CF 0906             (  krnp2_beta5.asm):00300                  fdb    FGModDr-*-2
                      (  krnp2_beta5.asm):00301                IFEQ   H6309
00D1 51               (  krnp2_beta5.asm):00302                  fcb    F$DelRAM
00D2 072E             (  krnp2_beta5.asm):00303                  fdb    FDelRAM-*-2
                      (  krnp2_beta5.asm):00304                ENDC
00D4 1C               (  krnp2_beta5.asm):00305                  fcb    F$SUser      Added back here for room in OS9p1
00D5 091E             (  krnp2_beta5.asm):00306                  fdb    FSUser-*-2
00D7 1D               (  krnp2_beta5.asm):00307                  fcb    F$UnLoad
00D8 0923             (  krnp2_beta5.asm):00308                  fdb    FUnLoad-*-2
00DA AF               (  krnp2_beta5.asm):00309                  fcb    F$Find64+$80
00DB 096C             (  krnp2_beta5.asm):00310                  fdb    FFind64-*-2
00DD B0               (  krnp2_beta5.asm):00311                  fcb    F$All64+$80
00DE 0983             (  krnp2_beta5.asm):00312                  fdb    FAll64-*-2
00E0 B1               (  krnp2_beta5.asm):00313                  fcb    F$Ret64+$80
00E1 0A03             (  krnp2_beta5.asm):00314                  fdb    FRet64-*-2
00E3 B7               (  krnp2_beta5.asm):00315                  fcb    F$GProcP+$80
00E4 0A30             (  krnp2_beta5.asm):00316                  fdb    FGProcP-*-2
00E6 BB               (  krnp2_beta5.asm):00317                  fcb    F$DelImg+$80
00E7 0A4F             (  krnp2_beta5.asm):00318                  fdb    FDelImg-*-2
00E9 CB               (  krnp2_beta5.asm):00319                  fcb    F$AllPrc+$80
00EA 01E4             (  krnp2_beta5.asm):00320                  fdb    FAllPrc-*-2
00EC CC               (  krnp2_beta5.asm):00321                  fcb    F$DelPrc+$80
00ED 0231             (  krnp2_beta5.asm):00322                  fdb    FDelPrc-*-2
00EF 4F               (  krnp2_beta5.asm):00323                  fcb    F$MapBlk
00F0 0A74             (  krnp2_beta5.asm):00324                  fdb    FMapBlk-*-2
00F2 50               (  krnp2_beta5.asm):00325                  fcb    F$ClrBlk
00F3 0AAC             (  krnp2_beta5.asm):00326                  fdb    FClrBlk-*-2
00F5 D2               (  krnp2_beta5.asm):00327                  fcb    F$GCMDir+$80
00F6 0AE6             (  krnp2_beta5.asm):00328                  fdb    FGCMDir-*-2
00F8 23               (  krnp2_beta5.asm):00329                  fcb    F$Debug
00F9 0B79             (  krnp2_beta5.asm):00330                  fdb    FDebug-*-2
00FB 55               (  krnp2_beta5.asm):00331                  fcb    F$CRCMod    new system call to change module CRC calcs on/off
00FC 0004             (  krnp2_beta5.asm):00332                  fdb    FCRCMod-*-2
00FE 7F               (  krnp2_beta5.asm):00333                  fcb    $7f
00FF 0013             (  krnp2_beta5.asm):00334                  fdb    GetIOMan-*-2
0101 80               (  krnp2_beta5.asm):00335                  fcb    $80
                      (  krnp2_beta5.asm):00336         
                      (  krnp2_beta5.asm):00337                  use    fcrcmod.asm
                      (      fcrcmod.asm):00001         **************************************************
                      (      fcrcmod.asm):00002         * System Call: F$CRCMod
                      (      fcrcmod.asm):00003         *
                      (      fcrcmod.asm):00004         * Function: Changes CRC module reporting
                      (      fcrcmod.asm):00005         *
                      (      fcrcmod.asm):00006         * Input:  A = Flag (0 = report, 1 = CRC off, 2 = CRC on)
                      (      fcrcmod.asm):00007         *
                      (      fcrcmod.asm):00008         * Output: A = State (0 = CRC off, 1 = CRC on)
                      (      fcrcmod.asm):00009         *
                      (      fcrcmod.asm):00010         * Error:  CC = C bit set; B = error code
                      (      fcrcmod.asm):00011         *
0102 A641             (      fcrcmod.asm):00012         FCRCMod  lda    R$A,u       do they want a report or a toggle?
0104 2708             (      fcrcmod.asm):00013                  beq    CRCRep      a report only
0106 4A               (      fcrcmod.asm):00014                  deca               check for OFF
0107 2601             (      fcrcmod.asm):00015                  bne    GoCRCon     no, must be on
0109 8C               (      fcrcmod.asm):00016                  fcb   $8C          skip 2 bytes, saves 3 bytes of memory
010A 8601             (      fcrcmod.asm):00017         GoCRCon  lda    #$1         CRC checking on
010C 973B             (      fcrcmod.asm):00018                  sta    <D.CRC      turn CRC checking on
010E 963B             (      fcrcmod.asm):00019         CRCRep   lda    <D.CRC      get current CRC flag for return
0110 A741             (      fcrcmod.asm):00020         CRCRep2  sta    R$A,u       save it to their register stack
0112 5F               (      fcrcmod.asm):00021                  clrb               no error 
0113 39               (      fcrcmod.asm):00022                  rts                and exit
                      (  krnp2_beta5.asm):00338         
                      (  krnp2_beta5.asm):00339         * Link & execute IOMan
                      (  krnp2_beta5.asm):00340         * Entry: None
                      (  krnp2_beta5.asm):00341         * Exit : I/O handling installed & ready for use
0114 3476             (  krnp2_beta5.asm):00342         GetIOMan pshs   d,x,y,u     preserve regs
0116 8D17             (  krnp2_beta5.asm):00343                  bsr    LnkIOMan    link to ioman
0118 2409             (  krnp2_beta5.asm):00344                  bcc    GotIOMan    no errors, go on
011A 103F35           (  krnp2_beta5.asm):00345                  os9    F$Boot      re-load boot file
011D 250C             (  krnp2_beta5.asm):00346                  bcs    IOManErr    error loading, return
011F 8D0E             (  krnp2_beta5.asm):00347                  bsr    LnkIOMan    link to ioman
0121 2508             (  krnp2_beta5.asm):00348                  bcs    IOManErr    error, save it & return
0123 ADA4             (  krnp2_beta5.asm):00349         GotIOMan jsr    ,y          execute IOMan's init routine
0125 3576             (  krnp2_beta5.asm):00350                  puls   d,x,y,u     restore registers
0127 6EB900FE         (  krnp2_beta5.asm):00351                  jmp    [IOEntry,y] Execute I/O vector
                      (  krnp2_beta5.asm):00352         
012B E761             (  krnp2_beta5.asm):00353         IOManErr stb    1,s         save error if any
012D 35F6             (  krnp2_beta5.asm):00354                  puls   d,x,y,u,pc  restore & return
                      (  krnp2_beta5.asm):00355         
                      (  krnp2_beta5.asm):00356         * Link to IOMan
                      (  krnp2_beta5.asm):00357         * Entry: None
                      (  krnp2_beta5.asm):00358         * Exit : U=Pointer to IOMan module header
                      (  krnp2_beta5.asm):00359         *        Y=Pointer to IOMan entry point
012F 308C06           (  krnp2_beta5.asm):00360         LnkIOMan leax   <IOMan,pc   point to name
0132 86C1             (  krnp2_beta5.asm):00361                  lda    #(Systm+Objct) get type
0134 103F00           (  krnp2_beta5.asm):00362                  os9    F$Link      link it
0137 39               (  krnp2_beta5.asm):00363                  rts                return
                      (  krnp2_beta5.asm):00364         
0138 494F4D61EE       (  krnp2_beta5.asm):00365         IOMan    fcs    /IOMan/
                      (  krnp2_beta5.asm):00366         
                      (  krnp2_beta5.asm):00367                  use    funlink.asm
                      (      funlink.asm):00001         **************************************************
                      (      funlink.asm):00002         * System Call: F$UnLink
                      (      funlink.asm):00003         *
                      (      funlink.asm):00004         * Function: Unlink a module
                      (      funlink.asm):00005         *
                      (      funlink.asm):00006         * Input:  U = Address of module header
                      (      funlink.asm):00007         *
                      (      funlink.asm):00008         * Output: None
                      (      funlink.asm):00009         *
                      (      funlink.asm):00010         * Error:  CC = C bit set; B = error code
                      (      funlink.asm):00011         *
013D 3446             (      funlink.asm):00012         FUnLink  pshs   d,u         preserve register stack pointer and make a buffer
013F EC48             (      funlink.asm):00013                  ldd    R$U,u       get pointer to module header
0141 1F01             (      funlink.asm):00014                  tfr    d,x         copy it to X
0143 44               (      funlink.asm):00015                  lsra               divide MSB by 32 to get DAT block offset
0144 44               (      funlink.asm):00016                  lsra
0145 44               (      funlink.asm):00017                  lsra
0146 44               (      funlink.asm):00018                  lsra
0147 44               (      funlink.asm):00019                  lsra
0148 A7E4             (      funlink.asm):00020                  sta    ,s          save DAT block offset
014A 10270089         (      funlink.asm):00021                  lbeq   L01D0       zero, can't use so exit
014E DE50             (      funlink.asm):00022                  ldu    <D.Proc     get pointer to current process
0150 31C840           (      funlink.asm):00023                  leay   P$DATImg,u  point Y to it's DAT image
0153 48               (      funlink.asm):00024                  lsla               account for 2 bytes/entry
0154 ECA6             (      funlink.asm):00025                  ldd    a,y         get block #
0156 DE40             (      funlink.asm):00026                  ldu    <D.BlkMap   get pointer to system block map
                      (      funlink.asm):00027                  IFNE   H6309
                      (      funlink.asm):00028                  tim    #ModBlock,d,u   Is memory block a module type?
                      (      funlink.asm):00029                  ELSE
0158 E6CB             (      funlink.asm):00030                  ldb    d,u
015A C502             (      funlink.asm):00031                  bitb   #ModBlock
                      (      funlink.asm):00032                  ENDC
015C 2779             (      funlink.asm):00033                  beq    L01D0       no, exit without error
015E 33A840           (      funlink.asm):00034                  leau   (P$Links-P$DATImg),y  point to block link counts
0161 2004             (      funlink.asm):00035                  bra    L0161       go unlink block
                      (      funlink.asm):00036         
0163 6AE4             (      funlink.asm):00037         L015D    dec    ,s          we done?
0165 2770             (      funlink.asm):00038                  beq    L01D0       yes, go on
0167 E6E4             (      funlink.asm):00039         L0161    ldb    ,s          get current offset
0169 58               (      funlink.asm):00040                  lslb               account for 2 bytes entry
016A ECC5             (      funlink.asm):00041                  ldd    b,u         get block link count
016C 27F5             (      funlink.asm):00042                  beq    L015D       already zero, get next one
016E A6E4             (      funlink.asm):00043                  lda    ,s          get block offset
0170 48               (      funlink.asm):00044                  lsla               find offset into 64k map by multiplying by 32
0171 48               (      funlink.asm):00045                  lsla  
0172 48               (      funlink.asm):00046                  lsla  
0173 48               (      funlink.asm):00047                  lsla  
0174 48               (      funlink.asm):00048                  lsla  
0175 5F               (      funlink.asm):00049                  clrb  
0176 40               (      funlink.asm):00050                  nega  
                      (      funlink.asm):00051                  IFNE   H6309
                      (      funlink.asm):00052                  addr   d,x
                      (      funlink.asm):00053                  ELSE
0177 308B             (      funlink.asm):00054                  leax   d,x
                      (      funlink.asm):00055                  ENDC
0179 E6E4             (      funlink.asm):00056                  ldb    ,s          get block offset
017B 58               (      funlink.asm):00057                  lslb               account for 2 bytes/entry
017C ECA5             (      funlink.asm):00058                  ldd    b,y         get block #
017E DE44             (      funlink.asm):00059                  ldu    <D.ModDir   get module directory pointer
0180 2007             (      funlink.asm):00060                  bra    L0185       go look for it
                      (      funlink.asm):00061         
                      (      funlink.asm):00062         * Main module directory search routine
0182 3348             (      funlink.asm):00063         L017C    leau   MD$ESize,u  move to next module entry
0184 119358           (      funlink.asm):00064                  cmpu   <D.ModEnd   done entire directory?
0187 244E             (      funlink.asm):00065                  bhs    L01D0       Yes, exit
0189 AC44             (      funlink.asm):00066         L0185    cmpx   MD$MPtr,u   is module pointer the same?
018B 26F5             (      funlink.asm):00067                  bne    L017C       no, keep looking
018D 10A3D4           (      funlink.asm):00068                  cmpd   [MD$MPDAT,u] DAT match?
0190 26F0             (      funlink.asm):00069                  bne    L017C       no, keep looking
                      (      funlink.asm):00070         * Module is found decrement link count
                      (      funlink.asm):00071         * NOTE: COULD WE USE D?
                      (      funlink.asm):00072         *   L0198 - Safe, destroys D immediately
                      (      funlink.asm):00073         *   Fall through- safe, destroys D immediately
                      (      funlink.asm):00074         *   L01B5 - Seems to be safe
0192 EC46             (      funlink.asm):00075                  ldd    MD$Link,u   get module link count
0194 2707             (      funlink.asm):00076                  beq    L0198       it's zero, go unlink it
                      (      funlink.asm):00077                  IFNE   H6309
                      (      funlink.asm):00078                  decd               decrement link count
                      (      funlink.asm):00079                  ELSE
0196 830001           (      funlink.asm):00080                  subd   #$0001
                      (      funlink.asm):00081                  ENDC
0199 ED46             (      funlink.asm):00082                  std    MD$Link,u   save it back
019B 261E             (      funlink.asm):00083                  bne    L01B5       go on
                      (      funlink.asm):00084         * Module link count is zero check if he's unlinking a I/O module
019D AE62             (      funlink.asm):00085         L0198    ldx    2,s         get pointer to register stack
019F AE08             (      funlink.asm):00086                  ldx    R$U,x       get pointer to module
01A1 CC0006           (      funlink.asm):00087                  ldd    #M$Type     get offset to module type
01A4 103F48           (      funlink.asm):00088                  os9    F$LDDDXY    get module type
01A7 81D0             (      funlink.asm):00089                  cmpa   #FlMgr      is it a I/O module?
01A9 250E             (      funlink.asm):00090                  blo    L01B3       no, don't process for I/O
01AB 103F33           (      funlink.asm):00091                  os9    F$IODel     device still being used by somebody else?
01AE 2409             (      funlink.asm):00092                  bcc    L01B3       no, go on
01B0 EC46             (      funlink.asm):00093                  ldd    MD$Link,u   put the link count back to where it was
                      (      funlink.asm):00094                  IFNE   H6309
                      (      funlink.asm):00095                  incd
                      (      funlink.asm):00096                  ELSE
01B2 C30001           (      funlink.asm):00097                  addd   #$0001
                      (      funlink.asm):00098                  ENDC
01B5 ED46             (      funlink.asm):00099                  std    MD$Link,u
01B7 201F             (      funlink.asm):00100                  bra    L01D1       return error
                      (      funlink.asm):00101         * Clear module from memory
01B9 8D21             (      funlink.asm):00102         L01B3    bsr    DelMod      delete module from memory & module dir
01BB E6E4             (      funlink.asm):00103         L01B5    ldb    ,s          get block
01BD 58               (      funlink.asm):00104                  lslb               account for 2 bytes/entry
01BE 31A5             (      funlink.asm):00105                  leay   b,y         point to block
01C0 ECA840           (      funlink.asm):00106                 ldd    (P$Links-P$DATImg),y get block link count
                      (      funlink.asm):00107                  IFNE   H6309
                      (      funlink.asm):00108                  decd               decrement it
                      (      funlink.asm):00109                  ELSE
01C3 830001           (      funlink.asm):00110                  subd   #$0001
                      (      funlink.asm):00111                  ENDC
01C6 EDA840           (      funlink.asm):00112                  std    (P$Links-P$DATImg),y save new link count
01C9 260C             (      funlink.asm):00113                  bne    L01D0       not zero, return to user
                      (      funlink.asm):00114         * Clear module blocks in process DAT image
01CB EC42             (      funlink.asm):00115                  ldd    MD$MBSiz,u  get block size
01CD 8D5E             (      funlink.asm):00116                  bsr    L0226       calculate # blocks to delete
01CF 8E333E           (      funlink.asm):00117                  ldx    #DAT.Free   get DAT free marker
01D2 AFA1             (      funlink.asm):00118         L01CB    stx    ,y++        save it in DAT image
01D4 4A               (      funlink.asm):00119                  deca               done?
01D5 26FB             (      funlink.asm):00120                  bne    L01CB       no, keep going
01D7 5F               (      funlink.asm):00121         L01D0    clrb               clear errors
01D8 3262             (      funlink.asm):00122         L01D1    leas   2,s         purge local data
01DA 35C0             (      funlink.asm):00123                  puls   u,pc        restore & return
                      (      funlink.asm):00124         
                      (      funlink.asm):00125         * Delete module from module directory & from memory
                      (      funlink.asm):00126         * Entry: U=Module directory entry pointer to delete
                      (      funlink.asm):00127         * Exit : None
01DC 9E40             (      funlink.asm):00128         DelMod   ldx    <D.BlkMap   get pointer to memory block map
01DE ECD4             (      funlink.asm):00129                  ldd    [MD$MPDAT,u] get pointer to module DAT image
01E0 A68B             (      funlink.asm):00130                  lda    d,x         is block type ROM?
01E2 2B48             (      funlink.asm):00131                  bmi    L0225       yes can't delete it, return
01E4 9E44             (      funlink.asm):00132                  ldx    <D.ModDir   get pointer to module directory
01E6 EC94             (      funlink.asm):00133         L01DF    ldd    [MD$MPDAT,x] get offset to DAT
01E8 10A3D4           (      funlink.asm):00134                  cmpd   [MD$MPDAT,u] match what we're looking for?
01EB 2604             (      funlink.asm):00135                  bne    L01EA       no, keep looking
01ED EC06             (      funlink.asm):00136                  ldd    MD$Link,x   get module link count
01EF 263B             (      funlink.asm):00137                  bne    L0225       not zero, return
01F1 3008             (      funlink.asm):00138         L01EA    leax   MD$ESize,x  move to next module
01F3 9C58             (      funlink.asm):00139                  cmpx   <D.ModEnd   at the end?
01F5 25EF             (      funlink.asm):00140                  bcs    L01DF       no, keep going
01F7 9E40             (      funlink.asm):00141                  ldx    <D.BlkMap   get pointer to block map
01F9 EC42             (      funlink.asm):00142                  ldd    MD$MBSiz,u  get memory block size
01FB 8D30             (      funlink.asm):00143                  bsr    L0226       calculate # blocks to clear
                      (      funlink.asm):00144                  IFNE   H6309
                      (      funlink.asm):00145                  pshs   u           Preserve U (faster than original Y below)
                      (      funlink.asm):00146                  clrb               Setup for faster block in use clears
                      (      funlink.asm):00147                  ldu    MD$MPDAT,u  get pointer to module DAT image
01FD                  (      funlink.asm):00148         L01FB    ldw    ,u++        Get first block
                      (      funlink.asm):00149                  stb    -2,u        clear it in DAT image
                      (      funlink.asm):00150                  stb    -1,u
                      (      funlink.asm):00151                  addr   x,w         point to block in block map
                      (      funlink.asm):00152                  aim    #^(ModBlock!RAMinUse),,w
                      (      funlink.asm):00153                  deca
                      (      funlink.asm):00154                  bne    L01FB
                      (      funlink.asm):00155                  puls   u           Restore module ptr
                      (      funlink.asm):00156                  ELSE
01FD 3420             (      funlink.asm):00157                  pshs  y          save y
01FF 10AEC4           (      funlink.asm):00158                  ldy   MD$MPDAT,u module image ptr
0202 3412             (      funlink.asm):00159         L01FB    pshs  a,x        save #blocks, ptr
0204 ECA4             (      funlink.asm):00160                  ldd   ,y         get block number
0206 6FA0             (      funlink.asm):00161                  clr   ,y+        clear the image
0208 6FA0             (      funlink.asm):00162                  clr   ,y+
020A 308B             (      funlink.asm):00163                  leax  d,x        point to blkmap entry
020C E684             (      funlink.asm):00164                  ldb   ,x
020E C4FC             (      funlink.asm):00165                  andb  #^(RAMinUse+ModBlock) free block
0210 E784             (      funlink.asm):00166                  stb   ,x
0212 3512             (      funlink.asm):00167                  puls  a,x
0214 4A               (      funlink.asm):00168                  deca             last block done?
0215 26EB             (      funlink.asm):00169                  bne   L01FB      ..no, loop
0217 3520             (      funlink.asm):00170                  puls  y
                      (      funlink.asm):00171                  ENDC
0219 9E44             (      funlink.asm):00172                  ldx    <D.ModDir   get module directory pointer
021B ECC4             (      funlink.asm):00173                  ldd    MD$MPDAT,u  get module DAT pointer
021D 10A384           (      funlink.asm):00174         L0216    cmpd   MD$MPDAT,x  match?
0220 2604             (      funlink.asm):00175                  bne    L021F       no, keep looking
0222 6F84             (      funlink.asm):00176                  clr    MD$MPDAT,x  clear module DAT image pointer
0224 6F01             (      funlink.asm):00177                  clr    MD$MPDAT+1,x
0226 3008             (      funlink.asm):00178         L021F    leax   MD$ESize,x  point to next module entry
0228 9C58             (      funlink.asm):00179                  cmpx   <D.ModEnd   at the end?
022A 25F1             (      funlink.asm):00180                  blo    L0216       no, keep looking
022C 39               (      funlink.asm):00181         L0225    rts                return
                      (      funlink.asm):00182         
022D C31FFF           (      funlink.asm):00183         L0226    addd   #$1FFF      round up to nearest block
0230 44               (      funlink.asm):00184                  lsra               calculate block # within 64k workspace
0231 44               (      funlink.asm):00185                  lsra  
0232 44               (      funlink.asm):00186                  lsra  
0233 44               (      funlink.asm):00187                  lsra  
0234 44               (      funlink.asm):00188                  lsra  
0235 39               (      funlink.asm):00189                  rts   
                      (      funlink.asm):00190         
                      (  krnp2_beta5.asm):00368         
                      (  krnp2_beta5.asm):00369                  use    ffork.asm
                      (        ffork.asm):00001         **************************************************
                      (        ffork.asm):00002         * System Call: F$Fork
                      (        ffork.asm):00003         *
                      (        ffork.asm):00004         * Function: Starts a new child process
                      (        ffork.asm):00005         *
                      (        ffork.asm):00006         * Input:  X = Address of module or filename
                      (        ffork.asm):00007         *         Y = Parameter area size (256 byte pages)
                      (        ffork.asm):00008         *         U = Address of parameter area
                      (        ffork.asm):00009         *         A = Language/Type code
                      (        ffork.asm):00010         *         B = Optional data area size (256 byte pages)
                      (        ffork.asm):00011         *
                      (        ffork.asm):00012         * Output: X = Updated past the name string
                      (        ffork.asm):00013         *         A = Child's process ID
                      (        ffork.asm):00014         *
                      (        ffork.asm):00015         * Error:  CC = C bit set; B = error code
                      (        ffork.asm):00016         *
0236 3440             (        ffork.asm):00017         FFork    pshs   u           preserve register stack pointer
0238 1700A1           (        ffork.asm):00018                  lbsr   AllPrc      setup a new process descriptor
023B 2402             (        ffork.asm):00019                  bcc    GotNPrc     went ok, keep going
023D 35C0             (        ffork.asm):00020                  puls   u,pc        restore & return with error
                      (        ffork.asm):00021         
                      (        ffork.asm):00022         * Copy user # & priority
023F 3440             (        ffork.asm):00023         GotNPrc  pshs   u           save pointer to new descriptor
0241 9E50             (        ffork.asm):00024                  ldx    <D.Proc     get current process pointer
                      (        ffork.asm):00025                  IFNE   H6309
                      (        ffork.asm):00026                  ldq    P$User,x    Get user # & priority from forking process
                      (        ffork.asm):00027                  std    P$User,u    Save user # in new process
                      (        ffork.asm):00028                  ste    P$Prior,u   Save priority in new process
                      (        ffork.asm):00029                  ELSE
0243 EC08             (        ffork.asm):00030                  ldd    P$User,x
0245 ED48             (        ffork.asm):00031                  std    P$User,u
0247 A60A             (        ffork.asm):00032                  lda    P$Prior,x
0249 A74A             (        ffork.asm):00033                  sta    P$Prior,u
                      (        ffork.asm):00034                  ENDC
                      (        ffork.asm):00035         * Copy network I/O pointers to new descriptor
                      (        ffork.asm):00036                  IFEQ   Network-1
                      (        ffork.asm):00037                  pshs   x,u 
                      (        ffork.asm):00038                  leax   >P$NIO,x    point to current NIO pointers
                      (        ffork.asm):00039                  leau   >P$NIO,u    point to buffer for new ones
                      (        ffork.asm):00040                  IFNE   H6309
                      (        ffork.asm):00041                  ldw    #NefIOSiz   get size
                      (        ffork.asm):00042                  tfm    x+,u+       move 'em
                      (        ffork.asm):00043                  ELSE
                      (        ffork.asm):00044                  ldb    #NefIOSiz
024B                  (        ffork.asm):00045         L0250    lda    ,x+
                      (        ffork.asm):00046                  sta    ,u+
                      (        ffork.asm):00047                  decb
                      (        ffork.asm):00048                  bne    L0250
                      (        ffork.asm):00049                  ENDC
                      (        ffork.asm):00050                  puls   x,u         restore pointers to descriptors
                      (        ffork.asm):00051                  ENDC
                      (        ffork.asm):00052         * Copy I/O pointers to new descriptor
024B 308820           (        ffork.asm):00053                  leax   P$DIO,x    
024E 33C820           (        ffork.asm):00054                  leau   P$DIO,u
                      (        ffork.asm):00055                  IFNE   H6309
                      (        ffork.asm):00056                  ldw    #DefIOSiz
                      (        ffork.asm):00057                  tfm    x+,u+
                      (        ffork.asm):00058         * Copy Standard paths to new descriptor
                      (        ffork.asm):00059                  lde    #3          get # paths
                      (        ffork.asm):00060                  ELSE
0251 C610             (        ffork.asm):00061                  ldb    #DefIOSiz
0253 A680             (        ffork.asm):00062         L0261    lda    ,x+
0255 A7C0             (        ffork.asm):00063                  sta    ,u+
0257 5A               (        ffork.asm):00064                  decb
0258 26F9             (        ffork.asm):00065                  bne    L0261
025A 108E0003         (        ffork.asm):00066                  ldy    #3
                      (        ffork.asm):00067                  ENDC
                      (        ffork.asm):00068         
                      (        ffork.asm):00069         * Duplicate 1st 3 paths
025E A680             (        ffork.asm):00070         GetOPth  lda    ,x+         get a path #
0260 2706             (        ffork.asm):00071                  beq    SveNPth     don't exist, go on
0262 103F82           (        ffork.asm):00072                  os9    I$Dup       dupe it
0265 2401             (        ffork.asm):00073                  bcc    SveNPth     no error, go on
0267 4F               (        ffork.asm):00074                  clra               clear it
                      (        ffork.asm):00075         
                      (        ffork.asm):00076         * As std in/out/err
0268 A7C0             (        ffork.asm):00077         SveNPth  sta    ,u+         save new path #
                      (        ffork.asm):00078                  IFNE   H6309
                      (        ffork.asm):00079                  dece               done?
                      (        ffork.asm):00080                  ELSE
026A 313F             (        ffork.asm):00081                  leay   -1,y
                      (        ffork.asm):00082                  ENDC
026C 26F0             (        ffork.asm):00083                  bne    GetOPth     no, keep going
                      (        ffork.asm):00084         * Link to new module & setup task map
026E AEE4             (        ffork.asm):00085                  ldx    ,s          get pointer to new descriptor
0270 EE62             (        ffork.asm):00086                  ldu    2,s         get pointer to register stack
0272 17022A           (        ffork.asm):00087                  lbsr   L04B1       link to module & setup register stack
0275 254A             (        ffork.asm):00088                  bcs    L02CF       exit if error
0277 3406             (        ffork.asm):00089                  pshs   d
0279 103F3F           (        ffork.asm):00090                  os9    F$AllTsk    allocate the task & setup MMU
027C 2543             (        ffork.asm):00091                  bcs    L02CF       Error, skip ahead
                      (        ffork.asm):00092         
                      (        ffork.asm):00093         * Copy parameters to new process
027E A607             (        ffork.asm):00094                  lda    P$PagCnt,x  get memory page count
0280 5F               (        ffork.asm):00095                  clrb   
0281 A3E4             (        ffork.asm):00096                  subd   ,s          calculate destination
0283 1F03             (        ffork.asm):00097                  tfr    d,u         set parameter destination pointer
0285 E606             (        ffork.asm):00098                  ldb    P$Task,x    get source task #
0287 9E50             (        ffork.asm):00099                  ldx    <D.Proc     get destination task #
0289 A606             (        ffork.asm):00100                  lda    P$Task,x
028B 30A4             (        ffork.asm):00101                  leax   ,y          point to parameters
028D 3520             (        ffork.asm):00102                  puls   y           restore parameter count
028F 103F38           (        ffork.asm):00103                  os9    F$Move      move parameters to new process
                      (        ffork.asm):00104         
                      (        ffork.asm):00105         * Setup the new stack
0292 AEE4             (        ffork.asm):00106                  ldx    ,s          get pointer to process descriptor
0294 96D0             (        ffork.asm):00107                  lda    <D.SysTsk   get task #
0296 EE04             (        ffork.asm):00108                  ldu    P$SP,x      get new stack pointer
0298 308901F4         (        ffork.asm):00109                  leax   >(P$Stack-R$Size),x point to register stack
029C 108E000C         (        ffork.asm):00110                  ldy    #R$Size     get size of register stack
02A0 103F38           (        ffork.asm):00111                  os9    F$Move      move the register stack over
02A3 3550             (        ffork.asm):00112                  puls   u,x
02A5 103F40           (        ffork.asm):00113                  os9    F$DelTsk 
02A8 109E50           (        ffork.asm):00114                  ldy    <D.Proc
02AB A684             (        ffork.asm):00115                  lda    P$ID,x
02AD A741             (        ffork.asm):00116                  sta    R$A,u
02AF E623             (        ffork.asm):00117                  ldb    P$CID,y
02B1 A723             (        ffork.asm):00118                  sta    P$CID,y
02B3 A6A4             (        ffork.asm):00119                  lda    P$ID,y
02B5 ED01             (        ffork.asm):00120                  std    P$PID,x
                      (        ffork.asm):00121                  IFNE   H6309
                      (        ffork.asm):00122                  aim    #^SysState,P$State,x switch to non-system state
                      (        ffork.asm):00123                  ELSE
02B7 A60C             (        ffork.asm):00124                  lda    P$State,x
02B9 847F             (        ffork.asm):00125                  anda   #^SysState
02BB A70C             (        ffork.asm):00126                  sta    P$State,x
                      (        ffork.asm):00127                  ENDC
                      (        ffork.asm):00128         * Put date & time of creation into descriptor
                      (        ffork.asm):00129         *         pshs   x           preserve process pointer
                      (        ffork.asm):00130         *         leax   P$DatBeg,x  point to time buffer
                      (        ffork.asm):00131         *         os9    F$Time      put date/time into it
                      (        ffork.asm):00132         *         puls   x           restore pointer
02BD 103F2C           (        ffork.asm):00133                  os9    F$AProc     and start the process
02C0 39               (        ffork.asm):00134                  rts                return
                      (        ffork.asm):00135         
                      (        ffork.asm):00136         * Fork error goes here
02C1 3510             (        ffork.asm):00137         L02CF    puls  x
02C3 3404             (        ffork.asm):00138                  pshs  b        save error
02C5 1702CB           (        ffork.asm):00139                  lbsr  L05A5        close paths & unlink mem
02C8 A684             (        ffork.asm):00140                  lda   P$ID,x        get bad ID
02CA 1700A9           (        ffork.asm):00141                  lbsr  L0386        delete proc desc & task #
02CD 53               (        ffork.asm):00142                  comb            set carry
02CE 35C4             (        ffork.asm):00143                  puls  pc,u,b        pull error code & u & return
                      (  krnp2_beta5.asm):00370         
                      (  krnp2_beta5.asm):00371                  use    fallprc.asm
                      (      fallprc.asm):00001         **************************************************
                      (      fallprc.asm):00002         * System Call: F$AllPrc
                      (      fallprc.asm):00003         * Function: Allocate process descriptor
                      (      fallprc.asm):00004         * Input:  None
                      (      fallprc.asm):00005         * Output: U = Process descriptor pointer
                      (      fallprc.asm):00006         * Error:  CC = C bit set; B = error code
                      (      fallprc.asm):00007         *
02D0 3440             (      fallprc.asm):00008         FAllPrc  pshs  u            preserve register stack pointer
02D2 8D08             (      fallprc.asm):00009                  bsr   AllPrc       try & allocate descriptor
02D4 2504             (      fallprc.asm):00010                  bcs   L02E8        can't do, return
02D6 AEE4             (      fallprc.asm):00011                  ldx   ,s           get register stack pointer
02D8 EF08             (      fallprc.asm):00012                  stu   R$U,x        save pointer to new descriptor
02DA 35C0             (      fallprc.asm):00013         L02E8    puls  u,pc         restore & return
                      (      fallprc.asm):00014         * Allocate a process desciptor
                      (      fallprc.asm):00015         * Entry: None
02DC 9E48             (      fallprc.asm):00016         AllPrc   ldx    <D.PrcDBT   get pointer to process descriptor block table
02DE A680             (      fallprc.asm):00017         L02EC    lda    ,x+         get a process block #
02E0 26FC             (      fallprc.asm):00018                  bne    L02EC       used, keep looking
02E2 301F             (      fallprc.asm):00019                  leax   -1,x        point to it again
02E4 1F10             (      fallprc.asm):00020                  tfr    x,d         move it to D
02E6 9348             (      fallprc.asm):00021                  subd   <D.PrcDBT   subtract pointer to table (gives actual prc. ID)
02E8 4D               (      fallprc.asm):00022                  tsta               id valid?
02E9 2704             (      fallprc.asm):00023                  beq    L02FE       yes, go on
02EB 53               (      fallprc.asm):00024                  comb               set carry
02EC C6E5             (      fallprc.asm):00025                  ldb    #E$PrcFul   get error code
02EE 39               (      fallprc.asm):00026                  rts                Return with error
                      (      fallprc.asm):00027         
02EF 3404             (      fallprc.asm):00028         L02FE    pshs   b           save process #
02F1 CC0200           (      fallprc.asm):00029                  ldd    #P$Size     get size of descriptor
02F4 103F28           (      fallprc.asm):00030                  os9    F$SRqMem    request the memory for it
02F7 3502             (      fallprc.asm):00031                  puls   a           restore process #
02F9 2524             (      fallprc.asm):00032                  bcs    L032F       exit if error from mem call
02FB A7C4             (      fallprc.asm):00033                  sta    P$ID,u      save ID to descriptor
02FD 1F30             (      fallprc.asm):00034                  tfr    u,d
02FF A784             (      fallprc.asm):00035                  sta    ,x          save ID to process descriptor table
                      (      fallprc.asm):00036         * Clear out process descriptor through till stack
                      (      fallprc.asm):00037                IFNE   H6309
                      (      fallprc.asm):00038                  leay   <Null3,pc   Point to 0 byte
                      (      fallprc.asm):00039                  leax   P$PID,u     Point to start of part to clear
                      (      fallprc.asm):00040                  ldw    #$0100      256 bytes to clear
0301                  (      fallprc.asm):00041         Null3    equ   *-1
                      (      fallprc.asm):00042                  tfm    y,x+
                      (      fallprc.asm):00043                ELSE
                      (      fallprc.asm):00044         * LCB - 6809 optimization- ldd #$80 / ldx #$0000
0301 3141             (      fallprc.asm):00045                  leay   P$PID,u    5 Point to start of process descriptor
0303 C680             (      fallprc.asm):00046                  ldb    #$80       2 # of 2 byte sets to clear
0305 8E0000           (      fallprc.asm):00047                  ldx    #$0000     3 Value to clear with
0308 AFA1             (      fallprc.asm):00048         LChinese stx    ,y++       8 \                Clear 2 bytes
030A 5A               (      fallprc.asm):00049                  decb              2  > 1664 cycles   dec ctr
030B 26FB             (      fallprc.asm):00050                  bne    LChinese   3 /                Keep going until done
                      (      fallprc.asm):00051         
                      (      fallprc.asm):00052         * original code:
                      (      fallprc.asm):00053         *         clra               2
                      (      fallprc.asm):00054         *         clrb               2
                      (      fallprc.asm):00055         *         leax   P$PID,u     5
                      (      fallprc.asm):00056         *         ldy    #$80        4
                      (      fallprc.asm):00057         *LChinese std    ,x++        8 \
                      (      fallprc.asm):00058         *         leay   -1,y        5  > 2048 cycles
                      (      fallprc.asm):00059         *         bne   LChinese     3 /
                      (      fallprc.asm):00060                ENDC
                      (      fallprc.asm):00061         
                      (      fallprc.asm):00062         ***************************************************************************
                      (      fallprc.asm):00063         * OS-9 L2 Upgrade Enhancement: Stamp current date/time for start of process
                      (      fallprc.asm):00064         *         ldy    <D.Proc        get current process descriptor
                      (      fallprc.asm):00065         *         ldx    <D.SysProc    get system process descriptor
                      (      fallprc.asm):00066         *         stx    <D.Proc        make system process current
                      (      fallprc.asm):00067         *         leax   P$DatBeg,u    new proc desc creation date/time stamp
                      (      fallprc.asm):00068         *         os9    F$Time        ignore any error...
                      (      fallprc.asm):00069         *         sty    <D.Proc        restore current proc desc address
                      (      fallprc.asm):00070         ***************************************************************************
                      (      fallprc.asm):00071         
030D 8680             (      fallprc.asm):00072                  lda    #SysState   set process to system state
030F A74C             (      fallprc.asm):00073                  sta    P$State,u
                      (      fallprc.asm):00074         * Empty out DAT image
0311 C608             (      fallprc.asm):00075                  ldb    #DAT.BlCt   # of double byte writes
0313 8E333E           (      fallprc.asm):00076                  ldx    #DAT.Free   Empty block marker
0316 31C840           (      fallprc.asm):00077                  leay   P$DATImg,u
0319 AFA1             (      fallprc.asm):00078         L0329    stx    ,y++
031B 5A               (      fallprc.asm):00079                  decb               done?
031C 26FB             (      fallprc.asm):00080                  bne    L0329       no, keep going
031E 5F               (      fallprc.asm):00081                  clrb               clear carry
031F 39               (      fallprc.asm):00082         L032F    rts                return
                      (      fallprc.asm):00083         
                      (      fallprc.asm):00084         **************************************************
                      (      fallprc.asm):00085         * System Call: F$DelPrc
                      (      fallprc.asm):00086         * Function: Deallocate Process Descriptor
                      (      fallprc.asm):00087         * Input:  A = Process ID
                      (      fallprc.asm):00088         * Output: None
                      (      fallprc.asm):00089         * Error:  CC = C bit set; B = error code
                      (      fallprc.asm):00090         *
0320 A641             (      fallprc.asm):00091         FDelPrc  lda    R$A,u        get process #
0322 2052             (      fallprc.asm):00092                  bra    L0386        delete it
                      (      fallprc.asm):00093         
                      (      fallprc.asm):00094         
                      (      fallprc.asm):00095         **************************************************
                      (      fallprc.asm):00096         * System Call: F$Wait
                      (      fallprc.asm):00097         *
                      (      fallprc.asm):00098         * Function: Wait for child process to die
                      (      fallprc.asm):00099         *
                      (      fallprc.asm):00100         * Notes:
                      (      fallprc.asm):00101         * Checks all children to see if any died (done through linked
                      (      fallprc.asm):00102         * child process list through P$CID for 1st one & P$SID for rest)
                      (      fallprc.asm):00103         * Will stick process into Wait Queue until either Waiting process
                      (      fallprc.asm):00104         * receives signal or until child dies. Child dying does NOT send
                      (      fallprc.asm):00105         * signal to parent.
                      (      fallprc.asm):00106         *
                      (      fallprc.asm):00107         * Input:  None
                      (      fallprc.asm):00108         *
                      (      fallprc.asm):00109         * Output: A = Deceased child process' process ID
                      (      fallprc.asm):00110         *         B = Child process' exit status code
                      (      fallprc.asm):00111         *
                      (      fallprc.asm):00112         * Error:  CC = C bit set; B = error code
                      (      fallprc.asm):00113         *
0324 9E50             (      fallprc.asm):00114         FWait    ldx    <D.Proc     get current process
0326 A603             (      fallprc.asm):00115                  lda    P$CID,x     any children?
0328 272E             (      fallprc.asm):00116                  beq    L0368       no, exit with error
032A 1707F3           (      fallprc.asm):00117         L033A    lbsr   L0B2E       get pointer to child process dsc. into Y
                      (      fallprc.asm):00118                IFNE   H6309
                      (      fallprc.asm):00119                  tim    #Dead,P$State,y  Is child dead?
                      (      fallprc.asm):00120                ELSE
032D A62C             (      fallprc.asm):00121                  lda    P$State,y
032F 8501             (      fallprc.asm):00122                  bita   #Dead
                      (      fallprc.asm):00123                ENDC
0331 2629             (      fallprc.asm):00124                  bne    L036C       Yes, send message to parent
0333 A622             (      fallprc.asm):00125                  lda    P$SID,y     No, check for another child (thru sibling list)
0335 26F3             (      fallprc.asm):00126                  bne    L033A       Yes there is another child, go see if it is dead
                      (      fallprc.asm):00127         * NOTE: MAY WANT TO ADD IN CLRB, CHANGE TO STD R$A,u
0337 A741             (      fallprc.asm):00128                  sta    R$A,u       No child has died, clear out process # & status
0339 A742             (      fallprc.asm):00129                  sta    R$B,u         code in caller's A&B regs
033B 3401             (      fallprc.asm):00130                  pshs   cc          Preserve CC
033D 1A50             (      fallprc.asm):00131                  orcc   #IntMasks   Shut off interrupts
033F A68819           (      fallprc.asm):00132                  lda    <P$Signal,x Any signals pending?
0342 2709             (      fallprc.asm):00133                  beq    L035D       No, skip ahead
                      (      fallprc.asm):00134         * No Child died, but received signal
0344 4A               (      fallprc.asm):00135                  deca               Yes, is it a wakeup signal?
0345 2603             (      fallprc.asm):00136                  bne    L035A       no, wake it up with proper signal
0347 A78819           (      fallprc.asm):00137                  sta    <P$Signal,x Clear out signal code
034A 1603BE           (      fallprc.asm):00138         L035A    lbra   L071B       go wake it up (no signal will be sent)
                      (      fallprc.asm):00139         
                      (      fallprc.asm):00140         * No dead child & no signal...execute next F$Waiting process in line
034D DC54             (      fallprc.asm):00141         L035D    ldd    <D.WProcQ   get ptr to head of waiting process line
034F ED0D             (      fallprc.asm):00142                  std    P$Queue,x   save as next process in line from current one
0351 9F54             (      fallprc.asm):00143                  stx    <D.WProcQ   save curr. process as new head of waiting process line
0353 3501             (      fallprc.asm):00144                  puls   cc          restore interupts
0355 160418           (      fallprc.asm):00145                  lbra   L0780       go activate next process in line
                      (      fallprc.asm):00146         
0358 53               (      fallprc.asm):00147         L0368    comb               Exit with No Children error
0359 C6E2             (      fallprc.asm):00148                  ldb    #E$NoChld
035B 39               (      fallprc.asm):00149                  rts   
                      (      fallprc.asm):00150         
                      (      fallprc.asm):00151         * Child has died
                      (      fallprc.asm):00152         * Entry: Y=Ptr to child process that died
                      (      fallprc.asm):00153         *        U=Ptr to caller's register stack
035C A6A4             (      fallprc.asm):00154         L036C    lda   P$ID,y       Get process ID of dead child
035E E6A819           (      fallprc.asm):00155                  ldb   <P$Signal,y  Get signal code that child received (if any)
0361 ED41             (      fallprc.asm):00156                  std   R$D,u        Save in caller's D
0363 33A4             (      fallprc.asm):00157                  leau  ,y           Point U to child process dsc.
0365 3101             (      fallprc.asm):00158                  leay  P$CID-P$SID,x  Bump Y up by 1 for 1st loop so P$SID below
                      (      fallprc.asm):00159         *                             actually references P$CID
0367 2003             (      fallprc.asm):00160                  bra   L037C        skip ahead
                      (      fallprc.asm):00161         
                      (      fallprc.asm):00162         * Update linked list of sibling processes to exclude dead child
0369 1707B4           (      fallprc.asm):00163         L0379    lbsr  L0B2E        get pointer to process
036C A622             (      fallprc.asm):00164         L037C    lda   P$SID,y      Get Sibling ID (or Child ID on 1st run)
036E A1C4             (      fallprc.asm):00165                  cmpa  P$ID,u       Same as Dying process ID?
0370 26F7             (      fallprc.asm):00166                  bne   L0379        No, go get ptr to Sibling process & do again
0372 E642             (      fallprc.asm):00167                  ldb   P$SID,u      Yes, wrapped to our own, get Sibling ID from child
0374 E722             (      fallprc.asm):00168                  stb   P$SID,y      Save as sibling process id # in other sibling
0376 3456             (      fallprc.asm):00169         L0386    pshs  d,x,u        preserve regs
0378 B11015           (      fallprc.asm):00170                  cmpa  WGlobal+G.AlPID     Does dying process have an alarm set up?
037B 2605             (      fallprc.asm):00171                  bne   L0393        no, go on
                      (      fallprc.asm):00172                IFNE  H6309
                      (      fallprc.asm):00173                  clrd               Faster than 2 memory clears
                      (      fallprc.asm):00174                ELSE
037D 4F               (      fallprc.asm):00175                  clra
037E 5F               (      fallprc.asm):00176                  clrb
                      (      fallprc.asm):00177                ENDC
037F FD1015           (      fallprc.asm):00178                  std   WGlobal+G.AlPID    clear alarm ID & signal
0382 E6E4             (      fallprc.asm):00179         L0393    ldb   ,s           get dying process # back
0384 9E48             (      fallprc.asm):00180                  ldx   <D.PrcDBT    get ptr to process descriptor block table
0386 3A               (      fallprc.asm):00181                  abx                offset into table
0387 A684             (      fallprc.asm):00182                  lda   ,x           Get MSB of process dsc. ptr
0389 2710             (      fallprc.asm):00183                  beq   L03AC        If gone already, exit
038B 5F               (      fallprc.asm):00184                  clrb
038C E784             (      fallprc.asm):00185                  stb   ,x           Clear out entry in block table
038E 1F01             (      fallprc.asm):00186                  tfr   d,x          Move process dsc. ptr to X
0390 103F40           (      fallprc.asm):00187                  os9   F$DelTsk     Remove task # for this process
0393 3384             (      fallprc.asm):00188                  leau  ,x           Point U to start of Dead process dsc.
0395 CC0200           (      fallprc.asm):00189                  ldd   #P$Size      Size of a process dsc.
0398 103F29           (      fallprc.asm):00190                  os9   F$SRtMem     Deallocate process dsc. from system memory pool
039B 35D6             (      fallprc.asm):00191         L03AC    puls  d,x,u,pc     Restore regs & return
                      (  krnp2_beta5.asm):00372         
                      (  krnp2_beta5.asm):00373                  use    fchain.asm
                      (       fchain.asm):00001         **************************************************
                      (       fchain.asm):00002         * System Call: F$Chain
                      (       fchain.asm):00003         *
                      (       fchain.asm):00004         * Function: Starts a new child process and terminates the calling process.
                      (       fchain.asm):00005         *
                      (       fchain.asm):00006         * Input:  X = Address of module or filename
                      (       fchain.asm):00007         *         Y = Parameter area size (256 byte pages)
                      (       fchain.asm):00008         *         U = Address of parameter area
                      (       fchain.asm):00009         *         A = Language/Type code
                      (       fchain.asm):00010         *         B = Optional data area size (256 byte pages)
                      (       fchain.asm):00011         *
                      (       fchain.asm):00012         * Output: None
                      (       fchain.asm):00013         *
                      (       fchain.asm):00014         * Error:  CC = C bit set; B = error code
                      (       fchain.asm):00015         *
039D 3440             (       fchain.asm):00016         FChain   pshs  u            preserve register stack pointer
039F 17FF3A           (       fchain.asm):00017                  lbsr  AllPrc       allocate a new process descriptor
03A2 2402             (       fchain.asm):00018                  bcc   L03B7        do the chain if no error
03A4 35C0             (       fchain.asm):00019                  puls  u,pc         return to caller with error
                      (       fchain.asm):00020         
                      (       fchain.asm):00021         * Copy Process Descriptor Data
03A6 9E50             (       fchain.asm):00022         L03B7    ldx   <D.Proc      get pointer to current process
03A8 3450             (       fchain.asm):00023                  pshs  x,u          save old & new descriptor pointers
                      (       fchain.asm):00024                IFNE  H6309
                      (       fchain.asm):00025                  leax  P$SP,x       point to source
                      (       fchain.asm):00026                  leau  P$SP,u       point to destination
                      (       fchain.asm):00027                  ldw   #$00fc       get size (P$SP+$FC)
                      (       fchain.asm):00028                  tfm   x+,u+        move it
                      (       fchain.asm):00029                ELSE
                      (       fchain.asm):00030         * LCB Proposed new 6809 code approx 750 cycles faster
                      (       fchain.asm):00031         * Appears to work (boot calls F$Chain twice).
03AA 3144             (       fchain.asm):00032                  leay  P$SP,u       Point to destination
03AC 3304             (       fchain.asm):00033                  leau  P$SP,x       Point to source
03AE C654             (       fchain.asm):00034                  ldb   #84          # of 3 byte sets to copy
03B0 3712             (       fchain.asm):00035         L03C3    pulu  a,x          Get 3 bytes
03B2 A7A0             (       fchain.asm):00036                  sta   ,y+          copy them
03B4 AFA1             (       fchain.asm):00037                  stx   ,y++
03B6 5A               (       fchain.asm):00038                  decb               Dec 3 byte ctr
03B7 26F7             (       fchain.asm):00039                  bne   L03C3
                      (       fchain.asm):00040                ENDC
03B9 EE62             (       fchain.asm):00041         L03CB    ldu   2,s          get new descriptor pointer
03BB 33C840           (       fchain.asm):00042                  leau  <P$DATImg,u
03BE AEE4             (       fchain.asm):00043                  ldx   ,s           get old descriptor pointer
03C0 A606             (       fchain.asm):00044                  lda   P$Task,x     get task #
03C2 48               (       fchain.asm):00045                  lsla               2 bytes per entry
03C3 9EA1             (       fchain.asm):00046                  ldx   <D.TskIPt    get task image table pointer
03C5 EF86             (       fchain.asm):00047                  stu   a,x          save updated DAT image pointer for later
                      (       fchain.asm):00048         * Question: are the previous 7 lines necessary? The F$AllTsk call, below
                      (       fchain.asm):00049         * should take care of everything!
03C7 9E50             (       fchain.asm):00050                  ldx   <D.Proc      get process descriptor
                      (       fchain.asm):00051                IFNE  H6309
                      (       fchain.asm):00052                  clrd               Faster than 2 memory clears
                      (       fchain.asm):00053                ELSE
03C9 4F               (       fchain.asm):00054                  clra
03CA 5F               (       fchain.asm):00055                  clrb
                      (       fchain.asm):00056                ENDC
03CB E706             (       fchain.asm):00057                  stb   P$Task,x     old process has no task number
03CD ED8813           (       fchain.asm):00058                  std   <P$SWI,x     clear out all sorts of signals and vectors
03D0 ED8815           (       fchain.asm):00059                  std   <P$SWI2,x
03D3 ED8817           (       fchain.asm):00060                  std   <P$SWI3,x
03D6 A78819           (       fchain.asm):00061                  sta   <P$Signal,x
03D9 ED881A           (       fchain.asm):00062                  std   <P$SigVec,x
03DC EE8811           (       fchain.asm):00063                  ldu   <P$PModul,x
03DF 103F02           (       fchain.asm):00064                  os9   F$UnLink     unlink from the primary module
03E2 E607             (       fchain.asm):00065                  ldb   P$PagCnt,x   grab the page count
03E4 CB1F             (       fchain.asm):00066                  addb  #$1F         round up to the nearest block
03E6 54               (       fchain.asm):00067                  lsrb
03E7 54               (       fchain.asm):00068                  lsrb
03E8 54               (       fchain.asm):00069                  lsrb
03E9 54               (       fchain.asm):00070                  lsrb
03EA 54               (       fchain.asm):00071                  lsrb               get number of blocks used
03EB 8608             (       fchain.asm):00072                  lda   #$08         
                      (       fchain.asm):00073                IFNE  H6309
                      (       fchain.asm):00074                  subr  b,a          A=number of blocks unused
                      (       fchain.asm):00075                ELSE
03ED 3404             (       fchain.asm):00076                  pshs  b
03EF A0E0             (       fchain.asm):00077                  suba  ,s+
                      (       fchain.asm):00078                ENDC
03F1 318840           (       fchain.asm):00079                  leay  <P$DATImg,x  set up the initial DAT image
03F4 58               (       fchain.asm):00080                  lslb
03F5 31A5             (       fchain.asm):00081                  leay  b,y          go to the offset
03F7 CE333E           (       fchain.asm):00082                  ldu   #DAT.Free    mark the blocks as free
03FA EFA1             (       fchain.asm):00083         L040C    stu   ,y++         do all of them
03FC 4A               (       fchain.asm):00084                  deca
03FD 26FB             (       fchain.asm):00085                  bne   L040C
03FF EE62             (       fchain.asm):00086                  ldu   2,s          get new process descriptor pointer
0401 DF50             (       fchain.asm):00087                  stu   <D.Proc      make it the new process
0403 EE64             (       fchain.asm):00088                  ldu   4,s
0405 170097           (       fchain.asm):00089                  lbsr  L04B1        link to new module & setup register stack
                      (       fchain.asm):00090                IFNE  H6309
                      (       fchain.asm):00091                  bcs   L04A1
                      (       fchain.asm):00092                ELSE
0408 10250083         (       fchain.asm):00093                  lbcs  L04A1
                      (       fchain.asm):00094                ENDC
040C 3406             (       fchain.asm):00095                  pshs  d            somehow D = memory size? Or parameter size?
040E 103F3F           (       fchain.asm):00096                  os9   F$AllTsk     allocate a new task number
                      (       fchain.asm):00097         * ignore errors here
                      (       fchain.asm):00098         * Hmmm.. the code above FORCES the new process to have the same DAT image ptr
                      (       fchain.asm):00099         * as the old process, not that it matters...
0411 DE50             (       fchain.asm):00100         NextLine ldu   <D.Proc      get ptr to process desc
0413 A646             (       fchain.asm):00101                  lda   P$Task,u     new task number
0415 E606             (       fchain.asm):00102                  ldb   P$Task,x     old task number
0417 338901F4         (       fchain.asm):00103                  leau  >(P$Stack-R$Size),x  set up the stack for the new process
041B 30A4             (       fchain.asm):00104                  leax  ,y
041D EE44             (       fchain.asm):00105                  ldu   R$X,u        where to copy from
                      (       fchain.asm):00106                IFNE  H6309
                      (       fchain.asm):00107                  cmpr  x,u          check From/To addresses
                      (       fchain.asm):00108                ELSE
041F 3410             (       fchain.asm):00109                  pshs  x        src ptr
0421 11A3E1           (       fchain.asm):00110                  cmpu  ,s++        dest ptr
                      (       fchain.asm):00111                ENDC
0424 3520             (       fchain.asm):00112                  puls  y        size
0426 2237             (       fchain.asm):00113                  bhi   L0471        To < From: do F$Move
0428 2738             (       fchain.asm):00114                  beq   L0474        To == From, skip F$Move
                      (       fchain.asm):00115         * To > From: do special copy
042A 31A4             (       fchain.asm):00116                  leay  ,y           any bytes to move?
042C 2734             (       fchain.asm):00117                  beq   L0474        no, skip ahead
                      (       fchain.asm):00118                IFNE  H6309
                      (       fchain.asm):00119                  pshs  x            save address
                      (       fchain.asm):00120                  addr  y,x          add size to FROM address
                      (       fchain.asm):00121                  cmpr  x,u          is it
                      (       fchain.asm):00122                  puls  x
                      (       fchain.asm):00123                ELSE
042E 3416             (       fchain.asm):00124                  pshs  d,x
0430 1F20             (       fchain.asm):00125                  tfr   y,d
0432 308B             (       fchain.asm):00126                  leax  d,x
0434 3410             (       fchain.asm):00127                  pshs  x
0436 11A3E1           (       fchain.asm):00128                  cmpu  ,s++
0439 3516             (       fchain.asm):00129                  puls  d,x
                      (       fchain.asm):00130                ENDC
043B 2322             (       fchain.asm):00131                  bls   L0471        end of FROM <= start of TO: do F$Move
                      (       fchain.asm):00132         * The areas to copy overlap: do special move routine
043D 3476             (       fchain.asm):00133                  pshs  d,x,y,u      save regs
                      (       fchain.asm):00134                IFNE  H6309
                      (       fchain.asm):00135                  addr  y,x         go to the END of the area to copy FROM
                      (       fchain.asm):00136                  addr  y,u         end of area to copy TO
                      (       fchain.asm):00137                ELSE
043F 1F20             (       fchain.asm):00138                  tfr   y,d
0441 308B             (       fchain.asm):00139                  leax  d,x
0443 33CB             (       fchain.asm):00140                  leau  d,u
                      (       fchain.asm):00141                ENDC
                      (       fchain.asm):00142         * This all appears to be doing a copy where destination <= source,
                      (       fchain.asm):00143         * in the same address space.
0445 E6E4             (       fchain.asm):00144         L0457    ldb   ,s           grab ??
0447 301F             (       fchain.asm):00145                  leax  -1,x         back up one
0449 103F49           (       fchain.asm):00146                  os9   F$LDABX
044C 1E13             (       fchain.asm):00147                  exg   x,u
044E E661             (       fchain.asm):00148                  ldb   1,s
0450 301F             (       fchain.asm):00149                  leax  -1,x         back up another one
0452 103F4A           (       fchain.asm):00150                  os9   F$STABX
0455 1E13             (       fchain.asm):00151                  exg   x,u
0457 313F             (       fchain.asm):00152                  leay  -1,y
0459 26EA             (       fchain.asm):00153                  bne   L0457
045B 3576             (       fchain.asm):00154                  puls  d,x,y,u      restore regs
045D 2003             (       fchain.asm):00155                  bra   L0474        skip over F$Move
                      (       fchain.asm):00156         
045F 103F38           (       fchain.asm):00157         L0471    os9   F$Move       move data over?
0462 96D0             (       fchain.asm):00158         L0474    lda   <D.SysTsk    get system task number
0464 AEE4             (       fchain.asm):00159                  ldx   ,s           old process dsc ptr
0466 EE04             (       fchain.asm):00160                  ldu   P$SP,x
0468 308901F4         (       fchain.asm):00161                  leax  >(P$Stack-R$Size),x
046C 108E000C         (       fchain.asm):00162                  ldy   #R$Size
0470 103F38           (       fchain.asm):00163                  os9   F$Move       move the stack over
0473 3550             (       fchain.asm):00164                  puls  u,x          restore new, old process dsc's
0475 A6C4             (       fchain.asm):00165                  lda   P$ID,u
0477 17FEFC           (       fchain.asm):00166                  lbsr  L0386        check alarms
047A 103F40           (       fchain.asm):00167                  os9   F$DelTsk     delete the old task
047D 1A50             (       fchain.asm):00168                  orcc  #IntMasks    Shut off IRQ's
047F DC4A             (       fchain.asm):00169                  ldd   <D.SysPrc    Get ptr to system process dsc
0481 DD50             (       fchain.asm):00170                  std   <D.Proc      Make current process
                      (       fchain.asm):00171                IFNE   H6309
                      (       fchain.asm):00172                  aim   #^SysState,P$State,x
                      (       fchain.asm):00173                ELSE
0483 A60C             (       fchain.asm):00174                  lda   P$State,x
0485 847F             (       fchain.asm):00175                  anda  #^SysState
0487 A70C             (       fchain.asm):00176                  sta   P$State,x
                      (       fchain.asm):00177                ENDC
0489 103F2C           (       fchain.asm):00178                  os9   F$AProc      activate the process
048C 103F2D           (       fchain.asm):00179                  os9   F$NProc      go to it
                      (       fchain.asm):00180         * comes here on error with link to new module
048F 3550             (       fchain.asm):00181         L04A1    puls  u,x
0491 9F50             (       fchain.asm):00182                  stx   <D.Proc
0493 3404             (       fchain.asm):00183                  pshs  b
0495 A6C4             (       fchain.asm):00184                  lda   ,u
0497 17FEDC           (       fchain.asm):00185                  lbsr  L0386        kill signals
049A 3504             (       fchain.asm):00186                  puls  b
049C 103F06           (       fchain.asm):00187                  os9   F$Exit       exit from the process with error condition
                      (       fchain.asm):00188         
                      (       fchain.asm):00189         * Setup new process DAT image with module
049F 3476             (       fchain.asm):00190         L04B1    pshs   d,x,y,u     preserve everything
04A1 DC50             (       fchain.asm):00191                  ldd    <D.Proc     get pointer to current process
04A3 3406             (       fchain.asm):00192                  pshs   d           save it
04A5 9F50             (       fchain.asm):00193                  stx    <D.Proc     save pointer to new process
04A7 A641             (       fchain.asm):00194                  lda    R$A,u       get module type
04A9 AE44             (       fchain.asm):00195                  ldx    R$X,u       get pointer to module name
04AB 10AEE4           (       fchain.asm):00196                  ldy    ,s          get pointer to current process
04AE 31A840           (       fchain.asm):00197                  leay   P$DATImg,y  point to DAT image
04B1 103F34           (       fchain.asm):00198                  os9    F$SLink     map it into new process DAT image
04B4 240F             (       fchain.asm):00199                  bcc    L04D7       no error, keep going
04B6 ECE4             (       fchain.asm):00200                  ldd    ,s          restore to current process
04B8 DD50             (       fchain.asm):00201                  std    <D.Proc
04BA EE64             (       fchain.asm):00202                  ldu    4,s         get pointer to new process
04BC 103F01           (       fchain.asm):00203                  os9    F$Load      try & load it
04BF 2404             (       fchain.asm):00204                  bcc    L04D7       no error, keep going
04C1 3264             (       fchain.asm):00205                  leas   4,s         purge stack
04C3 35F0             (       fchain.asm):00206                  puls   x,y,u,pc    restore & return
                      (       fchain.asm):00207         * 
04C5 EF62             (       fchain.asm):00208         L04D7    stu    2,s         save pointer to module
04C7 3422             (       fchain.asm):00209                  pshs   a,y         save module type & entry point
04C9 EE6B             (       fchain.asm):00210                  ldu    $0B,s       restore register stack pointer
04CB AF44             (       fchain.asm):00211                  stx    R$X,u       save updated name pointer
04CD AE67             (       fchain.asm):00212                  ldx    $07,s       restore process pointer
04CF 9F50             (       fchain.asm):00213                  stx    <D.Proc     make it current
04D1 EC65             (       fchain.asm):00214                  ldd    5,s         get pointer to new module
04D3 ED8811           (       fchain.asm):00215                  std    P$PModul,x  save it into process descriptor
04D6 3502             (       fchain.asm):00216                  puls   a           restore module type
04D8 8111             (       fchain.asm):00217                  cmpa   #Prgrm+Objct regular module?
04DA 270D             (       fchain.asm):00218                  beq    L04FB       yes, go
04DC 81C1             (       fchain.asm):00219                  cmpa   #Systm+Objct system module?
04DE 2709             (       fchain.asm):00220                  beq    L04FB
                      (       fchain.asm):00221                IFNE   H6309
                      (       fchain.asm):00222         *--- these lines added to allow 6309 native mode modules to be executed
                      (       fchain.asm):00223                  cmpa   #Prgrm+Obj6309 regular module?
                      (       fchain.asm):00224                  beq    L04FB       yes, go
                      (       fchain.asm):00225                  cmpa   #Systm+Obj6309 system module?
                      (       fchain.asm):00226                  beq    L04FB
                      (       fchain.asm):00227         *---
                      (       fchain.asm):00228                ENDC
04E0 C6EA             (       fchain.asm):00229                  ldb    #E$NEMod    return unknown module
04E2 3262             (       fchain.asm):00230         L04F4    leas   2,s         purge stack
04E4 E763             (       fchain.asm):00231                  stb    3,s         save error
04E6 53               (       fchain.asm):00232                  comb               set carry
04E7 2043             (       fchain.asm):00233                  bra    L053E       return
                      (       fchain.asm):00234         
                      (       fchain.asm):00235         * Setup up data memory
04E9 CC000B           (       fchain.asm):00236         L04FB    ldd    #M$Mem      get offset to module memory size
04EC 318840           (       fchain.asm):00237                  leay   P$DATImg,x  get pointer to DAT image
04EF AE8811           (       fchain.asm):00238                  ldx    P$PModul,x  get pointer to module header
04F2 103F48           (       fchain.asm):00239                  os9    F$LDDDXY    get module memory size
04F5 A142             (       fchain.asm):00240                  cmpa   R$B,u       bigger or smaller than callers request?
04F7 2403             (       fchain.asm):00241                  bcc    L050E       bigger, use it instead
04F9 A642             (       fchain.asm):00242                  lda    R$B,u       get callers memory size instead
04FB 5F               (       fchain.asm):00243                  clrb               clear LSB of mem size
04FC 103F07           (       fchain.asm):00244         L050E    os9    F$Mem       try & get the data memory
04FF 25E1             (       fchain.asm):00245                  bcs    L04F4       can't do it, exit with error
0501 AE66             (       fchain.asm):00246                  ldx    6,s         restore process pointer
0503 318901F4         (       fchain.asm):00247                  leay   (P$Stack-R$Size),x point to new register stack
0507 3406             (       fchain.asm):00248                  pshs   d           preserve memory size
0509 A346             (       fchain.asm):00249                  subd   R$Y,u       take off size of paramater area
050B ED24             (       fchain.asm):00250                  std    R$X,y       save pointer to parameter area
050D 83000C           (       fchain.asm):00251                  subd   #R$Size     take off size of register stack
0510 ED04             (       fchain.asm):00252                  std    P$SP,x      save new SP
0512 EC46             (       fchain.asm):00253                  ldd    R$Y,u       get parameter count
0514 ED21             (       fchain.asm):00254                  std    R$A,y       save it to new process
0516 ED66             (       fchain.asm):00255                  std    6,s         save it for myself to
0518 3516             (       fchain.asm):00256                  puls   d,x         restore top of mem & program entry point
051A ED26             (       fchain.asm):00257                  std    R$Y,y       set top of mem pointer
051C EC48             (       fchain.asm):00258                  ldd    R$U,u       get pointer to parameters
051E ED66             (       fchain.asm):00259                  std    6,s
0520 8680             (       fchain.asm):00260                  lda    #Entire
0522 A7A4             (       fchain.asm):00261                  sta    R$CC,y      save condition code
0524 4F               (       fchain.asm):00262                  clra
0525 A723             (       fchain.asm):00263                  sta    R$DP,y      save direct page
0527 5F               (       fchain.asm):00264                  clrb
0528 ED28             (       fchain.asm):00265                  std    R$U,y       save data area start
052A AF2A             (       fchain.asm):00266                  stx    R$PC,y      save program entry point
052C 3506             (       fchain.asm):00267         L053E    puls   d           restore process pointer
052E DD50             (       fchain.asm):00268                  std    <D.Proc     save it as current
0530 35F6             (       fchain.asm):00269                  puls   d,x,y,u,pc
                      (       fchain.asm):00270         
                      (  krnp2_beta5.asm):00374         
                      (  krnp2_beta5.asm):00375                  use    fexit.asm
                      (        fexit.asm):00001         **************************************************
                      (        fexit.asm):00002         * System Call: F$Exit
                      (        fexit.asm):00003         *
                      (        fexit.asm):00004         * Function: Causes a process to cease execution and exit
                      (        fexit.asm):00005         *
                      (        fexit.asm):00006         * Input:  B = Status code to be returned to parent process
                      (        fexit.asm):00007         *
                      (        fexit.asm):00008         * Output: None
                      (        fexit.asm):00009         *
                      (        fexit.asm):00010         * Error:  CC = C bit set; B = error code
                      (        fexit.asm):00011         *
0532 9E50             (        fexit.asm):00012         FExit    ldx   <D.Proc      get current process pointer
0534 8D5D             (        fexit.asm):00013                  bsr   L05A5        close all the paths
0536 E642             (        fexit.asm):00014                  ldb   R$B,u        get exit signal
0538 E78819           (        fexit.asm):00015                  stb   <P$Signal,x  and save in proc desc
053B 3101             (        fexit.asm):00016                  leay  P$PID,x
053D 2012             (        fexit.asm):00017                  bra   L0563        go find kids...
                      (        fexit.asm):00018         
053F 6F22             (        fexit.asm):00019         L0551    clr   P$SID,y      clear child ID
0541 1705DC           (        fexit.asm):00020                  lbsr  L0B2E        find its proc desc
0544 6F21             (        fexit.asm):00021                  clr   1,y          clear sibling ID
                      (        fexit.asm):00022                IFNE  H6309
                      (        fexit.asm):00023                  tim   #Dead,P$State,y
                      (        fexit.asm):00024                ELSE
0546 A62C             (        fexit.asm):00025                  lda   P$State,y    get child's state
0548 8501             (        fexit.asm):00026                  bita  #Dead        is it dead?
                      (        fexit.asm):00027                ENDC
054A 2705             (        fexit.asm):00028                  beq   L0563        ...no
054C A6A4             (        fexit.asm):00029                  lda   P$ID,y       else get its ID
054E 17FE25           (        fexit.asm):00030                  lbsr  L0386        and destroy its proc desc
0551 A622             (        fexit.asm):00031         L0563    lda   P$SID,y      get child ID
0553 26EA             (        fexit.asm):00032                  bne   L0551        ...yes, loop
0555 3184             (        fexit.asm):00033                  leay  ,x           kid's proc desc
0557 8E0047           (        fexit.asm):00034                  ldx   #D.WProcQ-P$Queue
055A 10DECC           (        fexit.asm):00035                  lds   <D.SysStk    use system stack
055D 3401             (        fexit.asm):00036                  pshs  cc           save CC
055F 1A50             (        fexit.asm):00037                  orcc  #IntMasks    halt interrupts
0561 A621             (        fexit.asm):00038                  lda   P$PID,y      get our parent ID
0563 260D             (        fexit.asm):00039                  bne   L0584        and wake him up
0565 3501             (        fexit.asm):00040                  puls  cc           restore CC
0567 A6A4             (        fexit.asm):00041                  lda   P$ID,y       get our ID
0569 17FE0A           (        fexit.asm):00042                  lbsr  L0386        give up our proc desc
056C 2022             (        fexit.asm):00043                  bra   L05A2        and start next active process
                      (        fexit.asm):00044         
                      (        fexit.asm):00045         * Search for Waiting Parent
056E A184             (        fexit.asm):00046         L0580    cmpa  P$ID,x       is proc desc our parent's?
0570 270E             (        fexit.asm):00047                  beq   L0592        ...yes!
0572 3384             (        fexit.asm):00048         L0584    leau  ,x           U is base desc
0574 AE0D             (        fexit.asm):00049                  ldx   P$Queue,x    X is next waiter
0576 26F6             (        fexit.asm):00050                  bne   L0580        see if parent
0578 3501             (        fexit.asm):00051                  puls  cc           restore CC
057A 8681             (        fexit.asm):00052                  lda   #(SysState!Dead) set us to system state
057C A72C             (        fexit.asm):00053                  sta   P$State,y    and mark us as dead
057E 2010             (        fexit.asm):00054                  bra   L05A2        so F$Wait will find us; next proc
                      (        fexit.asm):00055         
                      (        fexit.asm):00056         * Found Parent (X)
0580 EC0D             (        fexit.asm):00057         L0592    ldd   P$Queue,x    take parent out of wait queue
0582 ED4D             (        fexit.asm):00058                  std   P$Queue,u
0584 3501             (        fexit.asm):00059                  puls  cc           restore CC
0586 EE04             (        fexit.asm):00060                  ldu   P$SP,x       get parent's stack register
0588 EE48             (        fexit.asm):00061                  ldu   R$U,u
058A 17FDCF           (        fexit.asm):00062                  lbsr  L036C        get child's death signal to parent
058D 103F2C           (        fexit.asm):00063                  os9   F$AProc      move parent to active queue
0590 103F2D           (        fexit.asm):00064         L05A2    os9   F$NProc      start next proc in active queue
                      (        fexit.asm):00065         
                      (        fexit.asm):00066         * Close Proc I/O Paths & Unlink Mem
                      (        fexit.asm):00067         * Entry: U=Register stack pointer
0593 3440             (        fexit.asm):00068         L05A5    pshs  u            preserve register stack pointer
0595 C610             (        fexit.asm):00069                  ldb   #NumPaths    get maximum # of paths
0597 318830           (        fexit.asm):00070                  leay  P$Path,x     point to path table
059A A6A0             (        fexit.asm):00071         L05AC    lda   ,y+          path open?
059C 2709             (        fexit.asm):00072                  beq   L05B9        no, skip ahead
059E 6F3F             (        fexit.asm):00073                  clr   -1,y         clear the path block #
05A0 3404             (        fexit.asm):00074                  pshs  b            preserve count
05A2 103F8F           (        fexit.asm):00075                  os9   I$Close      close the path
05A5 3504             (        fexit.asm):00076                  puls  b            restore count
05A7 5A               (        fexit.asm):00077         L05B9    decb               done?
05A8 26F0             (        fexit.asm):00078                  bne   L05AC        no, continue looking
                      (        fexit.asm):00079         * Clean up memory process had
05AA 4F               (        fexit.asm):00080                  clra               get starting block
05AB E607             (        fexit.asm):00081                  ldb   P$PagCnt,x   get page count
05AD 270A             (        fexit.asm):00082                  beq   L05CB        none there, skip ahead
05AF CB1F             (        fexit.asm):00083                  addb  #$1F         round it up
05B1 54               (        fexit.asm):00084                  lsrb               divide by 32 to get block count
05B2 54               (        fexit.asm):00085                  lsrb
05B3 54               (        fexit.asm):00086                  lsrb
05B4 54               (        fexit.asm):00087                  lsrb
05B5 54               (        fexit.asm):00088                  lsrb
05B6 103F3B           (        fexit.asm):00089                  os9   F$DelImg     delete the ram & DAT image
                      (        fexit.asm):00090         * Unlink the module
05B9 DC50             (        fexit.asm):00091         L05CB    ldd   <D.Proc
05BB 3406             (        fexit.asm):00092                  pshs  d
05BD 9F50             (        fexit.asm):00093                  stx   <D.Proc      set bad proc
05BF EE8811           (        fexit.asm):00094                  ldu   P$PModul,x   program pointer
05C2 103F02           (        fexit.asm):00095                  os9   F$UnLink     unlink aborted program
05C5 3546             (        fexit.asm):00096                  puls  u,d
05C7 DD50             (        fexit.asm):00097                  std   <D.Proc      reset parent proc
05C9 103F40           (        fexit.asm):00098                  os9   F$DelTsk     release X's task #
05CC 39               (        fexit.asm):00099                  rts
                      (  krnp2_beta5.asm):00376         
                      (  krnp2_beta5.asm):00377                  use    fmem.asm
                      (         fmem.asm):00001         **************************************************
                      (         fmem.asm):00002         * System Call: F$Mem
                      (         fmem.asm):00003         *
                      (         fmem.asm):00004         * Function: Resize data memory area
                      (         fmem.asm):00005         *
                      (         fmem.asm):00006         * Input:  D = Desired memory area (in bytes)
                      (         fmem.asm):00007         *
                      (         fmem.asm):00008         * Output: Y = Address of new memory area upper bound
                      (         fmem.asm):00009         *         D = New memory area size in bytes
                      (         fmem.asm):00010         *
                      (         fmem.asm):00011         * Error:  CC = C bit set; B = error code
                      (         fmem.asm):00012         *
05CD 9E50             (         fmem.asm):00013         FMem     ldx   <D.Proc      get current process pointer
05CF EC41             (         fmem.asm):00014                  ldd   R$D,u        get requested memory size
05D1 2752             (         fmem.asm):00015                  beq   L0638        he wants current size, return it
05D3 C300FF           (         fmem.asm):00016                  addd  #$00FF       round up to nearest page
05D6 2403             (         fmem.asm):00017                  bcc   L05EE        no overflow, skip ahead
05D8 C6CF             (         fmem.asm):00018                  ldb   #E$MemFul    get mem full error
05DA 39               (         fmem.asm):00019                  rts                return
                      (         fmem.asm):00020         
05DB A107             (         fmem.asm):00021         L05EE    cmpa  P$PagCnt,x   match current page count?
05DD 2746             (         fmem.asm):00022                  beq   L0638        yes, return it
05DF 3402             (         fmem.asm):00023                  pshs  a            save page count
05E1 240C             (         fmem.asm):00024                  bhs   L0602        he's requesting more, skip ahead
05E3 4A               (         fmem.asm):00025                  deca               subtract a page
05E4 C6F4             (         fmem.asm):00026                  ldb   #($100-R$Size) get size of default stack - R$Size
05E6 10A304           (         fmem.asm):00027                  cmpd  P$SP,x       shrinking it into stack?
05E9 2404             (         fmem.asm):00028                  bhs   L0602        no, skip ahead
05EB C6DF             (         fmem.asm):00029                  ldb   #E$DelSP     get error code (223)
05ED 2025             (         fmem.asm):00030                  bra   L0627        return error
                      (         fmem.asm):00031         
05EF A607             (         fmem.asm):00032         L0602    lda   P$PagCnt,x   get page count
05F1 8B1F             (         fmem.asm):00033                  adda  #$1F         round it up
05F3 44               (         fmem.asm):00034                  lsra               divide by 32 to get block count
05F4 44               (         fmem.asm):00035                  lsra
05F5 44               (         fmem.asm):00036                  lsra
05F6 44               (         fmem.asm):00037                  lsra
05F7 44               (         fmem.asm):00038                  lsra
05F8 E6E4             (         fmem.asm):00039                  ldb   ,s
05FA CB1F             (         fmem.asm):00040                  addb  #$1F
05FC 2404             (         fmem.asm):00041                  bcc   L0615        still have room, skip ahead
05FE C6CF             (         fmem.asm):00042                  ldb   #E$MemFul
0600 2012             (         fmem.asm):00043                  bra   L0627
                      (         fmem.asm):00044         
0602 54               (         fmem.asm):00045         L0615    lsrb               divide by 32 to get block count
0603 54               (         fmem.asm):00046                  lsrb
0604 54               (         fmem.asm):00047                  lsrb
0605 54               (         fmem.asm):00048                  lsrb
0606 54               (         fmem.asm):00049                  lsrb
                      (         fmem.asm):00050                IFNE  H6309
                      (         fmem.asm):00051                  subr  a,b          same count?
                      (         fmem.asm):00052                ELSE
0607 3402             (         fmem.asm):00053                  pshs  a
0609 E0E0             (         fmem.asm):00054                  subb  ,s+
                      (         fmem.asm):00055                ENDC
060B 2714             (         fmem.asm):00056                  beq   L0634        yes, save it
060D 250A             (         fmem.asm):00057                  bcs   L062C        overflow, delete the ram we just got
060F 103F3A           (         fmem.asm):00058                  os9   F$AllImg     allocate the image in DAT
0612 240D             (         fmem.asm):00059                  bcc   L0634        no error, skip ahead
0614 3261             (         fmem.asm):00060         L0627    leas  1,s          purge stack
0616 1A01             (         fmem.asm):00061         L0629    orcc  #Carry       set carry for error
0618 39               (         fmem.asm):00062                  rts                return
                      (         fmem.asm):00063         
     0619             (         fmem.asm):00064         L062C    equ   *
                      (         fmem.asm):00065                IFNE  H6309
                      (         fmem.asm):00066                  addr  b,a
                      (         fmem.asm):00067                ELSE
0619 3404             (         fmem.asm):00068                  pshs  b
061B ABE0             (         fmem.asm):00069                  adda  ,s+
                      (         fmem.asm):00070                ENDC
061D 50               (         fmem.asm):00071                  negb  
061E 103F3B           (         fmem.asm):00072                  os9   F$DelImg 
0621 3502             (         fmem.asm):00073         L0634    puls  a            restore requested page count
0623 A707             (         fmem.asm):00074                  sta   P$PagCnt,x   save it into process descriptor
0625 A607             (         fmem.asm):00075         L0638    lda   P$PagCnt,x   get page count
0627 5F               (         fmem.asm):00076                  clrb               clear LSB
0628 ED41             (         fmem.asm):00077                  std   R$D,u        save mem byte count to caller
062A ED46             (         fmem.asm):00078                  std   R$Y,u        save memory upper limit to caller
062C 39               (         fmem.asm):00079                  rts                return
                      (  krnp2_beta5.asm):00378         
                      (  krnp2_beta5.asm):00379                  use    fsend.asm
                      (        fsend.asm):00001         **************************************************
                      (        fsend.asm):00002         * System Call: F$Send
                      (        fsend.asm):00003         *
                      (        fsend.asm):00004         * Function: Send a signal to a process
                      (        fsend.asm):00005         *
                      (        fsend.asm):00006         * Input:  A = Receiver's process ID
                      (        fsend.asm):00007         *         B = Signal code
                      (        fsend.asm):00008         *
                      (        fsend.asm):00009         * Output: None
                      (        fsend.asm):00010         *
                      (        fsend.asm):00011         * Error:  CC = C bit set; B = error code
                      (        fsend.asm):00012         *
062D 9E50             (        fsend.asm):00013         FSend    ldx   <D.Proc      get current process pointer
062F A641             (        fsend.asm):00014                  lda   R$A,u        get destination ID
0631 260C             (        fsend.asm):00015                  bne   L0652        it's ok, go on
0633 4C               (        fsend.asm):00016                  inca               add one
                      (        fsend.asm):00017         * Send signal to ALL process's
0634 A184             (        fsend.asm):00018         L0647    cmpa  P$ID,x       find myself?
0636 2702             (        fsend.asm):00019                  beq   L064D        yes, skip it
0638 8D05             (        fsend.asm):00020                  bsr   L0652        send the signal
063A 4C               (        fsend.asm):00021         L064D    inca               move to next process
063B 26F7             (        fsend.asm):00022                  bne   L0647        go send it
063D 5F               (        fsend.asm):00023                  clrb               clear errors
063E 39               (        fsend.asm):00024                  rts                return
                      (        fsend.asm):00025         
                      (        fsend.asm):00026         * X   = process descriptor ptr of singal sender
                      (        fsend.asm):00027         * A   = process ID to send signal to
                      (        fsend.asm):00028         * R$B = signal code
063F 1704DE           (        fsend.asm):00029         L0652    lbsr  L0B2E        get pointer to destination descriptor
0642 3463             (        fsend.asm):00030                  pshs  cc,a,y,u     preserve registers
0644 2511             (        fsend.asm):00031                  bcs   L066A        error, can't get pointer return
0646 6D42             (        fsend.asm):00032                  tst   R$B,u        kill signal?
0648 260F             (        fsend.asm):00033                  bne   L066D        no, go on
064A EC08             (        fsend.asm):00034                  ldd   P$User,x     get user #
064C 270B             (        fsend.asm):00035                  beq   L066D        he's super user, go on
064E 10A328           (        fsend.asm):00036                  cmpd  P$User,y     does he own the process?
0651 2706             (        fsend.asm):00037                  beq   L066D        yes, send the signal
0653 C6E0             (        fsend.asm):00038                  ldb   #E$BPrcID    get bad process error
0655 6CE4             (        fsend.asm):00039                  inc   ,s           set Carry in CC on stack
0657 35E3             (        fsend.asm):00040         L066A    puls  cc,a,y,u,pc  return
                      (        fsend.asm):00041         
                      (        fsend.asm):00042         * Y = process descriptor of process receiving signal
0659 1A50             (        fsend.asm):00043         L066D    orcc  #IntMasks    shut down IRQ's
065B E642             (        fsend.asm):00044                  ldb   R$B,u        get signal code
065D 2608             (        fsend.asm):00045                  bne   L067B        not a kill signal, skip ahead
065F C6E4             (        fsend.asm):00046                  ldb   #E$PrcAbt    get error 228
                      (        fsend.asm):00047                IFNE  H6309
                      (        fsend.asm):00048                  oim   #Condem,P$State,y condem process
0661                  (        fsend.asm):00049         L067B    aim   #^Suspend,P$State,y   take process out of suspend state
                      (        fsend.asm):00050                ELSE
0661 A62C             (        fsend.asm):00051                  lda   P$State,y
0663 8A02             (        fsend.asm):00052                  ora   #Condem
0665 A72C             (        fsend.asm):00053                  sta   P$State,y
0667 A62C             (        fsend.asm):00054         L067B    lda   P$State,y
0669 84F7             (        fsend.asm):00055                  anda  #^Suspend
066B A72C             (        fsend.asm):00056                  sta   P$State,y
                      (        fsend.asm):00057                ENDC
066D A6A819           (        fsend.asm):00058                  lda   <P$Signal,y  already have a pending signal?
0670 2709             (        fsend.asm):00059                  beq   L068F        nope, go on
0672 4A               (        fsend.asm):00060                  deca               is it a wakeup signal?
0673 2706             (        fsend.asm):00061                  beq   L068F        yes, skip ahead
0675 6CE4             (        fsend.asm):00062                  inc   ,s           set carry on stack
0677 C6E9             (        fsend.asm):00063                  ldb   #E$USigP     get pending signal error
0679 35E3             (        fsend.asm):00064                  puls  cc,a,y,u,pc  return
                      (        fsend.asm):00065         
                      (        fsend.asm):00066         * Update sleeping process queue
067B E7A819           (        fsend.asm):00067         L068F    stb   P$Signal,y   save signal code in descriptor
067E 8E0049           (        fsend.asm):00068                  ldx   #(D.SProcQ-P$Queue) get pointer to sleeping process queue
                      (        fsend.asm):00069                IFNE  H6309
                      (        fsend.asm):00070                  clrd               Faster than 2 memory clears
                      (        fsend.asm):00071                ELSE
0681 4F               (        fsend.asm):00072                  clra
0682 5F               (        fsend.asm):00073                  clrb
                      (        fsend.asm):00074                ENDC
0683 3184             (        fsend.asm):00075         L0697    leay  ,x           point Y to this process
0685 AE0D             (        fsend.asm):00076                  ldx   P$Queue,x    get pointer to next process in chain
0687 2736             (        fsend.asm):00077                  beq   L06D3        last one, go check waiting list
0689 EE04             (        fsend.asm):00078                  ldu   P$SP,x       get process stack pointer
068B E344             (        fsend.asm):00079                  addd  R$X,u        add his sleep count
068D AC62             (        fsend.asm):00080                  cmpx  2,s          is it destination process?
068F 26F2             (        fsend.asm):00081                  bne   L0697        no, skip to next process
0691 3406             (        fsend.asm):00082                  pshs  d            save sleep count
                      (        fsend.asm):00083                IFNE  H6309
                      (        fsend.asm):00084                  tim   #TimSleep,P$State,x
                      (        fsend.asm):00085                ELSE
0693 A60C             (        fsend.asm):00086                  lda   P$State,x
0695 8540             (        fsend.asm):00087                  bita  #TimSleep
                      (        fsend.asm):00088                ENDC
0697 2722             (        fsend.asm):00089                  beq   L06CF        no, update queue
0699 ECE4             (        fsend.asm):00090                  ldd   ,s
069B 271E             (        fsend.asm):00091                  beq   L06CF
069D EC44             (        fsend.asm):00092                  ldd   R$X,u
                      (        fsend.asm):00093                IFNE  H6309
                      (        fsend.asm):00094                  ldw   ,s
                      (        fsend.asm):00095                  stw   R$X,u
                      (        fsend.asm):00096                ELSE
069F 3406             (        fsend.asm):00097                  pshs  d
06A1 EC62             (        fsend.asm):00098                  ldd   2,s
06A3 ED44             (        fsend.asm):00099                  std   R$X,u
06A5 3506             (        fsend.asm):00100                  puls  d
                      (        fsend.asm):00101                ENDC
06A7 EE0D             (        fsend.asm):00102                  ldu   P$Queue,x
06A9 2710             (        fsend.asm):00103                  beq   L06CF
06AB EDE4             (        fsend.asm):00104                  std   ,s
                      (        fsend.asm):00105                IFNE   H6309
                      (        fsend.asm):00106                  tim   #TimSleep,P$State,u
                      (        fsend.asm):00107                ELSE
06AD A64C             (        fsend.asm):00108                  lda   P$State,u
06AF 8540             (        fsend.asm):00109                  bita  #TimSleep
                      (        fsend.asm):00110                ENDC
06B1 2708             (        fsend.asm):00111                  beq   L06CF
06B3 EE44             (        fsend.asm):00112                  ldu   P$SP,u
06B5 ECE4             (        fsend.asm):00113                  ldd   ,s
06B7 E344             (        fsend.asm):00114                  addd  R$X,u
06B9 ED44             (        fsend.asm):00115                  std   R$X,u
06BB 3262             (        fsend.asm):00116         L06CF    leas  2,s
06BD 200D             (        fsend.asm):00117                  bra   L06E0
                      (        fsend.asm):00118         
06BF 8E0047           (        fsend.asm):00119         L06D3    ldx   #(D.WProcQ-P$Queue)
06C2 3184             (        fsend.asm):00120         L06D6    leay  ,x
06C4 AE0D             (        fsend.asm):00121                  ldx   P$Queue,x
06C6 2718             (        fsend.asm):00122                  beq   L06F4
06C8 AC62             (        fsend.asm):00123                  cmpx  2,s
06CA 26F6             (        fsend.asm):00124                  bne   L06D6
06CC EC0D             (        fsend.asm):00125         L06E0    ldd   P$Queue,x
06CE ED2D             (        fsend.asm):00126                  std   P$Queue,y
06D0 A68819           (        fsend.asm):00127                  lda   P$Signal,x
06D3 4A               (        fsend.asm):00128                  deca
06D4 2607             (        fsend.asm):00129                  bne   L06F1
06D6 A78819           (        fsend.asm):00130                  sta   P$Signal,x
06D9 A6E4             (        fsend.asm):00131                  lda   ,s
06DB 1F8A             (        fsend.asm):00132                  tfr   a,cc
06DD 103F2C           (        fsend.asm):00133         L06F1    os9   F$AProc      activate the process
06E0 35E3             (        fsend.asm):00134         L06F4    puls  cc,a,y,u,pc  restore & return
                      (        fsend.asm):00135         
                      (  krnp2_beta5.asm):00380         
                      (  krnp2_beta5.asm):00381                  use    ficpt.asm
                      (        ficpt.asm):00001         **************************************************
                      (        ficpt.asm):00002         * System Call: F$Icpt
                      (        ficpt.asm):00003         *
                      (        ficpt.asm):00004         * Function: Sets the function to be called when a signal arrives.
                      (        ficpt.asm):00005         *          
                      (        ficpt.asm):00006         *
                      (        ficpt.asm):00007         * Input:  X = Address of intercept routine
                      (        ficpt.asm):00008         *         U = Address of intercept routine data area
                      (        ficpt.asm):00009         *
                      (        ficpt.asm):00010         * Output: None
                      (        ficpt.asm):00011         *
                      (        ficpt.asm):00012         * Error:  CC = C bit set; B = error code
                      (        ficpt.asm):00013         *
06E2 9E50             (        ficpt.asm):00014         FIcpt    ldx   <D.Proc      get current process pointer
06E4 EC44             (        ficpt.asm):00015                  ldd   R$X,u        Get vector for signal trap handler
                      (        ficpt.asm):00016                IFNE  H6309
                      (        ficpt.asm):00017                  ldw   R$U,u        Get data area ptr for signal trap handler
                      (        ficpt.asm):00018                  stq   P$SigVec,x   Save them in descriptor
                      (        ficpt.asm):00019                ELSE
06E6 ED881A           (        ficpt.asm):00020                  std   P$SigVec,x
06E9 EC48             (        ficpt.asm):00021                  ldd   R$U,u
06EB ED881C           (        ficpt.asm):00022                  std   P$SigDat,x
                      (        ficpt.asm):00023                ENDC
06EE 5F               (        ficpt.asm):00024                  clrb               clear errors
06EF 39               (        ficpt.asm):00025                  rts                return
                      (  krnp2_beta5.asm):00382         
                      (  krnp2_beta5.asm):00383                  use    fsleep.asm
                      (       fsleep.asm):00001         **************************************************
                      (       fsleep.asm):00002         * System Call: F$Sleep
                      (       fsleep.asm):00003         *
                      (       fsleep.asm):00004         * Function: Put the calling process to sleep
                      (       fsleep.asm):00005         *
                      (       fsleep.asm):00006         * Input:  X = Sleep time in ticks (0 = forever)
                      (       fsleep.asm):00007         *
                      (       fsleep.asm):00008         * Output: X = Decremented by the number of ticks that the process slept
                      (       fsleep.asm):00009         *
                      (       fsleep.asm):00010         * Error:  CC = C bit set; B = error code
                      (       fsleep.asm):00011         *
06F0 3401             (       fsleep.asm):00012         FSleep   pshs  cc           preserve interupt status
06F2 9E50             (       fsleep.asm):00013                  ldx   <D.Proc      Get current process pointer
                      (       fsleep.asm):00014         * F$Sleep bug fix.  Check if we're in system state.  If so return because you
                      (       fsleep.asm):00015         * should never sleep in system state.
06F4 9C4A             (       fsleep.asm):00016                  cmpx  <D.SysPrc    is it system process?
06F6 2763             (       fsleep.asm):00017                  beq   SkpSleep     skip sleep call
06F8 1A50             (       fsleep.asm):00018                  orcc  #IntMasks    disable interupts
06FA A68819           (       fsleep.asm):00019                  lda   P$Signal,x   get pending signal
06FD 2713             (       fsleep.asm):00020                  beq   L0722        none there, skip ahead
06FF 4A               (       fsleep.asm):00021                  deca               wakeup signal?
0700 2603             (       fsleep.asm):00022                  bne   L0715        no, skip ahead
0702 A78819           (       fsleep.asm):00023                  sta   P$Signal,x   clear pending signal so we can wake up process
0705                  (       fsleep.asm):00024         L0715    
                      (       fsleep.asm):00025                IFNE   H6309
                      (       fsleep.asm):00026                  aim   #^Suspend,P$State,x
                      (       fsleep.asm):00027                ELSE
0705 A60C             (       fsleep.asm):00028                  lda   P$State,x
0707 84F7             (       fsleep.asm):00029                  anda  #^Suspend
0709 A70C             (       fsleep.asm):00030                  sta   P$State,x
                      (       fsleep.asm):00031                ENDC
070B 3501             (       fsleep.asm):00032         L071B    puls  cc
070D 103F2C           (       fsleep.asm):00033                  os9   F$AProc      activate the process
0710 205E             (       fsleep.asm):00034                  bra   L0780
                      (       fsleep.asm):00035         
0712 EC44             (       fsleep.asm):00036         L0722    ldd   R$X,u        get callers X (contains sleep tick count)
0714 2747             (       fsleep.asm):00037                  beq   L076D        done, wake it up
                      (       fsleep.asm):00038                IFNE  H6309
                      (       fsleep.asm):00039                  decd               subtract 1 from tick count
                      (       fsleep.asm):00040                ELSE
0716 830001           (       fsleep.asm):00041                  subd  #$0001
                      (       fsleep.asm):00042                ENDC
0719 ED44             (       fsleep.asm):00043                  std   R$X,u        save it back
071B 27EE             (       fsleep.asm):00044                  beq   L071B        zero, wake up process
071D 3430             (       fsleep.asm):00045                  pshs  x,y
071F 8E0049           (       fsleep.asm):00046                  ldx   #(D.SProcQ-P$Queue)
0722 ED44             (       fsleep.asm):00047         L0732    std   R$X,u
0724 AF62             (       fsleep.asm):00048                  stx   2,s
0726 AE0D             (       fsleep.asm):00049                  ldx   P$Queue,x
0728 2715             (       fsleep.asm):00050                  beq   L074F
                      (       fsleep.asm):00051                IFNE   H6309
                      (       fsleep.asm):00052                  tim   #TimSleep,P$State,x  Timed sleep?
                      (       fsleep.asm):00053                ELSE
072A A60C             (       fsleep.asm):00054                  lda   P$State,x    Timed sleep?
072C 8540             (       fsleep.asm):00055                  bita  #TimSleep
                      (       fsleep.asm):00056                ENDC
072E 270F             (       fsleep.asm):00057                  beq   L074F
0730 10AE04           (       fsleep.asm):00058                  ldy   P$SP,x       get process stack pointer
0733 EC44             (       fsleep.asm):00059                  ldd   R$X,u
0735 A324             (       fsleep.asm):00060                  subd  R$X,y
0737 24E9             (       fsleep.asm):00061                  bcc   L0732
                      (       fsleep.asm):00062                IFNE  H6309
                      (       fsleep.asm):00063                  negd
                      (       fsleep.asm):00064                ELSE
0739 40               (       fsleep.asm):00065                  nega
073A 50               (       fsleep.asm):00066                  negb
073B 8200             (       fsleep.asm):00067                  sbca  #0
                      (       fsleep.asm):00068                ENDC
073D ED24             (       fsleep.asm):00069                  std   R$X,y
073F 3530             (       fsleep.asm):00070         L074F    puls  y,x
                      (       fsleep.asm):00071                IFNE  H6309
                      (       fsleep.asm):00072                  oim   #TimSleep,P$State,x
                      (       fsleep.asm):00073                ELSE
0741 A60C             (       fsleep.asm):00074                  lda   P$State,x
0743 8A40             (       fsleep.asm):00075                  ora   #TimSleep
0745 A70C             (       fsleep.asm):00076                  sta   P$State,x
                      (       fsleep.asm):00077                ENDC
0747 EC2D             (       fsleep.asm):00078                  ldd   P$Queue,y
0749 AF2D             (       fsleep.asm):00079                  stx   P$Queue,y
074B ED0D             (       fsleep.asm):00080                  std   P$Queue,x
074D AE44             (       fsleep.asm):00081                  ldx   R$X,u
074F 8D1F             (       fsleep.asm):00082                  bsr   L0780
0751 AF44             (       fsleep.asm):00083                  stx   R$X,u
0753 9E50             (       fsleep.asm):00084                  ldx   <D.Proc
                      (       fsleep.asm):00085                IFNE   H6309
                      (       fsleep.asm):00086                  aim   #^TimSleep,P$State,x
                      (       fsleep.asm):00087                ELSE
0755 A60C             (       fsleep.asm):00088                  lda   P$State,x
0757 84BF             (       fsleep.asm):00089                  anda  #^TimSleep
0759 A70C             (       fsleep.asm):00090                  sta   P$State,x
                      (       fsleep.asm):00091                ENDC
075B 3581             (       fsleep.asm):00092         SkpSleep puls  cc,pc
                      (       fsleep.asm):00093         
075D 8E0049           (       fsleep.asm):00094         L076D    ldx   #D.SProcQ-P$Queue
0760 3184             (       fsleep.asm):00095         L0770    leay  ,x
0762 AE0D             (       fsleep.asm):00096                  ldx   P$Queue,x
0764 26FA             (       fsleep.asm):00097                  bne   L0770
0766 9E50             (       fsleep.asm):00098                  ldx   <D.Proc
0768 4F               (       fsleep.asm):00099                  clra
0769 5F               (       fsleep.asm):00100                  clrb
076A AF2D             (       fsleep.asm):00101                  stx   P$Queue,y
076C ED0D             (       fsleep.asm):00102                  std   P$Queue,x
076E 3501             (       fsleep.asm):00103                  puls  cc
0770 34F8             (       fsleep.asm):00104         L0780    pshs  dp,x,y,u,pc
0772 308C17           (       fsleep.asm):00105         L0782    leax  <L079C,pc
0775 AF67             (       fsleep.asm):00106                  stx   7,s
0777 9E50             (       fsleep.asm):00107                  ldx   <D.Proc
0779 E606             (       fsleep.asm):00108                  ldb   P$Task,x    This is related to the 'one-byte hack'
077B D1D0             (       fsleep.asm):00109                  cmpb  <D.SysTsk   that stops OS9p1 from doing an F$AllTsk on
077D 2703             (       fsleep.asm):00110                  beq   L0792       _every_ system call.
077F 103F40           (       fsleep.asm):00111                  os9   F$DelTsk
0782 EC04             (       fsleep.asm):00112         L0792    ldd   P$SP,x
                      (       fsleep.asm):00113                IFNE  H6309
                      (       fsleep.asm):00114                  pshsw
                      (       fsleep.asm):00115                ENDC
0784 3407             (       fsleep.asm):00116                  pshs  cc,d
0786 10EF04           (       fsleep.asm):00117                  sts   P$SP,x
0789 103F2D           (       fsleep.asm):00118                  os9   F$NProc
                      (       fsleep.asm):00119         
078C 3410             (       fsleep.asm):00120         L079C    pshs  x
078E 9E50             (       fsleep.asm):00121                  ldx   <D.Proc
0790 ED04             (       fsleep.asm):00122                  std   P$SP,x
0792 5F               (       fsleep.asm):00123                  clrb
0793 3590             (       fsleep.asm):00124                  puls  x,pc
                      (  krnp2_beta5.asm):00384         
                      (  krnp2_beta5.asm):00385                  use    fallram.asm
                      (      fallram.asm):00001         **************************************************
                      (      fallram.asm):00002         * System Call: F$AllRAM
                      (      fallram.asm):00003         *
                      (      fallram.asm):00004         * Function: Allocate RAM blocks
                      (      fallram.asm):00005         *
                      (      fallram.asm):00006         * Input:  B = Desired block count
                      (      fallram.asm):00007         *
                      (      fallram.asm):00008         * Output: D = Beginning RAM block number
                      (      fallram.asm):00009         *
                      (      fallram.asm):00010         * Error:  CC = C bit set; B = error code
                      (      fallram.asm):00011         *
0795 E642             (      fallram.asm):00012         FAllRAM  ldb   R$B,u        Get # blocks requested
0797 3434             (      fallram.asm):00013                  pshs  b,x,y        Save regs
0799 9E40             (      fallram.asm):00014                  ldx   <D.BlkMap    Get ptr to start of block map
079B 3184             (      fallram.asm):00015         L0974    leay  ,x           Point Y to current block
079D E6E4             (      fallram.asm):00016                  ldb   ,s           Get # blocks requested
079F 9C42             (      fallram.asm):00017         srchblk  cmpx  <D.BlkMap+2  Hit end of map yet?
07A1 2419             (      fallram.asm):00018                  bhs   L0995        Yes, exit with No RAM error
07A3 A680             (      fallram.asm):00019                  lda   ,x+          Get block marker
07A5 26F4             (      fallram.asm):00020                  bne   L0974        Already used, start over with next block up
07A7 5A               (      fallram.asm):00021                  decb               Dec # blocks still needed
07A8 26F5             (      fallram.asm):00022                  bne   srchblk      Still more, keep checking
                      (      fallram.asm):00023         * Entry: Y=ptr to start of memory found
                      (      fallram.asm):00024         * Note: Due to fact that block map always starts @ $200 (up to $2FF), we
                      (      fallram.asm):00025         *       don't need to calc A
07AA 1F20             (      fallram.asm):00026         L0983    tfr   y,d          Copy start of requested block mem ptr to D (B)
07AC A6E4             (      fallram.asm):00027                  lda   ,s           Get # blocks requested
07AE E7E4             (      fallram.asm):00028                  stb   ,s           Save start block # 
07B0 6CA0             (      fallram.asm):00029         L098D    inc   ,y+          Flag blocks as used
07B2 4A               (      fallram.asm):00030                  deca                (for all blocks allocated)
07B3 26FB             (      fallram.asm):00031                  bne   L098D        Do until done
07B5 3504             (      fallram.asm):00032                  puls  b            Get start block #
07B7 4F               (      fallram.asm):00033                  clra               (allow for D as per original calls)
07B8 ED41             (      fallram.asm):00034                  std   R$D,u        Save for caller
07BA 35B0             (      fallram.asm):00035                  puls  x,y,pc       Restore regs & return
                      (      fallram.asm):00036         
07BC 53               (      fallram.asm):00037         L0995    comb               Exit with No RAM error
07BD C6ED             (      fallram.asm):00038                  ldb   #E$NoRAM
07BF E7E4             (      fallram.asm):00039                  stb   ,s
07C1 35B4             (      fallram.asm):00040                  puls  b,x,y,pc
                      (      fallram.asm):00041         
                      (      fallram.asm):00042         
                      (      fallram.asm):00043         **************************************************
                      (      fallram.asm):00044         * System Call: F$AlHRAM
                      (      fallram.asm):00045         *
                      (      fallram.asm):00046         * Function: Allocate RAM blocks from top of RAM
                      (      fallram.asm):00047         *
                      (      fallram.asm):00048         * Input:  B = Desired block count
                      (      fallram.asm):00049         *
                      (      fallram.asm):00050         * Output: D = Beginning RAM block number
                      (      fallram.asm):00051         *
                      (      fallram.asm):00052         * Error:  CC = C bit set; B = error code
                      (      fallram.asm):00053         *
07C3 E642             (      fallram.asm):00054         FAlHRAM  ldb   R$B,u        Get # blocks to allocate
07C5 3434             (      fallram.asm):00055                  pshs  b,x,y        Preserve regs
07C7 9E42             (      fallram.asm):00056                  ldx   <D.BlkMap+2  Get ptr to end of block map
07C9 E6E4             (      fallram.asm):00057         L09A9    ldb   ,s           Get # blocks requested
07CB 9C40             (      fallram.asm):00058         L09AB    cmpx  <D.BlkMap    Are we at beginning of RAM yet?
07CD 23ED             (      fallram.asm):00059                  bls   L0995        Yes, exit with No RAM error
07CF A682             (      fallram.asm):00060                  lda   ,-x          Get RAM block marker
07D1 26F6             (      fallram.asm):00061                  bne   L09A9        If not free, start checking next one down
07D3 5A               (      fallram.asm):00062                  decb               Free block, dec # blocks left to find count
07D4 26F5             (      fallram.asm):00063                  bne   L09AB        Still more needed, keep checking
07D6 1F12             (      fallram.asm):00064                  tfr   x,y          Found enough contigous blocks, move ptr to Y
07D8 20D0             (      fallram.asm):00065                  bra   L0983        Go mark blocks as used, & return info to caller
                      (  krnp2_beta5.asm):00386         
                      (  krnp2_beta5.asm):00387                  use    fsprior.asm
                      (      fsprior.asm):00001         **************************************************
                      (      fsprior.asm):00002         * System Call: F$SPrior
                      (      fsprior.asm):00003         *
                      (      fsprior.asm):00004         * Function: Set a process' priority
                      (      fsprior.asm):00005         *
                      (      fsprior.asm):00006         * Input:  A = Process ID
                      (      fsprior.asm):00007         *         B = Priority (0 = lowest, 255 = highest)
                      (      fsprior.asm):00008         *
                      (      fsprior.asm):00009         * Output: None
                      (      fsprior.asm):00010         *
                      (      fsprior.asm):00011         * Error:  CC = C bit set; B = error code
                      (      fsprior.asm):00012         *
07DA A641             (      fsprior.asm):00013         FSPrior  lda   R$A,u        get process #
07DC 170341           (      fsprior.asm):00014                  lbsr  L0B2E        get pointer to it
07DF 2514             (      fsprior.asm):00015                  bcs   L07C0        error, return
07E1 9E50             (      fsprior.asm):00016                  ldx   <D.Proc      get current process
07E3 EC08             (      fsprior.asm):00017                  ldd   P$User,x     get user #
07E5 2705             (      fsprior.asm):00018                  beq   L07B7        super user, go set priority
07E7 10A328           (      fsprior.asm):00019                  cmpd  P$User,y     user #'s match?
07EA 2606             (      fsprior.asm):00020                  bne   L07BD        no, return error
07EC A642             (      fsprior.asm):00021         L07B7    lda   R$B,u        get new priority
07EE A72A             (      fsprior.asm):00022                  sta   P$Prior,y    set it
07F0 5F               (      fsprior.asm):00023                  clrb               clear errors
07F1 39               (      fsprior.asm):00024                  rts                return
                      (      fsprior.asm):00025         
07F2 53               (      fsprior.asm):00026         L07BD    comb               set carry for error
07F3 C6E0             (      fsprior.asm):00027                  ldb   #E$BPrcID
07F5 39               (      fsprior.asm):00028         L07C0    rts
                      (      fsprior.asm):00029         
                      (  krnp2_beta5.asm):00388         
                      (  krnp2_beta5.asm):00389                  use    fid.asm
                      (          fid.asm):00001         **************************************************
                      (          fid.asm):00002         * System Call: F$ID
                      (          fid.asm):00003         *
                      (          fid.asm):00004         * Function: Return's caller's process ID
                      (          fid.asm):00005         *
                      (          fid.asm):00006         * Input:  None
                      (          fid.asm):00007         *
                      (          fid.asm):00008         * Output: A = Caller's process ID
                      (          fid.asm):00009         *         Y = User ID
                      (          fid.asm):00010         *
                      (          fid.asm):00011         * Error:  CC = C bit set; B = error code
                      (          fid.asm):00012         *
07F6 9E50             (          fid.asm):00013         FID      ldx   <D.Proc      get current process pointer
07F8 A684             (          fid.asm):00014                  lda   P$ID,x       get ID
07FA A741             (          fid.asm):00015                  sta   R$A,u        save it
07FC EC08             (          fid.asm):00016                  ldd   P$User,x     get user #
07FE ED46             (          fid.asm):00017                  std   R$Y,u        save it
0800 5F               (          fid.asm):00018                  clrb               clear error
0801 39               (          fid.asm):00019                  rts
                      (  krnp2_beta5.asm):00390         
                      (  krnp2_beta5.asm):00391                IFEQ   H6309
                      (  krnp2_beta5.asm):00392                  use    fdelram.asm
                      (      fdelram.asm):00001         **************************************************
                      (      fdelram.asm):00002         * System Call: F$DelRAM
                      (      fdelram.asm):00003         *
                      (      fdelram.asm):00004         * Function: Deallocate RAM blocks
                      (      fdelram.asm):00005         *
                      (      fdelram.asm):00006         * Input:  B = Number of blocks
                      (      fdelram.asm):00007         *         X = Beginning block number
                      (      fdelram.asm):00008         *
                      (      fdelram.asm):00009         * Output: None
                      (      fdelram.asm):00010         *
                      (      fdelram.asm):00011         * Error:  CC = C bit set; B = error code
                      (      fdelram.asm):00012         *
0802 E642             (      fdelram.asm):00013         FDelRAM  ldb   R$B,u      # of blocks to de-allocate
0804 2722             (      fdelram.asm):00014                  beq   DelRAM.2   if none, exit
0806 DC42             (      fdelram.asm):00015                  ldd   <D.BlkMap+2 get end of the block map
0808 9340             (      fdelram.asm):00016                  subd  <D.BlkMap  subtract out start of the block map
080A A344             (      fdelram.asm):00017                  subd  R$X,u      take out starting block number
080C 231A             (      fdelram.asm):00018                  bls   DelRAM.2   exit if the starting block is ># of blocks available
080E 4D               (      fdelram.asm):00019                  tsta             check high byte of RAM #
080F 2606             (      fdelram.asm):00020                  bne   DelRAM.0   if not zero, skip it
0811 E142             (      fdelram.asm):00021                  cmpb  R$B,u      check against size of the block
0813 2402             (      fdelram.asm):00022                  bhs   DelRAM.0   if size is >RAM available
0815 E742             (      fdelram.asm):00023                  stb   R$B,u      save actual # of blocks deleted
0817 9E40             (      fdelram.asm):00024         DelRAM.0 ldx   <D.BlkMap  get start address of the block map
0819 EC44             (      fdelram.asm):00025                  ldd   R$X,u      starting address of the RAM to de-allocate
081B 308B             (      fdelram.asm):00026                  leax  d,x        slower, but smaller than ADDR
081D E642             (      fdelram.asm):00027                  ldb   R$B,u      get actual # of blocks to de-allocate
     081F             (      fdelram.asm):00028         DelRAM.1 equ   *
                      (      fdelram.asm):00029                IFNE  H6309
                      (      fdelram.asm):00030                  aim   #^RAMinUse,,x+  set to RAM not in use
                      (      fdelram.asm):00031                ELSE
081F A684             (      fdelram.asm):00032                  lda   ,x
0821 84FE             (      fdelram.asm):00033                  anda  #^RAMinUse
0823 A780             (      fdelram.asm):00034                  sta   ,x+
                      (      fdelram.asm):00035                ENDC
0825 5A               (      fdelram.asm):00036                  decb             count down a block
0826 26F7             (      fdelram.asm):00037                  bne   DelRAM.1   continue
0828 5F               (      fdelram.asm):00038         DelRAM.2 clrb             and exit
0829 39               (      fdelram.asm):00039                  rts
                      (  krnp2_beta5.asm):00393                ENDC
                      (  krnp2_beta5.asm):00394         
                      (  krnp2_beta5.asm):00395                  use    fsswi.asm
                      (        fsswi.asm):00001         **************************************************
                      (        fsswi.asm):00002         * System Call: F$SSWI
                      (        fsswi.asm):00003         *
                      (        fsswi.asm):00004         * Function: Sets the SWI vector specified for the calling process.
                      (        fsswi.asm):00005         *
                      (        fsswi.asm):00006         * Input:  B = SWI vector (1-3) to modify
                      (        fsswi.asm):00007         *         U = Address of new SWI vector for process
                      (        fsswi.asm):00008         *
                      (        fsswi.asm):00009         * Output: None
                      (        fsswi.asm):00010         *
                      (        fsswi.asm):00011         * Error:  CC = C bit set; B = error code
                      (        fsswi.asm):00012         *
082A 9E50             (        fsswi.asm):00013         FSSWI    ldx   <D.Proc      get current process
082C E641             (        fsswi.asm):00014                  ldb   R$A,u        get type code
082E 5A               (        fsswi.asm):00015                  decb               adjust for offset
082F C103             (        fsswi.asm):00016                  cmpb  #3           legal value?
0831 2408             (        fsswi.asm):00017                  bcc   BadSWI       no, return error
0833 58               (        fsswi.asm):00018                  lslb               account for 2 bytes entry
0834 CB13             (        fsswi.asm):00019                  addb  #P$SWI       go to start of P$SWI pointers
0836 EE44             (        fsswi.asm):00020                  ldu   R$X,u        get address
0838 EF85             (        fsswi.asm):00021                  stu   b,x          save to descriptor
083A 39               (        fsswi.asm):00022                  rts                return
                      (        fsswi.asm):00023         
083B 53               (        fsswi.asm):00024         BadSWI   comb
083C C6E3             (        fsswi.asm):00025                  ldb   #E$ISWI
083E 39               (        fsswi.asm):00026                  rts
                      (  krnp2_beta5.asm):00396         
                      (  krnp2_beta5.asm):00397                  use    fstime.asm
                      (       fstime.asm):00001         **************************************************
                      (       fstime.asm):00002         * System Call: F$STime
                      (       fstime.asm):00003         *
                      (       fstime.asm):00004         * Function: Set system time
                      (       fstime.asm):00005         *
                      (       fstime.asm):00006         * Input:  X = Address of time packet:
                      (       fstime.asm):00007         *
                      (       fstime.asm):00008         *        Offset 0 = Year
                      (       fstime.asm):00009         *        Offset 1 = Month
                      (       fstime.asm):00010         *        Offset 2 = Day
                      (       fstime.asm):00011         *        Offset 3 = Hour
                      (       fstime.asm):00012         *        Offset 4 = Minute
                      (       fstime.asm):00013         *        Offset 5 = Second
                      (       fstime.asm):00014         *
                      (       fstime.asm):00015         * Output: System time/date set
                      (       fstime.asm):00016         *
                      (       fstime.asm):00017         * Error:  CC = C bit set; B = error code
                      (       fstime.asm):00018         *
083F AE44             (       fstime.asm):00019         FSTime   ldx   R$X,u           Get address that user wants time packet
                      (       fstime.asm):00020         ***         tfr   dp,a            Set MSB of D to direct page
                      (       fstime.asm):00021         ***         ldb   #D.Time         Offset to Time packet in direct page
                      (       fstime.asm):00022         ***         tfr   d,u             Point U to it
0841 CE0028           (       fstime.asm):00023                  ldu   #D.Time    --- DP=0 always
0844 109E50           (       fstime.asm):00024                  ldy   <D.Proc         Get ptr to process that called us
0847 A626             (       fstime.asm):00025                  lda   P$Task,y        Get task # from process
0849 D6D0             (       fstime.asm):00026                  ldb   <D.SysTsk       Get task # of system process
084B 108E0006         (       fstime.asm):00027                  ldy   #6              6 byte packet to move
084F 103F38           (       fstime.asm):00028                  os9   F$Move          Go move it
0852 9E50             (       fstime.asm):00029                  ldx   <D.Proc         Get ptr to process that called us
0854 3410             (       fstime.asm):00030                  pshs  x               Preserve it
0856 9E4A             (       fstime.asm):00031                  ldx   <D.SysPrc       Get ptr to system process
0858 9F50             (       fstime.asm):00032                  stx   <D.Proc         Save as current process
085A 86C1             (       fstime.asm):00033                  lda   #Systm+Objct    Link to Clock module
085C 308C0C           (       fstime.asm):00034                  leax  <ClockNam,pc
085F 103F00           (       fstime.asm):00035                  os9   F$Link
0862 3510             (       fstime.asm):00036                  puls  x               Get back ptr to user's process
0864 9F50             (       fstime.asm):00037                  stx   <D.Proc         Make it the active process again
0866 2502             (       fstime.asm):00038                  bcs   ex@            If error in Link, exit with error code
0868 6EA4             (       fstime.asm):00039                  jmp   ,y              Jump into Clock
086A 39               (       fstime.asm):00040         ex@      rts
                      (       fstime.asm):00041         
086B 436C6F63EB       (       fstime.asm):00042         ClockNam fcs   /Clock/
                      (  krnp2_beta5.asm):00398         
                      (  krnp2_beta5.asm):00399                  use    fallbit.asm
                      (      fallbit.asm):00001         **************************************************
                      (      fallbit.asm):00002         * System Call: F$AllBit
                      (      fallbit.asm):00003         *
                      (      fallbit.asm):00004         * Function: Sets bits in an allocation bitmap
                      (      fallbit.asm):00005         *
                      (      fallbit.asm):00006         * Input:  X = Address of allocation bitmap
                      (      fallbit.asm):00007         *         D = Number of first bit to set
                      (      fallbit.asm):00008         *         Y = Bit count (number of bits to set)
                      (      fallbit.asm):00009         *
                      (      fallbit.asm):00010         * Output: None
                      (      fallbit.asm):00011         *
                      (      fallbit.asm):00012         * Error:  CC = C bit set; B = error code
                      (      fallbit.asm):00013         *
0870 EC41             (      fallbit.asm):00014         FAllBit  ldd   R$D,u        get bit # to start with
0872 AE44             (      fallbit.asm):00015                  ldx   R$X,u        get address of allocation bit map
0874 8D51             (      fallbit.asm):00016                  bsr   CalcBit      calculate byte & position & get first bit mask
                      (      fallbit.asm):00017                IFGT  Level-1
0876 109E50           (      fallbit.asm):00018                  ldy   <D.Proc      get current task #
0879 E626             (      fallbit.asm):00019                  ldb   P$Task,y     get task number
087B 2008             (      fallbit.asm):00020                  bra   DoAllBit     go do it
                      (      fallbit.asm):00021         
                      (      fallbit.asm):00022         * F$AllBit (System State)
087D EC41             (      fallbit.asm):00023         FSAllBit ldd   R$D,u        get bit # to start with
087F AE44             (      fallbit.asm):00024                  ldx   R$X,u        get address of allocation bit map
0881 8D44             (      fallbit.asm):00025                  bsr   CalcBit      calculate byte & pos & get first bit mask
0883 D6D0             (      fallbit.asm):00026                  ldb   <D.SysTsk    Get system task #
                      (      fallbit.asm):00027                ENDC
                      (      fallbit.asm):00028         
                      (      fallbit.asm):00029         * Main bit setting loop
     0885             (      fallbit.asm):00030         DoAllBit equ   *
                      (      fallbit.asm):00031                IFNE  H6309
                      (      fallbit.asm):00032                  ldw   R$Y,u        get # bits to set
                      (      fallbit.asm):00033                ELSE
0885 10AE46           (      fallbit.asm):00034                  ldy   R$Y,u        get # bits to set
                      (      fallbit.asm):00035                ENDC
0888 273B             (      fallbit.asm):00036                  beq   BitEx        nothing to set, return
088A A7E2             (      fallbit.asm):00037                  sta   ,-s          preserve current mask
088C 2B12             (      fallbit.asm):00038                  bmi   SkpBit       If high bit set, skip ahead
                      (      fallbit.asm):00039                IFGT  Level-1
088E 103F49           (      fallbit.asm):00040                  os9   F$LDABX      go get original value from bit map 
                      (      fallbit.asm):00041                ELSE
                      (      fallbit.asm):00042                  lda   ,x
                      (      fallbit.asm):00043                ENDC
0891 AAE4             (      fallbit.asm):00044         NxtBitLp ora   ,s           OR it with the current mask
                      (      fallbit.asm):00045                IFNE  H6309
                      (      fallbit.asm):00046                  decw               dec the bit counter
                      (      fallbit.asm):00047                ELSE
0893 313F             (      fallbit.asm):00048                  leay  -1,y
                      (      fallbit.asm):00049                ENDC
0895 2729             (      fallbit.asm):00050                  beq   BitStEx      done, go put the byte back into the task's map
0897 64E4             (      fallbit.asm):00051                  lsr   ,s           shift out the lowest bit of original
0899 24F6             (      fallbit.asm):00052                  bcc   NxtBitLp     if it is a 0, do next bit
                      (      fallbit.asm):00053                IFGT  Level-1
089B 103F4A           (      fallbit.asm):00054                  os9   F$STABX      if it was a 1 (which means whole byte done),
                      (      fallbit.asm):00055                ELSE
                      (      fallbit.asm):00056                  sta   ,x
                      (      fallbit.asm):00057                ENDC
089E 3001             (      fallbit.asm):00058                  leax  1,x          store finished byte and bump ptr
08A0 86FF             (      fallbit.asm):00059         SkpBit   lda   #$FF         preload a finished byte
08A2 2007             (      fallbit.asm):00060                  bra   SkpBit2      skip ahead
                      (      fallbit.asm):00061         
     08A4             (      fallbit.asm):00062         StFulByt equ   *
                      (      fallbit.asm):00063                IFGT  Level-1
08A4 103F4A           (      fallbit.asm):00064                  os9   F$STABX      store full byte
                      (      fallbit.asm):00065                ELSE
                      (      fallbit.asm):00066                  sta   ,x
                      (      fallbit.asm):00067                ENDC
08A7 3001             (      fallbit.asm):00068                  leax  1,x          bump ptr up 1
                      (      fallbit.asm):00069                IFNE  H6309
                      (      fallbit.asm):00070                  subw  #8           bump counter down by 8
08A9                  (      fallbit.asm):00071         SkpBit2  cmpw  #8           is there at least 8 more (a full byte) to do?
                      (      fallbit.asm):00072                ELSE
08A9 3138             (      fallbit.asm):00073                  leay  -8,y
08AB 108C0008         (      fallbit.asm):00074         SkpBit2  cmpy  #$0008
                      (      fallbit.asm):00075                ENDC
08AF 22F3             (      fallbit.asm):00076                  bhi   StFulByt     more than 1, go do current
08B1 270D             (      fallbit.asm):00077                  beq   BitStEx      exactly 1 byte left, do final store & exit
                      (      fallbit.asm):00078         
                      (      fallbit.asm):00079         * Last byte: Not a full byte left loop
08B3 44               (      fallbit.asm):00080         L085A    lsra               bump out least sig. bit
                      (      fallbit.asm):00081                IFNE  H6309
                      (      fallbit.asm):00082                  decw               dec the bit counter
                      (      fallbit.asm):00083                ELSE
08B4 313F             (      fallbit.asm):00084                  leay  -1,y
                      (      fallbit.asm):00085                ENDC
08B6 26FB             (      fallbit.asm):00086                  bne   L085A        keep going until last one is shifted out
08B8 43               (      fallbit.asm):00087                  coma               invert byte to get proper result
08B9 A7E4             (      fallbit.asm):00088                  sta   ,s           preserve a sec
                      (      fallbit.asm):00089                IFGT  Level-1
08BB 103F49           (      fallbit.asm):00090                  os9   F$LDABX      get byte for original map
                      (      fallbit.asm):00091                ELSE
                      (      fallbit.asm):00092                  lda   ,x
                      (      fallbit.asm):00093                ENDC
08BE AAE4             (      fallbit.asm):00094                  ora   ,s           merge with new mask
     08C0             (      fallbit.asm):00095         BitStEx  equ   *
                      (      fallbit.asm):00096                IFGT  Level-1
08C0 103F4A           (      fallbit.asm):00097                  os9   F$STABX      store finished byte into task
                      (      fallbit.asm):00098                ELSE
                      (      fallbit.asm):00099                  sta   ,x
                      (      fallbit.asm):00100                ENDC
08C3 3261             (      fallbit.asm):00101                  leas  1,s          eat the working copy of the mask
08C5 5F               (      fallbit.asm):00102         BitEx    clrb               no error & return
08C6 39               (      fallbit.asm):00103                  rts
                      (      fallbit.asm):00104         
                      (      fallbit.asm):00105         * Calculate address of first byte we want, and which bit in that byte, from
                      (      fallbit.asm):00106         *   a bit allocation map given the address of the map & the bit # we want to
                      (      fallbit.asm):00107         *   point to
                      (      fallbit.asm):00108         * Entry: D=Bit #
                      (      fallbit.asm):00109         *        X=Ptr to bit mask table
                      (      fallbit.asm):00110         * Exit:  A=Mask to point to bit # within byte we are starting on
                      (      fallbit.asm):00111         *        X=Ptr in allocation map to first byte we are starting on
08C7 3424             (      fallbit.asm):00112         CalcBit  pshs  b,y          preserve registers
                      (      fallbit.asm):00113                IFNE  H6309
                      (      fallbit.asm):00114                  lsrd              divide bit # by 8 to calculate byte # to start
                      (      fallbit.asm):00115                  lsrd               allocating at
                      (      fallbit.asm):00116                  lsrd
                      (      fallbit.asm):00117                  addr  d,x          offset that far into the map
                      (      fallbit.asm):00118                ELSE
08C9 44               (      fallbit.asm):00119                  lsra
08CA 56               (      fallbit.asm):00120                  rorb
08CB 44               (      fallbit.asm):00121                  lsra
08CC 56               (      fallbit.asm):00122                  rorb
08CD 44               (      fallbit.asm):00123                  lsra
08CE 56               (      fallbit.asm):00124                  rorb
08CF 308B             (      fallbit.asm):00125                  leax  d,x
                      (      fallbit.asm):00126                ENDC
08D1 3504             (      fallbit.asm):00127                  puls  b            restore bit position LSB
08D3 318C06           (      fallbit.asm):00128                  leay  <MaskTbl,pc  point to mask table
08D6 C407             (      fallbit.asm):00129                  andb  #7           round it down to nearest bit
08D8 A6A5             (      fallbit.asm):00130                  lda   b,y          get bit mask
08DA 35A0             (      fallbit.asm):00131                  puls  y,pc         restore & return
                      (      fallbit.asm):00132         
                      (      fallbit.asm):00133         * Bit position table (NOTE that bit #'s are done by left to right)
08DC 8040201008040201 (      fallbit.asm):00134         MaskTbl  fcb   $80,$40,$20,$10,$08,$04,$02,$01
                      (      fallbit.asm):00135         
                      (      fallbit.asm):00136         
                      (      fallbit.asm):00137         **************************************************
                      (      fallbit.asm):00138         * System Call: F$DelBit
                      (      fallbit.asm):00139         *
                      (      fallbit.asm):00140         * Function: Clears bits in an allocation bitmap
                      (      fallbit.asm):00141         *
                      (      fallbit.asm):00142         * Input:  X = Address of allocation bitmap
                      (      fallbit.asm):00143         *         D = Number of first bit to clear
                      (      fallbit.asm):00144         *         Y = Bit count (number of bits to clear)
                      (      fallbit.asm):00145         *
                      (      fallbit.asm):00146         * Output: None
                      (      fallbit.asm):00147         *
                      (      fallbit.asm):00148         * Error:  CC = C bit set; B = error code
                      (      fallbit.asm):00149         *
08E4 EC41             (      fallbit.asm):00150         FDelBit  ldd   R$D,u        get bit # to start with
08E6 AE44             (      fallbit.asm):00151                  ldx   R$X,u        get addr. of bit allocation map
08E8 8DDD             (      fallbit.asm):00152                  bsr   CalcBit      point to starting bit
                      (      fallbit.asm):00153                IFGT  Level-1
08EA 109E50           (      fallbit.asm):00154                  ldy   <D.Proc      get current Task #
08ED E626             (      fallbit.asm):00155                  ldb   P$Task,y     get task #
08EF 2008             (      fallbit.asm):00156                  bra   DoDelBit     do rest of 0 bits
                      (      fallbit.asm):00157         
                      (      fallbit.asm):00158         * F$DelBit entry point for system state
08F1 EC41             (      fallbit.asm):00159         FSDelBit ldd   R$D,u        get bit # to start with
08F3 AE44             (      fallbit.asm):00160                  ldx   R$X,u        get addr. of bit allocation map
08F5 8DD0             (      fallbit.asm):00161                  bsr   CalcBit      point to starting bit
08F7 D6D0             (      fallbit.asm):00162                  ldb   <D.SysTsk    get system task #
                      (      fallbit.asm):00163                ENDC
                      (      fallbit.asm):00164         
     08F9             (      fallbit.asm):00165         DoDelBit equ   *
                      (      fallbit.asm):00166                IFNE  H6309
                      (      fallbit.asm):00167                  ldw   R$Y,u        get # bits to clear
                      (      fallbit.asm):00168                ELSE
08F9 10AE46           (      fallbit.asm):00169                  ldy   R$Y,u        get # bits to clear
                      (      fallbit.asm):00170                ENDC
08FC 273B             (      fallbit.asm):00171                  beq   L08E0        none, return
08FE 43               (      fallbit.asm):00172                  coma               invert current bit mask
08FF A7E2             (      fallbit.asm):00173                  sta   ,-s          preserve on stack
0901 2A12             (      fallbit.asm):00174                  bpl   L08BC        if high bit clear, skip ahead
                      (      fallbit.asm):00175                IFGT  Level-1
0903 103F49           (      fallbit.asm):00176                  os9   F$LDABX      go get byte from user's map
                      (      fallbit.asm):00177                ELSE
                      (      fallbit.asm):00178                  lda   ,x
                      (      fallbit.asm):00179                ENDC
0906 A4E4             (      fallbit.asm):00180         L08AD    anda  ,s           AND it with current mask
                      (      fallbit.asm):00181                IFNE  H6309
                      (      fallbit.asm):00182                  decw               dec the bits left counter
                      (      fallbit.asm):00183                ELSE
0908 313F             (      fallbit.asm):00184                  leay  -1,y
                      (      fallbit.asm):00185                ENDC
090A 2728             (      fallbit.asm):00186                  beq   BitDone      done, store finished byte back in task's map
090C 67E4             (      fallbit.asm):00187                  asr   ,s           shift out lowest bit, leaving highest alone
090E 25F6             (      fallbit.asm):00188                  bcs   L08AD        if it is a 1, do next bit
                      (      fallbit.asm):00189                IFGT  Level-1
0910 103F4A           (      fallbit.asm):00190                  os9   F$STABX      if it was a 0 (which means whole byte done),
                      (      fallbit.asm):00191                ELSE
                      (      fallbit.asm):00192                  sta   ,x
                      (      fallbit.asm):00193                ENDC
0913 3001             (      fallbit.asm):00194                  leax  1,x          store finished byte & inc. ptr
0915 4F               (      fallbit.asm):00195         L08BC    clra               preload a cleared byte
0916 2007             (      fallbit.asm):00196                  bra   ChkFull      skip ahead
                      (      fallbit.asm):00197         
     0918             (      fallbit.asm):00198         L08BF    equ   *
                      (      fallbit.asm):00199                IFGT  Level-1
0918 103F4A           (      fallbit.asm):00200                  os9   F$STABX      store full byte
                      (      fallbit.asm):00201                ELSE
                      (      fallbit.asm):00202                  sta   ,x
                      (      fallbit.asm):00203                ENDC
091B 3001             (      fallbit.asm):00204                  leax  1,x          bump ptr up by 1
                      (      fallbit.asm):00205                IFNE  H6309
                      (      fallbit.asm):00206                  subw  #8           dec bits left counter by 8
091D                  (      fallbit.asm):00207         ChkFull  cmpw  #8           at least 1 full byte left?
                      (      fallbit.asm):00208                ELSE
091D 3138             (      fallbit.asm):00209                  leay  -8,y
091F 108C0008         (      fallbit.asm):00210         ChkFull  cmpy  #8
                      (      fallbit.asm):00211                ENDC
0923 22F3             (      fallbit.asm):00212                  bhi   L08BF        yes, do a whole byte in 1 shot
0925 270D             (      fallbit.asm):00213                  beq   BitDone      exactly 1, store byte & exit
0927 43               (      fallbit.asm):00214                  coma               < full byte left, invert bits
0928 44               (      fallbit.asm):00215         L08CF    lsra               shift out rightmost bit
                      (      fallbit.asm):00216                IFNE  H6309
                      (      fallbit.asm):00217                  decw               dec bits left counter
                      (      fallbit.asm):00218                ELSE
0929 313F             (      fallbit.asm):00219                  leay  -1,y
                      (      fallbit.asm):00220                ENDC
092B 26FB             (      fallbit.asm):00221                  bne   L08CF        keep doing till done
092D A7E4             (      fallbit.asm):00222                  sta   ,s           save finished mask
                      (      fallbit.asm):00223                IFGT  Level-1
092F 103F49           (      fallbit.asm):00224                  os9   F$LDABX      get original byte from task
                      (      fallbit.asm):00225                ELSE
                      (      fallbit.asm):00226                  lda   ,x
                      (      fallbit.asm):00227                ENDC
0932 A4E4             (      fallbit.asm):00228                  anda  ,s           merge cleared bits with it
     0934             (      fallbit.asm):00229         BitDone  equ   *
                      (      fallbit.asm):00230                IFGT  Level-1
0934 103F4A           (      fallbit.asm):00231                  os9   F$STABX      store finished byte into task
                      (      fallbit.asm):00232                ELSE
                      (      fallbit.asm):00233                  sta   ,x
                      (      fallbit.asm):00234                ENDC
0937 3261             (      fallbit.asm):00235                  leas  1,s          eat working copy of mask
0939 5F               (      fallbit.asm):00236         L08E0    clrb               eat error & return
093A 39               (      fallbit.asm):00237                  rts
                      (      fallbit.asm):00238         
                      (      fallbit.asm):00239         
                      (      fallbit.asm):00240         **************************************************
                      (      fallbit.asm):00241         * System Call: F$SchBit
                      (      fallbit.asm):00242         *
                      (      fallbit.asm):00243         * Function: Search bitmap for a free area
                      (      fallbit.asm):00244         *
                      (      fallbit.asm):00245         * Input:  X = Address of allocation bitmap
                      (      fallbit.asm):00246         *         D = Starting bit number
                      (      fallbit.asm):00247         *         Y = Bit count (free bit block size)
                      (      fallbit.asm):00248         *         U = Address of end of allocation bitmap
                      (      fallbit.asm):00249         *
                      (      fallbit.asm):00250         * Output: D = Beginning bit number
                      (      fallbit.asm):00251         *         Y = Bit count
                      (      fallbit.asm):00252         *
                      (      fallbit.asm):00253         * Error:  CC = C bit set; B = error code
                      (      fallbit.asm):00254         *
093B EC41             (      fallbit.asm):00255         FSchBit  ldd   R$D,u        get start bit #
093D AE44             (      fallbit.asm):00256                  ldx   R$X,u        get addr. of allocation bit map
093F 8D86             (      fallbit.asm):00257                  bsr   CalcBit      point to starting bit
                      (      fallbit.asm):00258                IFGT  Level-1
0941 109E50           (      fallbit.asm):00259                  ldy   <D.Proc      get task #
0944 E626             (      fallbit.asm):00260                  ldb   P$Task,y
0946 2009             (      fallbit.asm):00261                  bra   DoSchBit     skip ahead
                      (      fallbit.asm):00262         
                      (      fallbit.asm):00263         * F$SchBit entry point for system
0948 EC41             (      fallbit.asm):00264         FSSchBit ldd   R$D,u        get start bit #
094A AE44             (      fallbit.asm):00265                  ldx   R$X,u        get addr. of allocation bit map
094C 17FF78           (      fallbit.asm):00266                  lbsr  CalcBit      point to starting bit
094F D6D0             (      fallbit.asm):00267                  ldb   <D.SysTsk    get task #
                      (      fallbit.asm):00268         * Stack: 0,s : byte we are working on (from original map)
                      (      fallbit.asm):00269         *        1,s : Mask of which bit in current byte to start on
                      (      fallbit.asm):00270         *        2,s : Task number the allocation bit map is in
                      (      fallbit.asm):00271         *        3,s : Largest block found so far
                      (      fallbit.asm):00272         *        5,s : Starting bit # of requested (or closest) size found
                      (      fallbit.asm):00273         *        7,s : Starting bit # of current block being checked (2 bytes) (NOW IN Y)
                      (      fallbit.asm):00274                ENDC
     0951             (      fallbit.asm):00275         DoSchBit equ  *
                      (      fallbit.asm):00276                IFNE  H6309
                      (      fallbit.asm):00277                  pshs  cc,d,x,y     preserve task # & bit mask & reserve stack space
                      (      fallbit.asm):00278                  clrd               faster than 2 memory clears
                      (      fallbit.asm):00279                ELSE
0951 3477             (      fallbit.asm):00280                  pshs  cc,d,x,y,u   preserve task # & bit mask & reserve stack space
0953 4F               (      fallbit.asm):00281                  clra
0954 5F               (      fallbit.asm):00282                  clrb
                      (      fallbit.asm):00283                ENDC
0955 ED63             (      fallbit.asm):00284                  std   3,s          preserve it
                      (      fallbit.asm):00285                IFNE  H6309
                      (      fallbit.asm):00286                  ldw   R$D,u        get start bit #
                      (      fallbit.asm):00287                  tfr   w,y          save as current block starting bit #
                      (      fallbit.asm):00288                ELSE
0957 10AE41           (      fallbit.asm):00289                  ldy   R$D,u
095A 10AF67           (      fallbit.asm):00290                  sty   7,s
                      (      fallbit.asm):00291                ENDC
095D 200B             (      fallbit.asm):00292                  bra   Skipper      skip ahead
                      (      fallbit.asm):00293         
                      (      fallbit.asm):00294         * New start point for search at current location
     095F             (      fallbit.asm):00295         RstSrch  equ   *
                      (      fallbit.asm):00296                IFNE  H6309
                      (      fallbit.asm):00297                  tfr   w,y          preserve current block bit # start
                      (      fallbit.asm):00298                ELSE
095F 10AF67           (      fallbit.asm):00299                  sty   7,s
                      (      fallbit.asm):00300                ENDC
                      (      fallbit.asm):00301         * Move to next bit position, and to next byte if current byte is done
0962 6461             (      fallbit.asm):00302         MoveBit  lsr   1,s          move to next bit position
0964 240F             (      fallbit.asm):00303                  bcc   CheckBit     if not the last one, check it
0966 6661             (      fallbit.asm):00304                  ror   1,s          move bit position marker to 1st bit again
0968 3001             (      fallbit.asm):00305                  leax  1,x          move byte ptr (in map) to next byte
                      (      fallbit.asm):00306         * Check if we are finished allocation map
096A AC48             (      fallbit.asm):00307         Skipper  cmpx  R$U,u        done entire map?
096C 2425             (      fallbit.asm):00308                  bhs   BadNews      yes, couldn't fit in 1 block, notify caller
096E E662             (      fallbit.asm):00309                  ldb   2,s          get task number
                      (      fallbit.asm):00310                IFGT  Level-1
0970 103F49           (      fallbit.asm):00311                  os9   F$LDABX      get byte from bit allocation map
                      (      fallbit.asm):00312                ELSE
                      (      fallbit.asm):00313                  lda   ,x
                      (      fallbit.asm):00314                ENDC
0973 A7E4             (      fallbit.asm):00315                  sta   ,s           preserve in scratch area
                      (      fallbit.asm):00316         * Main checking
     0975             (      fallbit.asm):00317         CheckBit equ   *
                      (      fallbit.asm):00318                IFNE  H6309
                      (      fallbit.asm):00319                  incw               increment current bit #
                      (      fallbit.asm):00320                ELSE
0975 3121             (      fallbit.asm):00321                  leay  1,y
                      (      fallbit.asm):00322                ENDC
0977 A6E4             (      fallbit.asm):00323                  lda   ,s           get current byte
0979 A461             (      fallbit.asm):00324                  anda  1,s          mask out all but current bit position
097B 26E2             (      fallbit.asm):00325                  bne   RstSrch      if bit not free, restart search from next bit
                      (      fallbit.asm):00326                IFNE  H6309
                      (      fallbit.asm):00327                  tfr   w,d          dup current bit # into D
                      (      fallbit.asm):00328                  subr  y,d          calculate size we have free so far
                      (      fallbit.asm):00329                ELSE
097D 1F20             (      fallbit.asm):00330                  tfr   y,d
097F A367             (      fallbit.asm):00331                  subd  7,s
                      (      fallbit.asm):00332                ENDC
0981 10A346           (      fallbit.asm):00333                  cmpd  R$Y,u        as big as user requested?
0984 2416             (      fallbit.asm):00334                  bhs   WereDone     yes, we are done
0986 10A363           (      fallbit.asm):00335                  cmpd  $03,s        as big as the largest one we have found so far?
0989 23D7             (      fallbit.asm):00336                  bls   MoveBit      no, move to next bit and keep going
098B ED63             (      fallbit.asm):00337                  std   $03,s        it is the largest, save current size
                      (      fallbit.asm):00338                IFNE  H6309
                      (      fallbit.asm):00339                  sty   $05,s        save as start bit # f largest block found so far
                      (      fallbit.asm):00340                ELSE
098D EC67             (      fallbit.asm):00341                  ldd   7,s
098F ED65             (      fallbit.asm):00342                  std   5,s
                      (      fallbit.asm):00343                ENDC
0991 20CF             (      fallbit.asm):00344                  bra   MoveBit      move to next bit and keep going
                      (      fallbit.asm):00345         
                      (      fallbit.asm):00346         * Couldn't find requested size block; tell user where the closest was found
                      (      fallbit.asm):00347         *   and how big it was
0993 EC63             (      fallbit.asm):00348         BadNews  ldd   $03,s        get size of largest block we found
0995 ED46             (      fallbit.asm):00349                  std   R$Y,u        put into callers Y register
0997 53               (      fallbit.asm):00350                  comb               set carry to indicate we couldn't get full size
0998 EC65             (      fallbit.asm):00351                  ldd   5,s          get starting bit # of largest block we found
099A 2002             (      fallbit.asm):00352                  bra   BadSkip      skip ahead
                      (      fallbit.asm):00353         
                      (      fallbit.asm):00354         * Found one, tell user where it is
     099C             (      fallbit.asm):00355         WereDone equ   *
                      (      fallbit.asm):00356                IFNE  H6309
                      (      fallbit.asm):00357                  tfr   y,d          get start bit # of the block we found
                      (      fallbit.asm):00358                ELSE
099C EC67             (      fallbit.asm):00359                  ldd   7,s
                      (      fallbit.asm):00360                ENDC
099E ED41             (      fallbit.asm):00361         BadSkip  std   R$D,u        put starting bit # of block into callers D register
                      (      fallbit.asm):00362                IFNE  H6309
                      (      fallbit.asm):00363                  leas  $07,s        eat our temporary stack area & return
                      (      fallbit.asm):00364                ELSE
09A0 3269             (      fallbit.asm):00365                  leas  $09,s
                      (      fallbit.asm):00366                ENDC
09A2 39               (      fallbit.asm):00367                  rts
                      (  krnp2_beta5.asm):00400         
                      (  krnp2_beta5.asm):00401                  use    fgprdsc.asm
                      (      fgprdsc.asm):00001         **************************************************
                      (      fgprdsc.asm):00002         * System Call: F$GPrDsc
                      (      fgprdsc.asm):00003         *
                      (      fgprdsc.asm):00004         * Function: Get copy of process descriptor
                      (      fgprdsc.asm):00005         *
                      (      fgprdsc.asm):00006         * Input:  A = Desired process ID
                      (      fgprdsc.asm):00007         *         X = 512 byte buffer pointer
                      (      fgprdsc.asm):00008         *
                      (      fgprdsc.asm):00009         * Output: None
                      (      fgprdsc.asm):00010         *
                      (      fgprdsc.asm):00011         * Error:  CC = C bit set; B = error code
                      (      fgprdsc.asm):00012         *
09A3 9E50             (      fgprdsc.asm):00013         FGPrDsc  ldx   <D.Proc     Get current process dsc. ptr.
09A5 E606             (      fgprdsc.asm):00014                  ldb   P$Task,x    Get task number
09A7 A641             (      fgprdsc.asm):00015                  lda   R$A,u       Get requested process ID #
09A9 103F37           (      fgprdsc.asm):00016                  os9   F$GProcP    Get ptr to process to descriptor
09AC 250D             (      fgprdsc.asm):00017                  bcs   L0962       Error, exit with it
09AE 96D0             (      fgprdsc.asm):00018                  lda   <D.SysTsk   Get system task #
09B0 30A4             (      fgprdsc.asm):00019                  leax  ,y          Point X to the process descriptor
09B2 108E0200         (      fgprdsc.asm):00020                  ldy   #P$Size     Y=Size of process descriptor (512 bytes)
09B6 EE44             (      fgprdsc.asm):00021                  ldu   R$X,u       Get requested place to put copy of process dsc.
09B8 103F38           (      fgprdsc.asm):00022                  os9   F$Move      Move it into caller's space
09BB 39               (      fgprdsc.asm):00023         L0962    rts
                      (  krnp2_beta5.asm):00402         
                      (  krnp2_beta5.asm):00403                  use    fgblkmp.asm
                      (      fgblkmp.asm):00001         **************************************************
                      (      fgblkmp.asm):00002         * System Call: F$GBlkMp
                      (      fgblkmp.asm):00003         *
                      (      fgblkmp.asm):00004         * Function: 
                      (      fgblkmp.asm):00005         *
                      (      fgblkmp.asm):00006         * Input:  X = 1024 byte buffer pointer
                      (      fgblkmp.asm):00007         *
                      (      fgblkmp.asm):00008         * Output: D = Number of bytes per block
                      (      fgblkmp.asm):00009         *         Y = Size of system's memory block map
                      (      fgblkmp.asm):00010         *
                      (      fgblkmp.asm):00011         *
                      (      fgblkmp.asm):00012         * Error:  CC = C bit set; B = error code
                      (      fgblkmp.asm):00013         *
09BC CC2000           (      fgblkmp.asm):00014         FGBlkMp  ldd   #DAT.BlSz   # bytes per MMU block (8k)
09BF ED41             (      fgblkmp.asm):00015                  std   R$D,u       Put into caller's D register
09C1 DC42             (      fgblkmp.asm):00016                  ldd   <D.BlkMap+2 Get end of system block map ptr
09C3 9340             (      fgblkmp.asm):00017                  subd  <D.BlkMap   Subtract start of system block map ptr
09C5 ED46             (      fgblkmp.asm):00018                  std   R$Y,u       Store size of system block map in caller's Y reg.
09C7 1F02             (      fgblkmp.asm):00019                  tfr   d,y
09C9 96D0             (      fgblkmp.asm):00020                  lda   <D.SysTsk   Get system task #
09CB 9E50             (      fgblkmp.asm):00021                  ldx   <D.Proc     Get caller's task #
09CD E606             (      fgblkmp.asm):00022                  ldb   P$Task,x    get task # of caller
09CF 9E40             (      fgblkmp.asm):00023                  ldx   <D.BlkMap   Get start ptr of system block map
09D1 EE44             (      fgblkmp.asm):00024         L0978    ldu   R$X,u       Get addr to put it that caller requested
09D3 103F38           (      fgblkmp.asm):00025                  os9   F$Move      Move it into caller's space
09D6 39               (      fgblkmp.asm):00026                  rts
                      (  krnp2_beta5.asm):00404         
                      (  krnp2_beta5.asm):00405                  use    fgmoddr.asm
                      (      fgmoddr.asm):00001         **************************************************
                      (      fgmoddr.asm):00002         * System Call: F$GModDr
                      (      fgmoddr.asm):00003         *
                      (      fgmoddr.asm):00004         * Function: Get copy of module directory
                      (      fgmoddr.asm):00005         *
                      (      fgmoddr.asm):00006         * Input:  X = 2048 byte buffer pointer
                      (      fgmoddr.asm):00007         *
                      (      fgmoddr.asm):00008         * Output: None
                      (      fgmoddr.asm):00009         *
                      (      fgmoddr.asm):00010         * Error:  CC = C bit set; B = error code
                      (      fgmoddr.asm):00011         *
09D7 DC46             (      fgmoddr.asm):00012         FGModDr  ldd   <D.ModDir+2 Get end ptr of module directory
09D9 9344             (      fgmoddr.asm):00013                  subd  <D.ModDir   Calculate maximum size of module directory
09DB 1F02             (      fgmoddr.asm):00014                  tfr   d,y         Put max. size in Y
09DD DC58             (      fgmoddr.asm):00015                  ldd   <D.ModEnd   Get real end ptr of module dir
09DF 9344             (      fgmoddr.asm):00016                  subd  <D.ModDir   Calculate real size of module dir
09E1 AE44             (      fgmoddr.asm):00017                  ldx   R$X,u       Get requested buffer ptr to put it from caller
                      (      fgmoddr.asm):00018                IFNE  H6309
                      (      fgmoddr.asm):00019                  addr  d,x         Calculate end addr. of directory after its copied
                      (      fgmoddr.asm):00020                ELSE
09E3 308B             (      fgmoddr.asm):00021                  leax  d,x
                      (      fgmoddr.asm):00022                ENDC
09E5 AF46             (      fgmoddr.asm):00023                  stx   R$Y,u       Preserve in caller's Y register
09E7 9E44             (      fgmoddr.asm):00024                  ldx   <D.ModDir   Get start ptr of module directory
09E9 AF48             (      fgmoddr.asm):00025                  stx   R$U,u       Preserve in caller's U register
09EB 96D0             (      fgmoddr.asm):00026                  lda   <D.SysTsk   Get system task #
09ED 9E50             (      fgmoddr.asm):00027                  ldx   <D.Proc     Get current process task #
09EF E606             (      fgmoddr.asm):00028                  ldb   P$Task,x
09F1 9E44             (      fgmoddr.asm):00029                  ldx   <D.ModDir   Get start ptr of module directory
09F3 20DC             (      fgmoddr.asm):00030                  bra   L0978      --- saves 4 bytes, adds 3 cycles
                      (      fgmoddr.asm):00031         ***         ldu   R$X,u       Get caller's buffer ptr
                      (      fgmoddr.asm):00032         ***         os9   F$Move      Copy module directory in caller's buffer
                      (      fgmoddr.asm):00033         ***         rts   
                      (  krnp2_beta5.asm):00406         
                      (  krnp2_beta5.asm):00407                  use    fsuser.asm
                      (       fsuser.asm):00001         **************************************************
                      (       fsuser.asm):00002         * System Call: F$SUser
                      (       fsuser.asm):00003         *
                      (       fsuser.asm):00004         * Function: Set User ID number
                      (       fsuser.asm):00005         *
                      (       fsuser.asm):00006         * Input:  Y = Desired user ID number
                      (       fsuser.asm):00007         *
                      (       fsuser.asm):00008         * Output: None
                      (       fsuser.asm):00009         *
                      (       fsuser.asm):00010         * Error:  CC = C bit set; B = error code
                      (       fsuser.asm):00011         *
09F5 9E50             (       fsuser.asm):00012         FSUser   ldx   <D.Proc      get current process dsc ptr
09F7 EC46             (       fsuser.asm):00013                  ldd   R$Y,u        get requested user number
09F9 ED08             (       fsuser.asm):00014                  std   P$User,x     save new user # in process descriptor
09FB 5F               (       fsuser.asm):00015                  clrb               no error
09FC 39               (       fsuser.asm):00016                  rts                and return
                      (  krnp2_beta5.asm):00408         
                      (  krnp2_beta5.asm):00409                  use    funload.asm
                      (      funload.asm):00001         **************************************************
                      (      funload.asm):00002         * System Call: F$UnLoad
                      (      funload.asm):00003         *
                      (      funload.asm):00004         * Function: Unlink a module by name
                      (      funload.asm):00005         *
                      (      funload.asm):00006         * Input:  A = Module type
                      (      funload.asm):00007         *         X = Pointer to module name
                      (      funload.asm):00008         *
                      (      funload.asm):00009         * Output: None
                      (      funload.asm):00010         *
                      (      funload.asm):00011         * Error:  CC = C bit set; B = error code
                      (      funload.asm):00012         *
09FD 3440             (      funload.asm):00013         FUnLoad  pshs  u            preserve register stack pointer
09FF A641             (      funload.asm):00014                  lda   R$A,u        get module type
0A01 9E50             (      funload.asm):00015                  ldx   <D.Proc      get current process pointer
0A03 318840           (      funload.asm):00016                  leay  P$DATImg,x   point to DAT image
0A06 AE44             (      funload.asm):00017                  ldx   R$X,u        get pointer to name
0A08 103F4E           (      funload.asm):00018                  os9   F$FModul     find it in module directory
0A0B 3520             (      funload.asm):00019                  puls  y            restore register stack pointer
0A0D 2539             (      funload.asm):00020                  bcs   L0A4F        couldn't find it, return error
0A0F AF24             (      funload.asm):00021                  stx   R$X,y        save update name pointer
                      (      funload.asm):00022                IFNE  H6309
                      (      funload.asm):00023                  ldw   MD$Link,u    get link count
                      (      funload.asm):00024                  beq   L0A21        already 0 check if it's a I/O module
                      (      funload.asm):00025                  decw               subtract 1
                      (      funload.asm):00026                  stw   MD$Link,u    save it back
                      (      funload.asm):00027                ELSE
0A11 AE46             (      funload.asm):00028                  ldx   MD$Link,u    get module link count
0A13 2706             (      funload.asm):00029                  beq   L0A21        branch if zero
0A15 301F             (      funload.asm):00030                  leax  -1,x        else decrement
0A17 AF46             (      funload.asm):00031                  stx   MD$Link,u
                      (      funload.asm):00032                ENDC
0A19 262C             (      funload.asm):00033                  bne   L0A4E        not zero, don't remove from memory, return
                      (      funload.asm):00034         * Link count is zero, check if module can be removed from memory
0A1B 81D0             (      funload.asm):00035         L0A21    cmpa  #FlMgr       is it a I/O module?
0A1D 2525             (      funload.asm):00036                  blo   L0A4B        no, remove module from memory
                      (      funload.asm):00037         * Special handling for I/O module deletion
0A1F 4F               (      funload.asm):00038                  clra
0A20 AED4             (      funload.asm):00039                  ldx   [MD$MPDAT,u] get 1st 2 blocks in DAT image of module
0A22 109E4C           (      funload.asm):00040                  ldy   <D.SysDAT    get pointer to system DAT image
0A25 8B02             (      funload.asm):00041         L0A2B    adda  #2
0A27 8110             (      funload.asm):00042                  cmpa  #DAT.ImSz    done entire DAT?
0A29 2419             (      funload.asm):00043                  bcc   L0A4B        yes, delete the module from memory
0A2B ACA6             (      funload.asm):00044                  cmpx  a,y          find block?
0A2D 26F6             (      funload.asm):00045                  bne   L0A2B        no, keep looking
0A2F 48               (      funload.asm):00046                  lsla               multiply by 16 to calculate the offset
0A30 48               (      funload.asm):00047                  lsla
0A31 48               (      funload.asm):00048                  lsla
0A32 48               (      funload.asm):00049                  lsla
0A33 5F               (      funload.asm):00050                  clrb
0A34 E344             (      funload.asm):00051                  addd  MD$MPtr,u    add in the pointer
0A36 1F01             (      funload.asm):00052                  tfr   d,x          copy it to X
0A38 103F33           (      funload.asm):00053                  os9   F$IODel      delete the device from memory
0A3B 2407             (      funload.asm):00054                  bcc   L0A4B        no error, skip ahead
                      (      funload.asm):00055                IFNE  H6309
                      (      funload.asm):00056                  ldw   MD$Link,u    put link count back
                      (      funload.asm):00057                  incw
                      (      funload.asm):00058                  stw   MD$Link,u
                      (      funload.asm):00059                ELSE
0A3D AE46             (      funload.asm):00060                  ldx   MD$Link,u    put link count back
0A3F 3001             (      funload.asm):00061                  leax  1,x
0A41 AF46             (      funload.asm):00062                  stx   MD$Link,u
                      (      funload.asm):00063                ENDC
0A43 39               (      funload.asm):00064                  rts                Return with error
                      (      funload.asm):00065         
                      (      funload.asm):00066         * Delete module from memory
0A44 17F795           (      funload.asm):00067         L0A4B    lbsr  DelMod       Delete module from memory
0A47 5F               (      funload.asm):00068         L0A4E    clrb               clear errors
0A48 39               (      funload.asm):00069         L0A4F    rts                return
                      (  krnp2_beta5.asm):00410         
                      (  krnp2_beta5.asm):00411                  use    ffind64.asm
                      (      ffind64.asm):00001         **************************************************
                      (      ffind64.asm):00002         * System Call: F$Find64
                      (      ffind64.asm):00003         *
                      (      ffind64.asm):00004         * Function: Find a 64 byte memory block
                      (      ffind64.asm):00005         *
                      (      ffind64.asm):00006         * Input:  X = Address of page table
                      (      ffind64.asm):00007         *         A = Block number
                      (      ffind64.asm):00008         *
                      (      ffind64.asm):00009         * Output: Y = Address of block
                      (      ffind64.asm):00010         *
                      (      ffind64.asm):00011         * Error:  CC = C bit set; B = error code
                      (      ffind64.asm):00012         *
0A49 AE44             (      ffind64.asm):00013         FFind64  ldx   R$X,u        Get block tbl ptr
0A4B A641             (      ffind64.asm):00014                  lda   R$A,u        get path block #
                      (      ffind64.asm):00015         * Find a empty path block
0A4D 270F             (      ffind64.asm):00016                  beq   L0A70        None, return error
0A4F 5F               (      ffind64.asm):00017                  clrb               calculate address
                      (      ffind64.asm):00018                IFNE  H6309
                      (      ffind64.asm):00019                  lsrd               (Divide by 4)
                      (      ffind64.asm):00020                  lsrd
                      (      ffind64.asm):00021                ELSE
0A50 44               (      ffind64.asm):00022                  lsra
0A51 56               (      ffind64.asm):00023                  rorb
0A52 44               (      ffind64.asm):00024                  lsra
0A53 56               (      ffind64.asm):00025                  rorb
                      (      ffind64.asm):00026                ENDC
0A54 A686             (      ffind64.asm):00027                  lda   a,x          is that block allocated?
0A56 1F01             (      ffind64.asm):00028                  tfr   d,x          Move addr to X
0A58 2704             (      ffind64.asm):00029                  beq   L0A70        no, return error
0A5A 6D84             (      ffind64.asm):00030                  tst   ,x           this the page table?
0A5C 2602             (      ffind64.asm):00031                  bne   L0A71        no, we can use this one
0A5E 43               (      ffind64.asm):00032         L0A70    coma               set carry & return
0A5F 39               (      ffind64.asm):00033                  rts
                      (      ffind64.asm):00034         
0A60 AF46             (      ffind64.asm):00035         L0A71    stx   R$Y,u        save address of block
0A62 39               (      ffind64.asm):00036                  rts                return
                      (      ffind64.asm):00037         
                      (      ffind64.asm):00038         **************************************************
                      (      ffind64.asm):00039         * System Call: F$All64
                      (      ffind64.asm):00040         *
                      (      ffind64.asm):00041         * Function: Allocate a 64 byte memory block
                      (      ffind64.asm):00042         *
                      (      ffind64.asm):00043         * Input:  X = Address of page table (0 if page table hasn't been allocated)
                      (      ffind64.asm):00044         *
                      (      ffind64.asm):00045         * Output: A = Block number
                      (      ffind64.asm):00046         *         X = Address of page table
                      (      ffind64.asm):00047         *         Y = Address of block
                      (      ffind64.asm):00048         *
                      (      ffind64.asm):00049         * Error:  CC = C bit set; B = error code
                      (      ffind64.asm):00050         *
                      (      ffind64.asm):00051         *
0A63 AE44             (      ffind64.asm):00052         FAll64   ldx   R$X,u        get base address of page table
0A65 2608             (      ffind64.asm):00053                  bne   L0A7F        it's been allocated, skip ahead
0A67 8D10             (      ffind64.asm):00054                  bsr   L0A89        allocate the page
0A69 250D             (      ffind64.asm):00055                  bcs   L0A88        error allocating, return
0A6B AF84             (      ffind64.asm):00056                  stx   ,x           save base address in page table
0A6D AF44             (      ffind64.asm):00057                  stx   R$X,u        save base address to caller's X
0A6F 8D20             (      ffind64.asm):00058         L0A7F    bsr   L0A9F        find a empty spot in path table
0A71 2505             (      ffind64.asm):00059                  bcs   L0A88        couldn't find one, return error
0A73 A741             (      ffind64.asm):00060                  sta   R$A,u        save block #
0A75 10AF46           (      ffind64.asm):00061                  sty   R$Y,u        save address of block
0A78 39               (      ffind64.asm):00062         L0A88    rts                return
                      (      ffind64.asm):00063         
                      (      ffind64.asm):00064         * Allocate a new base page
                      (      ffind64.asm):00065         * Exit: X=Ptr to newly allocated 256 byte page
0A79 3440             (      ffind64.asm):00066         L0A89    pshs  u            preserve register stack pointer
                      (      ffind64.asm):00067                IFNE  H6309
                      (      ffind64.asm):00068                  ldq   #$01000100   get block size (1 for SRqMem & 1 for TFM)
                      (      ffind64.asm):00069                ELSE
0A7B CC0100           (      ffind64.asm):00070                  ldd   #$0100
                      (      ffind64.asm):00071                ENDC
0A7E 103F28           (      ffind64.asm):00072                  os9   F$SRqMem     request mem for it
0A81 30C4             (      ffind64.asm):00073                  leax  ,u           point to it
0A83 EEE4             (      ffind64.asm):00074                  ldu   ,s           restore register stack pointer
0A85 AFE4             (      ffind64.asm):00075                  stx   ,s           save pointer to new page on stack
0A87 2506             (      ffind64.asm):00076                  bcs   L0A9E        error on allocate, return
                      (      ffind64.asm):00077         * Clear freshly allocated page to 0's
                      (      ffind64.asm):00078                IFNE  H6309
                      (      ffind64.asm):00079                  leay  <TFMNull,pc  point to NULL byte
                      (      ffind64.asm):00080                  tfm   y,x+
                      (      ffind64.asm):00081                ELSE
0A89 5F               (      ffind64.asm):00082                  clrb
0A8A 6F80             (      ffind64.asm):00083         AllLoop  clr   ,x+
0A8C 5A               (      ffind64.asm):00084                  decb
0A8D 26FB             (      ffind64.asm):00085                  bne   AllLoop
                      (      ffind64.asm):00086                ENDC
0A8F 3590             (      ffind64.asm):00087         L0A9E    puls  x,pc
                      (      ffind64.asm):00088         
                      (      ffind64.asm):00089                IFNE  H6309
0A91                  (      ffind64.asm):00090         TFMNull  fcb   0            used to clear memory
                      (      ffind64.asm):00091                ENDC
                      (      ffind64.asm):00092         
                      (      ffind64.asm):00093         * Search page table for a free 64 byte block
                      (      ffind64.asm):00094         * Entry: X=Ptr to base page (the one with the 64 entry page index)
0A91 3450             (      ffind64.asm):00095         L0A9F    pshs  x,u          preserve base page & register stack ptrs
0A93 4F               (      ffind64.asm):00096                  clra               Index entry #=0
                      (      ffind64.asm):00097         * Main search loop
0A94 3402             (      ffind64.asm):00098         L0AA2    pshs  a            Save which index entry we are checking
0A96 5F               (      ffind64.asm):00099                  clrb               Set position within page we are checking to 0
0A97 A686             (      ffind64.asm):00100                  lda   a,x          Is the current index entry used?
0A99 270B             (      ffind64.asm):00101                  beq   L0AB4        no, skip ahead
0A9B 1F02             (      ffind64.asm):00102                  tfr   d,y          Yes, Move ptr to 256 byte block to Y
0A9D 4F               (      ffind64.asm):00103                  clra               Clear offset for 64 byte blocks to 0
0A9E 6DAB             (      ffind64.asm):00104         L0AAC    tst   d,y          Is this 64 byte block allocated?
0AA0 2706             (      ffind64.asm):00105                  beq   L0AB6        No, skip ahead
0AA2 CB40             (      ffind64.asm):00106                  addb  #$40         Yes, point to next 64 byte block in page
0AA4 24F8             (      ffind64.asm):00107                  bcc   L0AAC        If not done checking entire page, keep going
                      (      ffind64.asm):00108         
                      (      ffind64.asm):00109         * Index entry has a totally unused 256 byte page
0AA6 1A01             (      ffind64.asm):00110         L0AB4    orcc  #Carry       Set flag (didn't find one)
0AA8 31AB             (      ffind64.asm):00111         L0AB6    leay  d,y          
0AAA 3502             (      ffind64.asm):00112                  puls  a           Get which index entry we were checking
0AAC 2425             (      ffind64.asm):00113                  bcc   L0AE1        If we found a blank entry, go allocate it
0AAE 4C               (      ffind64.asm):00114                  inca               Didn't, move to next index entry
0AAF 8140             (      ffind64.asm):00115                  cmpa  #64          Done entire index?
0AB1 25E1             (      ffind64.asm):00116                  blo   L0AA2        no, keep looking
0AB3 4F               (      ffind64.asm):00117                  clra               Yes, clear out to first entry
0AB4 6D86             (      ffind64.asm):00118         L0AC2    tst   a,x          Is this one used?
0AB6 270A             (      ffind64.asm):00119                  beq   L0AD0        No, skip ahead
0AB8 4C               (      ffind64.asm):00120                  inca               Increment index entry #
0AB9 8140             (      ffind64.asm):00121                  cmpa  #64          Done entire index?
0ABB 25F7             (      ffind64.asm):00122                  blo   L0AC2        No, continue looking
0ABD 53               (      ffind64.asm):00123                  comb               Done all of them, exit with Path table full error
0ABE C6C8             (      ffind64.asm):00124                  ldb   #E$PthFul
0AC0 35D0             (      ffind64.asm):00125                  puls  x,u,pc
                      (      ffind64.asm):00126         
                      (      ffind64.asm):00127         * Found empty page
0AC2 3412             (      ffind64.asm):00128         L0AD0    pshs  x,a          Preserve index ptr & index entry #
0AC4 8DB3             (      ffind64.asm):00129                  bsr   L0A89        Allocate & clear out new 256 byte page
0AC6 251A             (      ffind64.asm):00130                  bcs   L0AF0        If error,exit
0AC8 3184             (      ffind64.asm):00131                  leay  ,x           Point Y to start of new page
0ACA 1F10             (      ffind64.asm):00132                  tfr   x,d          Also copy to D
0ACC 1F89             (      ffind64.asm):00133                  tfr   a,b          Page # into B
0ACE 3512             (      ffind64.asm):00134                  puls  x,a          Get back index ptr & index entry #
0AD0 E786             (      ffind64.asm):00135                  stb   a,x          Save page # in proper index entry
0AD2 5F               (      ffind64.asm):00136                  clrb               D=index entry #*256
                      (      ffind64.asm):00137         
                      (      ffind64.asm):00138         * D = Block Address
     0AD3             (      ffind64.asm):00139         L0AE1    equ   *
                      (      ffind64.asm):00140                IFNE  H6309
                      (      ffind64.asm):00141                  lsld               ???Calculate 256 byte page #?
                      (      ffind64.asm):00142                  lsld
                      (      ffind64.asm):00143                  tfr   y,u          U=Ptr to start of new page
                      (      ffind64.asm):00144                  ldw   #$3f         Clear out the 64 byte block we are using
                      (      ffind64.asm):00145                  leax  <TFMNull,pc
                      (      ffind64.asm):00146                  tfm   x,u+
                      (      ffind64.asm):00147                ELSE
0AD3 58               (      ffind64.asm):00148                  aslb
0AD4 49               (      ffind64.asm):00149                  rola
0AD5 58               (      ffind64.asm):00150                  aslb
0AD6 49               (      ffind64.asm):00151                  rola
0AD7 C63F             (      ffind64.asm):00152                  ldb   #$3f
0AD9 6FA5             (      ffind64.asm):00153         ClrIt    clr   b,y
0ADB 5A               (      ffind64.asm):00154                  decb
0ADC 26FB             (      ffind64.asm):00155                  bne   ClrIt
                      (      ffind64.asm):00156                ENDC
0ADE A7A4             (      ffind64.asm):00157                  sta   ,y           Save 256 byte page # as 1st byte of block
0AE0 35D0             (      ffind64.asm):00158                  puls  x,u,pc
                      (      ffind64.asm):00159         
0AE2 3263             (      ffind64.asm):00160         L0AF0    leas  3,s
0AE4 35D0             (      ffind64.asm):00161                  puls  x,u,pc
                      (      ffind64.asm):00162         
                      (      ffind64.asm):00163         
                      (      ffind64.asm):00164         **************************************************
                      (      ffind64.asm):00165         * System Call: F$Ret64
                      (      ffind64.asm):00166         *
                      (      ffind64.asm):00167         * Function: Deallocate a 64 byte memory block
                      (      ffind64.asm):00168         *
                      (      ffind64.asm):00169         * Input:  X = Address of page table
                      (      ffind64.asm):00170         *         A = Block number
                      (      ffind64.asm):00171         *
                      (      ffind64.asm):00172         * Output: None
                      (      ffind64.asm):00173         *
                      (      ffind64.asm):00174         * Error:  CC = C bit set; B = error code
                      (      ffind64.asm):00175         *
0AE6 A641             (      ffind64.asm):00176         FRet64   lda   R$A,u
0AE8 AE44             (      ffind64.asm):00177                  ldx   R$X,u
0AEA 3476             (      ffind64.asm):00178                  pshs  u,y,x,d
0AEC 5F               (      ffind64.asm):00179                  clrb
0AED 4D               (      ffind64.asm):00180                  tsta
0AEE 2724             (      ffind64.asm):00181                  beq   L0B22
                      (      ffind64.asm):00182                IFNE  H6309
                      (      ffind64.asm):00183                  lsrd               (Divide by 4)
                      (      ffind64.asm):00184                  lsrd
                      (      ffind64.asm):00185                ELSE
0AF0 44               (      ffind64.asm):00186                  lsra
0AF1 56               (      ffind64.asm):00187                  rorb
0AF2 44               (      ffind64.asm):00188                  lsra
0AF3 56               (      ffind64.asm):00189                  rorb
                      (      ffind64.asm):00190                ENDC
0AF4 3402             (      ffind64.asm):00191                  pshs  a
0AF6 A686             (      ffind64.asm):00192                  lda   a,x
0AF8 2718             (      ffind64.asm):00193                  beq   L0B20
0AFA 1F02             (      ffind64.asm):00194                  tfr   d,y
0AFC 6FA4             (      ffind64.asm):00195                  clr   ,y
0AFE 5F               (      ffind64.asm):00196                  clrb
0AFF 1F03             (      ffind64.asm):00197                  tfr   d,u
0B01 4F               (      ffind64.asm):00198                  clra
0B02 6DCB             (      ffind64.asm):00199         L0B10    tst   d,u
0B04 260C             (      ffind64.asm):00200                  bne   L0B20
0B06 CB40             (      ffind64.asm):00201                  addb  #$40
0B08 26F8             (      ffind64.asm):00202                  bne   L0B10
0B0A 4C               (      ffind64.asm):00203                  inca
0B0B 103F29           (      ffind64.asm):00204                  os9   F$SRtMem
0B0E A6E4             (      ffind64.asm):00205                  lda   ,s
0B10 6F86             (      ffind64.asm):00206                  clr   a,x
0B12 6FE0             (      ffind64.asm):00207         L0B20    clr   ,s+
0B14 35F6             (      ffind64.asm):00208         L0B22    puls  pc,u,y,x,d
                      (  krnp2_beta5.asm):00412         
                      (  krnp2_beta5.asm):00413                  use    fgprocp.asm
                      (      fgprocp.asm):00001         **************************************************
                      (      fgprocp.asm):00002         * System Call: F$GProcP
                      (      fgprocp.asm):00003         *
                      (      fgprocp.asm):00004         * Function: Get process pointer
                      (      fgprocp.asm):00005         *
                      (      fgprocp.asm):00006         * Input:  A = Process ID
                      (      fgprocp.asm):00007         *
                      (      fgprocp.asm):00008         * Output: Y = Pointer to process descriptor
                      (      fgprocp.asm):00009         *
                      (      fgprocp.asm):00010         * Error:  CC = C bit set; B = error code
                      (      fgprocp.asm):00011         *
0B16 A641             (      fgprocp.asm):00012         FGProcP  lda   R$A,u        get process #
0B18 8D06             (      fgprocp.asm):00013                  bsr   L0B2E        Get ptr to process descriptor
0B1A 2503             (      fgprocp.asm):00014                  bcs   L0B2D        If error, exit with it
0B1C 10AF46           (      fgprocp.asm):00015                  sty   R$Y,u        Save ptr in caller's Y
0B1F 39               (      fgprocp.asm):00016         L0B2D    rts                Return
                      (      fgprocp.asm):00017         
                      (      fgprocp.asm):00018         * Entry: A=Process #
                      (      fgprocp.asm):00019         * Exit:  Y=Ptr to process descriptor
                      (      fgprocp.asm):00020         *  All others preserved
0B20 3416             (      fgprocp.asm):00021         L0B2E    pshs  d,x          Preserve regs
0B22 E6E4             (      fgprocp.asm):00022                  ldb   ,s           Get process # into B
0B24 270C             (      fgprocp.asm):00023                  beq   L0B40        0, skip ahead
0B26 9E48             (      fgprocp.asm):00024                  ldx   <D.PrcDBT    Get ptr to process descriptor block table
0B28 3A               (      fgprocp.asm):00025                  abx                Point to specific process' entry
0B29 A684             (      fgprocp.asm):00026                  lda   ,x           Get MSB of process dsc. ptr
0B2B 2705             (      fgprocp.asm):00027                  beq   L0B40        None there, exit with error
0B2D 5F               (      fgprocp.asm):00028                  clrb               Clear LSB of process dsc. ptr (always fall on $200
0B2E 1F02             (      fgprocp.asm):00029                  tfr   d,y            boundaries) & move ptr to Y
0B30 3596             (      fgprocp.asm):00030                  puls  d,x,pc       Restore regs & return
                      (      fgprocp.asm):00031         
0B32 3516             (      fgprocp.asm):00032         L0B40    puls  d,x          Get regs back
0B34 53               (      fgprocp.asm):00033                  comb               Exit with Bad process ID error
0B35 C6E0             (      fgprocp.asm):00034                  ldb   #E$BPrcID
0B37 39               (      fgprocp.asm):00035                  rts
                      (  krnp2_beta5.asm):00414         
                      (  krnp2_beta5.asm):00415                  use    fdelimg.asm
                      (      fdelimg.asm):00001         **************************************************
                      (      fdelimg.asm):00002         * System Call: F$DelImg
                      (      fdelimg.asm):00003         *
                      (      fdelimg.asm):00004         * Function: Deallocate image RAM blocks
                      (      fdelimg.asm):00005         *
                      (      fdelimg.asm):00006         * Input:  A = Beginning block number
                      (      fdelimg.asm):00007         *         B = Block count
                      (      fdelimg.asm):00008         *         X = Process descriptor pointer
                      (      fdelimg.asm):00009         *
                      (      fdelimg.asm):00010         * Output: None
                      (      fdelimg.asm):00011         *
                      (      fdelimg.asm):00012         * Error:  CC = C bit set; B = error code
                      (      fdelimg.asm):00013         *
0B38 AE44             (      fdelimg.asm):00014         FDelImg  ldx   R$X,u        get process pointer
0B3A EC41             (      fdelimg.asm):00015                  ldd   R$D,u        get start block & block count
0B3C 338840           (      fdelimg.asm):00016                  leau  <P$DATImg,x  point to DAT image
0B3F 48               (      fdelimg.asm):00017                  lsla               2 bytes per block entry
0B40 33C6             (      fdelimg.asm):00018                  leau  a,u          Point U to block entry
                      (      fdelimg.asm):00019         * Block count in B
0B42                  (      fdelimg.asm):00020         L0B55    
                      (      fdelimg.asm):00021                IFNE  H6309
                      (      fdelimg.asm):00022                  ldw   ,u           Get block #
                      (      fdelimg.asm):00023                  addw  <D.BlkMap    Add it to map ptr
                      (      fdelimg.asm):00024                  aim   #^RAMinUse,0,w
                      (      fdelimg.asm):00025                  ldw   #DAT.Free    get empty block marker
                      (      fdelimg.asm):00026                  stw   ,u++         save it to process descriptor
                      (      fdelimg.asm):00027                  decb               done?
                      (      fdelimg.asm):00028                  bne   L0B55        No, keep going
                      (      fdelimg.asm):00029                  oim   #ImgChg,P$State,x
                      (      fdelimg.asm):00030                ELSE
0B42 4F               (      fdelimg.asm):00031                  clra
0B43 1F02             (      fdelimg.asm):00032                  tfr   d,y
0B45 3410             (      fdelimg.asm):00033                  pshs  x
0B47 ECC4             (      fdelimg.asm):00034         L0BLoop  ldd   ,u
0B49 D340             (      fdelimg.asm):00035                  addd  <D.BlkMap
0B4B 1F01             (      fdelimg.asm):00036                  tfr   d,x
0B4D A684             (      fdelimg.asm):00037                  lda   ,x
0B4F 84FE             (      fdelimg.asm):00038                  anda  #^RAMinUse
0B51 A784             (      fdelimg.asm):00039                  sta   ,x
0B53 CC333E           (      fdelimg.asm):00040                  ldd   #DAT.Free
0B56 EDC1             (      fdelimg.asm):00041                  std   ,u++
0B58 313F             (      fdelimg.asm):00042                  leay  -1,y
0B5A 26EB             (      fdelimg.asm):00043                  bne   L0BLoop
0B5C 3510             (      fdelimg.asm):00044                  puls  x
0B5E A60C             (      fdelimg.asm):00045                  lda   P$State,x
0B60 8A10             (      fdelimg.asm):00046                  ora   #ImgChg
0B62 A70C             (      fdelimg.asm):00047                  sta   P$State,x
                      (      fdelimg.asm):00048                ENDC
0B64 5F               (      fdelimg.asm):00049                  clrb
0B65 39               (      fdelimg.asm):00050                  rts
                      (      fdelimg.asm):00051         
                      (  krnp2_beta5.asm):00416         
                      (  krnp2_beta5.asm):00417                  use    fmapblk.asm
                      (      fmapblk.asm):00001         **************************************************
                      (      fmapblk.asm):00002         * System Call: F$MapBlk
                      (      fmapblk.asm):00003         *
                      (      fmapblk.asm):00004         * Function: Map specific block
                      (      fmapblk.asm):00005         *
                      (      fmapblk.asm):00006         * Input:  B = Number of blocks
                      (      fmapblk.asm):00007         *         X = Beginning block number
                      (      fmapblk.asm):00008         *
                      (      fmapblk.asm):00009         * Output: U = Address of first block
                      (      fmapblk.asm):00010         *
                      (      fmapblk.asm):00011         * Error:  CC = C bit set; B = error code
                      (      fmapblk.asm):00012         *
0B66 A642             (      fmapblk.asm):00013         FMapBlk  lda   R$B,u        get # blocks
0B68 2733             (      fmapblk.asm):00014                  beq   L0BAA        can't map 0 blocks, return error
0B6A 8108             (      fmapblk.asm):00015                  cmpa  #DAT.BlCt    within range of DAT image?
0B6C 222F             (      fmapblk.asm):00016                  bhi   L0BAA        no, return error
0B6E 3270             (      fmapblk.asm):00017                  leas  -$10,s       make a buffer to hold DAT image
0B70 AE44             (      fmapblk.asm):00018                  ldx   R$X,u        get start block #
0B72 C601             (      fmapblk.asm):00019                  ldb   #1           block increment value
                      (      fmapblk.asm):00020                IFNE  H6309
                      (      fmapblk.asm):00021         * Change to W 05/19/93 - used W since one cycle faster per block
                      (      fmapblk.asm):00022                  tfr   s,w          point to buffer
0B74                  (      fmapblk.asm):00023         FMapBlk2 stx   ,w++         save block # to buffer
                      (      fmapblk.asm):00024                ELSE
0B74 1F42             (      fmapblk.asm):00025                  tfr   s,y          point to buffer
0B76 AFA1             (      fmapblk.asm):00026         FMapBlk2 stx   ,y++         save block # to buffer
                      (      fmapblk.asm):00027                ENDC
0B78 3A               (      fmapblk.asm):00028                  abx                Next block
0B79 4A               (      fmapblk.asm):00029                  deca               done?
0B7A 26FA             (      fmapblk.asm):00030                  bne   FMapBlk2     no, keep going
0B7C E642             (      fmapblk.asm):00031                  ldb   R$B,u        get block count again
0B7E 9E50             (      fmapblk.asm):00032                  ldx   <D.Proc      get process pointer
0B80 318840           (      fmapblk.asm):00033                  leay  <P$DATImg,x  point to DAT image
0B83 103F3E           (      fmapblk.asm):00034                  os9   F$FreeHB     find the highest free block offset
0B86 2511             (      fmapblk.asm):00035                  bcs   L0BA6        no room, return error
                      (      fmapblk.asm):00036                IFNE  H6309
                      (      fmapblk.asm):00037                  tfr   d,w          Preserve start block # & # of blocks
                      (      fmapblk.asm):00038                ELSE
0B88 3406             (      fmapblk.asm):00039                  pshs  d
                      (      fmapblk.asm):00040                ENDC
0B8A 48               (      fmapblk.asm):00041                  lsla               Multiply start block # by 32
0B8B 48               (      fmapblk.asm):00042                  lsla
0B8C 48               (      fmapblk.asm):00043                  lsla
0B8D 48               (      fmapblk.asm):00044                  lsla
0B8E 48               (      fmapblk.asm):00045                  lsla
0B8F 5F               (      fmapblk.asm):00046                  clrb
0B90 ED48             (      fmapblk.asm):00047                  std   R$U,u        save address of first block
                      (      fmapblk.asm):00048                IFNE  H6309
                      (      fmapblk.asm):00049                  tfr   w,d          Restore offset
                      (      fmapblk.asm):00050                ELSE
0B92 3506             (      fmapblk.asm):00051                  puls  d
                      (      fmapblk.asm):00052                ENDC
0B94 33E4             (      fmapblk.asm):00053                  leau  ,s           move DAT image into process descriptor
0B96 103F3C           (      fmapblk.asm):00054                  os9   F$SetImg     Change process dsc to reflect new blocks
0B99 32E810           (      fmapblk.asm):00055         L0BA6    leas  <$10,s       Eat DAT image copy & return
0B9C 39               (      fmapblk.asm):00056                  rts
                      (      fmapblk.asm):00057         
0B9D 53               (      fmapblk.asm):00058         L0BAA    comb               Illegal Block address error
0B9E C6DB             (      fmapblk.asm):00059                  ldb   #E$IBA
0BA0 39               (      fmapblk.asm):00060                  rts
                      (  krnp2_beta5.asm):00418         
                      (  krnp2_beta5.asm):00419                  use    fclrblk.asm
                      (      fclrblk.asm):00001         **************************************************
                      (      fclrblk.asm):00002         * System Call: F$ClrBlk
                      (      fclrblk.asm):00003         *
                      (      fclrblk.asm):00004         * Function: Clear RAM blocks
                      (      fclrblk.asm):00005         *
                      (      fclrblk.asm):00006         * Input:  B = Number of blocks
                      (      fclrblk.asm):00007         *         U = Address of first block
                      (      fclrblk.asm):00008         *
                      (      fclrblk.asm):00009         * Output: None
                      (      fclrblk.asm):00010         *
                      (      fclrblk.asm):00011         * Error:  CC = C bit set; B = error code
                      (      fclrblk.asm):00012         *
0BA1 E642             (      fclrblk.asm):00013         FClrBlk  ldb   R$B,u
0BA3 2737             (      fclrblk.asm):00014                  beq   L0BE9
0BA5 EC48             (      fclrblk.asm):00015                  ldd   R$U,u
0BA7 5D               (      fclrblk.asm):00016                  tstb  
0BA8 26F3             (      fclrblk.asm):00017                  bne   L0BAA
0BAA 851F             (      fclrblk.asm):00018                  bita  #$1F
0BAC 26EF             (      fclrblk.asm):00019                  bne   L0BAA
0BAE 9E50             (      fclrblk.asm):00020                  ldx   <D.Proc
0BB0 A604             (      fclrblk.asm):00021                  lda   P$SP,x
0BB2 84E0             (      fclrblk.asm):00022                  anda  #$E0
0BB4 A048             (      fclrblk.asm):00023                  suba  R$U,u
0BB6 2509             (      fclrblk.asm):00024                  bcs   L0BCE
0BB8 44               (      fclrblk.asm):00025                  lsra
0BB9 44               (      fclrblk.asm):00026                  lsra
0BBA 44               (      fclrblk.asm):00027                  lsra
0BBB 44               (      fclrblk.asm):00028                  lsra
0BBC 44               (      fclrblk.asm):00029                  lsra
0BBD A142             (      fclrblk.asm):00030                  cmpa  R$B,u
0BBF 25DC             (      fclrblk.asm):00031                  bcs   L0BAA
0BC1                  (      fclrblk.asm):00032         L0BCE    
                      (      fclrblk.asm):00033                IFNE  H6309
                      (      fclrblk.asm):00034                  oim   #ImgChg,P$State,x
                      (      fclrblk.asm):00035                ELSE
0BC1 A60C             (      fclrblk.asm):00036                  lda   P$State,x
0BC3 8A10             (      fclrblk.asm):00037                  ora   #ImgChg
0BC5 A70C             (      fclrblk.asm):00038                  sta   P$State,x
                      (      fclrblk.asm):00039                ENDC
0BC7 A648             (      fclrblk.asm):00040                  lda   R$U,u
0BC9 44               (      fclrblk.asm):00041                  lsra
0BCA 44               (      fclrblk.asm):00042                  lsra
0BCB 44               (      fclrblk.asm):00043                  lsra
0BCC 44               (      fclrblk.asm):00044                  lsra
0BCD 318840           (      fclrblk.asm):00045                  leay  P$DATImg,x
0BD0 31A6             (      fclrblk.asm):00046                  leay  a,y
0BD2 E642             (      fclrblk.asm):00047                  ldb   R$B,u
0BD4 8E333E           (      fclrblk.asm):00048                  ldx   #DAT.Free
0BD7 AFA1             (      fclrblk.asm):00049         L0BE4    stx   ,y++
0BD9 5A               (      fclrblk.asm):00050                  decb
0BDA 26FB             (      fclrblk.asm):00051                  bne   L0BE4
0BDC 5F               (      fclrblk.asm):00052         L0BE9    clrb
0BDD 39               (      fclrblk.asm):00053                  rts
                      (  krnp2_beta5.asm):00420         
                      (  krnp2_beta5.asm):00421                  use    fgcmdir.asm
                      (      fgcmdir.asm):00001         **************************************************
                      (      fgcmdir.asm):00002         * System Call: F$GCMDir
                      (      fgcmdir.asm):00003         *
                      (      fgcmdir.asm):00004         * Notes:
                      (      fgcmdir.asm):00005         * This system call is only used by OS9p1 to get rid of all
                      (      fgcmdir.asm):00006         * the empty spaces in the module directory to keep it small
                      (      fgcmdir.asm):00007         * and compact.
                      (      fgcmdir.asm):00008         *
                      (      fgcmdir.asm):00009         * Input:  X = Address of allocation bitmap
                      (      fgcmdir.asm):00010         *         D = Number of first bit to set
                      (      fgcmdir.asm):00011         *         Y = Bit count (number of bits to set)
                      (      fgcmdir.asm):00012         *
                      (      fgcmdir.asm):00013         * Output: None
                      (      fgcmdir.asm):00014         *
                      (      fgcmdir.asm):00015         * Error:  CC = C bit set; B = error code
                      (      fgcmdir.asm):00016         *
0BDE 9E44             (      fgcmdir.asm):00017         FGCMDir  ldx   <D.ModDir    get pointer to module directory start
0BE0 2006             (      fgcmdir.asm):00018                  bra   L0C1D        skip ahead
                      (      fgcmdir.asm):00019         
0BE2 EE84             (      fgcmdir.asm):00020         L0C17    ldu   MD$MPDAT,x   DAT initialized?
0BE4 2708             (      fgcmdir.asm):00021                  beq   L0C23        no it's empty skip ahead
0BE6 3008             (      fgcmdir.asm):00022                  leax  MD$ESize,x   move to next entry
0BE8 9C58             (      fgcmdir.asm):00023         L0C1D    cmpx  <D.ModEnd    end of module directory?
0BEA 26F6             (      fgcmdir.asm):00024                  bne   L0C17        no, keep looking
0BEC 2028             (      fgcmdir.asm):00025                  bra   L0C4B
                      (      fgcmdir.asm):00026         
                      (      fgcmdir.asm):00027         * Move all entrys up 1 slot in directory
0BEE 1F12             (      fgcmdir.asm):00028         L0C23    tfr   x,y          move empty entry pointer to Y
0BF0 2004             (      fgcmdir.asm):00029                  bra   L0C2B
                      (      fgcmdir.asm):00030         
0BF2 EEA4             (      fgcmdir.asm):00031         L0C27    ldu   MD$MPDAT,y
0BF4 2609             (      fgcmdir.asm):00032                  bne   L0C34
0BF6 3128             (      fgcmdir.asm):00033         L0C2B    leay  MD$ESize,y
0BF8 109C58           (      fgcmdir.asm):00034                  cmpy  <D.ModEnd    done complete directory?
0BFB 26F5             (      fgcmdir.asm):00035                  bne   L0C27        no, keep going
0BFD 2015             (      fgcmdir.asm):00036                  bra   L0C49
                      (      fgcmdir.asm):00037         
                      (      fgcmdir.asm):00038         * Move entry up 1 slot in directory
     0BFF             (      fgcmdir.asm):00039         L0C34    equ   *
                      (      fgcmdir.asm):00040                IFNE  H6309
                      (      fgcmdir.asm):00041                  ldw   #MD$ESize
                      (      fgcmdir.asm):00042                  tfm   y+,x+
                      (      fgcmdir.asm):00043                ELSE
0BFF EEA1             (      fgcmdir.asm):00044                  ldu   ,y++
0C01 EF81             (      fgcmdir.asm):00045                  stu   ,x++
0C03 EEA1             (      fgcmdir.asm):00046                  ldu   ,y++
0C05 EF81             (      fgcmdir.asm):00047                  stu   ,x++
0C07 EEA1             (      fgcmdir.asm):00048                  ldu   ,y++
0C09 EF81             (      fgcmdir.asm):00049                  stu   ,x++
0C0B EEA1             (      fgcmdir.asm):00050                  ldu   ,y++
0C0D EF81             (      fgcmdir.asm):00051                  stu   ,x++
                      (      fgcmdir.asm):00052                ENDC
0C0F 109C58           (      fgcmdir.asm):00053         L0C44    cmpy  <D.ModEnd    done complete directory?
0C12 26DE             (      fgcmdir.asm):00054                  bne   L0C27        no, keep going
0C14 9F58             (      fgcmdir.asm):00055         L0C49    stx   <D.ModEnd    save new module directory end pointer
                      (      fgcmdir.asm):00056         * Shrink DAT table
0C16 9E46             (      fgcmdir.asm):00057         L0C4B    ldx   <D.ModDir+2  get module directory DAT end pointer
0C18 2004             (      fgcmdir.asm):00058                  bra   L0C53
                      (      fgcmdir.asm):00059         
0C1A EE84             (      fgcmdir.asm):00060         L0C4F    ldu   ,x
0C1C 2708             (      fgcmdir.asm):00061                  beq   L0C5B
0C1E 301E             (      fgcmdir.asm):00062         L0C53    leax  -2,x         Bump module ptr down by 2
0C20 9C5A             (      fgcmdir.asm):00063                  cmpx  <D.ModDAT    Hit beginning yet?
0C22 26F6             (      fgcmdir.asm):00064                  bne   L0C4F        No, keep checking
0C24 5F               (      fgcmdir.asm):00065                  clrb               Yes, return without error
0C25 39               (      fgcmdir.asm):00066                  rts
                      (      fgcmdir.asm):00067         
0C26 EE1E             (      fgcmdir.asm):00068         L0C5B    ldu   -2,x
0C28 26F4             (      fgcmdir.asm):00069                  bne   L0C53
0C2A 1F12             (      fgcmdir.asm):00070                  tfr   x,y
0C2C 2004             (      fgcmdir.asm):00071                  bra   L0C67
                      (      fgcmdir.asm):00072         
0C2E EEA4             (      fgcmdir.asm):00073         L0C63    ldu   ,y
0C30 2609             (      fgcmdir.asm):00074                  bne   L0C70
0C32 313E             (      fgcmdir.asm):00075         L0C67    leay  -2,y
0C34 109C5A           (      fgcmdir.asm):00076         L0C69    cmpy  <D.ModDAT
0C37 24F5             (      fgcmdir.asm):00077                  bcc   L0C63
0C39 2011             (      fgcmdir.asm):00078                  bra   L0C81
                      (      fgcmdir.asm):00079         
0C3B 3122             (      fgcmdir.asm):00080         L0C70    leay  2,y
0C3D EEA4             (      fgcmdir.asm):00081                  ldu   ,y
0C3F EF84             (      fgcmdir.asm):00082                  stu   ,x
0C41 EEA3             (      fgcmdir.asm):00083         L0C76    ldu   ,--y
0C43 EF83             (      fgcmdir.asm):00084                  stu   ,--x
0C45 270B             (      fgcmdir.asm):00085                  beq   L0C87
0C47 109C5A           (      fgcmdir.asm):00086                  cmpy  <D.ModDAT
0C4A 26F5             (      fgcmdir.asm):00087                  bne   L0C76
0C4C 9F5A             (      fgcmdir.asm):00088         L0C81    stx   <D.ModDAT
0C4E 8D0E             (      fgcmdir.asm):00089                  bsr   L0C95
0C50 5F               (      fgcmdir.asm):00090                  clrb               Yes, return without error
0C51 39               (      fgcmdir.asm):00091                  rts
                      (      fgcmdir.asm):00092         
0C52 3122             (      fgcmdir.asm):00093         L0C87    leay  2,y
0C54 3002             (      fgcmdir.asm):00094                  leax  2,x
0C56 8D06             (      fgcmdir.asm):00095                  bsr   L0C95
0C58 313C             (      fgcmdir.asm):00096                  leay  -4,y
0C5A 301E             (      fgcmdir.asm):00097                  leax  -2,x
0C5C 20D6             (      fgcmdir.asm):00098                  bra   L0C69
                      (      fgcmdir.asm):00099         
                      (      fgcmdir.asm):00100         * Update Module Dir Image Ptrs
0C5E 3440             (      fgcmdir.asm):00101         L0C95    pshs  u
0C60 DE44             (      fgcmdir.asm):00102                  ldu   <D.ModDir
0C62 2009             (      fgcmdir.asm):00103                  bra   L0CA4
                      (      fgcmdir.asm):00104         
0C64 10ACC4           (      fgcmdir.asm):00105         L0C9B    cmpy  MD$MPDAT,u   same DAT ptrs?
0C67 2602             (      fgcmdir.asm):00106                  bne   L0CA2        no, skip
0C69 AFC4             (      fgcmdir.asm):00107                  stx   MD$MPDAT,u   else update ptrs
0C6B 3348             (      fgcmdir.asm):00108         L0CA2    leau  MD$ESize,u   next entry
0C6D 119358           (      fgcmdir.asm):00109         L0CA4    cmpu  <D.ModEnd    last entry?
0C70 26F2             (      fgcmdir.asm):00110                  bne   L0C9B        no
0C72 35C0             (      fgcmdir.asm):00111                  puls  u,pc         else yes... return
                      (  krnp2_beta5.asm):00422         
                      (  krnp2_beta5.asm):00423                  use    fdebug.asm
                      (       fdebug.asm):00001         ******************************************************
                      (       fdebug.asm):00002         * F$Debug entry point
                      (       fdebug.asm):00003         *
                      (       fdebug.asm):00004         * Enter the debugger (or reboot)
                      (       fdebug.asm):00005         *
                      (       fdebug.asm):00006         * Input:  A = Function code
                      (       fdebug.asm):00007         *
                      (       fdebug.asm):00008         
                      (       fdebug.asm):00009         * Determine if this is a system process or super user
                      (       fdebug.asm):00010         * Only they have permission to reboot
0C74 A641             (       fdebug.asm):00011         FDebug   lda   R$A,u
0C76 81FF             (       fdebug.asm):00012                  cmpa  #255         reboot request
0C78 2609             (       fdebug.asm):00013                  bne   leave        nope
0C7A 9E50             (       fdebug.asm):00014                  ldx   <D.Proc
0C7C EC08             (       fdebug.asm):00015                  ldd   P$User,x     get user ID
0C7E 2704             (       fdebug.asm):00016                  beq   REBOOT
0C80 53               (       fdebug.asm):00017                  comb
0C81 C6D0             (       fdebug.asm):00018                  ldb   #E$UnkSvc
0C83 39               (       fdebug.asm):00019         leave    rts
                      (       fdebug.asm):00020         
                      (       fdebug.asm):00021         * NOTE: HIGHLY MACHINE DEPENDENT CODE!
                      (       fdebug.asm):00022         * THIS CODE IS SPECIFIC TO THE COCO 3!
0C84 1A50             (       fdebug.asm):00023         REBOOT   orcc  #IntMasks  turn off IRQ's
0C86 5F               (       fdebug.asm):00024                  clrb
0C87 F7FFA0           (       fdebug.asm):00025                  stb   >$FFA0       map in block 0
0C8A F70071           (       fdebug.asm):00026                  stb   >$0071       cold reboot
0C8D 8638             (       fdebug.asm):00027                  lda   #$38         bottom of DECB block mapping
0C8F B7FFA0           (       fdebug.asm):00028                  sta   >$FFA0       map in block zero
0C92 F70071           (       fdebug.asm):00029                  stb   >$0071       and cold reboot here, too
0C95 CE0000           (       fdebug.asm):00030                  ldu   #$0000       force code to go at offset $0000
0C98 308C12           (       fdebug.asm):00031                  leax  <ReBootLoc,pc  reboot code
                      (       fdebug.asm):00032         * LCB 6809/6309 optimization - use ldb #CodeSize, and decb
                      (       fdebug.asm):00033         * Faster, and smaller
                      (       fdebug.asm):00034         *         ldy   #CodeSize
                      (       fdebug.asm):00035         *cit.loop lda   ,x+
                      (       fdebug.asm):00036         *         sta   ,u+
                      (       fdebug.asm):00037         *         leay  -1,y
                      (       fdebug.asm):00038         *         bne   cit.loop
0C9B C628             (       fdebug.asm):00039                  ldb   #CodeSize    # of bytes to copy
0C9D A680             (       fdebug.asm):00040         cit.loop lda   ,x+          Copy bytes
0C9F A7C0             (       fdebug.asm):00041                  sta   ,u+
0CA1 5A               (       fdebug.asm):00042                  decb               until done
0CA2 26F9             (       fdebug.asm):00043                  bne   cit.loop
0CA4 7FFEED           (       fdebug.asm):00044                  clr   >$FEED       cold reboot
0CA7 7FFFD8           (       fdebug.asm):00045                  clr   >$FFD8       go to low speed
0CAA 7E0000           (       fdebug.asm):00046                  jmp   >$0000       jump to the reset code
                      (       fdebug.asm):00047         
0CAD                  (       fdebug.asm):00048         ReBootLoc
0CAD CC3808           (       fdebug.asm):00049                  ldd   #$3808       block $38, 8 times
0CB0 8EFFA0           (       fdebug.asm):00050                  ldx   #$FFA0       where to put it
0CB3 A708             (       fdebug.asm):00051         Lp       sta   8,x          put into map 1
0CB5 A780             (       fdebug.asm):00052                  sta   ,x+          and into map 0
0CB7 4C               (       fdebug.asm):00053                  inca
0CB8 5A               (       fdebug.asm):00054                  decb               count down
0CB9 26F8             (       fdebug.asm):00055                  bne   Lp
0CBB 864C             (       fdebug.asm):00056                  lda   #$4C         standard DECB mapping
0CBD B7FF90           (       fdebug.asm):00057                  sta   >$FF90
0CC0 7FFF91           (       fdebug.asm):00058                  clr   >$FF91       go to map type 0
0CC3 7FFFDE           (       fdebug.asm):00059                  clr   >$FFDE       and to all-ROM mode
0CC6 CCFFFF           (       fdebug.asm):00060                  ldd   #$FFFF
                      (       fdebug.asm):00061         *         clrd               executes as CLRA on a 6809
0CC9 104F             (       fdebug.asm):00062                  fdb   $104F
0CCB 5D               (       fdebug.asm):00063                  tstb               is it a 6809?
0CCC 2603             (       fdebug.asm):00064                  bne   Reset        yup, skip ahead
                      (       fdebug.asm):00065         *         ldmd  #$00       go to 6809 mode!
0CCE 113D00           (       fdebug.asm):00066                  fcb   $11,$3D,$00
0CD1 6E9FFFFE         (       fdebug.asm):00067         Reset    jmp   [$FFFE]    do a reset
     0028             (       fdebug.asm):00068         CodeSize equ   *-ReBootLoc
                      (       fdebug.asm):00069         
                      (  krnp2_beta5.asm):00424         
0CD5 078628           (  krnp2_beta5.asm):00425                  emod
     0CD8             (  krnp2_beta5.asm):00426         eom      equ   *
                      (  krnp2_beta5.asm):00427                  end
