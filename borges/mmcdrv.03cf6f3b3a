                      (       mmcdrv.asm):00001         ********************************************************************
                      (       mmcdrv.asm):00002         * MMCDRV Color Computer MultiMedia Card Driver
                      (       mmcdrv.asm):00003         * Version 2.0.1
                      (       mmcdrv.asm):00004         * Copyright (C) 2003 Jim Hathaway III KG4KNB@hat3.net
                      (       mmcdrv.asm):00005         ********************************************************************
                      (       mmcdrv.asm):00006          
                      (       mmcdrv.asm):00007         ************************************************************************
                      (       mmcdrv.asm):00008         * Updates:
                      (       mmcdrv.asm):00009         * 06/16/03 - Copied code from version 321 driver and changed for asm
                      (       mmcdrv.asm):00010         *            Did this to see if there is some other issue with ASM 
                      (       mmcdrv.asm):00011         *            cross assembly of this module.  Still having problems when 
                      (       mmcdrv.asm):00012         *            trying to write any file to a MMC formatted with the
                      (       mmcdrv.asm):00013         *            newer driver driver.  This driver seems to work with ASM
                      (       mmcdrv.asm):00014         *            there must be a bug with the other modified version
                      (       mmcdrv.asm):00015         * 06/17/03 - Moved from 001b version to 100 after testing showed no
                      (       mmcdrv.asm):00016         *            issues.
                      (       mmcdrv.asm):00017         *            Worked on making code similar to other code.  Need to test
                      (       mmcdrv.asm):00018         *            this code as is to see if it will still work.
                      (       mmcdrv.asm):00019         *            Made EXTREME changes to the code.  Will need mucho debugo
                      (       mmcdrv.asm):00020         * 06/18/03 - More time working through.
                      (       mmcdrv.asm):00021         * 06/19/03 - Fixed a bug in the read code that did not set PD.BUF correctly
                      (       mmcdrv.asm):00022         *            Y was being loaded with V.PORT before PD.BUF,y was calculated
                      (       mmcdrv.asm):00023         *            Write sector routine was missing Y=V.Port setup as well as
                      (       mmcdrv.asm):00024         *            MDN,u setup before calling GREAD.  
                      (       mmcdrv.asm):00025         *            LSN0PROC - missing RTS, also moved clearing of the LSN0 flag
                      (       mmcdrv.asm):00026         *            to the LSN0PROC subroutine and removed it from the READ
                      (       mmcdrv.asm):00027         *            subroutine. Found and fixed several bugs today.  Including
                      (       mmcdrv.asm):00028         *            the problem last night with an iniz causing the driver to 
                      (       mmcdrv.asm):00029         *            loop and access the card.
                      (       mmcdrv.asm):00030         * 06/24/03 - Found a bug in the error return routines, comb should have 
                      (       mmcdrv.asm):00031         *            been done BEFORE the error number is loaded.  Was causing
                      (       mmcdrv.asm):00032         *            a read error 244 to be returned as error 011
                      (       mmcdrv.asm):00033         * 06/29/03 - Found final bug causing problems in nlevel2.  IF an error
                      (       mmcdrv.asm):00034         *            was returned from the chkrs routine the delay was not called
                      (       mmcdrv.asm):00035         *            before exit, then the calling routine went back and sent the
                      (       mmcdrv.asm):00036         *            command again and stepped on the spi transfer.  After all
                      (       mmcdrv.asm):00037         *            bytes are written or read at slow speed the delay routine
                      (       mmcdrv.asm):00038         *            MUST be called!
                      (       mmcdrv.asm):00039         *************************************************************************
                      (       mmcdrv.asm):00040         
     0002             (       mmcdrv.asm):00041         NUMDRIVE equ   2              Max. # of device descriptors for this driver
     0051             (       mmcdrv.asm):00042         CMDREAD  equ   $51            Command to read a single block
     0058             (       mmcdrv.asm):00043         CMDWRITE equ   $58            Command to write a sector
     0080             (       mmcdrv.asm):00044         MMCCSB   equ   $80            MMC control register slow clock bit
     0001             (       mmcdrv.asm):00045         MMCCRO   equ   1              MMC control register offset from data port
     0028             (       mmcdrv.asm):00046         DLYAMT   equ   $28            Standard delay amount used in DLYSTART
     000A             (       mmcdrv.asm):00047         CRDPULS  equ   $A             Number of times to loop for card init
                      (       mmcdrv.asm):00048         
                      (       mmcdrv.asm):00049                  nam   MMCDRV
                      (       mmcdrv.asm):00050                  ttl   MMC device driver for CoCo
                      (       mmcdrv.asm):00051         
                      (       mmcdrv.asm):00052                  ifp1
                      (       mmcdrv.asm):00053                  use   defsfile
                      (         defsfile):00001             use os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
     0080             (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
     00FE             (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0004                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
002A                  (            os9.d):00820         DefIOSiz       EQU       12
002A                  (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
002A                  (            os9.d):00824         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00832         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00835         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00849                        RMB       $40-.               unused
002A                  (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
002A                  (            os9.d):00855         SysState       EQU       %10000000
002A                  (            os9.d):00856         TimSleep       EQU       %01000000
002A                  (            os9.d):00857         TimOut         EQU       %00100000
002A                  (            os9.d):00858         ImgChg         EQU       %00010000
002A                  (            os9.d):00859         Condem         EQU       %00000010
002A                  (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
     0010             (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0000                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00877         P$User         RMB       2                   User Index
000A                  (            os9.d):00878         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00879         P$Age          RMB       1                   Age
000C                  (            os9.d):00880         P$State        RMB       1                   Status
000D                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00892                        RMB       $20-.               unused
0020                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00905         P$Alarm        RMB       6
00C9                  (            os9.d):00906                        RMB       $200-.              Local stack
     0200             (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
     0080             (            os9.d):00913         SysState       EQU       %10000000
     0040             (            os9.d):00914         TimSleep       EQU       %01000000
     0020             (            os9.d):00915         TimOut         EQU       %00100000
     0010             (            os9.d):00916         ImgChg         EQU       %00010000
     0008             (            os9.d):00917         Suspend        EQU       %00001000
     0002             (            os9.d):00918         Condem         EQU       %00000010
     0001             (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     000D             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     000B             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
0005                  (            os9.d):01040         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01041         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01044         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01045         R$X            EQU       6                   X Index register
0005                  (            os9.d):01046         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01047         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01048         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
     0003             (            os9.d):01051         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01052         R$X            EQU       4                   X Index register
     0006             (            os9.d):01053         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01054         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01055         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
00FF                  (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
00FF                  (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
     003B             (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
     ED00             (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
00FF                  (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (         defsfile):00002             use rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (         defsfile):00003             use coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         *************************************************
                      (           coco.d):00148         *
                      (           coco.d):00149         * NitrOS-9 Level 1 Section
                      (           coco.d):00150         *
                      (           coco.d):00151         *************************************************
                      (           coco.d):00152         
0004                  (           coco.d):00153         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE      
                      (           coco.d):00156         
                      (           coco.d):00157         *************************************************
                      (           coco.d):00158         *
                      (           coco.d):00159         * NitrOS-9 Level 2 Section
                      (           coco.d):00160         *
                      (           coco.d):00161         *************************************************
                      (           coco.d):00162         
                      (           coco.d):00163         ****************************************
                      (           coco.d):00164         * Dynamic Address Translator Definitions
                      (           coco.d):00165         *
     0008             (           coco.d):00166         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00167         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00168         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00169         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00170         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00171         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00172         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00173         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00174         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00175         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00176         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00177         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00178         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00179         IOBlock        EQU       $3F
     003F             (           coco.d):00180         ROMBlock       EQU       $3F
     007F             (           coco.d):00181         IOAddr         EQU       $7F
     0001             (           coco.d):00182         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00183         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00184         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00185         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00186         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00187         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00188         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00189         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00190         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00191         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00192         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00193         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00194         
                      (           coco.d):00195         ***************************
                      (           coco.d):00196         * Color Computer 3 Specific
                      (           coco.d):00197         *
     0001             (           coco.d):00198         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00199         
                      (           coco.d):00200         ********************
                      (           coco.d):00201         * Hardware addresses
                      (           coco.d):00202         *
     FF00             (           coco.d):00203         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00204         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00205         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00206         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00207         
     0007             (           coco.d):00208         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00209         
                      (           coco.d):00210                        ENDC
                      (           coco.d):00211                        
                      (           coco.d):00212                        ENDC      
                      (           coco.d):00213         
                      (       mmcdrv.asm):00054                  endc
                      (       mmcdrv.asm):00055         
     00E1             (       mmcdrv.asm):00056         tylg     set   Drivr+Objct   
     0082             (       mmcdrv.asm):00057         atrv     set   ReEnt+rev
     0002             (       mmcdrv.asm):00058         rev      set   $02
     0002             (       mmcdrv.asm):00059         edition  equ   2
                      (       mmcdrv.asm):00060         
0000 87CD03CF000EE182 (       mmcdrv.asm):00061                  mod   eom,name,tylg,atrv,start,size
     140015016E
                      (       mmcdrv.asm):00062         
                      (       mmcdrv.asm):00063                  org   0
0000.                 (       mmcdrv.asm):00064                  rmb   DRVBEG+(DRVMEM*NUMDRIVE)
                      (       mmcdrv.asm):00065         
                      (       mmcdrv.asm):00066         * Start of driver-specific statics
005B.                 (       mmcdrv.asm):00067         LSN0     rmb   1              Byte flag to indicate LSN0
005C.                 (       mmcdrv.asm):00068         MDN      rmb   1              MMC Drive Number
005D.                 (       mmcdrv.asm):00069         SECT2WR  rmb   1              Determines the sector to write
005E.                 (       mmcdrv.asm):00070         OS9SECT  rmb   2              Temp storage for OS9 sector address
0060.                 (       mmcdrv.asm):00071         SECTPNT  rmb   2              Temp storage for Sector Buffer pointer
0062.                 (       mmcdrv.asm):00072         BUFFER1  rmb   256            Sector buffer location for write cmds
0162.                 (       mmcdrv.asm):00073         RCMDBLK  rmb   6
0168.                 (       mmcdrv.asm):00074         WCMDBLK  rmb   6
                      (       mmcdrv.asm):00075         
     016E             (       mmcdrv.asm):00076         size     equ   .
                      (       mmcdrv.asm):00077         
000D FF               (       mmcdrv.asm):00078                  fcb   $FF            mode byte
                      (       mmcdrv.asm):00079         
000E 4D4D434452D6     (       mmcdrv.asm):00080         name     fcs   /MMCDRV/       module name
0014 02               (       mmcdrv.asm):00081                  fcb   edition        module edition
                      (       mmcdrv.asm):00082         
                      (       mmcdrv.asm):00083         
                      (       mmcdrv.asm):00084         * Start point
0015 16007D           (       mmcdrv.asm):00085         start    lbra  INIT
0018 160260           (       mmcdrv.asm):00086                  lbra  READ
001B 1600B6           (       mmcdrv.asm):00087                  lbra  WRITE
001E 1600B1           (       mmcdrv.asm):00088                  lbra  GETSTA
0021 1600AE           (       mmcdrv.asm):00089                  lbra  SETSTA
0024 1600AB           (       mmcdrv.asm):00090                  lbra  TERM
                      (       mmcdrv.asm):00091         * End start
                      (       mmcdrv.asm):00092         
                      (       mmcdrv.asm):00093         ********************************
                      (       mmcdrv.asm):00094         * Command bytes storage area
                      (       mmcdrv.asm):00095         ********************************
0027 400000000095     (       mmcdrv.asm):00096         CMD0     fcb   $40,0,0,0,0,$95
002D 410000000095     (       mmcdrv.asm):00097         CMD1     fcb   $41,0,0,0,0,$95
0033 4D0000000095     (       mmcdrv.asm):00098         CMD13    fcb   $4D,0,0,0,0,$95
0039 500000010095     (       mmcdrv.asm):00099         CMD171   fcb   $50,0,0,1,0,$95
003F 500000020095     (       mmcdrv.asm):00100         CMD172   fcb   $50,0,0,2,0,$95
                      (       mmcdrv.asm):00101         
                      (       mmcdrv.asm):00102         ***************************************************************
                      (       mmcdrv.asm):00103         * LSN0PROC - Process drive table when LSN0 is loaded.
                      (       mmcdrv.asm):00104         * Called from READ
                      (       mmcdrv.asm):00105         * Added pshs, puls y to preserve y holding the address of the 
                      (       mmcdrv.asm):00106         * MMC 6/19/03 JMH
                      (       mmcdrv.asm):00107         ***************************************************************
0045 3420             (       mmcdrv.asm):00108         LSN0PROC pshs  y              Save y for return
0047 E6C85C           (       mmcdrv.asm):00109                  ldb   MDN,u          Get drive number
004A 5A               (       mmcdrv.asm):00110                  decb                 Make drive 1 = 0, drive 2 = 1
004B 8626             (       mmcdrv.asm):00111                  lda   #DRVMEM        # bytes to copy from LSN0 to drive table
004D 3D               (       mmcdrv.asm):00112                  mul                  Compute drive table location
004E 314F             (       mmcdrv.asm):00113                  leay  DRVBEG,u       Point to start of drive tables
0050 31AB             (       mmcdrv.asm):00114                  leay  d,y
0052 AEC860           (       mmcdrv.asm):00115                  ldx   SECTPNT,u      We need to get the sector buffer to use
0055 8615             (       mmcdrv.asm):00116                  lda   #DD.SIZ        Get drive table size
0057 E680             (       mmcdrv.asm):00117         RDCL1    ldb   ,x+            From copy
0059 E7A0             (       mmcdrv.asm):00118                  stb   ,y+            To Copy
005B 4A               (       mmcdrv.asm):00119                  deca                 Loop for entire path descriptor
005C 26F9             (       mmcdrv.asm):00120                  bne   RDCL1          Loop till done
005E 6FC85B           (       mmcdrv.asm):00121                  clr   LSN0,u         Set LSN0 false 0=f 1=t
0061 35A0             (       mmcdrv.asm):00122                  puls  y,pc           Restore/return
                      (       mmcdrv.asm):00123         
                      (       mmcdrv.asm):00124         * End LSN0PROC
                      (       mmcdrv.asm):00125         
                      (       mmcdrv.asm):00126         ***************************************************************
                      (       mmcdrv.asm):00127         * Send a command string to the MMC (6 bytes) with delay
                      (       mmcdrv.asm):00128         * Can be called as SNDCS for sending command and checking status
                      (       mmcdrv.asm):00129         * or just chkrs can be called to see if the card returns the 
                      (       mmcdrv.asm):00130         * correct response
                      (       mmcdrv.asm):00131         * Entry: X=Pointer to command string to send
                      (       mmcdrv.asm):00132         *        Y=MMC Command data port
                      (       mmcdrv.asm):00133         *        A=Used for loop and not preserved
                      (       mmcdrv.asm):00134         *  
                      (       mmcdrv.asm):00135         ***************************************************************
0063 3416             (       mmcdrv.asm):00136         SNDCS    pshs  d,x            Save regs
0065 C606             (       mmcdrv.asm):00137                  ldb   #6             Number of command bytes
0067 A680             (       mmcdrv.asm):00138         SNDCLS   lda   ,x+            Get command byte
0069 A7A4             (       mmcdrv.asm):00139                  sta   ,y             Send command byte
006B 17001E           (       mmcdrv.asm):00140                  lbsr  DLYSTRT        Call our delay routine
006E 5A               (       mmcdrv.asm):00141                  decb                 Are we done?
006F 26F6             (       mmcdrv.asm):00142                  bne   SNDCLS         Keep looping until complete
0071 3516             (       mmcdrv.asm):00143                  puls  d,x            Restore regs
                      (       mmcdrv.asm):00144         
0073 3406             (       mmcdrv.asm):00145         CHKRS    pshs  d
0075 5F               (       mmcdrv.asm):00146                  clrb
0076 170013           (       mmcdrv.asm):00147         CHKRSL1  lbsr  DLYSTRT        Call our delay routine
0079 A1A4             (       mmcdrv.asm):00148                  cmpa  ,y             Check for response
007B 2709             (       mmcdrv.asm):00149                  beq   CHKRSG         Response is good, exit without error
007D 5A               (       mmcdrv.asm):00150                  decb                 Keep looping?
007E 26F6             (       mmcdrv.asm):00151                  bne   CHKRSL1        Done yet?
                      (       mmcdrv.asm):00152         
0080 170009           (       mmcdrv.asm):00153         CHKRSB   lbsr  DLYSTRT        Call our delay routine
0083 53               (       mmcdrv.asm):00154                  comb                 Set error state
0084 3586             (       mmcdrv.asm):00155                  puls  d,pc           Cleanup/Return
0086 170003           (       mmcdrv.asm):00156         CHKRSG   lbsr  DLYSTRT        Call our delay routine
0089 5F               (       mmcdrv.asm):00157                  clrb                 Set no error
008A 3586             (       mmcdrv.asm):00158                  puls  d,pc           Restore / Return
                      (       mmcdrv.asm):00159         
                      (       mmcdrv.asm):00160         *********************************************************************
                      (       mmcdrv.asm):00161         * Delay Routine - For use during initialization to slow down the 
                      (       mmcdrv.asm):00162         * read and write commands to the MMC because we must use a speed of 
                      (       mmcdrv.asm):00163         * less than 400k for the clock until CMD1 is issued (per MMC specs.)
                      (       mmcdrv.asm):00164         *********************************************************************
008C 3404             (       mmcdrv.asm):00165         DLYSTRT  pshs  b              Save b register for return
008E C628             (       mmcdrv.asm):00166                  ldb   #DLYAMT        Standard delay amount
0090 5A               (       mmcdrv.asm):00167         DLYLP1   decb                 Start of delay loop
0091 26FD             (       mmcdrv.asm):00168                  bne   DLYLP1         End of delay loop
0093 3584             (       mmcdrv.asm):00169                  puls  b,pc           Get value of b register back
                      (       mmcdrv.asm):00170         * End delay routine
                      (       mmcdrv.asm):00171         
                      (       mmcdrv.asm):00172         *******************************************************************
                      (       mmcdrv.asm):00173         * INIT - Standard OS9 init function.  Enable all MMCs if present and
                      (       mmcdrv.asm):00174         *        request sector buffer block.  Also set drive tables values.
                      (       mmcdrv.asm):00175         ********************************************************************
0095 10AE41           (       mmcdrv.asm):00176         INIT     ldy   V.PORT,u       Get MMC base port address
0098 8602             (       mmcdrv.asm):00177                  lda   #NUMDRIVE      Number of cards to init
                      (       mmcdrv.asm):00178         
009A A7C85C           (       mmcdrv.asm):00179         INITL1   sta   MDN,u          Get card number
009D 17018D           (       mmcdrv.asm):00180                  lbsr  INITCRD        Try and init card
00A0 4A               (       mmcdrv.asm):00181                  deca   
00A1 26F7             (       mmcdrv.asm):00182                  bne   INITL1         Keep looping
                      (       mmcdrv.asm):00183          
00A3 8651             (       mmcdrv.asm):00184                  lda   #CMDREAD       Setup bytes for each command area
00A5 A7C90162         (       mmcdrv.asm):00185                  sta   RCMDBLK,u      Save them to each area
00A9 8658             (       mmcdrv.asm):00186                  lda   #CMDWRITE
00AB A7C90168         (       mmcdrv.asm):00187                  sta   WCMDBLK,u
00AF CC0095           (       mmcdrv.asm):00188                  ldd   #$0095         Final two cmd bytes
00B2 EDC90166         (       mmcdrv.asm):00189                  std   RCMDBLK+4,u    Save last two cmd bytes for read
00B6 EDC9016C         (       mmcdrv.asm):00190                  std   WCMDBLK+4,u    Save last two cmd bytes for write
                      (       mmcdrv.asm):00191         
00BA 6FC85B           (       mmcdrv.asm):00192                  clr   LSN0,u         Set LSN0 false 0=f 1=t
                      (       mmcdrv.asm):00193         
00BD 304F             (       mmcdrv.asm):00194                  leax  DRVBEG,u       Point to start of drive tables
00BF C602             (       mmcdrv.asm):00195                  ldb   #NUMDRIVE      Number of drives supported
00C1 E746             (       mmcdrv.asm):00196                  stb   V.NDRV,u       Store the number of drives
00C3 86FF             (       mmcdrv.asm):00197                  lda   #$ff
00C5 A784             (       mmcdrv.asm):00198         INITL2   sta   DD.TOT,x       DD.TOT MSB to bogus value
00C7 A78815           (       mmcdrv.asm):00199                  sta   V.TRAK,x       Init current track # to bogus value
00CA 308826           (       mmcdrv.asm):00200                  leax  DRVMEM,x       Get next drive table location
00CD 5A               (       mmcdrv.asm):00201                  decb                 Loop counter
00CE 26F5             (       mmcdrv.asm):00202                  bne   INITL2         Keep looping?
                      (       mmcdrv.asm):00203         
00D0 6F21             (       mmcdrv.asm):00204                  clr   MMCCRO,y       Deselect any cards in use
                      (       mmcdrv.asm):00205                  
00D2                  (       mmcdrv.asm):00206         GETSTA
00D2                  (       mmcdrv.asm):00207         SETSTA
00D2                  (       mmcdrv.asm):00208         TERM
00D2 5F               (       mmcdrv.asm):00209                  clrb 
00D3 39               (       mmcdrv.asm):00210                  rts
                      (       mmcdrv.asm):00211         
                      (       mmcdrv.asm):00212         ********************************************************************
                      (       mmcdrv.asm):00213         * WRITE SECTOR
                      (       mmcdrv.asm):00214         * Must read in correct sector then write out
                      (       mmcdrv.asm):00215         * a 512 byte sector.  MMCs only support 512 byte sectors
                      (       mmcdrv.asm):00216         * for write.
                      (       mmcdrv.asm):00217         ********************************************************************
00D4 E7C90163         (       mmcdrv.asm):00218         WRITE    stb   RCMDBLK+1,u    Save LSN for read command
00D8 AFC90164         (       mmcdrv.asm):00219                  stx   RCMDBLK+2,u    Save LSN for read command
                      (       mmcdrv.asm):00220         
00DC E7C90169         (       mmcdrv.asm):00221                  stb   WCMDBLK+1,u    Save LSN for write command
00E0 AFC9016A         (       mmcdrv.asm):00222                  stx   WCMDBLK+2,u    Save LSN for write command
                      (       mmcdrv.asm):00223         
00E4 AE28             (       mmcdrv.asm):00224                  ldx   PD.BUF,y       Get real sector address for later
00E6 AFC85E           (       mmcdrv.asm):00225                  stx   OS9SECT,u      Save os9 sector address for later
                      (       mmcdrv.asm):00226         
00E9 A6C9016B         (       mmcdrv.asm):00227                  lda   WCMDBLK+3,u    Adjust WLSN
00ED 84FE             (       mmcdrv.asm):00228                  anda  #$FE           Mask bit 0
00EF A7C9016B         (       mmcdrv.asm):00229                  sta   WCMDBLK+3,u    Adjust WLSN
                      (       mmcdrv.asm):00230         
00F3 A6C90165         (       mmcdrv.asm):00231                  lda   RCMDBLK+3,u    Get lowest LSN byte
00F7 8401             (       mmcdrv.asm):00232                  anda  #1             Mask bits 7-1
00F9 A7C85D           (       mmcdrv.asm):00233                  sta   SECT2WR,u      Save it for later
00FC 2717             (       mmcdrv.asm):00234                  beq   WRROWE         Go RO WE 1=(RE,WO) 0=(RO,WE)         
                      (       mmcdrv.asm):00235         
00FE ECC90164         (       mmcdrv.asm):00236         WRREWO   ldd   RCMDBLK+2,u    Get upper LSN
0102 830001           (       mmcdrv.asm):00237                  subd  #1
0105 EDC90164         (       mmcdrv.asm):00238                  std   RCMDBLK+2,u
0109 E6C90163         (       mmcdrv.asm):00239                  ldb   RCMDBLK+1,u
010D C200             (       mmcdrv.asm):00240                  sbcb  #0
010F E7C90163         (       mmcdrv.asm):00241                  stb   RCMDBLK+1,u
                      (       mmcdrv.asm):00242         
0113 2015             (       mmcdrv.asm):00243                  bra   WRGO
                      (       mmcdrv.asm):00244         
0115 ECC90164         (       mmcdrv.asm):00245         WRROWE   ldd   RCMDBLK+2,u    Get upper LSN
0119 C30001           (       mmcdrv.asm):00246                  addd  #1
011C EDC90164         (       mmcdrv.asm):00247                  std   RCMDBLK+2,u
0120 E6C90163         (       mmcdrv.asm):00248                  ldb   RCMDBLK+1,u
0124 C900             (       mmcdrv.asm):00249                  adcb  #0
0126 E7C90163         (       mmcdrv.asm):00250                  stb   RCMDBLK+1,u
                      (       mmcdrv.asm):00251            
012A 30C862           (       mmcdrv.asm):00252         WRGO     leax  BUFFER1,u
012D AFC860           (       mmcdrv.asm):00253                  stx   SECTPNT,u      Save sector buffer for read
                      (       mmcdrv.asm):00254         
0130 A6A821           (       mmcdrv.asm):00255                  lda   PD.DRV,y       Get drive # requested
0133 4C               (       mmcdrv.asm):00256                  inca 
0134 A7C85C           (       mmcdrv.asm):00257                  sta   MDN,u          Save requested drive number
                      (       mmcdrv.asm):00258         
0137 10AE41           (       mmcdrv.asm):00259                  ldy   V.PORT,u       Get MMC base port address
                      (       mmcdrv.asm):00260         
013A 1701B0           (       mmcdrv.asm):00261                  lbsr  GREAD          Go get buffered sector
013D 1025026B         (       mmcdrv.asm):00262                  lbcs  EWRITE         Write error
                      (       mmcdrv.asm):00263         
0141 308DFEFA         (       mmcdrv.asm):00264         WRGO1    leax  CMD172,pcr     Get command to change sector to 512 bytes
0145 8600             (       mmcdrv.asm):00265                  lda   #$00           Expected response
0147 170164           (       mmcdrv.asm):00266                  lbsr  SNDCF          Go send the command (cmd17-2)
014A 10250258         (       mmcdrv.asm):00267                  lbcs  ENOTRDY        Not ready
                      (       mmcdrv.asm):00268         
014E 30C90168         (       mmcdrv.asm):00269                  leax  WCMDBLK,u      Get address of write command block
0152 8600             (       mmcdrv.asm):00270                  lda   #$00           Expected response
0154 170157           (       mmcdrv.asm):00271                  lbsr  SNDCF          Send this command without delay
0157 1025024B         (       mmcdrv.asm):00272                  lbcs  ENOTRDY        Not ready
                      (       mmcdrv.asm):00273         
015B 86FE             (       mmcdrv.asm):00274                  lda   #254           Start of data sector byte
015D A7A4             (       mmcdrv.asm):00275                  sta   ,y             Save start of sector byte
                      (       mmcdrv.asm):00276         
015F 6DC85D           (       mmcdrv.asm):00277         WRGO2    tst   SECT2WR,u      1=(RE,WO) 0=(RO,WE)
0162 260A             (       mmcdrv.asm):00278                  bne   WRREWO1        
                      (       mmcdrv.asm):00279                    
0164 AEC85E           (       mmcdrv.asm):00280         WRROWE1  ldx   OS9SECT,u      Get real sector buffer
0167 8D45             (       mmcdrv.asm):00281                  bsr   WRSEC          Go write 256 bytes
0169 30C862           (       mmcdrv.asm):00282                  leax  BUFFER1,u      Get buffered sector
016C 2008             (       mmcdrv.asm):00283                  bra   WRDC1          Data send complete
                      (       mmcdrv.asm):00284         
016E 30C862           (       mmcdrv.asm):00285         WRREWO1  leax  BUFFER1,u      Get buffered sector buffer
0171 8D3B             (       mmcdrv.asm):00286                  bsr   WRSEC          Go write 256 bytes
0173 AEC85E           (       mmcdrv.asm):00287                  ldx   OS9SECT,u      Get real sector buffer
0176 8D36             (       mmcdrv.asm):00288         WRDC1    bsr   WRSEC          Go write 256 bytes
                      (       mmcdrv.asm):00289         
                      (       mmcdrv.asm):00290         * dropped the code to send two crc bytes - the routine
                      (       mmcdrv.asm):00291         * that reads the card to see if the $E5 response is given
                      (       mmcdrv.asm):00292         * also sends data, so no separate crc code is needed
                      (       mmcdrv.asm):00293         
0178 86E5             (       mmcdrv.asm):00294                  lda   #$E5           Response - Data accepted tolken
017A 17014A           (       mmcdrv.asm):00295                  lbsr  CHKRF          Check for correct response
017D 1025022B         (       mmcdrv.asm):00296                  lbcs  EWRITE         Write error
                      (       mmcdrv.asm):00297         
0181 86FF             (       mmcdrv.asm):00298                  lda   #$FF           Response - Card complete with write
0183 170141           (       mmcdrv.asm):00299                  lbsr  CHKRF          Check for correct response
0186 10250222         (       mmcdrv.asm):00300                  lbcs  EWRITE         Write error
                      (       mmcdrv.asm):00301         
018A 308DFEA5         (       mmcdrv.asm):00302                  leax  CMD13,pcr      Get check status command
018E 8600             (       mmcdrv.asm):00303                  lda   #$00           Expected response
0190 17011B           (       mmcdrv.asm):00304                  lbsr  SNDCF          Go send the command (cmd13)
0193 10250215         (       mmcdrv.asm):00305                  lbcs  EWRITE         Write error
0197 17012D           (       mmcdrv.asm):00306                  lbsr  CHKRF          Check for correct response
019A 1025020E         (       mmcdrv.asm):00307                  lbcs  EWRITE         Write error
                      (       mmcdrv.asm):00308         
019E 308DFE97         (       mmcdrv.asm):00309                  leax  CMD171,pcr     Get command to change sector to 256
01A2 8600             (       mmcdrv.asm):00310                  lda   #$00           Expected response
01A4 170107           (       mmcdrv.asm):00311                  lbsr  SNDCF          Go send the command (cmd17-1)
01A7 102501FB         (       mmcdrv.asm):00312                  lbcs  ENOTRDY        Not ready
                      (       mmcdrv.asm):00313          
01AB 1700FC           (       mmcdrv.asm):00314                  lbsr  WREXIT         Clean exit
                      (       mmcdrv.asm):00315         
                      (       mmcdrv.asm):00316         * End of write sector routine
                      (       mmcdrv.asm):00317         
                      (       mmcdrv.asm):00318         ********************************************************
                      (       mmcdrv.asm):00319         * WRSEC - Write a single 256 byte sector to the MMC
                      (       mmcdrv.asm):00320         * Entry: Y=MMC data port address
                      (       mmcdrv.asm):00321         *        X=Sector location to copy from
                      (       mmcdrv.asm):00322         ********************************************************
                      (       mmcdrv.asm):00323                  IFNE  SMALLC
01AE                  (       mmcdrv.asm):00324         WRSEC    clrb                 Loop counter
01AE                  (       mmcdrv.asm):00325         WRLP1    lda   ,x+            Get data byte
                      (       mmcdrv.asm):00326                  sta   ,y             Store data byte
                      (       mmcdrv.asm):00327                  decb
                      (       mmcdrv.asm):00328                  bne   WRLP1          Keep looping?
                      (       mmcdrv.asm):00329                  rts                  Return
                      (       mmcdrv.asm):00330         
                      (       mmcdrv.asm):00331                  ELSE
                      (       mmcdrv.asm):00332         
01AE 300F             (       mmcdrv.asm):00333         WRSEC    leax  15,x
01B0 8608             (       mmcdrv.asm):00334                  lda   #8             Number of loops to run
01B2 3402             (       mmcdrv.asm):00335                  pshs  a              Used for loop counter
01B4 EC11             (       mmcdrv.asm):00336         WRBLK1   ldd   -15,x          Get 2 bytes
01B6 A7A4             (       mmcdrv.asm):00337                  sta   ,y             Save byte 1
01B8 12               (       mmcdrv.asm):00338                  nop                  Delay to complete SPI transfer
01B9 E7A4             (       mmcdrv.asm):00339                  stb   ,y             Save byte 2
01BB EC13             (       mmcdrv.asm):00340                  ldd   -13,x          Get 2 more bytes
01BD A7A4             (       mmcdrv.asm):00341                  sta   ,y             Save byte 3
01BF 12               (       mmcdrv.asm):00342                  nop                  Delay to complete SPI transfer
01C0 E7A4             (       mmcdrv.asm):00343                  stb   ,y             Save byte 4
01C2 EC15             (       mmcdrv.asm):00344                  ldd   -11,x          Get 2 more bytes
01C4 A7A4             (       mmcdrv.asm):00345                  sta   ,y             Save byte 5
01C6 12               (       mmcdrv.asm):00346                  nop                  Delay to complete SPI transfer
01C7 E7A4             (       mmcdrv.asm):00347                  stb   ,y             Save byte 6
01C9 EC17             (       mmcdrv.asm):00348                  ldd   -9,x           Get 2 more bytes
01CB A7A4             (       mmcdrv.asm):00349                  sta   ,y             Save byte 7
01CD 12               (       mmcdrv.asm):00350                  nop                  Delay to complete SPI transfer
01CE E7A4             (       mmcdrv.asm):00351                  stb   ,y             Save byte 8
01D0 EC19             (       mmcdrv.asm):00352                  ldd   -7,x           Get 2 more bytes
01D2 A7A4             (       mmcdrv.asm):00353                  sta   ,y             Save byte 9
01D4 12               (       mmcdrv.asm):00354                  nop                  Delay to complete SPI transfer
01D5 E7A4             (       mmcdrv.asm):00355                  stb   ,y             Save byte 10
01D7 EC1B             (       mmcdrv.asm):00356                  ldd   -5,x           Get 2 more bytes
01D9 A7A4             (       mmcdrv.asm):00357                  sta   ,y             Save byte 11
01DB 12               (       mmcdrv.asm):00358                  nop                  Delay to complete SPI transfer
01DC E7A4             (       mmcdrv.asm):00359                  stb   ,y             Save byte 12
01DE EC1D             (       mmcdrv.asm):00360                  ldd   -3,x           Get 2 more bytes
01E0 A7A4             (       mmcdrv.asm):00361                  sta   ,y             Save byte 13
01E2 12               (       mmcdrv.asm):00362                  nop                  Delay to complete SPI transfer
01E3 E7A4             (       mmcdrv.asm):00363                  stb   ,y             Save byte 14
01E5 EC1F             (       mmcdrv.asm):00364                  ldd   -1,x           Get 2 more bytes
01E7 A7A4             (       mmcdrv.asm):00365                  sta   ,y             Save byte 15
01E9 12               (       mmcdrv.asm):00366                  nop                  Delay to complete SPI transfer
01EA E7A4             (       mmcdrv.asm):00367                  stb   ,y             Save byte 16
01EC EC01             (       mmcdrv.asm):00368                  ldd   1,x            Get 2 more bytes
01EE A7A4             (       mmcdrv.asm):00369                  sta   ,y             Save byte 17
01F0 12               (       mmcdrv.asm):00370                  nop                  Delay to complete SPI transfer
01F1 E7A4             (       mmcdrv.asm):00371                  stb   ,y             Save byte 18
01F3 EC03             (       mmcdrv.asm):00372                  ldd   3,x            Get 2 more bytes
01F5 A7A4             (       mmcdrv.asm):00373                  sta   ,y             Save byte 19
01F7 12               (       mmcdrv.asm):00374                  nop                  Delay to complete SPI transfer
01F8 E7A4             (       mmcdrv.asm):00375                  stb   ,y             Save byte 20
01FA EC05             (       mmcdrv.asm):00376                  ldd   5,x            Get 2 more bytes
01FC A7A4             (       mmcdrv.asm):00377                  sta   ,y             Save byte 21
01FE 12               (       mmcdrv.asm):00378                  nop                  Delay to complete SPI transfer
01FF E7A4             (       mmcdrv.asm):00379                  stb   ,y             Save byte 22
0201 EC07             (       mmcdrv.asm):00380                  ldd   7,x            Get 2 more bytes
0203 A7A4             (       mmcdrv.asm):00381                  sta   ,y             Save byte 23
0205 12               (       mmcdrv.asm):00382                  nop                  Delay to complete SPI transfer
0206 E7A4             (       mmcdrv.asm):00383                  stb   ,y             Save byte 24
0208 EC09             (       mmcdrv.asm):00384                  ldd   9,x            Get 2 more bytes
020A A7A4             (       mmcdrv.asm):00385                  sta   ,y             Save byte 25
020C 12               (       mmcdrv.asm):00386                  nop                  Delay to complete SPI transfer
020D E7A4             (       mmcdrv.asm):00387                  stb   ,y             Save byte 26
020F EC0B             (       mmcdrv.asm):00388                  ldd   11,x           Get 2 more bytes
0211 A7A4             (       mmcdrv.asm):00389                  sta   ,y             Save byte 27
0213 12               (       mmcdrv.asm):00390                  nop                  Delay to complete SPI transfer
0214 E7A4             (       mmcdrv.asm):00391                  stb   ,y             Save byte 28
0216 EC0D             (       mmcdrv.asm):00392                  ldd   13,x           Get 2 more bytes
0218 A7A4             (       mmcdrv.asm):00393                  sta   ,y             Save byte 29
021A 12               (       mmcdrv.asm):00394                  nop                  Delay to complete SPI transfer
021B E7A4             (       mmcdrv.asm):00395                  stb   ,y             Save byte 30
021D EC0F             (       mmcdrv.asm):00396                  ldd   15,x           Get 2 more bytes
021F A7A4             (       mmcdrv.asm):00397                  sta   ,y             Save byte 31
0221 12               (       mmcdrv.asm):00398                  nop                  Delay to complete SPI transfer
0222 E7A4             (       mmcdrv.asm):00399                  stb   ,y             Save byte 32
0224 308820           (       mmcdrv.asm):00400                  leax  32,x           Add 32 bytes
0227 6AE4             (       mmcdrv.asm):00401                  dec   ,s             Loop counter 
0229 2689             (       mmcdrv.asm):00402                  bne   WRBLK1         Loop back and do it again
022B 3582             (       mmcdrv.asm):00403                  puls  a,pc           Clean stack, return
                      (       mmcdrv.asm):00404         
                      (       mmcdrv.asm):00405                  ENDC
                      (       mmcdrv.asm):00406         
                      (       mmcdrv.asm):00407         * End of WRSEC subroutine
                      (       mmcdrv.asm):00408         
                      (       mmcdrv.asm):00409         *************************************************
                      (       mmcdrv.asm):00410         * INITCRD : Init a single card
                      (       mmcdrv.asm):00411         * Entry: Y=MMC data port address
                      (       mmcdrv.asm):00412         *        MDN,u = card number (1..X)
                      (       mmcdrv.asm):00413         * Registers preserved
                      (       mmcdrv.asm):00414         *************************************************
022D 3416             (       mmcdrv.asm):00415         INITCRD  pshs  d,x
                      (       mmcdrv.asm):00416         
022F 8680             (       mmcdrv.asm):00417                  lda   #MMCCSB        Change MMC clock to slow speed
0231 A721             (       mmcdrv.asm):00418                  sta   MMCCRO,y       Write slow speed bit
0233 860A             (       mmcdrv.asm):00419                  lda   #CRDPULS       Clock pulses needed to init cards
                      (       mmcdrv.asm):00420         
                      (       mmcdrv.asm):00421         * Per MMC spec - before any commands are sent to the card 80 clock
                      (       mmcdrv.asm):00422         * pulses must be sent at a speed of less than 400k.  After init
                      (       mmcdrv.asm):00423         * is complete we will use the full speed of 3.56 Mhz.  This is the
                      (       mmcdrv.asm):00424         * clock speed of the serial shift.  8 cycles at 3.56 Mhz are required
                      (       mmcdrv.asm):00425         * to complete the SPI transfer.
                      (       mmcdrv.asm):00426         
0235 6DA4             (       mmcdrv.asm):00427         ICLKPL1  tst   ,y             Send 8 clock pulses to card
0237 17FE52           (       mmcdrv.asm):00428                  lbsr  DLYSTRT        Call our delay routine
023A 4A               (       mmcdrv.asm):00429                  deca                 Loop counter
023B 26F8             (       mmcdrv.asm):00430                  bne   ICLKPL1        Loop until all clocks done
                      (       mmcdrv.asm):00431         
023D A6C85C           (       mmcdrv.asm):00432                  lda   MDN,u          Get card number
0240 8A80             (       mmcdrv.asm):00433                  ora   #MMCCSB        Select slow clock bit
0242 A721             (       mmcdrv.asm):00434                  sta   MMCCRO,y       Write to MMC control register slow speed
                      (       mmcdrv.asm):00435         
0244 308DFDDF         (       mmcdrv.asm):00436                  leax  CMD0,pcr       x = cmd0 address
0248 8601             (       mmcdrv.asm):00437                  lda   #$01           Response
024A 17FE16           (       mmcdrv.asm):00438                  lbsr  SNDCS          Go send the command w/ delay
024D 10250027         (       mmcdrv.asm):00439                  lbcs  INITCE1        This card is not ready exit
                      (       mmcdrv.asm):00440         
0251 C614             (       mmcdrv.asm):00441                  ldb   #20            Number of times to send CMD1 before error
0253 308DFDD6         (       mmcdrv.asm):00442         INCMD1L  leax  CMD1,pcr       Load address into x for cmd1
0257 8600             (       mmcdrv.asm):00443                  lda   #$00           Expected response
0259 17FE07           (       mmcdrv.asm):00444                  lbsr  SNDCS          Go send the command (cmd1)
025C 2407             (       mmcdrv.asm):00445                  bcc   INC1C          We got our response, continue
025E 5A               (       mmcdrv.asm):00446                  decb                 Loop counter
025F 26F2             (       mmcdrv.asm):00447                  bne   INCMD1L        Keep trying to get a response of 0
0261 10250013         (       mmcdrv.asm):00448                  lbcs  INITCE1        This card is not ready exit
                      (       mmcdrv.asm):00449         
0265 A6C85C           (       mmcdrv.asm):00450         INC1C    lda   MDN,u          Get card number
0268 A721             (       mmcdrv.asm):00451                  sta   MMCCRO,y       Write to MMC control register full speed
                      (       mmcdrv.asm):00452         
026A 308DFDCB         (       mmcdrv.asm):00453                  leax  CMD171,pcr     Get command to change sector to 256 bytes
026E 8600             (       mmcdrv.asm):00454                  lda   #$00           Expected response
0270 17003B           (       mmcdrv.asm):00455                  lbsr  SNDCF          Go send the command (cmd17-1) w/o delay
0273 2503             (       mmcdrv.asm):00456                  bcs   INITCE1        Error changing to 256 byte sector
                      (       mmcdrv.asm):00457         
0275 5F               (       mmcdrv.asm):00458                  clrb                 No error
0276 3596             (       mmcdrv.asm):00459                  puls d,x,pc          Clean exit
                      (       mmcdrv.asm):00460         
0278 53               (       mmcdrv.asm):00461         INITCE1  comb                 Error, we could not init card
0279 3596             (       mmcdrv.asm):00462                  puls d,x,pc
                      (       mmcdrv.asm):00463         
                      (       mmcdrv.asm):00464         * End of INITCRD
                      (       mmcdrv.asm):00465         
                      (       mmcdrv.asm):00466         
                      (       mmcdrv.asm):00467         *****************************************************************
                      (       mmcdrv.asm):00468         * READ - Read a single 256 byte sector.  Uses GREAD to get the 
                      (       mmcdrv.asm):00469         *        sector into memory
                      (       mmcdrv.asm):00470         *****************************************************************
027B E7C90163         (       mmcdrv.asm):00471         READ     stb   RCMDBLK+1,u    Save LSN
027F AFC90164         (       mmcdrv.asm):00472                  stx   RCMDBLK+2,u    Save LSN
                      (       mmcdrv.asm):00473         
0283 3084             (       mmcdrv.asm):00474                  leax  0,x            Check for LSN0
0285 2606             (       mmcdrv.asm):00475                  bne   RDS1          
0287 5D               (       mmcdrv.asm):00476                  tstb                 Check for LSN0
0288 2603             (       mmcdrv.asm):00477                  bne   RDS1
028A 6CC85B           (       mmcdrv.asm):00478                  inc   LSN0,u         Set LSN0 Flag                  
                      (       mmcdrv.asm):00479         
028D A6A821           (       mmcdrv.asm):00480         RDS1     lda   PD.DRV,y       Get drive # requested
0290 4C               (       mmcdrv.asm):00481                  inca                 Set drive number correctly
0291 A7C85C           (       mmcdrv.asm):00482                  sta   MDN,u          Save drive number
                      (       mmcdrv.asm):00483         
0294 AE28             (       mmcdrv.asm):00484                  ldx   PD.BUF,y       Get physical sector buffer pointer
0296 AFC860           (       mmcdrv.asm):00485                  stx   SECTPNT,u      Store the sector buffer location
                      (       mmcdrv.asm):00486         
0299 10AE41           (       mmcdrv.asm):00487                  ldy   V.PORT,u       Get MMC base port address
                      (       mmcdrv.asm):00488         
029C 8D4F             (       mmcdrv.asm):00489                  bsr   GREAD          Get our sector
029E 10250110         (       mmcdrv.asm):00490                  lbcs  EREAD          Exit with read error
                      (       mmcdrv.asm):00491         
02A2 6DC85B           (       mmcdrv.asm):00492                  tst   LSN0,u         Is this LSN0?
02A5 2703             (       mmcdrv.asm):00493                  beq   RDEX1          Complete - return
                      (       mmcdrv.asm):00494          
02A7 17FD9B           (       mmcdrv.asm):00495                  lbsr  LSN0PROC       Process LSN0 information
                      (       mmcdrv.asm):00496         
02AA                  (       mmcdrv.asm):00497         WREXIT
02AA 5F               (       mmcdrv.asm):00498         RDEX1    clrb                 Set no errors
02AB 6F21             (       mmcdrv.asm):00499                  clr   MMCCRO,y       Deselect any cards in use
02AD 39               (       mmcdrv.asm):00500                  rts                  Read complete with no errors
                      (       mmcdrv.asm):00501         
                      (       mmcdrv.asm):00502         * End of READ
                      (       mmcdrv.asm):00503         
                      (       mmcdrv.asm):00504         ***************************************************************
                      (       mmcdrv.asm):00505         * Send a command string to the MMC (6 bytes) w/o delay
                      (       mmcdrv.asm):00506         * Can be called as SNDCF for sending command and checking status
                      (       mmcdrv.asm):00507         * or just CHKRF can be called to see if the card returns the 
                      (       mmcdrv.asm):00508         * correct response
                      (       mmcdrv.asm):00509         * Entry: X = Pointer to command string to send
                      (       mmcdrv.asm):00510         *        Y = MMC Command data port
                      (       mmcdrv.asm):00511         *        A = Used for loop and not preserved
                      (       mmcdrv.asm):00512         ***************************************************************
02AE                  (       mmcdrv.asm):00513         SNDCF    
                      (       mmcdrv.asm):00514                  IFNE  SMALLC
                      (       mmcdrv.asm):00515         
                      (       mmcdrv.asm):00516                  pshs  d,x            Save regs
                      (       mmcdrv.asm):00517                  ldb   #$06           Loop amount
02AE                  (       mmcdrv.asm):00518         SNDCFL1  lda   ,x+            Get command byte
                      (       mmcdrv.asm):00519                  sta   ,y             Save byte to card
                      (       mmcdrv.asm):00520                  decb                 Loop counter
                      (       mmcdrv.asm):00521                  bne   SNDCFL1        Keep looping?
                      (       mmcdrv.asm):00522                  puls  d,x            Restore regs
                      (       mmcdrv.asm):00523         
                      (       mmcdrv.asm):00524                  ELSE
                      (       mmcdrv.asm):00525         
02AE 3406             (       mmcdrv.asm):00526                  pshs  d              Save regs
02B0 EC84             (       mmcdrv.asm):00527                  ldd   ,x             Get command bytes
02B2 A7A4             (       mmcdrv.asm):00528                  sta   ,y             Save byte 1
02B4 12               (       mmcdrv.asm):00529                  nop                  Delay to complete SPI transfer
02B5 E7A4             (       mmcdrv.asm):00530                  stb   ,y             Save byte 2
02B7 EC02             (       mmcdrv.asm):00531                  ldd   2,x            Get command bytes
02B9 A7A4             (       mmcdrv.asm):00532                  sta   ,y             Save byte 3
02BB 12               (       mmcdrv.asm):00533                  nop                  Delay to complete SPI transfer
02BC E7A4             (       mmcdrv.asm):00534                  stb   ,y             Save byte 4
02BE EC04             (       mmcdrv.asm):00535                  ldd   4,x            Get command bytes
02C0 A7A4             (       mmcdrv.asm):00536                  sta   ,y             Save byte 5
02C2 12               (       mmcdrv.asm):00537                  nop                  Delay to complete SPI transfer
02C3 E7A4             (       mmcdrv.asm):00538                  stb   ,y             Save byte 6
02C5 3506             (       mmcdrv.asm):00539                  puls  d              Restore regs
                      (       mmcdrv.asm):00540         
                      (       mmcdrv.asm):00541                  ENDC
                      (       mmcdrv.asm):00542         
                      (       mmcdrv.asm):00543         * Try to quickly get a response from the MMC.  128 loops
                      (       mmcdrv.asm):00544         * is only a guess as to how long an average command response
                      (       mmcdrv.asm):00545         * might be.  After the 128 loops it is obvious that the card
                      (       mmcdrv.asm):00546         * may need more time to process the command (such as a write)
                      (       mmcdrv.asm):00547         * command.  At that point we sleep for 1 tick to give the 
                      (       mmcdrv.asm):00548         * card time to complete the request.  Then try another 255 times
                      (       mmcdrv.asm):00549         * to get the response before we return an error.
                      (       mmcdrv.asm):00550         * 6-24-03 JMH - Found something interesting in NLevel2 V030102 
                      (       mmcdrv.asm):00551         * testing last night.  The MMC would not initialize aparently
                      (       mmcdrv.asm):00552         * based on the LED pattern being displayed.  Level2 OS9 is able
                      (       mmcdrv.asm):00553         * to use this driver without problems.  As I think about it more
                      (       mmcdrv.asm):00554         * it might be the fact that in 6309 mode the CPU is able to 
                      (       mmcdrv.asm):00555         * execute instructions faster and so it is stepping on the 
                      (       mmcdrv.asm):00556         * spi shift.
                      (       mmcdrv.asm):00557         * 6-24-03 JMH - Moved pshs x lower into subroutine to save
                      (       mmcdrv.asm):00558         * some time if a sleep is not needed then there is no reason
                      (       mmcdrv.asm):00559         * to pshs x and puls x.
                      (       mmcdrv.asm):00560         
02C7 3406             (       mmcdrv.asm):00561         CHKRF    pshs  d              Save regs
02C9 5F               (       mmcdrv.asm):00562                  clrb                 Number of loops
                      (       mmcdrv.asm):00563         
02CA A1A4             (       mmcdrv.asm):00564         CHKRFL1  cmpa  ,y
02CC 271C             (       mmcdrv.asm):00565                  beq   CHKRFG         Got our response
02CE A1A4             (       mmcdrv.asm):00566                  cmpa  ,y
02D0 2718             (       mmcdrv.asm):00567                  beq   CHKRFG         Got our response
02D2 5A               (       mmcdrv.asm):00568                  decb                 Loop counter 
02D3 26F5             (       mmcdrv.asm):00569                  bne   CHKRFL1        Keep looping?
                      (       mmcdrv.asm):00570         
                      (       mmcdrv.asm):00571         * This sleep should only occur when writing to the card
02D5 3410             (       mmcdrv.asm):00572                  pshs  x              Save x for later
02D7 8E0001           (       mmcdrv.asm):00573                  ldx   #1             Sleep for remainder of this tick
02DA 103F0A           (       mmcdrv.asm):00574                  os9   F$Sleep        Wait for card
02DD 3510             (       mmcdrv.asm):00575                  puls  x              Restore
                      (       mmcdrv.asm):00576         
02DF 5F               (       mmcdrv.asm):00577                  clrb                 Number of loops = 256
02E0 A1A4             (       mmcdrv.asm):00578         CHKRFL2  cmpa  ,y
02E2 2706             (       mmcdrv.asm):00579                  beq   CHKRFG         Got our response
02E4 5A               (       mmcdrv.asm):00580                  decb                 Loop counter
02E5 26F9             (       mmcdrv.asm):00581                  bne   CHKRFL2        Keep looping?
                      (       mmcdrv.asm):00582                  
02E7 53               (       mmcdrv.asm):00583         CHKRFB   comb                 Set error state
02E8 3586             (       mmcdrv.asm):00584                  puls  d,pc           Cleanup/Return
02EA 5F               (       mmcdrv.asm):00585         CHKRFG   clrb                 Set no error
02EB 3586             (       mmcdrv.asm):00586                  puls  d,pc           Cleanup/Return
                      (       mmcdrv.asm):00587         
                      (       mmcdrv.asm):00588         ***************************************************************
                      (       mmcdrv.asm):00589         * GREAD - New generic read subroutine.  Requires:
                      (       mmcdrv.asm):00590         *         MDN,u = drive number
                      (       mmcdrv.asm):00591         *         RCMDBLK,u LSN (RCMDBLK+1,RCMDBLK+2,RCMDBLK+3)
                      (       mmcdrv.asm):00592         *         SECTPNT,u = location to copy sector to
                      (       mmcdrv.asm):00593         *         Y = V.port,u (MMC base port address)
                      (       mmcdrv.asm):00594         ***************************************************************
02ED                  (       mmcdrv.asm):00595         GREAD    
02ED A6C85C           (       mmcdrv.asm):00596                  lda   MDN,u
02F0 A721             (       mmcdrv.asm):00597                  sta   MMCCRO,y       Select MMC
                      (       mmcdrv.asm):00598         
02F2 A6A4             (       mmcdrv.asm):00599                  lda   ,y             Burn a byte - bug fix
                      (       mmcdrv.asm):00600         
02F4 86FF             (       mmcdrv.asm):00601                  lda   #$FF           Expected card response
02F6 8DCF             (       mmcdrv.asm):00602                  bsr   CHKRF          Go check for response byte
02F8 240C             (       mmcdrv.asm):00603                  bcc   RDN1           Is card ready?  If yes continue
                      (       mmcdrv.asm):00604         
02FA 17FF30           (       mmcdrv.asm):00605                  lbsr  INITCRD        Try and initialize the card requested
02FD 102500A5         (       mmcdrv.asm):00606                  lbcs  ENOTRDY        Not ready - no card found in slot
                      (       mmcdrv.asm):00607         
0301 A6C85C           (       mmcdrv.asm):00608                  lda   MDN,u          Get drive number
0304 A721             (       mmcdrv.asm):00609                  sta   MMCCRO,y       Write to MMC control register
                      (       mmcdrv.asm):00610         
0306 30C90162         (       mmcdrv.asm):00611         RDN1     leax  RCMDBLK,u      Read command block
030A 8600             (       mmcdrv.asm):00612                  lda   #$00           Expected response
030C 8DA0             (       mmcdrv.asm):00613                  bsr   SNDCF          Send this command without delay
030E 2418             (       mmcdrv.asm):00614                  bcc   RDN2           If command did not generate err continue
                      (       mmcdrv.asm):00615         
0310 17FF1A           (       mmcdrv.asm):00616                  lbsr  INITCRD        Try and initialize the card requested
0313 1025008F         (       mmcdrv.asm):00617                  lbcs  ENOTRDY        Not ready
                      (       mmcdrv.asm):00618         
0317 A6C85C           (       mmcdrv.asm):00619                  lda   MDN,u          Get drive number again
031A A721             (       mmcdrv.asm):00620                  sta   MMCCRO,y       Set card selected at full speed
                      (       mmcdrv.asm):00621         
031C 30C90162         (       mmcdrv.asm):00622                  leax  RCMDBLK,u      Read command block
0320 8600             (       mmcdrv.asm):00623                  lda   #$00           Expected response - cmd accepted
0322 8D8A             (       mmcdrv.asm):00624                  bsr   SNDCF          Send this command without delay
0324 1025007E         (       mmcdrv.asm):00625                  lbcs  ENOTRDY        Not ready
                      (       mmcdrv.asm):00626         
0328 86FE             (       mmcdrv.asm):00627         RDN2     lda   #$FE           Expected response start of sector
032A 8D9B             (       mmcdrv.asm):00628                  bsr   CHKRF          Check for response
032C 10250082         (       mmcdrv.asm):00629                  lbcs  EREAD          Read Error
                      (       mmcdrv.asm):00630         
0330 AEC860           (       mmcdrv.asm):00631                  ldx   SECTPNT,u      We need to get the sector buffer to use
0333 8D02             (       mmcdrv.asm):00632                  bsr   RDSEC          Go read the sector
                      (       mmcdrv.asm):00633         
0335 5F               (       mmcdrv.asm):00634                  clrb                 Set no errors
0336 39               (       mmcdrv.asm):00635                  rts
                      (       mmcdrv.asm):00636         
                      (       mmcdrv.asm):00637         ***************************************************************
                      (       mmcdrv.asm):00638         * RDSEC - Read a single 256 byte sector from the MMC + 2 CRC bytes
                      (       mmcdrv.asm):00639         * Entry: Y=MMC data port address
                      (       mmcdrv.asm):00640         *        X=Sector location to copy to
                      (       mmcdrv.asm):00641         ***************************************************************
                      (       mmcdrv.asm):00642                  IFNE  SMALLC
0337                  (       mmcdrv.asm):00643         RDSEC    pshs  x              Save x
                      (       mmcdrv.asm):00644                  clrb                 Loop counter
0337                  (       mmcdrv.asm):00645         RDLP1    lda   ,y             Get data byte
                      (       mmcdrv.asm):00646                  sta   ,x+            Store data byte
                      (       mmcdrv.asm):00647                  decb
                      (       mmcdrv.asm):00648                  bne   RDLP1          Keep looping?
                      (       mmcdrv.asm):00649         *         ldd   ,y             Get CRC bytes
                      (       mmcdrv.asm):00650         *         lda   ,y             Get CRC bytes
                      (       mmcdrv.asm):00651                  puls  x,pc           Restore/return
                      (       mmcdrv.asm):00652         
                      (       mmcdrv.asm):00653                  ELSE
                      (       mmcdrv.asm):00654         
                      (       mmcdrv.asm):00655         * Using a 5 bit offset only adds 1 cycle to each of the STD instructs.
                      (       mmcdrv.asm):00656         * incrementing the X index register each time by ++ adds 3 instructions
                      (       mmcdrv.asm):00657         * so this saves 2 cycles for every 2 bytes transfered.  2 cycles * 16 
                      (       mmcdrv.asm):00658         * STD instructions = 32 saved cycles per loop or 256 cycles per sector
                      (       mmcdrv.asm):00659         * read.  This loop uses about 1900 cycles to complete. A simple lda
                      (       mmcdrv.asm):00660         * sta single byte move loop takes about 3900 cycles to complete.  This
                      (       mmcdrv.asm):00661         * is a more than 50% increase in speed for this loop (this is where
                      (       mmcdrv.asm):00662         * the driver uses the most CPU time).  6309 users note! a TFM will not
                      (       mmcdrv.asm):00663         * work because you need AT LEAST 4 coco (regardless of the CoCo's actual
                      (       mmcdrv.asm):00664         * speed) cycles between data port access for the SPI cycle to complete.  
                      (       mmcdrv.asm):00665         * If a write or read occurs during the four cycles
                      (       mmcdrv.asm):00666         * after a byte is read/wrote to the SPI data port then the data
                      (       mmcdrv.asm):00667         * transfer will be corrupted.  
                      (       mmcdrv.asm):00668         
0337 300F             (       mmcdrv.asm):00669         RDSEC    leax  15,x           Move to the middle of the 32 byte block
0339 8608             (       mmcdrv.asm):00670                  lda   #8             Number of loops to run
033B 3402             (       mmcdrv.asm):00671                  pshs  a              Used for loop
033D ECA4             (       mmcdrv.asm):00672         RDLP1    ldd   ,y             Load byte 1
033F E6A4             (       mmcdrv.asm):00673                  ldb   ,y             Load byte 2
0341 ED11             (       mmcdrv.asm):00674                  std   -15,x          Store two bytes
0343 ECA4             (       mmcdrv.asm):00675                  ldd   ,y             Load byte 3
0345 E6A4             (       mmcdrv.asm):00676                  ldb   ,y             Load byte 4
0347 ED13             (       mmcdrv.asm):00677                  std   -13,x          Store two bytes
0349 ECA4             (       mmcdrv.asm):00678                  ldd   ,y             Load byte 5
034B E6A4             (       mmcdrv.asm):00679                  ldb   ,y             Load byte 6
034D ED15             (       mmcdrv.asm):00680                  std   -11,x          Store two bytes
034F ECA4             (       mmcdrv.asm):00681                  ldd   ,y             Load byte 7
0351 E6A4             (       mmcdrv.asm):00682                  ldb   ,y             Load byte 8
0353 ED17             (       mmcdrv.asm):00683                  std   -9,x           Store two bytes
0355 ECA4             (       mmcdrv.asm):00684                  ldd   ,y             Load byte 9
0357 E6A4             (       mmcdrv.asm):00685                  ldb   ,y             Load byte 10
0359 ED19             (       mmcdrv.asm):00686                  std   -7,x           Store two bytes
035B ECA4             (       mmcdrv.asm):00687                  ldd   ,y             Load byte 11
035D E6A4             (       mmcdrv.asm):00688                  ldb   ,y             Load byte 12
035F ED1B             (       mmcdrv.asm):00689                  std   -5,x           Store two bytes
0361 ECA4             (       mmcdrv.asm):00690                  ldd   ,y             Load byte 13
0363 E6A4             (       mmcdrv.asm):00691                  ldb   ,y             Load byte 14
0365 ED1D             (       mmcdrv.asm):00692                  std   -3,x           Store two bytes
0367 ECA4             (       mmcdrv.asm):00693                  ldd   ,y             Load byte 15
0369 E6A4             (       mmcdrv.asm):00694                  ldb   ,y             Load byte 16
036B ED1F             (       mmcdrv.asm):00695                  std   -1,x           Store two bytes
036D ECA4             (       mmcdrv.asm):00696                  ldd   ,y             Load byte 17
036F E6A4             (       mmcdrv.asm):00697                  ldb   ,y             Load byte 18
0371 ED01             (       mmcdrv.asm):00698                  std   1,x            Store two bytes
0373 ECA4             (       mmcdrv.asm):00699                  ldd   ,y             Load byte 19
0375 E6A4             (       mmcdrv.asm):00700                  ldb   ,y             Load byte 20
0377 ED03             (       mmcdrv.asm):00701                  std   3,x            Store two bytes
0379 ECA4             (       mmcdrv.asm):00702                  ldd   ,y             Load byte 21
037B E6A4             (       mmcdrv.asm):00703                  ldb   ,y             Load byte 22
037D ED05             (       mmcdrv.asm):00704                  std   5,x            Store two bytes
037F ECA4             (       mmcdrv.asm):00705                  ldd   ,y             Load byte 23
0381 E6A4             (       mmcdrv.asm):00706                  ldb   ,y             Load byte 24
0383 ED07             (       mmcdrv.asm):00707                  std   7,x            Store two bytes
0385 ECA4             (       mmcdrv.asm):00708                  ldd   ,y             Load byte 25
0387 E6A4             (       mmcdrv.asm):00709                  ldb   ,y             Load byte 26
0389 ED09             (       mmcdrv.asm):00710                  std   9,x            Store two bytes
038B ECA4             (       mmcdrv.asm):00711                  ldd   ,y             Load byte 27
038D E6A4             (       mmcdrv.asm):00712                  ldb   ,y             Load byte 28
038F ED0B             (       mmcdrv.asm):00713                  std   11,x           Store two bytes
0391 ECA4             (       mmcdrv.asm):00714                  ldd   ,y             Load byte 29
0393 E6A4             (       mmcdrv.asm):00715                  ldb   ,y             Load byte 30
0395 ED0D             (       mmcdrv.asm):00716                  std   13,x           Store two bytes
0397 ECA4             (       mmcdrv.asm):00717                  ldd   ,y             Load byte 31
0399 E6A4             (       mmcdrv.asm):00718                  ldb   ,y             Load byte 32
039B ED0F             (       mmcdrv.asm):00719                  std   15,x           Store two bytes
039D 308820           (       mmcdrv.asm):00720                  leax  32,x           Add 32 bytes
03A0 6AE4             (       mmcdrv.asm):00721                  dec   ,s             Loop counter 
03A2 2699             (       mmcdrv.asm):00722                  bne   RDLP1          Loop back and do it again
                      (       mmcdrv.asm):00723         
                      (       mmcdrv.asm):00724         * Eliminated the code to pull two CRC bytes from the card.
                      (       mmcdrv.asm):00725         * The routine that checks for the correct response will 
                      (       mmcdrv.asm):00726         * extract these two bytes from the MMC
                      (       mmcdrv.asm):00727         
                      (       mmcdrv.asm):00728         *         ldd   ,y             Get 1 byte of CRC data from card
                      (       mmcdrv.asm):00729         *         ldb   ,y             Get 1 byte of CRC data from card
                      (       mmcdrv.asm):00730         
03A4 3582             (       mmcdrv.asm):00731                  puls  a,pc
                      (       mmcdrv.asm):00732         
                      (       mmcdrv.asm):00733                  ENDC
                      (       mmcdrv.asm):00734         
                      (       mmcdrv.asm):00735         * End of RDSEC subroutine
                      (       mmcdrv.asm):00736         
03A6 8D10             (       mmcdrv.asm):00737         ENOTRDY  bsr   ERREXIT
03A8 53               (       mmcdrv.asm):00738                  comb
03A9 C6F6             (       mmcdrv.asm):00739                  ldb   #E$NotRdy      Not ready
03AB 39               (       mmcdrv.asm):00740                  rts
                      (       mmcdrv.asm):00741         
03AC 8D0A             (       mmcdrv.asm):00742         EWRITE   bsr   ERREXIT
03AE 53               (       mmcdrv.asm):00743                  comb
03AF C6F5             (       mmcdrv.asm):00744                  ldb   #E$Write       Write error
03B1 39               (       mmcdrv.asm):00745                  rts
                      (       mmcdrv.asm):00746         
03B2 8D04             (       mmcdrv.asm):00747         EREAD    bsr   ERREXIT
03B4 53               (       mmcdrv.asm):00748                  comb
03B5 C6F4             (       mmcdrv.asm):00749                  ldb   #E$Read        Read error
03B7 39               (       mmcdrv.asm):00750                  rts
                      (       mmcdrv.asm):00751         
                      (       mmcdrv.asm):00752         * Added to handle things that need to occur if an error occurs
                      (       mmcdrv.asm):00753         * 1. Select the card (may already be selected)
                      (       mmcdrv.asm):00754         * 2. Send command to change sector size back to 256 bytes
                      (       mmcdrv.asm):00755         * 3. Clear the LSN0 flag (may already be cleared)
                      (       mmcdrv.asm):00756         * 4. Deselect all cards.
                      (       mmcdrv.asm):00757         
03B8 A6C85C           (       mmcdrv.asm):00758         ERREXIT  lda   MDN,u          Get drive number
03BB A721             (       mmcdrv.asm):00759                  sta   MMCCRO,y       Select card (in case not selected)
03BD 308DFC78         (       mmcdrv.asm):00760                  leax  CMD171,pcr     Get command to change sector to 256 bytes
03C1 8600             (       mmcdrv.asm):00761                  lda   #$00           Expected response
03C3 17FEE8           (       mmcdrv.asm):00762                  lbsr  SNDCF          Go send the command (cmd17-1) w/o delay
                      (       mmcdrv.asm):00763         
03C6 6FC85B           (       mmcdrv.asm):00764                  clr   lsn0,u         Clear LSN0 flag if set
03C9 6F21             (       mmcdrv.asm):00765                  clr   MMCCRO,y       Deselect any cards
03CB 39               (       mmcdrv.asm):00766                  rts 
                      (       mmcdrv.asm):00767         
03CC 6F3B3A           (       mmcdrv.asm):00768                  emod
     03CF             (       mmcdrv.asm):00769         eom      equ   *
                      (       mmcdrv.asm):00770                  end
