                      (grfdrv_beta5_with):00001         ********************************************************************
                      (grfdrv_beta5_with):00002         * GrfDrv - NitrOS-9 Windowing Driver
                      (grfdrv_beta5_with):00003         *
                      (grfdrv_beta5_with):00004         * $Id$
                      (grfdrv_beta5_with):00005         *
                      (grfdrv_beta5_with):00006         * Copyright (c) 1982 Microware Corporation
                      (grfdrv_beta5_with):00007         * Modified for 6309 Native mode by Bill Nobel - Gale Force Enterprises
                      (grfdrv_beta5_with):00008         * Also contains Kevin Darlings FstGrf patches & 1 meg routines
                      (grfdrv_beta5_with):00009         *
                      (grfdrv_beta5_with):00010         * Ed.    Comments                                       Who YY/MM/DD
                      (grfdrv_beta5_with):00011         * ------------------------------------------------------------------
                      (grfdrv_beta5_with):00012         ** 08/11/92 - Active in Native mode No apparent bugs
                      (grfdrv_beta5_with):00013         ** Additional bugfixes/optomizations by Bill Nobel & L. Curtis Boyle
                      (grfdrv_beta5_with):00014         **   09/01/92 - present
                      (grfdrv_beta5_with):00015         ** NitrOS9 V1.10
                      (grfdrv_beta5_with):00016         **   05/26/93 - 3 cycle speedup in hardware text alpha put @ L0F6B
                      (grfdrv_beta5_with):00017         ** NitrOS9 V1.11
                      (grfdrv_beta5_with):00018         **   07/14/93 - Eliminated useless LDB 8,Y @ L01B5
                      (grfdrv_beta5_with):00019         **   07/14/93 - Eliminated BMI's from L01D2; replace BGT's with BHI's
                      (grfdrv_beta5_with):00020         **   07/15/93 - Save 1 cycle/byte in Composite conversion in Select routine
                      (grfdrv_beta5_with):00021         **            - Changed some pixel calcs in L06xx to use LSLD instead of
                      (grfdrv_beta5_with):00022         **              MUL's by 8 (longer, but ends up being 12 cycles faster)
                      (grfdrv_beta5_with):00023         **            - Moved L017C routine to be near Gfx cursor updates (1 cycle
                      (grfdrv_beta5_with):00024         **              faster their and for Points with Pset buffers as well)
                      (grfdrv_beta5_with):00025         **            - Moved SysRet routine near Alpha Put area to speed text output
                      (grfdrv_beta5_with):00026         **              by 4 cycles (whether error or not)
                      (grfdrv_beta5_with):00027         **            - Modified routine @ L0F04 to save up to 2 cycles per line
                      (grfdrv_beta5_with):00028         **              of PutBlk
                      (grfdrv_beta5_with):00029         **            - Modified L0E2F & L0F20 routines to speed up checks for
                      (grfdrv_beta5_with):00030         **              stopping non-TFM PutBlk's
                      (grfdrv_beta5_with):00031         **            - Changed LEAX B,X to ABX in FFill @ L1C5F
                      (grfdrv_beta5_with):00032         **              Also change LEAS -2,s / PSHS D to PSHS X,D @ L1DCB (FFill)
                      (grfdrv_beta5_with):00033         **   07/16/93 - Changed L012B routine to LDX first, then PSHS, eliminating
                      (grfdrv_beta5_with):00034         **              the need for the STX 2,S (saves 2 bytes/6 cycles)
                      (grfdrv_beta5_with):00035         **            - Got rid of LEAY/PSHS Y/PULS Y in L012B since 8 bit addressing
                      (grfdrv_beta5_with):00036         **              is same speed as 5
                      (grfdrv_beta5_with):00037         **   07/20/93 - Modified Alpha Put to have a shortcut if writing to the
                      (grfdrv_beta5_with):00038         **              same window as GRFDRV wrote to the last time it was run
                      (grfdrv_beta5_with):00039         **            - Moved L1F08 & L1F18 routines closer to LINE to allow BSR's
                      (grfdrv_beta5_with):00040         **            - Removed redundant BRA L0FF8 in 2 color gfx text put routine
                      (grfdrv_beta5_with):00041         **            - Replaced 2 BRA L102D's with PULS A,PC (same size but saves
                      (grfdrv_beta5_with):00042         **              3 cycles)
                      (grfdrv_beta5_with):00043         **            - Replaced BRA L0A38 in L0A1C routine with PULS PC,Y,A
                      (grfdrv_beta5_with):00044         **            - Replaced BRA L0AA6 in L0A75 routine with PULS PC,Y,X,B
                      (grfdrv_beta5_with):00045         **            - Replaced BRA L0BE1 in L0BA2 routine with CLRB / LBRA SysRet
                      (grfdrv_beta5_with):00046         **            - Replaced BRA L1ADD's in L1A9D routines with PULS PC,X,D's
                      (grfdrv_beta5_with):00047         **              (In Ellipse/Circle/Arc routines)
                      (grfdrv_beta5_with):00048         **   07/28/93 - Modified L11CA routine to eliminate 1 LBRA (saves 4 cycles)
                      (grfdrv_beta5_with):00049         **            - Modified pixel XOR routine to save 3 cycles (used by Gfx
                      (grfdrv_beta5_with):00050         **              Cursor)
                      (grfdrv_beta5_with):00051         **            - Changed CMPW to CMPF when checking gfx coords @ L1E86
                      (grfdrv_beta5_with):00052         **   08/06/93 - Changed BSR Lxxxx / RTS to BRA Lxxxx in following locations:
                      (grfdrv_beta5_with):00053         **              L13AD (2), Just before L0516, L0798, Just before L1A97, L1D3C
                      (grfdrv_beta5_with):00054         ** NitrOS9 V1.16
                      (grfdrv_beta5_with):00055         **   08/30/93 - Took out DECD/DECB @ L0D27 (GPBuf wrap checks), changed BHI's
                      (grfdrv_beta5_with):00056         **              to BHS's
                      (grfdrv_beta5_with):00057         **   08/30/93 - L0E14 replaced LDA / ANDA with TIM
                      (grfdrv_beta5_with):00058         **   08/31/93 - L0B79 changed registers around for split or normal Move buffer
                      (grfdrv_beta5_with):00059         **              to shrink & speed up copy slightly
                      (grfdrv_beta5_with):00060         **   09/01/93 - L0C96 - change BLE in overwrap GP Buffer to BLO ($4000 is in
                      (grfdrv_beta5_with):00061         **              next block)
                      (grfdrv_beta5_with):00062         **   09/22/93 - Moved L1BE8 to eliminate BSR (only called once)
                      (grfdrv_beta5_with):00063         **            - Moved L1BDD to L18B7 (only called once)
                      (grfdrv_beta5_with):00064         **            - Optomized 1BC9 by 7 cycles (multiply 5 byte integer x2)
                      (grfdrv_beta5_with):00065         **   09/23/93 - Remarked out L1B4B (never called-for filled circle/ellipse?)
                      (grfdrv_beta5_with):00066         **            - Moved L1B5D to L1BB4 (only called once)
                      (grfdrv_beta5_with):00067         **   09/27/93 - Moved L1BF3 to L1BCB (only called once)
                      (grfdrv_beta5_with):00068         **   09/28/93 - Sped up/shrunk RGB color copy in Select routine with LDQ
                      (grfdrv_beta5_with):00069         **            - Sped up of 2 color text by 18 cycles/character (changed
                      (grfdrv_beta5_with):00070         **              branch compare order @ L1051
                      (grfdrv_beta5_with):00071         **            - Sped up of normal gfx text @ L10ED, and shortened code @
                      (grfdrv_beta5_with):00072         **              L10FE/L1109 by moving PULS B, and optomized L1109 branch
                      (grfdrv_beta5_with):00073         **              compare order (same as L1051)
                      (grfdrv_beta5_with):00074         **            - Changed <$A9,u vector to use ,W instead (<>2 color txt on gfx
                      (grfdrv_beta5_with):00075         **              (NOTE: Type 7 window (640x200x4) tests are over 8% faster)
                      (grfdrv_beta5_with):00076         **   10/04/93 - Shortened L0FD6 (changed BNE/BRA to a BEQ/fall through) so
                      (grfdrv_beta5_with):00077         **              Proportional & 2 color fonts are faster
                      (grfdrv_beta5_with):00078         **            - Moved L122F to before L121A (eliminate BRA for wrap to next
                      (grfdrv_beta5_with):00079         **              line)
                      (grfdrv_beta5_with):00080         **            - Did optomization @ L127E for non-full screen width screen
                      (grfdrv_beta5_with):00081         **              scrolls (also called by Insert line & Delete line)
                      (grfdrv_beta5_with):00082         **            - Took out redundant LDB <$60 @ L13E3 (clear to end of screen)
                      (grfdrv_beta5_with):00083         **            - Attempted opt of L10A4 to eliminate EXG X,Y
                      (grfdrv_beta5_with):00084         **            - Re-arranged L10FA (Gfx text, not 2 color/normal) so it is
                      (grfdrv_beta5_with):00085         **              optomized for actual text, not the cursor
                      (grfdrv_beta5_with):00086         **   10/08/93 - Changed L1E2C to use LEAX B,U (since B always <$80) since
                      (grfdrv_beta5_with):00087         **              same speed but shorter
                      (grfdrv_beta5_with):00088         **            - Changed BHI L1DEB @ L1DCB to LBHI L1C93 (1 byte longer but
                      (grfdrv_beta5_with):00089         **              2 cycles shorter)
                      (grfdrv_beta5_with):00090         **            - Changed L017C (map GP Buffer blocks, both in GRFDRV DAT &
                      (grfdrv_beta5_with):00091         **              immediate) to use DP instead of <xxxx,u vars.
                      (grfdrv_beta5_with):00092         **            - Changed L0E70 to not bother changing U because of L017C change
                      (grfdrv_beta5_with):00093         **            - Modified Gfx screen map-in routine @ MMUOnly to use
                      (grfdrv_beta5_with):00094         **              DP addressing instead of ,X (eliminates LEAX too), saving
                      (grfdrv_beta5_with):00095         **              mem & 11 cycles per map
                      (grfdrv_beta5_with):00096         **            - Also removed PSHSing X in above routine & calls to it since
                      (grfdrv_beta5_with):00097         **              not needed anymore
                      (grfdrv_beta5_with):00098         **            - Changed L01FB to use LDX #$1290 instead of LEAX >$190,u
                      (grfdrv_beta5_with):00099         **            - Changed all [...],u to use DP or immediate mode whenever
                      (grfdrv_beta5_with):00100         **              possible
                      (grfdrv_beta5_with):00101         **            - Changed EXG X,Y @ L03FF to TFR X,Y (since X immediately
                      (grfdrv_beta5_with):00102         **              destroyed) (part of DWEnd to check if last window on scrn)
                      (grfdrv_beta5_with):00103         **            - Eliminated useless BRA PutIt2 @ L0C96
                      (grfdrv_beta5_with):00104         **            - Removed PSHS/PULS of U in L0C8F (L0E70 no longer destroys U)
                      (grfdrv_beta5_with):00105         **   10/19/93 - Change L1F18 to use LDB #1/ABX instead of LEAX 1,X (2 cycles
                      (grfdrv_beta5_with):00106         **              faster)
                      (grfdrv_beta5_with):00107         **            - Removed LDU #$1100 @ L0EB2 since change to L0E70 (GP buffer)
                      (grfdrv_beta5_with):00108         **   10/20/93 - BUG FIX: Changed CMPF <$1E,Y @ L1E86 to CMPW <$1D,Y (otherwise
                      (grfdrv_beta5_with):00109         **              routines that use th 16 bit Y coord for calculations screwed
                      (grfdrv_beta5_with):00110         **              up on values >255) - MAY WANT TO TO CHANGE LATER TO HAVE HARD
                      (grfdrv_beta5_with):00111         **              CODED 0 BYTE AS MSB OF Y COORDS AND SWITCH ALL CALCS POSSIBLE
                      (grfdrv_beta5_with):00112         **              TO 8 BIT (OR LEAVE 16 BIT FOR VERTICAL SCROLLABLE SCREEN
                      (grfdrv_beta5_with):00113         **              OPTIONS)
                      (grfdrv_beta5_with):00114         **            - Moved L1E86 to L1DF8 (eliminates BRA from most X,Y coord pairs)
                      (grfdrv_beta5_with):00115         **            - Moved L1F1D/L1F2C/L1F42 (right direction FFill vectors) to
                      (grfdrv_beta5_with):00116         **              within FFill (only called once, eliminates LBSR/RTS)
                      (grfdrv_beta5_with):00117         **            - Moved L1CC2 to eliminate BRA (eats coords off of FFill stack?)
                      (grfdrv_beta5_with):00118         **            - L1D1E subroutine removed, embedded in places where called
                      (grfdrv_beta5_with):00119         **            - L1DAA: eliminated LDD <$47 & changed CMPD <$4B to CMPW <$4B
                      (grfdrv_beta5_with):00120         **            - L1DCB: changed to use both D & W to save code space & time
                      (grfdrv_beta5_with):00121         **   10/21/93 - L1D14 subroutine removed, embedded in 2 places where called
                      (grfdrv_beta5_with):00122         **            - Changed BHI L1D03 to LBHI L1C93 @ L1D55 & eliminated L1D03
                      (grfdrv_beta5_with):00123         **              label
                      (grfdrv_beta5_with):00124         **            - Changed BRA L1C93 at end of L1CF8 to LBRA L1CF8
                      (grfdrv_beta5_with):00125         **            - Moved L1186 (CurXY) to before L1129 (CTRL codes) to allow
                      (grfdrv_beta5_with):00126         **              3 LBEQ's to change to BEQ's (Cursor left,right & up) -
                      (grfdrv_beta5_with):00127         **              shrinks GRFDRV by 6 bytes
                      (grfdrv_beta5_with):00128         **            - Modified L158B (update cursor) to not PSHS/PULS Y unless on
                      (grfdrv_beta5_with):00129         **              Gfx screen (speeds text cursor updates by 9 cyc/1 byte)
                      (grfdrv_beta5_with):00130         **            - Changed LBSR to BSR (L15BF) in PutGC (L1531)
                      (grfdrv_beta5_with):00131         **            - Attempted to move L06A4-L1FB2 to just before Point (L1635)
                      (grfdrv_beta5_with):00132         **              & changed leax >L1FA3,pc to LEAX <L1FA3,pc in L15FE (saves
                      (grfdrv_beta5_with):00133         **              2 cycles & 2 bytes)
                      (grfdrv_beta5_with):00134         **   10/25/93 - Changed GRFDRV entry point to use LDX instead of LEAX
                      (grfdrv_beta5_with):00135         **              (2 cycles faster)
                      (grfdrv_beta5_with):00136         **            - Changed all LEA* xxxx,pc to use LDX #GrfStrt+xxxx (2 cyc fstr)
                      (grfdrv_beta5_with):00137         **            - Changed GRFDRV entry point to do LDX / JMP ,X (1 byte shorter &
                      (grfdrv_beta5_with):00138         **              2 cycles faster)
                      (grfdrv_beta5_with):00139         **   11/02/93 - Modified Init routine to be shorter & faster
                      (grfdrv_beta5_with):00140         **            - Took old 2 line L18B3 routine, put the label in front of
                      (grfdrv_beta5_with):00141         **              stx <$A1 just past L18BF
                      (grfdrv_beta5_with):00142         **   11/03/93 - Removed the last of [<$xx,u] labels, changed FFill to use
                      (grfdrv_beta5_with):00143         **              JSR ,U instead of JSR [$<64,U]
                      (grfdrv_beta5_with):00144         **            - Removed LDU 4,s from L0B2E, and remove PSHS/PULS U from
                      (grfdrv_beta5_with):00145         **              L0ACD, L0B35, L0B38
                      (grfdrv_beta5_with):00146         **            - In L0B79 (Move Buffer command), optimized to not PSHS/PULS
                      (grfdrv_beta5_with):00147         **              Y, use U instead for ptr (13 cyc faster/72 byte block, 5 bytes
                      (grfdrv_beta5_with):00148         **              shorter)
                      (grfdrv_beta5_with):00149         **            - Added LDU <$64 in L0E97, changed JSR [$>1164] in L0EE1 to
                      (grfdrv_beta5_with):00150         **              JSR ,U (PutBlk on different screen types)
                      (grfdrv_beta5_with):00151         **   11/04/93 - Change all LBRA xxxx to JMP GrfStrt+xxxx (1 cycle faster)
                      (grfdrv_beta5_with):00152         **   11/10/93 - Added window table references from cc3global.defs
                      (grfdrv_beta5_with):00153         **            - Added screen table references from cc3global.defs
                      (grfdrv_beta5_with):00154         **            - Added graphics table references from cc3global.defs
                      (grfdrv_beta5_with):00155         **            - Added graphics buffer references from cc3global.defs
                      (grfdrv_beta5_with):00156         **   11/12/93 - Removed code that has been moved to CoWin/CoGrf
                      (grfdrv_beta5_with):00157         **   12/15/93 - Changed TST Wt.BSW,y @ L0F8E to LDB Wt.BSW,y (cycle faster)
                      (grfdrv_beta5_with):00158         **   12/21/93 - Moved L1E9D to near next line routine to speed up some alpha
                      (grfdrv_beta5_with):00159         **              writes. Also used U instead of Y in L1E9D (smaller & a cycle
                      (grfdrv_beta5_with):00160         **              faster)
                      (grfdrv_beta5_with):00161         **   02/23/94 - Moved L0BE4 error routine earlier to allow short branch to it
                      (grfdrv_beta5_with):00162         **              from L0B3F (GPLoad), also optomized for no-error (5 cycles
                      (grfdrv_beta5_with):00163         **              faster, 2 bytes smaller)
                      (grfdrv_beta5_with):00164         **   02/24/94 - Changed lbcs L0BE7 @ L0B52 to BCS
                      (grfdrv_beta5_with):00165         **   04/14/94 - Changed CMPB >$FFAC to CMPB <$90 (saves 1 byte/cycle & poss-
                      (grfdrv_beta5_with):00166         **              ibly fixes bug for >512K machines) in L012B & L0173
                      (grfdrv_beta5_with):00167         **            - Got rid of CLR >$1003 @ L0177, changed BSR L012B to BSR L0129
                      (grfdrv_beta5_with):00168         **            - Changed CMPD #$4000 to CMPA #$40 @ L0B79 & L0C96 (also fixed
                      (grfdrv_beta5_with):00169         **              bug @ L0B79-changed BLS MoveIt to BLO MoveIt)
                      (grfdrv_beta5_with):00170         **   04/15/94 - Changed L0E14 & L0E24 to use 640/320 base to eliminate INCD,
                      (grfdrv_beta5_with):00171         **              also optomized by using LSRD instead of 2 separate LDD's
                      (grfdrv_beta5_with):00172         **            - Moved INCB from L0E2F to L0E03 to allow L0E24 to fall through
                      (grfdrv_beta5_with):00173         **              faster (by also changing LDB #MaxLine to LDB #MaxLine+1)
                      (grfdrv_beta5_with):00174         **   04/21/94 - Change all occurences of >$1003 (last window GRFDRV accessed)
                      (grfdrv_beta5_with):00175         **              to <$A9 (since now free) to speed up/shrink checks.
                      (grfdrv_beta5_with):00176         **            - Attempted mod for hware text screens: faster if >1 window
                      (grfdrv_beta5_with):00177         **              being written to at once
                      (grfdrv_beta5_with):00178         **   04/25/94 - Removed LDX #$FF90 from late in L08A4, changed STD 8,x to
                      (grfdrv_beta5_with):00179         **              STD >$FF98 (Select routine-saves 4 cycles/2 bytes
                      (grfdrv_beta5_with):00180         **            - Attempted mod @ L05C0: Changed 1st TST <$60 to LDE <$60, and
                      (grfdrv_beta5_with):00181         **              2nd to TSTE (also changed 3 LSLD's in Y coord to LSLB's)
                      (grfdrv_beta5_with):00182         **              (CWArea routine)
                      (grfdrv_beta5_with):00183         **   04/26/94 - Changed L11E1 (Home cursor) to move CLRD/CLRW/STQ Wt.CurX,y
                      (grfdrv_beta5_with):00184         **              to end (just before RTS) to allow removal of CLRD/CLRW @
                      (grfdrv_beta5_with):00185         **              L1377 (CLS)
                      (grfdrv_beta5_with):00186         **   04/27/94 - Changed GFX text routines (non-2 color) to use U as jump
                      (grfdrv_beta5_with):00187         **              vector instead of W (has changes @ L0FEC,L10D9,L10FE,L15A5)
                      (grfdrv_beta5_with):00188         **            - Changed pixel across counter from <$97 to E reg in Gfx text
                      (grfdrv_beta5_with):00189         **              routine (changes @ L10D1,L10FE)
                      (grfdrv_beta5_with):00190         **   05/04/94 - Attempted to remove PSHS X/PULS X from L0C0B (used by GetBlk
                      (grfdrv_beta5_with):00191         **              and Overlay window saves)
                      (grfdrv_beta5_with):00192         **              Also changed LBSR L0CBD to BSR @ L0BEA (part of OWSet save)
                      (grfdrv_beta5_with):00193         **   05/05/94 - Changed L0B79: Took out TFR A,B, changed CLRA to CLRE, changed
                      (grfdrv_beta5_with):00194         **              TFR D,W to TFR W,D (reflects change in CoWin)
                      (grfdrv_beta5_with):00195         **   05/08/94 - Eliminated LDB #$FF @ L108C, change BNE above it to go to
                      (grfdrv_beta5_with):00196         **              L108E instead (saves 2 cyc/bytes in proportional fonts)
                      (grfdrv_beta5_with):00197         **            - Change to L127E to move LDF to just before BRA (saves 3 cyc
                      (grfdrv_beta5_with):00198         **              on partial width screen scrolls)
                      (grfdrv_beta5_with):00199         **            - Changed TST <$60 @ L1260 to LDB <$60 (saves 1 cycle)
                      (grfdrv_beta5_with):00200         **   06/15/94 - Changed TST >$1038 @ L0080 to LDB >$1038 (saves 1 cycle)
                      (grfdrv_beta5_with):00201         **            - Changed TST St.Sty,x @ L0335 to LDB St.Sty,x (save 1 cyc)
                      (grfdrv_beta5_with):00202         **            - Eliminated LDA St.Sty,x @ L0343
                      (grfdrv_beta5_with):00203         **            - Changed TST <$59 to LDB <$59 @ L046A (OWSet)
                      (grfdrv_beta5_with):00204         **            - Changed TST Wt.FBlk,y @ L0662 to LDB Wt.FBlk,y (Font)
                      (grfdrv_beta5_with):00205         ** NitrOS9 V1.21 Changes
                      (grfdrv_beta5_with):00206         **   10/16/94 - Changed L0FBE to BSR L100F instead of L1002, added L100F (PSHS
                      (grfdrv_beta5_with):00207         **              A), saves 5 cycles per alpha put onto graphics screen
                      (grfdrv_beta5_with):00208         **   10/22/94 - Eliminated useles LDB <$60 @ L029B
                      (grfdrv_beta5_with):00209         **            - Eliminated PSHS X/PULS X @ L0366 by changing PSET/LSET vector
                      (grfdrv_beta5_with):00210         **              settings to use Q since immediate mode instead of indexed now
                      (grfdrv_beta5_with):00211         **              (saves 6 bytes/>12 cycles in Window Inits)
                      (grfdrv_beta5_with):00212         **            - Changed L106D: changed LDX/STX to use D, eliminated LDX ,S
                      (grfdrv_beta5_with):00213         **              (Part of font on multi-colored windows;saves 2 bytes/4 cyc)
                      (grfdrv_beta5_with):00214         **   10/30/94 - Changed L126B (full width screen scroll) by taking out label,
                      (grfdrv_beta5_with):00215         **              (as well as L1260), and taking out PSHS/PULS X
                      (grfdrv_beta5_with):00216         **            - Changed TST <$60 to LDB <$60 @ L12C5, changed BRA L128E @
                      (grfdrv_beta5_with):00217         **              L12DC to BRA L1354 (Saves 3 cycles when using Delete Line on
                      (grfdrv_beta5_with):00218         **              bottom line of window)
                      (grfdrv_beta5_with):00219         **            - Moved CLRE in L142A to just before L142A (saves 2 cycles per
                      (grfdrv_beta5_with):00220         **              run through loop) (same thing with CLRE @ L1450)
                      (grfdrv_beta5_with):00221         **            - Deleted L146F, moved label for it to PULS pc,a @ ClsFGfx
                      (grfdrv_beta5_with):00222         ** ATD:
                      (grfdrv_beta5_with):00223         **   12/23/95 - have SCF put text-only data at $0180, and have new call
                      (grfdrv_beta5_with):00224         **              to grfdrv to do a block PUT of the text data.
                      (grfdrv_beta5_with):00225         **              Added new L0F4B, and labels L0F4B.1 and L0F4B.2
                      (grfdrv_beta5_with):00226         **              cuts by 40% the time required for alpha screen writes!
                      (grfdrv_beta5_with):00227         **   12/26/95 - moved Line/Bar/Box common code to i.line routine
                      (grfdrv_beta5_with):00228         **              +6C:-40B, only called once per entry, so it's OK
                      (grfdrv_beta5_with):00229         **   12/28/95 - added LBSR L0177 just before font set up routine at L1002
                      (grfdrv_beta5_with):00230         **              changed lbsr L0177, lbsr L1002 to lbsr L0FFF: gets +0C:-3B
                      (grfdrv_beta5_with):00231         **              par call from L1478, L116E, L1186, L1129
                      (grfdrv_beta5_with):00232         **            - replaced 3 lines of code at L1641, i.line, L1C4F with
                      (grfdrv_beta5_with):00233         **              lbsr L1884: map in window and verify it's graphics
                      (grfdrv_beta5_with):00234         **              it's only called once per iteration, so we get 3 of +11C:-6B
                      (grfdrv_beta5_with):00235         **   02/08/96 - added fast fonts on byte boundaries to L102F
                      (grfdrv_beta5_with):00236         **            - added TFM for horizontal line if LSET=0 and no PSET
                      (grfdrv_beta5_with):00237         **            - removed most of graphics screen CLS code for non-byte
                      (grfdrv_beta5_with):00238         **              boundary windows.  They don't exist, the code is unnecessary.
                      (grfdrv_beta5_with):00239         **            - changed many ADDR D,r  to LEAr D,r where speed was unimportant
                      (grfdrv_beta5_with):00240         **   02/13/96 - fixed font.2 routine to properly handle changes in foreground
                      (grfdrv_beta5_with):00241         **              and background colors: ~13 bytes smaller. (other changes???)
                      (grfdrv_beta5_with):00242         **            - added special code to fast horizontal line routine at L16E0
                      (grfdrv_beta5_with):00243         **              to do the line byte by byte: saves a few cycles, but 2B larger
                      (grfdrv_beta5_with):00244         **   02/14/96 - added 'ldu <$64' U=pset vector to i.line, bar/box. -6 bytes,
                      (grfdrv_beta5_with):00245         **              and timed at -18 clock cycles/byte for XOR to full-screen
                      (grfdrv_beta5_with):00246         **              or 14/50 = 0.28 second faster per screen (iteration)
                      (grfdrv_beta5_with):00247         **  02/16/96  - shrunk code for $1F handler. Smaller and faster.
                      (grfdrv_beta5_with):00248         **  02/18/96  - Discovered that NitrOS-9 will allow GetBlk and PutBlk on
                      (grfdrv_beta5_with):00249         **              text screens!  Checked: GET on text and PUT on gfx crashes
                      (grfdrv_beta5_with):00250         **              the system, ditto for other way around.  Stock OS-9 does NOT
                      (grfdrv_beta5_with):00251         **              allow PutBlk or GetBlk on text! No error, but no work, either.
                      (grfdrv_beta5_with):00252         **            - Added code to PutBlk to output E$IWTyp if mixing txt and gfx
                      (grfdrv_beta5_with):00253         **              GetBlk/PutBlk, but we now allow Get and put on text screens.
                      (grfdrv_beta5_with):00254         **  02/20/96  - minor mods to update video hardware at L08A4: use U
                      (grfdrv_beta5_with):00255         **            - Added 'L1B63 LDD #1' to replace multiple LDD #1/lbsr L1B64
                      (grfdrv_beta5_with):00256         **            - moved code around to optimize for size in arc/ellipse/circle
                      (grfdrv_beta5_with):00257         **              without affecting speed at all.
                      (grfdrv_beta5_with):00258         **  02/24/96  - added special purpose code for LSET AND, OR, XOR and NO PSET
                      (grfdrv_beta5_with):00259         **              to put pixels 2 bytes at a time... full-screen BAR goes from
                      (grfdrv_beta5_with):00260         **              1.4 to .35 seconds, adds ~75 bytes.
                      (grfdrv_beta5_with):00261         **            - Added code to check for 24/25 line windows in video set code
                      (grfdrv_beta5_with):00262         **              from DWSET: Wt.DfSZY=24 uses old 192 line video defs
                      (grfdrv_beta5_with):00263         **  02/25/96  - removed 24/25-line check code, optimized video hardware update
                      (grfdrv_beta5_with):00264         **  02/26/96  - fixed fast TFM and XOR (double byte) horizontal line to
                      (grfdrv_beta5_with):00265         **              update <$47 properly
                      (grfdrv_beta5_with):00266         **            - rearranged BOX routine to cut out extra X,Y updates
                      (grfdrv_beta5_with):00267         **  02/29/96  - optimized BOX routine: smaller and marginally faster
                      (grfdrv_beta5_with):00268         **  03/05/96  - moved PSET setup routines to L1884 for Point, Line, Bar, Box
                      (grfdrv_beta5_with):00269         **              Arc, Circle, Ellipse, and FFill.
                      (grfdrv_beta5_with):00270         **            - modified FFILL to do left/right checking, and right painting
                      (grfdrv_beta5_with):00271         **              to do byte operations, if possible.  Speeds up FFILL by >20%
                      (grfdrv_beta5_with):00272         **  03/07/96  - modified FFILL to search (not paint) to the right, and to
                      (grfdrv_beta5_with):00273         **              call the fast horizontal line routine. 2-color screen FFILLs
                      (grfdrv_beta5_with):00274         **              take 1/10 the time of v1.22k: 16-color takes 1/2 of the time!
                      (grfdrv_beta5_with):00275         **  03/17/96  - added TFM and left/right pixel fixes so non-PSET/LSET odd
                      (grfdrv_beta5_with):00276         **              pixel boundary PutBlks can go full-speed.
                      (grfdrv_beta5_with):00277         **  03/18/96  - optimized the fast-font routine.  16-color screens ~5% faster
                      (grfdrv_beta5_with):00278         **  04/05/96  - addeed special-purpose hardware text screen alpha put routine
                      (grfdrv_beta5_with):00279         **              about 30% faster than before: 5 times over stock 'Xmas GrfDrv'
                      (grfdrv_beta5_with):00280         **            - merged cursor On/Off routines at L157A: smaller, ~10c slower
                      (grfdrv_beta5_with):00281         **            - saved 1 byte in invert attribute color routine
                      (grfdrv_beta5_with):00282         **            - moved FastHTxt routine (i.e. deleted it: smaller, 3C slower)
                      (grfdrv_beta5_with):00283         **            - L0516 and L0581: added 'xy.intoq' routine to set up X,Y size
                      (grfdrv_beta5_with):00284         **              for text/graphics screens
                      (grfdrv_beta5_with):00285         ** V2.00a changes (LCB)
                      (grfdrv_beta5_with):00286         ** 05/25/97-05/26/97 - added code to support 224 char fonts on graphics
                      (grfdrv_beta5_with):00287         **            screens
                      (grfdrv_beta5_with):00288         **          - Changed 3 LBSR's to BSR's (@ L01B5,L1BB4,L1D40)
                      (grfdrv_beta5_with):00289         ** 12/02/97 - Attempted to fix GetBlk, PutBlk & GPLoad to handle full width
                      (grfdrv_beta5_with):00290         **            lines @ L0BAE (GetBlk), L0CBB (PutBlk),
                      (grfdrv_beta5_with):00291         **            NOTE: TO SAVE SPACE GRFDRV, MAYBE HAVE CoWin DO THE INITIAL
                      (grfdrv_beta5_with):00292         **              DEC ADJUSTMENTS, AND JUST DO THE INC'S IN GRFDRV
                      (grfdrv_beta5_with):00293         ** 07/10/98 - Fixed OWSet/CWArea bug: changed DECB to DECD @ L05C0
                      (grfdrv_beta5_with):00294         ** 07/21/98 - Fixed screen wrap on CWAREA or Overlay window on hardware text
                      (grfdrv_beta5_with):00295         **            screens by adding check @ ftxt.ext
                      (grfdrv_beta5_with):00296         ** 07/28/98 - Fixed FFill "infinite loop" bug (See SnakeByte game), I think.
                      (grfdrv_beta5_with):00297         ** 07/30/98 - Filled Circle/Ellipse added ($1b53 & $1b54)
                      (grfdrv_beta5_with):00298         ** Repository changes (RG)
                      (grfdrv_beta5_with):00299         ** 09/17/03 - Added trap for windows overlapping 512K bank; RG.
                      (grfdrv_beta5_with):00300         **            Required changing a bsr L0306 to lbsr L0306 near L02A7
                      (grfdrv_beta5_with):00301         ** 09/25/03 - Many changes for 6809 only code. Use <$B5 to store regW
                      (grfdrv_beta5_with):00302         **            Probably could use some trimming. RG
                      (grfdrv_beta5_with):00303         ** 02/26/07 - Changed Line routine to improve symmetry. The changes will permit
                      (grfdrv_beta5_with):00304         **            the removal of the FastH and FastV routines if desired. The new
                      (grfdrv_beta5_with):00305         **            Normal Line will correctly draw horizontal or vertical lines. RG
                      (grfdrv_beta5_with):00306         **     NOTE: THIS CHANGE HAS CAUSED DISTORTIONS ON SOME PROGRAMS (NOTABLY, SHAWN
                      (grfdrv_beta5_with):00307         **           DRISCOLL'S GUIB Diamond
                      (grfdrv_beta5_with):00308         ** EOU Beta 1 changes - Hardware transparency re-enabled, as per Version 3.0 upgrade.
                      (grfdrv_beta5_with):00309         **            (allows using transparency switch to switch between current background
                      (grfdrv_beta5_with):00310         **             colour setting, and leaving background color currently at text printing
                      (grfdrv_beta5_with):00311         **             location.
                      (grfdrv_beta5_with):00312         ** EOU Beta 2 changes (LCB)
                      (grfdrv_beta5_with):00313         ** 11/13/18 - Fixed (along with CoWin) to allow grfdrv loaded outside of system map (BN)
                      (grfdrv_beta5_with):00314         ** 11/21/18 - Started changes (mostly for 6809 version) to use new DP address <grScrtch
                      (grfdrv_beta5_with):00315         **            for immediate temp storage instead of stack (saves 4 cycles per save/restore
                      (grfdrv_beta5_with):00316         **            or save/manipulate/check (LCB). Done in get.font, L01E0, L01FB, L0206,L023A,
                      (grfdrv_beta5_with):00317         **            L0256
                      (grfdrv_beta5_with):00318         ** 11/21/18 - Implemented mini-stack blast clear routine (4 byte even version only so far)
                      (grfdrv_beta5_with):00319         **            used by screen clear (both text and graphics modes) in DWSet, and resetting
                      (grfdrv_beta5_with):00320         **            all palettes to black when DWEnding last window on a screen.
                      (grfdrv_beta5_with):00321         ** 11/26/18 - Implemented StkBlCpy routine used for screen scrolling, PutBlk and GPLoad for
                      (grfdrv_beta5_with):00322         **            6809.
                      (grfdrv_beta5_with):00323         ** EOU Beta 3 changes (LCB)
                      (grfdrv_beta5_with):00324         ** 12/02/18 - Implemented StkBlClr routine used for CLS, clear to end of line, clear to end
                      (grfdrv_beta5_with):00325         **            of screen for full width text screens. Both 6809 & 6309
                      (grfdrv_beta5_with):00326         ** 12/03/18 - Implemented StkBlClr routine used for CLS, clear to end of line, clear to end
                      (grfdrv_beta5_with):00327         **            of screen for partial width graphics screens (6809)
                      (grfdrv_beta5_with):00328         ** EOU Beta 4 changes (LCB)
                      (grfdrv_beta5_with):00329         ** 12/24/18 - Attempted to optimize StkBlClr for 1-3 byte leftovers to be two bytes smaller,
                      (grfdrv_beta5_with):00330         **            and 1/2 (6309) or 2/4 cycles (6809) faster
                      (grfdrv_beta5_with):00331         ** 03/11/19 - Implemented Erik Gavriluk's more mathematically accurate composite color
                      (grfdrv_beta5_with):00332         **            conversion table at L0884
                      (grfdrv_beta5_with):00333         ** EOU Beta 5 changes (LCB)
                      (grfdrv_beta5_with):00334         ** 06/24/19 - Shrunk main entry routine by 2 bytes
                      (grfdrv_beta5_with):00335         **          - Removed unneeded std in L0366 (Window init/6809)
                      (grfdrv_beta5_with):00336         **          - shrunk/sped up L03A9 by removing un-needed std <$B5
                      (grfdrv_beta5_with):00337         ** 06/27/19 - 6809 - replaced MUL16 routine (unsigned, which breaks ARC) with original
                      (grfdrv_beta5_with):00338         **            routine (with some mods for NitrOS-9) with signed 16x16=24 bit (sign extended
                      (grfdrv_beta5_with):00339         **            to 32 bit), which fixes ARC bug (from at least 2006). This only affected
                      (grfdrv_beta5_with):00340         **            diagonal clip lines with mixed signs. (LCB)
                      (grfdrv_beta5_with):00341         ** 06/28/19 - 6309 - Fixed clear graphics screen (not window) routine, which was getting the
                      (grfdrv_beta5_with):00342         **            byte to clear with from the wrong memory location. (LCB)
                      (grfdrv_beta5_with):00343         ** 06/30/19 - 6809 - Optimized scaling routine @ L05E7 for both speed & size (LCB)
                      (grfdrv_beta5_with):00344         ** 04/26/20 - Both 6809/6309 - optimize text out routine to test for no hi bit characters
                      (grfdrv_beta5_with):00345         **            *before* calling txt.fixa. Will make code 4 bytes bigger, but speed up text
                      (grfdrv_beta5_with):00346         **            output for non-high bit characters by 10 (6309) or 12 (6809) cycles per char.
                      (grfdrv_beta5_with):00347         *****************************************************************************
                      (grfdrv_beta5_with):00348         * NOTE: The 'WHITE SCREEN' BUG MAY BE (IF WE'RE LUCKY) ALLEVIATED BY CLR'ING
                      (grfdrv_beta5_with):00349         * OFFSET 1E IN THE STATIC MEM FOR THE WINDOW, FORCING THE WINDOWING DRIVERS
                      (grfdrv_beta5_with):00350         * TO RESTART RIGHT FROM THE DEVICE DESCRIPTOR, INSTEAD OF ASSUMING THE DATA IN
                      (grfdrv_beta5_with):00351         * STATIC MEM TO BE CORRECT??
                      (grfdrv_beta5_with):00352         
                      (grfdrv_beta5_with):00353                  nam   GrfDrv
                      (grfdrv_beta5_with):00354                  ttl   NitrOS-9 Windowing Driver
                      (grfdrv_beta5_with):00355         
                      (grfdrv_beta5_with):00356                ifp1
                      (grfdrv_beta5_with):00357                  use   /dd/defs/deffile
     0002             ( /dd/defs/deffile):00001         Level    set     2
     0000             ( /dd/defs/deffile):00002         CoGrf    set     0
     0000             ( /dd/defs/deffile):00003         MATCHBOX set     0
                      ( /dd/defs/deffile):00004         *H6309    set     0
     0000             ( /dd/defs/deffile):00005         H6309    set     0
                      ( /dd/defs/deffile):00006                  use   /dd/defs/os9.d
                      (   /dd/defs/os9.d):00001         ********************************************************************
                      (   /dd/defs/os9.d):00002         * os9.d - NitrOS-9 System Definitions
                      (   /dd/defs/os9.d):00003         *
                      (   /dd/defs/os9.d):00004         * $Id$
                      (   /dd/defs/os9.d):00005         *
                      (   /dd/defs/os9.d):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/os9.d):00007         * Comment
                      (   /dd/defs/os9.d):00008         * ------------------------------------------------------------------
                      (   /dd/defs/os9.d):00009         *          1985/08/29  KMZ
                      (   /dd/defs/os9.d):00010         * Fixed DT.SBF/NFM values to 3/4
                      (   /dd/defs/os9.d):00011         *
                      (   /dd/defs/os9.d):00012         *          1985/09/01  KMZ
                      (   /dd/defs/os9.d):00013         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (   /dd/defs/os9.d):00014         *
                      (   /dd/defs/os9.d):00015         *          1985/09/03  KMZ/Robert F. Doggett
                      (   /dd/defs/os9.d):00016         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (   /dd/defs/os9.d):00017         * 68000 compatability.
                      (   /dd/defs/os9.d):00018         *
                      (   /dd/defs/os9.d):00019         *          1986/04/15  Mark G. Hawkins
                      (   /dd/defs/os9.d):00020         * F$AlHRAM System call added for COCO.
                      (   /dd/defs/os9.d):00021         *
                      (   /dd/defs/os9.d):00022         *          1986/09/08  Mark G. Hawkins
                      (   /dd/defs/os9.d):00023         * F$Alarm for COCO Clock Module.
                      (   /dd/defs/os9.d):00024         *
                      (   /dd/defs/os9.d):00025         *          1986/09/17  Mark G. Hawkins
                      (   /dd/defs/os9.d):00026         * SS.Tone For COCO.
                      (   /dd/defs/os9.d):00027         *
                      (   /dd/defs/os9.d):00028         *          1986/09/23  Mark G. Hawkins
                      (   /dd/defs/os9.d):00029         * Added F$NMLink and F$NMLoad for COCO.
                      (   /dd/defs/os9.d):00030         *
                      (   /dd/defs/os9.d):00031         *          1986/09/30  Mark G. Hawkins
                      (   /dd/defs/os9.d):00032         * Added Reserved User $70 to $7f in sytem calls.
                      (   /dd/defs/os9.d):00033         *
                      (   /dd/defs/os9.d):00034         *          1986/09/30  Mark G. Hawkins
                      (   /dd/defs/os9.d):00035         * Created Color Computer 3 Version of OS9Defs.
                      (   /dd/defs/os9.d):00036         *
                      (   /dd/defs/os9.d):00037         *          1998/10/03  Boisy G. Pitre
                      (   /dd/defs/os9.d):00038         * Consoldated Level 1/Level 2 os9defs.
                      (   /dd/defs/os9.d):00039         *
                      (   /dd/defs/os9.d):00040         *          2002/04/04  Boisy G. Pitre
                      (   /dd/defs/os9.d):00041         * Consoldated Level 2/Level 2 V3 os9defs.
                      (   /dd/defs/os9.d):00042         *
                      (   /dd/defs/os9.d):00043         *          2002/04/30  Boisy G. Pitre
                      (   /dd/defs/os9.d):00044         * Added NitrOS-9 definitions.
                      (   /dd/defs/os9.d):00045         *
                      (   /dd/defs/os9.d):00046         *          2003/05/30  Boisy G. Pitre
                      (   /dd/defs/os9.d):00047         * Added WD1002 sys vars to Level One section.
                      (   /dd/defs/os9.d):00048         *
                      (   /dd/defs/os9.d):00049         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/os9.d):00050         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (   /dd/defs/os9.d):00051         * changed the sizes from 2 to 3 bytes.
                      (   /dd/defs/os9.d):00052         * DT.NFM is now the same for both Level One and Level Two.
                      (   /dd/defs/os9.d):00053         * Added DT.CDFM type for future CD-ROM file manager
                      (   /dd/defs/os9.d):00054         *
                      (   /dd/defs/os9.d):00055         *          2003/11/05  Robert Gault
                      (   /dd/defs/os9.d):00056         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (   /dd/defs/os9.d):00057         *
                      (   /dd/defs/os9.d):00058         *              2005/11/02  P.Harvey-Smith
                      (   /dd/defs/os9.d):00059         * Added definitions for boot areas on Dragon computers.
                      (   /dd/defs/os9.d):00060         *
                      (   /dd/defs/os9.d):00061         *              2006/03/03  Boisy G. Pitre
                      (   /dd/defs/os9.d):00062         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (   /dd/defs/os9.d):00063         *
                      (   /dd/defs/os9.d):00064         * Added I$ModDsc call (modify device descriptor in system memory) BN/LCB
                      (   /dd/defs/os9.d):00065         *          2019/10/30  Bill Nobel, from discussions with L. Curtis Boyle
                      (   /dd/defs/os9.d):00066                        NAM       os9.d
                      (   /dd/defs/os9.d):00067                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (   /dd/defs/os9.d):00068         
                      (   /dd/defs/os9.d):00069         * Common definitions
     0001             (   /dd/defs/os9.d):00070         true           EQU       1                   useful name
     0000             (   /dd/defs/os9.d):00071         false          EQU       0                   useful name
                      (   /dd/defs/os9.d):00072         
                      (   /dd/defs/os9.d):00073                        PAG       
                      (   /dd/defs/os9.d):00074         *****************************************
                      (   /dd/defs/os9.d):00075         * System Service Request Code Definitions
                      (   /dd/defs/os9.d):00076         *
                      (   /dd/defs/os9.d):00077                        ORG       0
0000                  (   /dd/defs/os9.d):00078         F$Link         RMB       1                   Link to Module
0001                  (   /dd/defs/os9.d):00079         F$Load         RMB       1                   Load Module from File
0002                  (   /dd/defs/os9.d):00080         F$UnLink       RMB       1                   Unlink Module
0003                  (   /dd/defs/os9.d):00081         F$Fork         RMB       1                   Start New Process
0004                  (   /dd/defs/os9.d):00082         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (   /dd/defs/os9.d):00083         F$Chain        RMB       1                   Chain Process to New Module
0006                  (   /dd/defs/os9.d):00084         F$Exit         RMB       1                   Terminate Process
0007                  (   /dd/defs/os9.d):00085         F$Mem          RMB       1                   Set Memory Size
0008                  (   /dd/defs/os9.d):00086         F$Send         RMB       1                   Send Signal to Process
0009                  (   /dd/defs/os9.d):00087         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (   /dd/defs/os9.d):00088         F$Sleep        RMB       1                   Suspend Process
000B                  (   /dd/defs/os9.d):00089         F$SSpd         RMB       1                   Suspend Process
000C                  (   /dd/defs/os9.d):00090         F$ID           RMB       1                   Return Process ID
000D                  (   /dd/defs/os9.d):00091         F$SPrior       RMB       1                   Set Process Priority
000E                  (   /dd/defs/os9.d):00092         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (   /dd/defs/os9.d):00093         F$PErr         RMB       1                   Print Error
0010                  (   /dd/defs/os9.d):00094         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (   /dd/defs/os9.d):00095         F$CmpNam       RMB       1                   Compare Two Names
0012                  (   /dd/defs/os9.d):00096         F$SchBit       RMB       1                   Search Bit Map
0013                  (   /dd/defs/os9.d):00097         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (   /dd/defs/os9.d):00098         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (   /dd/defs/os9.d):00099         F$Time         RMB       1                   Get Current Time
0016                  (   /dd/defs/os9.d):00100         F$STime        RMB       1                   Set Current Time
0017                  (   /dd/defs/os9.d):00101         F$CRC          RMB       1                   Generate CRC ($17)
                      (   /dd/defs/os9.d):00102         
                      (   /dd/defs/os9.d):00103         
                      (   /dd/defs/os9.d):00104         * NitrOS-9 Level 2 system calls
0018                  (   /dd/defs/os9.d):00105         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (   /dd/defs/os9.d):00106         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (   /dd/defs/os9.d):00107         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (   /dd/defs/os9.d):00108         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (   /dd/defs/os9.d):00109         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (   /dd/defs/os9.d):00110         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (   /dd/defs/os9.d):00111         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (   /dd/defs/os9.d):00112                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (   /dd/defs/os9.d):00113         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (   /dd/defs/os9.d):00114         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (   /dd/defs/os9.d):00115         
                      (   /dd/defs/os9.d):00116         
                      (   /dd/defs/os9.d):00117         * NitrOS-9 Level 1 system call padding
                      (   /dd/defs/os9.d):00118         
                      (   /dd/defs/os9.d):00119         
0023                  (   /dd/defs/os9.d):00120         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (   /dd/defs/os9.d):00121         
                      (   /dd/defs/os9.d):00122         
                      (   /dd/defs/os9.d):00123                        ORG       $25
0025                  (   /dd/defs/os9.d):00124         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (   /dd/defs/os9.d):00125         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (   /dd/defs/os9.d):00126         
                      (   /dd/defs/os9.d):00127         
                      (   /dd/defs/os9.d):00128                        ORG       $27                 Beginning of System Reserved Calls
                      (   /dd/defs/os9.d):00129         * NitrOS-9 common system calls
0027                  (   /dd/defs/os9.d):00130         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (   /dd/defs/os9.d):00131         F$SRqMem       RMB       1                   System Memory Request
0029                  (   /dd/defs/os9.d):00132         F$SRtMem       RMB       1                   System Memory Return
002A                  (   /dd/defs/os9.d):00133         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (   /dd/defs/os9.d):00134         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (   /dd/defs/os9.d):00135         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (   /dd/defs/os9.d):00136         F$NProc        RMB       1                   Start Next Process
002E                  (   /dd/defs/os9.d):00137         F$VModul       RMB       1                   Validate Module
002F                  (   /dd/defs/os9.d):00138         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (   /dd/defs/os9.d):00139         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (   /dd/defs/os9.d):00140         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (   /dd/defs/os9.d):00141         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (   /dd/defs/os9.d):00142         F$IODel        RMB       1                   Delete I/O Module
                      (   /dd/defs/os9.d):00143         
                      (   /dd/defs/os9.d):00144         
0034                  (   /dd/defs/os9.d):00145         F$SLink        RMB       1                   System Link
0035                  (   /dd/defs/os9.d):00146         F$Boot         RMB       1                   Bootstrap System
0036                  (   /dd/defs/os9.d):00147         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (   /dd/defs/os9.d):00148         F$GProcP       RMB       1                   Get Process ptr
0038                  (   /dd/defs/os9.d):00149         F$Move         RMB       1                   Move Data (low bound first)
0039                  (   /dd/defs/os9.d):00150         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (   /dd/defs/os9.d):00151         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (   /dd/defs/os9.d):00152         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (   /dd/defs/os9.d):00153         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (   /dd/defs/os9.d):00154         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (   /dd/defs/os9.d):00155         F$FreeHB       RMB       1                   Get Free High Block
003F                  (   /dd/defs/os9.d):00156         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (   /dd/defs/os9.d):00157         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (   /dd/defs/os9.d):00158         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (   /dd/defs/os9.d):00159         F$ResTsk       RMB       1                   Reserve Task number
0043                  (   /dd/defs/os9.d):00160         F$RelTsk       RMB       1                   Release Task number
0044                  (   /dd/defs/os9.d):00161         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (   /dd/defs/os9.d):00162         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (   /dd/defs/os9.d):00163         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (   /dd/defs/os9.d):00164         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (   /dd/defs/os9.d):00165         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (   /dd/defs/os9.d):00166         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (   /dd/defs/os9.d):00167         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (   /dd/defs/os9.d):00168         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (   /dd/defs/os9.d):00169         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (   /dd/defs/os9.d):00170         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (   /dd/defs/os9.d):00171         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (   /dd/defs/os9.d):00172         F$MapBlk       RMB       1                   Map Specific Block
0050                  (   /dd/defs/os9.d):00173         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (   /dd/defs/os9.d):00174         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (   /dd/defs/os9.d):00175         F$GCMDir       RMB       1                   Pack module directory
0053                  (   /dd/defs/os9.d):00176         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (   /dd/defs/os9.d):00177         
                      (   /dd/defs/os9.d):00178         * Alan DeKok additions
0054                  (   /dd/defs/os9.d):00179         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (   /dd/defs/os9.d):00180         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (   /dd/defs/os9.d):00181         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (   /dd/defs/os9.d):00182         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (   /dd/defs/os9.d):00183         
                      (   /dd/defs/os9.d):00184         
                      (   /dd/defs/os9.d):00185         *
                      (   /dd/defs/os9.d):00186         * Numbers $70 through $7F are reserved for user definitions
                      (   /dd/defs/os9.d):00187         *
                      (   /dd/defs/os9.d):00188                        ORG       $70
                      (   /dd/defs/os9.d):00189         
                      (   /dd/defs/os9.d):00190         
                      (   /dd/defs/os9.d):00191         
                      (   /dd/defs/os9.d):00192         
0070                  (   /dd/defs/os9.d):00193         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (   /dd/defs/os9.d):00194         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (   /dd/defs/os9.d):00195         
0072                  (   /dd/defs/os9.d):00196                        RMB       $80-.               Reserved for user definitions
                      (   /dd/defs/os9.d):00197         
                      (   /dd/defs/os9.d):00198                        PAG       
                      (   /dd/defs/os9.d):00199         **************************************
                      (   /dd/defs/os9.d):00200         * I/O Service Request Code Definitions
                      (   /dd/defs/os9.d):00201         *
                      (   /dd/defs/os9.d):00202                        ORG       $80
0080                  (   /dd/defs/os9.d):00203         I$Attach       RMB       1                   Attach I/O Device
0081                  (   /dd/defs/os9.d):00204         I$Detach       RMB       1                   Detach I/O Device
0082                  (   /dd/defs/os9.d):00205         I$Dup          RMB       1                   Duplicate Path
0083                  (   /dd/defs/os9.d):00206         I$Create       RMB       1                   Create New File
0084                  (   /dd/defs/os9.d):00207         I$Open         RMB       1                   Open Existing File
0085                  (   /dd/defs/os9.d):00208         I$MakDir       RMB       1                   Make Directory File
0086                  (   /dd/defs/os9.d):00209         I$ChgDir       RMB       1                   Change Default Directory
0087                  (   /dd/defs/os9.d):00210         I$Delete       RMB       1                   Delete File
0088                  (   /dd/defs/os9.d):00211         I$Seek         RMB       1                   Change Current Position
0089                  (   /dd/defs/os9.d):00212         I$Read         RMB       1                   Read Data
008A                  (   /dd/defs/os9.d):00213         I$Write        RMB       1                   Write Data
008B                  (   /dd/defs/os9.d):00214         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (   /dd/defs/os9.d):00215         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (   /dd/defs/os9.d):00216         I$GetStt       RMB       1                   Get Path Status
008E                  (   /dd/defs/os9.d):00217         I$SetStt       RMB       1                   Set Path Status
008F                  (   /dd/defs/os9.d):00218         I$Close        RMB       1                   Close Path
0090                  (   /dd/defs/os9.d):00219         I$DeletX       RMB       1                   Delete from current exec dir
0091                  (   /dd/defs/os9.d):00220         I$ModDsc       RMB       1                   Modify SCF/RBF Descriptor in Memory
                      (   /dd/defs/os9.d):00221         
                      (   /dd/defs/os9.d):00222         *******************
                      (   /dd/defs/os9.d):00223         * File Access Modes
                      (   /dd/defs/os9.d):00224         *
     0001             (   /dd/defs/os9.d):00225         READ.          EQU       %00000001
     0002             (   /dd/defs/os9.d):00226         WRITE.         EQU       %00000010
     0003             (   /dd/defs/os9.d):00227         UPDAT.         EQU       READ.+WRITE.
     0004             (   /dd/defs/os9.d):00228         EXEC.          EQU       %00000100
     0008             (   /dd/defs/os9.d):00229         PREAD.         EQU       %00001000
     0010             (   /dd/defs/os9.d):00230         PWRIT.         EQU       %00010000
     0020             (   /dd/defs/os9.d):00231         PEXEC.         EQU       %00100000
     0040             (   /dd/defs/os9.d):00232         SHARE.         EQU       %01000000
     0080             (   /dd/defs/os9.d):00233         DIR.           EQU       %10000000
     0020             (   /dd/defs/os9.d):00234         ISIZ.          EQU       %00100000
                      (   /dd/defs/os9.d):00235         
                      (   /dd/defs/os9.d):00236         **************
                      (   /dd/defs/os9.d):00237         * Signal Codes
                      (   /dd/defs/os9.d):00238         *
                      (   /dd/defs/os9.d):00239                        ORG       0
0000                  (   /dd/defs/os9.d):00240         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (   /dd/defs/os9.d):00241         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (   /dd/defs/os9.d):00242         S$Abort        RMB       1                   Keyboard Abort
0003                  (   /dd/defs/os9.d):00243         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (   /dd/defs/os9.d):00244         S$Window       RMB       1                   Window Change
     0004             (   /dd/defs/os9.d):00245         S$HUP          EQU       S$Window            Hang Up
0005                  (   /dd/defs/os9.d):00246         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (   /dd/defs/os9.d):00247         
                      (   /dd/defs/os9.d):00248                        PAG       
                      (   /dd/defs/os9.d):00249         **********************************
                      (   /dd/defs/os9.d):00250         * Status Codes for GetStat/GetStat
                      (   /dd/defs/os9.d):00251         *
                      (   /dd/defs/os9.d):00252                        ORG       0
0000                  (   /dd/defs/os9.d):00253         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (   /dd/defs/os9.d):00254         SS.Ready       RMB       1                   Check for Device Ready
0002                  (   /dd/defs/os9.d):00255         SS.Size        RMB       1                   Read/Write File Size
0003                  (   /dd/defs/os9.d):00256         SS.Reset       RMB       1                   Device Restore
0004                  (   /dd/defs/os9.d):00257         SS.WTrk        RMB       1                   Device Write Track
0005                  (   /dd/defs/os9.d):00258         SS.Pos         RMB       1                   Get File Current Position
0006                  (   /dd/defs/os9.d):00259         SS.EOF         RMB       1                   Test for End of File
0007                  (   /dd/defs/os9.d):00260         SS.Link        RMB       1                   Link to Status routines
0008                  (   /dd/defs/os9.d):00261         SS.ULink       RMB       1                   Unlink Status routines
0009                  (   /dd/defs/os9.d):00262         SS.Feed        RMB       1                   Issue form feed
000A                  (   /dd/defs/os9.d):00263         SS.Frz         RMB       1                   Freeze DD. information
000B                  (   /dd/defs/os9.d):00264         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (   /dd/defs/os9.d):00265         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (   /dd/defs/os9.d):00266         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (   /dd/defs/os9.d):00267         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (   /dd/defs/os9.d):00268         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (   /dd/defs/os9.d):00269         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (   /dd/defs/os9.d):00270         SS.Lock        RMB       1                   Lock/Release record
0012                  (   /dd/defs/os9.d):00271         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (   /dd/defs/os9.d):00272         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (   /dd/defs/os9.d):00273         SS.BlkRd       RMB       1                   Block Read
0015                  (   /dd/defs/os9.d):00274         SS.BlkWr       RMB       1                   Block Write
0016                  (   /dd/defs/os9.d):00275         SS.Reten       RMB       1                   Retension cycle
0017                  (   /dd/defs/os9.d):00276         SS.WFM         RMB       1                   Write File Mark
0018                  (   /dd/defs/os9.d):00277         SS.RFM         RMB       1                   Read past File Mark
0019                  (   /dd/defs/os9.d):00278         SS.ELog        RMB       1                   Read Error Log
001A                  (   /dd/defs/os9.d):00279         SS.SSig        RMB       1                   Send signal on data ready
001B                  (   /dd/defs/os9.d):00280         SS.Relea       RMB       1                   Release device
001C                  (   /dd/defs/os9.d):00281         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (   /dd/defs/os9.d):00282         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (   /dd/defs/os9.d):00283         SS.Break       RMB       1                   Send break signal out acia
001E                  (   /dd/defs/os9.d):00284         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (   /dd/defs/os9.d):00285                        RMB       1                   Reserved
     0020             (   /dd/defs/os9.d):00286         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (   /dd/defs/os9.d):00287         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (   /dd/defs/os9.d):00288                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (   /dd/defs/os9.d):00289         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (   /dd/defs/os9.d):00290         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (   /dd/defs/os9.d):00291         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (   /dd/defs/os9.d):00292         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (   /dd/defs/os9.d):00293         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (   /dd/defs/os9.d):00294         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (   /dd/defs/os9.d):00295         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (   /dd/defs/os9.d):00296         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (   /dd/defs/os9.d):00297         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (   /dd/defs/os9.d):00298         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (   /dd/defs/os9.d):00299         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (   /dd/defs/os9.d):00300         
                      (   /dd/defs/os9.d):00301         * System Specific and User defined codes above $80
                      (   /dd/defs/os9.d):00302                        ORG       $80
0080                  (   /dd/defs/os9.d):00303         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (   /dd/defs/os9.d):00304         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (   /dd/defs/os9.d):00305         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (   /dd/defs/os9.d):00306         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (   /dd/defs/os9.d):00307         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (   /dd/defs/os9.d):00308         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (   /dd/defs/os9.d):00309         
                      (   /dd/defs/os9.d):00310         *               IFGT      Level-1
                      (   /dd/defs/os9.d):00311         * Level 2 Windowing
0086                  (   /dd/defs/os9.d):00312         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (   /dd/defs/os9.d):00313         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (   /dd/defs/os9.d):00314         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (   /dd/defs/os9.d):00315         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (   /dd/defs/os9.d):00316         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (   /dd/defs/os9.d):00317         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (   /dd/defs/os9.d):00318         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (   /dd/defs/os9.d):00319         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (   /dd/defs/os9.d):00320         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (   /dd/defs/os9.d):00321         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (   /dd/defs/os9.d):00322                        RMB       1                   Reserved
0091                  (   /dd/defs/os9.d):00323         SS.Palet       RMB       1                   Return palette information
0092                  (   /dd/defs/os9.d):00324         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (   /dd/defs/os9.d):00325         SS.ScTyp       RMB       1                   Get screen type information
0094                  (   /dd/defs/os9.d):00326         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (   /dd/defs/os9.d):00327         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (   /dd/defs/os9.d):00328         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (   /dd/defs/os9.d):00329         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (   /dd/defs/os9.d):00330         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (   /dd/defs/os9.d):00331         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (   /dd/defs/os9.d):00332         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (   /dd/defs/os9.d):00333         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (   /dd/defs/os9.d):00334         
                      (   /dd/defs/os9.d):00335         * sc6551 defined
     0099             (   /dd/defs/os9.d):00336         SS.CDSta       EQU       SS.GIP2
     009A             (   /dd/defs/os9.d):00337         SS.CDSig       EQU       SS.AnPal
     009B             (   /dd/defs/os9.d):00338         SS.CDRel       EQU       SS.FndBf
                      (   /dd/defs/os9.d):00339         * These are wide open in Level 1
                      (   /dd/defs/os9.d):00340         
                      (   /dd/defs/os9.d):00341         * sc6551 defined
                      (   /dd/defs/os9.d):00342         
                      (   /dd/defs/os9.d):00343                        ORG       $A0
                      (   /dd/defs/os9.d):00344         *
                      (   /dd/defs/os9.d):00345         * New Default SCF input buffer Set status call
00A0                  (   /dd/defs/os9.d):00346         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (   /dd/defs/os9.d):00347         SS.Hist        RMB       1                   Enable command-line history easily
                      (   /dd/defs/os9.d):00348         
                      (   /dd/defs/os9.d):00349         
                      (   /dd/defs/os9.d):00350                        ORG       $B0
                      (   /dd/defs/os9.d):00351         *
                      (   /dd/defs/os9.d):00352         * New WDDisk get/set status calls
00B0                  (   /dd/defs/os9.d):00353         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (   /dd/defs/os9.d):00354         
                      (   /dd/defs/os9.d):00355         *
                      (   /dd/defs/os9.d):00356         
                      (   /dd/defs/os9.d):00357         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (   /dd/defs/os9.d):00358         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (   /dd/defs/os9.d):00359         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (   /dd/defs/os9.d):00360         
     0081             (   /dd/defs/os9.d):00361         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (   /dd/defs/os9.d):00362         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (   /dd/defs/os9.d):00363         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (   /dd/defs/os9.d):00364         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (   /dd/defs/os9.d):00365         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (   /dd/defs/os9.d):00366         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (   /dd/defs/os9.d):00367         
                      (   /dd/defs/os9.d):00368         * SDisk 3 Definition Equates
     0080             (   /dd/defs/os9.d):00369         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (   /dd/defs/os9.d):00370         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (   /dd/defs/os9.d):00371         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (   /dd/defs/os9.d):00372         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (   /dd/defs/os9.d):00373         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (   /dd/defs/os9.d):00374         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (   /dd/defs/os9.d):00375         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (   /dd/defs/os9.d):00376         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (   /dd/defs/os9.d):00377         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return ($86)
                      (   /dd/defs/os9.d):00378         
                      (   /dd/defs/os9.d):00379         
                      (   /dd/defs/os9.d):00380                        TTL       Direct Page Definitions
                      (   /dd/defs/os9.d):00381                        PAG       
                      (   /dd/defs/os9.d):00382         
                      (   /dd/defs/os9.d):00383         **********************************
                      (   /dd/defs/os9.d):00384         * Direct Page Variable Definitions
                      (   /dd/defs/os9.d):00385         *
                      (   /dd/defs/os9.d):00386                        ORG       $00
0000                  (   /dd/defs/os9.d):00387         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (   /dd/defs/os9.d):00388         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (   /dd/defs/os9.d):00389         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (   /dd/defs/os9.d):00390                        RMB       5
0009                  (   /dd/defs/os9.d):00391         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (   /dd/defs/os9.d):00392         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (   /dd/defs/os9.d):00393         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (   /dd/defs/os9.d):00394         D.DWStat       RMB       2                   DriveWire statics page
0010                  (   /dd/defs/os9.d):00395         D.DWSrvID      RMB       1                   DriveWire server ID
                      (   /dd/defs/os9.d):00396         
                      (   /dd/defs/os9.d):00397                        ORG       $20
                      (   /dd/defs/os9.d):00398         
                      (   /dd/defs/os9.d):00399         
                      (   /dd/defs/os9.d):00400         * Level 1 DP vars
                      (   /dd/defs/os9.d):00401         
                      (   /dd/defs/os9.d):00402         *D.XSWI3        RMB       3
                      (   /dd/defs/os9.d):00403         *D.XSWI2        RMB       3
                      (   /dd/defs/os9.d):00404         *D.XFIRQ        RMB       3
                      (   /dd/defs/os9.d):00405         *D.XIRQ         RMB       3
                      (   /dd/defs/os9.d):00406         *D.XSWI         RMB       3
                      (   /dd/defs/os9.d):00407         *D.XNMI         RMB       3
                      (   /dd/defs/os9.d):00408         
                      (   /dd/defs/os9.d):00409         
                      (   /dd/defs/os9.d):00410         * Table Sizes
                      (   /dd/defs/os9.d):00411         
                      (   /dd/defs/os9.d):00412         
                      (   /dd/defs/os9.d):00413         * Level 2 DP vars
0020                  (   /dd/defs/os9.d):00414         D.Tasks        RMB       2                   Task User Table
0022                  (   /dd/defs/os9.d):00415         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (   /dd/defs/os9.d):00416         D.Init         RMB       2                   Initialization Module ptr
0026                  (   /dd/defs/os9.d):00417         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (   /dd/defs/os9.d):00418         D.Time         EQU       .                   System Time
0028                  (   /dd/defs/os9.d):00419         D.Year         RMB       1
0029                  (   /dd/defs/os9.d):00420         D.Month        RMB       1
002A                  (   /dd/defs/os9.d):00421         D.Day          RMB       1
002B                  (   /dd/defs/os9.d):00422         D.Hour         RMB       1
002C                  (   /dd/defs/os9.d):00423         D.Min          RMB       1
002D                  (   /dd/defs/os9.d):00424         D.Sec          RMB       1
002E                  (   /dd/defs/os9.d):00425         D.Tick         RMB       1
002F                  (   /dd/defs/os9.d):00426         D.Slice        RMB       1                   current slice remaining
0030                  (   /dd/defs/os9.d):00427         D.TSlice       RMB       1                   Ticks per Slice
0031                  (   /dd/defs/os9.d):00428         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (   /dd/defs/os9.d):00429         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (   /dd/defs/os9.d):00430         D.ErrCod       RMB       1                   Reset Error Code
0034                  (   /dd/defs/os9.d):00431         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (   /dd/defs/os9.d):00432         D.TkCnt        RMB       1                   Tick Counter
0036                  (   /dd/defs/os9.d):00433         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (   /dd/defs/os9.d):00434         D.BtSz         RMB       2                   Size of Boot
                      (   /dd/defs/os9.d):00435         
003A                  (   /dd/defs/os9.d):00436                        RMB       1                   Currently unused in NitrOS-9/6809
                      (   /dd/defs/os9.d):00437         
003B                  (   /dd/defs/os9.d):00438         D.CRC          RMB       1                   CRC checking mode flag
                      (   /dd/defs/os9.d):00439         
003C                  (   /dd/defs/os9.d):00440         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (   /dd/defs/os9.d):00441         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (   /dd/defs/os9.d):00442         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (   /dd/defs/os9.d):00443         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (   /dd/defs/os9.d):00444         
                      (   /dd/defs/os9.d):00445                        ORG       $40
0040                  (   /dd/defs/os9.d):00446         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (   /dd/defs/os9.d):00447         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (   /dd/defs/os9.d):00448         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (   /dd/defs/os9.d):00449         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (   /dd/defs/os9.d):00450         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (   /dd/defs/os9.d):00451         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (   /dd/defs/os9.d):00452         D.Proc         RMB       2                   Current Process ptr
0052                  (   /dd/defs/os9.d):00453         D.AProcQ       RMB       2                   Active Process Queue
0054                  (   /dd/defs/os9.d):00454         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (   /dd/defs/os9.d):00455         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (   /dd/defs/os9.d):00456         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (   /dd/defs/os9.d):00457         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (   /dd/defs/os9.d):00458         D.CldRes       RMB       2                   Cold Restart vector
005E                  (   /dd/defs/os9.d):00459         D.BtBug        RMB       3                   Boot debug information
0061                  (   /dd/defs/os9.d):00460         D.Pipe         RMB       2
                      (   /dd/defs/os9.d):00461         
                      (   /dd/defs/os9.d):00462                        ORG       $6B
006B                  (   /dd/defs/os9.d):00463         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (   /dd/defs/os9.d):00464         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (   /dd/defs/os9.d):00465         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (   /dd/defs/os9.d):00466         
                      (   /dd/defs/os9.d):00467                        ORG       $80
0080                  (   /dd/defs/os9.d):00468         D.DevTbl       RMB       2                   I/O Device Table
0082                  (   /dd/defs/os9.d):00469         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (   /dd/defs/os9.d):00470                        RMB       4                   reserved
0088                  (   /dd/defs/os9.d):00471         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (   /dd/defs/os9.d):00472         D.DMAReq       RMB       1                   DMA Request flag
                      (   /dd/defs/os9.d):00473         
                      (   /dd/defs/os9.d):00474         ********
                      (   /dd/defs/os9.d):00475         * CoCo 3 STUFF COMES NEXT
                      (   /dd/defs/os9.d):00476         * This area is used for the CoCo Hardware Registers
                      (   /dd/defs/os9.d):00477         *
                      (   /dd/defs/os9.d):00478                        ORG       $90
0090                  (   /dd/defs/os9.d):00479         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (   /dd/defs/os9.d):00480         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (   /dd/defs/os9.d):00481         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (   /dd/defs/os9.d):00482         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (   /dd/defs/os9.d):00483         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (   /dd/defs/os9.d):00484         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (   /dd/defs/os9.d):00485         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (   /dd/defs/os9.d):00486         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (   /dd/defs/os9.d):00487         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (   /dd/defs/os9.d):00488         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (   /dd/defs/os9.d):00489         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (   /dd/defs/os9.d):00490         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (   /dd/defs/os9.d):00491         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (   /dd/defs/os9.d):00492         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (   /dd/defs/os9.d):00493         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (   /dd/defs/os9.d):00494         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (   /dd/defs/os9.d):00495         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (   /dd/defs/os9.d):00496         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (   /dd/defs/os9.d):00497         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (   /dd/defs/os9.d):00498         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (   /dd/defs/os9.d):00499         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (   /dd/defs/os9.d):00500         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (   /dd/defs/os9.d):00501         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (   /dd/defs/os9.d):00502         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (   /dd/defs/os9.d):00503         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (   /dd/defs/os9.d):00504         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (   /dd/defs/os9.d):00505         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (   /dd/defs/os9.d):00506         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (   /dd/defs/os9.d):00507         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (   /dd/defs/os9.d):00508         D.Clock2       RMB       2                   CC Clock2 entry address
                      (   /dd/defs/os9.d):00509                        ORG       $C0
00C0                  (   /dd/defs/os9.d):00510         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (   /dd/defs/os9.d):00511         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (   /dd/defs/os9.d):00512         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (   /dd/defs/os9.d):00513         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (   /dd/defs/os9.d):00514         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (   /dd/defs/os9.d):00515         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (   /dd/defs/os9.d):00516         D.SysStk       RMB       2                   System stack
00CE                  (   /dd/defs/os9.d):00517         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (   /dd/defs/os9.d):00518         D.SysTsk       RMB       1                   System Task number
                      (   /dd/defs/os9.d):00519                        ORG       $E0
00E0                  (   /dd/defs/os9.d):00520         D.Clock        RMB       2
00E2                  (   /dd/defs/os9.d):00521         D.XSWI3        RMB       2
00E4                  (   /dd/defs/os9.d):00522         D.XSWI2        RMB       2
00E6                  (   /dd/defs/os9.d):00523         D.XFIRQ        RMB       2
00E8                  (   /dd/defs/os9.d):00524         D.XIRQ         RMB       2
00EA                  (   /dd/defs/os9.d):00525         D.XSWI         RMB       2
00EC                  (   /dd/defs/os9.d):00526         D.XNMI         RMB       2
00EE                  (   /dd/defs/os9.d):00527         D.ErrRst       RMB       2
00F0                  (   /dd/defs/os9.d):00528         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (   /dd/defs/os9.d):00529         D.SWI3         RMB       2
00F4                  (   /dd/defs/os9.d):00530         D.SWI2         RMB       2
00F6                  (   /dd/defs/os9.d):00531         D.FIRQ         RMB       2
00F8                  (   /dd/defs/os9.d):00532         D.IRQ          RMB       2
00FA                  (   /dd/defs/os9.d):00533         D.SWI          RMB       2
00FC                  (   /dd/defs/os9.d):00534         D.NMI          RMB       2
                      (   /dd/defs/os9.d):00535         
                      (   /dd/defs/os9.d):00536         *************************
                      (   /dd/defs/os9.d):00537         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (   /dd/defs/os9.d):00538         * and for bytes in the system memory map at D.SysMem.
                      (   /dd/defs/os9.d):00539         * A value of 0 indicates an unused/unassigned block.
                      (   /dd/defs/os9.d):00540         * In the code, block assignment often involves incrementing a value
                      (   /dd/defs/os9.d):00541         * from 0 to 1 rather than explict use of RAMinUse.
                      (   /dd/defs/os9.d):00542         *
     0080             (   /dd/defs/os9.d):00543         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (   /dd/defs/os9.d):00544         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (   /dd/defs/os9.d):00545         ModBlock       EQU       %00000010           Module in Block
     0001             (   /dd/defs/os9.d):00546         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (   /dd/defs/os9.d):00547         *
                      (   /dd/defs/os9.d):00548         * Service Dispatch Table special entries
                      (   /dd/defs/os9.d):00549         *
     00FE             (   /dd/defs/os9.d):00550         IOEntry        EQU       254
                      (   /dd/defs/os9.d):00551         
                      (   /dd/defs/os9.d):00552         
                      (   /dd/defs/os9.d):00553                        TTL       Structure Formats
                      (   /dd/defs/os9.d):00554                        PAG       
                      (   /dd/defs/os9.d):00555         ************************************
                      (   /dd/defs/os9.d):00556         * Module Directory Entry Definitions
                      (   /dd/defs/os9.d):00557         *
                      (   /dd/defs/os9.d):00558                        ORG       0
0000                  (   /dd/defs/os9.d):00559         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (   /dd/defs/os9.d):00560         MD$MBSiz       RMB       2                   Memory Block size
0004                  (   /dd/defs/os9.d):00561         MD$MPtr        RMB       2                   Module ptr
0006                  (   /dd/defs/os9.d):00562         MD$Link        RMB       2                   Module Link count
     0008             (   /dd/defs/os9.d):00563         MD$ESize       EQU       .                   Module Directory Entry size
                      (   /dd/defs/os9.d):00564         
                      (   /dd/defs/os9.d):00565         ************************************
                      (   /dd/defs/os9.d):00566         * Module Definitions
                      (   /dd/defs/os9.d):00567         *
                      (   /dd/defs/os9.d):00568         * Universal Module Offsets
                      (   /dd/defs/os9.d):00569         *
                      (   /dd/defs/os9.d):00570                        ORG       0
0000                  (   /dd/defs/os9.d):00571         M$ID           RMB       2                   ID Code
0002                  (   /dd/defs/os9.d):00572         M$Size         RMB       2                   Module Size
0004                  (   /dd/defs/os9.d):00573         M$Name         RMB       2                   Module Name
0006                  (   /dd/defs/os9.d):00574         M$Type         RMB       1                   Type / Language
0007                  (   /dd/defs/os9.d):00575         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (   /dd/defs/os9.d):00576         M$Parity       RMB       1                   Header Parity
     0009             (   /dd/defs/os9.d):00577         M$IDSize       EQU       .                   Module ID Size
                      (   /dd/defs/os9.d):00578         *
                      (   /dd/defs/os9.d):00579         * Type-Dependent Module Offsets
                      (   /dd/defs/os9.d):00580         *
                      (   /dd/defs/os9.d):00581         * System, File Manager, Device Driver, Program Module
                      (   /dd/defs/os9.d):00582         *
0009                  (   /dd/defs/os9.d):00583         M$Exec         RMB       2                   Execution Entry Offset
                      (   /dd/defs/os9.d):00584         *
                      (   /dd/defs/os9.d):00585         * Device Driver, Program Module
                      (   /dd/defs/os9.d):00586         *
000B                  (   /dd/defs/os9.d):00587         M$Mem          RMB       2                   Stack Requirement
                      (   /dd/defs/os9.d):00588         *
                      (   /dd/defs/os9.d):00589         * Device Driver, Device Descriptor Module
                      (   /dd/defs/os9.d):00590         *
000D                  (   /dd/defs/os9.d):00591         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (   /dd/defs/os9.d):00592         *
                      (   /dd/defs/os9.d):00593         * Device Descriptor Module
                      (   /dd/defs/os9.d):00594         *
                      (   /dd/defs/os9.d):00595                        ORG       M$IDSize
0009                  (   /dd/defs/os9.d):00596         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (   /dd/defs/os9.d):00597         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (   /dd/defs/os9.d):00598                        RMB       1                   M$Mode (defined above)
000E                  (   /dd/defs/os9.d):00599         M$Port         RMB       3                   Port Address
0011                  (   /dd/defs/os9.d):00600         M$Opt          RMB       1                   Device Default Options
0012                  (   /dd/defs/os9.d):00601         M$DTyp         RMB       1                   Device Type
     0012             (   /dd/defs/os9.d):00602         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (   /dd/defs/os9.d):00603         *
                      (   /dd/defs/os9.d):00604         * Configuration Module Entry Offsets
                      (   /dd/defs/os9.d):00605         *
                      (   /dd/defs/os9.d):00606                        ORG       M$IDSize
0009                  (   /dd/defs/os9.d):00607         MaxMem         RMB       3                   Maximum Free Memory
000C                  (   /dd/defs/os9.d):00608         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (   /dd/defs/os9.d):00609         DevCnt         RMB       1                   Entries in Device Table
000E                  (   /dd/defs/os9.d):00610         InitStr        RMB       2                   Initial Module Name
0010                  (   /dd/defs/os9.d):00611         SysStr         RMB       2                   System Device Name
0012                  (   /dd/defs/os9.d):00612         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (   /dd/defs/os9.d):00613         BootStr        RMB       2                   Bootstrap Module name
0016                  (   /dd/defs/os9.d):00614         ProtFlag       RMB       1                   Write protect enable flag
                      (   /dd/defs/os9.d):00615         
0017                  (   /dd/defs/os9.d):00616         OSLevel        RMB       1                   OS level
0018                  (   /dd/defs/os9.d):00617         OSVer          RMB       1                   OS version
0019                  (   /dd/defs/os9.d):00618         OSMajor        RMB       1                   OS major
001A                  (   /dd/defs/os9.d):00619         OSMinor        RMB       1                   OS minor
001B                  (   /dd/defs/os9.d):00620         Feature1       RMB       1                   feature byte 1
001C                  (   /dd/defs/os9.d):00621         Feature2       RMB       1                   feature byte 2
001D                  (   /dd/defs/os9.d):00622         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (   /dd/defs/os9.d):00623         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (   /dd/defs/os9.d):00624                        RMB       4                   reserved for future use
                      (   /dd/defs/os9.d):00625         
                      (   /dd/defs/os9.d):00626         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (   /dd/defs/os9.d):00627         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (   /dd/defs/os9.d):00628         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (   /dd/defs/os9.d):00629         KeyRptS        RMB       1                   Key repeat start constant
0029                  (   /dd/defs/os9.d):00630         KeyRptD        RMB       1                   Key repeat delay constant
                      (   /dd/defs/os9.d):00631         
                      (   /dd/defs/os9.d):00632         * Feature1 byte definitions
     0001             (   /dd/defs/os9.d):00633         CRCOn          EQU       %00000001           CRC checking on
     0000             (   /dd/defs/os9.d):00634         CRCOff         EQU       %00000000           CRC checking off
     0000             (   /dd/defs/os9.d):00635         Proc6809       EQU       %00000000           6809 procesor
     0002             (   /dd/defs/os9.d):00636         Proc6309       EQU       %00000010           6309 procesor
                      (   /dd/defs/os9.d):00637         
                      (   /dd/defs/os9.d):00638                        PAG       
                      (   /dd/defs/os9.d):00639         **************************
                      (   /dd/defs/os9.d):00640         * Module Field Definitions
                      (   /dd/defs/os9.d):00641         *
                      (   /dd/defs/os9.d):00642         * ID Field - First two bytes of a NitrOS-9 module
                      (   /dd/defs/os9.d):00643         *
     0087             (   /dd/defs/os9.d):00644         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (   /dd/defs/os9.d):00645         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (   /dd/defs/os9.d):00646         M$ID12         EQU       M$ID1*256+M$ID2
                      (   /dd/defs/os9.d):00647         
                      (   /dd/defs/os9.d):00648         *
                      (   /dd/defs/os9.d):00649         * Module Type/Language Field Masks
                      (   /dd/defs/os9.d):00650         *
     00F0             (   /dd/defs/os9.d):00651         TypeMask       EQU       %11110000           Type Field
     000F             (   /dd/defs/os9.d):00652         LangMask       EQU       %00001111           Language Field
                      (   /dd/defs/os9.d):00653         
                      (   /dd/defs/os9.d):00654         *
                      (   /dd/defs/os9.d):00655         * Module Type Values
                      (   /dd/defs/os9.d):00656         *
     00F0             (   /dd/defs/os9.d):00657         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (   /dd/defs/os9.d):00658         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (   /dd/defs/os9.d):00659         FlMgr          EQU       $D0                 File Manager
     00C0             (   /dd/defs/os9.d):00660         Systm          EQU       $C0                 System Module
     0050             (   /dd/defs/os9.d):00661         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (   /dd/defs/os9.d):00662         Data           EQU       $40                 Data Module
     0030             (   /dd/defs/os9.d):00663         Multi          EQU       $30                 Multi-Module
     0020             (   /dd/defs/os9.d):00664         Sbrtn          EQU       $20                 Subroutine Module
     0010             (   /dd/defs/os9.d):00665         Prgrm          EQU       $10                 Program Module
                      (   /dd/defs/os9.d):00666         
                      (   /dd/defs/os9.d):00667         *
                      (   /dd/defs/os9.d):00668         * Module Language Values
                      (   /dd/defs/os9.d):00669         *
     0001             (   /dd/defs/os9.d):00670         Objct          EQU       1                   6809 Object Code Module
     0002             (   /dd/defs/os9.d):00671         ICode          EQU       2                   Basic09 I-code
     0003             (   /dd/defs/os9.d):00672         PCode          EQU       3                   Pascal P-code
     0004             (   /dd/defs/os9.d):00673         CCode          EQU       4                   C I-code
     0005             (   /dd/defs/os9.d):00674         CblCode        EQU       5                   Cobol I-code
     0006             (   /dd/defs/os9.d):00675         FrtnCode       EQU       6                   Fortran I-code
     0007             (   /dd/defs/os9.d):00676         Obj6309        EQU       7                   6309 object code
                      (   /dd/defs/os9.d):00677         *
                      (   /dd/defs/os9.d):00678         * Module Attributes / Revision byte
                      (   /dd/defs/os9.d):00679         *
                      (   /dd/defs/os9.d):00680         * Field Masks
                      (   /dd/defs/os9.d):00681         *
     00F0             (   /dd/defs/os9.d):00682         AttrMask       EQU       %11110000           Attributes Field
     000F             (   /dd/defs/os9.d):00683         RevsMask       EQU       %00001111           Revision Level Field
                      (   /dd/defs/os9.d):00684         *
                      (   /dd/defs/os9.d):00685         * Attribute Flags
                      (   /dd/defs/os9.d):00686         *
     0080             (   /dd/defs/os9.d):00687         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (   /dd/defs/os9.d):00688         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (   /dd/defs/os9.d):00689         ModNat         EQU       %00100000           6309 native mode attribute
     0040             (   /dd/defs/os9.d):00690         BufWrits       EQU       ModProt             SCF buffered read supported (Coco only at this point)
     0010             (   /dd/defs/os9.d):00691         BufReads       EQU       %00010000           SCF buffered write supported (Coco only at this point)
                      (   /dd/defs/os9.d):00692         * LCB - propose we add Buffered Read/Buffered Write attribute bits for Coco (in descriptors and
                      (   /dd/defs/os9.d):00693         *   drivers for SCF), with one of them replacing ModProt. SCF would check Read/ReadLn and Write/WritLn
                      (   /dd/defs/os9.d):00694         *   calls, and if both the driver and descriptor have the appropriate bit set, it would do buffered 32
                      (   /dd/defs/os9.d):00695         *   byte (for now) reads/writes like the Grfdrv write call does now, for all bytes that are ASCII >$1F
                      (   /dd/defs/os9.d):00696         *   (ie non-control chars, which need special processing)
                      (   /dd/defs/os9.d):00697         
                      (   /dd/defs/os9.d):00698         
                      (   /dd/defs/os9.d):00699         ********************
                      (   /dd/defs/os9.d):00700         * Device Type Values
                      (   /dd/defs/os9.d):00701         *
                      (   /dd/defs/os9.d):00702         * These values define various classes of devices, which are
                      (   /dd/defs/os9.d):00703         * managed by a file manager module.  The Device Type is embedded
                      (   /dd/defs/os9.d):00704         * in a device's device descriptor.
                      (   /dd/defs/os9.d):00705         *
     0000             (   /dd/defs/os9.d):00706         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (   /dd/defs/os9.d):00707         DT.RBF         EQU       1                   Random Block File Manager
     0002             (   /dd/defs/os9.d):00708         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (   /dd/defs/os9.d):00709         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (   /dd/defs/os9.d):00710         DT.NFM         EQU       4                   Network File Manager
     0005             (   /dd/defs/os9.d):00711         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (   /dd/defs/os9.d):00712         DT.RFM                  EQU             6                                       Remote File Manager
                      (   /dd/defs/os9.d):00713         
                      (   /dd/defs/os9.d):00714         *********************
                      (   /dd/defs/os9.d):00715         * CRC Result Constant
                      (   /dd/defs/os9.d):00716         *
     0080             (   /dd/defs/os9.d):00717         CRCCon1        EQU       $80
     0FE3             (   /dd/defs/os9.d):00718         CRCCon23       EQU       $0FE3
                      (   /dd/defs/os9.d):00719         
                      (   /dd/defs/os9.d):00720                        TTL       Process Information
                      (   /dd/defs/os9.d):00721                        PAG       
                      (   /dd/defs/os9.d):00722         ********************************
                      (   /dd/defs/os9.d):00723         * Process Descriptor Definitions
                      (   /dd/defs/os9.d):00724         *
                      (   /dd/defs/os9.d):00725         
                      (   /dd/defs/os9.d):00726         * Level 1 process descriptor defs
                      (   /dd/defs/os9.d):00727         
                      (   /dd/defs/os9.d):00728         
                      (   /dd/defs/os9.d):00729         *
                      (   /dd/defs/os9.d):00730         * Process State Flags
                      (   /dd/defs/os9.d):00731         *
                      (   /dd/defs/os9.d):00732         
                      (   /dd/defs/os9.d):00733         
                      (   /dd/defs/os9.d):00734         * Level 2 process descriptor defs
     0010             (   /dd/defs/os9.d):00735         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (   /dd/defs/os9.d):00736         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (   /dd/defs/os9.d):00737         NumPaths       EQU       16                  Number of Local Paths
                      (   /dd/defs/os9.d):00738         
                      (   /dd/defs/os9.d):00739                        ORG       0
0000                  (   /dd/defs/os9.d):00740         P$ID           RMB       1                   Process ID
0001                  (   /dd/defs/os9.d):00741         P$PID          RMB       1                   Parent's ID
0002                  (   /dd/defs/os9.d):00742         P$SID          RMB       1                   Sibling's ID
0003                  (   /dd/defs/os9.d):00743         P$CID          RMB       1                   Child's ID
0004                  (   /dd/defs/os9.d):00744         P$SP           RMB       2                   Stack ptr
0006                  (   /dd/defs/os9.d):00745         P$Task         RMB       1                   Task Number
0007                  (   /dd/defs/os9.d):00746         P$PagCnt       RMB       1                   Memory Page Count
0008                  (   /dd/defs/os9.d):00747         P$User         RMB       2                   User Index
000A                  (   /dd/defs/os9.d):00748         P$Prior        RMB       1                   Priority
000B                  (   /dd/defs/os9.d):00749         P$Age          RMB       1                   Age
000C                  (   /dd/defs/os9.d):00750         P$State        RMB       1                   Status
000D                  (   /dd/defs/os9.d):00751         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (   /dd/defs/os9.d):00752         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (   /dd/defs/os9.d):00753         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (   /dd/defs/os9.d):00754         P$PModul       RMB       2                   Primary Module
0013                  (   /dd/defs/os9.d):00755         P$SWI          RMB       2                   SWI Entry Point
0015                  (   /dd/defs/os9.d):00756         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (   /dd/defs/os9.d):00757         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (   /dd/defs/os9.d):00758         P$Signal       RMB       1                   Signal Code
001A                  (   /dd/defs/os9.d):00759         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (   /dd/defs/os9.d):00760         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (   /dd/defs/os9.d):00761         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (   /dd/defs/os9.d):00762                        RMB       $20-.               unused
0020                  (   /dd/defs/os9.d):00763         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (   /dd/defs/os9.d):00764         P$Path         RMB       NumPaths            I/O Path Table
0040                  (   /dd/defs/os9.d):00765         P$DATImg       RMB       64                  DAT Image
0080                  (   /dd/defs/os9.d):00766         P$Links        RMB       32                  Block Link counts
00A0                  (   /dd/defs/os9.d):00767         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (   /dd/defs/os9.d):00768         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (   /dd/defs/os9.d):00769         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (   /dd/defs/os9.d):00770         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (   /dd/defs/os9.d):00771         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (   /dd/defs/os9.d):00772         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (   /dd/defs/os9.d):00773         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (   /dd/defs/os9.d):00774         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (   /dd/defs/os9.d):00775         P$Alarm        RMB       6
00C9                  (   /dd/defs/os9.d):00776                        RMB       $200-.              Local stack
     0200             (   /dd/defs/os9.d):00777         P$Stack        EQU       .                   Top of Stack
     0200             (   /dd/defs/os9.d):00778         P$Size         EQU       .                   Size of Process Descriptor
                      (   /dd/defs/os9.d):00779         
                      (   /dd/defs/os9.d):00780         *
                      (   /dd/defs/os9.d):00781         * Process State Flags
                      (   /dd/defs/os9.d):00782         *
     0080             (   /dd/defs/os9.d):00783         SysState       EQU       %10000000
     0040             (   /dd/defs/os9.d):00784         TimSleep       EQU       %01000000
     0020             (   /dd/defs/os9.d):00785         TimOut         EQU       %00100000
     0010             (   /dd/defs/os9.d):00786         ImgChg         EQU       %00010000
     0008             (   /dd/defs/os9.d):00787         Suspend        EQU       %00001000
     0002             (   /dd/defs/os9.d):00788         Condem         EQU       %00000010
     0001             (   /dd/defs/os9.d):00789         Dead           EQU       %00000001
                      (   /dd/defs/os9.d):00790         
                      (   /dd/defs/os9.d):00791         
                      (   /dd/defs/os9.d):00792                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (   /dd/defs/os9.d):00793                        PAG       
                      (   /dd/defs/os9.d):00794         *************************
                      (   /dd/defs/os9.d):00795         * Path Descriptor Offsets
                      (   /dd/defs/os9.d):00796         *
                      (   /dd/defs/os9.d):00797                        ORG       0
0000                  (   /dd/defs/os9.d):00798         PD.PD          RMB       1                   Path Number
0001                  (   /dd/defs/os9.d):00799         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (   /dd/defs/os9.d):00800         PD.CNT         RMB       1                   Number of Open Images
0003                  (   /dd/defs/os9.d):00801         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (   /dd/defs/os9.d):00802         PD.CPR         RMB       1                   Current Process
0006                  (   /dd/defs/os9.d):00803         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (   /dd/defs/os9.d):00804         PD.BUF         RMB       2                   Buffer Address
000A                  (   /dd/defs/os9.d):00805         PD.FST         RMB       32-.                File Manager's Storage
     0020             (   /dd/defs/os9.d):00806         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (   /dd/defs/os9.d):00807         PD.DTP         RMB       1                   Device Type
0021                  (   /dd/defs/os9.d):00808                        RMB       64-.                Path options
     0040             (   /dd/defs/os9.d):00809         PDSIZE         EQU       .
                      (   /dd/defs/os9.d):00810         
                      (   /dd/defs/os9.d):00811         *
                      (   /dd/defs/os9.d):00812         * Pathlist Special Symbols
                      (   /dd/defs/os9.d):00813         *
     002F             (   /dd/defs/os9.d):00814         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (   /dd/defs/os9.d):00815         PDIR           EQU       '.                  Directory
     0040             (   /dd/defs/os9.d):00816         PENTIR         EQU       '@                  Entire Device
                      (   /dd/defs/os9.d):00817         
                      (   /dd/defs/os9.d):00818                        PAG       
                      (   /dd/defs/os9.d):00819         ****************************
                      (   /dd/defs/os9.d):00820         * File Manager Entry Offsets
                      (   /dd/defs/os9.d):00821         *
                      (   /dd/defs/os9.d):00822                        ORG       0
0000                  (   /dd/defs/os9.d):00823         FMCREA         RMB       3                   Create (Open New) File
0003                  (   /dd/defs/os9.d):00824         FMOPEN         RMB       3                   Open File
0006                  (   /dd/defs/os9.d):00825         FMMDIR         RMB       3                   Make Directory
0009                  (   /dd/defs/os9.d):00826         FMCDIR         RMB       3                   Change Directory
000C                  (   /dd/defs/os9.d):00827         FMDLET         RMB       3                   Delete File
000F                  (   /dd/defs/os9.d):00828         FMSEEK         RMB       3                   Position File
0012                  (   /dd/defs/os9.d):00829         FMREAD         RMB       3                   Read from File
0015                  (   /dd/defs/os9.d):00830         FMWRIT         RMB       3                   Write to File
0018                  (   /dd/defs/os9.d):00831         FMRDLN         RMB       3                   ReadLn
001B                  (   /dd/defs/os9.d):00832         FMWRLN         RMB       3                   WritLn
001E                  (   /dd/defs/os9.d):00833         FMGSTA         RMB       3                   Get File Status
0021                  (   /dd/defs/os9.d):00834         FMSSTA         RMB       3                   Set File Status
0024                  (   /dd/defs/os9.d):00835         FMCLOS         RMB       3                   Close File
                      (   /dd/defs/os9.d):00836         
                      (   /dd/defs/os9.d):00837         *****************************
                      (   /dd/defs/os9.d):00838         * Device Driver Entry Offsets
                      (   /dd/defs/os9.d):00839         *
                      (   /dd/defs/os9.d):00840                        ORG       0
0000                  (   /dd/defs/os9.d):00841         D$INIT         RMB       3                   Device Initialization
0003                  (   /dd/defs/os9.d):00842         D$READ         RMB       3                   Read from Device
0006                  (   /dd/defs/os9.d):00843         D$WRIT         RMB       3                   Write to Device
0009                  (   /dd/defs/os9.d):00844         D$GSTA         RMB       3                   Get Device Status
000C                  (   /dd/defs/os9.d):00845         D$PSTA         RMB       3                   Put Device Status
000F                  (   /dd/defs/os9.d):00846         D$TERM         RMB       3                   Device Termination
                      (   /dd/defs/os9.d):00847         
                      (   /dd/defs/os9.d):00848         *********************
                      (   /dd/defs/os9.d):00849         * Device Table Format
                      (   /dd/defs/os9.d):00850         *
                      (   /dd/defs/os9.d):00851                        ORG       0
0000                  (   /dd/defs/os9.d):00852         V$DRIV         RMB       2                   Device Driver module
0002                  (   /dd/defs/os9.d):00853         V$STAT         RMB       2                   Device Driver Static storage
0004                  (   /dd/defs/os9.d):00854         V$DESC         RMB       2                   Device Descriptor module
0006                  (   /dd/defs/os9.d):00855         V$FMGR         RMB       2                   File Manager module
0008                  (   /dd/defs/os9.d):00856         V$USRS         RMB       1                   use count
0009                  (   /dd/defs/os9.d):00857         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (   /dd/defs/os9.d):00858         V$FMGREX       RMB       2                   File Manager execution address
     000D             (   /dd/defs/os9.d):00859         DEVSIZ         EQU       .
                      (   /dd/defs/os9.d):00860         
                      (   /dd/defs/os9.d):00861         *******************************
                      (   /dd/defs/os9.d):00862         * Device Static Storage Offsets
                      (   /dd/defs/os9.d):00863         *
                      (   /dd/defs/os9.d):00864                        ORG       0
0000                  (   /dd/defs/os9.d):00865         V.PAGE         RMB       1                   Port Extended Address
0001                  (   /dd/defs/os9.d):00866         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (   /dd/defs/os9.d):00867         V.LPRC         RMB       1                   Last Active Process ID
0004                  (   /dd/defs/os9.d):00868         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (   /dd/defs/os9.d):00869         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (   /dd/defs/os9.d):00870         V.USER         EQU       .                   Driver Allocation Origin
                      (   /dd/defs/os9.d):00871         
                      (   /dd/defs/os9.d):00872         ********************************
                      (   /dd/defs/os9.d):00873         * Interrupt Polling Table Format
                      (   /dd/defs/os9.d):00874         *
                      (   /dd/defs/os9.d):00875                        ORG       0
0000                  (   /dd/defs/os9.d):00876         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (   /dd/defs/os9.d):00877         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (   /dd/defs/os9.d):00878         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (   /dd/defs/os9.d):00879         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (   /dd/defs/os9.d):00880         Q$STAT         RMB       2                   Static Storage Address
0008                  (   /dd/defs/os9.d):00881         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
0009                  (   /dd/defs/os9.d):00882         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
     000B             (   /dd/defs/os9.d):00883         POLSIZ         EQU       .
                      (   /dd/defs/os9.d):00884         
                      (   /dd/defs/os9.d):00885         ********************
                      (   /dd/defs/os9.d):00886         * VIRQ packet format
                      (   /dd/defs/os9.d):00887         *
                      (   /dd/defs/os9.d):00888                        ORG       0
0000                  (   /dd/defs/os9.d):00889         Vi.Cnt         RMB       2                   count down counter
0002                  (   /dd/defs/os9.d):00890         Vi.Rst         RMB       2                   reset value for counter
0004                  (   /dd/defs/os9.d):00891         Vi.Stat        RMB       1                   status byte
     0005             (   /dd/defs/os9.d):00892         Vi.PkSz        EQU       .
                      (   /dd/defs/os9.d):00893         
     0001             (   /dd/defs/os9.d):00894         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (   /dd/defs/os9.d):00895         
                      (   /dd/defs/os9.d):00896                        PAG       
                      (   /dd/defs/os9.d):00897         *************************************
                      (   /dd/defs/os9.d):00898         * Machine Characteristics Definitions
                      (   /dd/defs/os9.d):00899         *
     0000             (   /dd/defs/os9.d):00900         R$CC           EQU       0                   Condition Codes register
     0001             (   /dd/defs/os9.d):00901         R$A            EQU       1                   A Accumulator
     0002             (   /dd/defs/os9.d):00902         R$B            EQU       2                   B Accumulator
     0001             (   /dd/defs/os9.d):00903         R$D            EQU       R$A                 Combined A:B Accumulator
                      (   /dd/defs/os9.d):00904                        IFNE      H6309
0005                  (   /dd/defs/os9.d):00905         R$E            EQU       3
0005                  (   /dd/defs/os9.d):00906         R$F            EQU       4
0005                  (   /dd/defs/os9.d):00907         R$W            EQU       R$E
0005                  (   /dd/defs/os9.d):00908         R$Q            EQU       R$A
0005                  (   /dd/defs/os9.d):00909         R$DP           EQU       5
0005                  (   /dd/defs/os9.d):00910         R$X            EQU       6
0005                  (   /dd/defs/os9.d):00911         R$Y            EQU       8
0005                  (   /dd/defs/os9.d):00912         R$U            EQU       10
0005                  (   /dd/defs/os9.d):00913         R$PC           EQU       12
0005                  (   /dd/defs/os9.d):00914         R$Size         EQU       14
                      (   /dd/defs/os9.d):00915                        ELSE
     0003             (   /dd/defs/os9.d):00916         R$DP           EQU       3                   Direct Page register
     0004             (   /dd/defs/os9.d):00917         R$X            EQU       4                   X Index register
     0006             (   /dd/defs/os9.d):00918         R$Y            EQU       6                   Y Index register
     0008             (   /dd/defs/os9.d):00919         R$U            EQU       8                   User Stack register
     000A             (   /dd/defs/os9.d):00920         R$PC           EQU       10                  Program Counter register
     000C             (   /dd/defs/os9.d):00921         R$Size         EQU       12                  Total register package size
                      (   /dd/defs/os9.d):00922                        ENDC
                      (   /dd/defs/os9.d):00923         
                      (   /dd/defs/os9.d):00924         * MD register masks
                      (   /dd/defs/os9.d):00925         * 6309 definitions
     0080             (   /dd/defs/os9.d):00926         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (   /dd/defs/os9.d):00927         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (   /dd/defs/os9.d):00928         
     0080             (   /dd/defs/os9.d):00929         Entire         EQU       %10000000           Full Register Stack flag
     0040             (   /dd/defs/os9.d):00930         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (   /dd/defs/os9.d):00931         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (   /dd/defs/os9.d):00932         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (   /dd/defs/os9.d):00933         Negative       EQU       %00001000           Negative flag
     0004             (   /dd/defs/os9.d):00934         Zero           EQU       %00000100           Zero flag
     0002             (   /dd/defs/os9.d):00935         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (   /dd/defs/os9.d):00936         Carry          EQU       %00000001           Carry bit
     0050             (   /dd/defs/os9.d):00937         IntMasks       EQU       IRQMask+FIRQMask
     0080             (   /dd/defs/os9.d):00938         Sign           EQU       %10000000           sign bit
                      (   /dd/defs/os9.d):00939         
                      (   /dd/defs/os9.d):00940                        TTL       Error Code Definitions
                      (   /dd/defs/os9.d):00941                        PAG       
                      (   /dd/defs/os9.d):00942         ************************
                      (   /dd/defs/os9.d):00943         * Error Code Definitions
                      (   /dd/defs/os9.d):00944         *
                      (   /dd/defs/os9.d):00945         * Basic09 Error Codes
                      (   /dd/defs/os9.d):00946         *
                      (   /dd/defs/os9.d):00947                        ORG       10
000A                  (   /dd/defs/os9.d):00948         E$UnkSym       RMB       1                   Unknown symbol
000B                  (   /dd/defs/os9.d):00949         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (   /dd/defs/os9.d):00950         E$IllStC       RMB       1                   Illegal statement construction
000D                  (   /dd/defs/os9.d):00951         E$ICOvf        RMB       1                   I-code overflow
000E                  (   /dd/defs/os9.d):00952         E$IChRef       RMB       1                   Illegal channel reference
000F                  (   /dd/defs/os9.d):00953         E$IllMod       RMB       1                   Illegal mode
0010                  (   /dd/defs/os9.d):00954         E$IllNum       RMB       1                   Illegal number
0011                  (   /dd/defs/os9.d):00955         E$IllPrf       RMB       1                   Illegal prefix
0012                  (   /dd/defs/os9.d):00956         E$IllOpd       RMB       1                   Illegal operand
0013                  (   /dd/defs/os9.d):00957         E$IllOpr       RMB       1                   Illegal operator
0014                  (   /dd/defs/os9.d):00958         E$IllRFN       RMB       1                   Illegal record field name
0015                  (   /dd/defs/os9.d):00959         E$IllDim       RMB       1                   Illegal dimension
0016                  (   /dd/defs/os9.d):00960         E$IllLit       RMB       1                   Illegal literal
0017                  (   /dd/defs/os9.d):00961         E$IllRet       RMB       1                   Illegal relational
0018                  (   /dd/defs/os9.d):00962         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (   /dd/defs/os9.d):00963         E$DimLrg       RMB       1                   Dimension too large
001A                  (   /dd/defs/os9.d):00964         E$LinLrg       RMB       1                   Line number too large
001B                  (   /dd/defs/os9.d):00965         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (   /dd/defs/os9.d):00966         E$NoPath       RMB       1                   Missing path number
001D                  (   /dd/defs/os9.d):00967         E$NoComa       RMB       1                   Missing coma
001E                  (   /dd/defs/os9.d):00968         E$NoDim        RMB       1                   Missing dimension
001F                  (   /dd/defs/os9.d):00969         E$NoDO         RMB       1                   Missing DO statement
0020                  (   /dd/defs/os9.d):00970         E$MFull        RMB       1                   Memory full
0021                  (   /dd/defs/os9.d):00971         E$NoGoto       RMB       1                   Missing GOTO
0022                  (   /dd/defs/os9.d):00972         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (   /dd/defs/os9.d):00973         E$NoLRef       RMB       1                   Missing line reference
0024                  (   /dd/defs/os9.d):00974         E$NoOprd       RMB       1                   Missing operand
0025                  (   /dd/defs/os9.d):00975         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (   /dd/defs/os9.d):00976         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (   /dd/defs/os9.d):00977         E$NoTO         RMB       1                   Missing TO statement
0028                  (   /dd/defs/os9.d):00978         E$NoVRef       RMB       1                   Missing variable reference
0029                  (   /dd/defs/os9.d):00979         E$EndQou       RMB       1                   Missing end quote
002A                  (   /dd/defs/os9.d):00980         E$SubLrg       RMB       1                   Too many subscripts
002B                  (   /dd/defs/os9.d):00981         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (   /dd/defs/os9.d):00982         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (   /dd/defs/os9.d):00983         E$DivZer       RMB       1                   Divice by zero
002E                  (   /dd/defs/os9.d):00984         E$TypMis       RMB       1                   Operand type mismatch
002F                  (   /dd/defs/os9.d):00985         E$StrOvf       RMB       1                   String stack overflow
0030                  (   /dd/defs/os9.d):00986         E$NoRout       RMB       1                   Unimplemented routine
0031                  (   /dd/defs/os9.d):00987         E$UndVar       RMB       1                   Undefined variable
0032                  (   /dd/defs/os9.d):00988         E$FltOvf       RMB       1                   Floating Overflow
0033                  (   /dd/defs/os9.d):00989         E$LnComp       RMB       1                   Line with compiler error
0034                  (   /dd/defs/os9.d):00990         E$ValRng       RMB       1                   Value out of range for destination
0035                  (   /dd/defs/os9.d):00991         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (   /dd/defs/os9.d):00992         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (   /dd/defs/os9.d):00993         E$SubRng       RMB       1                   Subscript out of range
0038                  (   /dd/defs/os9.d):00994         E$ParmEr       RMB       1                   Paraemter error
0039                  (   /dd/defs/os9.d):00995         E$SysOvf       RMB       1                   System stack overflow
003A                  (   /dd/defs/os9.d):00996         E$IOMism       RMB       1                   I/O type mismatch
003B                  (   /dd/defs/os9.d):00997         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (   /dd/defs/os9.d):00998         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (   /dd/defs/os9.d):00999         E$IllInp       RMB       1                   Illegal input format
003E                  (   /dd/defs/os9.d):01000         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (   /dd/defs/os9.d):01001         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (   /dd/defs/os9.d):01002         E$IllPNm       RMB       1                   Illegal path number
0041                  (   /dd/defs/os9.d):01003         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (   /dd/defs/os9.d):01004         E$NonRcO       RMB       1                   Non-record type operand
0043                  (   /dd/defs/os9.d):01005         E$IllA         RMB       1                   Illegal argument
0044                  (   /dd/defs/os9.d):01006         E$IllCnt       RMB       1                   Illegal control structure
0045                  (   /dd/defs/os9.d):01007         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (   /dd/defs/os9.d):01008         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (   /dd/defs/os9.d):01009         E$IllExp       RMB       1                   Illegal expression type
0048                  (   /dd/defs/os9.d):01010         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (   /dd/defs/os9.d):01011         E$ArrOvf       RMB       1                   Array size overflow
004A                  (   /dd/defs/os9.d):01012         E$UndLin       RMB       1                   Undefined line number
004B                  (   /dd/defs/os9.d):01013         E$MltLin       RMB       1                   Multiply defined line number
004C                  (   /dd/defs/os9.d):01014         E$MltVar       RMB       1                   Multiply defined variable
004D                  (   /dd/defs/os9.d):01015         E$IllIVr       RMB       1                   Illegal input variable
004E                  (   /dd/defs/os9.d):01016         E$SeekRg       RMB       1                   Seek out of range
004F                  (   /dd/defs/os9.d):01017         E$NoData       RMB       1                   Missing data statement
                      (   /dd/defs/os9.d):01018         
                      (   /dd/defs/os9.d):01019         *
                      (   /dd/defs/os9.d):01020         * System Dependent Error Codes
                      (   /dd/defs/os9.d):01021         *
                      (   /dd/defs/os9.d):01022         
                      (   /dd/defs/os9.d):01023         * Level 2 windowing error codes
                      (   /dd/defs/os9.d):01024                        ORG       183
00B7                  (   /dd/defs/os9.d):01025         E$IWTyp        RMB       1                   Illegal window type
00B8                  (   /dd/defs/os9.d):01026         E$WADef        RMB       1                   Window already defined
00B9                  (   /dd/defs/os9.d):01027         E$NFont        RMB       1                   Font not found
00BA                  (   /dd/defs/os9.d):01028         E$StkOvf       RMB       1                   Stack overflow
00BB                  (   /dd/defs/os9.d):01029         E$IllArg       RMB       1                   Illegal argument
00BC                  (   /dd/defs/os9.d):01030                        RMB       1                   reserved
00BD                  (   /dd/defs/os9.d):01031         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (   /dd/defs/os9.d):01032         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (   /dd/defs/os9.d):01033         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (   /dd/defs/os9.d):01034         E$IllCmd       RMB       1                   Illegal command
00C1                  (   /dd/defs/os9.d):01035         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (   /dd/defs/os9.d):01036         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (   /dd/defs/os9.d):01037         E$IWDef        RMB       1                   Illegal window definition
00C4                  (   /dd/defs/os9.d):01038         E$WUndef       RMB       1                   Window undefined
                      (   /dd/defs/os9.d):01039         
00C5                  (   /dd/defs/os9.d):01040         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (   /dd/defs/os9.d):01041         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (   /dd/defs/os9.d):01042         E$Alias        RMB       1
                      (   /dd/defs/os9.d):01043         
                      (   /dd/defs/os9.d):01044         
                      (   /dd/defs/os9.d):01045         *
                      (   /dd/defs/os9.d):01046         * Standard NitrOS-9 Error Codes
                      (   /dd/defs/os9.d):01047         *
                      (   /dd/defs/os9.d):01048                        ORG       200
00C8                  (   /dd/defs/os9.d):01049         E$PthFul       RMB       1                   Path Table full
00C9                  (   /dd/defs/os9.d):01050         E$BPNum        RMB       1                   Bad Path Number
00CA                  (   /dd/defs/os9.d):01051         E$Poll         RMB       1                   Polling Table Full
00CB                  (   /dd/defs/os9.d):01052         E$BMode        RMB       1                   Bad Mode
00CC                  (   /dd/defs/os9.d):01053         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (   /dd/defs/os9.d):01054         E$BMID         RMB       1                   Bad Module ID
00CE                  (   /dd/defs/os9.d):01055         E$DirFul       RMB       1                   Module Directory Full
00CF                  (   /dd/defs/os9.d):01056         E$MemFul       RMB       1                   Process Memory Full
00D0                  (   /dd/defs/os9.d):01057         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (   /dd/defs/os9.d):01058         E$ModBsy       RMB       1                   Module Busy
00D2                  (   /dd/defs/os9.d):01059         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (   /dd/defs/os9.d):01060         E$EOF          RMB       1                   End of File
00D4                  (   /dd/defs/os9.d):01061                        RMB       1
00D5                  (   /dd/defs/os9.d):01062         E$NES          RMB       1                   Non-Existing Segment
00D6                  (   /dd/defs/os9.d):01063         E$FNA          RMB       1                   File Not Accesible
00D7                  (   /dd/defs/os9.d):01064         E$BPNam        RMB       1                   Bad Path Name
00D8                  (   /dd/defs/os9.d):01065         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (   /dd/defs/os9.d):01066         E$SLF          RMB       1                   Segment List Full
00DA                  (   /dd/defs/os9.d):01067         E$CEF          RMB       1                   Creating Existing File
00DB                  (   /dd/defs/os9.d):01068         E$IBA          RMB       1                   Illegal Block Address
00DC                  (   /dd/defs/os9.d):01069         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (   /dd/defs/os9.d):01070         E$MNF          RMB       1                   Module Not Found
00DE                  (   /dd/defs/os9.d):01071                        RMB       1
00DF                  (   /dd/defs/os9.d):01072         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (   /dd/defs/os9.d):01073         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (   /dd/defs/os9.d):01074         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (   /dd/defs/os9.d):01075                        RMB       1
00E2                  (   /dd/defs/os9.d):01076         E$NoChld       RMB       1                   No Children
00E3                  (   /dd/defs/os9.d):01077         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (   /dd/defs/os9.d):01078         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (   /dd/defs/os9.d):01079         E$PrcFul       RMB       1                   Process Table Full
00E6                  (   /dd/defs/os9.d):01080         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (   /dd/defs/os9.d):01081         E$KwnMod       RMB       1                   Known Module
00E8                  (   /dd/defs/os9.d):01082         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (   /dd/defs/os9.d):01083         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (   /dd/defs/os9.d):01084         E$NEMod        RMB       1                   Non Existing Module
00EB                  (   /dd/defs/os9.d):01085         E$BNam         RMB       1                   Bad Name
00EC                  (   /dd/defs/os9.d):01086         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (   /dd/defs/os9.d):01087         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (   /dd/defs/os9.d):01088         E$DNE          RMB       1                   Directory not empty
00EF                  (   /dd/defs/os9.d):01089         E$NoTask       RMB       1                   No available Task number
                      (   /dd/defs/os9.d):01090                        RMB       $F0-.               reserved
00F0                  (   /dd/defs/os9.d):01091         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (   /dd/defs/os9.d):01092         E$Sect         RMB       1                   Bad Sector number
00F2                  (   /dd/defs/os9.d):01093         E$WP           RMB       1                   Write Protect
00F3                  (   /dd/defs/os9.d):01094         E$CRC          RMB       1                   Bad Check Sum
00F4                  (   /dd/defs/os9.d):01095         E$Read         RMB       1                   Read Error
00F5                  (   /dd/defs/os9.d):01096         E$Write        RMB       1                   Write Error
00F6                  (   /dd/defs/os9.d):01097         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (   /dd/defs/os9.d):01098         E$Seek         RMB       1                   Seek Error
00F8                  (   /dd/defs/os9.d):01099         E$Full         RMB       1                   Media Full
00F9                  (   /dd/defs/os9.d):01100         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (   /dd/defs/os9.d):01101         E$DevBsy       RMB       1                   Device Busy
00FB                  (   /dd/defs/os9.d):01102         E$DIDC         RMB       1                   Disk ID Change
00FC                  (   /dd/defs/os9.d):01103         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (   /dd/defs/os9.d):01104         E$Share        RMB       1                   Non-sharable file busy
00FE                  (   /dd/defs/os9.d):01105         E$DeadLk       RMB       1                   I/O Deadlock error
                      (   /dd/defs/os9.d):01106         
                      (   /dd/defs/os9.d):01107         
                      (   /dd/defs/os9.d):01108         ***************************
                      (   /dd/defs/os9.d):01109         * Level 3 Defs
                      (   /dd/defs/os9.d):01110         *
                      (   /dd/defs/os9.d):01111         * These definitions apply to NitrOS-9 Level 3
                      (   /dd/defs/os9.d):01112         *
                      (   /dd/defs/os9.d):01113         
                      ( /dd/defs/deffile):00007                  use   /dd/defs/rbf.d
                      (   /dd/defs/rbf.d):00001         ********************************************************************
                      (   /dd/defs/rbf.d):00002         * rbf.d - Random Block File Manager Definitions
                      (   /dd/defs/rbf.d):00003         *
                      (   /dd/defs/rbf.d):00004         * $Id$
                      (   /dd/defs/rbf.d):00005         *
                      (   /dd/defs/rbf.d):00006         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (   /dd/defs/rbf.d):00007         * that define the logical structure of a disk and allows access to the files
                      (   /dd/defs/rbf.d):00008         * in that structure.
                      (   /dd/defs/rbf.d):00009         *
                      (   /dd/defs/rbf.d):00010         * The data structures in this file give RBF its 'personality' and are used
                      (   /dd/defs/rbf.d):00011         * by RBF itself, as well as applications that will require disk I/O.
                      (   /dd/defs/rbf.d):00012         *
                      (   /dd/defs/rbf.d):00013         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/rbf.d):00014         * Comment
                      (   /dd/defs/rbf.d):00015         * ------------------------------------------------------------------
                      (   /dd/defs/rbf.d):00016         *          1982/07/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00017         * PD.Exten added to path descriptor and PE Entries defined.
                      (   /dd/defs/rbf.d):00018         *
                      (   /dd/defs/rbf.d):00019         *          1982/07/15  Robert F. Doggett
                      (   /dd/defs/rbf.d):00020         * V.FileHd inserted in driver static storage.
                      (   /dd/defs/rbf.d):00021         *
                      (   /dd/defs/rbf.d):00022         *          1982/09/10  WGP
                      (   /dd/defs/rbf.d):00023         * Level One/Level Two condionals added.
                      (   /dd/defs/rbf.d):00024         *
                      (   /dd/defs/rbf.d):00025         *          1982/09/17  WGP
                      (   /dd/defs/rbf.d):00026         *
                      (   /dd/defs/rbf.d):00027         *          1982/09/17  Robert F. Doggett
                      (   /dd/defs/rbf.d):00028         * PD.SLE renamed to PD.Creat.
                      (   /dd/defs/rbf.d):00029         *
                      (   /dd/defs/rbf.d):00030         *          1982/09/17  Robert F. Doggett
                      (   /dd/defs/rbf.d):00031         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (   /dd/defs/rbf.d):00032         *
                      (   /dd/defs/rbf.d):00033         *          1982/09/20  Robert F. Doggett
                      (   /dd/defs/rbf.d):00034         * Reserved areas added in static storage.
                      (   /dd/defs/rbf.d):00035         
                      (   /dd/defs/rbf.d):00036         *          1983/06/07  Robert F. Doggett
                      (   /dd/defs/rbf.d):00037         * Added InDriver flag in PD.SMF.
                      (   /dd/defs/rbf.d):00038         *
                      (   /dd/defs/rbf.d):00039         *          1983/06/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00040         * Added PE.Req tmp save for PE.Lock.
                      (   /dd/defs/rbf.d):00041         *
                      (   /dd/defs/rbf.d):00042         *          1983/08/08  Robert F. Doggett
                      (   /dd/defs/rbf.d):00043         * Reserved PD.SToff for Japanese.
                      (   /dd/defs/rbf.d):00044         *
                      (   /dd/defs/rbf.d):00045         *          1983/11/19  Robert F. Doggett
                      (   /dd/defs/rbf.d):00046         * Added V.ResBit in drive tables.
                      (   /dd/defs/rbf.d):00047         *
                      (   /dd/defs/rbf.d):00048         *          1983/12/12  Robert F. Doggett
                      (   /dd/defs/rbf.d):00049         * Added PE.Prior to save process priority.
                      (   /dd/defs/rbf.d):00050         *
                      (   /dd/defs/rbf.d):00051         *          1983/12/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00052         * Added BufBusy bit in state flag (PD.SMF).
                      (   /dd/defs/rbf.d):00053         *
                      (   /dd/defs/rbf.d):00054         *          1984/07/06  Mark G. Hawkins
                      (   /dd/defs/rbf.d):00055         * Added Bit Definitions for DD.FMT.
                      (   /dd/defs/rbf.d):00056         *
                      (   /dd/defs/rbf.d):00057         *          1987/06/23  Kevin K. Darling
                      (   /dd/defs/rbf.d):00058         * Updated with Dev Desc Info
                      (   /dd/defs/rbf.d):00059         *
                      (   /dd/defs/rbf.d):00060         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00061         * Updated comments for clarity.
                      (   /dd/defs/rbf.d):00062         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (   /dd/defs/rbf.d):00063         *
                      (   /dd/defs/rbf.d):00064         *          2004/04/14  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00065         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (   /dd/defs/rbf.d):00066         * addendum.  Pointed out by Rodney Hamilton.
                      (   /dd/defs/rbf.d):00067         *
                      (   /dd/defs/rbf.d):00068         *          2005/05/31  P.Harvey-Smith.
                      (   /dd/defs/rbf.d):00069         * Added defines for bit 2 of IT.DNS, which the format command uses to
                      (   /dd/defs/rbf.d):00070         * determine if a drive should have it's track 0 as single or double density
                      (   /dd/defs/rbf.d):00071         *
                      (   /dd/defs/rbf.d):00072         *          2005/11/23  Robert Gault
                      (   /dd/defs/rbf.d):00073         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (   /dd/defs/rbf.d):00074         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (   /dd/defs/rbf.d):00075         *
                      (   /dd/defs/rbf.d):00076         *          2005/12/11  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00077         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (   /dd/defs/rbf.d):00078         
                      (   /dd/defs/rbf.d):00079                        NAM       rbf.d
                      (   /dd/defs/rbf.d):00080                        TTL       Random Block File Manager Definitions
                      (   /dd/defs/rbf.d):00081         
                      (   /dd/defs/rbf.d):00082                        PAG
                      (   /dd/defs/rbf.d):00083         *******************************
                      (   /dd/defs/rbf.d):00084         * RBF Device Descriptor Offsets
                      (   /dd/defs/rbf.d):00085         *
                      (   /dd/defs/rbf.d):00086         * These definitions are for RBF device descriptors.
                      (   /dd/defs/rbf.d):00087         
                      (   /dd/defs/rbf.d):00088                        ORG       M$DTyp
0012                  (   /dd/defs/rbf.d):00089                        RMB       1                   Device type (DT.RBF)
0013                  (   /dd/defs/rbf.d):00090         IT.DRV         RMB       1                   Drive number
0014                  (   /dd/defs/rbf.d):00091         IT.STP         RMB       1                   Step rate
0015                  (   /dd/defs/rbf.d):00092         IT.TYP         RMB       1                   Disk device type information
0016                  (   /dd/defs/rbf.d):00093         IT.DNS         RMB       1                   Density capability
0017                  (   /dd/defs/rbf.d):00094         IT.CYL         RMB       2                   Number of cylinders
0019                  (   /dd/defs/rbf.d):00095         IT.SID         RMB       1                   Number of surfaces
001A                  (   /dd/defs/rbf.d):00096         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (   /dd/defs/rbf.d):00097         IT.SCT         RMB       2                   Default sectors/track
001D                  (   /dd/defs/rbf.d):00098         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (   /dd/defs/rbf.d):00099         IT.ILV         RMB       1                   Sector interleave offset
0020                  (   /dd/defs/rbf.d):00100         IT.SAS         RMB       1                   Segment allocation size
                      (   /dd/defs/rbf.d):00101         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (   /dd/defs/rbf.d):00102         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (   /dd/defs/rbf.d):00103         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (   /dd/defs/rbf.d):00104         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (   /dd/defs/rbf.d):00105         * The following fields are not copied to the path descriptor
0025                  (   /dd/defs/rbf.d):00106         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (   /dd/defs/rbf.d):00107         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (   /dd/defs/rbf.d):00108         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (   /dd/defs/rbf.d):00109         * These fields have been added because of SuperDriver.  They probably
                      (   /dd/defs/rbf.d):00110         * can be used in other drivers
                      (   /dd/defs/rbf.d):00111                        ORG       IT.WPC
0025                  (   /dd/defs/rbf.d):00112         IT.SOFF1       RMB       1
0026                  (   /dd/defs/rbf.d):00113         IT.SOFF2       RMB       1
0027                  (   /dd/defs/rbf.d):00114         IT.SOFF3       RMB       1
0028                  (   /dd/defs/rbf.d):00115         IT.LLDRV       RMB       2
002A                  (   /dd/defs/rbf.d):00116         IT.MPI         RMB       1
                      (   /dd/defs/rbf.d):00117         
                      (   /dd/defs/rbf.d):00118         
                      (   /dd/defs/rbf.d):00119         * IT.TYP Definitions
                      (   /dd/defs/rbf.d):00120         *
     0080             (   /dd/defs/rbf.d):00121         TYP.HARD       EQU       %10000000           Hard disk
     0000             (   /dd/defs/rbf.d):00122         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (   /dd/defs/rbf.d):00123         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (   /dd/defs/rbf.d):00124         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (   /dd/defs/rbf.d):00125         
                      (   /dd/defs/rbf.d):00126         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (   /dd/defs/rbf.d):00127         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (   /dd/defs/rbf.d):00128         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (   /dd/defs/rbf.d):00129         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (   /dd/defs/rbf.d):00130         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (   /dd/defs/rbf.d):00131         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (   /dd/defs/rbf.d):00132         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (   /dd/defs/rbf.d):00133         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (   /dd/defs/rbf.d):00134         
                      (   /dd/defs/rbf.d):00135         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (   /dd/defs/rbf.d):00136         TYP.5          EQU       %00000000           5" media
     0001             (   /dd/defs/rbf.d):00137         TYP.3          EQU       %00000001           3.5" media
     0002             (   /dd/defs/rbf.d):00138         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (   /dd/defs/rbf.d):00139         TYP.256        EQU       %00000000           256 byte sector media
     0004             (   /dd/defs/rbf.d):00140         TYP.512        EQU       %00000100           512 byte sector media
     0020             (   /dd/defs/rbf.d):00141         TYP.CCF        EQU       %00100000           CoCo format
     0000             (   /dd/defs/rbf.d):00142         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (   /dd/defs/rbf.d):00143         
                      (   /dd/defs/rbf.d):00144         * IT.DNS Definitions
                      (   /dd/defs/rbf.d):00145         *
                      (   /dd/defs/rbf.d):00146         
                      (   /dd/defs/rbf.d):00147         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (   /dd/defs/rbf.d):00148         
                      (   /dd/defs/rbf.d):00149         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (   /dd/defs/rbf.d):00150         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (   /dd/defs/rbf.d):00151         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (   /dd/defs/rbf.d):00152         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (   /dd/defs/rbf.d):00153         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (   /dd/defs/rbf.d):00154         
                      (   /dd/defs/rbf.d):00155         * Added PHS,2005-05-31, as format seems to use these
     0000             (   /dd/defs/rbf.d):00156         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (   /dd/defs/rbf.d):00157         DNS.MFM0       EQU       %00000100           Double density track 0
                      (   /dd/defs/rbf.d):00158         
                      (   /dd/defs/rbf.d):00159         * Floppy disk step rate definitions
     0000             (   /dd/defs/rbf.d):00160         STP.30ms       EQU       0                   30ms step rate
     0001             (   /dd/defs/rbf.d):00161         STP.20ms       EQU       1                   20ms step rate
     0002             (   /dd/defs/rbf.d):00162         STP.12ms       EQU       2                   12ms step rate
     0003             (   /dd/defs/rbf.d):00163         STP.6ms        EQU       3                   6ms step rate
                      (   /dd/defs/rbf.d):00164         
                      (   /dd/defs/rbf.d):00165                        PAG
                      (   /dd/defs/rbf.d):00166         *************************************
                      (   /dd/defs/rbf.d):00167         * Random Block Path Descriptor Format
                      (   /dd/defs/rbf.d):00168         *
                      (   /dd/defs/rbf.d):00169         * A path descriptor is created for every new path that is open
                      (   /dd/defs/rbf.d):00170         * via the I$Open system call (processed by IOMan).  Process
                      (   /dd/defs/rbf.d):00171         * descriptors track state information of a path.
                      (   /dd/defs/rbf.d):00172         *
                      (   /dd/defs/rbf.d):00173                        ORG       PD.FST
000A                  (   /dd/defs/rbf.d):00174         PD.SMF         RMB       1                   State flags
000B                  (   /dd/defs/rbf.d):00175         PD.CP          RMB       4                   Current logical byte position
000F                  (   /dd/defs/rbf.d):00176         PD.SIZ         RMB       4                   File size
0013                  (   /dd/defs/rbf.d):00177         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (   /dd/defs/rbf.d):00178         PD.SBP         RMB       3                   Segment beginning psn
0019                  (   /dd/defs/rbf.d):00179         PD.SSZ         RMB       3                   Segment size
001C                  (   /dd/defs/rbf.d):00180         PD.DSK         RMB       2                   Disk id
001E                  (   /dd/defs/rbf.d):00181         PD.DTB         RMB       2                   Drive table ptr
                      (   /dd/defs/rbf.d):00182                        ORG       PD.OPT
0020                  (   /dd/defs/rbf.d):00183                        RMB       1                   Device type
0021                  (   /dd/defs/rbf.d):00184         PD.DRV         RMB       1                   Drive number
0022                  (   /dd/defs/rbf.d):00185         PD.STP         RMB       1                   Step rate
0023                  (   /dd/defs/rbf.d):00186         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (   /dd/defs/rbf.d):00187         PD.DNS         RMB       1                   Density capability
0025                  (   /dd/defs/rbf.d):00188         PD.CYL         RMB       2                   Number of cylinders
0027                  (   /dd/defs/rbf.d):00189         PD.SID         RMB       1                   Number of surfaces
0028                  (   /dd/defs/rbf.d):00190         PD.VFY         RMB       1                   0=verify disk writes
0029                  (   /dd/defs/rbf.d):00191         PD.SCT         RMB       2                   Default sectors/track
002B                  (   /dd/defs/rbf.d):00192         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (   /dd/defs/rbf.d):00193         PD.ILV         RMB       1                   Sector interleave offset
002E                  (   /dd/defs/rbf.d):00194         PD.SAS         RMB       1                   Segment allocation size
002F                  (   /dd/defs/rbf.d):00195         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (   /dd/defs/rbf.d):00196         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (   /dd/defs/rbf.d):00197         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (   /dd/defs/rbf.d):00198         PD.ATT         RMB       1                   File attributes
0034                  (   /dd/defs/rbf.d):00199         PD.FD          RMB       3                   File descriptor psn
0037                  (   /dd/defs/rbf.d):00200         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (   /dd/defs/rbf.d):00201         PD.DCP         RMB       4                   File directory entry ptr
003E                  (   /dd/defs/rbf.d):00202         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (   /dd/defs/rbf.d):00203         
                      (   /dd/defs/rbf.d):00204         * State Flags
     0001             (   /dd/defs/rbf.d):00205         BUFMOD         EQU       $01                 Buffer modified
     0002             (   /dd/defs/rbf.d):00206         SINBUF         EQU       $02                 Sector in buffer
     0004             (   /dd/defs/rbf.d):00207         FDBUF          EQU       $04                 File descriptor in buffer
                      (   /dd/defs/rbf.d):00208         *EOFSEC equ $08 End of file sector
                      (   /dd/defs/rbf.d):00209         *EOF equ $10 End of file
     0020             (   /dd/defs/rbf.d):00210         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (   /dd/defs/rbf.d):00211         BufBusy        EQU       $40                 Buffer is currently busy
                      (   /dd/defs/rbf.d):00212         
                      (   /dd/defs/rbf.d):00213         ************************************
                      (   /dd/defs/rbf.d):00214         * Random Block Path Extension Format
                      (   /dd/defs/rbf.d):00215         *
                      (   /dd/defs/rbf.d):00216         * RBF paths under Level Two have additional information that
                      (   /dd/defs/rbf.d):00217         * is referenced by the path extension area.
                      (   /dd/defs/rbf.d):00218         *
                      (   /dd/defs/rbf.d):00219                        ORG       0
0000                  (   /dd/defs/rbf.d):00220         PE.PE          RMB       1                   PE path number
0001                  (   /dd/defs/rbf.d):00221         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (   /dd/defs/rbf.d):00222         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (   /dd/defs/rbf.d):00223         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (   /dd/defs/rbf.d):00224         PE.Lock        RMB       1                   Path lockout status
0008                  (   /dd/defs/rbf.d):00225         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (   /dd/defs/rbf.d):00226         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (   /dd/defs/rbf.d):00227         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (   /dd/defs/rbf.d):00228         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (   /dd/defs/rbf.d):00229         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (   /dd/defs/rbf.d):00230         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (   /dd/defs/rbf.d):00231         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (   /dd/defs/rbf.d):00232         PE.SigSg       RMB       1                   Signal code to send
0018                  (   /dd/defs/rbf.d):00233         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (   /dd/defs/rbf.d):00234                        RMB       32-.                Reserved
0020                  (   /dd/defs/rbf.d):00235         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (   /dd/defs/rbf.d):00236         
                      (   /dd/defs/rbf.d):00237         * PE.Lock status codes
     0000             (   /dd/defs/rbf.d):00238         Unlocked       EQU       0                   No portion of file is locked
     0001             (   /dd/defs/rbf.d):00239         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (   /dd/defs/rbf.d):00240         FileLock       EQU       2                   Entire file locked
     0004             (   /dd/defs/rbf.d):00241         EofLock        EQU       4                   End of file is locked
                      (   /dd/defs/rbf.d):00242         
                      (   /dd/defs/rbf.d):00243         
                      (   /dd/defs/rbf.d):00244                        PAG
                      (   /dd/defs/rbf.d):00245         ***********************
                      (   /dd/defs/rbf.d):00246         * LSN0 Disk Data Format
                      (   /dd/defs/rbf.d):00247         *
                      (   /dd/defs/rbf.d):00248         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (   /dd/defs/rbf.d):00249         * and contains information about the device's size and format.
                      (   /dd/defs/rbf.d):00250         *
                      (   /dd/defs/rbf.d):00251                        ORG       0
0000                  (   /dd/defs/rbf.d):00252         DD.TOT         RMB       3                   Total number of sectors
0003                  (   /dd/defs/rbf.d):00253         DD.TKS         RMB       1                   Track size in sectors
0004                  (   /dd/defs/rbf.d):00254         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (   /dd/defs/rbf.d):00255         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (   /dd/defs/rbf.d):00256         DD.DIR         RMB       3                   Address of root directory fd
000B                  (   /dd/defs/rbf.d):00257         DD.OWN         RMB       2                   Owner
000D                  (   /dd/defs/rbf.d):00258         DD.ATT         RMB       1                   Attributes
000E                  (   /dd/defs/rbf.d):00259         DD.DSK         RMB       2                   Disk ID
0010                  (   /dd/defs/rbf.d):00260         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (   /dd/defs/rbf.d):00261         DD.SPT         RMB       2                   Sectors/track
0013                  (   /dd/defs/rbf.d):00262         DD.RES         RMB       2                   Reserved for future use
     0015             (   /dd/defs/rbf.d):00263         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (   /dd/defs/rbf.d):00264         DD.BT          RMB       3                   System bootstrap sector
0018                  (   /dd/defs/rbf.d):00265         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (   /dd/defs/rbf.d):00266         DD.DAT         RMB       5                   Creation date
001F                  (   /dd/defs/rbf.d):00267         DD.NAM         RMB       32                  Volume name
003F                  (   /dd/defs/rbf.d):00268         DD.OPT         RMB       32                  Option area
                      (   /dd/defs/rbf.d):00269         
                      (   /dd/defs/rbf.d):00270         *************************
                      (   /dd/defs/rbf.d):00271         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (   /dd/defs/rbf.d):00272                 ORG $60         More options from device descriptor
0060                  (   /dd/defs/rbf.d):00273         VD.STP      RMB 1   This is for the /sh and /ih virtual disks in HDBDOS
0061                  (   /dd/defs/rbf.d):00274         VD.OFS      RMB 3   This is DT.WPC and DT.OSF combined, might be more
                      (   /dd/defs/rbf.d):00275         
                      (   /dd/defs/rbf.d):00276         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (   /dd/defs/rbf.d):00277         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (   /dd/defs/rbf.d):00278         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (   /dd/defs/rbf.d):00279         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (   /dd/defs/rbf.d):00280         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (   /dd/defs/rbf.d):00281         
                      (   /dd/defs/rbf.d):00282         
                      (   /dd/defs/rbf.d):00283                        PAG
                      (   /dd/defs/rbf.d):00284         ************************
                      (   /dd/defs/rbf.d):00285         * File Descriptor Format
                      (   /dd/defs/rbf.d):00286         *
                      (   /dd/defs/rbf.d):00287         * The file descriptor is a sector that is present for every file
                      (   /dd/defs/rbf.d):00288         * on an RBF device.  It contains attributes, modification dates,
                      (   /dd/defs/rbf.d):00289         * and segment information on a file.
                      (   /dd/defs/rbf.d):00290         *
                      (   /dd/defs/rbf.d):00291                        ORG       0
0000                  (   /dd/defs/rbf.d):00292         FD.ATT         RMB       1                   Attributes
0001                  (   /dd/defs/rbf.d):00293         FD.OWN         RMB       2                   Owner
0003                  (   /dd/defs/rbf.d):00294         FD.DAT         RMB       5                   Date last modified
0008                  (   /dd/defs/rbf.d):00295         FD.LNK         RMB       1                   Link count
0009                  (   /dd/defs/rbf.d):00296         FD.SIZ         RMB       4                   File size
000D                  (   /dd/defs/rbf.d):00297         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (   /dd/defs/rbf.d):00298         FD.SEG         EQU       .                   Beginning of segment list
                      (   /dd/defs/rbf.d):00299         * Segment List Entry Format
                      (   /dd/defs/rbf.d):00300                        ORG       0
0000                  (   /dd/defs/rbf.d):00301         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (   /dd/defs/rbf.d):00302         FDSL.B         RMB       2                   Segment size
     0005             (   /dd/defs/rbf.d):00303         FDSL.S         EQU       .                   Segment list entry size
     00FB             (   /dd/defs/rbf.d):00304         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (   /dd/defs/rbf.d):00305         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (   /dd/defs/rbf.d):00306         MINSEC         SET       16
                      (   /dd/defs/rbf.d):00307         
                      (   /dd/defs/rbf.d):00308         
                      (   /dd/defs/rbf.d):00309                        PAG
                      (   /dd/defs/rbf.d):00310         ************************
                      (   /dd/defs/rbf.d):00311         * Directory Entry Format
                      (   /dd/defs/rbf.d):00312         *
                      (   /dd/defs/rbf.d):00313         * Directory entries are part of a directory and define the name
                      (   /dd/defs/rbf.d):00314         * of the file, as well as a pointer to its file descriptor.
                      (   /dd/defs/rbf.d):00315         *
                      (   /dd/defs/rbf.d):00316                        ORG       0
0000                  (   /dd/defs/rbf.d):00317         DIR.NM         RMB       29                  File name
001D                  (   /dd/defs/rbf.d):00318         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (   /dd/defs/rbf.d):00319         DIR.SZ         EQU       .                   Directory record size
                      (   /dd/defs/rbf.d):00320         
                      (   /dd/defs/rbf.d):00321         
                      (   /dd/defs/rbf.d):00322                        PAG
                      (   /dd/defs/rbf.d):00323         ********************
                      (   /dd/defs/rbf.d):00324         * RBF Static Storage
                      (   /dd/defs/rbf.d):00325         *
                      (   /dd/defs/rbf.d):00326         * Overall Disk Static Storage
                      (   /dd/defs/rbf.d):00327         *
                      (   /dd/defs/rbf.d):00328         * Note:  This does not reserve any memory for drive tables.  Each
                      (   /dd/defs/rbf.d):00329         *        driver is responsible for reserving sufficient memory for
                      (   /dd/defs/rbf.d):00330         *        the appropriate number of tables.
                      (   /dd/defs/rbf.d):00331         *
                      (   /dd/defs/rbf.d):00332                        ORG       V.USER              Reserve required           ($06)
0006                  (   /dd/defs/rbf.d):00333         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (   /dd/defs/rbf.d):00334                        RMB       8                   reserved                   ($08)
     000F             (   /dd/defs/rbf.d):00335         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (   /dd/defs/rbf.d):00336         
                      (   /dd/defs/rbf.d):00337                        PAG
                      (   /dd/defs/rbf.d):00338         ****************
                      (   /dd/defs/rbf.d):00339         * Global Storage For Disk Drive Tables
                      (   /dd/defs/rbf.d):00340         *
                      (   /dd/defs/rbf.d):00341         * Each table contains the first 'DD.SIZ' bytes from
                      (   /dd/defs/rbf.d):00342         * LSN 0, and the current track, stepping rate,
                      (   /dd/defs/rbf.d):00343         * bitmap use flag, and disk type.
                      (   /dd/defs/rbf.d):00344         *
                      (   /dd/defs/rbf.d):00345                        ORG       0
0000                  (   /dd/defs/rbf.d):00346                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (   /dd/defs/rbf.d):00347         V.TRAK         RMB       2                   Current track
0017                  (   /dd/defs/rbf.d):00348         V.BMB          RMB       1                   Bit-map use flag
0018                  (   /dd/defs/rbf.d):00349         V.FileHd       RMB       2                   Open file list for this drive
001A                  (   /dd/defs/rbf.d):00350         V.DiskID       RMB       2                   Disk ID
001C                  (   /dd/defs/rbf.d):00351         V.BMapSz       RMB       1                   Bitmap Size
001D                  (   /dd/defs/rbf.d):00352         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (   /dd/defs/rbf.d):00353         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (   /dd/defs/rbf.d):00354         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (   /dd/defs/rbf.d):00355         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (   /dd/defs/rbf.d):00356         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (   /dd/defs/rbf.d):00357                        RMB       4                   Reserved
     0026             (   /dd/defs/rbf.d):00358         DRVMEM         EQU       .
                      (   /dd/defs/rbf.d):00359         
                      (   /dd/defs/rbf.d):00360         
                      ( /dd/defs/deffile):00008                  use   /dd/defs/scf.d
                      (   /dd/defs/scf.d):00001         ********************************************************************
                      (   /dd/defs/scf.d):00002         * scf.d - Sequential Character File Manager Definitions
                      (   /dd/defs/scf.d):00003         *
                      (   /dd/defs/scf.d):00004         * $Id$
                      (   /dd/defs/scf.d):00005         *
                      (   /dd/defs/scf.d):00006         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (   /dd/defs/scf.d):00007         * that define the logical structure of a serial device.
                      (   /dd/defs/scf.d):00008         *
                      (   /dd/defs/scf.d):00009         * The data structures in this file give SCF its 'personality' and are used
                      (   /dd/defs/scf.d):00010         * by SCF itself, as well as applications that will require disk I/O.
                      (   /dd/defs/scf.d):00011         *
                      (   /dd/defs/scf.d):00012         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/scf.d):00013         * Comment
                      (   /dd/defs/scf.d):00014         * ------------------------------------------------------------------
                      (   /dd/defs/scf.d):00015         *          1984/01/11  YO
                      (   /dd/defs/scf.d):00016         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (   /dd/defs/scf.d):00017         *
                      (   /dd/defs/scf.d):00018         *          1985/04/20  Mark G. Hawkins
                      (   /dd/defs/scf.d):00019         * Added V.PDLHd Path Descriptor List Head.
                      (   /dd/defs/scf.d):00020         *
                      (   /dd/defs/scf.d):00021         *          1985/04/21  Mark G. Hawkins
                      (   /dd/defs/scf.d):00022         * Added PD.PLP and PD.PST for modem handling.
                      (   /dd/defs/scf.d):00023         *
                      (   /dd/defs/scf.d):00024         *          1987/06/23  Kevin K. Darling
                      (   /dd/defs/scf.d):00025         * Updated with Dev Desc info.
                      (   /dd/defs/scf.d):00026         *
                      (   /dd/defs/scf.d):00027         *          1998/10/03  Boisy G. Pitre
                      (   /dd/defs/scf.d):00028         * Consolidated L1/L2 scfdefs.
                      (   /dd/defs/scf.d):00029         *
                      (   /dd/defs/scf.d):00030         *          2003/01/21  Boisy G. Pitre
                      (   /dd/defs/scf.d):00031         * Added symbolics for enhanced SCF line editing.
                      (   /dd/defs/scf.d):00032         *
                      (   /dd/defs/scf.d):00033         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/scf.d):00034         * Updated comments for clarity.
                      (   /dd/defs/scf.d):00035         *
                      (   /dd/defs/scf.d):00036         *          2004/05/17  Boisy G. Pitre
                      (   /dd/defs/scf.d):00037         * Added higher baud rates.
                      (   /dd/defs/scf.d):00038         
                      (   /dd/defs/scf.d):00039                        NAM       scf.d
                      (   /dd/defs/scf.d):00040                        TTL       Sequential File Manager Definitions
                      (   /dd/defs/scf.d):00041         
                      (   /dd/defs/scf.d):00042                        PAG
                      (   /dd/defs/scf.d):00043         *******************************
                      (   /dd/defs/scf.d):00044         * SCF Device Descriptor Offsets
                      (   /dd/defs/scf.d):00045         *
                      (   /dd/defs/scf.d):00046         * These definitions are for SCF device descriptors.
                      (   /dd/defs/scf.d):00047         
                      (   /dd/defs/scf.d):00048                        ORG       M$DTyp
0012                  (   /dd/defs/scf.d):00049         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (   /dd/defs/scf.d):00050         IT.UPC         RMB       1                   Uppercase flag
0014                  (   /dd/defs/scf.d):00051         IT.BSO         RMB       1                   Backspace behavior
0015                  (   /dd/defs/scf.d):00052         IT.DLO         RMB       1                   Delete behavior
0016                  (   /dd/defs/scf.d):00053         IT.EKO         RMB       1                   Echo flag
0017                  (   /dd/defs/scf.d):00054         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (   /dd/defs/scf.d):00055         IT.NUL         RMB       1                   End-of-line null count
0019                  (   /dd/defs/scf.d):00056         IT.PAU         RMB       1                   Page pause flag
001A                  (   /dd/defs/scf.d):00057         IT.PAG         RMB       1                   Number of lines per page
001B                  (   /dd/defs/scf.d):00058         IT.BSP         RMB       1                   Backspace character
001C                  (   /dd/defs/scf.d):00059         IT.DEL         RMB       1                   Delete-line character
001D                  (   /dd/defs/scf.d):00060         IT.EOR         RMB       1                   End-of-record character
001E                  (   /dd/defs/scf.d):00061         IT.EOF         RMB       1                   End-of-file character
001F                  (   /dd/defs/scf.d):00062         IT.RPR         RMB       1                   Reprint-line character
0020                  (   /dd/defs/scf.d):00063         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (   /dd/defs/scf.d):00064         IT.PSC         RMB       1                   Pause character
0022                  (   /dd/defs/scf.d):00065         IT.INT         RMB       1                   Interrupt character
0023                  (   /dd/defs/scf.d):00066         IT.QUT         RMB       1                   Quit character
0024                  (   /dd/defs/scf.d):00067         IT.BSE         RMB       1                   Backspace echo character
0025                  (   /dd/defs/scf.d):00068         IT.OVF         RMB       1                   Bell character
0026                  (   /dd/defs/scf.d):00069         IT.PAR         RMB       1                   Parity
0027                  (   /dd/defs/scf.d):00070         IT.BAU         RMB       1                   Baud rate
0028                  (   /dd/defs/scf.d):00071         IT.D2P         RMB       2                   Attached device name string offset
002A                  (   /dd/defs/scf.d):00072         IT.XON         RMB       1                   X-ON character
002B                  (   /dd/defs/scf.d):00073         IT.XOFF        RMB       1                   X-OFF character
002C                  (   /dd/defs/scf.d):00074         IT.COL         RMB       1                   Number of columns for display
002D                  (   /dd/defs/scf.d):00075         IT.ROW         RMB       1                   Number of rows for display
002E                  (   /dd/defs/scf.d):00076         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (   /dd/defs/scf.d):00077         
                      (   /dd/defs/scf.d):00078         * Window Descriptor Additions
                      (   /dd/defs/scf.d):00079         * For CoCo window, where IT.PAR = $80
                      (   /dd/defs/scf.d):00080                        ORG       IT.ROW+1
002E                  (   /dd/defs/scf.d):00081         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (   /dd/defs/scf.d):00082         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (   /dd/defs/scf.d):00083         IT.STY         RMB       1                   Screen type default
0031                  (   /dd/defs/scf.d):00084         IT.CPX         RMB       1                   Column start default
0032                  (   /dd/defs/scf.d):00085         IT.CPY         RMB       1                   Row start default
0033                  (   /dd/defs/scf.d):00086         IT.FGC         RMB       1                   Foreground color default
0034                  (   /dd/defs/scf.d):00087         IT.BGC         RMB       1                   Background color default
0035                  (   /dd/defs/scf.d):00088         IT.BDC         RMB       1                   Border color default
                      (   /dd/defs/scf.d):00089         
                      (   /dd/defs/scf.d):00090         
                      (   /dd/defs/scf.d):00091                        PAG
                      (   /dd/defs/scf.d):00092         ********************
                      (   /dd/defs/scf.d):00093         * SCF Static Storage
                      (   /dd/defs/scf.d):00094         *
                      (   /dd/defs/scf.d):00095         * SCF devices must reserve this space for SCF
                      (   /dd/defs/scf.d):00096         *
                      (   /dd/defs/scf.d):00097                        ORG       V.USER
0006                  (   /dd/defs/scf.d):00098         V.TYPE         RMB       1                   Device type or parity
0007                  (   /dd/defs/scf.d):00099         V.LINE         RMB       1                   Lines left until end of page
0008                  (   /dd/defs/scf.d):00100         V.PAUS         RMB       1                   Immediate Pause request
0009                  (   /dd/defs/scf.d):00101         V.DEV2         RMB       2                   Attached device's static
000B                  (   /dd/defs/scf.d):00102         V.INTR         RMB       1                   Interrupt char
000C                  (   /dd/defs/scf.d):00103         V.QUIT         RMB       1                   Quit char
000D                  (   /dd/defs/scf.d):00104         V.PCHR         RMB       1                   Pause char
000E                  (   /dd/defs/scf.d):00105         V.ERR          RMB       1                   Accumulated errors
000F                  (   /dd/defs/scf.d):00106         V.XON          RMB       1                   X-On char
0010                  (   /dd/defs/scf.d):00107         V.XOFF         RMB       1                   X-Off char
0011                  (   /dd/defs/scf.d):00108         V.KANJI        RMB       1                   Kanji mode flag
0012                  (   /dd/defs/scf.d):00109         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (   /dd/defs/scf.d):00110         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (   /dd/defs/scf.d):00111         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (   /dd/defs/scf.d):00112         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (   /dd/defs/scf.d):00113         V.SCF          EQU       .                   Total SCF manager static overhead
                      (   /dd/defs/scf.d):00114         
                      (   /dd/defs/scf.d):00115         
                      (   /dd/defs/scf.d):00116                        PAG
                      (   /dd/defs/scf.d):00117         ***********************
                      (   /dd/defs/scf.d):00118         * Character Definitions
                      (   /dd/defs/scf.d):00119         *
     0000             (   /dd/defs/scf.d):00120         C$NULL         SET       0                   Null char
     0001             (   /dd/defs/scf.d):00121         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (   /dd/defs/scf.d):00122         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (   /dd/defs/scf.d):00123         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (   /dd/defs/scf.d):00124         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (   /dd/defs/scf.d):00125         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (   /dd/defs/scf.d):00126         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (   /dd/defs/scf.d):00127         C$RARR         SET       $09                 Right Arrow
     0005             (   /dd/defs/scf.d):00128         C$EL           SET       $05                 Erase Line
     000A             (   /dd/defs/scf.d):00129         C$LF           SET       $0A                 Line feed
     000B             (   /dd/defs/scf.d):00130         C$HOME         SET       $0B                 Home position Code
     0015             (   /dd/defs/scf.d):00131         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (   /dd/defs/scf.d):00132         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (   /dd/defs/scf.d):00133         C$CR           SET       $0D                 Carriage return
     000C             (   /dd/defs/scf.d):00134         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (   /dd/defs/scf.d):00135         C$SI           SET       $0F                 Shift IN Code
     000E             (   /dd/defs/scf.d):00136         C$SO           SET       $0E                 Shift OUT Code
     0010             (   /dd/defs/scf.d):00137         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (   /dd/defs/scf.d):00138         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (   /dd/defs/scf.d):00139         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (   /dd/defs/scf.d):00140         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (   /dd/defs/scf.d):00141         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (   /dd/defs/scf.d):00142         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (   /dd/defs/scf.d):00143         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (   /dd/defs/scf.d):00144         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (   /dd/defs/scf.d):00145         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (   /dd/defs/scf.d):00146         C$RGT          SET       $1C                 Cursor right
     001D             (   /dd/defs/scf.d):00147         C$LFT          SET       $1D                 Cursor left
     001E             (   /dd/defs/scf.d):00148         C$UP           SET       $1E                 Cursor up
     001F             (   /dd/defs/scf.d):00149         C$DWN          SET       $1F                 Cursor down
     0020             (   /dd/defs/scf.d):00150         C$SPAC         SET       $20                 Space
     002E             (   /dd/defs/scf.d):00151         C$PERD         SET       '.
     002C             (   /dd/defs/scf.d):00152         C$COMA         SET       ',
                      (   /dd/defs/scf.d):00153         
                      (   /dd/defs/scf.d):00154         
                      (   /dd/defs/scf.d):00155                        PAG
                      (   /dd/defs/scf.d):00156         *********************************************
                      (   /dd/defs/scf.d):00157         * Sequential Character Path Descriptor Format
                      (   /dd/defs/scf.d):00158         *
                      (   /dd/defs/scf.d):00159         * A path descriptor is created for every new path that is open
                      (   /dd/defs/scf.d):00160         * via the I$Open system call (processed by IOMan).  Process
                      (   /dd/defs/scf.d):00161         * descriptors track state information of a path.
                      (   /dd/defs/scf.d):00162         *
                      (   /dd/defs/scf.d):00163                        ORG       PD.FST
000A                  (   /dd/defs/scf.d):00164         PD.DV2         RMB       2                   Output device table pointer
000C                  (   /dd/defs/scf.d):00165         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (   /dd/defs/scf.d):00166         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (   /dd/defs/scf.d):00167         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (   /dd/defs/scf.d):00168         PD.STS         RMB       2                   Status routine module addr
0012                  (   /dd/defs/scf.d):00169         PD.STM         RMB       2                   Reserved for status routine
                      (   /dd/defs/scf.d):00170                        ORG       PD.OPT
0020                  (   /dd/defs/scf.d):00171                        RMB       1                   Device type
0021                  (   /dd/defs/scf.d):00172         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (   /dd/defs/scf.d):00173         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (   /dd/defs/scf.d):00174         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (   /dd/defs/scf.d):00175         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (   /dd/defs/scf.d):00176         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (   /dd/defs/scf.d):00177         PD.NUL         RMB       1                   End of Line null count
0027                  (   /dd/defs/scf.d):00178         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (   /dd/defs/scf.d):00179         PD.PAG         RMB       1                   Lines per page
0029                  (   /dd/defs/scf.d):00180         PD.BSP         RMB       1                   Backspace character
002A                  (   /dd/defs/scf.d):00181         PD.DEL         RMB       1                   Delete Line character
002B                  (   /dd/defs/scf.d):00182         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (   /dd/defs/scf.d):00183         PD.EOF         RMB       1                   End of File character
002D                  (   /dd/defs/scf.d):00184         PD.RPR         RMB       1                   Repront Line character
002E                  (   /dd/defs/scf.d):00185         PD.DUP         RMB       1                   Dup Last Line character
002F                  (   /dd/defs/scf.d):00186         PD.PSC         RMB       1                   Pause character
0030                  (   /dd/defs/scf.d):00187         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (   /dd/defs/scf.d):00188         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (   /dd/defs/scf.d):00189         PD.BSE         RMB       1                   Backspace echo character
0033                  (   /dd/defs/scf.d):00190         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (   /dd/defs/scf.d):00191         PD.PAR         RMB       1                   Parity code
0035                  (   /dd/defs/scf.d):00192         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (   /dd/defs/scf.d):00193         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (   /dd/defs/scf.d):00194         PD.XON         RMB       1                   ACIA X-ON character
0039                  (   /dd/defs/scf.d):00195         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (   /dd/defs/scf.d):00196         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (   /dd/defs/scf.d):00197         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (   /dd/defs/scf.d):00198         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (   /dd/defs/scf.d):00199         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (   /dd/defs/scf.d):00200         PD.PST         RMB       1                   Current path status
                      (   /dd/defs/scf.d):00201         
                      (   /dd/defs/scf.d):00202         
                      (   /dd/defs/scf.d):00203         * PD.PST values Path Descriptor Status byte
                      (   /dd/defs/scf.d):00204         *
     0001             (   /dd/defs/scf.d):00205         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (   /dd/defs/scf.d):00206         
                      (   /dd/defs/scf.d):00207         
                      (   /dd/defs/scf.d):00208         * PD.PAR definitions
                      (   /dd/defs/scf.d):00209         *
                      (   /dd/defs/scf.d):00210         * Parity
     0000             (   /dd/defs/scf.d):00211         PARNONE        EQU       %00000000
     0020             (   /dd/defs/scf.d):00212         PARODD         EQU       %00100000
     0060             (   /dd/defs/scf.d):00213         PAREVEN        EQU       %01100000
     00A0             (   /dd/defs/scf.d):00214         PARMARK        EQU       %10100000
     00E0             (   /dd/defs/scf.d):00215         PARSPACE       EQU       %11100000
     00E0             (   /dd/defs/scf.d):00216         PARMASK        EQU       %11100000
                      (   /dd/defs/scf.d):00217         
                      (   /dd/defs/scf.d):00218         * PD.BAU definitions
                      (   /dd/defs/scf.d):00219         *
                      (   /dd/defs/scf.d):00220         * Baud rate
     0000             (   /dd/defs/scf.d):00221         B110           EQU       %00000000
     0001             (   /dd/defs/scf.d):00222         B300           EQU       %00000001
     0002             (   /dd/defs/scf.d):00223         B600           EQU       %00000010
     0003             (   /dd/defs/scf.d):00224         B1200          EQU       %00000011
     0004             (   /dd/defs/scf.d):00225         B2400          EQU       %00000100
     0005             (   /dd/defs/scf.d):00226         B4800          EQU       %00000101
     0006             (   /dd/defs/scf.d):00227         B9600          EQU       %00000110
     0007             (   /dd/defs/scf.d):00228         B19200         EQU       %00000111
     0008             (   /dd/defs/scf.d):00229         B38400         EQU       %00001000
     0009             (   /dd/defs/scf.d):00230         B57600         EQU       %00001001
     000A             (   /dd/defs/scf.d):00231         B115200        EQU       %00001010
                      (   /dd/defs/scf.d):00232         * Word size
     0000             (   /dd/defs/scf.d):00233         WORD8          EQU       %00000000
     0020             (   /dd/defs/scf.d):00234         WORD7          EQU       %00100000
                      (   /dd/defs/scf.d):00235         * Stop bits
     0000             (   /dd/defs/scf.d):00236         STOP1          EQU       %00000000
     0010             (   /dd/defs/scf.d):00237         STOP2          EQU       %00010000
                      (   /dd/defs/scf.d):00238         
                      ( /dd/defs/deffile):00009                  use   /dd/defs/coco.d
                      (  /dd/defs/coco.d):00001         ********************************************************************
                      (  /dd/defs/coco.d):00002         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (  /dd/defs/coco.d):00003         *
                      (  /dd/defs/coco.d):00004         * $Id$
                      (  /dd/defs/coco.d):00005         *
                      (  /dd/defs/coco.d):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (  /dd/defs/coco.d):00007         * Comment
                      (  /dd/defs/coco.d):00008         * ------------------------------------------------------------------
                      (  /dd/defs/coco.d):00009         *          1998/10/13  Boisy G. Pitre
                      (  /dd/defs/coco.d):00010         * Added defs by Bruce Isted from his Eliminator archive.
                      (  /dd/defs/coco.d):00011         *
                      (  /dd/defs/coco.d):00012         *          1998/10/31  Boisy G. Pitre
                      (  /dd/defs/coco.d):00013         * Merged cc3global.defs into this file.
                      (  /dd/defs/coco.d):00014         *
                      (  /dd/defs/coco.d):00015         *          2002/04/30  Boisy G. Pitre
                      (  /dd/defs/coco.d):00016         * Merged Level One and Level Two sysdefs.
                      (  /dd/defs/coco.d):00017         *
                      (  /dd/defs/coco.d):00018         *          2002/06/22  Boisy G. Pitre
                      (  /dd/defs/coco.d):00019         * Removed PIA.U4 and PIA.U8, improved comments
                      (  /dd/defs/coco.d):00020         *
                      (  /dd/defs/coco.d):00021         *          2003/11/05  Robert Gault
                      (  /dd/defs/coco.d):00022         * Made changes in window globals and grfdrv memory to handle regW
                      (  /dd/defs/coco.d):00023         * in 6809 systems.
                      (  /dd/defs/coco.d):00024         *
                      (  /dd/defs/coco.d):00025         *          2003/11/30  Boisy G. Pitre
                      (  /dd/defs/coco.d):00026         * Statics now are prefaced with V. to identify them easier in source.
                      (  /dd/defs/coco.d):00027         *
                      (  /dd/defs/coco.d):00028         *          2004/07/18  Boisy G. Pitre
                      (  /dd/defs/coco.d):00029         * Moved CoCo 3 Window stuff into cc3iodefs
                      (  /dd/defs/coco.d):00030         *
                      (  /dd/defs/coco.d):00031         *          2012/02/24  Boisy G. Pitre
                      (  /dd/defs/coco.d):00032         * Consolidated all CoCo-specific defs files into here.
                      (  /dd/defs/coco.d):00033         
                      (  /dd/defs/coco.d):00034                        NAM       CoCoDefs
                      (  /dd/defs/coco.d):00035                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (  /dd/defs/coco.d):00036         
                      (  /dd/defs/coco.d):00037         
                      (  /dd/defs/coco.d):00038         **********************
                      (  /dd/defs/coco.d):00039         * CPU Type Definitions
                      (  /dd/defs/coco.d):00040         *
     0001             (  /dd/defs/coco.d):00041         Color          SET       1
     0002             (  /dd/defs/coco.d):00042         Color3         SET       2
     0002             (  /dd/defs/coco.d):00043         CPUType        SET       Color3
                      (  /dd/defs/coco.d):00044         
                      (  /dd/defs/coco.d):00045         
                      (  /dd/defs/coco.d):00046         ******************************
                      (  /dd/defs/coco.d):00047         * Clock Speed Type Definitions
                      (  /dd/defs/coco.d):00048         *
     0001             (  /dd/defs/coco.d):00049         OneMHz         EQU       1
     0002             (  /dd/defs/coco.d):00050         TwoMHz         EQU       2
     0002             (  /dd/defs/coco.d):00051         CPUSpeed       SET       TwoMHz
                      (  /dd/defs/coco.d):00052         
                      (  /dd/defs/coco.d):00053         
                      (  /dd/defs/coco.d):00054         **********************************
                      (  /dd/defs/coco.d):00055         * Power Line Frequency Definitions
                      (  /dd/defs/coco.d):00056         *
     0001             (  /dd/defs/coco.d):00057         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (  /dd/defs/coco.d):00058         Hz60           EQU       2                   Assemble clock for 60 hz power
     0002             (  /dd/defs/coco.d):00059         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (  /dd/defs/coco.d):00060         
                      (  /dd/defs/coco.d):00061         
                      (  /dd/defs/coco.d):00062         **********************************
                      (  /dd/defs/coco.d):00063         * Ticks per second
                      (  /dd/defs/coco.d):00064         *
     003C             (  /dd/defs/coco.d):00065         TkPerSec       SET       60
                      (  /dd/defs/coco.d):00066         
                      (  /dd/defs/coco.d):00067         
                      (  /dd/defs/coco.d):00068         ******************
                      (  /dd/defs/coco.d):00069         * ACIA type set up
                      (  /dd/defs/coco.d):00070         *
                      (  /dd/defs/coco.d):00071                        ORG       1
0001                  (  /dd/defs/coco.d):00072         ACIA6850       RMB       1                   MC6850 acia.
0002                  (  /dd/defs/coco.d):00073         ACIA6551       RMB       1                   SY6551 acia.
0003                  (  /dd/defs/coco.d):00074         ACIA2661       RMB       1                   SC2661 acia.
     0002             (  /dd/defs/coco.d):00075         ACIATYPE       SET       ACIA6551
                      (  /dd/defs/coco.d):00076         
                      (  /dd/defs/coco.d):00077         
                      (  /dd/defs/coco.d):00078         ****************************************
                      (  /dd/defs/coco.d):00079         * Special character Bit position equates
                      (  /dd/defs/coco.d):00080         *
     0001             (  /dd/defs/coco.d):00081         SHIFTBIT       EQU       %00000001
     0002             (  /dd/defs/coco.d):00082         CNTRLBIT       EQU       %00000010
     0004             (  /dd/defs/coco.d):00083         ALTERBIT       EQU       %00000100
     0008             (  /dd/defs/coco.d):00084         UPBIT          EQU       %00001000
     0010             (  /dd/defs/coco.d):00085         DOWNBIT        EQU       %00010000
     0020             (  /dd/defs/coco.d):00086         LEFTBIT        EQU       %00100000
     0040             (  /dd/defs/coco.d):00087         RIGHTBIT       EQU       %01000000
     0080             (  /dd/defs/coco.d):00088         SPACEBIT       EQU       %10000000
                      (  /dd/defs/coco.d):00089         
                      (  /dd/defs/coco.d):00090         
                      (  /dd/defs/coco.d):00091         ******************
                      (  /dd/defs/coco.d):00092         * Device addresses for miscellaneous hardware
                      (  /dd/defs/coco.d):00093         *
     FF68             (  /dd/defs/coco.d):00094         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (  /dd/defs/coco.d):00095         A.ModP         SET       $FF6C               ModPak Address
     FF40             (  /dd/defs/coco.d):00096         DPort          SET       $FF40               Disk controller base address
     FF7F             (  /dd/defs/coco.d):00097         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (  /dd/defs/coco.d):00098         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (  /dd/defs/coco.d):00099         PIA0Base       EQU       $FF00
     FF20             (  /dd/defs/coco.d):00100         PIA1Base       EQU       $FF20
                      (  /dd/defs/coco.d):00101         
                      (  /dd/defs/coco.d):00102         
                      (  /dd/defs/coco.d):00103         ******************
                      (  /dd/defs/coco.d):00104         * VDG Devices
                      (  /dd/defs/coco.d):00105         *
     FFC0             (  /dd/defs/coco.d):00106         A.TermV        SET       $FFC0               VDG Term
     FFC1             (  /dd/defs/coco.d):00107         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (  /dd/defs/coco.d):00108         A.V2           SET       $FFC2
     FFC3             (  /dd/defs/coco.d):00109         A.V3           SET       $FFC3
     FFC4             (  /dd/defs/coco.d):00110         A.V4           SET       $FFC4
     FFC5             (  /dd/defs/coco.d):00111         A.V5           SET       $FFC5
     FFC6             (  /dd/defs/coco.d):00112         A.V6           SET       $FFC6
     FFC7             (  /dd/defs/coco.d):00113         A.V7           SET       $FFC7
                      (  /dd/defs/coco.d):00114         
                      (  /dd/defs/coco.d):00115         
                      (  /dd/defs/coco.d):00116         
                      (  /dd/defs/coco.d):00117         ********************************
                      (  /dd/defs/coco.d):00118         * Boot defs for NitrOS-9 Level 1
                      (  /dd/defs/coco.d):00119         *
                      (  /dd/defs/coco.d):00120         * These defs are not strictly for 'Boot', but are for booting the
                      (  /dd/defs/coco.d):00121         * system.
                      (  /dd/defs/coco.d):00122         *
                      (  /dd/defs/coco.d):00123         
                      (  /dd/defs/coco.d):00124         
                      (  /dd/defs/coco.d):00125         ******************************************
                      (  /dd/defs/coco.d):00126         * Boot defs for NitrOS-9 Level 2 and above
                      (  /dd/defs/coco.d):00127         *
                      (  /dd/defs/coco.d):00128         * These defs are not strictly for 'Boot', but are for booting the
                      (  /dd/defs/coco.d):00129         * system.
                      (  /dd/defs/coco.d):00130         *
     ED00             (  /dd/defs/coco.d):00131         Bt.Start       SET       $ED00               Start address of the boot track in memory
     003B             (  /dd/defs/coco.d):00132         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (  /dd/defs/coco.d):00133         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (  /dd/defs/coco.d):00134         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
                      (  /dd/defs/coco.d):00135         
                      (  /dd/defs/coco.d):00136         
                      (  /dd/defs/coco.d):00137         * On the CoCo, the boot track is all of track 34
                      (  /dd/defs/coco.d):00138         
     0022             (  /dd/defs/coco.d):00139         Bt.Track       EQU       34                  Boot track
     0000             (  /dd/defs/coco.d):00140         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (  /dd/defs/coco.d):00141         
                      (  /dd/defs/coco.d):00142         
     1080             (  /dd/defs/coco.d):00143         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (  /dd/defs/coco.d):00144         
                      (  /dd/defs/coco.d):00145         
                      (  /dd/defs/coco.d):00146         
                      (  /dd/defs/coco.d):00147         *************************************************
                      (  /dd/defs/coco.d):00148         *
                      (  /dd/defs/coco.d):00149         * NitrOS-9 Level 1 Section
                      (  /dd/defs/coco.d):00150         *
                      (  /dd/defs/coco.d):00151         *************************************************
                      (  /dd/defs/coco.d):00152         
                      (  /dd/defs/coco.d):00153         
                      (  /dd/defs/coco.d):00154         
                      (  /dd/defs/coco.d):00155         *************************************************
                      (  /dd/defs/coco.d):00156         *
                      (  /dd/defs/coco.d):00157         * NitrOS-9 Level 2 Section
                      (  /dd/defs/coco.d):00158         *
                      (  /dd/defs/coco.d):00159         *************************************************
                      (  /dd/defs/coco.d):00160         
                      (  /dd/defs/coco.d):00161         ****************************************
                      (  /dd/defs/coco.d):00162         * Dynamic Address Translator Definitions
                      (  /dd/defs/coco.d):00163         *
     0008             (  /dd/defs/coco.d):00164         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (  /dd/defs/coco.d):00165         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (  /dd/defs/coco.d):00166         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (  /dd/defs/coco.d):00167         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (  /dd/defs/coco.d):00168         DAT.Task       EQU       $FF91               Task Register address
     0020             (  /dd/defs/coco.d):00169         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (  /dd/defs/coco.d):00170         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (  /dd/defs/coco.d):00171         DAT.Free       EQU       $333E               Free Block Number
     003F             (  /dd/defs/coco.d):00172         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (  /dd/defs/coco.d):00173         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (  /dd/defs/coco.d):00174         DAT.WrPr       EQU       0                   no write protect
     0000             (  /dd/defs/coco.d):00175         DAT.WrEn       EQU       0                   no write enable
     0000             (  /dd/defs/coco.d):00176         SysTask        EQU       0                   Coco System Task number
     003F             (  /dd/defs/coco.d):00177         IOBlock        EQU       $3F
     003F             (  /dd/defs/coco.d):00178         ROMBlock       EQU       $3F
     007F             (  /dd/defs/coco.d):00179         IOAddr         EQU       $7F
     0001             (  /dd/defs/coco.d):00180         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (  /dd/defs/coco.d):00181         RAMCount       EQU       1                   initial blocks of RAM
     0005             (  /dd/defs/coco.d):00182         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (  /dd/defs/coco.d):00183         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (  /dd/defs/coco.d):00184         ByteType       EQU       2                   chk entire block of RAM
     0001             (  /dd/defs/coco.d):00185         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (  /dd/defs/coco.d):00186         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (  /dd/defs/coco.d):00187         * NOTE: this check assumes any NotRAM with a module will
                      (  /dd/defs/coco.d):00188         *       always start with $87CD in first two bytes of block
     0001             (  /dd/defs/coco.d):00189         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (  /dd/defs/coco.d):00190         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (  /dd/defs/coco.d):00191         LastRAM        EQU       IOBlock             maximum RAM block number
                      (  /dd/defs/coco.d):00192         
                      (  /dd/defs/coco.d):00193         ***************************
                      (  /dd/defs/coco.d):00194         * Color Computer 3 Specific
                      (  /dd/defs/coco.d):00195         *
     0001             (  /dd/defs/coco.d):00196         MappedIO       EQU       true                (Actually False but it works better this way)
                      (  /dd/defs/coco.d):00197         
                      (  /dd/defs/coco.d):00198         ********************
                      (  /dd/defs/coco.d):00199         * Hardware addresses
                      (  /dd/defs/coco.d):00200         *
     FF00             (  /dd/defs/coco.d):00201         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (  /dd/defs/coco.d):00202         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (  /dd/defs/coco.d):00203         BordReg        EQU       $FF9A               Border color register
     FFB0             (  /dd/defs/coco.d):00204         PalAdr         EQU       $FFB0               Palette registers
                      (  /dd/defs/coco.d):00205         
     0007             (  /dd/defs/coco.d):00206         HW.Page        SET       $07                 Device descriptor hardware page
                      (  /dd/defs/coco.d):00207         
                      (  /dd/defs/coco.d):00208         * KrnBlk defines the block number of the 8K RAM block that is mapped to
                      (  /dd/defs/coco.d):00209         * the top of CPU address space ($E000-$FFFF) for the system process, and
                      (  /dd/defs/coco.d):00210         * which holds the Kernel. The top 2 pages of this CPU address space ($FFE0-
                      (  /dd/defs/coco.d):00211         * $FFFF) has two special properties. Firstly, it contains the I/O space.
                      (  /dd/defs/coco.d):00212         * Secondly, the parts that contain RAM map are not affected by the DAT
                      (  /dd/defs/coco.d):00213         * mappings but, instead, *always* map that RAM to a fixed RAM block
                      (  /dd/defs/coco.d):00214         * (KrnBlk). When a user process is mapped in, and requests enough memory,
                      (  /dd/defs/coco.d):00215         * it will end up with its own block assigned for CPU address space $E000-
                      (  /dd/defs/coco.d):00216         * $FFFF but the top of the address space is unusable by the user process:
                      (  /dd/defs/coco.d):00217         * it still contains the I/O and the bit of RAM that's mapped to KrnBlk.
                      (  /dd/defs/coco.d):00218         * Usually, the value of KrnBlk is fixed for a particular hardware design;
                      (  /dd/defs/coco.d):00219         * For the COCO GIME, it's always $3F.
     003F             (  /dd/defs/coco.d):00220         KrnBlk         SET       $3F
                      (  /dd/defs/coco.d):00221         
                      (  /dd/defs/coco.d):00222         
                      ( /dd/defs/deffile):00010                  use   /dd/defs/cocovtio.d
                      (/dd/defs/cocovtio):00001         ********************************************************************
                      (/dd/defs/cocovtio):00002         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (/dd/defs/cocovtio):00003         *
                      (/dd/defs/cocovtio):00004         * $Id$
                      (/dd/defs/cocovtio):00005         *
                      (/dd/defs/cocovtio):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/defs/cocovtio):00007         * Comment
                      (/dd/defs/cocovtio):00008         * ------------------------------------------------------------------
                      (/dd/defs/cocovtio):00009         *          2004/07/18  Boisy G. Pitre
                      (/dd/defs/cocovtio):00010         * Started from systype
                      (/dd/defs/cocovtio):00011         
                      (/dd/defs/cocovtio):00012                        NAM       VTIODefs
                      (/dd/defs/cocovtio):00013                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (/dd/defs/cocovtio):00014         
                      (/dd/defs/cocovtio):00015         * Max size of Get/Put buffer to copy between user and grfdrv. There is room for up to 128, but
                      (/dd/defs/cocovtio):00016         *   we may use some of that for other things. Leaving at OS-9 Level II default (72) for now.
                      (/dd/defs/cocovtio):00017         * May try increasing to higher (maybe 96?) to see if it makes a noticable difference GPLoading
                      (/dd/defs/cocovtio):00018         * fonts, etc. in EOU bootup.
                      (/dd/defs/cocovtio):00019         
     0048             (/dd/defs/cocovtio):00020         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (/dd/defs/cocovtio):00021         
                      (/dd/defs/cocovtio):00022         ****************
                      (/dd/defs/cocovtio):00023         * Window Devices
                      (/dd/defs/cocovtio):00024         *
                      (/dd/defs/cocovtio):00025                        ORG       $FF9F
FF9F                  (/dd/defs/cocovtio):00026         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (/dd/defs/cocovtio):00027         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (/dd/defs/cocovtio):00028         A.W1           RMB       1                   $FFA1
FFA2                  (/dd/defs/cocovtio):00029         A.W2           RMB       1                   $FFA2
FFA3                  (/dd/defs/cocovtio):00030         A.W3           RMB       1                   $FFA3
FFA4                  (/dd/defs/cocovtio):00031         A.W4           RMB       1                   $FFA4
FFA5                  (/dd/defs/cocovtio):00032         A.W5           RMB       1                   $FFA5
FFA6                  (/dd/defs/cocovtio):00033         A.W6           RMB       1                   $FFA6
FFA7                  (/dd/defs/cocovtio):00034         A.W7           RMB       1                   $FFA7
FFA8                  (/dd/defs/cocovtio):00035         A.W8           RMB       1                   $FFA8
FFA9                  (/dd/defs/cocovtio):00036         A.W9           RMB       1                   $FFA9
FFAA                  (/dd/defs/cocovtio):00037         A.W10          RMB       1                   $FFAA
FFAB                  (/dd/defs/cocovtio):00038         A.W11          RMB       1                   $FFAB
FFAC                  (/dd/defs/cocovtio):00039         A.W12          RMB       1                   $FFAC
FFAD                  (/dd/defs/cocovtio):00040         A.W13          RMB       1                   $FFAD
FFAE                  (/dd/defs/cocovtio):00041         A.W14          RMB       1                   $FFAE
FFAF                  (/dd/defs/cocovtio):00042         A.W15          RMB       1                   $FFAF
                      (/dd/defs/cocovtio):00043         
                      (/dd/defs/cocovtio):00044         **********************************
                      (/dd/defs/cocovtio):00045         * Pointer Device Packet Definition
                      (/dd/defs/cocovtio):00046         *
                      (/dd/defs/cocovtio):00047                        ORG       0
0000                  (/dd/defs/cocovtio):00048         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (/dd/defs/cocovtio):00049         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (/dd/defs/cocovtio):00050         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (/dd/defs/cocovtio):00051                        RMB       2                   reserved
0005                  (/dd/defs/cocovtio):00052         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (/dd/defs/cocovtio):00053         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (/dd/defs/cocovtio):00054         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (/dd/defs/cocovtio):00055         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (/dd/defs/cocovtio):00056         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (/dd/defs/cocovtio):00057         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (/dd/defs/cocovtio):00058         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (/dd/defs/cocovtio):00059         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (/dd/defs/cocovtio):00060         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (/dd/defs/cocovtio):00061         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (/dd/defs/cocovtio):00062                        RMB       2                   Reserved
0012                  (/dd/defs/cocovtio):00063         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (/dd/defs/cocovtio):00064         Pt.BDY         RMB       2                   Button down Y value
0016                  (/dd/defs/cocovtio):00065         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (/dd/defs/cocovtio):00066         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (/dd/defs/cocovtio):00067         Pt.AcX         RMB       2                   Actual X Value
001A                  (/dd/defs/cocovtio):00068         Pt.AcY         RMB       2                   Actual Y Value
001C                  (/dd/defs/cocovtio):00069         Pt.WRX         RMB       2                   Window Relative X
001E                  (/dd/defs/cocovtio):00070         Pt.WRY         RMB       2                   Window Relative Y
     0020             (/dd/defs/cocovtio):00071         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (/dd/defs/cocovtio):00072         
                      (/dd/defs/cocovtio):00073         **************************
                      (/dd/defs/cocovtio):00074         * window regions for mouse
                      (/dd/defs/cocovtio):00075         *
     0000             (/dd/defs/cocovtio):00076         WR.Cntnt       EQU       0                   content region
     0001             (/dd/defs/cocovtio):00077         WR.Cntrl       EQU       1                   control region
     0002             (/dd/defs/cocovtio):00078         WR.OfWin       EQU       2                   off window
                      (/dd/defs/cocovtio):00079         
                      (/dd/defs/cocovtio):00080         *************************************
                      (/dd/defs/cocovtio):00081         * Standard system get/put buffer defs
                      (/dd/defs/cocovtio):00082         *
                      (/dd/defs/cocovtio):00083         *
                      (/dd/defs/cocovtio):00084         * system group numbers
                      (/dd/defs/cocovtio):00085         *
                      (/dd/defs/cocovtio):00086                        ORG       200
00C8                  (/dd/defs/cocovtio):00087         Grp.Fnt        RMB       1                   font group
00C9                  (/dd/defs/cocovtio):00088         Grp.Clip       RMB       1                   clipboard group
00CA                  (/dd/defs/cocovtio):00089         Grp.Ptr        RMB       1                   pointer group
00CB                  (/dd/defs/cocovtio):00090         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (/dd/defs/cocovtio):00091         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (/dd/defs/cocovtio):00092         Grp.Pat6       RMB       1                   pattern group 16 color
                      (/dd/defs/cocovtio):00093         *
                      (/dd/defs/cocovtio):00094         * font buffer numbers
                      (/dd/defs/cocovtio):00095         *
                      (/dd/defs/cocovtio):00096                        ORG       1
0001                  (/dd/defs/cocovtio):00097         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (/dd/defs/cocovtio):00098         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (/dd/defs/cocovtio):00099         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (/dd/defs/cocovtio):00100         *
                      (/dd/defs/cocovtio):00101         * pattern buffer numbers
                      (/dd/defs/cocovtio):00102         *
                      (/dd/defs/cocovtio):00103                        ORG       1
0001                  (/dd/defs/cocovtio):00104         Pat.Dot        RMB       1
0002                  (/dd/defs/cocovtio):00105         Pat.Vrt        RMB       1
0003                  (/dd/defs/cocovtio):00106         Pat.Hrz        RMB       1
0004                  (/dd/defs/cocovtio):00107         Pat.XHtc       RMB       1
0005                  (/dd/defs/cocovtio):00108         Pat.LSnt       RMB       1
0006                  (/dd/defs/cocovtio):00109         Pat.RSnt       RMB       1
0007                  (/dd/defs/cocovtio):00110         Pat.SDot       RMB       1
0008                  (/dd/defs/cocovtio):00111         Pat.BDot       RMB       1
                      (/dd/defs/cocovtio):00112         *
                      (/dd/defs/cocovtio):00113         * pointer buffer numbers
                      (/dd/defs/cocovtio):00114         *
                      (/dd/defs/cocovtio):00115                        ORG       1
0001                  (/dd/defs/cocovtio):00116         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (/dd/defs/cocovtio):00117         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (/dd/defs/cocovtio):00118         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (/dd/defs/cocovtio):00119         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (/dd/defs/cocovtio):00120         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (/dd/defs/cocovtio):00121         Ptr.Txt        RMB       1                   Text pointer
0007                  (/dd/defs/cocovtio):00122         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (/dd/defs/cocovtio):00123         
                      (/dd/defs/cocovtio):00124         **********************
                      (/dd/defs/cocovtio):00125         * KeyDrv Entry Points
                      (/dd/defs/cocovtio):00126                        ORG       0
0000                  (/dd/defs/cocovtio):00127         K$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00128         K$Term         RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00129         K$FnKey        RMB       3                   get function key states
0009                  (/dd/defs/cocovtio):00130         K$RdKey        RMB       3                   get key states
                      (/dd/defs/cocovtio):00131         
                      (/dd/defs/cocovtio):00132         **********************
                      (/dd/defs/cocovtio):00133         * JoyDrv Entry Points
                      (/dd/defs/cocovtio):00134                        ORG       0
0000                  (/dd/defs/cocovtio):00135         J$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00136         J$Term         RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00137         J$MsBtn        RMB       3                   get mouse button states
0009                  (/dd/defs/cocovtio):00138         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (/dd/defs/cocovtio):00139         J$JyBtn        RMB       3                   get joystick button states
000F                  (/dd/defs/cocovtio):00140         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (/dd/defs/cocovtio):00141         
                      (/dd/defs/cocovtio):00142         **********************
                      (/dd/defs/cocovtio):00143         * SndDrv Entry Points
                      (/dd/defs/cocovtio):00144                        ORG       0
0000                  (/dd/defs/cocovtio):00145         S$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00146         S$GetStt       RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00147         S$SetStt       RMB       3                   joystick termination
0009                  (/dd/defs/cocovtio):00148         S$Term         RMB       3                   get joystick X/Y coordinates
                      (/dd/defs/cocovtio):00149         
                      (/dd/defs/cocovtio):00150         ********************************
                      (/dd/defs/cocovtio):00151         * Window/Menu Bar Data Structure
                      (/dd/defs/cocovtio):00152         *
                      (/dd/defs/cocovtio):00153         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (/dd/defs/cocovtio):00154         * for use in the high level windowing package.
                      (/dd/defs/cocovtio):00155         *
     000A             (/dd/defs/cocovtio):00156         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (/dd/defs/cocovtio):00157         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (/dd/defs/cocovtio):00158         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (/dd/defs/cocovtio):00159         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (/dd/defs/cocovtio):00160         *
                      (/dd/defs/cocovtio):00161         * Menu Item Descriptor : (MN.ITEMS)
                      (/dd/defs/cocovtio):00162         * one required for each item within the menu
                      (/dd/defs/cocovtio):00163         *
                      (/dd/defs/cocovtio):00164                        ORG       0
0000                  (/dd/defs/cocovtio):00165         MI.TTL         RMB       MXTTLEN             item name
000F                  (/dd/defs/cocovtio):00166         MI.ENBL        RMB       1                   enable flag
0010                  (/dd/defs/cocovtio):00167         MI.RES         RMB       5                   reserved bytes
     0015             (/dd/defs/cocovtio):00168         MI.SIZ         EQU       .                   size of menu item descriptor
                      (/dd/defs/cocovtio):00169         *
                      (/dd/defs/cocovtio):00170         * Menu Descriptor :
                      (/dd/defs/cocovtio):00171         * one for each menu on the manu bar
                      (/dd/defs/cocovtio):00172         * each is pointed to by MB.MPTR below
                      (/dd/defs/cocovtio):00173         *
                      (/dd/defs/cocovtio):00174                        ORG       0
0000                  (/dd/defs/cocovtio):00175         MN.TTL         RMB       MXTTLEN             menu title
000F                  (/dd/defs/cocovtio):00176         MN.ID          RMB       1                   menu id number (1-255)
0010                  (/dd/defs/cocovtio):00177         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (/dd/defs/cocovtio):00178         MN.NITS        RMB       1                   number of items in menu
0012                  (/dd/defs/cocovtio):00179         MN.ENBL        RMB       1                   enable flag
0013                  (/dd/defs/cocovtio):00180         MN.RES         RMB       2                   reserved bytes
0015                  (/dd/defs/cocovtio):00181         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (/dd/defs/cocovtio):00182         MN.SIZ         EQU       .                   size of menu descriptor
                      (/dd/defs/cocovtio):00183         *
                      (/dd/defs/cocovtio):00184         * Window Descriptor:
                      (/dd/defs/cocovtio):00185         * one required for each application in a framed window
                      (/dd/defs/cocovtio):00186         *
                      (/dd/defs/cocovtio):00187                        ORG       0
0000                  (/dd/defs/cocovtio):00188         WN.TTL         RMB       20                  title of window for title bar
0014                  (/dd/defs/cocovtio):00189         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (/dd/defs/cocovtio):00190         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (/dd/defs/cocovtio):00191         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (/dd/defs/cocovtio):00192         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (/dd/defs/cocovtio):00193         WN.RES         RMB       7                   reserved bytes
0020                  (/dd/defs/cocovtio):00194         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (/dd/defs/cocovtio):00195         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (/dd/defs/cocovtio):00196         
                      (/dd/defs/cocovtio):00197         *************************
                      (/dd/defs/cocovtio):00198         * Window Type Definitions
                      (/dd/defs/cocovtio):00199         *
                      (/dd/defs/cocovtio):00200         * To be used in setting up the border of the window in
                      (/dd/defs/cocovtio):00201         * the SS.WnSel SETSTAT
                      (/dd/defs/cocovtio):00202         *
                      (/dd/defs/cocovtio):00203                        ORG       0
0000                  (/dd/defs/cocovtio):00204         WT.NBox        RMB       1                   No Box
0001                  (/dd/defs/cocovtio):00205         WT.FWin        RMB       1                   Framed Window
0002                  (/dd/defs/cocovtio):00206         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (/dd/defs/cocovtio):00207         WT.SBox        RMB       1                   Shadowed Box
0004                  (/dd/defs/cocovtio):00208         WT.DBox        RMB       1                   Double Box
0005                  (/dd/defs/cocovtio):00209         WT.PBox        RMB       1                   Plain Box
                      (/dd/defs/cocovtio):00210         
                      (/dd/defs/cocovtio):00211         *************************************
                      (/dd/defs/cocovtio):00212         * Pre-Defined Menu IDs for the system
                      (/dd/defs/cocovtio):00213         *
                      (/dd/defs/cocovtio):00214                        ORG       1
0001                  (/dd/defs/cocovtio):00215         MId.Mov        RMB       1                   move box
0002                  (/dd/defs/cocovtio):00216         MId.Cls        RMB       1                   close box
0003                  (/dd/defs/cocovtio):00217         MId.Grw        RMB       1                   grow box
0004                  (/dd/defs/cocovtio):00218         MId.SUp        RMB       1                   scroll up
0005                  (/dd/defs/cocovtio):00219         MId.SDn        RMB       1                   scroll down
0006                  (/dd/defs/cocovtio):00220         MId.SRt        RMB       1                   scroll right
0007                  (/dd/defs/cocovtio):00221         MId.SLt        RMB       1                   scroll left
0008                  (/dd/defs/cocovtio):00222         MId.Chr        RMB       1                   character was depressed
                      (/dd/defs/cocovtio):00223                        ORG       20
0014                  (/dd/defs/cocovtio):00224         MId.Tdy        RMB       1                   Tandy menu
0015                  (/dd/defs/cocovtio):00225         MId.Fil        RMB       1                   Files Menu
0016                  (/dd/defs/cocovtio):00226         MId.Edt        RMB       1                   Edit Menu
0017                  (/dd/defs/cocovtio):00227         MId.Sty        RMB       1                   Styles menu
0018                  (/dd/defs/cocovtio):00228         MId.Fnt        RMB       1                   Font menu
                      (/dd/defs/cocovtio):00229         
                      (/dd/defs/cocovtio):00230         
                      (/dd/defs/cocovtio):00231         ******************************************************************************
                      (/dd/defs/cocovtio):00232         ******************************************************************************
                      (/dd/defs/cocovtio):00233         **                                                                          **
                      (/dd/defs/cocovtio):00234         ** NitrOS-9 Windowing system Global data definitions                        **
                      (/dd/defs/cocovtio):00235         **                                                                          **
                      (/dd/defs/cocovtio):00236         ******************************************************************************
                      (/dd/defs/cocovtio):00237         ******************************************************************************
                      (/dd/defs/cocovtio):00238         **                                                                          **
                      (/dd/defs/cocovtio):00239         ** System memory block 0 layout:                                            **
                      (/dd/defs/cocovtio):00240         **                                                                          **
                      (/dd/defs/cocovtio):00241         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (/dd/defs/cocovtio):00242         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (/dd/defs/cocovtio):00243         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (/dd/defs/cocovtio):00244         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (/dd/defs/cocovtio):00245         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (/dd/defs/cocovtio):00246         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (/dd/defs/cocovtio):00247         ** $0010-$001F : unused (User definable)                                    **
                      (/dd/defs/cocovtio):00248         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (/dd/defs/cocovtio):00249         ** $0100-$011F : Task usage table                                           **
                      (/dd/defs/cocovtio):00250         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (/dd/defs/cocovtio):00251         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (/dd/defs/cocovtio):00252         ** $0300-$03FF : system's system call dispatch table                        **
                      (/dd/defs/cocovtio):00253         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (/dd/defs/cocovtio):00254         ** $0500-$05FF : process descriptor pointer table                           **
                      (/dd/defs/cocovtio):00255         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (/dd/defs/cocovtio):00256         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (/dd/defs/cocovtio):00257         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (/dd/defs/cocovtio):00258         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (/dd/defs/cocovtio):00259         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (/dd/defs/cocovtio):00260         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (/dd/defs/cocovtio):00261         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (/dd/defs/cocovtio):00262         ** $1248-$127F : ????  (unused)                                             **
                      (/dd/defs/cocovtio):00263         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (/dd/defs/cocovtio):00264         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (/dd/defs/cocovtio):00265         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (/dd/defs/cocovtio):00266         **                                                                          **
                      (/dd/defs/cocovtio):00267         ******************************************************************************
                      (/dd/defs/cocovtio):00268         ******************************************************************************
                      (/dd/defs/cocovtio):00269         
                      (/dd/defs/cocovtio):00270         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (/dd/defs/cocovtio):00271         MaxLines       EQU       25                  Max. Y coord text value
     0000             (/dd/defs/cocovtio):00272         Meg            SET       false               "true" if 1 or 2 meg machine
                      (/dd/defs/cocovtio):00273         
     0000             (/dd/defs/cocovtio):00274         COMP           EQU       0                   composite monitor
     0001             (/dd/defs/cocovtio):00275         RGB            EQU       1                   RGB Analog monitor 
     0002             (/dd/defs/cocovtio):00276         MONO           EQU       2                   monochrome monitor
                      (/dd/defs/cocovtio):00277         
     0001             (/dd/defs/cocovtio):00278         Monitor        SET       RGB
                      (/dd/defs/cocovtio):00279         
                      (/dd/defs/cocovtio):00280         * Global definitions
     0001             (/dd/defs/cocovtio):00281         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (/dd/defs/cocovtio):00282         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (/dd/defs/cocovtio):00283         CapsLck        EQU       %00000100           Capslock enabled
     0280             (/dd/defs/cocovtio):00284         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00285                      IFEQ      MaxLines-25
     00C6             (/dd/defs/cocovtio):00286         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00287                      ELSE      
0019                  (/dd/defs/cocovtio):00288         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00289                      ENDC      
                      (/dd/defs/cocovtio):00290         
                      (/dd/defs/cocovtio):00291         *****************************************************************************
                      (/dd/defs/cocovtio):00292         * Static memory area for each window (VTIO/TC9IO)
                      (/dd/defs/cocovtio):00293         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (/dd/defs/cocovtio):00294         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (/dd/defs/cocovtio):00295         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (/dd/defs/cocovtio):00296         * May have to have smaller limit for text to gfx screens, as it will run much
                      (/dd/defs/cocovtio):00297         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (/dd/defs/cocovtio):00298         *
                      (/dd/defs/cocovtio):00299         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (/dd/defs/cocovtio):00300         * V.SCF is to be resolved properly in pass 1!!
                      (/dd/defs/cocovtio):00301                        ORG       V.SCF
001D                  (/dd/defs/cocovtio):00302         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (/dd/defs/cocovtio):00303         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (/dd/defs/cocovtio):00304         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (/dd/defs/cocovtio):00305         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (/dd/defs/cocovtio):00306         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (/dd/defs/cocovtio):00307         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (/dd/defs/cocovtio):00308         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (/dd/defs/cocovtio):00309         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (/dd/defs/cocovtio):00310         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (/dd/defs/cocovtio):00311         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (/dd/defs/cocovtio):00312         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (/dd/defs/cocovtio):00313         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (/dd/defs/cocovtio):00314                        RMB       1                   unused                                       $2A
002B                  (/dd/defs/cocovtio):00315         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (/dd/defs/cocovtio):00316         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (/dd/defs/cocovtio):00317         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (/dd/defs/cocovtio):00318         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (/dd/defs/cocovtio):00319         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (/dd/defs/cocovtio):00320         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (/dd/defs/cocovtio):00321         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (/dd/defs/cocovtio):00322         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (/dd/defs/cocovtio):00323         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (/dd/defs/cocovtio):00324         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (/dd/defs/cocovtio):00325         CC3Parm        RMB       128-.               global parameter area
0080                  (/dd/defs/cocovtio):00326         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (/dd/defs/cocovtio):00327         CC3DSiz        EQU       .
                      (/dd/defs/cocovtio):00328         
                      (/dd/defs/cocovtio):00329         *****************************************************************************
                      (/dd/defs/cocovtio):00330         * GrfInt/WindInt global memory area
                      (/dd/defs/cocovtio):00331         * This area sits in system block 0 from $1000 to $10ff
     1000             (/dd/defs/cocovtio):00332         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (/dd/defs/cocovtio):00333                        ORG       0
0000                  (/dd/defs/cocovtio):00334         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (/dd/defs/cocovtio):00335         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (/dd/defs/cocovtio):00336         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (/dd/defs/cocovtio):00337         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (/dd/defs/cocovtio):00338         *g0003    rmb   2          NEW: UNUSED
0005                  (/dd/defs/cocovtio):00339         g0005          RMB       2                   Temp save in Windint RG
0007                  (/dd/defs/cocovtio):00340         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (/dd/defs/cocovtio):00341         G.MonTyp       RMB       1                   monitor type
     000A             (/dd/defs/cocovtio):00342         g000A          EQU       .                   Old label for compatibility
000A                  (/dd/defs/cocovtio):00343         G.CrDvFl       RMB       1                   Are we current device flag (only set when all
                      (/dd/defs/cocovtio):00344         *                           Parms have been moved to Dev Mem)
                      (/dd/defs/cocovtio):00345         *                           0=We are not on our device
                      (/dd/defs/cocovtio):00346         *                           1=We are the current device
                      (/dd/defs/cocovtio):00347         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (/dd/defs/cocovtio):00348         *                            whether or not to update GIME regs themselves
                      (/dd/defs/cocovtio):00349         *                            If not current device, they don't.)
000B                  (/dd/defs/cocovtio):00350         G.WinType      RMB       1                   current device's V.TYPE
000C                  (/dd/defs/cocovtio):00351         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (/dd/defs/cocovtio):00352         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (/dd/defs/cocovtio):00353         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (/dd/defs/cocovtio):00354         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (/dd/defs/cocovtio):00355         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (/dd/defs/cocovtio):00356         G.BelVec       RMB       2                   BELL routine vector
0019                  (/dd/defs/cocovtio):00357         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (/dd/defs/cocovtio):00358         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (/dd/defs/cocovtio):00359         G.BelTnF       RMB       1                   BELL tone flag
001D                  (/dd/defs/cocovtio):00360         g001D          RMB       3
0020                  (/dd/defs/cocovtio):00361         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (/dd/defs/cocovtio):00362         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (/dd/defs/cocovtio):00363         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (/dd/defs/cocovtio):00364         *                           00000010 : VDGInt found
                      (/dd/defs/cocovtio):00365         *                           10000000 : GrfDrv found
0025                  (/dd/defs/cocovtio):00366         g0025          RMB       1
0026                  (/dd/defs/cocovtio):00367         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (/dd/defs/cocovtio):00368         *         IFEQ  TC9-true
                      (/dd/defs/cocovtio):00369         *CurLght  rmb   1          current keyboard light settings
                      (/dd/defs/cocovtio):00370         *         ELSE  
0027                  (/dd/defs/cocovtio):00371         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (/dd/defs/cocovtio):00372         *         ENDC  
0028                  (/dd/defs/cocovtio):00373         G.LKeyCd       RMB       1                   last keyboard code
0029                  (/dd/defs/cocovtio):00374         G.KyRept       RMB       1                   key repeat counter
                      (/dd/defs/cocovtio):00375         * A secondary 3 key table (same format as g002D below)
002A                  (/dd/defs/cocovtio):00376         G.2Key1        RMB       1                   $2A
002B                  (/dd/defs/cocovtio):00377         G.2Key2        RMB       1                   $2B
002C                  (/dd/defs/cocovtio):00378         G.2Key3        RMB       1
                      (/dd/defs/cocovtio):00379         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (/dd/defs/cocovtio):00380         * than 3 are hit, the last key is overwritten with the very last key down that
                      (/dd/defs/cocovtio):00381         * was checked. Format for all three is the same as the PIA column/row byte @
                      (/dd/defs/cocovtio):00382         * KeyFlag below.
002D                  (/dd/defs/cocovtio):00383         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (/dd/defs/cocovtio):00384         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (/dd/defs/cocovtio):00385         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (/dd/defs/cocovtio):00386         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (/dd/defs/cocovtio):00387         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (/dd/defs/cocovtio):00388         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (/dd/defs/cocovtio):00389         *                           %00000111-Column # (Output, 0-7)
                      (/dd/defs/cocovtio):00390         *                           %00111000-Row # (Input, 0-6)
0033                  (/dd/defs/cocovtio):00391         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (/dd/defs/cocovtio):00392         G.KySns        RMB       1                   key sense byte
0035                  (/dd/defs/cocovtio):00393         G.KySame       RMB       1                   same key flag
0036                  (/dd/defs/cocovtio):00394         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (/dd/defs/cocovtio):00395                        RMB       1
0038                  (/dd/defs/cocovtio):00396         g0038          RMB       1                   grfdrv initialized flag
0039                  (/dd/defs/cocovtio):00397                        RMB       2
003B                  (/dd/defs/cocovtio):00398         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (/dd/defs/cocovtio):00399         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (/dd/defs/cocovtio):00400         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (/dd/defs/cocovtio):00401         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (/dd/defs/cocovtio):00402         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (/dd/defs/cocovtio):00403         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (/dd/defs/cocovtio):00404         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (/dd/defs/cocovtio):00405         *         IFEQ  TC9-true
                      (/dd/defs/cocovtio):00406         *KeyParm  rmb   1          keyboard command parameter byte
                      (/dd/defs/cocovtio):00407         *         ELSE  
0063                  (/dd/defs/cocovtio):00408         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (/dd/defs/cocovtio):00409         *         ENDC  
0064                  (/dd/defs/cocovtio):00410         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (/dd/defs/cocovtio):00411         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (/dd/defs/cocovtio):00412         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (/dd/defs/cocovtio):00413         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (/dd/defs/cocovtio):00414         G.CoTble       RMB       6                   co-module table ($68)
006E                  (/dd/defs/cocovtio):00415         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (/dd/defs/cocovtio):00416         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (/dd/defs/cocovtio):00417         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (/dd/defs/cocovtio):00418         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (/dd/defs/cocovtio):00419         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (/dd/defs/cocovtio):00420         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (/dd/defs/cocovtio):00421         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (/dd/defs/cocovtio):00422         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (/dd/defs/cocovtio):00423         g00BD          RMB       1                   Current screen type for work window table
00BE                  (/dd/defs/cocovtio):00424         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (/dd/defs/cocovtio):00425         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (/dd/defs/cocovtio):00426         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (/dd/defs/cocovtio):00427         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (/dd/defs/cocovtio):00428         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (/dd/defs/cocovtio):00429         G.MsSig        RMB       1                   mouse signal flag
00C7                  (/dd/defs/cocovtio):00430         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (/dd/defs/cocovtio):00431         g00D7          RMB       9
00E0                  (/dd/defs/cocovtio):00432         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (/dd/defs/cocovtio):00433         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (/dd/defs/cocovtio):00434         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (/dd/defs/cocovtio):00435         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (/dd/defs/cocovtio):00436         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (/dd/defs/cocovtio):00437         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (/dd/defs/cocovtio):00438         
                      (/dd/defs/cocovtio):00439         *****************************************************************************
                      (/dd/defs/cocovtio):00440         * GrfDrv global memory data definitions
                      (/dd/defs/cocovtio):00441         * This area sits in system block 0 from $1100 to $119E
     1100             (/dd/defs/cocovtio):00442         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (/dd/defs/cocovtio):00443                        ORG       0
0000                  (/dd/defs/cocovtio):00444         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (/dd/defs/cocovtio):00445         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (/dd/defs/cocovtio):00446         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (/dd/defs/cocovtio):00447         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (/dd/defs/cocovtio):00448         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (/dd/defs/cocovtio):00449         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (/dd/defs/cocovtio):00450         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (/dd/defs/cocovtio):00451         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (/dd/defs/cocovtio):00452         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (/dd/defs/cocovtio):00453         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (/dd/defs/cocovtio):00454         *                                              overlay width has been copied
000B                  (/dd/defs/cocovtio):00455         gr000B         RMB       1
000C                  (/dd/defs/cocovtio):00456         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (/dd/defs/cocovtio):00457         gr000E         RMB       1
000F                  (/dd/defs/cocovtio):00458         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (/dd/defs/cocovtio):00459         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (/dd/defs/cocovtio):00460         gr0012         RMB       6
0018                  (/dd/defs/cocovtio):00461         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (/dd/defs/cocovtio):00462         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (/dd/defs/cocovtio):00463         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (/dd/defs/cocovtio):00464         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (/dd/defs/cocovtio):00465         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (/dd/defs/cocovtio):00466         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (/dd/defs/cocovtio):00467         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (/dd/defs/cocovtio):00468         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (/dd/defs/cocovtio):00469         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (/dd/defs/cocovtio):00470         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (/dd/defs/cocovtio):00471         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (/dd/defs/cocovtio):00472         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (/dd/defs/cocovtio):00473         gr002C         RMB       2
002E                  (/dd/defs/cocovtio):00474         gr002E         RMB       2                   current window table entry
0030                  (/dd/defs/cocovtio):00475         gr0030         RMB       2                   current screen table ptr
0032                  (/dd/defs/cocovtio):00476         gr0032         RMB       1                   Last block # we used for buffers
0033                  (/dd/defs/cocovtio):00477         gr0033         RMB       2                   Last offset we used for buffers
0035                  (/dd/defs/cocovtio):00478         gr0035         RMB       1                   group
0036                  (/dd/defs/cocovtio):00479         gr0036         RMB       2                   offset
0038                  (/dd/defs/cocovtio):00480         gr0038         RMB       1                   group returned (new)
0039                  (/dd/defs/cocovtio):00481         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (/dd/defs/cocovtio):00482         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (/dd/defs/cocovtio):00483         gr003B         RMB       2                   end of vars ptr?
003D                  (/dd/defs/cocovtio):00484         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (/dd/defs/cocovtio):00485         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (/dd/defs/cocovtio):00486         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (/dd/defs/cocovtio):00487         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (/dd/defs/cocovtio):00488         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (/dd/defs/cocovtio):00489         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (/dd/defs/cocovtio):00490         gr0047         RMB       2                   'Working' X coordinate
0049                  (/dd/defs/cocovtio):00491         gr0049         RMB       2                   'Working' Y coordinate
004B                  (/dd/defs/cocovtio):00492         gr004B         RMB       2                   current X
004D                  (/dd/defs/cocovtio):00493         gr004D         RMB       2                   current Y
004F                  (/dd/defs/cocovtio):00494         gr004F         RMB       2                   X Size (in bytes)
0051                  (/dd/defs/cocovtio):00495         gr0051         RMB       2                   Y Size (in bytes)
0053                  (/dd/defs/cocovtio):00496         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (/dd/defs/cocovtio):00497         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (/dd/defs/cocovtio):00498         gr0057         RMB       1                   group
0058                  (/dd/defs/cocovtio):00499         gr0058         RMB       1                   buffer #
0059                  (/dd/defs/cocovtio):00500         gr0059         RMB       1                   save switch for overlay
005A                  (/dd/defs/cocovtio):00501         gr005A         RMB       1                   PRN
005B                  (/dd/defs/cocovtio):00502         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (/dd/defs/cocovtio):00503         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (/dd/defs/cocovtio):00504         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (/dd/defs/cocovtio):00505         Gr.STYMk       RMB       1                   STY marker
0061                  (/dd/defs/cocovtio):00506         gr0061         RMB       1                   foreground RGB data
0062                  (/dd/defs/cocovtio):00507         gr0062         RMB       1                   background RGB data
0063                  (/dd/defs/cocovtio):00508         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (/dd/defs/cocovtio):00509         gr0064         RMB       2                   PSet vector
0066                  (/dd/defs/cocovtio):00510         gr0066         RMB       2                   pset offset
0068                  (/dd/defs/cocovtio):00511         gr0068         RMB       2                   LSet vector
006A                  (/dd/defs/cocovtio):00512         gr006A         RMB       2                   max X co-ordinate
006C                  (/dd/defs/cocovtio):00513         gr006C         RMB       2                   max Y co-ordinate
006E                  (/dd/defs/cocovtio):00514         gr006E         RMB       2                   X pixel count
0070                  (/dd/defs/cocovtio):00515         gr0070         RMB       2                   Y pixel count
0072                  (/dd/defs/cocovtio):00516         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (/dd/defs/cocovtio):00517         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (/dd/defs/cocovtio):00518         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (/dd/defs/cocovtio):00519         gr0077         RMB       2                   Vector for right direction FFill
0079                  (/dd/defs/cocovtio):00520         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (/dd/defs/cocovtio):00521         gr007A         RMB       2                   Vector for left direction FFill
007C                  (/dd/defs/cocovtio):00522         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (/dd/defs/cocovtio):00523         gr007D         RMB       1                   buffer block #
007E                  (/dd/defs/cocovtio):00524         gr007E         RMB       2                   buffer offset #
0080                  (/dd/defs/cocovtio):00525         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (/dd/defs/cocovtio):00526         gr0082         RMB       3                   3 byte extended screen address
0085                  (/dd/defs/cocovtio):00527         gr0085         RMB       2                   temp
0087                  (/dd/defs/cocovtio):00528         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (/dd/defs/cocovtio):00529         gr0097         RMB       1                   temp
0098                  (/dd/defs/cocovtio):00530         gr0098         RMB       1                   temp
                      (/dd/defs/cocovtio):00531         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (/dd/defs/cocovtio):00532         gr0099         RMB       2                   temp
                      (/dd/defs/cocovtio):00533         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (/dd/defs/cocovtio):00534         gr009B         RMB       1                   counter temp
009C                  (/dd/defs/cocovtio):00535         gr009C         RMB       1
009D                  (/dd/defs/cocovtio):00536         gr009D         RMB       2                   offset to buffer in block
009F                  (/dd/defs/cocovtio):00537         gr009F         RMB       1
00A0                  (/dd/defs/cocovtio):00538         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (/dd/defs/cocovtio):00539         gr00A1         RMB       2                   vector routine for (changes lots)
                      (/dd/defs/cocovtio):00540         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (/dd/defs/cocovtio):00541         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (/dd/defs/cocovtio):00542         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (/dd/defs/cocovtio):00543         gr00A7         RMB       2
00A9                  (/dd/defs/cocovtio):00544         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (/dd/defs/cocovtio):00545         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (/dd/defs/cocovtio):00546         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (/dd/defs/cocovtio):00547         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (/dd/defs/cocovtio):00548         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (/dd/defs/cocovtio):00549         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (/dd/defs/cocovtio):00550         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (/dd/defs/cocovtio):00551         gr00B3         RMB       1                   temp veriable grfdrv
00B4                  (/dd/defs/cocovtio):00552         gr00B4         RMB       1                   temp veriable grfdrv
00B5                  (/dd/defs/cocovtio):00553         gr00B5         RMB       1                   regW for grfdrv
00B6                  (/dd/defs/cocovtio):00554         gr00B6         RMB       1
00B7                  (/dd/defs/cocovtio):00555         gr00B7         RMB       2
00B9                  (/dd/defs/cocovtio):00556         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (/dd/defs/cocovtio):00557         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (/dd/defs/cocovtio):00558         gr00BD         RMB       2                   previously used in grfdrv at $B6
                      (/dd/defs/cocovtio):00559         * EOU Beta 2 & up
00BF                  (/dd/defs/cocovtio):00560         grScrtch       RMB       2                   Scratch var for Grfdrv - use DP instead of stack for
                      (/dd/defs/cocovtio):00561         *                                            anything that does immediate calculations
00C1                  (/dd/defs/cocovtio):00562         gr00BF         RMB       256-.               Reserved for future use
                      (/dd/defs/cocovtio):00563         
                      (/dd/defs/cocovtio):00564         * GPLoad buffer - $1200 in system block    . Currently ends at $1247, and $1248-$127f is unused
     1200             (/dd/defs/cocovtio):00565         GPBuf          EQU       $1200               Usefull address (start of GP buffer copy memory)
0100                  (/dd/defs/cocovtio):00566         GPBufSz        RMB       gb0000              common move buffer for gpload/get/put (72 bytes default)
                      (/dd/defs/cocovtio):00567         
                      (/dd/defs/cocovtio):00568         *****************************************************************************
                      (/dd/defs/cocovtio):00569         * Window table entry structure
                      (/dd/defs/cocovtio):00570         * These tables sit in system block 0 and there is 1 for every window init'd
                      (/dd/defs/cocovtio):00571         * including any overlay windows.
     0020             (/dd/defs/cocovtio):00572         MaxWind        EQU       32                  maximum allowable window tables
     1290             (/dd/defs/cocovtio):00573         WinBase        EQU       $1290               base address to start of window tables
                      (/dd/defs/cocovtio):00574                        ORG       -$10
FFF0                  (/dd/defs/cocovtio):00575         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (/dd/defs/cocovtio):00576         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (/dd/defs/cocovtio):00577         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (/dd/defs/cocovtio):00578         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (/dd/defs/cocovtio):00579         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (/dd/defs/cocovtio):00580         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (/dd/defs/cocovtio):00581         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (/dd/defs/cocovtio):00582         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (/dd/defs/cocovtio):00583         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (/dd/defs/cocovtio):00584         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (/dd/defs/cocovtio):00585         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (/dd/defs/cocovtio):00586         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (/dd/defs/cocovtio):00587         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (/dd/defs/cocovtio):00588         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (/dd/defs/cocovtio):00589         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (/dd/defs/cocovtio):00590         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (/dd/defs/cocovtio):00591         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (/dd/defs/cocovtio):00592         Wt.Back        RMB       1                   background palette #                         $07
0008                  (/dd/defs/cocovtio):00593         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (/dd/defs/cocovtio):00594         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (/dd/defs/cocovtio):00595         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (/dd/defs/cocovtio):00596         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (/dd/defs/cocovtio):00597         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (/dd/defs/cocovtio):00598         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (/dd/defs/cocovtio):00599         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (/dd/defs/cocovtio):00600         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (/dd/defs/cocovtio):00601         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (/dd/defs/cocovtio):00602         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (/dd/defs/cocovtio):00603         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (/dd/defs/cocovtio):00604         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (/dd/defs/cocovtio):00605         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (/dd/defs/cocovtio):00606         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (/dd/defs/cocovtio):00607         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24/25,0-191/199)          $1D
001F                  (/dd/defs/cocovtio):00608         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (/dd/defs/cocovtio):00609         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (/dd/defs/cocovtio):00610         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (/dd/defs/cocovtio):00611         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (/dd/defs/cocovtio):00612         * NOTE: The following default settings are what the window was initialized
                      (/dd/defs/cocovtio):00613         *       with, and thus are the MAXIMUM start/size the window can handle
                      (/dd/defs/cocovtio):00614         *       until it is restarted (DWEnd & DWSet)
                      (/dd/defs/cocovtio):00615         *       They also appear to be used in WindInt to determine the coords &
                      (/dd/defs/cocovtio):00616         *       sizes for control+content regions
0026                  (/dd/defs/cocovtio):00617         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (/dd/defs/cocovtio):00618         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (/dd/defs/cocovtio):00619         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (/dd/defs/cocovtio):00620         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (/dd/defs/cocovtio):00621         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (/dd/defs/cocovtio):00622         Wt.Siz         EQU       .+$10
                      (/dd/defs/cocovtio):00623         
                      (/dd/defs/cocovtio):00624         *****************************************************************************
                      (/dd/defs/cocovtio):00625         * Screen table entrys
                      (/dd/defs/cocovtio):00626         * These tables sit in system block 0 base=$1A80
                      (/dd/defs/cocovtio):00627         
     0010             (/dd/defs/cocovtio):00628         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (/dd/defs/cocovtio):00629         STblBse        EQU       $1A80               base address of screen tables
                      (/dd/defs/cocovtio):00630                        ORG       0
0000                  (/dd/defs/cocovtio):00631         St.Sty         RMB       1                   Screen type                         $00
0001                  (/dd/defs/cocovtio):00632         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (/dd/defs/cocovtio):00633         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (/dd/defs/cocovtio):00634         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (/dd/defs/cocovtio):00635         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (/dd/defs/cocovtio):00636         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (/dd/defs/cocovtio):00637         St.Back        RMB       1                   Background palette register #       $07
0008                  (/dd/defs/cocovtio):00638         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (/dd/defs/cocovtio):00639         St.Res         RMB       7                   UNUSED???                           $09
                      (/dd/defs/cocovtio):00640         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (/dd/defs/cocovtio):00641         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (/dd/defs/cocovtio):00642         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (/dd/defs/cocovtio):00643         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
                      (/dd/defs/cocovtio):00644         * Other possibilities: Offset into screen to display (if we enable screens taller than
                      (/dd/defs/cocovtio):00645         *   a single screen), etc.
0010                  (/dd/defs/cocovtio):00646         St.Pals        RMB       16                  Palette register contents           $10
     0020             (/dd/defs/cocovtio):00647         St.Siz         EQU       .
                      (/dd/defs/cocovtio):00648         
                      (/dd/defs/cocovtio):00649         *****************************************************************************
                      (/dd/defs/cocovtio):00650         * Graphics buffer tables
                      (/dd/defs/cocovtio):00651         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (/dd/defs/cocovtio):00652         * data.
                      (/dd/defs/cocovtio):00653                        ORG       0
0000                  (/dd/defs/cocovtio):00654         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (/dd/defs/cocovtio):00655         Grf.Off        RMB       2                   back block header offset            $01
0003                  (/dd/defs/cocovtio):00656         Grf.Grp        RMB       1                   group #                             $03
0004                  (/dd/defs/cocovtio):00657         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (/dd/defs/cocovtio):00658         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (/dd/defs/cocovtio):00659         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (/dd/defs/cocovtio):00660         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (/dd/defs/cocovtio):00661         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (/dd/defs/cocovtio):00662         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (/dd/defs/cocovtio):00663         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (/dd/defs/cocovtio):00664         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (/dd/defs/cocovtio):00665         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (/dd/defs/cocovtio):00666         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (/dd/defs/cocovtio):00667         Grf.Siz        EQU       .                   $20
                      (/dd/defs/cocovtio):00668         
                      (/dd/defs/cocovtio):00669         *****************************************************************************
                      (/dd/defs/cocovtio):00670         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (/dd/defs/cocovtio):00671         * $1075-$0176
                      (/dd/defs/cocovtio):00672         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (/dd/defs/cocovtio):00673                        ORG       0
0000                  (/dd/defs/cocovtio):00674         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (/dd/defs/cocovtio):00675         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (/dd/defs/cocovtio):00676         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (/dd/defs/cocovtio):00677         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (/dd/defs/cocovtio):00678         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (/dd/defs/cocovtio):00679         Gt.BClr        RMB       1                   Background color                               $08
0009                  (/dd/defs/cocovtio):00680         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (/dd/defs/cocovtio):00681         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (/dd/defs/cocovtio):00682         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (/dd/defs/cocovtio):00683         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (/dd/defs/cocovtio):00684         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (/dd/defs/cocovtio):00685         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (/dd/defs/cocovtio):00686         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (/dd/defs/cocovtio):00687         GTabSz         EQU       .
                      (/dd/defs/cocovtio):00688         
                      (/dd/defs/cocovtio):00689         *****************************************************************************
                      (/dd/defs/cocovtio):00690         * This table is located in the graphics table memory and is offset from
                      (/dd/defs/cocovtio):00691         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (/dd/defs/cocovtio):00692         * WindInt.
                      (/dd/defs/cocovtio):00693         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (/dd/defs/cocovtio):00694         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (/dd/defs/cocovtio):00695         *  COMBINATION EVERY TIME
                      (/dd/defs/cocovtio):00696                        ORG       $0240
0240                  (/dd/defs/cocovtio):00697                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (/dd/defs/cocovtio):00698                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (/dd/defs/cocovtio):00699                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (/dd/defs/cocovtio):00700                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (/dd/defs/cocovtio):00701         
                      (/dd/defs/cocovtio):00702         *****************************************************************************
                      (/dd/defs/cocovtio):00703         * WindInt menu handling table entry definition
                      (/dd/defs/cocovtio):00704                        ORG       0
0000                  (/dd/defs/cocovtio):00705         MnuXNum        RMB       1                   menu #
0001                  (/dd/defs/cocovtio):00706         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (/dd/defs/cocovtio):00707         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (/dd/defs/cocovtio):00708                        RMB       1                   unused?
     0004             (/dd/defs/cocovtio):00709         MnuHSiz        EQU       .
                      (/dd/defs/cocovtio):00710         
                      (/dd/defs/cocovtio):00711         *****************************************************************************
                      (/dd/defs/cocovtio):00712         * Character binary switches
     0080             (/dd/defs/cocovtio):00713         Blink          EQU       %10000000           Blink characters (hardware text only)
     0080             (/dd/defs/cocovtio):00714         TChr           EQU       %10000000           transparent characters (both currently)
     0040             (/dd/defs/cocovtio):00715         Under          EQU       %01000000           underline characters (both)
     0020             (/dd/defs/cocovtio):00716         Bold           EQU       %00100000           bold characters (gfx only, maybe txt with color changes?)
     0010             (/dd/defs/cocovtio):00717         Prop           EQU       %00010000           proportional spacing of characters (gfx only)
     0008             (/dd/defs/cocovtio):00718         Scale          EQU       %00001000           automatic window scaling (gfx only)
     0004             (/dd/defs/cocovtio):00719         Invers         EQU       %00000100           inverse characters (both)
     0002             (/dd/defs/cocovtio):00720         NoCurs         EQU       %00000010           no cursor display (both)
     0001             (/dd/defs/cocovtio):00721         Protect        EQU       %00000001           device window protection (both)
                      (/dd/defs/cocovtio):00722         
                      (/dd/defs/cocovtio):00723         *****************************************************************************
                      (/dd/defs/cocovtio):00724         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (/dd/defs/cocovtio):00725         Current        EQU       $ff                 Current screen
                      (/dd/defs/cocovtio):00726         *         equ   1          640x200x2
                      (/dd/defs/cocovtio):00727         *         equ   2          320x200x4
                      (/dd/defs/cocovtio):00728         *         equ   3          640x200x4
                      (/dd/defs/cocovtio):00729         *         equ   4          320x200x16
                      (/dd/defs/cocovtio):00730         *         equ   $85        80 column text
                      (/dd/defs/cocovtio):00731         *         equ   $86        40 column text
                      (/dd/defs/cocovtio):00732         
                      (/dd/defs/cocovtio):00733         *************************************
                      (/dd/defs/cocovtio):00734         * Window default palette color codes
                      (/dd/defs/cocovtio):00735         *
                      (/dd/defs/cocovtio):00736                        ORG       0
0000                  (/dd/defs/cocovtio):00737         White.         RMB       1
0001                  (/dd/defs/cocovtio):00738         Blue.          RMB       1
0002                  (/dd/defs/cocovtio):00739         Black.         RMB       1
0003                  (/dd/defs/cocovtio):00740         Green.         RMB       1
0004                  (/dd/defs/cocovtio):00741         Red.           RMB       1
0005                  (/dd/defs/cocovtio):00742         Yellow.        RMB       1
0006                  (/dd/defs/cocovtio):00743         Magenta.       RMB       1
0007                  (/dd/defs/cocovtio):00744         Cyan.          RMB       1
                      (/dd/defs/cocovtio):00745         
                      ( /dd/defs/deffile):00011                  use   /dd/defs/cocosdc.d
                      (/dd/defs/cocosdc.):00001         ********************************************************************
                      (/dd/defs/cocosdc.):00002         * cocosdc.d - CoCo SDC definitions
                      (/dd/defs/cocosdc.):00003         *
                      (/dd/defs/cocosdc.):00004         * $Id$
                      (/dd/defs/cocosdc.):00005         *
                      (/dd/defs/cocosdc.):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/defs/cocosdc.):00007         * Comment
                      (/dd/defs/cocosdc.):00008         * ------------------------------------------------------------------
                      (/dd/defs/cocosdc.):00009         *          2014/05/02  Boisy G. Pitre
                      (/dd/defs/cocosdc.):00010         * Created
                      (/dd/defs/cocosdc.):00011         
                      (/dd/defs/cocosdc.):00012         
     FF4A             (/dd/defs/cocosdc.):00013         SDAddr         SET       $FF4A
                      (/dd/defs/cocosdc.):00014         
                      ( /dd/defs/deffile):00012                  use   /dd/defs/vdgdefs
                      ( /dd/defs/vdgdefs):00001                        IFNE      VDGDEFS-1
                      ( /dd/defs/vdgdefs):00002         
     0001             ( /dd/defs/vdgdefs):00003         VDGDEFS        SET       1
                      ( /dd/defs/vdgdefs):00004         
                      ( /dd/defs/vdgdefs):00005         ********************************************************************
                      ( /dd/defs/vdgdefs):00006         * VDGDefs - VDG Interface Definititions
                      ( /dd/defs/vdgdefs):00007         *
                      ( /dd/defs/vdgdefs):00008         * $Id$
                      ( /dd/defs/vdgdefs):00009         *
                      ( /dd/defs/vdgdefs):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      ( /dd/defs/vdgdefs):00011         * Comment
                      ( /dd/defs/vdgdefs):00012         * ------------------------------------------------------------------
                      ( /dd/defs/vdgdefs):00013         *          1991/05/07  Alan DeKok
                      ( /dd/defs/vdgdefs):00014         * Wrote original from VDGInt source.
                      ( /dd/defs/vdgdefs):00015         
                      ( /dd/defs/vdgdefs):00016                        NAM       VDGDefs
                      ( /dd/defs/vdgdefs):00017                        TTL       VDG Interface Definitions
                      ( /dd/defs/vdgdefs):00018         
                      ( /dd/defs/vdgdefs):00019         * Notes:
                      ( /dd/defs/vdgdefs):00020         *
                      ( /dd/defs/vdgdefs):00021         * All offsets from 'U' (address of device memory area)
                      ( /dd/defs/vdgdefs):00022         * (see p. 6-9, technical reference: U=start of driver data memory
                      ( /dd/defs/vdgdefs):00023         * NOTE: There is LOTS of stuff which is only used once, and some which
                      ( /dd/defs/vdgdefs):00024         * is not needed.  Here's a list of the un-needed, and un-used (other than
                      ( /dd/defs/vdgdefs):00025         * once)
                      ( /dd/defs/vdgdefs):00026         *
                      ( /dd/defs/vdgdefs):00027         * It would probably be benificial to patch VDGint to fix these problems,
                      ( /dd/defs/vdgdefs):00028         * unless anyone else has ideas as to why VDGint is doing things this way.
                      ( /dd/defs/vdgdefs):00029         *
                      ( /dd/defs/vdgdefs):00030         * Un-needed
                      ( /dd/defs/vdgdefs):00031         * VD.EPlt1  - (2) set to VD.NChar, and then read only
                      ( /dd/defs/vdgdefs):00032         * VD.EPlt2  - (2) set to same as VD.EPlt1, and then unused
                      ( /dd/defs/vdgdefs):00033         * VD.Chr1   - (1) set to same as VD.CChar, and then unused
                      ( /dd/defs/vdgdefs):00034         * VD.PlFlg  - (1) initialized to $08, and unused
                      ( /dd/defs/vdgdefs):00035         *
                      ( /dd/defs/vdgdefs):00036         * Un-used
                      ( /dd/defs/vdgdefs):00037         *
                      ( /dd/defs/vdgdefs):00038         * $1D       - (1) end of SCF memory requirements
                      ( /dd/defs/vdgdefs):00039         * VD.Strt1  - (2) CLRed, and then read (LDD) - left as $0000
                      ( /dd/defs/vdgdefs):00040         * $24-$2B   - (8)
                      ( /dd/defs/vdgdefs):00041         * $33-$34   - (2)
                      ( /dd/defs/vdgdefs):00042         * $7E-$FF   - (130)
                      ( /dd/defs/vdgdefs):00043         *
                      ( /dd/defs/vdgdefs):00044         * Total of 22 (150 in whole page) bytes unneeded or unused.
                      ( /dd/defs/vdgdefs):00045         
                      ( /dd/defs/vdgdefs):00046                        ORG       $1E
001E                  ( /dd/defs/vdgdefs):00047         VD.Start       RMB       1                   start of VD.XXXX data: number of VDG screens in use
001F                  ( /dd/defs/vdgdefs):00048         VD.Strt1       RMB       2                   (2) and another start
0021                  ( /dd/defs/vdgdefs):00049         VD.Caps        RMB       2                   caps lock info: $00=lower $FF=upper
0023                  ( /dd/defs/vdgdefs):00050         VD.DFlag       RMB       1                   0=current screen is valid, $01-$FF = update video
                      ( /dd/defs/vdgdefs):00051         * $24-$2B unused
0024                  ( /dd/defs/vdgdefs):00052                        RMB       8
002C                  ( /dd/defs/vdgdefs):00053         VD.NGChr       RMB       1                   number of additional characters to get
002D                  ( /dd/defs/vdgdefs):00054         VD.RTAdd       RMB       2                   (2) return address after getting characters
002F                  ( /dd/defs/vdgdefs):00055         VD.EPlt1       RMB       2                   (2) pointer to where to put next character
0031                  ( /dd/defs/vdgdefs):00056         VD.EPlt2       RMB       2                   (2) as above.
                      ( /dd/defs/vdgdefs):00057         * $33-$34 unused
0033                  ( /dd/defs/vdgdefs):00058                        RMB       2
0035                  ( /dd/defs/vdgdefs):00059         VD.CFlag       RMB       1                   true lowercase flag $10=true, $00=false
0036                  ( /dd/defs/vdgdefs):00060         VD.CFlg1       RMB       1                   VDG display code values
0037                  ( /dd/defs/vdgdefs):00061         VD.DGBuf       RMB       1                   number of currently displayed buffer
0038                  ( /dd/defs/vdgdefs):00062         VD.ScrnA       RMB       2                   (2) screen start address in system memory
003A                  ( /dd/defs/vdgdefs):00063         VD.ScrnE       RMB       2                   (2) address of end of screen
003C                  ( /dd/defs/vdgdefs):00064         VD.CrsrA       RMB       1                   (2) cursor address
003D                  ( /dd/defs/vdgdefs):00065         VD.CrsAL       RMB       1                   cursor address low
003E                  ( /dd/defs/vdgdefs):00066         VD.CChar       RMB       1                   value of character under cursor
003F                  ( /dd/defs/vdgdefs):00067         VD.Mode        RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0040                  ( /dd/defs/vdgdefs):00068         VD.Chr1        RMB       1                   same as under cursor character
0041                  ( /dd/defs/vdgdefs):00069         VD.CColr       RMB       1                   cursor color
0042                  ( /dd/defs/vdgdefs):00070         VD.Col         RMB       1                   number of columns for this screen
0043                  ( /dd/defs/vdgdefs):00071         VD.Row         RMB       1                   number of rows
0044                  ( /dd/defs/vdgdefs):00072         VD.TFlg1       RMB       1                   see WRITE ($0E)
0045                  ( /dd/defs/vdgdefs):00073         VD.Alpha       RMB       1                   0 when in alpha mode
0046                  ( /dd/defs/vdgdefs):00074         VD.Rdy         RMB       1                   device ready (see SS.DStat 0=not ready)
0047                  ( /dd/defs/vdgdefs):00075         VD.SBAdd       RMB       2                   (2) address of block screen is in
0049                  ( /dd/defs/vdgdefs):00076         VD.Blk         RMB       1                   Block number of screen
004A                  ( /dd/defs/vdgdefs):00077         VD.GBuff       RMB       1                   allocation for graphics buffers (block#)
004B                  ( /dd/defs/vdgdefs):00078         VD.AGBuf       RMB       2                   (2) additional graphics buffer
004D                  ( /dd/defs/vdgdefs):00079         VD.HiRes       RMB       1                   hi-res screen table (block value)
004E                  ( /dd/defs/vdgdefs):00080         VD.NBlk        RMB       1                   number of blocks in this screen
004F                  ( /dd/defs/vdgdefs):00081         VD.SType       RMB       1                   screen type -4
0050                  ( /dd/defs/vdgdefs):00082         VD.HR2         RMB       3                   (3) for screen number 2
0053                  ( /dd/defs/vdgdefs):00083         VD.HR3         RMB       3                   (3) for screen 3 (same 3 bytes as above)
0056                  ( /dd/defs/vdgdefs):00084         VD.FFMem       RMB       2                   (2) bottom of stack for flood fill
0058                  ( /dd/defs/vdgdefs):00085         VD.FFSPt       RMB       2                   (2) flood fill stack pointer
005A                  ( /dd/defs/vdgdefs):00086         VD.FFSTp       RMB       2                   (2) flood fill stack top pointer
005C                  ( /dd/defs/vdgdefs):00087         VD.FF6         RMB       1                   flood fill flag
005D                  ( /dd/defs/vdgdefs):00088         VD.MTabl       RMB       2                   (2) address of mask table for pixels in byte
005F                  ( /dd/defs/vdgdefs):00089         VD.PixBt       RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0060                  ( /dd/defs/vdgdefs):00090         VD.GCrsX       RMB       1                   graphics cursor X value
0061                  ( /dd/defs/vdgdefs):00091         VD.GCrsY       RMB       1                   graphics cursor Y
0062                  ( /dd/defs/vdgdefs):00092         VD.Msk1        RMB       1                   mask byte 1
0063                  ( /dd/defs/vdgdefs):00093         VD.Msk2        RMB       1                   mask byte 2 (00,55,AA,FF)
0064                  ( /dd/defs/vdgdefs):00094         VD.MCol        RMB       1                   color? (C003,8001)
0065                  ( /dd/defs/vdgdefs):00095         VD.MCol2       RMB       1                   color
0066                  ( /dd/defs/vdgdefs):00096         VD.PMask       RMB       1                   pixel mask for colors (i.e. $55, $CC etc)
0067                  ( /dd/defs/vdgdefs):00097         VD.FF1         RMB       1                   data for flood fill
0068                  ( /dd/defs/vdgdefs):00098         VD.FF2         RMB       1                   data for flood fill
0069                  ( /dd/defs/vdgdefs):00099         VD.FFMsk       RMB       1                   flood fill mask
006A                  ( /dd/defs/vdgdefs):00100         VD.FFFlg       RMB       1                   flood fill flag
006B                  ( /dd/defs/vdgdefs):00101         VD.Palet       RMB       16                  (16) current palette values
007B                  ( /dd/defs/vdgdefs):00102         VD.PlFlg       RMB       1                   initialized to $08 by L00DB, and then unused!
007C                  ( /dd/defs/vdgdefs):00103         VD.NChar       RMB       1                   character to process
007D                  ( /dd/defs/vdgdefs):00104         VD.NChr2       RMB       1                   and the next one
                      ( /dd/defs/vdgdefs):00105         
                      ( /dd/defs/vdgdefs):00106         * and RMB until we get 256 bytes reserved
                      ( /dd/defs/vdgdefs):00107         
                      ( /dd/defs/vdgdefs):00108                        ENDC      
                      ( /dd/defs/vdgdefs):00109         
                      (grfdrv_beta5_with):00358                endc
                      (grfdrv_beta5_with):00359         
     4000             (grfdrv_beta5_with):00360         GrfStrt  equ   $4000          Position of GRFDRV in it's own task
                      (grfdrv_beta5_with):00361         
     00C1             (grfdrv_beta5_with):00362         tylg     set   Systm+Objct
     0081             (grfdrv_beta5_with):00363         atrv     set   ReEnt+rev
     0001             (grfdrv_beta5_with):00364         rev      set   $01
     000E             (grfdrv_beta5_with):00365         edition  equ   14
                      (grfdrv_beta5_with):00366         
                      (grfdrv_beta5_with):00367         * NOTE: Following set has meaning only if 25 text line mode is selected
     0000             (grfdrv_beta5_with):00368         TV       set   $00            Set to 1 for 25 line TV res. (200 vs. 225)
                      (grfdrv_beta5_with):00369         
0000 87CD2296000EC181 (grfdrv_beta5_with):00370                  mod   eom,name,tylg,atrv,entry,size
     4F00150000
     0000             (grfdrv_beta5_with):00371         size     equ   .
                      (grfdrv_beta5_with):00372         
000D 07               (grfdrv_beta5_with):00373                  fcb   $07 
                      (grfdrv_beta5_with):00374         
000E 4772664472F6     (grfdrv_beta5_with):00375         name     fcs   /GrfDrv/
0014 0E               (grfdrv_beta5_with):00376                  fcb   edition
                      (grfdrv_beta5_with):00377         
                      (grfdrv_beta5_with):00378         ******************************
                      (grfdrv_beta5_with):00379         * Main entry point
                      (grfdrv_beta5_with):00380         *   Entry: B=Internal function code (from CoGRF or CoWin)
                      (grfdrv_beta5_with):00381         *          A=Character (for Write routine)
                      (grfdrv_beta5_with):00382         *          U=Pointer to GRFDRV memory area ($1100 in system)
                      (grfdrv_beta5_with):00383         *          Y=Current window Window Table Pointer
                      (grfdrv_beta5_with):00384         *    Stack area is from $1b80 to $1fff in block 0
                      (grfdrv_beta5_with):00385         *   When function call vector is executed via JMP ,X
                      (grfdrv_beta5_with):00386         *     DP has been set to $11 to allow direct page access to GRFDRV variables
                      (grfdrv_beta5_with):00387         
     0015             (grfdrv_beta5_with):00388         entry    equ   *
                      (grfdrv_beta5_with):00389                IFNE  H6309
                      (grfdrv_beta5_with):00390                  lde   #GrfMem/256         Direct page for GrfDrv
                      (grfdrv_beta5_with):00391                  tfr   e,dp
                      (grfdrv_beta5_with):00392                ELSE
0015 3402             (grfdrv_beta5_with):00393                  pshs  a
0017 8611             (grfdrv_beta5_with):00394                  lda   #GrfMem/256
0019 1F8B             (grfdrv_beta5_with):00395                  tfr   a,dp
001B 3502             (grfdrv_beta5_with):00396                  puls  a
                      (grfdrv_beta5_with):00397                ENDC
001D 5D               (grfdrv_beta5_with):00398                  tstb               initialization?
001E 275D             (grfdrv_beta5_with):00399                  beq   L0080        Yes, go do
                      (grfdrv_beta5_with):00400         
0020 8E4025           (grfdrv_beta5_with):00401         grfdrv.1 ldx   #GrfStrt+L0028   Point to function vector table
0023 6E95             (grfdrv_beta5_with):00402                  jmp   [b,x]        Execute function
                      (grfdrv_beta5_with):00403         
                      (grfdrv_beta5_with):00404         * GrfDrv function code vector table. We should look at changing entry
                      (grfdrv_beta5_with):00405         *   values between CoWin/CoGrf and here to remove the 0'd out ones to
                      (grfdrv_beta5_with):00406         *   save some RAM (12 bytes at current) that are wasted. LCB
0025 407D             (grfdrv_beta5_with):00407         L0028    fdb   L0080+GrfStrt  Initialization ($00)
0027 408A             (grfdrv_beta5_with):00408                  fdb   L0104+GrfStrt  Terminate      ($02)
0029 40FD             (grfdrv_beta5_with):00409                  fdb   L019D+GrfStrt  DWSet          ($04)
002B 4FCA             (grfdrv_beta5_with):00410                  fdb   fast.chr+GrfStrt  buffered writes... ($06)
002D 4379             (grfdrv_beta5_with):00411                  fdb   L03CB+GrfStrt  DWEnd          ($08)
002F 441C             (grfdrv_beta5_with):00412                  fdb   L046A+GrfStrt  OWSet          ($0A)
0031 44D8             (grfdrv_beta5_with):00413                  fdb   L053A+GrfStrt  OWEnd          ($0C)
0033 450C             (grfdrv_beta5_with):00414                  fdb   L056E+GrfStrt  CWArea         ($0E)
0035 46F0             (grfdrv_beta5_with):00415                  fdb   L07D7+GrfStrt  Select         ($10)
0037 45D9             (grfdrv_beta5_with):00416                  fdb   L0611+GrfStrt  PSet           ($12)
0039 0000             (grfdrv_beta5_with):00417                  fdb   $0000          Border         ($14) NOW IN CoWin
003B 0000             (grfdrv_beta5_with):00418                  fdb   $0000          Palette        ($16) NOW IN CoWin
003D 45FF             (grfdrv_beta5_with):00419                  fdb   L063C+GrfStrt  Font           ($18)
003F 464C             (grfdrv_beta5_with):00420                  fdb   L068B+GrfStrt  GCSet          ($1A)
0041 0000             (grfdrv_beta5_with):00421                  fdb   $0000          DefColor       ($1C) NOW IN CoWin
0043 5813             (grfdrv_beta5_with):00422                  fdb   L06A4+GrfStrt  LSet           ($1E)
0045 4665             (grfdrv_beta5_with):00423                  fdb   L0707+GrfStrt  FColor         ($20)
0047 4683             (grfdrv_beta5_with):00424                  fdb   L0726+GrfStrt  BColor         ($22)
0049 0000             (grfdrv_beta5_with):00425                  fdb   $0000          TChrSW         ($24) NOW IN CoWin
004B 0000             (grfdrv_beta5_with):00426                  fdb   $0000          PropSW         ($26) NOW IN CoWin
004D 0000             (grfdrv_beta5_with):00427                  fdb   $0000          Scale          ($28) NOW IN CoWin
004F 0000             (grfdrv_beta5_with):00428                  fdb   $0000          Bold           ($2A) NOW IN CoWin
0051 47FD             (grfdrv_beta5_with):00429                  fdb   L08DC+GrfStrt  DefGB          ($2C)
0053 4955             (grfdrv_beta5_with):00430                  fdb   L0A3A+GrfStrt  KillBuf        ($2E)
0055 4A53             (grfdrv_beta5_with):00431                  fdb   L0B3F+GrfStrt  GPLoad         ($30)
0057 4A8C             (grfdrv_beta5_with):00432                  fdb   L0B79+GrfStrt  Move buffer    ($32)
0059 4B0C             (grfdrv_beta5_with):00433                  fdb   L0BAE+GrfStrt  GetBlk         ($34)
005B 4C54             (grfdrv_beta5_with):00434                  fdb   L0CBB+GrfStrt  PutBlk         ($36)
005D 4F5A             (grfdrv_beta5_with):00435                  fdb   L0F31+GrfStrt  Map GP buffer  ($38)
005F 50A2             (grfdrv_beta5_with):00436                  fdb   L0F4B+GrfStrt  Alpha put      ($3A)
0061 5327             (grfdrv_beta5_with):00437                  fdb   L1129+GrfStrt  Control codes  ($3C)
0063 56D3             (grfdrv_beta5_with):00438                  fdb   L116E+GrfStrt  Cursor on/off  ($3E)
0065 564E             (grfdrv_beta5_with):00439                  fdb   L1478+GrfStrt  $1f codes      ($40)
0067 52ED             (grfdrv_beta5_with):00440                  fdb   L1186+GrfStrt  Goto X/Y       ($42)
0069 56FC             (grfdrv_beta5_with):00441                  fdb   L151B+GrfStrt  PutGC          ($44)
006B 56E2             (grfdrv_beta5_with):00442                  fdb   L1500+GrfStrt  Update Cursors ($46)
006D 586F             (grfdrv_beta5_with):00443                  fdb   L1635+GrfStrt  Point          ($48)
006F 5891             (grfdrv_beta5_with):00444                  fdb   L1654+GrfStrt  Line           ($4A)
0071 5A8F             (grfdrv_beta5_with):00445                  fdb   L1790+GrfStrt  Box            ($4C)
0073 5AD9             (grfdrv_beta5_with):00446                  fdb   L17FB+GrfStrt  Bar            ($4E)
0075 5B23             (grfdrv_beta5_with):00447                  fdb   L1856+GrfStrt  Circle         ($50)
0077 5B97             (grfdrv_beta5_with):00448                  fdb   L18BD+GrfStrt  Ellipse        ($52)
0079 5B2D             (grfdrv_beta5_with):00449                  fdb   L1860+GrfStrt  Arc            ($54)
007B 5F76             (grfdrv_beta5_with):00450                  fdb   L1C4F+GrfStrt  FFill          ($56)
                      (grfdrv_beta5_with):00451         
                      (grfdrv_beta5_with):00452         * Initialization entry point
                      (grfdrv_beta5_with):00453         * Entry: U=$1100
                      (grfdrv_beta5_with):00454         *       DP=$11
                      (grfdrv_beta5_with):00455         *        B=$00
007D F61038           (grfdrv_beta5_with):00456         L0080    ldb   >WGlobal+g0038       have we been initialized?
0080 2B04             (grfdrv_beta5_with):00457                  bmi   L0102                yes, exit
0082 43               (grfdrv_beta5_with):00458                  coma 
0083 B71038           (grfdrv_beta5_with):00459                  sta   >WGlobal+g0038       Put it back
0086 4F               (grfdrv_beta5_with):00460         L0102    clra
0087 1F8B             (grfdrv_beta5_with):00461                  tfr   a,dp           Set DP to 0 for Wind/CoGrf, which need it there
0089 39               (grfdrv_beta5_with):00462                  rts                  Return
                      (grfdrv_beta5_with):00463         
                      (grfdrv_beta5_with):00464         * Termination routine
008A 0F38             (grfdrv_beta5_with):00465         L0104    clr   <$0038         Clear group #
008C 0F7D             (grfdrv_beta5_with):00466                  clr   <$007D         Clear buffer block #
008E D632             (grfdrv_beta5_with):00467                  ldb   <$0032         Get last block used
0090 270A             (grfdrv_beta5_with):00468                  beq   L0115          If 0, return to system
0092 9E33             (grfdrv_beta5_with):00469                  ldx   <$0033         Get offset into last block we used
0094 1708D9           (grfdrv_beta5_with):00470                  lbsr  L0A55          Deallocate that buffer
0097 24F1             (grfdrv_beta5_with):00471                  bcc   L0104          Keep doing until all are deallocated
0099 7E50A5           (grfdrv_beta5_with):00472                  jmp   >GrfStrt+SysRet Return to system with error if can't
                      (grfdrv_beta5_with):00473         
009C 7E50A4           (grfdrv_beta5_with):00474         L0115    jmp   >GrfStrt+L0F78 Exit system
                      (grfdrv_beta5_with):00475         
                      (grfdrv_beta5_with):00476         * Setup GrfDrv memory with data from current window table
                      (grfdrv_beta5_with):00477         * Entry: Y=Window table ptr
                      (grfdrv_beta5_with):00478         * Puts in following:
                      (grfdrv_beta5_with):00479         *   PSET/LSET vectors & offsets
                      (grfdrv_beta5_with):00480         *   Foreground/background palettes
                      (grfdrv_beta5_with):00481         *   Maximum X&Y coords for window
                      (grfdrv_beta5_with):00482         *   Screen type
                      (grfdrv_beta5_with):00483         *   Start block # of screen
                      (grfdrv_beta5_with):00484         *   # bytes / row of text
                      (grfdrv_beta5_with):00485         * NOTE: USING A 2 BYTE FREE MEMORY LOCATION SOMEWHERE IN BLOCK 0, KEEP A
                      (grfdrv_beta5_with):00486         *  'LAST WINDOW' ACCESSED COPY OF THE WINDOW TABLE PTR. IF IT HAS NOT CHANGED
                      (grfdrv_beta5_with):00487         *  WHEN IT GETS HERE (OR WHATEVER CALLS HERE) FROM THE 'LAST WINDOW' ACCESSED,
                      (grfdrv_beta5_with):00488         *  SKIP THIS ENTIRE ROUTINE
009F 0FA9             (grfdrv_beta5_with):00489         L0129    clr   <$A9         Special entry pt for DWSet,Select,UpdtWin,PutGC
00A1 AE30             (grfdrv_beta5_with):00490         L012B    ldx   Wt.STbl,y    Get screen table ptr
00A3 3406             (grfdrv_beta5_with):00491                  pshs  d            Preserve register
00A5 ECA816           (grfdrv_beta5_with):00492                  ldd   Wt.PVec,y    Get PSet vector for this window
                      (grfdrv_beta5_with):00493                IFNE  H6309
                      (grfdrv_beta5_with):00494                  ldw   Wt.POff,y    Get PSet offset for this window
                      (grfdrv_beta5_with):00495                  stq   <$64         Save Pset vector & PSet offset
                      (grfdrv_beta5_with):00496                ELSE
00A8 DD64             (grfdrv_beta5_with):00497                  std   <$64
00AA EC2F             (grfdrv_beta5_with):00498                  ldd   Wt.POff,y
00AC DD66             (grfdrv_beta5_with):00499                  std   <$66
                      (grfdrv_beta5_with):00500                ENDC
00AE ECA814           (grfdrv_beta5_with):00501                  ldd   Wt.LVec,y    Get LSet vector
00B1 DD68             (grfdrv_beta5_with):00502                  std   <$68         Save it for this window
00B3 EC26             (grfdrv_beta5_with):00503                  ldd   Wt.Fore,y    Get Foreground/Background prn
00B5 DD61             (grfdrv_beta5_with):00504                  std   <$61         Save it for this window
                      (grfdrv_beta5_with):00505                IFNE  H6309
                      (grfdrv_beta5_with):00506                  ldq   Wt.MaxX,y    Get max. X & Y coords from table
                      (grfdrv_beta5_with):00507                  stq   <$6A         Save in Grfdrv mem
                      (grfdrv_beta5_with):00508                ELSE
00B7 ECA81B           (grfdrv_beta5_with):00509                  ldd   Wt.MaxX,y
00BA DD6A             (grfdrv_beta5_with):00510                  std   <$6A
00BC ECA81D           (grfdrv_beta5_with):00511                  ldd   Wt.MaxX+2,y
00BF DD6C             (grfdrv_beta5_with):00512                  std   <$6C
00C1 DDB5             (grfdrv_beta5_with):00513                  std   <$B5
                      (grfdrv_beta5_with):00514                ENDC
00C3 A604             (grfdrv_beta5_with):00515                  lda   St.BRow,x    Get # bytes per row
00C5 9763             (grfdrv_beta5_with):00516                  sta   <$63         Save it for this window
00C7 EC84             (grfdrv_beta5_with):00517                  ldd   St.Sty,x     Get screen type & first block #
00C9 9760             (grfdrv_beta5_with):00518                  sta   <$60         Save screen type for this window
                      (grfdrv_beta5_with):00519         * Setup Task 1 MMU for Window: B=Start block # of window
                      (grfdrv_beta5_with):00520         *   As above, may check start block # to see if our 4 blocks are already
                      (grfdrv_beta5_with):00521         *   mapped in (just check block # in B with block # in 1st DAT entry).
                      (grfdrv_beta5_with):00522         *   Since 4 blocks are always mapped in, we know the rest is OK
                      (grfdrv_beta5_with):00523         * This routine always maps 4 blocks in even if it is only a text window
                      (grfdrv_beta5_with):00524         * which only has to map 1 block. Slight opt (2 cycles) done 03/01/93
                      (grfdrv_beta5_with):00525         * Attempted opt: cmpb/beq noneed 03/12/93
00CB D190             (grfdrv_beta5_with):00526         MMUOnly  cmpb  <$90         Is our screen block set already here?
00CD 271C             (grfdrv_beta5_with):00527                  beq   noneed       Yes, don't bother doing it again
00CF 4F               (grfdrv_beta5_with):00528                  clra               Get block type for DAT image
00D0 DD8F             (grfdrv_beta5_with):00529                  std   <$8f         Save screen start in my image
00D2 F7FFAC           (grfdrv_beta5_with):00530                  stb   >$FFAC       Save 1st screen block to MMU
                      (grfdrv_beta5_with):00531         * 30/08/2016 BN removed for NanoMate double height
                      (grfdrv_beta5_with):00532                 IFEQ    MATCHBOX
00D5 0D60             (grfdrv_beta5_with):00533                  tst   <$60         Hardware text (only 1 block needed?)
00D7 2B12             (grfdrv_beta5_with):00534                  bmi   noneed       yes, no need to map in the rest of the blocks
                      (grfdrv_beta5_with):00535                 ENDC
00D9 5C               (grfdrv_beta5_with):00536                  incb               Get 2nd block
00DA DD91             (grfdrv_beta5_with):00537                  std   <$91         Save it in my image
00DC F7FFAD           (grfdrv_beta5_with):00538                  stb   >$FFAD       Save it to MMU
00DF 5C               (grfdrv_beta5_with):00539                  incb               Get 3rd block
00E0 DD93             (grfdrv_beta5_with):00540                  std   <$93         Save it to my image
00E2 F7FFAE           (grfdrv_beta5_with):00541                  stb   >$FFAE       Save it to MMU
00E5 5C               (grfdrv_beta5_with):00542                  incb               Get 4th block
00E6 DD95             (grfdrv_beta5_with):00543                  std   <$95         Save it to my image
00E8 F7FFAF           (grfdrv_beta5_with):00544                  stb   >$FFAF       Save it to MMU
00EB 3586             (grfdrv_beta5_with):00545         noneed   puls  d,pc         Restore D & return
                      (grfdrv_beta5_with):00546         
                      (grfdrv_beta5_with):00547         * Setup the MMU only: called twice from the screen setup routines
                      (grfdrv_beta5_with):00548         * This could be just before MMUOnly, with a 'fcb $8C' just before the PSHS
                      (grfdrv_beta5_with):00549         * to save one more byte, but L0129 is called a lot more often than this is
00ED 3406             (grfdrv_beta5_with):00550         L0173    pshs  d            save our registers
00EF 20DA             (grfdrv_beta5_with):00551                  bra   MMUOnly      go set up the MMU registers, if necessary
                      (grfdrv_beta5_with):00552         
                      (grfdrv_beta5_with):00553         * Entry point for Alpha Put
00F1 109CA9           (grfdrv_beta5_with):00554         L0175    cmpy  <$A9         Same as previous window GRFDRV alpha putted to?
00F4 102715F5         (grfdrv_beta5_with):00555                  lbeq  L150C        Yes, skip map/setup, update cursors
                      (grfdrv_beta5_with):00556         * Normal entry point
00F8 8DA5             (grfdrv_beta5_with):00557         L0177    bsr   L0129        Mark Tbl Ptr bad, map in window,set up GRFDRV vars for it
00FA 7E56ED           (grfdrv_beta5_with):00558         L0179    jmp   >GrfStrt+L150C Update text & gfx cursors if needed
                      (grfdrv_beta5_with):00559         
                      (grfdrv_beta5_with):00560         * DWSet routine
                      (grfdrv_beta5_with):00561         * ATD: Next 9 lines added to support multiple-height screens.
                      (grfdrv_beta5_with):00562         * We MUST have a screen table in order to do St.ScSiz checks (24, 25, 28).
                      (grfdrv_beta5_with):00563         * GrfDrv is a kernel task (not task switched), so we point X to the possible
                      (grfdrv_beta5_with):00564         * screen table
00FD AE30             (grfdrv_beta5_with):00565         L019D    ldx   Wt.STbl,y    get screen table
00FF 2A07             (grfdrv_beta5_with):00566                  bpl   L01A0        $FFFF is a flag saying it's unallocated
0101 17010A           (grfdrv_beta5_with):00567                  lbsr  FScrTbl      find a screen table
0104 2528             (grfdrv_beta5_with):00568                  bcs   L01C5        exit on error
0106 6F08             (grfdrv_beta5_with):00569                  clr   St.ScSiz,x   clear screen size flag: not defined yet
0108 8D27             (grfdrv_beta5_with):00570         L01A0    bsr   L01C8        Check coordinates and size
010A 2522             (grfdrv_beta5_with):00571                  bcs   L01C5        Error, exit
010C 9660             (grfdrv_beta5_with):00572                  lda   <$60         Get screen type requested
010E 81FF             (grfdrv_beta5_with):00573                  cmpa  #$FF         Current screen?
0110 2609             (grfdrv_beta5_with):00574                  bne   L01B0        No, go create a new screen for the window
                      (grfdrv_beta5_with):00575                 IFNE    MATCHBOX
                      (grfdrv_beta5_with):00576                  lbsr  L01FB        Make sure window can be fit on current screen
                      (grfdrv_beta5_with):00577                 ELSE
0112 8D5F             (grfdrv_beta5_with):00578                  bsr   L01FB        Make sure window can be fit on current screen
                      (grfdrv_beta5_with):00579                 ENDC
0114 2518             (grfdrv_beta5_with):00580                  bcs   L01C5        Nope, return with error
0116 1715D4           (grfdrv_beta5_with):00581                  lbsr  L150C        Update Text & Gfx cursors
0119 2005             (grfdrv_beta5_with):00582                  bra   L01B5        Do hardware setup for new window & return to system
                      (grfdrv_beta5_with):00583         
                      (grfdrv_beta5_with):00584         * Make window on new screen : have to change so it sets up defaults & colors
                      (grfdrv_beta5_with):00585         * BEFORE it clears the screen
011B 1700C9           (grfdrv_beta5_with):00586         L01B0    lbsr  L0268        Go set up a new screen table (INCLUDES CLR SCRN)
011E 250E             (grfdrv_beta5_with):00587                  bcs   L01C5        If error, return to system with that error
                      (grfdrv_beta5_with):00588         * All window creates come here
     0120             (grfdrv_beta5_with):00589         L01B5    equ   *
                      (grfdrv_beta5_with):00590                IFNE  H6309
                      (grfdrv_beta5_with):00591                  bsr   L0129        go setup data & MMU for new window
                      (grfdrv_beta5_with):00592                ELSE
0120 17FF7C           (grfdrv_beta5_with):00593                  lbsr  L0129
                      (grfdrv_beta5_with):00594                ENDC
0123 170205           (grfdrv_beta5_with):00595                  lbsr  L0366        setup default values
0126 86FF             (grfdrv_beta5_with):00596                  lda   #$FF         Change back window# link to indicate there is none
0128 A732             (grfdrv_beta5_with):00597                  sta   Wt.BLnk,y
                      (grfdrv_beta5_with):00598         * ATD: same next 3 lines as at L03F4
012A 1713E3           (grfdrv_beta5_with):00599                  lbsr  L1377        Call CLS (CHR$(12)) routine
012D 5F               (grfdrv_beta5_with):00600                  clrb               No errors
012E 7E50A5           (grfdrv_beta5_with):00601         L01C5    jmp   >GrfStrt+SysRet return to system
                      (grfdrv_beta5_with):00602         
                      (grfdrv_beta5_with):00603         * Check screen coordinates
                      (grfdrv_beta5_with):00604         * Entry: X = screen table pointer
0131 9660             (grfdrv_beta5_with):00605         L01C8    lda   <$60         get current window STY marker
0133 81FF             (grfdrv_beta5_with):00606                  cmpa  #$FF         current screen?
0135 2602             (grfdrv_beta5_with):00607                  bne   L01D2        no, go on
0137 A684             (grfdrv_beta5_with):00608                  lda   ,x           Get current screen type (from screen table ptr)
0139 CE4171           (grfdrv_beta5_with):00609         L01D2    ldu   #GrfStrt+L01F9  Point to width table
013C 8401             (grfdrv_beta5_with):00610                  anda  #$01         only keep resolution bit (0=40 column, 1=80)
013E E635             (grfdrv_beta5_with):00611                  ldb   Wt.CPX,y     get current X start
0140 EB37             (grfdrv_beta5_with):00612                  addb  Wt.SZX,y     calculate size
0142 2529             (grfdrv_beta5_with):00613                  bcs   L01F5        added line: exit if 8-bit overflow
0144 E1C6             (grfdrv_beta5_with):00614                  cmpb  a,u          still within range?
0146 2225             (grfdrv_beta5_with):00615                  bhi   L01F5        no, error out
                      (grfdrv_beta5_with):00616         * ATD: These lines added for screen size support
0148 A608             (grfdrv_beta5_with):00617                  lda   St.ScSiz,x   get screen size
014A 2602             (grfdrv_beta5_with):00618                  bne   L01E0        skip ahead if already initialized
                      (grfdrv_beta5_with):00619                 IFNE    MATCHBOX
                      (grfdrv_beta5_with):00620         * 30/08/2016 BN Changed to support NanoMate 60 line mode
                      (grfdrv_beta5_with):00621                  lda   #60          get maximum screen size in A (25 by default)
                      (grfdrv_beta5_with):00622                 ELSE
014C 8619             (grfdrv_beta5_with):00623                  lda   #MaxLines    get maximum screen size in A (25 by default)
                      (grfdrv_beta5_with):00624                 ENDC
014E E636             (grfdrv_beta5_with):00625         L01E0    ldb   Wt.CPY,y     get current Y start
                      (grfdrv_beta5_with):00626                IFNE  H6309
                      (grfdrv_beta5_with):00627                  cmpr  a,b          within maximum?
                      (grfdrv_beta5_with):00628                ELSE
0150 97BF             (grfdrv_beta5_with):00629                  sta   <grScrtch
0152 D1BF             (grfdrv_beta5_with):00630                  cmpb  <grScrtch
                      (grfdrv_beta5_with):00631                ENDC
0154 2217             (grfdrv_beta5_with):00632                  bhi   L01F5        no, error out
0156 EB38             (grfdrv_beta5_with):00633                  addb  Wt.SZY,y     calculate size: Now B = maximum size of the window
0158 2513             (grfdrv_beta5_with):00634                  bcs   L01F5        added line: exit if 8-bit overflow
                      (grfdrv_beta5_with):00635                IFNE  H6309
                      (grfdrv_beta5_with):00636                  cmpr  a,b          still within maximum?
                      (grfdrv_beta5_with):00637                ELSE
015A 97BF             (grfdrv_beta5_with):00638                  sta   <grScrtch
015C D1BF             (grfdrv_beta5_with):00639                  cmpb  <grScrtch
                      (grfdrv_beta5_with):00640                ENDC
015E 220D             (grfdrv_beta5_with):00641                  bhi   L01F5        no, error out
0160 A108             (grfdrv_beta5_with):00642                  cmpa  St.ScSiz,x   do we have the current screen size?
0162 2707             (grfdrv_beta5_with):00643                  beq   L01F3        yes, skip ahead
                      (grfdrv_beta5_with):00644                 IFNE    MATCHBOX
                      (grfdrv_beta5_with):00645         * 30/08/2016 BN Matchbox has 6 screen sizes to check
                      (grfdrv_beta5_with):00646         * start at lowest
                      (grfdrv_beta5_with):00647                  cmpb  #24          do we have a 24-line screen?
                      (grfdrv_beta5_with):00648                  bne   Nano1        no, skip ahead
                      (grfdrv_beta5_with):00649                  lda   #24          24 line screen, if window <= 24 lines
                      (grfdrv_beta5_with):00650                  bra   L01F1
0164                  (grfdrv_beta5_with):00651         Nano1    cmpb  #25          25 line?
                      (grfdrv_beta5_with):00652                  bne   Nano2
                      (grfdrv_beta5_with):00653                  lda   #25          set 25 line screen
                      (grfdrv_beta5_with):00654                  bra   L01F1
0164                  (grfdrv_beta5_with):00655         Nano2    cmpb  #48          48 line?
                      (grfdrv_beta5_with):00656                  bne   Nano3
                      (grfdrv_beta5_with):00657                  lda   #48          48 line screen
                      (grfdrv_beta5_with):00658                  bra   L01F1
0164                  (grfdrv_beta5_with):00659         Nano3    cmpb  #50          50 line?
                      (grfdrv_beta5_with):00660                  bne   Nano4
                      (grfdrv_beta5_with):00661                  lda   #50          48 line screen
                      (grfdrv_beta5_with):00662                  bra   L01F1
0164                  (grfdrv_beta5_with):00663         Nano4    cmpb  #56          56 line?
                      (grfdrv_beta5_with):00664                  bne   Nano5
                      (grfdrv_beta5_with):00665                  lda   #56          56 line screen
                      (grfdrv_beta5_with):00666                  bra   L01F1
0164                  (grfdrv_beta5_with):00667         Nano5    cmpb  #60          60 line?
                      (grfdrv_beta5_with):00668                  bne   Nano6
                      (grfdrv_beta5_with):00669                  lda   #60          60 line screen
                      (grfdrv_beta5_with):00670                  bra   L01F1
0164                  (grfdrv_beta5_with):00671         Nano6    bra   L01F5        error out
                      (grfdrv_beta5_with):00672                 ELSE
0164 C118             (grfdrv_beta5_with):00673                  cmpb  #24          do we have a 24-line screen?
0166 2201             (grfdrv_beta5_with):00674                  bhi   L01F1        no, it's 25: skip ahead
0168 4A               (grfdrv_beta5_with):00675                  deca               25-1=24 line screen, if window <= 24 lines
                      (grfdrv_beta5_with):00676                 ENDC
0169 A708             (grfdrv_beta5_with):00677         L01F1    sta   St.ScSiz,x   save the size of the screen
016B 5F               (grfdrv_beta5_with):00678         L01F3    clrb               clear carry
016C 39               (grfdrv_beta5_with):00679                  rts                return
                      (grfdrv_beta5_with):00680         
016D 53               (grfdrv_beta5_with):00681         L01F5    comb               Set carry
016E C6BD             (grfdrv_beta5_with):00682                  ldb   #E$ICoord    Get error code for Illegal co-ordinate
0170 39               (grfdrv_beta5_with):00683                  rts                Return
                      (grfdrv_beta5_with):00684         
                      (grfdrv_beta5_with):00685         * Maximum widths of text & graphic windows table
0171 2850             (grfdrv_beta5_with):00686         L01F9    fcb   40,80
                      (grfdrv_beta5_with):00687         
                      (grfdrv_beta5_with):00688         * Check if Current screen DWSET request can be honored (carry set & b=error
                      (grfdrv_beta5_with):00689         *   # if we can't)
                      (grfdrv_beta5_with):00690         * Entry: Y=Ptr to our (new window) window table
                      (grfdrv_beta5_with):00691         * NOTE: It has to check all active windows. If it it fits without overlap
                      (grfdrv_beta5_with):00692         *         on all of them, then it will obviously fit with several on the same
                      (grfdrv_beta5_with):00693         *         screen.
0173 8E1290           (grfdrv_beta5_with):00694         L01FB    ldx   #WinBase     Point to start of window tables
                      (grfdrv_beta5_with):00695                IFNE  H6309
                      (grfdrv_beta5_with):00696                  lde   #MaxWind     Get maximum number of windows (32)
                      (grfdrv_beta5_with):00697                ELSE
0176 97BF             (grfdrv_beta5_with):00698                  sta   <grScrtch
0178 8620             (grfdrv_beta5_with):00699                  lda   #MaxWind
017A 97B5             (grfdrv_beta5_with):00700                  sta   <$B5
017C 96BF             (grfdrv_beta5_with):00701                  lda   <grScrtch
                      (grfdrv_beta5_with):00702                ENDC
     017E             (grfdrv_beta5_with):00703         L0206    equ   *
                      (grfdrv_beta5_with):00704                IFNE  H6309 
                      (grfdrv_beta5_with):00705                  cmpr  y,x          Is this our own window table entry?
                      (grfdrv_beta5_with):00706                ELSE
017E 109FBF           (grfdrv_beta5_with):00707                  sty   <grScrtch    Save current window table ptr
0181 9CBF             (grfdrv_beta5_with):00708                  cmpx  <grScrtch    Same as one we are currently checking?
                      (grfdrv_beta5_with):00709                ENDC
0183 2711             (grfdrv_beta5_with):00710                  beq   L021B        Yes, skip it (obviously)
0185 EC10             (grfdrv_beta5_with):00711                  ldd   Wt.STbl,x    Get screen table pointer of search window
0187 2B0D             (grfdrv_beta5_with):00712                  bmi   L021B        High bit set means not active, skip to next
0189 10A330           (grfdrv_beta5_with):00713                  cmpd  Wt.STbl,y    Same screen as ours?
018C 2608             (grfdrv_beta5_with):00714                  bne   L021B        No, skip to next
018E A612             (grfdrv_beta5_with):00715                  lda   Wt.BLnk,x    Is this entry for an overlay window?
0190 2A04             (grfdrv_beta5_with):00716                  bpl   L021B        Yes, useless to us
0192 8D0B             (grfdrv_beta5_with):00717                  bsr   L0224        Go make sure we will fit
0194 2508             (grfdrv_beta5_with):00718                  bcs   L0223        Nope, return with error
0196 C640             (grfdrv_beta5_with):00719         L021B    ldb   #Wt.Siz      Move to next entry (originally leax $40,x, but
0198 3A               (grfdrv_beta5_with):00720                  abx                believe it or not, this is faster in native)
                      (grfdrv_beta5_with):00721                IFNE  H6309
                      (grfdrv_beta5_with):00722                  dece               Done?
                      (grfdrv_beta5_with):00723                ELSE
0199 0AB5             (grfdrv_beta5_with):00724                  dec   <$B5
                      (grfdrv_beta5_with):00725                ENDC
019B 26E1             (grfdrv_beta5_with):00726                  bne   L0206        No, go back
019D 5F               (grfdrv_beta5_with):00727                  clrb               Clear errors
019E 39               (grfdrv_beta5_with):00728         L0223    rts                Return
                      (grfdrv_beta5_with):00729         
                      (grfdrv_beta5_with):00730         * Routine to make sure a 'current screen' DWSet window will fit with other
                      (grfdrv_beta5_with):00731         *   windows already on that screen
                      (grfdrv_beta5_with):00732         * Entry: X=Ptr to window table entry that is on same screen as us
                      (grfdrv_beta5_with):00733         *        Y=Ptr to our window table entry
                      (grfdrv_beta5_with):00734         * Exit: Carry clear if it will fit
                      (grfdrv_beta5_with):00735         
     019F             (grfdrv_beta5_with):00736         L0224    equ   *
                      (grfdrv_beta5_with):00737                IFNE  H6309
                      (grfdrv_beta5_with):00738                  tim   #Protect,Wt.BSW,x Is this window protected?
                      (grfdrv_beta5_with):00739                ELSE
019F 3404             (grfdrv_beta5_with):00740                  pshs  b 
01A1 E609             (grfdrv_beta5_with):00741                  ldb   Wt.BSW,x     Is this window protected?
01A3 C501             (grfdrv_beta5_with):00742                  bitb  #Protect
01A5 3504             (grfdrv_beta5_with):00743                  puls  b
                      (grfdrv_beta5_with):00744                ENDC
01A7 2738             (grfdrv_beta5_with):00745                  beq   L0262        No, window can overlap/write wherever it wants
01A9 A635             (grfdrv_beta5_with):00746                  lda   Wt.CPX,y     get our new window's requested Left border
01AB A18826           (grfdrv_beta5_with):00747                  cmpa  Wt.DfCPX,x   Does it start on or past existing windows left border?
01AE 2C09             (grfdrv_beta5_with):00748                  bge   L023A        Yes, could still work - check width
01B0 AB37             (grfdrv_beta5_with):00749                  adda  Wt.SZX,y     add in our requested width
01B2 A18826           (grfdrv_beta5_with):00750                  cmpa  Wt.DfCPX,x   Does our right border go past existing's left border?
01B5 2E0E             (grfdrv_beta5_with):00751                  bgt   L0246        Yes, could still work if Y is somewhere empty(?)
01B7 5F               (grfdrv_beta5_with):00752                  clrb               No X coord conflict at all...will be fine
01B8 39               (grfdrv_beta5_with):00753                  rts
                      (grfdrv_beta5_with):00754         
                      (grfdrv_beta5_with):00755         * Comes here only if our window will start past left side of existing window
01B9 E68826           (grfdrv_beta5_with):00756         L023A    ldb   Wt.DfCPX,x   Get existing windows left border value
01BC EB8828           (grfdrv_beta5_with):00757                  addb  Wt.DfSZX,x   Calculate existing window's right border
                      (grfdrv_beta5_with):00758                IFNE  H6309
                      (grfdrv_beta5_with):00759                  cmpr  b,a          Our X start greater than existing windows right border?
                      (grfdrv_beta5_with):00760                ELSE
01BF D7BF             (grfdrv_beta5_with):00761                  stb   <grScrtch
01C1 91BF             (grfdrv_beta5_with):00762                  cmpa  <grScrtch
                      (grfdrv_beta5_with):00763                ENDC
01C3 2C1C             (grfdrv_beta5_with):00764                  bge   L0262        Yes, legal coordinate
                      (grfdrv_beta5_with):00765         * X is fine, start checking Y
01C5 A636             (grfdrv_beta5_with):00766         L0246    lda   Wt.CPY,y     Get our new window's requested top border value
01C7 A18827           (grfdrv_beta5_with):00767                  cmpa  Wt.DfCPY,x   Compare with existing window's top border
01CA 2C09             (grfdrv_beta5_with):00768         L024B    bge   L0256        If we are lower on screen, jump ahead
01CC AB38             (grfdrv_beta5_with):00769                  adda  Wt.SZY,y     Calculate our bottom border
01CE A18827           (grfdrv_beta5_with):00770                  cmpa  Wt.DfCPY,x   Is it past the top border of existing window?
01D1 2E10             (grfdrv_beta5_with):00771                  bgt   L0264        Yes, illegal coordinate
01D3 5F               (grfdrv_beta5_with):00772                  clrb               Yes, window will fit legally, return with no error
01D4 39               (grfdrv_beta5_with):00773                  rts
                      (grfdrv_beta5_with):00774         
                      (grfdrv_beta5_with):00775         * Comes here only if our window will start below top of existing window
01D5 E68827           (grfdrv_beta5_with):00776         L0256    ldb   Wt.DfCPY,x   Get existing window's top border value
01D8 EB8829           (grfdrv_beta5_with):00777                  addb  Wt.DfSZY,x   Calculate existing window's bottom border
                      (grfdrv_beta5_with):00778                IFNE  H6309
                      (grfdrv_beta5_with):00779                  cmpr  b,a          Our Y start less than bottom of existing?
                      (grfdrv_beta5_with):00780                ELSE
01DB D7BF             (grfdrv_beta5_with):00781                  stb   <grScrtch
01DD 91BF             (grfdrv_beta5_with):00782                  cmpa  <grScrtch
                      (grfdrv_beta5_with):00783                ENDC
01DF 2D02             (grfdrv_beta5_with):00784                  blt   L0264        Yes, would overlap, return error
01E1 5F               (grfdrv_beta5_with):00785         L0262    clrb               Yes, window will fit legally, return with no error
01E2 39               (grfdrv_beta5_with):00786                  rts
                      (grfdrv_beta5_with):00787         
01E3 53               (grfdrv_beta5_with):00788         L0264    comb               Window won't fit with existing windows
01E4 C6C3             (grfdrv_beta5_with):00789                  ldb   #E$IWDef
01E6 39               (grfdrv_beta5_with):00790         L0286    rts   
                      (grfdrv_beta5_with):00791         
                      (grfdrv_beta5_with):00792         * Setup a new screen table
                      (grfdrv_beta5_with):00793         *L0268    bsr   FScrTbl      search for a screen table
                      (grfdrv_beta5_with):00794         *         bcs   L0286        not available, return
                      (grfdrv_beta5_with):00795         * X=Screen tbl ptr, Y=Window tbl ptr
01E7 AF30             (grfdrv_beta5_with):00796         L0268    stx   Wt.STbl,y    save the pointer in window table
01E9 D660             (grfdrv_beta5_with):00797                  ldb   <$60         get screen type
01EB E784             (grfdrv_beta5_with):00798                  stb   St.Sty,x     save it to screen table
01ED 8D35             (grfdrv_beta5_with):00799                  bsr   L029B        go setup screen table (Block & addr #'s)
01EF 25F5             (grfdrv_beta5_with):00800                  bcs   L0286        couldn't do it, return
01F1 D65A             (grfdrv_beta5_with):00801                  ldb   <$5A         get border color
01F3 E705             (grfdrv_beta5_with):00802                  stb   St.Brdr,x    save it in screen table
                      (grfdrv_beta5_with):00803         * This line added
01F5 E627             (grfdrv_beta5_with):00804                  ldb   Wt.Back,y    Get background color from window table
01F7 1704DD           (grfdrv_beta5_with):00805                  lbsr  L0791        get color mask for bckgrnd color (into B)
01FA 1700FC           (grfdrv_beta5_with):00806                  lbsr  L0335        clear the screen (with bckgrnd color)
                      (grfdrv_beta5_with):00807                IFNE  H6309
                      (grfdrv_beta5_with):00808                  leax  St.Pals,x    Point to palette regs in screen table
                      (grfdrv_beta5_with):00809                  ldd   >WGlobal+G.DefPal   Get system default palette pointer
                      (grfdrv_beta5_with):00810                  ldw   #16          16 palettes to copy
                      (grfdrv_beta5_with):00811                  tfm   d+,x+        Copy into screen table
                      (grfdrv_beta5_with):00812                  clrb               No error & return
                      (grfdrv_beta5_with):00813                  rts                Get back scrn tbl ptr & return
                      (grfdrv_beta5_with):00814                ELSE
01FD 3470             (grfdrv_beta5_with):00815                  pshs  x,y,u        Save regs (D doesn't need preserved)
01FF CC0010           (grfdrv_beta5_with):00816                  ldd   #16          16 palettes to copy
0202 FE1019           (grfdrv_beta5_with):00817                  ldu   >WGlobal+G.DefPal   Get system default palette pointer
0205 318810           (grfdrv_beta5_with):00818                  leay  St.Pals,x    Point to destination of copy
0208 1708DC           (grfdrv_beta5_with):00819                  lbsr  StkBlCpy     Copy all 16 palettes over
020B 5F               (grfdrv_beta5_with):00820                  clrb               No error
020C 35F0             (grfdrv_beta5_with):00821                  puls  x,y,u,pc     Restore regs & return (don't think I need to update X?)
                      (grfdrv_beta5_with):00822                ENDC
                      (grfdrv_beta5_with):00823         
                      (grfdrv_beta5_with):00824         * Search for a empty screen table
020E 8E1A81           (grfdrv_beta5_with):00825         FScrTbl  ldx   #STblBse+1   Point to screen tables+1
0211 CC1020           (grfdrv_beta5_with):00826                  ldd   #16*256+St.Siz get # table entrys & entry size
0214 6D84             (grfdrv_beta5_with):00827         L028D    tst   ,x           already allocated a block?
0216 2604             (grfdrv_beta5_with):00828                  bne   Yes          Yes, go to next one
0218 301F             (grfdrv_beta5_with):00829                  leax  -1,x         Bump pointer back by $980 based
021A 5F               (grfdrv_beta5_with):00830                  clrb               No error & return
021B 39               (grfdrv_beta5_with):00831                  rts
                      (grfdrv_beta5_with):00832         
021C 3A               (grfdrv_beta5_with):00833         Yes      abx                move to next one
021D 4A               (grfdrv_beta5_with):00834                  deca               done?
021E 26F4             (grfdrv_beta5_with):00835                  bne   L028D        no, keep looking
0220 53               (grfdrv_beta5_with):00836                  comb               set carry for error
0221 C6C1             (grfdrv_beta5_with):00837                  ldb   #E$TblFul    get error code
0223 39               (grfdrv_beta5_with):00838                  rts                return
                      (grfdrv_beta5_with):00839         
                      (grfdrv_beta5_with):00840         * Setup screen table
                      (grfdrv_beta5_with):00841         * Entry: Y=Window table ptr
                      (grfdrv_beta5_with):00842         *        B=screen type (flags still set based on it too)
0224 3420             (grfdrv_beta5_with):00843         L029B    pshs  y            preserve window table pointer
0226 2A1B             (grfdrv_beta5_with):00844                  bpl   L02BB        Screen type not text, go on
0228 108E1A80         (grfdrv_beta5_with):00845                  ldy   #STblBse     Point to screen tables
022C 8610             (grfdrv_beta5_with):00846                  lda   #$10         get # screen tables
                      (grfdrv_beta5_with):00847         * Search screen tables
022E E6A4             (grfdrv_beta5_with):00848         L02A7    ldb   St.Sty,y     is it text?
0230 2A09             (grfdrv_beta5_with):00849                  bpl   L02B3        no, go to next one
0232 E621             (grfdrv_beta5_with):00850                  ldb   St.SBlk,y    get memory block #
0234 2705             (grfdrv_beta5_with):00851                  beq   L02B3        don't exist, go to next one
0236 170091           (grfdrv_beta5_with):00852                  lbsr   L0306       search window block for a spot
0239 244B             (grfdrv_beta5_with):00853                  bcc   L02DE        found one, go initialize it
023B 31A820           (grfdrv_beta5_with):00854         L02B3    leay  St.Siz,y     move to next screen table
023E 4A               (grfdrv_beta5_with):00855                  deca               done?
023F 26ED             (grfdrv_beta5_with):00856                  bne   L02A7        no, keep going
                      (grfdrv_beta5_with):00857         * No screen available, get a new screen block
                      (grfdrv_beta5_with):00858         * NOTE: Should be able to change L02F1 loop to use W/CMPE to slightly
                      (grfdrv_beta5_with):00859         *       speed up/shrink
0241 D660             (grfdrv_beta5_with):00860                  ldb   <$60         get STY marker
0243 86FF             (grfdrv_beta5_with):00861         L02BB    lda   #$FF         preset counter
0245 97B3             (grfdrv_beta5_with):00862                  sta   <$B3         unused grfdrv space
0247 108E42BD         (grfdrv_beta5_with):00863                  ldy   #GrfStrt+L02FA-1   Point to RAM block table 
024B C40F             (grfdrv_beta5_with):00864                  andb  #$F          make it fit table
024D E6A5             (grfdrv_beta5_with):00865                  ldb   b,y          get # blocks needed
024F D7B4             (grfdrv_beta5_with):00866                  stb   <$B4         save number of blocks, unused space
0251 0CB3             (grfdrv_beta5_with):00867         OVLAP    inc   <$B3         update counter, unused space
0253 D6B4             (grfdrv_beta5_with):00868                  ldb   <$B4         get number of blocks needed
0255 103F53           (grfdrv_beta5_with):00869                  os9   F$AlHRAM     AlHRAM Allocate memory
0258 253E             (grfdrv_beta5_with):00870                  bcs   L02EF        no memory, return error
025A 3404             (grfdrv_beta5_with):00871                  pshs  b            save starting block #
025C C43F             (grfdrv_beta5_with):00872                  andb  #$3F         modulo 512K
025E 3404             (grfdrv_beta5_with):00873                  pshs  b            save modulo starting block
0260 D6B4             (grfdrv_beta5_with):00874                  ldb   <$B4         regB now # blocks requested
0262 5A               (grfdrv_beta5_with):00875                  decb               set to base 0
0263 EBE4             (grfdrv_beta5_with):00876                  addb  ,s
0265 C43F             (grfdrv_beta5_with):00877                  andb  #$3F         final block # modulo 512K
0267 E1E0             (grfdrv_beta5_with):00878                  cmpb  ,s+          compare with first block
0269 25E6             (grfdrv_beta5_with):00879                  blo   OVLAP        overlapped 512K boundary so ask for more RAM
026B 8D2D             (grfdrv_beta5_with):00880                  bsr   DeMost 
026D 3504             (grfdrv_beta5_with):00881                  puls  b            get starting block #
026F 96B3             (grfdrv_beta5_with):00882                  lda   <$B3
0271 32E6             (grfdrv_beta5_with):00883                  leas  a,s          yank temps
0273 108E8000         (grfdrv_beta5_with):00884                  ldy   #$8000       get default screen start
0277 3424             (grfdrv_beta5_with):00885                  pshs  b,y          save that & start block #
0279 17FE71           (grfdrv_beta5_with):00886                  lbsr  L0173        setup MMU with screen
                      (grfdrv_beta5_with):00887         * Mark first byte of every possible screen in block with $FF
027C C6FF             (grfdrv_beta5_with):00888                  ldb   #$FF
027E E7A4             (grfdrv_beta5_with):00889         L02D6    stb   ,y           save marker
0280 8D33             (grfdrv_beta5_with):00890                  bsr   L02F1        move to next one
0282 25FA             (grfdrv_beta5_with):00891                  blo   L02D6        not done, keep going
0284 3524             (grfdrv_beta5_with):00892                  puls  b,y          restore block # & start address
                      (grfdrv_beta5_with):00893         * Initialize rest of screen table
0286 E701             (grfdrv_beta5_with):00894         L02DE    stb   St.SBlk,x    save block # to table
0288 10AF02           (grfdrv_beta5_with):00895                  sty   St.LStrt,x   save logical screen start
028B 9660             (grfdrv_beta5_with):00896                  lda   <$0060       get screen type
028D 840F             (grfdrv_beta5_with):00897                  anda  #$F          make it fit table
028F 108E42C3         (grfdrv_beta5_with):00898                  ldy   #GrfStrt+L0300-1  Point to width table
0293 A6A6             (grfdrv_beta5_with):00899                  lda   a,y          get width
0295 A704             (grfdrv_beta5_with):00900                  sta   St.BRow,x    save it to screen table
0297 5F               (grfdrv_beta5_with):00901                  clrb               clear errors
0298 35A0             (grfdrv_beta5_with):00902         L02EF    puls  y,pc         return
                      (grfdrv_beta5_with):00903         
                      (grfdrv_beta5_with):00904         * Get rid of allocated blocks that overflowed 512K bank; RG.
029A 0DB3             (grfdrv_beta5_with):00905         DeMost   tst   <$B3         if none then return
029C 2716             (grfdrv_beta5_with):00906                  beq   DA020
029E 96B3             (grfdrv_beta5_with):00907                  lda   <$B3
02A0 3412             (grfdrv_beta5_with):00908                  pshs  a,x
02A2 3166             (grfdrv_beta5_with):00909                  leay  6,s          a,x,rts,b; point to first bad group
02A4 4F               (grfdrv_beta5_with):00910         DA010    clra
02A5 E6A0             (grfdrv_beta5_with):00911                  ldb   ,y+          get starting block number
02A7 1F01             (grfdrv_beta5_with):00912                  tfr   d,x
02A9 D6B4             (grfdrv_beta5_with):00913                  ldb   <$B4         number of blocks
02AB 103F51           (grfdrv_beta5_with):00914                  os9   F$DelRAM        de-allocate the blocks *** IGNORING ERRORS ***
02AE 6AE4             (grfdrv_beta5_with):00915                  dec   ,s           decrease count
02B0 26F2             (grfdrv_beta5_with):00916                  bne   DA010
02B2 3512             (grfdrv_beta5_with):00917                  puls  a,x
02B4 39               (grfdrv_beta5_with):00918         DA020    rts
                      (grfdrv_beta5_with):00919         
                      (grfdrv_beta5_with):00920         * Move to next text screen in memory block
02B5 31A90800         (grfdrv_beta5_with):00921         L02F1    leay  >$0800,y     move Y to next text screen start
02B9 108CA000         (grfdrv_beta5_with):00922                  cmpy  #$A000       set flags for completion check
02BD 39               (grfdrv_beta5_with):00923         L02F9    rts                return
                      (grfdrv_beta5_with):00924         
                      (grfdrv_beta5_with):00925         * Memory block requirement table (# of 8K banks)
02BE 02               (grfdrv_beta5_with):00926         L02FA    fcb   2            640 2 color
02BF 02               (grfdrv_beta5_with):00927                  fcb   2            320 4 color
02C0 04               (grfdrv_beta5_with):00928                  fcb   4            640 4 color
02C1 04               (grfdrv_beta5_with):00929                  fcb   4            320 16 color
                      (grfdrv_beta5_with):00930                 IFNE    MATCHBOX
                      (grfdrv_beta5_with):00931         * 30/08/2016 BN Changed to 2 blocks for Matchbox double height
                      (grfdrv_beta5_with):00932                  fcb   2            80 column text
                      (grfdrv_beta5_with):00933                  fcb   2            40 column text
                      (grfdrv_beta5_with):00934                 ELSE
02C2 01               (grfdrv_beta5_with):00935                  fcb   1            80 column text
02C3 01               (grfdrv_beta5_with):00936                  fcb   1            40 column text
                      (grfdrv_beta5_with):00937                 ENDC
                      (grfdrv_beta5_with):00938         
                      (grfdrv_beta5_with):00939         * Screen width in bytes table (# bytes/line)
02C4 50               (grfdrv_beta5_with):00940         L0300    fcb   80           640 2 color
02C5 50               (grfdrv_beta5_with):00941                  fcb   80           320 4 color
02C6 A0               (grfdrv_beta5_with):00942                  fcb   160          640 4 color
02C7 A0               (grfdrv_beta5_with):00943                  fcb   160          320 16 color
02C8 A0               (grfdrv_beta5_with):00944                  fcb   160          80 column
02C9 50               (grfdrv_beta5_with):00945                  fcb   80           40 column text
                      (grfdrv_beta5_with):00946         
                      (grfdrv_beta5_with):00947         * Look for a empty window in a text screen memory block
02CA 3436             (grfdrv_beta5_with):00948         L0306    pshs  d,x,y        Preserve regs
02CC 17FE1E           (grfdrv_beta5_with):00949                  lbsr  L0173        go map in the screen
02CF 108E8000         (grfdrv_beta5_with):00950                  ldy   #$8000       get screen start address
02D3 C6FF             (grfdrv_beta5_with):00951                  ldb   #$FF         get used marker flag
02D5 E1A4             (grfdrv_beta5_with):00952         L0311    cmpb  ,y           used?
02D7 2707             (grfdrv_beta5_with):00953                  beq   L031C        no, go see if it will fit
02D9 8DDA             (grfdrv_beta5_with):00954         L0315    bsr   L02F1        move to next screen
02DB 25F8             (grfdrv_beta5_with):00955                  bcs   L0311        keep looking if not outside of block
02DD 53               (grfdrv_beta5_with):00956         L0319    comb               set carry
02DE 35B6             (grfdrv_beta5_with):00957                  puls  d,x,y,pc     return
                      (grfdrv_beta5_with):00958         
02E0 9660             (grfdrv_beta5_with):00959         L031C    lda   <$0060       get screen type
02E2 8186             (grfdrv_beta5_with):00960                  cmpa  #$86         80 column text?
02E4 270D             (grfdrv_beta5_with):00961                  beq   L032F        yes, return
02E6 30A90800         (grfdrv_beta5_with):00962                  leax  $0800,y      move to next screen to check if it will fit
02EA 8CA000           (grfdrv_beta5_with):00963                  cmpx  #$A000       will it fit in block?
02ED 24EE             (grfdrv_beta5_with):00964                  bhs   L0319        no, return error
02EF E184             (grfdrv_beta5_with):00965                  cmpb  ,x           is it already used?
02F1 26E6             (grfdrv_beta5_with):00966                  bne   L0315        yes, return error
02F3 5F               (grfdrv_beta5_with):00967         L032F    clrb               clear error status
02F4 3516             (grfdrv_beta5_with):00968                  puls  d,x
02F6 3262             (grfdrv_beta5_with):00969                  leas  2,s          dump screen table pointer to keep screen address
02F8 39               (grfdrv_beta5_with):00970                  rts                return
                      (grfdrv_beta5_with):00971         
                      (grfdrv_beta5_with):00972         * Clear screen (not window, but whole screen)
                      (grfdrv_beta5_with):00973         * Entry: B=Background color mask byte (from $6,x in window table)
                      (grfdrv_beta5_with):00974         *        X=Ptr to screen table
                      (grfdrv_beta5_with):00975         * Currently comes in with foreground color though.
                      (grfdrv_beta5_with):00976         * ATD: only called once, from just above...
                      (grfdrv_beta5_with):00977         **** BEGINNING OF NEW CODE TO TEST (OR CRASH) ****
02F9 3470             (grfdrv_beta5_with):00978         L0335    pshs  x,y,u        save regs
02FB 8620             (grfdrv_beta5_with):00979                  lda   #C$SPAC      get a space code
02FD DD97             (grfdrv_beta5_with):00980                  std   <$0097       init screen clear value to color/attribute
02FF E684             (grfdrv_beta5_with):00981                  ldb   St.Sty,x     Get screen type
0301 EE02             (grfdrv_beta5_with):00982                  ldu   St.LStrt,x   get screen start address
0303 C40F             (grfdrv_beta5_with):00983                  andb  #%00001111   Strip high nibble (gfx vs. txt)
0305 58               (grfdrv_beta5_with):00984                  lslb               adjust for 2 bytes entry
0306 8E4314           (grfdrv_beta5_with):00985                  ldx   #GrfStrt+L035A-2  Point to screen length table
0309 C108             (grfdrv_beta5_with):00986                  cmpb  #8           text mode (types 5 and up)?
030B 2315             (grfdrv_beta5_with):00987                  bls   ClrGfx       No, do graphics clear
030D AE85             (grfdrv_beta5_with):00988                  ldx   b,x          Get size to lear
030F DC97             (grfdrv_beta5_with):00989                  ldd   <$97         Get char/attribute byte pair to clear with
0311 17127A           (grfdrv_beta5_with):00990                  lbsr  StkBlCl2     Clear screen (Mini stack blast - almost same speed either CPU)
0314 35F0             (grfdrv_beta5_with):00991                  puls  x,y,u,pc     Restore regs & return
                      (grfdrv_beta5_with):00992         
                      (grfdrv_beta5_with):00993         * Screen length table - once we get mini-stackblast, 6809 version for sure (and hardware text
                      (grfdrv_beta5_with):00994         * for both) should be in 4 byte counts, or 1K blocks & leftover 4 byte blocks.
0316 3E80             (grfdrv_beta5_with):00995         L035A    fdb   80*MaxLines*8    640 2 color   (gfx are 1 byte counts)
0318 3E80             (grfdrv_beta5_with):00996                  fdb   80*MaxLines*8    320 4 color
031A 7D00             (grfdrv_beta5_with):00997                  fdb   160*MaxLines*8   640 4 color
031C 7D00             (grfdrv_beta5_with):00998                  fdb   160*MaxLines*8   320 16 color
031E 0FA0             (grfdrv_beta5_with):00999                  fdb   160*MaxLines     80 column text  (2 bytes/char because of attribute byte)
0320 07D0             (grfdrv_beta5_with):01000                  fdb   80*MaxLines      40 column text  (2 bytes/char because of attribute byte)
                      (grfdrv_beta5_with):01001         
                      (grfdrv_beta5_with):01002         * Clear a graphics screen. On 32,000 byte screen, TFM is <150 cycles faster than pshu, but
                      (grfdrv_beta5_with):01003         * takes less room to set up.
                      (grfdrv_beta5_with):01004         * Entry: X=ptr to screen table
                      (grfdrv_beta5_with):01005         *        B=offset into table for size of current screen type (in bytes)
                      (grfdrv_beta5_with):01006         *        U=ptr to screen start
                      (grfdrv_beta5_with):01007         *        <$98 = byte value to clear screen with
0322                  (grfdrv_beta5_with):01008         ClrGfx   
                      (grfdrv_beta5_with):01009                IFNE  H6309
                      (grfdrv_beta5_with):01010                  ldw   b,x          (7) Get size of gfx screen to clear
                      (grfdrv_beta5_with):01011         * was $1098
                      (grfdrv_beta5_with):01012                  ldx   #GrfMem+gr0098 (3) Point to clear code char
                      (grfdrv_beta5_with):01013                  tfm   x,u+         (96006 worst case) Clear screen
                      (grfdrv_beta5_with):01014                  puls  u,x,y,pc     Restore regs & return
                      (grfdrv_beta5_with):01015                ELSE
0322 AE85             (grfdrv_beta5_with):01016                  ldx   b,x          (6) Get size of screen to clear (in bytes)
0324 D698             (grfdrv_beta5_with):01017                  ldb   <gr0098      (3) Get value to clear with
0326 171263           (grfdrv_beta5_with):01018                  lbsr  StkBlClr     (7) Do mini stack blast clear (4 byte multiple ONLY version)
0329 35F0             (grfdrv_beta5_with):01019                  puls  x,y,u,pc     Restore regs & return
                      (grfdrv_beta5_with):01020                ENDC
                      (grfdrv_beta5_with):01021         
                      (grfdrv_beta5_with):01022         **** END OF NEW TEST CODE ****
                      (grfdrv_beta5_with):01023         
                      (grfdrv_beta5_with):01024         * Part of window init routine
                      (grfdrv_beta5_with):01025         * Entry: Y=Window table ptr
                      (grfdrv_beta5_with):01026         *        X=Screen table ptr
032B CC8900           (grfdrv_beta5_with):01027         L0366    ldd   #(TChr!Scale!Protect)*256 Transparency off & protect/Scale on
032E E7A818           (grfdrv_beta5_with):01028                  stb   Wt.GBlk,y    Graphics cursor memory block #0
0331 ED29             (grfdrv_beta5_with):01029                  std   Wt.BSW,y     Character switch defaults & LSet type set to 0
0333 E72E             (grfdrv_beta5_with):01030                  stb   Wt.PBlk,y    PSet block #0
                      (grfdrv_beta5_with):01031                IFNE  H6309
                      (grfdrv_beta5_with):01032         * Assembler can't do $10000x#
                      (grfdrv_beta5_with):01033         *         ldq   #(GrfStrt+L1FA9)*65536+(GrfStrt+L1F9E) Normal LSET/PSET vector
                      (grfdrv_beta5_with):01034                  fcb   $cd
                      (grfdrv_beta5_with):01035                  fdb   GrfStrt+L1FA9,GrfStrt+L1F9E
                      (grfdrv_beta5_with):01036                  stq   Wt.LVec,y    Save vectors
                      (grfdrv_beta5_with):01037                ELSE
0335 CC6282           (grfdrv_beta5_with):01038                  ldd   #GrfStrt+L1F9E  Normal PSet vector
0338 EDA816           (grfdrv_beta5_with):01039                  std   Wt.PVec,y
033B CC583D           (grfdrv_beta5_with):01040                  ldd   #GrfStrt+L1FA9  Normal LSet vector
033E EDA814           (grfdrv_beta5_with):01041                  std   Wt.LVec,y
                      (grfdrv_beta5_with):01042                ENDC
0341 E626             (grfdrv_beta5_with):01043                  ldb   Wt.Fore,y    Get foreground palette #
0343 170361           (grfdrv_beta5_with):01044                  lbsr  L074C        Get bit mask for this color
0346 E726             (grfdrv_beta5_with):01045                  stb   Wt.Fore,y    Store new foreground bit mask
0348 D761             (grfdrv_beta5_with):01046                  stb   <$0061       Store new foreground bit mask in GRFDRV's global
034A E627             (grfdrv_beta5_with):01047                  ldb   Wt.Back,y    Get background palette #
034C 170358           (grfdrv_beta5_with):01048                  lbsr  L074C        Get bit mask for this color
034F E727             (grfdrv_beta5_with):01049                  stb   Wt.Back,y    Store new background bit mask
0351 D762             (grfdrv_beta5_with):01050                  stb   <$0062       Store bckground bit mask in GRFDRV's global mem
0353 170388           (grfdrv_beta5_with):01051                  lbsr  L079B        Set default attributes to new colors
0356 EC02             (grfdrv_beta5_with):01052                  ldd   St.LStrt,x   Get screen logical start
0358 8D0C             (grfdrv_beta5_with):01053                  bsr   L03A9        Go copy scrn address/X&Y start to defaults area
035A 6F2B             (grfdrv_beta5_with):01054                  clr   Wt.FBlk,y    Font memory block to 0 (no font yet)
                      (grfdrv_beta5_with):01055         * get group & buffer for font
035C CCC801           (grfdrv_beta5_with):01056                  ldd   #Grp.Fnt*256+Fnt.S8x8 ($C801)  Default group/buffer number for font
035F DD57             (grfdrv_beta5_with):01057                  std   <$0057
0361 1702A3           (grfdrv_beta5_with):01058                  lbsr  L0643        Go set up for font
0364 5F               (grfdrv_beta5_with):01059                  clrb               No error and return
0365 39               (grfdrv_beta5_with):01060                  rts   
                      (grfdrv_beta5_with):01061         
                      (grfdrv_beta5_with):01062         * Move screen start address, X & Y coordinate starts of screen to 'default'
                      (grfdrv_beta5_with):01063         *   areas.  The first set is for what the window is currently at (CWArea
                      (grfdrv_beta5_with):01064         *   changes, for example), and the second set is the maximums of the window
                      (grfdrv_beta5_with):01065         *   when it was initialized, and thusly the maximums that can be used until
                      (grfdrv_beta5_with):01066         *   it is DWEnd'ed and DWSet'ed again.
                      (grfdrv_beta5_with):01067         * Entry :x= Screen table ptr
                      (grfdrv_beta5_with):01068         *        y= Window table ptr
                      (grfdrv_beta5_with):01069         *        d= Screen logical start address
0366 1701D3           (grfdrv_beta5_with):01070         L03A9    lbsr  L0581        Go set up window/character sizes
                      (grfdrv_beta5_with):01071                IFNE  H6309
                      (grfdrv_beta5_with):01072                  ldq   Wt.LStrt,y   Get screen start addr. & X/Y coord start
                      (grfdrv_beta5_with):01073                  stq   Wt.LStDf,y   Save as 'window init' values (defaults for window initialized)
                      (grfdrv_beta5_with):01074                ELSE
0369 EC33             (grfdrv_beta5_with):01075                  ldd   Wt.LStrt,y   Get screen start addr
036B EDA824           (grfdrv_beta5_with):01076                  std   Wt.LStDf,y   Save as window default screen start address
036E EC35             (grfdrv_beta5_with):01077                  ldd   Wt.CPX,y     Get current X/Y coord start     
0370 EDA826           (grfdrv_beta5_with):01078                  std   Wt.DfCPX,y   Save as window default X/Y coord start
                      (grfdrv_beta5_with):01079                ENDC
0373 EC37             (grfdrv_beta5_with):01080                  ldd   Wt.SZX,y     Get current X/Y size (current CWArea)
0375 EDA828           (grfdrv_beta5_with):01081                  std   Wt.DfSZX,y   Save as window default X/Y current size (current CWArea)
0378 39               (grfdrv_beta5_with):01082                  rts   
                      (grfdrv_beta5_with):01083         
                      (grfdrv_beta5_with):01084         * DWEnd entry point : NOTE: the LDD #$FFFF was a LDD #$FFFE from Kevin
                      (grfdrv_beta5_with):01085         *   Darling's 'christmas' patch. It is supposed to have something to do
                      (grfdrv_beta5_with):01086         *   with INIZ'ed but not screen allocated windows. Or maybe something with
                      (grfdrv_beta5_with):01087         *   overlapping windows?
0379 17FD7C           (grfdrv_beta5_with):01088         L03CB    lbsr  L0177          Go map in window
037C CCFFFF           (grfdrv_beta5_with):01089                  ldd   #$FFFF         Set screen table ptr to indicate not active
037F ED30             (grfdrv_beta5_with):01090                  std   Wt.STbl,y
                      (grfdrv_beta5_with):01091         * This routine checks to see if we are the last window on the current screen
                      (grfdrv_beta5_with):01092         * Carry set if there is there is another window on our screen
                      (grfdrv_beta5_with):01093         * (Originally a subroutine...moved to save 2 bytes & 5 cycles
                      (grfdrv_beta5_with):01094         * Entry: Y=window table ptr
                      (grfdrv_beta5_with):01095         *        X=Screen table ptr?
0381 3430             (grfdrv_beta5_with):01096         L03FF    pshs  y,x            Preserve window table & screen table ptrs
0383 3184             (grfdrv_beta5_with):01097                  leay  ,x             Move for ABX
0385 8E1290           (grfdrv_beta5_with):01098                  ldx   #WinBase       Point to window table entries
0388 CC2040           (grfdrv_beta5_with):01099                  ldd   #MaxWind*256+Wt.Siz Get # entries & size
038B 10AC10           (grfdrv_beta5_with):01100         L0407    cmpy  Wt.STbl,x      Keep looking until we find entry on our screen
038E 2706             (grfdrv_beta5_with):01101                  beq   L0414          Found one, error
0390 3A               (grfdrv_beta5_with):01102                  abx                  Bump to next one
0391 4A               (grfdrv_beta5_with):01103                  deca                 Keep doing until all 32 window entries are done
0392 26F7             (grfdrv_beta5_with):01104                  bne   L0407
0394 5F               (grfdrv_beta5_with):01105                  clrb                 We were only window on screen, no error
0395 21               (grfdrv_beta5_with):01106                  fcb   $21            BRN opcode=skip one byte, same speed 1 byte less
0396 53               (grfdrv_beta5_with):01107         L0414    comb                 Set flag (there is another window on screen)
0397 3530             (grfdrv_beta5_with):01108         L0415    puls  y,x            Restore window table & screen table ptrs
0399 2524             (grfdrv_beta5_with):01109                  bcs   L03F4          Not only window, CLS our area before we exit
039B 8D2C             (grfdrv_beta5_with):01110                  bsr   L0417          Only one, deallocate mem for screen if possible
039D 109C2E           (grfdrv_beta5_with):01111                  cmpy  <$002E         Our window table ptr same as current ptr?
                      (grfdrv_beta5_with):01112         * Note: The following line was causing our screen to clear which wrote over
                      (grfdrv_beta5_with):01113         * the $FF value we wrote at the beginning to flag the screen memory as free.
                      (grfdrv_beta5_with):01114         * This caused a memory leak in certain situations, like:
                      (grfdrv_beta5_with):01115         * iniz w1 w4;echo>/w1;echo>/w4;deiniz w4 w1
                      (grfdrv_beta5_with):01116         *         bne   L03F4          No, Clear our screen & exit
03A0 2624             (grfdrv_beta5_with):01117                  bne   L03F5          No, just exit
                      (grfdrv_beta5_with):01118                IFNE  H6309
                      (grfdrv_beta5_with):01119                  clrd                 Yes, clear current window & screen table ptrs
                      (grfdrv_beta5_with):01120                  clrw
                      (grfdrv_beta5_with):01121                  stq   <$2E
                      (grfdrv_beta5_with):01122                ELSE
03A2 4F               (grfdrv_beta5_with):01123                  clra
03A3 5F               (grfdrv_beta5_with):01124                  clrb
03A4 DD2E             (grfdrv_beta5_with):01125                  std   <$2E
03A6 DD30             (grfdrv_beta5_with):01126                  std   <$30
03A8 DDB5             (grfdrv_beta5_with):01127                  std   <$B5
                      (grfdrv_beta5_with):01128                ENDC
                      (grfdrv_beta5_with):01129         * Clear palettes to black
03AA B7FF9A           (grfdrv_beta5_with):01130                  sta   >$ff9a         Border
                      (grfdrv_beta5_with):01131                IFNE  H6309
                      (grfdrv_beta5_with):01132                  stq   >$ffb0         And all palette regs
                      (grfdrv_beta5_with):01133                  stq   >$ffb4
                      (grfdrv_beta5_with):01134                  stq   >$ffb8
                      (grfdrv_beta5_with):01135                  stq   >$ffbc
                      (grfdrv_beta5_with):01136                ELSE
                      (grfdrv_beta5_with):01137         * NEW CODE - 1 byte longer, but faster 
03AD 3470             (grfdrv_beta5_with):01138                  pshs  x,y,u          save regs
03AF 1F01             (grfdrv_beta5_with):01139                  tfr   d,x            X=0 (setting palettes to 0)
03B1 CEFFC0           (grfdrv_beta5_with):01140                  ldu   #$FFB0+16      Point to end of palettes+1
03B4 CC0004           (grfdrv_beta5_with):01141                  ldd   #4             Doing 4 sets of 4 byte clears (A=1 to get out of loop)
03B7 171200           (grfdrv_beta5_with):01142                  lbsr  FourBClr       Clear all 16 to black
03BA 3570             (grfdrv_beta5_with):01143                  puls  x,y,u          2 restore regs=17 bytes
                      (grfdrv_beta5_with):01144                ENDC
03BC 7E50A5           (grfdrv_beta5_with):01145         L03FC    jmp   >GrfStrt+SysRet Return to system
                      (grfdrv_beta5_with):01146         
                      (grfdrv_beta5_with):01147         * CLS our old screen with background color & leave if we weren't only window
                      (grfdrv_beta5_with):01148         *   on the screen (for Multi-Vue, for example)
03BF E607             (grfdrv_beta5_with):01149         L03F4    ldb   St.Back,x      Get background palette reg from screen table
03C1 D762             (grfdrv_beta5_with):01150                  stb   <$0062         Put into background RGB Data
03C3 17114A           (grfdrv_beta5_with):01151                  lbsr  L1377          CLS the area we were in
                      (grfdrv_beta5_with):01152         *         clrb                 No errors
03C6 7E50A4           (grfdrv_beta5_with):01153         L03F5     jmp   >GrfStrt+L0F78 Return to system
                      (grfdrv_beta5_with):01154         
                      (grfdrv_beta5_with):01155         * Called by DWEnd if we were only window on physical screen
                      (grfdrv_beta5_with):01156         * Entry: Y=window table ptr
                      (grfdrv_beta5_with):01157         *        X=screen table ptr
03C9 3420             (grfdrv_beta5_with):01158         L0417    pshs  y              Preserve window table pointer
03CB A684             (grfdrv_beta5_with):01159                  lda   St.Sty,x       Get screen type
03CD 2A22             (grfdrv_beta5_with):01160                  bpl   L043F          Graphics screen, can definately de-allocate
                      (grfdrv_beta5_with):01161         * Text window - could be others still active in 8K block
03CF 10AE02           (grfdrv_beta5_with):01162                  ldy   St.LStrt,x     Get screen phys. addr from screen table
03D2 C6FF             (grfdrv_beta5_with):01163                  ldb   #$FF           Mark this part of 8K block as unused
03D4 E7A4             (grfdrv_beta5_with):01164                  stb   ,y
03D6 8185             (grfdrv_beta5_with):01165                  cmpa  #$85           Is this an 80 column hardware text window?
03D8 2606             (grfdrv_beta5_with):01166                  bne   L042E          No, 40 column so just mark the 1 half
03DA 31A90800         (grfdrv_beta5_with):01167                  leay  >$0800,y       80 column so mark both halves as unused (since
03DE E7A4             (grfdrv_beta5_with):01168                  stb   ,y               routine below checks for 40 column markers)
03E0 108E8000         (grfdrv_beta5_with):01169         L042E    ldy   #$8000         Point to first of 4 possible windows in block
                      (grfdrv_beta5_with):01170         * Check if entire 8K block is empty... if it is, deallocate it
03E4 E1A4             (grfdrv_beta5_with):01171         L0432    cmpb  ,y             Is this one already marked as unused?
03E6 261F             (grfdrv_beta5_with):01172                  bne   L0455          No, can't deallocate block so skip ahead
03E8 17FECA           (grfdrv_beta5_with):01173                  lbsr  L02F1          Yes, move to next text screen start in block
03EB 25F7             (grfdrv_beta5_with):01174                  blo   L0432          Not last one, keep checking
03ED C601             (grfdrv_beta5_with):01175                  ldb   #$01           # of memory blocks in this screen
03EF 2006             (grfdrv_beta5_with):01176                  bra   L0445          Deallocate the block from used memory pool
                      (grfdrv_beta5_with):01177         
                      (grfdrv_beta5_with):01178         * If a graphics screen, get # blocks to deallocate
03F1 108E42BD         (grfdrv_beta5_with):01179         L043F    ldy   #GrfStrt+L02FA-1   Get # mem blocks for this screen
03F5 E6A6             (grfdrv_beta5_with):01180                  ldb   a,y
                      (grfdrv_beta5_with):01181         * Deallocate memory block(s) from screen since they are now unused
03F7 3414             (grfdrv_beta5_with):01182         L0445    pshs  x,b            Preserve screen table ptr & # blocks
03F9 4F               (grfdrv_beta5_with):01183                  clra                 clear MSB of D
03FA E601             (grfdrv_beta5_with):01184                  ldb   St.SBlk,x      Get MMU start block # for screen
03FC 1F01             (grfdrv_beta5_with):01185                  tfr   d,x            Move to X
03FE 3504             (grfdrv_beta5_with):01186                  puls  b              Get back # blocks to deallocate
0400 103F51           (grfdrv_beta5_with):01187                  os9   F$DelRAM       Deallocate the memory
                      (grfdrv_beta5_with):01188         * 03/02/92 MOD: A BAD DELRAM CALL WOULD LEAVE X ON THE STACK WHEN IT BCS'ED
                      (grfdrv_beta5_with):01189         * TO L0458, SO THE PULS & BCS ARE SWAPPED TO SET THE STACK CORRECTLY
0403 3510             (grfdrv_beta5_with):01190                  puls  x              get screen table ptr back
0405 2503             (grfdrv_beta5_with):01191                  bcs   L0458          If error, return with error flags
0407 5F               (grfdrv_beta5_with):01192         L0455    clrb                 No error and set start block # to 0 (to indicate
0408 E701             (grfdrv_beta5_with):01193                  stb   St.SBlk,x       not used)
040A 35A0             (grfdrv_beta5_with):01194         L0458    puls  pc,y           Restore window table ptr & return
                      (grfdrv_beta5_with):01195         
                      (grfdrv_beta5_with):01196         * Part of OWSet
                      (grfdrv_beta5_with):01197         * Entry: Y=New overlay window table ptr
                      (grfdrv_beta5_with):01198         * Exit: Overlay window table ptr on stack, Y=Parent window table ptr
040C 3506             (grfdrv_beta5_with):01199         L045A    puls  d              Get RTS address
040E 3426             (grfdrv_beta5_with):01200                  pshs  y,d            Swap RTS address & Y on stack
0410 E632             (grfdrv_beta5_with):01201                  ldb   Wt.BLnk,y      Get parent window #
0412 8640             (grfdrv_beta5_with):01202                  lda   #Wt.Siz        Size of window table entries
0414 3D               (grfdrv_beta5_with):01203                  mul   
0415 108E1290         (grfdrv_beta5_with):01204                  ldy   #WinBase       Point to start of window tables
0419 31AB             (grfdrv_beta5_with):01205                  leay  d,y            Point to parent window entry
041B 39               (grfdrv_beta5_with):01206                  rts   
                      (grfdrv_beta5_with):01207         
                      (grfdrv_beta5_with):01208         * OWSet Entry point
041C 8DEE             (grfdrv_beta5_with):01209         L046A    bsr   L045A          Get parent window table ptr
041E 17FCD7           (grfdrv_beta5_with):01210                  lbsr  L0177          Map in parent window & setup grfdrv mem from it
0421 ECE4             (grfdrv_beta5_with):01211                  ldd   ,s             Y=parent, d=overlay
0423 1E20             (grfdrv_beta5_with):01212                  exg   y,d            d=parent, y=overlay
0425 EDE4             (grfdrv_beta5_with):01213                  std   ,s             Stack=Parent window ptr, Y=Overlay window ptr
0427 8D25             (grfdrv_beta5_with):01214                  bsr   L049D          Check legitamacy of overlay coords & size
0429 2520             (grfdrv_beta5_with):01215                  bcs   L049A          Illegal, exit with Illegal Coord error
042B EC10             (grfdrv_beta5_with):01216                  ldd   Wt.STbl,x      Get root window's screen table ptr
042D ED30             (grfdrv_beta5_with):01217                  std   Wt.STbl,y      Dupe into overlay window's screen table ptr
042F 8D4E             (grfdrv_beta5_with):01218                  bsr   L04CC          Set up overlay window table from root table
0431 D659             (grfdrv_beta5_with):01219                  ldb   <$0059         Save switch on?
0433 270C             (grfdrv_beta5_with):01220                  beq   L0490          No, don't save original area (or clear it)
0435 17008C           (grfdrv_beta5_with):01221                  lbsr  L0516          Calculate sizes
0438 2511             (grfdrv_beta5_with):01222                  bcs   L049A          error, return to system
043A E627             (grfdrv_beta5_with):01223                  ldb   Wt.Back,y      Get background color
043C D762             (grfdrv_beta5_with):01224                  stb   <$62           Make current background color
043E 1710CF           (grfdrv_beta5_with):01225                  lbsr  L1377          CLS the overlay window area
0441 3510             (grfdrv_beta5_with):01226         L0490    puls  x              Get parent's window table ptr
0443 9C2E             (grfdrv_beta5_with):01227                  cmpx  <$002E         Is it the current window?
0445 2603             (grfdrv_beta5_with):01228                  bne   L0499          No, exit without error
0447 109F2E           (grfdrv_beta5_with):01229                  sty   <$002E         Make overlay window the current window
044A 5F               (grfdrv_beta5_with):01230         L0499    clrb                 No errors
044B 7E50A5           (grfdrv_beta5_with):01231         L049A    jmp   >GrfStrt+SysRet Return to system
                      (grfdrv_beta5_with):01232         
                      (grfdrv_beta5_with):01233         * Make sure overlay window coords & size are legit
044E 8D1F             (grfdrv_beta5_with):01234         L049D    bsr   L04BA          Get pointer to 'root' device window into X
0450 E635             (grfdrv_beta5_with):01235         L049F    ldb   Wt.CPX,y       Get X coord start of overlay window
0452 2B18             (grfdrv_beta5_with):01236                  bmi   L04B7          If >=128 then exit with error
0454 EB37             (grfdrv_beta5_with):01237                  addb  Wt.SZX,y       Add current X size to X start
0456 2514             (grfdrv_beta5_with):01238                  bcs   L04B7          added line: exit if 8-bit overflow
0458 E18828           (grfdrv_beta5_with):01239                  cmpb  Wt.DfSZX,x     Compare with maximum X size allowed
045B 220F             (grfdrv_beta5_with):01240                  bhi   L04B7          Too wide, exit with error
045D E636             (grfdrv_beta5_with):01241                  ldb   Wt.CPY,y       Get current Y coord start
045F 2B0B             (grfdrv_beta5_with):01242                  bmi   L04B7          If >=128 then exit with error
0461 EB38             (grfdrv_beta5_with):01243                  addb  Wt.SZY,y       Add current Y size to Y start
0463 2507             (grfdrv_beta5_with):01244                  bcs   L04B7          added line: exit if 8-bit overflow
0465 E18829           (grfdrv_beta5_with):01245                  cmpb  Wt.DfSZY,x     Compare with maximum Y size allowed
0468 2202             (grfdrv_beta5_with):01246                  bhi   L04B7          Too high, exit with error
046A 5F               (grfdrv_beta5_with):01247                  clrb                 Will fit, exit without error
046B 39               (grfdrv_beta5_with):01248         L04CB    rts   
                      (grfdrv_beta5_with):01249         
046C 7E416D           (grfdrv_beta5_with):01250         L04B7    jmp   >GrfStrt+L01F5 Exit with illegal coordinate error
                      (grfdrv_beta5_with):01251         
                      (grfdrv_beta5_with):01252         * Search for device window entry at the bottom of this set of overlay windows
                      (grfdrv_beta5_with):01253         * Entry: Y=Current window ptr
                      (grfdrv_beta5_with):01254         * Exit:  X=Pointer to 'root' device window (in case of multiple overlays)
046F 30A4             (grfdrv_beta5_with):01255         L04BA    leax  ,y             Move current window ptr to X
0471 E612             (grfdrv_beta5_with):01256         L04BC    ldb   Wt.BLnk,x      Get back window # link
0473 2BF6             (grfdrv_beta5_with):01257                  bmi   L04CB          If overlay window itself, skip ahead
0475 8E1290           (grfdrv_beta5_with):01258                  ldx   #WinBase       Point to start of window tables
0478 8640             (grfdrv_beta5_with):01259                  lda   #Wt.Siz        Size of each entry
047A 3D               (grfdrv_beta5_with):01260                  mul                  Calculate address of back window table entry
                      (grfdrv_beta5_with):01261                IFNE  H6309
                      (grfdrv_beta5_with):01262                  addr  d,x
                      (grfdrv_beta5_with):01263                ELSE
047B 308B             (grfdrv_beta5_with):01264                  leax  d,x
                      (grfdrv_beta5_with):01265                ENDC
047D 20F2             (grfdrv_beta5_with):01266                  bra   L04BC          Keep looking back until device window is found
                      (grfdrv_beta5_with):01267         
                      (grfdrv_beta5_with):01268         * Set up new overlay window table based on root window information
                      (grfdrv_beta5_with):01269         * Entry: X=root window ptr, Y=overlay window ptr
047F 6FA811           (grfdrv_beta5_with):01270         L04CC    clr   Wt.OBlk,y      Overlay memory block #=0
0482 170259           (grfdrv_beta5_with):01271                  lbsr  L079B          Go make default attribute byte from FG/BG colors
0485 A608             (grfdrv_beta5_with):01272                  lda   Wt.Attr,x      Get the default attribute byte from root
0487 84C0             (grfdrv_beta5_with):01273                  anda  #Blink+Under   Mask out all but Blink & Underline
0489 AA28             (grfdrv_beta5_with):01274                  ora   Wt.Attr,y      Merge with overlay window's colors
048B A728             (grfdrv_beta5_with):01275                  sta   Wt.Attr,y      Save new attribute byte
                      (grfdrv_beta5_with):01276                IFNE  H6309
                      (grfdrv_beta5_with):01277                  ldq   Wt.BSW,x       Copy BSW, LSet Type, Font Mem Blk#, MSB of Font offset to overlay window
                      (grfdrv_beta5_with):01278                  stq   Wt.BSW,y
                      (grfdrv_beta5_with):01279                  ldq   Wt.LVec,x      Copy LSet/PSet vectors to overlay window
                      (grfdrv_beta5_with):01280                  stq   Wt.LVec,y
                      (grfdrv_beta5_with):01281                ELSE
048D EC09             (grfdrv_beta5_with):01282                  ldd   Wt.BSW,x       Copy BSW character switches & LSet type to overlay window
048F ED29             (grfdrv_beta5_with):01283                  std   Wt.BSW,y
0491 EC0B             (grfdrv_beta5_with):01284                  ldd   Wt.FBlk,x      Copy font mem block # & MSB of font offset to overlay window
0493 ED2B             (grfdrv_beta5_with):01285                  std   Wt.FBlk,y
0495 EC8814           (grfdrv_beta5_with):01286                  ldd   Wt.LVec,x      Copy LSet vector to overlay window
0498 EDA814           (grfdrv_beta5_with):01287                  std   Wt.LVec,y
049B EC8816           (grfdrv_beta5_with):01288                  ldd   Wt.PVec,x      Copy PSet vector to overlay window
049E EDA816           (grfdrv_beta5_with):01289                  std   Wt.PVec,y
                      (grfdrv_beta5_with):01290                ENDC
04A1 EC0D             (grfdrv_beta5_with):01291                  ldd   Wt.FOff+1,x    Copy LSB of font offset & PSet mem block # to overlay window
04A3 ED2D             (grfdrv_beta5_with):01292                  std   Wt.FOff+1,y
04A5 E68818           (grfdrv_beta5_with):01293                  ldb   Wt.GBlk,x      Copy Graphics cursor mem block # to overlay window
04A8 E7A818           (grfdrv_beta5_with):01294                  stb   Wt.GBlk,y
04AB EC8819           (grfdrv_beta5_with):01295                  ldd   Wt.GOff,x      Copy Graphics cursor offset to overlay window
04AE EDA819           (grfdrv_beta5_with):01296                  std   Wt.GOff,y
04B1 E626             (grfdrv_beta5_with):01297                  ldb   Wt.Fore,y      Get foreground palette
04B3 1701F1           (grfdrv_beta5_with):01298                  lbsr  L074C          Get bit mask if gfx window
04B6 E726             (grfdrv_beta5_with):01299                  stb   Wt.Fore,y      Store foreground color or mask
04B8 E627             (grfdrv_beta5_with):01300                  ldb   Wt.Back,y      Get background palette
04BA 1701EA           (grfdrv_beta5_with):01301                  lbsr  L074C          Get bit mask if gfx window
04BD E727             (grfdrv_beta5_with):01302                  stb   Wt.Back,y      Store background color or mask
04BF EC13             (grfdrv_beta5_with):01303                  ldd   Wt.LStrt,x     Get screen logical start address
04C1 7E4366           (grfdrv_beta5_with):01304                  jmp   >GrfStrt+L03A9 Set up rest of window table & return
                      (grfdrv_beta5_with):01305         
                      (grfdrv_beta5_with):01306         * Entry: X=root window table ptr
                      (grfdrv_beta5_with):01307         *        Y=Overlay window table ptr
                      (grfdrv_beta5_with):01308         * Exit:  <$4F=X screen size (chars if hware text, pixels if Gfx)
                      (grfdrv_beta5_with):01309         *        <$51=Y screen size (char lines if hware text, pixels if Gfx)
04C4 3410             (grfdrv_beta5_with):01310         L0516    pshs  x              Preserve root window table ptr
04C6 8D57             (grfdrv_beta5_with):01311                  bsr   xy.intoq       get X,Y size for text/gfx into Q
                      (grfdrv_beta5_with):01312                IFNE  H6309
                      (grfdrv_beta5_with):01313                  stq   <$4F           Save X and Y screen size (chars or pixels)
                      (grfdrv_beta5_with):01314                ELSE
04C8 DD4F             (grfdrv_beta5_with):01315                  std   <$4F           Save X screen size
04CA DCB5             (grfdrv_beta5_with):01316                  ldd   <$B5           Get Y screen size
04CC DD51             (grfdrv_beta5_with):01317                  std   <$51           Save Y screen size
04CE 964F             (grfdrv_beta5_with):01318                  lda   <$4F           Restore A
                      (grfdrv_beta5_with):01319                ENDC
04D0 5F               (grfdrv_beta5_with):01320                  clrb  
04D1 DD47             (grfdrv_beta5_with):01321                  std   <$0047         Set current X coordinate to 0
04D3 17068C           (grfdrv_beta5_with):01322                  lbsr  L0BEA          Calculate # bytes wide overlay is
04D6 3590             (grfdrv_beta5_with):01323                  puls  pc,x           Restore root window table ptr & return
                      (grfdrv_beta5_with):01324         
                      (grfdrv_beta5_with):01325         * OWEnd entry point
04D8 17FC1D           (grfdrv_beta5_with):01326         L053A    lbsr  L0177          Map in window & set up Grfdrv mem from it
04DB 109C2E           (grfdrv_beta5_with):01327                  cmpy  <$2E           Is this the current interactive window?
04DE 2608             (grfdrv_beta5_with):01328                  bne   L054A          No, skip ahead
04E0 17FF29           (grfdrv_beta5_with):01329                  lbsr  L045A          Yes, get parent window tbl ptr into Y
04E3 109F2E           (grfdrv_beta5_with):01330                  sty   <$002E         Make parent window the new interactive window
04E6 3520             (grfdrv_beta5_with):01331                  puls  y              Get overlay window tbl ptr back
04E8 E6A811           (grfdrv_beta5_with):01332         L054A    ldb   Wt.OBlk,y      Get MMU block # of overlay window
04EB 2713             (grfdrv_beta5_with):01333                  beq   L0562          If none, save switch was off, so skip ahead
04ED 17131B           (grfdrv_beta5_with):01334                  lbsr  L017C          Map in get/put block
04F0 D77D             (grfdrv_beta5_with):01335                  stb   <$007D         Save block #
04F2 ECA812           (grfdrv_beta5_with):01336                  ldd   Wt.OOff,y      Get ptr to buffer start in block
04F5 DD7E             (grfdrv_beta5_with):01337                  std   <$007E         Save that too
04F7 1707AF           (grfdrv_beta5_with):01338                  lbsr  L0CF8          Go put it back on the screen
04FA 17034E           (grfdrv_beta5_with):01339                  lbsr  L092B          Hunt down the overlay window GP Buffer
04FD 170470           (grfdrv_beta5_with):01340                  lbsr  L0A55          Kill the buffer (free it up)
0500 CCFFFF           (grfdrv_beta5_with):01341         L0562    ldd   #$FFFF         Mark window table entry as unused
0503 ED30             (grfdrv_beta5_with):01342                  std   Wt.STbl,y
0505 2014             (grfdrv_beta5_with):01343                  bra   L057D          Exit without error
                      (grfdrv_beta5_with):01344         
0507 53               (grfdrv_beta5_with):01345         L0569    comb  
0508 C6C0             (grfdrv_beta5_with):01346                  ldb   #E$IllCmd      Exit with Illegal Command error
050A 2010             (grfdrv_beta5_with):01347                  bra   L057E
                      (grfdrv_beta5_with):01348         
                      (grfdrv_beta5_with):01349         * CWArea entry point
050C 17FBE9           (grfdrv_beta5_with):01350         L056E    lbsr  L0177          Map in the window
050F 30A4             (grfdrv_beta5_with):01351                  leax  ,y             Move window tbl ptr to X
0511 17FF3C           (grfdrv_beta5_with):01352                  lbsr  L049F          Make sure coords will fit in orig. window sizes
0514 2506             (grfdrv_beta5_with):01353                  bcs   L057E          No, exit with error
0516 ECA824           (grfdrv_beta5_with):01354                  ldd   Wt.LStDf,y     get screen logical start
0519 8D21             (grfdrv_beta5_with):01355                  bsr   L0581          go do it
051B 5F               (grfdrv_beta5_with):01356         L057D    clrb                 No error
051C 7E50A5           (grfdrv_beta5_with):01357         L057E    jmp   >GrfStrt+SysRet return to system
                      (grfdrv_beta5_with):01358         
                      (grfdrv_beta5_with):01359         * This routine is ONLY called from L0516 (CWArea) and L0581 (OWSet)
                      (grfdrv_beta5_with):01360         * As these routines are not called too often, we can add 10 clock cycles
051F 4F               (grfdrv_beta5_with):01361         xy.intoq clra                 clear carry for ROLW, below
0520 E638             (grfdrv_beta5_with):01362                  ldb   Wt.SZY,y       Get current Y size of overlay window into W
                      (grfdrv_beta5_with):01363                IFNE  H6309
                      (grfdrv_beta5_with):01364                  tfr   d,w            move Y-size into W
                      (grfdrv_beta5_with):01365                ELSE
0522 DDB5             (grfdrv_beta5_with):01366                  std   <$B5
                      (grfdrv_beta5_with):01367                ENDC
0524 E637             (grfdrv_beta5_with):01368                  ldb   Wt.SZX,y       Get current X size of overlay window into D
0526 0D60             (grfdrv_beta5_with):01369                  tst   <$60           Test screen type
0528 2B11             (grfdrv_beta5_with):01370                  bmi   L0530          If hardware text, exit without doing more shifts
                      (grfdrv_beta5_with):01371                IFNE  H6309
                      (grfdrv_beta5_with):01372                  rolw                 multiply by 8 for # pixels down
                      (grfdrv_beta5_with):01373                  rolw
                      (grfdrv_beta5_with):01374                  rolw                 E=$00 and CC.C=0 from above,so this is really ASLW
                      (grfdrv_beta5_with):01375                  lslb                 Multiply by 8 for # pixels across
                      (grfdrv_beta5_with):01376                  lsld                 A=$00 from CLRA, above.  Max 80
                      (grfdrv_beta5_with):01377                  lsld
                      (grfdrv_beta5_with):01378                ELSE
052A 08B6             (grfdrv_beta5_with):01379                  lsl   <$B6
052C 09B5             (grfdrv_beta5_with):01380                  rol   <$B5
052E 08B6             (grfdrv_beta5_with):01381                  lsl   <$B6
0530 09B5             (grfdrv_beta5_with):01382                  rol   <$B5
0532 08B6             (grfdrv_beta5_with):01383                  lsl   <$B6
0534 09B5             (grfdrv_beta5_with):01384                  rol   <$B5
0536 58               (grfdrv_beta5_with):01385                  lslb
0537 58               (grfdrv_beta5_with):01386                  lslb
0538 49               (grfdrv_beta5_with):01387                  rola
0539 58               (grfdrv_beta5_with):01388                  lslb
053A 49               (grfdrv_beta5_with):01389                  rola
                      (grfdrv_beta5_with):01390                ENDC
053B 39               (grfdrv_beta5_with):01391         L0530    rts
                      (grfdrv_beta5_with):01392         
                      (grfdrv_beta5_with):01393         * Entry :x= Screen table ptr
                      (grfdrv_beta5_with):01394         *        y= Window table ptr
                      (grfdrv_beta5_with):01395         *        d= Screen logical start address
053C 3416             (grfdrv_beta5_with):01396         L0581    pshs  d,x          Preserve Screen start & screen tbl ptr
053E D660             (grfdrv_beta5_with):01397                  ldb   <$60         get STY marker
0540 C40F             (grfdrv_beta5_with):01398                  andb  #$0F         keep only first 4 bits (mask out hardware text mode bit flag)
0542 8E4596           (grfdrv_beta5_with):01399                  ldx   #GrfStrt+L05E1-1  Point to # bytes/text char table
0545 E685             (grfdrv_beta5_with):01400                  ldb   b,x          get number bytes/char
0547 E723             (grfdrv_beta5_with):01401                  stb   Wt.CWTmp,y   Preserve # bytes/char
0549 A637             (grfdrv_beta5_with):01402                  lda   Wt.SZX,y     get current X size (of window)
054B 3D               (grfdrv_beta5_with):01403                  mul                Calculate # bytes wide window is
054C E722             (grfdrv_beta5_with):01404                  stb   Wt.XBCnt,y   Preserve #bytes wide window is
054E 4F               (grfdrv_beta5_with):01405                  clra               #bytes per row MSB to 0
054F D663             (grfdrv_beta5_with):01406                  ldb   <$0063       Get #bytes per row on screen
0551 0D60             (grfdrv_beta5_with):01407                  tst   <$0060       Text or graphics screen?
0553 2B06             (grfdrv_beta5_with):01408                  bmi   L05A1        If text, we already have # bytes per row
                      (grfdrv_beta5_with):01409                IFNE  H6309
                      (grfdrv_beta5_with):01410                  lsld               If graphics, multiply x 8 since each text row
                      (grfdrv_beta5_with):01411                  lsld               is 8 sets of lines
                      (grfdrv_beta5_with):01412                  lsld
                      (grfdrv_beta5_with):01413                ELSE
0555 58               (grfdrv_beta5_with):01414                  lslb
0556 49               (grfdrv_beta5_with):01415                  rola
0557 58               (grfdrv_beta5_with):01416                  lslb
0558 49               (grfdrv_beta5_with):01417                  rola
0559 58               (grfdrv_beta5_with):01418                  lslb
055A 49               (grfdrv_beta5_with):01419                  rola
                      (grfdrv_beta5_with):01420                ENDC
055B ED24             (grfdrv_beta5_with):01421         L05A1    std   Wt.BRow,y    Preserve # bytes/text row (8 lines if gfx)
055D 4F               (grfdrv_beta5_with):01422                  clra
055E E636             (grfdrv_beta5_with):01423                  ldb   Wt.CPY,y     Get Upper left Y coord of window
                      (grfdrv_beta5_with):01424                IFNE  H6309
                      (grfdrv_beta5_with):01425                  muld  Wt.BRow,y    Calculate Y coordinate start
                      (grfdrv_beta5_with):01426                  stw   <$0097       save Y offset
                      (grfdrv_beta5_with):01427                ELSE
0560 3470             (grfdrv_beta5_with):01428                  pshs  x,y,u
0562 AE24             (grfdrv_beta5_with):01429                  ldx   Wt.BRow,y    Calculate Y coordinate start
0564 1718D0           (grfdrv_beta5_with):01430                  lbsr  MUL16
0567 DF97             (grfdrv_beta5_with):01431                  stu   <$97
0569 DFB5             (grfdrv_beta5_with):01432                  stu   <$B5
056B 3570             (grfdrv_beta5_with):01433                  puls  x,y,u
                      (grfdrv_beta5_with):01434                ENDC
056D A635             (grfdrv_beta5_with):01435                  lda   Wt.CPX,y     get X coordinate start
056F E623             (grfdrv_beta5_with):01436                  ldb   Wt.CWTmp,y   get # bytes per text character
0571 3D               (grfdrv_beta5_with):01437                  mul                calculate where X starts
0572 E3E1             (grfdrv_beta5_with):01438                  addd  ,s++         add it to screen start address
0574 D397             (grfdrv_beta5_with):01439                  addd  <$0097       add in Y offset
0576 ED33             (grfdrv_beta5_with):01440                  std   Wt.LStrt,y   get screen logical start
0578 170E2D           (grfdrv_beta5_with):01441                  lbsr  L11E1        home cursor
057B D660             (grfdrv_beta5_with):01442                  ldb   <$0060       get STY marker
057D 2B02             (grfdrv_beta5_with):01443                  bmi   L05C0        text, don't need scale factor
057F 8D22             (grfdrv_beta5_with):01444                  bsr   L05E7        calculate scaling factor
                      (grfdrv_beta5_with):01445         * Calculate window X size in either pixels or characters
                      (grfdrv_beta5_with):01446         * Q is D:W  D=X size, W=Y size
0581 8D9C             (grfdrv_beta5_with):01447         L05C0    bsr   xy.intoq     get X and Y for text/gfx into Q
                      (grfdrv_beta5_with):01448                IFNE  H6309
                      (grfdrv_beta5_with):01449                  decw               adjust Y to start at 0
                      (grfdrv_beta5_with):01450                  decd               adjust X to start at 0
                      (grfdrv_beta5_with):01451                  stq   Wt.MaxX,y    save maximum X co-ordinate
                      (grfdrv_beta5_with):01452                  puls  x,pc         restore & return
                      (grfdrv_beta5_with):01453                ELSE
0583 830001           (grfdrv_beta5_with):01454                  subd  #1
0586 EDA81B           (grfdrv_beta5_with):01455                  std   Wt.MaxX,y    Save MaxX as base 0
0589 3406             (grfdrv_beta5_with):01456                  pshs  d
058B DCB5             (grfdrv_beta5_with):01457                  ldd   <$B5         Save MaxY as base 0
058D 830001           (grfdrv_beta5_with):01458                  subd  #1
0590 DDB5             (grfdrv_beta5_with):01459                  std   <$B5
0592 EDA81D           (grfdrv_beta5_with):01460                  std   Wt.MaxX+2,y
0595 3596             (grfdrv_beta5_with):01461                  puls  d,x,pc
                      (grfdrv_beta5_with):01462                ENDC
                      (grfdrv_beta5_with):01463         
                      (grfdrv_beta5_with):01464         * # bytes for each text char
0597 01               (grfdrv_beta5_with):01465         L05E1    fcb   $01          640 2 color
0598 02               (grfdrv_beta5_with):01466                  fcb   $02          320 4 color
0599 02               (grfdrv_beta5_with):01467                  fcb   $02          640 4 color
059A 04               (grfdrv_beta5_with):01468                  fcb   $04          320 16 color
059B 02               (grfdrv_beta5_with):01469                  fcb   $02          80 column text (includes attribute byte)
059C 02               (grfdrv_beta5_with):01470                  fcb   $02          40 column text (includes attribute byte)
                      (grfdrv_beta5_with):01471         
                      (grfdrv_beta5_with):01472         * Graphic window scaling constants (When multiplied by the maximum width/
                      (grfdrv_beta5_with):01473         * height of the screen in characters, they equal 256. The resulting figure
                      (grfdrv_beta5_with):01474         * is rounded up by 1 if the result has a fraction >=.8.
                      (grfdrv_beta5_with):01475         * The resulting rounded figure (1 byte long) is then used by multiplying
                      (grfdrv_beta5_with):01476         * it with the coordinate requested, and then dividing by 256 (dropping
                      (grfdrv_beta5_with):01477         * the least significant byte). The resulting 2 byte number is the scaled
                      (grfdrv_beta5_with):01478         * coordinate to actually use.)
                      (grfdrv_beta5_with):01479         * The actual scaling factor is a 16x8 bit multiply (Scale factor by # of
                      (grfdrv_beta5_with):01480         * columns/rows) into a 3 byte #. If the LSB is >=$CD (.8), then round up
                      (grfdrv_beta5_with):01481         * the 2nd byte by 1 (MSB is unused). The 2nd byte is the scaling factor.
                      (grfdrv_beta5_with):01482         * X scaling constants for 640x screen
059D 0333             (grfdrv_beta5_with):01483         XSclMSB  fdb   $0333          X Scaling factor (~3.2)
                      (grfdrv_beta5_with):01484         
                      (grfdrv_beta5_with):01485         * Y scaling constants (note: fractional part of 200 line has changed from
                      (grfdrv_beta5_with):01486         * $3f to $3e, since that is closer to get the 256 mod value)
059F 0AAB             (grfdrv_beta5_with):01487         YScl192  fdb   $0AAB          Y Scaling factor for 192 row scrn (~10.668)
05A1 0A3E             (grfdrv_beta5_with):01488         YScl200  fdb   $0A3E          Y Scaling factor for 200 row scrn (~10.2422)
                      (grfdrv_beta5_with):01489         
                      (grfdrv_beta5_with):01490         * Calculate scaling factors for a graphics window (# row/columns*scale factor)
                      (grfdrv_beta5_with):01491         * Must be as close to 256 as possible
                      (grfdrv_beta5_with):01492                IFNE  H6309
05A3                  (grfdrv_beta5_with):01493         L05E7    clra               D=# of columns
                      (grfdrv_beta5_with):01494                  ldb   Wt.SZX,y
                      (grfdrv_beta5_with):01495                  muld  <XSclMSB,pc  Multiply by X scaling factor
                      (grfdrv_beta5_with):01496                  cmpf  #$cd         Need to round it up if >=.8?
                      (grfdrv_beta5_with):01497                  blo   saveXscl     No, save result
                      (grfdrv_beta5_with):01498                  ince               Round it up
05A3                  (grfdrv_beta5_with):01499         saveXscl ste   Wt.SXFct,y   Save X scaling multiplier
                      (grfdrv_beta5_with):01500                  ldb   Wt.SZY,y     D=# of rows (A=0 from MULD already)
                      (grfdrv_beta5_with):01501                  cmpb  #25          Is it the full 25 lines?
                      (grfdrv_beta5_with):01502                  blo   useold       No, use old scaling factor for compatibility
                      (grfdrv_beta5_with):01503                  muld  <YScl200,pc  Multiply by 200 line Y scaling factor
                      (grfdrv_beta5_with):01504                  bra   chkrnd
                      (grfdrv_beta5_with):01505         
05A3                  (grfdrv_beta5_with):01506         useold   muld  <YScl192,pc  Multiply by 192 line Y scaling factor
05A3                  (grfdrv_beta5_with):01507         chkrnd   cmpf  #$cd         Need to round it up if >=.8?
                      (grfdrv_beta5_with):01508                  blo   saveYscl     No, save result
                      (grfdrv_beta5_with):01509                  ince               Round it up
05A3                  (grfdrv_beta5_with):01510         saveYscl ste   Wt.SYFct,y   Save Y scaling multiplier
                      (grfdrv_beta5_with):01511                  rts
                      (grfdrv_beta5_with):01512                ELSE
                      (grfdrv_beta5_with):01513         * 6809 NOTE: I checked, this routine does NOT need to preserve D on exit; the only
                      (grfdrv_beta5_with):01514         * place this gets called from immediately destroys D (xy.intoq)
                      (grfdrv_beta5_with):01515         * also, no alternative entry points - the following labels are all local to this
                      (grfdrv_beta5_with):01516         * routine only
05A3 4F               (grfdrv_beta5_with):01517         L05E7    clra               D=# of columns
05A4 E637             (grfdrv_beta5_with):01518                  ldb   Wt.SZX,y     Get width of window
05A6 3470             (grfdrv_beta5_with):01519                  pshs  x,y,u        Save regs
05A8 AE8CF2           (grfdrv_beta5_with):01520                  ldx   <XSclMSB,pc  Get X scaling factor
05AB 171889           (grfdrv_beta5_with):01521                  lbsr  MUL16        Y:U=D*X (signed)
05AE 1F30             (grfdrv_beta5_with):01522                  tfr   u,d          and move to D
05B0 C1CD             (grfdrv_beta5_with):01523                  cmpb  #$cd         Need to round it up if >=/8?
05B2 3570             (grfdrv_beta5_with):01524                  puls  x,y,u        Restore index regs
05B4 2501             (grfdrv_beta5_with):01525                  blo   saveXscl     No rounding needed, save result
05B6 4C               (grfdrv_beta5_with):01526                  inca               Yes, round up
05B7 A739             (grfdrv_beta5_with):01527         saveXscl sta   Wt.SXFct,y   Save as X scaling factor
05B9 4F               (grfdrv_beta5_with):01528                  clra
05BA E638             (grfdrv_beta5_with):01529                  ldb   Wt.SZY,y     D=# of rows (A=0 from MULD already)
05BC C119             (grfdrv_beta5_with):01530                  cmpb  #25          Is it the full 25 lines?
05BE 3470             (grfdrv_beta5_with):01531                  pshs  x,y,u        Save regs
05C0 2512             (grfdrv_beta5_with):01532                  blo   useold       No, use old scaling factor for compatibility
05C2 AE8CDC           (grfdrv_beta5_with):01533                  ldx   <YScl200,pc  Use 25/200 scaling factor
05C5 17186F           (grfdrv_beta5_with):01534         DoYScl   lbsr  MUL16        Y:U=D*X (signed)
05C8 1F30             (grfdrv_beta5_with):01535                  tfr   u,d          Copy LSW to D
05CA 3570             (grfdrv_beta5_with):01536                  puls  x,y,u        Get index regs back
05CC C1CD             (grfdrv_beta5_with):01537         chkrnd   cmpb  #$cd         Need to round it up if >=.8?
05CE 2501             (grfdrv_beta5_with):01538                  blo   saveYscl     No, save result
05D0 4C               (grfdrv_beta5_with):01539                  inca               Yes, round up scaling factor
05D1 A73A             (grfdrv_beta5_with):01540         saveYscl sta   Wt.SYFct,y   Save Y scaling factor into window table & return
05D3 39               (grfdrv_beta5_with):01541                  rts
                      (grfdrv_beta5_with):01542         
05D4 AE8CC8           (grfdrv_beta5_with):01543         useold   ldx   <YScl192,pc  Use 25/200 scaling factor
05D7 20EC             (grfdrv_beta5_with):01544                  bra   DoYScl
                      (grfdrv_beta5_with):01545                ENDC
                      (grfdrv_beta5_with):01546         
                      (grfdrv_beta5_with):01547         * PSet entry point - Change <$16,y vector to proper pattern drawing
05D9 D657             (grfdrv_beta5_with):01548         L0611    ldb   <$0057       get group mem block #
05DB 2607             (grfdrv_beta5_with):01549                  bne   L061D        If a pattern is wanted, go find it
05DD E72E             (grfdrv_beta5_with):01550                  stb   Wt.PBlk,y    Set memory block # to 0 (PSET patterning off)
05DF 8E6282           (grfdrv_beta5_with):01551                  ldx   #GrfStrt+L1F9E  Point to normal PSET vector
05E2 2015             (grfdrv_beta5_with):01552                  bra   L0635        Go preserve vector & exit without error
                      (grfdrv_beta5_with):01553         
05E4 170269           (grfdrv_beta5_with):01554         L061D    lbsr  L0930        Go search buffers for the one we want
05E7 251B             (grfdrv_beta5_with):01555                  bcs   L0639        If the buffer doesn't exist, exit with error
05E9 E72E             (grfdrv_beta5_with):01556                  stb   Wt.PBlk,y    Save PSET block #
05EB 308820           (grfdrv_beta5_with):01557                  leax  Grf.Siz,x    Skip Gfx buffer header
05EE AF2F             (grfdrv_beta5_with):01558                  stx   Wt.POff,y    Save offset to actual graphics data
05F0 E6B8F0           (grfdrv_beta5_with):01559                  ldb   [Wt.STbl,y]  Get screen type from screen table
05F3 8E624F           (grfdrv_beta5_with):01560                  ldx   #GrfStrt+L1FB4-1  Point to table (-1 since scrn type 0 illegal)
05F6 E685             (grfdrv_beta5_with):01561                  ldb   b,x          Get unsigned offset for vector calculation
05F8 3A               (grfdrv_beta5_with):01562                  abx                Calculate address of vector
05F9 AFA816           (grfdrv_beta5_with):01563         L0635    stx   Wt.PVec,y    Preserve PSET vector
05FC 7E50A4           (grfdrv_beta5_with):01564         L0638    jmp   >GrfStrt+L0F78 Return to system, without any errors
                      (grfdrv_beta5_with):01565         
                      (grfdrv_beta5_with):01566         * Font entry point
05FF 17FAF6           (grfdrv_beta5_with):01567         L063C    lbsr  L0177        Map in window
0602 8D03             (grfdrv_beta5_with):01568                  bsr   L0643        Go set font group #
0604 7E50A5           (grfdrv_beta5_with):01569         L0639    jmp   >GrfStrt+SysRet Return to system
                      (grfdrv_beta5_with):01570         
0607 D657             (grfdrv_beta5_with):01571         L0643    ldb   <$0057       get block number for font buffer
0609 2603             (grfdrv_beta5_with):01572                  bne   L064A        If there is one, go set it up
060B E72B             (grfdrv_beta5_with):01573                  stb   Wt.FBlk,y    Set font memory block # to 0 (no fonts)
060D 39               (grfdrv_beta5_with):01574                  rts   
                      (grfdrv_beta5_with):01575         
060E 170B29           (grfdrv_beta5_with):01576         L064A    lbsr  L1002        Go set the font ('.' font default if none)
0611 17023C           (grfdrv_beta5_with):01577                  lbsr  L0930        Search buffers for proper one
0614 252F             (grfdrv_beta5_with):01578                  bcs   L0684        Error, skip ahead
0616 3414             (grfdrv_beta5_with):01579                  pshs  x,b          Preserve graphics buffer table ptr & b
                      (grfdrv_beta5_with):01580         * 6809/6309 - Since we already have proportional fonts, we should be able to make this
                      (grfdrv_beta5_with):01581         *  more variable in width, using existing routines. Y is easy to implement, except do we
                      (grfdrv_beta5_with):01582         *  still force windows to be even sets of 8 high for other calcs (like window sizes for overlays)?
0618 EC07             (grfdrv_beta5_with):01583                  ldd   Grf.XSz,x    Get X size of buffer
061A 10830006         (grfdrv_beta5_with):01584                  cmpd  #6           6 pixel wide buffer?
061E 2706             (grfdrv_beta5_with):01585                  beq   L0662        Yes, go on
0620 10830008         (grfdrv_beta5_with):01586                  cmpd  #8           8 pixel wide buffer?
0624 2620             (grfdrv_beta5_with):01587                  bne   L0685        Not a font, report buffer # error
                      (grfdrv_beta5_with):01588         * It is a buffer size that matches those acceptable to fonts
0626 EC09             (grfdrv_beta5_with):01589         L0662    ldd   Grf.YSz,x    Get Y size of buffer
0628 10830008         (grfdrv_beta5_with):01590                  cmpd  #8           8 pixel high buffer?
062C 2618             (grfdrv_beta5_with):01591                  bne   L0685        No, report buffer # error
062E E70B             (grfdrv_beta5_with):01592                  stb   Grf.XBSz,x   Preserve font height
0630 EC07             (grfdrv_beta5_with):01593                  ldd   Grf.XSz,x    Get X size of buffer again
0632 10936E           (grfdrv_beta5_with):01594                  cmpd  <$006E       Get X pixel count
0635 2707             (grfdrv_beta5_with):01595                  beq   L067D        Same, set up normally
0637 E62B             (grfdrv_beta5_with):01596                  ldb   Wt.FBlk,y    Check font block #
0639 2703             (grfdrv_beta5_with):01597                  beq   L067D        If there is none, exit normally (pointing to '.')
063B 170D57           (grfdrv_beta5_with):01598                  lbsr  L11CD        If not, do CR & set up width of line
063E 3514             (grfdrv_beta5_with):01599         L067D    puls  x,b          Get back regs
0640 E72B             (grfdrv_beta5_with):01600                  stb   Wt.FBlk,y    Store block # where font is
0642 AF2C             (grfdrv_beta5_with):01601                  stx   Wt.FOff,y    Store offset to font within 8K block
0644 5F               (grfdrv_beta5_with):01602                  clrb               No error and return
0645 39               (grfdrv_beta5_with):01603         L0684    rts   
                      (grfdrv_beta5_with):01604         
                      (grfdrv_beta5_with):01605         * Can't do font
0646 3514             (grfdrv_beta5_with):01606         L0685    puls  x,b          Get block # and graphics table buffer ptr back
0648 C6C2             (grfdrv_beta5_with):01607                  ldb   #E$BadBuf    bad buffer # error
064A 43               (grfdrv_beta5_with):01608                  coma               Set error flag
064B 39               (grfdrv_beta5_with):01609                  rts   
                      (grfdrv_beta5_with):01610         
                      (grfdrv_beta5_with):01611         * GCSet entry point
064C 17FAA9           (grfdrv_beta5_with):01612         L068B    lbsr  L0177        Map in window
064F D657             (grfdrv_beta5_with):01613                  ldb   <$0057       Get group # for graphics cursor
0651 2605             (grfdrv_beta5_with):01614                  bne   L0697        There is one, go process
0653 E7A818           (grfdrv_beta5_with):01615                  stb   Wt.GBlk,y    Set to 0 to flag that graphics cursor is off
0656 20AC             (grfdrv_beta5_with):01616                  bra   L0639        Return to system
0658 1701F5           (grfdrv_beta5_with):01617         L0697    lbsr  L0930        Go search graphics buffers for the one we want
065B 25A7             (grfdrv_beta5_with):01618                  bcs   L0639        Can't find, return to system with error
065D E7A818           (grfdrv_beta5_with):01619                  stb   Wt.GBlk,y    Store block # of graphics cursor
0660 AFA819           (grfdrv_beta5_with):01620                  stx   Wt.GOff,y    Store offset into block for graphics cursor
0663 2097             (grfdrv_beta5_with):01621                  bra   L0638        Return to system with no errors
                      (grfdrv_beta5_with):01622         
                      (grfdrv_beta5_with):01623         * FColor entry point
0665 E6B8F0           (grfdrv_beta5_with):01624         L0707    ldb   [Wt.STbl,y]   Get screen type from screen table
0668 D760             (grfdrv_beta5_with):01625                  stb   <$0060        Save as current screen type
066A D65A             (grfdrv_beta5_with):01626                  ldb   <$005A        Get palette number from user
066C 8D39             (grfdrv_beta5_with):01627                  bsr   L074C         Go get mask for it
066E E726             (grfdrv_beta5_with):01628                  stb   Wt.Fore,y     Save foreground palette #
                      (grfdrv_beta5_with):01629                IFNE  H6309
                      (grfdrv_beta5_with):01630                  tim   #Invers,Wt.BSW,y Inverse on?
                      (grfdrv_beta5_with):01631                ELSE
0670 E629             (grfdrv_beta5_with):01632                  ldb   Wt.BSW,y      regB does not need to be preserved
0672 C504             (grfdrv_beta5_with):01633                  bitb  #Invers
                      (grfdrv_beta5_with):01634                ENDC
0674 261E             (grfdrv_beta5_with):01635                  bne   L0738         Yes, go process for that
0676 D65A             (grfdrv_beta5_with):01636         L0719    ldb   <$005A        get palette register number
0678 58               (grfdrv_beta5_with):01637                  lslb                Move into foreground of attribute byte
0679 58               (grfdrv_beta5_with):01638                  lslb  
067A 58               (grfdrv_beta5_with):01639                  lslb  
067B C438             (grfdrv_beta5_with):01640                  andb  #%00111000    $38  Clear out blink/underline & background
067D A628             (grfdrv_beta5_with):01641                  lda   Wt.Attr,y     Get default attributes
067F 84C7             (grfdrv_beta5_with):01642                  anda  #%11000111    $C7  Mask out foreground
0681 2019             (grfdrv_beta5_with):01643                  bra   L0742         OR in new foreground
                      (grfdrv_beta5_with):01644         
                      (grfdrv_beta5_with):01645         * BColor entry point
0683 E6B8F0           (grfdrv_beta5_with):01646         L0726    ldb   [Wt.STbl,y]   Get screen type from screen table
0686 D760             (grfdrv_beta5_with):01647                  stb   <$0060        save it in global
0688 D65A             (grfdrv_beta5_with):01648                  ldb   <$005A        get palette register #
068A 8D1B             (grfdrv_beta5_with):01649                  bsr   L074C
068C E727             (grfdrv_beta5_with):01650                  stb   Wt.Back,y     save background into window table
                      (grfdrv_beta5_with):01651                IFNE  H6309
                      (grfdrv_beta5_with):01652                  tim   #Invers,Wt.BSW,y Inverse on?
                      (grfdrv_beta5_with):01653                ELSE
068E E629             (grfdrv_beta5_with):01654                  ldb   Wt.BSW,y      regB does not need to be preserved
0690 C504             (grfdrv_beta5_with):01655                  bitb  #Invers
                      (grfdrv_beta5_with):01656                ENDC
0692 26E2             (grfdrv_beta5_with):01657                  bne   L0719        If set, do masking to switch fore/bck ground colors
                      (grfdrv_beta5_with):01658         
0694 D65A             (grfdrv_beta5_with):01659         L0738    ldb   <$005A       Get palette register #
0696 C407             (grfdrv_beta5_with):01660                  andb  #$07         Force to 0-7 only
0698 A628             (grfdrv_beta5_with):01661                  lda   Wt.Attr,y    Get default attributes
069A 84F8             (grfdrv_beta5_with):01662                  anda  #$F8         Mask out background
     069C             (grfdrv_beta5_with):01663         L0742    equ   *
                      (grfdrv_beta5_with):01664                IFNE  H6309
                      (grfdrv_beta5_with):01665                  orr   b,a          Merge the color into attribute byte
                      (grfdrv_beta5_with):01666                ELSE
069C D7BF             (grfdrv_beta5_with):01667                  stb   <grScrtch
069E 9ABF             (grfdrv_beta5_with):01668                  ora   <grScrtch
                      (grfdrv_beta5_with):01669                ENDC
06A0 A728             (grfdrv_beta5_with):01670                  sta   Wt.Attr,y    Store new default attribute
06A2 0FA9             (grfdrv_beta5_with):01671         L0748    clr   <$A9         No error, clear flag & return to system
06A4 7E50A5           (grfdrv_beta5_with):01672                  jmp   >GrfStrt+SysRet
                      (grfdrv_beta5_with):01673         
                      (grfdrv_beta5_with):01674         * Convert color to allowable ones for screen type
                      (grfdrv_beta5_with):01675         * NOTE: see if we can swap a/b roles to allow ABX instead of LEAX A,X
                      (grfdrv_beta5_with):01676         * Entry: B=color # to get mask for
                      (grfdrv_beta5_with):01677         * Exit:  B=full byte mask for color (based on screen type)
06A7 3412             (grfdrv_beta5_with):01678         L074C    pshs  x,a          Preserve screen table ptr & a
06A9 9660             (grfdrv_beta5_with):01679                  lda   <$0060       get STY marker
06AB 2B0B             (grfdrv_beta5_with):01680                  bmi   L075D        text or same screen, return
06AD 8E46B9           (grfdrv_beta5_with):01681                  ldx   #GrfStrt+L075F-1  Point to mask table
06B0 A686             (grfdrv_beta5_with):01682                  lda   a,x          Get offset to proper mask set
06B2 3086             (grfdrv_beta5_with):01683                  leax  a,x          Point to the mask table
06B4 E480             (grfdrv_beta5_with):01684                  andb  ,x+          Mask out bits we can't use on this type screen
06B6 E685             (grfdrv_beta5_with):01685                  ldb   b,x          Get bit mask for the foreground color
06B8 3592             (grfdrv_beta5_with):01686         L075D    puls  pc,x,a       restore regs & return
                      (grfdrv_beta5_with):01687         
06BA 05               (grfdrv_beta5_with):01688         L075F    fcb   L0763-(L075F-1)    $05   (640/2 color table offset)
06BB 08               (grfdrv_beta5_with):01689                  fcb   L0766-(L075F-1)    $08   (320/4 color table offset)
06BC 08               (grfdrv_beta5_with):01690                  fcb   L0766-(L075F-1)    $08   (640/4 color table offset)
06BD 0D               (grfdrv_beta5_with):01691                  fcb   L076B-(L075F-1)    $0d   (320/16 color table offset)
                      (grfdrv_beta5_with):01692         
                      (grfdrv_beta5_with):01693         * Color masks for 640 2 color
06BE 01               (grfdrv_beta5_with):01694         L0763    fcb   $01
06BF 00FF             (grfdrv_beta5_with):01695                  fcb   $00,$ff
                      (grfdrv_beta5_with):01696         
                      (grfdrv_beta5_with):01697         * Color masks for 640 and 320 4 color
06C1 03               (grfdrv_beta5_with):01698         L0766    fcb   $03
06C2 0055AAFF         (grfdrv_beta5_with):01699                  fcb   $00,$55,$aa,$ff
                      (grfdrv_beta5_with):01700         
                      (grfdrv_beta5_with):01701         * Color masks for 320 16 color
06C6 0F               (grfdrv_beta5_with):01702         L076B    fcb   $0f
06C7 0011223344556677 (grfdrv_beta5_with):01703                  fcb   $00,$11,$22,$33,$44,$55,$66,$77
06CF 8899AABBCCDDEEFF (grfdrv_beta5_with):01704                  fcb   $88,$99,$aa,$bb,$cc,$dd,$ee,$ff
                      (grfdrv_beta5_with):01705         
                      (grfdrv_beta5_with):01706         * Get color mask
                      (grfdrv_beta5_with):01707         * Entry: B=color code
                      (grfdrv_beta5_with):01708         * Exit:  B=color mask
06D7 6D84             (grfdrv_beta5_with):01709         L0791    tst   ,x             Check screen type?
06D9 2ACC             (grfdrv_beta5_with):01710                  bpl   L074C          If graphics, mask out values scrn type can't use
06DB C407             (grfdrv_beta5_with):01711                  andb  #$07           Just least significiant 3 bits
06DD 39               (grfdrv_beta5_with):01712                  rts
                      (grfdrv_beta5_with):01713         
                      (grfdrv_beta5_with):01714         * Make default attribute byte from current fore/background colors (blink &
                      (grfdrv_beta5_with):01715         *   underline forced off)
06DE E626             (grfdrv_beta5_with):01716         L079B    ldb   Wt.Fore,y      Get foreground palette #
06E0 C407             (grfdrv_beta5_with):01717                  andb  #$07           Use only 0-7
06E2 58               (grfdrv_beta5_with):01718                  lslb                 Shift to foreground color position
06E3 58               (grfdrv_beta5_with):01719                  lslb
06E4 58               (grfdrv_beta5_with):01720                  lslb
06E5 A627             (grfdrv_beta5_with):01721                  lda   Wt.Back,y      Get background palette #
06E7 8407             (grfdrv_beta5_with):01722                  anda  #$07           Use only 0-7
                      (grfdrv_beta5_with):01723                IFNE  H6309
                      (grfdrv_beta5_with):01724                  orr   a,b            Merge foreground & background
                      (grfdrv_beta5_with):01725                ELSE
06E9 97BF             (grfdrv_beta5_with):01726                  sta   <grScrtch
06EB DABF             (grfdrv_beta5_with):01727                  orb   <grScrtch
                      (grfdrv_beta5_with):01728                ENDC
06ED E728             (grfdrv_beta5_with):01729                  stb   Wt.Attr,y      Set new default attributes
06EF 39               (grfdrv_beta5_with):01730                  rts   
                      (grfdrv_beta5_with):01731         
                      (grfdrv_beta5_with):01732         * Select entry point
                      (grfdrv_beta5_with):01733         * Entry: Y=Newly selected window pointer
                      (grfdrv_beta5_with):01734         * ATD: !! Save DP, too.
06F0 3420             (grfdrv_beta5_with):01735         L07D7    pshs  y            save Window table ptr we will be going to
06F2 109E2E           (grfdrv_beta5_with):01736                  ldy   <$002E       get window table ptr we are going from
06F5 2703             (grfdrv_beta5_with):01737                  beq   L07E1        If none, skip ahead
06F7 17F9FE           (grfdrv_beta5_with):01738                  lbsr  L0177        set variables/MMU & update cursors on old window
06FA F61000           (grfdrv_beta5_with):01739         L07E1    ldb   >WGlobal+G.CurTik       Reload counter for # ticks/cursor updates
06FD F71001           (grfdrv_beta5_with):01740                  stb   >WGlobal+G.CntTik
0700 10AEE4           (grfdrv_beta5_with):01741                  ldy   ,s           get 'to' window table pointer
0703 17F999           (grfdrv_beta5_with):01742                  lbsr  L0129        Map in window & setup grfdrv mem for new window
0706 109F2E           (grfdrv_beta5_with):01743                  sty   <$002E       save it as current window entry
0709 9F30             (grfdrv_beta5_with):01744                  stx   <$0030       set current screen table pointer
070B 3184             (grfdrv_beta5_with):01745                  leay  ,x           Move to Y Reg
070D 8EFF90           (grfdrv_beta5_with):01746         L08DB    ldx   #$FF90       point to Gime registers
                      (grfdrv_beta5_with):01747         *ATD: Do a TFR 0,DP: larger but faster?
0710 CE0090           (grfdrv_beta5_with):01748                  ldu   #$0090       point to shadow RAM for GIME hardware
                      (grfdrv_beta5_with):01749                IFNE  H6309
                      (grfdrv_beta5_with):01750                  aim   #$7f,,u      remove Coco 1/2 compatibility bit: set from CoVDG
                      (grfdrv_beta5_with):01751                  ldb   ,u           get new value
                      (grfdrv_beta5_with):01752                ELSE
0713 E6C4             (grfdrv_beta5_with):01753                  ldb   ,u 
0715 C47F             (grfdrv_beta5_with):01754                  andb  #$7f
0717 E7C4             (grfdrv_beta5_with):01755                  stb   ,u
                      (grfdrv_beta5_with):01756                ENDC
0719 E784             (grfdrv_beta5_with):01757                  stb   ,x           save it to GIME
                      (grfdrv_beta5_with):01758         * Calculate extended screen address for 1 or 2 Meg upgrade
                      (grfdrv_beta5_with):01759         * Entry: X=$FF90 (start of GIME regs)
                      (grfdrv_beta5_with):01760         *        Y=Screen table ptr
                      (grfdrv_beta5_with):01761         * Exits: With GIME (and shadow regs) pointing to proper GIME screen address &
                      (grfdrv_beta5_with):01762         *        proper 512k bank (via Disto's DAT) that screen is in (0-3 for up to
                      (grfdrv_beta5_with):01763         *        2 Meg of RAM)
071B 4F               (grfdrv_beta5_with):01764                  clra
071C A70F             (grfdrv_beta5_with):01765                  sta   $0F,x      Set horizontal scroll to 0
071E A74F             (grfdrv_beta5_with):01766                  sta   $0F,u      And set it's shadow
0720 E621             (grfdrv_beta5_with):01767                  ldb   St.SBlk,y  Get block # of screen
                      (grfdrv_beta5_with):01768                IFNE  H6309
                      (grfdrv_beta5_with):01769                  lsld             Multiply by 4 (to shift which 512k bank into A)
                      (grfdrv_beta5_with):01770                  lsld
                      (grfdrv_beta5_with):01771                ELSE
0722 58               (grfdrv_beta5_with):01772                  lslb
0723 49               (grfdrv_beta5_with):01773                  rola
0724 58               (grfdrv_beta5_with):01774                  lslb
0725 49               (grfdrv_beta5_with):01775                  rola
                      (grfdrv_beta5_with):01776                ENDC
0726 D782             (grfdrv_beta5_with):01777                  stb   <$0082     Remainder is the block #(0-3F) in this 512k bank
                      (grfdrv_beta5_with):01778         *                         No, remainder is V.OFF1 of this block. RG.
0728 5F               (grfdrv_beta5_with):01779                  clrb               vertical scroll=0
0729 ED0B             (grfdrv_beta5_with):01780                  std   $0B,x      Set which of up to 4 512K banks video is from
072B ED4B             (grfdrv_beta5_with):01781                  std   $0B,u      And set it's shadow, along with vertical scroll
072D EC22             (grfdrv_beta5_with):01782                  ldd   St.LStrt,y Get screen logical start
072F 8080             (grfdrv_beta5_with):01783                  suba  #$80       Subtract $80 from MSB of that address
                      (grfdrv_beta5_with):01784                IFNE  H6309
                      (grfdrv_beta5_with):01785                  lsrd             Divide result by 8
                      (grfdrv_beta5_with):01786                  lsrd
                      (grfdrv_beta5_with):01787                  lsrd
                      (grfdrv_beta5_with):01788                ELSE
0731 44               (grfdrv_beta5_with):01789                  lsra
0732 56               (grfdrv_beta5_with):01790                  rorb
0733 44               (grfdrv_beta5_with):01791                  lsra
0734 56               (grfdrv_beta5_with):01792                  rorb
0735 44               (grfdrv_beta5_with):01793                  lsra
0736 56               (grfdrv_beta5_with):01794                  rorb
                      (grfdrv_beta5_with):01795                ENDC
0737 9B82             (grfdrv_beta5_with):01796                  adda  <$0082     Add to MSB of 24 bit extended screen address
0739 ED0D             (grfdrv_beta5_with):01797                  std   $0D,x      Store result into GIME's vertical offset register
073B ED4D             (grfdrv_beta5_with):01798                  std   $0D,u      and it's shadow
073D 8E47AF           (grfdrv_beta5_with):01799                  ldx   #GrfStrt+L086A.24-2   GIME setup table for 24-line screens
0740 E628             (grfdrv_beta5_with):01800                  ldb   St.ScSiz,y   get screen size into B
0742 C118             (grfdrv_beta5_with):01801                  cmpb  #24          24-line screens?
0744 2703             (grfdrv_beta5_with):01802                  beq   L0840        if so: skip ahead; else get 25-line pointer
0746 8E47A3           (grfdrv_beta5_with):01803                  ldx   #GrfStrt+L086A.25-2   GIME setup table for 25-line screens
                      (grfdrv_beta5_with):01804                 IFNE    MATCHBOX
                      (grfdrv_beta5_with):01805         * 30/08/2016 BN Nanomate extra text modes
                      (grfdrv_beta5_with):01806                  cmpb  #25
                      (grfdrv_beta5_with):01807                  beq   L0840
                      (grfdrv_beta5_with):01808                  ldx   #GrfStrt+L086A.48-2   GIME setup table for 48-line screens
                      (grfdrv_beta5_with):01809                  cmpb  #48
                      (grfdrv_beta5_with):01810                  beq   L0840
                      (grfdrv_beta5_with):01811                  ldx   #GrfStrt+L086A.50-2   GIME setup table for 50-line screens
                      (grfdrv_beta5_with):01812                  cmpb  #50
                      (grfdrv_beta5_with):01813                  beq   L0840
                      (grfdrv_beta5_with):01814                  ldx   #GrfStrt+L086A.60-2   GIME setup table for 60-line screens
                      (grfdrv_beta5_with):01815                  cmpb  #60
                      (grfdrv_beta5_with):01816                  beq   L0840
                      (grfdrv_beta5_with):01817                  ldx   #GrfStrt+L086A.56-2   GIME setup table for 56-line screens
                      (grfdrv_beta5_with):01818                 ENDC
0749 E6A4             (grfdrv_beta5_with):01819         L0840    ldb   ,y           get screen type we need
074B C40F             (grfdrv_beta5_with):01820                  andb  #$0F         keep only first 4 bits
074D 58               (grfdrv_beta5_with):01821                  lslb               multiply by 2 (2 bytes per entry)
074E 3A               (grfdrv_beta5_with):01822                  abx                find entry
074F A648             (grfdrv_beta5_with):01823                  lda   $08,u        get current GIME video mode register
0751 8478             (grfdrv_beta5_with):01824                  anda  #$78         keep only non video bits
0753 AA84             (grfdrv_beta5_with):01825                  ora   ,x           bring in new video mode
0755 E601             (grfdrv_beta5_with):01826                  ldb   1,x          get Video resolution
                      (grfdrv_beta5_with):01827         * ATD: for new 'garbage-less' CLRing, and new clock, save these values
                      (grfdrv_beta5_with):01828         * at $08,u, and set $06,u: The clock will clear the flag at $0096, and update
                      (grfdrv_beta5_with):01829         * the GIME video hardware at the _start_ of the IRQ process.
0757 ED48             (grfdrv_beta5_with):01830                  std   $08,u        save new GIME shadow registers
0759 FDFF98           (grfdrv_beta5_with):01831                  std   >$FF98       save it to GIME
                      (grfdrv_beta5_with):01832                 IFNE    MATCHBOX
                      (grfdrv_beta5_with):01833         * 30/08/2016 BN Mod for NanoMate 60 row
                      (grfdrv_beta5_with):01834                  ldb   St.ScSiz,y
                      (grfdrv_beta5_with):01835                  cmpb  #25
                      (grfdrv_beta5_with):01836                  ble   no60
                      (grfdrv_beta5_with):01837         * enable double height on Matchbox for modes above 25 lines
                      (grfdrv_beta5_with):01838                  ldb   >$FF10
                      (grfdrv_beta5_with):01839                  orb   #$20
                      (grfdrv_beta5_with):01840                  stb   >$FF10
                      (grfdrv_beta5_with):01841                  bra   no61
                      (grfdrv_beta5_with):01842         * disable double height on Nanomate
075C                  (grfdrv_beta5_with):01843         no60     ldb   >$FF10
                      (grfdrv_beta5_with):01844                  andb  #$df
                      (grfdrv_beta5_with):01845                  stb   >$FF10
075C                  (grfdrv_beta5_with):01846         no61
                      (grfdrv_beta5_with):01847                  ENDC
                      (grfdrv_beta5_with):01848         * Set up colors on GIME for newly selected window
075C E625             (grfdrv_beta5_with):01849                  ldb   St.Brdr,y    Get current border palette #
075E 31A810           (grfdrv_beta5_with):01850                  leay  St.Pals,y    Point to palette register data in scrn tbl
                      (grfdrv_beta5_with):01851                IFNE  H6309
                      (grfdrv_beta5_with):01852                  ldf   >WGlobal+G.MonTyp       Get monitor type in F for faster translates
                      (grfdrv_beta5_with):01853                ENDC
0761 E6A5             (grfdrv_beta5_with):01854                  ldb   b,y          Get border color
0763 E74A             (grfdrv_beta5_with):01855                  stb   $0A,u        Save new border color to GIME shadow
                      (grfdrv_beta5_with):01856                IFNE  H6309
                      (grfdrv_beta5_with):01857                  tstf               Need to convert color?
                      (grfdrv_beta5_with):01858                ELSE
0765 7D1009           (grfdrv_beta5_with):01859                  tst   >WGlobal+G.MonTyp 
                      (grfdrv_beta5_with):01860                ENDC
0768 2605             (grfdrv_beta5_with):01861                  bne   DoBord       Nope
076A 8E47BD           (grfdrv_beta5_with):01862                  ldx   #GrfStrt+L0884   Point to translation table
076D E685             (grfdrv_beta5_with):01863                  ldb   b,x          Get composite version
076F F7FF9A           (grfdrv_beta5_with):01864         DoBord   stb   >$ff9a       Save it on GIME
0772 CEFFB0           (grfdrv_beta5_with):01865                  ldu   #$FFB0       U=GIME palette reg. ptr
                      (grfdrv_beta5_with):01866                IFNE  H6309
                      (grfdrv_beta5_with):01867                  tstf               Rest of colors need translation?
                      (grfdrv_beta5_with):01868                ELSE
0775 7D1009           (grfdrv_beta5_with):01869                  tst   >WGlobal+G.MonTyp 
                      (grfdrv_beta5_with):01870                ENDC
0778 260D             (grfdrv_beta5_with):01871                  bne   FstRGB       No, use TFM
                      (grfdrv_beta5_with):01872         * Composite translate here
077A 8610             (grfdrv_beta5_with):01873                  lda   #$10         A=# of colors
077C E6A0             (grfdrv_beta5_with):01874         L0851    ldb   ,y+          Get RGB color
077E E685             (grfdrv_beta5_with):01875                  ldb   b,x          Get composite version
0780 E7C0             (grfdrv_beta5_with):01876                  stb   ,u+          Save it to GIME
0782 4A               (grfdrv_beta5_with):01877                  deca               Done?
0783 22F7             (grfdrv_beta5_with):01878                  bhi   L0851        No, keep going
0785 200C             (grfdrv_beta5_with):01879                  bra   DnePaltt     Done, go do Gfx cursor
                      (grfdrv_beta5_with):01880         
     0787             (grfdrv_beta5_with):01881         FstRGB   equ   *
                      (grfdrv_beta5_with):01882                IFNE  H6309
                      (grfdrv_beta5_with):01883                  ldw   #$0010       Palette register ptr & # palette regs
                      (grfdrv_beta5_with):01884                  tfm   y+,u+        Move them onto GIME
                      (grfdrv_beta5_with):01885                ELSE
0787 3450             (grfdrv_beta5_with):01886                  pshs  x,u          Save regs (don't bother with Y since we are restoring it after anyways)
0789 1E23             (grfdrv_beta5_with):01887                  exg   y,u          Swap dest/src ptr for subroutine
078B CC0010           (grfdrv_beta5_with):01888                  ldd   #16          16 palettes to copy
078E 170356           (grfdrv_beta5_with):01889                  lbsr  StkBlCpy
0791 3550             (grfdrv_beta5_with):01890                  puls  x,u          Restore regs
                      (grfdrv_beta5_with):01891                ENDC
                      (grfdrv_beta5_with):01892         
                      (grfdrv_beta5_with):01893         * ATD: PULS DP, too
0793 3520             (grfdrv_beta5_with):01894         DnePaltt puls  y            Restore window entry
                      (grfdrv_beta5_with):01895                IFNE  H6309
                      (grfdrv_beta5_with):01896                  ldq   <$3D         Get last coords that Gfx cursor was ON at
                      (grfdrv_beta5_with):01897                  stq   <$5B         Save as current coords of Gfx cursor
                      (grfdrv_beta5_with):01898                ELSE
0795 DC3F             (grfdrv_beta5_with):01899                  ldd   <$3F
0797 DD5D             (grfdrv_beta5_with):01900                  std   <$5D
0799 DDB5             (grfdrv_beta5_with):01901                  std   <$B5
079B DC3D             (grfdrv_beta5_with):01902                  ldd   <$3D
079D DD5B             (grfdrv_beta5_with):01903                  std   <$5B
                      (grfdrv_beta5_with):01904                ENDC
079F 170F77           (grfdrv_beta5_with):01905                  lbsr  L153B        Update 'last gfx cursor on' position to new one
07A2 7E50A4           (grfdrv_beta5_with):01906                  jmp   >GrfStrt+L0F78 return to system: no errors
                      (grfdrv_beta5_with):01907         
                      (grfdrv_beta5_with):01908         * GIME graphics register values
                      (grfdrv_beta5_with):01909         *     1st byte goes to $ff98
                      (grfdrv_beta5_with):01910         *     2nd byte goes to $ff99
                      (grfdrv_beta5_with):01911         * LCB NOTE: Should change to autosense whether we are in RGB/Mono mode, or composite/tv
                      (grfdrv_beta5_with):01912         * mode. 25 line hardware text screens would use 225 scanlines on RGB/Mono, but only 200
                      (grfdrv_beta5_with):01913         * on composite TV. 28 line mode will always use 225 scanlines, of course
                      (grfdrv_beta5_with):01914         * NOTE: To change to 25 line TV res (200 not 225), change $0475 & $0465 to
                      (grfdrv_beta5_with):01915         * $033D & $032D respectively (approx $825 in V1.15+)
                      (grfdrv_beta5_with):01916         *       ifeq MaxLines-25
07A5 8034             (grfdrv_beta5_with):01917         L086A.25 fdb   $8034        640x200 2 color
07A7 8035             (grfdrv_beta5_with):01918                  fdb   $8035        320x200 4 color
07A9 803D             (grfdrv_beta5_with):01919                  fdb   $803D        640x200 4 color
07AB 803E             (grfdrv_beta5_with):01920                  fdb   $803E        320x200 16 color
                      (grfdrv_beta5_with):01921                ifeq TV-1
                      (grfdrv_beta5_with):01922                  fdb   $033D        80x25, 200 line screen
                      (grfdrv_beta5_with):01923                  fdb   $032D        40x25, 200 line screen
                      (grfdrv_beta5_with):01924                else
07AD 0475             (grfdrv_beta5_with):01925                  fdb   $0475        80x25, 225 line screen
07AF 0465             (grfdrv_beta5_with):01926                  fdb   $0465        40x25, 225 line screen
                      (grfdrv_beta5_with):01927                endc
                      (grfdrv_beta5_with):01928         
                      (grfdrv_beta5_with):01929         *       else
07B1 8014             (grfdrv_beta5_with):01930         L086A.24 fdb   $8014        640x192 2 color
07B3 8015             (grfdrv_beta5_with):01931                  fdb   $8015        320x192 4 color
07B5 801D             (grfdrv_beta5_with):01932                  fdb   $801D        640x192 4 color
07B7 801E             (grfdrv_beta5_with):01933                  fdb   $801E        320x192 16 color
07B9 0315             (grfdrv_beta5_with):01934                  fdb   $0315        80x24, 192 line screen
07BB 0305             (grfdrv_beta5_with):01935                  fdb   $0305        40x24, 192 line screen
                      (grfdrv_beta5_with):01936         *       endc
                      (grfdrv_beta5_with):01937         
                      (grfdrv_beta5_with):01938                 IFNE    MATCHBOX
07BD                  (grfdrv_beta5_with):01939         L086A.48 fdb   $8014        640x192 2 color
                      (grfdrv_beta5_with):01940                  fdb   $8015        320x192 4 color
                      (grfdrv_beta5_with):01941                  fdb   $801D        640x192 4 color
                      (grfdrv_beta5_with):01942                  fdb   $801E        320x192 16 color
                      (grfdrv_beta5_with):01943                  fdb   $0315        80x48, 192 line screen
                      (grfdrv_beta5_with):01944                  fdb   $0305        40x48, 192 line screen
                      (grfdrv_beta5_with):01945         
07BD                  (grfdrv_beta5_with):01946         L086A.50 fdb   $8034        640x192 2 color
                      (grfdrv_beta5_with):01947                  fdb   $8035        320x192 4 color
                      (grfdrv_beta5_with):01948                  fdb   $803D        640x192 4 color
                      (grfdrv_beta5_with):01949                  fdb   $803E        320x192 16 color
                      (grfdrv_beta5_with):01950                  fdb   $033D        80x50, 200 line screen
                      (grfdrv_beta5_with):01951                  fdb   $032D        40x50, 200 line screen
                      (grfdrv_beta5_with):01952         
07BD                  (grfdrv_beta5_with):01953         L086A.60 fdb   $8054        640x192 2 color
                      (grfdrv_beta5_with):01954                  fdb   $8055        320x192 4 color
                      (grfdrv_beta5_with):01955                  fdb   $805D        640x192 4 color
                      (grfdrv_beta5_with):01956                  fdb   $804E        320x192 16 color
                      (grfdrv_beta5_with):01957                  fdb   $035D        80x24, 192 line screen
                      (grfdrv_beta5_with):01958                  fdb   $034D        40x24, 192 line screen
                      (grfdrv_beta5_with):01959         
07BD                  (grfdrv_beta5_with):01960         L086A.56 fdb   $8074        640x192 2 color
                      (grfdrv_beta5_with):01961                  fdb   $8075        320x192 4 color
                      (grfdrv_beta5_with):01962                  fdb   $807D        640x192 4 color
                      (grfdrv_beta5_with):01963                  fdb   $806E        320x192 16 color
                      (grfdrv_beta5_with):01964                  fdb   $037D        80x24, 192 line screen
                      (grfdrv_beta5_with):01965                  fdb   $036D        40x24, 192 line screen
                      (grfdrv_beta5_with):01966                 ENDC
                      (grfdrv_beta5_with):01967         
                      (grfdrv_beta5_with):01968         * New table based on Erik Gavriluk's conversion chart. Will experiment with, but
                      (grfdrv_beta5_with):01969         *  Nick Marentes swears it is closer than the original table
07BD 000A030E06090410 (grfdrv_beta5_with):01970         L0884    fcb   $00,$0A,$03,$0E,$06,$09,$04,$10  0-7
07C5 1B1B1C1C1A1B1C2B (grfdrv_beta5_with):01971                  fcb   $1B,$1B,$1C,$1C,$1A,$1B,$1C,$2B  8-15
07CD 121F2221131F2221 (grfdrv_beta5_with):01972                  fcb   $12,$1F,$22,$21,$13,$1F,$22,$21  16-23
07D5 1E2D2F3E1E2C2F3E (grfdrv_beta5_with):01973                  fcb   $1E,$2D,$2F,$3E,$1E,$2C,$2F,$3E  24-31
07DD 1618151716272626 (grfdrv_beta5_with):01974                  fcb   $16,$18,$15,$17,$16,$27,$26,$26  32-39
07E5 192A292A28292739 (grfdrv_beta5_with):01975                  fcb   $19,$2A,$29,$2A,$28,$29,$27,$39  40-47
07ED 2424232225253434 (grfdrv_beta5_with):01976                  fcb   $24,$24,$23,$22,$25,$25,$34,$34  48-55
07F5 203B313D36383330 (grfdrv_beta5_with):01977                  fcb   $20,$3B,$31,$3D,$36,$38,$33,$30  56-63
                      (grfdrv_beta5_with):01978         
                      (grfdrv_beta5_with):01979         * Original 64 color translation table for RGB to composite monitor
                      (grfdrv_beta5_with):01980         *L0884    fcb   $00,$0c,$02,$0e,$07,$09,$05,$10
                      (grfdrv_beta5_with):01981         *         fcb   $1c,$2c,$0d,$1d,$0b,$1b,$0a,$2b
                      (grfdrv_beta5_with):01982         *         fcb   $22,$11,$12,$21,$03,$01,$13,$32
                      (grfdrv_beta5_with):01983         *         fcb   $1e,$2d,$1f,$2e,$0f,$3c,$2f,$3d
                      (grfdrv_beta5_with):01984         *         fcb   $17,$08,$15,$06,$27,$16,$26,$36
                      (grfdrv_beta5_with):01985         *         fcb   $19,$2a,$1a,$3a,$18,$29,$28,$38
                      (grfdrv_beta5_with):01986         *         fcb   $14,$04,$23,$33,$25,$35,$24,$34
                      (grfdrv_beta5_with):01987         *         fcb   $20,$3b,$31,$3e,$37,$39,$3f,$30
                      (grfdrv_beta5_with):01988         
                      (grfdrv_beta5_with):01989         * DefGPB entry point
07FD 8D03             (grfdrv_beta5_with):01990         L08DC    bsr   L08E1        go do it
07FF 7E50A5           (grfdrv_beta5_with):01991                  jmp   >GrfStrt+SysRet return to system
                      (grfdrv_beta5_with):01992         
                      (grfdrv_beta5_with):01993         * Entry point for internal DefGPB (Ex. Overlay window)
0802 DC80             (grfdrv_beta5_with):01994         L08E1    ldd   <$80         get buffer length requested
0804 C3001F           (grfdrv_beta5_with):01995                  addd  #$001F       round it up to even multiples of 32 bytes
0807 C4E0             (grfdrv_beta5_with):01996                  andb  #$E0         (to allow for header)        
0809 DD80             (grfdrv_beta5_with):01997                  std   <$80         Preserve new value
080B D657             (grfdrv_beta5_with):01998                  ldb   <$57         get group
080D 5C               (grfdrv_beta5_with):01999                  incb               Overlay window save (B was $FF)?
080E 2708             (grfdrv_beta5_with):02000                  beq   L08F8        yes, skip ahead
0810 0D32             (grfdrv_beta5_with):02001                  tst   <$32         No, has there been any buffers?
0812 2704             (grfdrv_beta5_with):02002                  beq   L08F8        no, go make one
0814 8D3A             (grfdrv_beta5_with):02003                  bsr   L0930        Yes, see if we can fit one in
0816 2472             (grfdrv_beta5_with):02004                  bcc   L096A        Return Bad/Undefined buffer error
0818 DC80             (grfdrv_beta5_with):02005         L08F8    ldd   <$80         get requested length including header
081A 10832000         (grfdrv_beta5_with):02006                  cmpd  #$2000       over 8k?
081E 220A             (grfdrv_beta5_with):02007                  bhi   L090A        yes, skip ahead
0820 8D73             (grfdrv_beta5_with):02008                  bsr   L0975        Find block & offset to put it (new or old)
0822 2506             (grfdrv_beta5_with):02009                  bcs   L090A        If couldn't find/allocate, skip ahead
0824 8601             (grfdrv_beta5_with):02010                  lda   #$01         1 8K block used for this buffer
0826 A70F             (grfdrv_beta5_with):02011                  sta   Grf.NBlk,x
0828 2005             (grfdrv_beta5_with):02012                  bra   L090F        Skip ahead
                      (grfdrv_beta5_with):02013         
                      (grfdrv_beta5_with):02014         * Couldn't find existing block that would fit it
082A 17009A           (grfdrv_beta5_with):02015         L090A    lbsr  L09A8        Go allocate blocks & map 1st one in
082D 251B             (grfdrv_beta5_with):02016                  bcs   L0928        Error, exit with it
082F D77D             (grfdrv_beta5_with):02017         L090F    stb   <$007D       Save start block #
0831 9F7E             (grfdrv_beta5_with):02018                  stx   <$007E       Save offset into block
0833 1700E1           (grfdrv_beta5_with):02019                  lbsr  L09FC        Update get/put buffer header & last used in global
0836 DC57             (grfdrv_beta5_with):02020                  ldd   <$0057       Get group & buffer #
0838 ED03             (grfdrv_beta5_with):02021                  std   Grf.Grp,x    save group & buffer # into buffer header
083A DC80             (grfdrv_beta5_with):02022                  ldd   <$0080       Get buffer size (not including header)
083C ED05             (grfdrv_beta5_with):02023                  std   Grf.BSz,x    save buffer size in buffer header
                      (grfdrv_beta5_with):02024                IFNE  H6309
                      (grfdrv_beta5_with):02025                  clrd
                      (grfdrv_beta5_with):02026                  clrw
                      (grfdrv_beta5_with):02027                  stq   Grf.XSz,x    Init X and Y sizes to 0
                      (grfdrv_beta5_with):02028                ELSE
083E 4F               (grfdrv_beta5_with):02029                  clra
083F 5F               (grfdrv_beta5_with):02030                  clrb
0840 ED07             (grfdrv_beta5_with):02031                  std   Grf.XSz,x
0842 ED09             (grfdrv_beta5_with):02032                  std   Grf.XSz+2,x
0844 DDB5             (grfdrv_beta5_with):02033                  std   <$B5
                      (grfdrv_beta5_with):02034                ENDC
0846 ED0C             (grfdrv_beta5_with):02035                  std   Grf.LfPx,x   Init Pixel masks for 1st & last bytes in block
0848 E70E             (grfdrv_beta5_with):02036                  stb   Grf.STY,x    set internal screen type marker
084A 39               (grfdrv_beta5_with):02037         L0928    rts   
                      (grfdrv_beta5_with):02038         
                      (grfdrv_beta5_with):02039         * Set vector for overlay window buffer search
084B 8E485F           (grfdrv_beta5_with):02040         L092B    ldx   #GrfStrt+L093F  Point to overlay window bffr search routine
084E 2003             (grfdrv_beta5_with):02041                  bra   L0933        set the vector & do search
                      (grfdrv_beta5_with):02042         
                      (grfdrv_beta5_with):02043         * Set vector for graphics buffer search
0850 8E4869           (grfdrv_beta5_with):02044         L0930    ldx   #GrfStrt+L0949  Point to normal buffer search routine
0853 9FA1             (grfdrv_beta5_with):02045         L0933    stx   <$A1         save the search routine vector
0855 8D37             (grfdrv_beta5_with):02046                  bsr   L096E        initialize previous table pointers
0857 D632             (grfdrv_beta5_with):02047                  ldb   <$32         get the last block # we used for buffers
0859 272F             (grfdrv_beta5_with):02048                  beq   L096A        Wasn't one, return error
085B 9E33             (grfdrv_beta5_with):02049                  ldx   <$33         get last offset
085D 2022             (grfdrv_beta5_with):02050                  bra   L0961        go map it in & do search routine
                      (grfdrv_beta5_with):02051         
                      (grfdrv_beta5_with):02052         * Overlay window buffer search
085F E1A811           (grfdrv_beta5_with):02053         L093F    cmpb  Wt.OBlk,y    is this the right overlay?
0862 2613             (grfdrv_beta5_with):02054                  bne   L0957        no, move to next one and come back again
0864 ACA812           (grfdrv_beta5_with):02055                  cmpx  Wt.OOff,y    set conditions for offset match
0867 200C             (grfdrv_beta5_with):02056                  bra   L0955        go check it
                      (grfdrv_beta5_with):02057         
                      (grfdrv_beta5_with):02058         * Graphics buffer search
0869 9657             (grfdrv_beta5_with):02059         L0949    lda   <$0057       get group we're looking for
086B A103             (grfdrv_beta5_with):02060                  cmpa  Grf.Grp,x    find it?
086D 2608             (grfdrv_beta5_with):02061                  bne   L0957        nope, keep looking
086F 9658             (grfdrv_beta5_with):02062                  lda   <$0058       get buffer #
0871 2715             (grfdrv_beta5_with):02063                  beq   L0968        done, return
0873 A104             (grfdrv_beta5_with):02064                  cmpa  Grf.Buff,x   match?
0875 2711             (grfdrv_beta5_with):02065         L0955    beq   L0968        yes, return
0877 D77D             (grfdrv_beta5_with):02066         L0957    stb   <$007D       save it as previous block #
0879 9F7E             (grfdrv_beta5_with):02067                  stx   <$007E       save previous offset
087B E684             (grfdrv_beta5_with):02068                  ldb   Grf.Bck,x    get back block # link
087D 270B             (grfdrv_beta5_with):02069                  beq   L096A        there isn't one, return
087F AE01             (grfdrv_beta5_with):02070                  ldx   Grf.Off,x    get offset
0881 170F87           (grfdrv_beta5_with):02071         L0961    lbsr  L017C        go map it in
0884 6E9F11A1         (grfdrv_beta5_with):02072                  jmp   [>GrfMem+gr00A1]     Do search again
0888 4F               (grfdrv_beta5_with):02073         L0968    clra               No error & exit
0889 39               (grfdrv_beta5_with):02074                  rts
                      (grfdrv_beta5_with):02075         
088A 53               (grfdrv_beta5_with):02076         L096A    comb               Bad buffer # error & exit
088B C6C2             (grfdrv_beta5_with):02077                  ldb   #E$BadBuf
088D 39               (grfdrv_beta5_with):02078                  rts
                      (grfdrv_beta5_with):02079         
                      (grfdrv_beta5_with):02080         * Initialize previous buffer pointers
     088E             (grfdrv_beta5_with):02081         L096E    equ   *
                      (grfdrv_beta5_with):02082                IFNE  H6309
                      (grfdrv_beta5_with):02083                  clrd
                      (grfdrv_beta5_with):02084                ELSE
088E 4F               (grfdrv_beta5_with):02085                  clra
088F 5F               (grfdrv_beta5_with):02086                  clrb
                      (grfdrv_beta5_with):02087                ENDC
0890 D77D             (grfdrv_beta5_with):02088                  stb   <$7D         Buffer block #
0892 DD7E             (grfdrv_beta5_with):02089                  std   <$7E         Buffer offset #
0894 39               (grfdrv_beta5_with):02090                  rts   
                      (grfdrv_beta5_with):02091         
                      (grfdrv_beta5_with):02092         * Called by DefGPB
                      (grfdrv_beta5_with):02093         * Find get/put buffer & block # with room (or make new one)
                      (grfdrv_beta5_with):02094         * Exit: B=Block #, X=Ptr to where next GP buffer could go
0895 3424             (grfdrv_beta5_with):02095         L0975    pshs  b,y          Preserve regs
0897 109E80           (grfdrv_beta5_with):02096                  ldy   <$0080       get size of buffer requested
089A 8E49F4           (grfdrv_beta5_with):02097                  ldx   #GrfStrt+L0AE0  Set vector to find empty space in a block big
089D 9FA1             (grfdrv_beta5_with):02098                  stx   <$00A1         enough to fit the size we want
089F 170145           (grfdrv_beta5_with):02099                  lbsr  L0ACD        Go find it
08A2 2521             (grfdrv_beta5_with):02100                  bcs   L09A6        Couldn't find, exit with carry set
08A4 E7E4             (grfdrv_beta5_with):02101                  stb   ,s           Change B on stack to block # we found
08A6 EC05             (grfdrv_beta5_with):02102                  ldd   Grf.BSz,x    Get buffer size from GP header
08A8 9380             (grfdrv_beta5_with):02103                  subd  <$0080       Subtract the buffer size we need
08AA 260E             (grfdrv_beta5_with):02104                  bne   L099B        If not exact fit, skip ahead
08AC 3410             (grfdrv_beta5_with):02105                  pshs  x            Preserve GP buffer ptr a sec
08AE 170086           (grfdrv_beta5_with):02106                  lbsr  L0A1C        Map in previous block or new block?
08B1 3510             (grfdrv_beta5_with):02107                  puls  x            Restore GP buffer ptr
08B3 E6E4             (grfdrv_beta5_with):02108                  ldb   ,s           Get block # we found
08B5 170F53           (grfdrv_beta5_with):02109                  lbsr  L017C        Go map it in
08B8 200A             (grfdrv_beta5_with):02110                  bra   L09A5        exit without error
08BA 830020           (grfdrv_beta5_with):02111         L099B    subd  #$0020       Don't include GP header in GP's buffer size
08BD ED05             (grfdrv_beta5_with):02112                  std   Grf.BSz,x    Store size into GP header's size
08BF 308820           (grfdrv_beta5_with):02113                  leax  Grf.Siz,x    Point to start of actual GP buffer data
08C2 308B             (grfdrv_beta5_with):02114                  leax  d,x          Point to where next GP buffer will go
08C4 4F               (grfdrv_beta5_with):02115         L09A5    clra               No error
08C5 35A4             (grfdrv_beta5_with):02116         L09A6    puls  pc,y,b       Restore regs and return
                      (grfdrv_beta5_with):02117         
                      (grfdrv_beta5_with):02118         * If initial search couldn't find/fit block, or if size>8K, go here
                      (grfdrv_beta5_with):02119         * Some of stack pushing/Temp storing could be done in E/F instead
                      (grfdrv_beta5_with):02120         * Particularily <$99
                      (grfdrv_beta5_with):02121         * Map in buffer needed (or 1st block of it if >8K)
08C7 DC80             (grfdrv_beta5_with):02122         L09A8    ldd   <$80         Get original size we wanted
08C9 C30020           (grfdrv_beta5_with):02123                  addd  #$0020       Add block header size
08CC DD97             (grfdrv_beta5_with):02124                  std   <$97         Preserve into temp area
08CE C31FFF           (grfdrv_beta5_with):02125                  addd  #$1FFF       Round up to 8K 
08D1 44               (grfdrv_beta5_with):02126                  lsra               Divide by 32 for # blocks needed
08D2 44               (grfdrv_beta5_with):02127                  lsra  
08D3 44               (grfdrv_beta5_with):02128                  lsra  
08D4 44               (grfdrv_beta5_with):02129                  lsra  
08D5 44               (grfdrv_beta5_with):02130                  lsra  
08D6 1F89             (grfdrv_beta5_with):02131                  tfr   a,b          Dupe into B
                      (grfdrv_beta5_with):02132                IFNE  H6309
                      (grfdrv_beta5_with):02133                  tfr   a,f          And into F
                      (grfdrv_beta5_with):02134                ELSE
08D8 97B6             (grfdrv_beta5_with):02135                  sta   <$B6
                      (grfdrv_beta5_with):02136                ENDC
08DA 103F39           (grfdrv_beta5_with):02137                  os9   F$AllRAM     Allocate memory
08DD 2537             (grfdrv_beta5_with):02138                  bcs   L09FB        Couldn't allocate, return with error
                      (grfdrv_beta5_with):02139                IFNE  H6309
                      (grfdrv_beta5_with):02140                  tfr   b,e          Preserve start block #
                      (grfdrv_beta5_with):02141                  cmpf  #$01
                      (grfdrv_beta5_with):02142                ELSE
08DF D7B5             (grfdrv_beta5_with):02143                  stb   <$B5
08E1 D6B6             (grfdrv_beta5_with):02144                  ldb   <$B6         regB does not need to be preserved
08E3 C101             (grfdrv_beta5_with):02145                  cmpb  #1
                      (grfdrv_beta5_with):02146                ENDC
08E5 2222             (grfdrv_beta5_with):02147                  bhi   L09EE        If more than 1 block requested, skip ahead
08E7 CC2000           (grfdrv_beta5_with):02148                  ldd   #$2000       8k
08EA 9397             (grfdrv_beta5_with):02149                  subd  <$97         Calculate # bytes left in block after our buffer
08EC 841F             (grfdrv_beta5_with):02150                  anda  #$1F         Round to within 8K
08EE DD9B             (grfdrv_beta5_with):02151                  std   <$9B         Store in another temp
08F0 2717             (grfdrv_beta5_with):02152                  beq   L09EE        Exact size of 8K block, skip ahead
08F2 CC2000           (grfdrv_beta5_with):02153                  ldd   #$2000       Size of block
08F5 939B             (grfdrv_beta5_with):02154                  subd  <$9B         subtract rounded size left in block
08F7 8B20             (grfdrv_beta5_with):02155                  adda  #$20         Add 8K so it points to address in GRFDRV's get/
08F9 1F01             (grfdrv_beta5_with):02156                  tfr   d,x          put buffer block (which is where it will be)
                      (grfdrv_beta5_with):02157                IFNE  H6309
                      (grfdrv_beta5_with):02158                  tfr   e,b          B=Start block # of allocated RAM
                      (grfdrv_beta5_with):02159                ELSE
08FB D6B5             (grfdrv_beta5_with):02160                  ldb   <$B5
                      (grfdrv_beta5_with):02161                ENDC
08FD 170F0B           (grfdrv_beta5_with):02162                  lbsr  L017C        map it in
0900 8D25             (grfdrv_beta5_with):02163                  bsr   L0A0C        Set up new block hdr's back links & current
0902 DC9B             (grfdrv_beta5_with):02164                  ldd   <$9B         Get # bytes left in block
0904 830020           (grfdrv_beta5_with):02165                  subd  #$0020       Subtract header size
0907 ED05             (grfdrv_beta5_with):02166                  std   Grf.BSz,x    Preserve buffer size in header
0909 8E2000           (grfdrv_beta5_with):02167         L09EE    ldx   #$2000       Start address of GRFDRV's get/put buffer block
                      (grfdrv_beta5_with):02168                IFNE  H6309
                      (grfdrv_beta5_with):02169                  tfr   e,b          Move start block # to proper register
                      (grfdrv_beta5_with):02170                ELSE
090C D6B5             (grfdrv_beta5_with):02171                  ldb   <$B5
                      (grfdrv_beta5_with):02172                ENDC
090E 170EFA           (grfdrv_beta5_with):02173                  lbsr  L017C        Map it in
                      (grfdrv_beta5_with):02174                IFNE  H6309
                      (grfdrv_beta5_with):02175                  stf   Grf.NBlk,x   Save # of blocks needed for whole buffer
                      (grfdrv_beta5_with):02176                ELSE
0911 96B6             (grfdrv_beta5_with):02177                  lda   <$B6
0913 A70F             (grfdrv_beta5_with):02178                  sta   Grf.NBlk,x
                      (grfdrv_beta5_with):02179                ENDC
0915 4F               (grfdrv_beta5_with):02180                  clra               No error & return
0916 39               (grfdrv_beta5_with):02181         L09FB    rts   
                      (grfdrv_beta5_with):02182         
                      (grfdrv_beta5_with):02183         * Update last get/put buffer used info & Get/Put buffer header
                      (grfdrv_beta5_with):02184         * Updates $32 & $33-$34
                      (grfdrv_beta5_with):02185         * Entry: D=Size left in second block
0917 3406             (grfdrv_beta5_with):02186         L09FC    pshs  d           Preserve D
0919 9632             (grfdrv_beta5_with):02187                  lda   <$32        Get last mapped in block for Get/Put buffers
091B A784             (grfdrv_beta5_with):02188                  sta   Grf.Bck,x   Make that the block # for our header
091D D732             (grfdrv_beta5_with):02189                  stb   <$32        Put our new last mapped block
091F DC33             (grfdrv_beta5_with):02190                  ldd   <$33        Get last mapped offset
0921 ED01             (grfdrv_beta5_with):02191                  std   Grf.Off,x   Put that into our header
0923 9F33             (grfdrv_beta5_with):02192                  stx   <$33        Put our new offset into the last mapped offset
0925 3586             (grfdrv_beta5_with):02193                  puls  pc,d        restore D & return
                      (grfdrv_beta5_with):02194         
                      (grfdrv_beta5_with):02195         * Update current get/put buffer info & Get/Put Buffer header
                      (grfdrv_beta5_with):02196         * Updates $35 & $36-$37
                      (grfdrv_beta5_with):02197         *Entry: X=ptr to start of buffer header in GRFDRV's 2nd block (Get/put buffer)
0927 3406             (grfdrv_beta5_with):02198         L0A0C    pshs  d           Preserve D
0929 9635             (grfdrv_beta5_with):02199                  lda   <$35        Get current block/group #
092B A784             (grfdrv_beta5_with):02200                  sta   Grf.Bck,x   Make new block's back ptrs. point to it
092D D735             (grfdrv_beta5_with):02201                  stb   <$35        Make current ptr to start block we just allocated
092F DC36             (grfdrv_beta5_with):02202                  ldd   <$36        Get current offset
0931 ED01             (grfdrv_beta5_with):02203                  std   Grf.Off,x   Put into new block's offset
0933 9F36             (grfdrv_beta5_with):02204                  stx   <$36        Make current offset our new one
0935 3586             (grfdrv_beta5_with):02205                  puls  pc,d        Restore D and return
                      (grfdrv_beta5_with):02206         
                      (grfdrv_beta5_with):02207         * Make current GP buffer block & offset same as previous block & offset
                      (grfdrv_beta5_with):02208         *  (or map in new one and set it's header up if there is no previous one)
0937 3422             (grfdrv_beta5_with):02209         L0A1C    pshs  y,a           Preserve regs
0939 A684             (grfdrv_beta5_with):02210                  lda   Grf.Bck,x     get back block link #
093B 10AE01           (grfdrv_beta5_with):02211                  ldy   Grf.Off,x     Get offset in back block to it's header
093E 9E7E             (grfdrv_beta5_with):02212                  ldx   <$7E          Get previous blocks offset to buffer
0940 D67D             (grfdrv_beta5_with):02213                  ldb   <$7D          and it's block #
0942 2607             (grfdrv_beta5_with):02214                  bne   L0A30         None mapped in, go map it in
0944 9735             (grfdrv_beta5_with):02215                  sta   <$35          Make into current block & offset
0946 109F36           (grfdrv_beta5_with):02216                  sty   <$36
0949 35A2             (grfdrv_beta5_with):02217                  puls  pc,y,a        Restore regs & return
                      (grfdrv_beta5_with):02218         
094B 170EBD           (grfdrv_beta5_with):02219         L0A30    lbsr  L017C         Bring in 8K buffer block we need
094E A784             (grfdrv_beta5_with):02220                  sta   Grf.Bck,x     Set up GP block header
0950 10AF01           (grfdrv_beta5_with):02221                  sty   Grf.Off,x
0953 35A2             (grfdrv_beta5_with):02222         L0A38    puls  pc,y,a
                      (grfdrv_beta5_with):02223         
                      (grfdrv_beta5_with):02224         * KillBuf entry point
0955 C601             (grfdrv_beta5_with):02225         L0A3A    ldb   #$01          Set a temporary flag
0957 D797             (grfdrv_beta5_with):02226                  stb   <$0097
0959 17FEF4           (grfdrv_beta5_with):02227         L0A3E    lbsr  L0930         Go search for buffer (returns X=Buffer ptr)
095C 250A             (grfdrv_beta5_with):02228                  bcs   L0A4D         Couldn't find it, exit
095E 0F97             (grfdrv_beta5_with):02229                  clr   <$0097        Found it, clear flag
0960 8D0E             (grfdrv_beta5_with):02230                  bsr   L0A55
0962 2509             (grfdrv_beta5_with):02231                  bcs   L0A52
0964 D658             (grfdrv_beta5_with):02232                  ldb   <$0058
0966 27F1             (grfdrv_beta5_with):02233                  beq   L0A3E
0968 9697             (grfdrv_beta5_with):02234         L0A4D    lda   <$0097        Get flag
096A 2601             (grfdrv_beta5_with):02235                  bne   L0A52         Didn't get killed, return to system with error
096C 5F               (grfdrv_beta5_with):02236                  clrb                No error
096D 7E50A5           (grfdrv_beta5_with):02237         L0A52    jmp   >GrfStrt+SysRet  Return to system
                      (grfdrv_beta5_with):02238         
0970 3434             (grfdrv_beta5_with):02239         L0A55    pshs  y,x,b         Preserve regs (Window tbl ptr,gfx bffr ptr,block#)
0972 A60F             (grfdrv_beta5_with):02240                  lda   Grf.NBlk,x    Get # blocks used
0974 979F             (grfdrv_beta5_with):02241                  sta   <$009F        Save it
0976 A684             (grfdrv_beta5_with):02242                  lda   Grf.Bck,x     Get back block #
0978 10AE01           (grfdrv_beta5_with):02243                  ldy   Grf.Off,x     Get back block header offset
097B D67D             (grfdrv_beta5_with):02244                  ldb   <$007D        Get current buffer block #
097D 2607             (grfdrv_beta5_with):02245                  bne   L0A6B         There is one, continue
097F 9732             (grfdrv_beta5_with):02246                  sta   <$0032        Save back block as last block used
0981 109F33           (grfdrv_beta5_with):02247                  sty   <$0033        And it's offset
0984 200A             (grfdrv_beta5_with):02248                  bra   L0A75
                      (grfdrv_beta5_with):02249         
0986 170E82           (grfdrv_beta5_with):02250         L0A6B    lbsr  L017C         Go map in GP Block
0989 9E7E             (grfdrv_beta5_with):02251                  ldx   <$007E
098B A784             (grfdrv_beta5_with):02252                  sta   Grf.Bck,x
098D 10AF01           (grfdrv_beta5_with):02253                  sty   Grf.Off,x
0990 E6E4             (grfdrv_beta5_with):02254         L0A75    ldb   ,s            Get block #
0992 969F             (grfdrv_beta5_with):02255                  lda   <$009F        Get # of blocks used
0994 8101             (grfdrv_beta5_with):02256                  cmpa  #$01          >1?
0996 2E20             (grfdrv_beta5_with):02257                  bgt   L0A9E         Yes, go handle
0998 1F98             (grfdrv_beta5_with):02258                  tfr   b,a           Just one, move block # to A
099A 8D26             (grfdrv_beta5_with):02259                  bsr   L0AA8
099C 2411             (grfdrv_beta5_with):02260                  bcc   L0A94
099E 8E4A08           (grfdrv_beta5_with):02261                  ldx   #GrfStrt+L0AF4
09A1 9FA1             (grfdrv_beta5_with):02262                  stx   <$00A1
09A3 AE61             (grfdrv_beta5_with):02263                  ldx   1,s
09A5 8D40             (grfdrv_beta5_with):02264                  bsr   L0ACD
09A7 170E61           (grfdrv_beta5_with):02265                  lbsr  L017C
09AA 17FF7A           (grfdrv_beta5_with):02266                  lbsr  L0A0C
09AD 35B4             (grfdrv_beta5_with):02267                  puls  pc,y,x,b
                      (grfdrv_beta5_with):02268         
09AF 8E4A32           (grfdrv_beta5_with):02269         L0A94    ldx   #GrfStrt+L0B1E
09B2 9FA1             (grfdrv_beta5_with):02270                  stx   <$00A1
09B4 AE61             (grfdrv_beta5_with):02271                  ldx   1,s
09B6 8D2F             (grfdrv_beta5_with):02272                  bsr   L0ACD
09B8 4F               (grfdrv_beta5_with):02273         L0A9E    clra  
09B9 1F01             (grfdrv_beta5_with):02274                  tfr   d,x
09BB D69F             (grfdrv_beta5_with):02275                  ldb   <$009F
09BD 103F51           (grfdrv_beta5_with):02276                  os9   F$DelRAM       Deallocate the memory
09C0 35B4             (grfdrv_beta5_with):02277         L0AA6    puls  pc,y,x,b
                      (grfdrv_beta5_with):02278         
                      (grfdrv_beta5_with):02279         * Entry: A=block #
09C2 3414             (grfdrv_beta5_with):02280         L0AA8    pshs  x,b
09C4 D632             (grfdrv_beta5_with):02281                  ldb   <$0032
09C6 2719             (grfdrv_beta5_with):02282                  beq   L0AC7
09C8 9132             (grfdrv_beta5_with):02283                  cmpa  <$0032
09CA 2718             (grfdrv_beta5_with):02284                  beq   L0ACA
09CC 9E33             (grfdrv_beta5_with):02285                  ldx   <$0033
09CE 200C             (grfdrv_beta5_with):02286                  bra   L0AC2
                      (grfdrv_beta5_with):02287         
09D0 A184             (grfdrv_beta5_with):02288         L0AB6    cmpa  Grf.Bck,x
09D2 2710             (grfdrv_beta5_with):02289                  beq   L0ACA
09D4 6D84             (grfdrv_beta5_with):02290                  tst   Grf.Bck,x
09D6 2709             (grfdrv_beta5_with):02291                  beq   L0AC7
09D8 E684             (grfdrv_beta5_with):02292                  ldb   Grf.Bck,x
09DA AE01             (grfdrv_beta5_with):02293                  ldx   Grf.Off,x
09DC 170E2C           (grfdrv_beta5_with):02294         L0AC2    lbsr  L017C
09DF 20EF             (grfdrv_beta5_with):02295                  bra   L0AB6
                      (grfdrv_beta5_with):02296         
09E1 5F               (grfdrv_beta5_with):02297         L0AC7    clrb  
09E2 3594             (grfdrv_beta5_with):02298                  puls  pc,x,b
                      (grfdrv_beta5_with):02299         
09E4 53               (grfdrv_beta5_with):02300         L0ACA    comb  
09E5 3594             (grfdrv_beta5_with):02301                  puls  pc,x,b
                      (grfdrv_beta5_with):02302         
                      (grfdrv_beta5_with):02303         * Subroutine called by L0975 (of DefGPB)
                      (grfdrv_beta5_with):02304         * Entry: Y=Size of buffer requested (including $20 byte header)
09E7 3416             (grfdrv_beta5_with):02305         L0ACD    pshs  d,x          Preserve regs
09E9 17FEA2           (grfdrv_beta5_with):02306         L0ACF    lbsr  L096E        initialize previous buffer ptrs to 0 ($7D-$7F)
09EC D635             (grfdrv_beta5_with):02307                  ldb   <$35         get last buffer block #
09EE 2759             (grfdrv_beta5_with):02308                  beq   L0B35        If 0, exit with carry set
09F0 9E36             (grfdrv_beta5_with):02309                  ldx   <$36         get offset of last one into 8K block
09F2 204E             (grfdrv_beta5_with):02310                  bra   L0B2E        Go map in get/put memory block & continue
                      (grfdrv_beta5_with):02311         
                      (grfdrv_beta5_with):02312         * <8K buffer define vector goes here
                      (grfdrv_beta5_with):02313         * Entry: X=Offset to current buffer being checked in current 8K block
                      (grfdrv_beta5_with):02314         *        Y=Size wanted
09F4 10AC05           (grfdrv_beta5_with):02315         L0AE0    cmpy  Grf.BSz,x    Will requested size fit?
09F7 223D             (grfdrv_beta5_with):02316                  bhi   L0B22        Too big, keep looking backwards
09F9 2051             (grfdrv_beta5_with):02317                  bra   L0B38        Exit with carry clear & B=block #, X=offset
                      (grfdrv_beta5_with):02318         
09FB 1F30             (grfdrv_beta5_with):02319         L0AE7    tfr   u,d
09FD E345             (grfdrv_beta5_with):02320                  addd  Grf.BSz,u
09FF C30020           (grfdrv_beta5_with):02321                  addd  #Grf.Siz
                      (grfdrv_beta5_with):02322                IFNE  H6309
                      (grfdrv_beta5_with):02323                  cmpr  x,d
                      (grfdrv_beta5_with):02324                ELSE
0A02 9FBF             (grfdrv_beta5_with):02325                  stx    <grScrtch
0A04 1093BF           (grfdrv_beta5_with):02326                  cmpd   <grScrtch
                      (grfdrv_beta5_with):02327                ENDC
0A07 39               (grfdrv_beta5_with):02328                  rts   
                      (grfdrv_beta5_with):02329         
                      (grfdrv_beta5_with):02330         * A vectored routine (usually pointed to by $A1)
0A08 E161             (grfdrv_beta5_with):02331         L0AF4    cmpb  1,s
0A0A 262A             (grfdrv_beta5_with):02332                  bne   L0B22
0A0C EE62             (grfdrv_beta5_with):02333                  ldu   2,s
0A0E E684             (grfdrv_beta5_with):02334                  ldb   Grf.Bck,x
0A10 E7C4             (grfdrv_beta5_with):02335                  stb   Grf.Bck,u
0A12 EC01             (grfdrv_beta5_with):02336                  ldd   Grf.Off,x
0A14 ED41             (grfdrv_beta5_with):02337                  std   Grf.Off,u
0A16 1E13             (grfdrv_beta5_with):02338                  exg   x,u
0A18 8DE1             (grfdrv_beta5_with):02339                  bsr   L0AE7
0A1A 2706             (grfdrv_beta5_with):02340                  beq   L0B0E
0A1C 1E13             (grfdrv_beta5_with):02341                  exg   x,u
0A1E 8DDB             (grfdrv_beta5_with):02342                  bsr   L0AE7
0A20 2614             (grfdrv_beta5_with):02343                  bne   L0B22
0A22 EF62             (grfdrv_beta5_with):02344         L0B0E    stu   2,s
0A24 EC45             (grfdrv_beta5_with):02345                  ldd   Grf.BSz,u
0A26 E305             (grfdrv_beta5_with):02346                  addd  Grf.BSz,x
0A28 C30020           (grfdrv_beta5_with):02347                  addd  #Grf.Siz
0A2B ED45             (grfdrv_beta5_with):02348                  std   Grf.BSz,u
0A2D 17FF07           (grfdrv_beta5_with):02349         L0B19    lbsr  L0A1C
0A30 20B7             (grfdrv_beta5_with):02350                  bra   L0ACF
                      (grfdrv_beta5_with):02351         
0A32 E1E4             (grfdrv_beta5_with):02352         L0B1E    cmpb  ,s
0A34 27F7             (grfdrv_beta5_with):02353                  beq   L0B19
                      (grfdrv_beta5_with):02354         * Search backwards through existing 8K blocks allocated for Get/Put buffers
                      (grfdrv_beta5_with):02355         * until we hit beginning
0A36 D68A             (grfdrv_beta5_with):02356         L0B22    ldb   <$8A         Get GrfDrv MMU block # for get/put buffer block
0A38 D77D             (grfdrv_beta5_with):02357                  stb   <$7D         Move to block #
0A3A 9F7E             (grfdrv_beta5_with):02358                  stx   <$7E         Save offset into block as well
0A3C E684             (grfdrv_beta5_with):02359                  ldb   Grf.Bck,x    Get back block link #
0A3E 2709             (grfdrv_beta5_with):02360                  beq   L0B35        None, exit with carry set
0A40 AE01             (grfdrv_beta5_with):02361                  ldx   Grf.Off,x    Get back block header offset
                      (grfdrv_beta5_with):02362         * Entry: X=offset into current 8K buffer/block # last used for buffer
0A42 170DC6           (grfdrv_beta5_with):02363         L0B2E    lbsr  L017C        Map in Get/Put buffer memory block
0A45 6E9F11A1         (grfdrv_beta5_with):02364                  jmp   [>GrfMem+gr00A1]     Jump to vector (can be AE0 below)
                      (grfdrv_beta5_with):02365         
0A49 53               (grfdrv_beta5_with):02366         L0B35    comb               Set carry, restore regs & return
0A4A 3596             (grfdrv_beta5_with):02367                  puls  pc,x,d
                      (grfdrv_beta5_with):02368         
0A4C E761             (grfdrv_beta5_with):02369         L0B38    stb   1,s          Buffer fits, put block & offset into B & X
0A4E AF62             (grfdrv_beta5_with):02370                  stx   2,s
0A50 5F               (grfdrv_beta5_with):02371                  clrb               No error
0A51 3596             (grfdrv_beta5_with):02372                  puls  pc,x,d       Restore new regs and return
                      (grfdrv_beta5_with):02373         
                      (grfdrv_beta5_with):02374         * GPLoad entry point
0A53 17FDFA           (grfdrv_beta5_with):02375         L0B3F    lbsr  L0930        go look for group/buffer # requested
0A56 2510             (grfdrv_beta5_with):02376                  bcs   L0B52        Didn't find, go create one
                      (grfdrv_beta5_with):02377                IFNE  H6309
                      (grfdrv_beta5_with):02378                  ldw   Wt.BLen,y    Get size requested
                      (grfdrv_beta5_with):02379                  cmpw  Grf.BSz,x    Will it fit in existing buffer?
                      (grfdrv_beta5_with):02380                ELSE
0A58 3406             (grfdrv_beta5_with):02381                  pshs  d
0A5A ECA81F           (grfdrv_beta5_with):02382                  ldd   Wt.BLen,y    Get size requested
0A5D DDB5             (grfdrv_beta5_with):02383                  std   <$B5
0A5F 10A305           (grfdrv_beta5_with):02384                  cmpd  Grf.BSz,x    Will it fit in existing buffer?
0A62 3506             (grfdrv_beta5_with):02385                  puls  d
                      (grfdrv_beta5_with):02386                ENDC
0A64 230E             (grfdrv_beta5_with):02387                  bls   L0B60        Yes, go do it
0A66 2079             (grfdrv_beta5_with):02388                  bra   L0BE4        No, exit with buffer size too small error
                      (grfdrv_beta5_with):02389                  
0A68 ECA81F           (grfdrv_beta5_with):02390         L0B52    ldd   Wt.BLen,y    Get size requested
0A6B DD80             (grfdrv_beta5_with):02391                  std   <$0080       Save in grfdrv mem
0A6D 17FD92           (grfdrv_beta5_with):02392                  lbsr  L08E1        Go define a get/put buffer for ourselves
0A70 2572             (grfdrv_beta5_with):02393                  bcs   L0BE7       Couldn't find room, exit with error
0A72 D67D             (grfdrv_beta5_with):02394                  ldb   <$007D       Get buffer block #
0A74 E7A821           (grfdrv_beta5_with):02395         L0B60    stb   Wt.NBlk,y    Save buffer block # to GPLoad into
                      (grfdrv_beta5_with):02396                IFNE  H6309
                      (grfdrv_beta5_with):02397                  clrd
                      (grfdrv_beta5_with):02398                ELSE
0A77 4F               (grfdrv_beta5_with):02399                  clra
0A78 5F               (grfdrv_beta5_with):02400                  clrb
                      (grfdrv_beta5_with):02401                ENDC
0A79 DD47             (grfdrv_beta5_with):02402                  std   <$47         Working X coord to 0?
0A7B D660             (grfdrv_beta5_with):02403                  ldb   <$60         Get screen type
                      (grfdrv_beta5_with):02404         * Possible bug: doesn't check if text screen first?
0A7D 17011D           (grfdrv_beta5_with):02405                  lbsr  L0C2B        Directly into Graphics size calculation
0A80 170156           (grfdrv_beta5_with):02406                  lbsr  L0C69        Go setup the GP buffer header
0A83 308820           (grfdrv_beta5_with):02407                  leax  Grf.Siz,x    Point past GP header (to where data would go)
0A86 AFA822           (grfdrv_beta5_with):02408                  stx   Wt.NOff,y    Save ptr to where next GPLoad will go
0A89 7E50A4           (grfdrv_beta5_with):02409                  jmp   >GrfStrt+L0F78 no errors, and exit
                      (grfdrv_beta5_with):02410         
                      (grfdrv_beta5_with):02411         * Move buffer entry point (This ONLY gets called via the Move Buffer vector
                      (grfdrv_beta5_with):02412         *   from CoGRF or CoWin)
                      (grfdrv_beta5_with):02413         * It's used to do Get/Put buffer loads in small chunks since GRFDRV's memory
                      (grfdrv_beta5_with):02414         *   map can't fit a window's static mem
                      (grfdrv_beta5_with):02415         * Entry: F=Byte count (Maximum value=72 / $42 is in constant gb0000. Default 72, there is room for a little more
                      (grfdrv_beta5_with):02416         *        (On 6809, this value is at <$B6)
                      (grfdrv_beta5_with):02417         * Will be single pass of up to 72 bytes if we are not crossing an MMU boundary. Done in
                      (grfdrv_beta5_with):02418         * 2 chunks if we are crossing an MMU boundary
                      (grfdrv_beta5_with):02419         *        Y=Window table ptr
0A8C E6A821           (grfdrv_beta5_with):02420         L0B79    ldb   Wt.NBlk,y    get block # for next graphic buffer
0A8F D797             (grfdrv_beta5_with):02421                  stb   <$0097       save it
0A91 170D77           (grfdrv_beta5_with):02422                  lbsr  L017C        go map it in (uses B only, does not modify registers)
0A94 AEA822           (grfdrv_beta5_with):02423                  ldx   Wt.NOff,y    get offset into block (dest ptr)
0A97 CE1200           (grfdrv_beta5_with):02424                  ldu   #GPBuf       ($1200) Point to buffer of where GRFInt/CoWin put info (src ptr)
                      (grfdrv_beta5_with):02425                IFNE  H6309
                      (grfdrv_beta5_with):02426                  clre               make 16 bit number in W
                      (grfdrv_beta5_with):02427                  tfr   w,d          dupe count into D
                      (grfdrv_beta5_with):02428                  addr  x,d          Point to current block offset+size of request
                      (grfdrv_beta5_with):02429                ELSE
0A9A 4F               (grfdrv_beta5_with):02430                  clra               Make copy size 16 bits in both D and <$B5
0A9B 97B5             (grfdrv_beta5_with):02431                  sta   <$B5
0A9D D6B6             (grfdrv_beta5_with):02432                  ldb   <$B6         This was set in CoWin (# bytes to copy - max 72)
0A9F 9FBF             (grfdrv_beta5_with):02433                  stx   <grScrtch    Add size to destination ptr
0AA1 D3BF             (grfdrv_beta5_with):02434                  addd  <grScrtch    
                      (grfdrv_beta5_with):02435                ENDC 
0AA3 8140             (grfdrv_beta5_with):02436                  cmpa  #$40         Past end of GP buffer's 8K block?
0AA5 2521             (grfdrv_beta5_with):02437                  blo   MoveIt       No, go move whole thing in one shot
                      (grfdrv_beta5_with):02438         * Move data between 2 blocks of memory
0AA7 CC4000           (grfdrv_beta5_with):02439                  ldd   #$4000       calculate how much will fit in first pass
                      (grfdrv_beta5_with):02440                IFNE  H6309
                      (grfdrv_beta5_with):02441                  subr  x,d
                      (grfdrv_beta5_with):02442                  subr  d,w          move leftover to D
                      (grfdrv_beta5_with):02443                  exg   d,w          Move first chunk size to W
                      (grfdrv_beta5_with):02444                  tfm   u+,x+        move first chunk
                      (grfdrv_beta5_with):02445                  tfr   d,w          move leftover back to W
                      (grfdrv_beta5_with):02446                ELSE
0AAA 93BF             (grfdrv_beta5_with):02447                  subd  <grScrtch    Calculate how many bytes we are copying within current MMU block
0AAC 3426             (grfdrv_beta5_with):02448                  pshs  d,y          save D (# bytes we can copy in current block) & Y (window tbl ptr)
0AAE DCB5             (grfdrv_beta5_with):02449                  ldd   <$B5         Get size of copy again
0AB0 A3E4             (grfdrv_beta5_with):02450                  subd  ,s           Subtract # of bytes we can copy within current MMU block (subr d,w)
0AB2 DDB5             (grfdrv_beta5_with):02451                  std   <$B5         Save # of bytes to do on 2nd pass (other MMU block) this is the value of W after tfm/tfr d,w
0AB4 ECE1             (grfdrv_beta5_with):02452                  ldd   ,s++         get # bytes to copy in 1ast pass
0AB6 2704             (grfdrv_beta5_with):02453                  beq   LMoveb       If none, skip to 2nd pass
0AB8 3184             (grfdrv_beta5_with):02454                  leay  ,x           Move dest ptr to Y for subroutine
0ABA 8D2B             (grfdrv_beta5_with):02455                  bsr   StkBlCpy     Copy chunk over
0ABC 3520             (grfdrv_beta5_with):02456         LMoveb   puls  y            restore window table ptr
                      (grfdrv_beta5_with):02457                ENDC
0ABE 0C97             (grfdrv_beta5_with):02458                  inc   <$0097       increment to next block #
0AC0 D697             (grfdrv_beta5_with):02459                  ldb   <$0097       get new block #
0AC2 170D46           (grfdrv_beta5_with):02460                  lbsr  L017C        map it in (changes no registers), saves B only
0AC5 8E2000           (grfdrv_beta5_with):02461                  ldx   #$2000       reset dest pointer to start of block
                      (grfdrv_beta5_with):02462         * Entry: U=src ptr
                      (grfdrv_beta5_with):02463         *        X=dest ptr
                      (grfdrv_beta5_with):02464         *        W or <$B5=copy size (in bytes) for pass 2
     0AC8             (grfdrv_beta5_with):02465         MoveIt   equ   *
                      (grfdrv_beta5_with):02466                IFNE  H6309
                      (grfdrv_beta5_with):02467                  tfm   u+,x+        Block copy buffer into GP buffer
                      (grfdrv_beta5_with):02468                ELSE
0AC8 DCB5             (grfdrv_beta5_with):02469                  ldd   <$B5         Get # of bytes to copy
0ACA 270A             (grfdrv_beta5_with):02470                  beq   L0BA2        None left, skip ahead
0ACC 3420             (grfdrv_beta5_with):02471                  pshs  y            Preserve Window table ptr
0ACE 3184             (grfdrv_beta5_with):02472                  leay  ,x           Move dest ptr to Y
0AD0 8D15             (grfdrv_beta5_with):02473                  bsr   StkBlCpy     Copy chunk
0AD2 30A4             (grfdrv_beta5_with):02474                  leax  ,y           Move dest ptr to X (to save below)
0AD4 3520             (grfdrv_beta5_with):02475                  puls  y            Get window table ptr back
                      (grfdrv_beta5_with):02476                ENDC
0AD6 D697             (grfdrv_beta5_with):02477         L0BA2    ldb   <$0097       get the block #
0AD8 E7A821           (grfdrv_beta5_with):02478                  stb   Wt.NBlk,y    update it in table
0ADB AFA822           (grfdrv_beta5_with):02479                  stx   Wt.NOff,y    save next offset in table
0ADE 7E50A4           (grfdrv_beta5_with):02480                  jmp   >GrfStrt+L0F78 no errors, and exit grfdrv
                      (grfdrv_beta5_with):02481         
0AE1 53               (grfdrv_beta5_with):02482         L0BE4    comb                 Buffer size too small error
0AE2 C6BF             (grfdrv_beta5_with):02483                  ldb   #E$BufSiz
0AE4 7E50A5           (grfdrv_beta5_with):02484         L0BE7    jmp   >GrfStrt+SysRet
                      (grfdrv_beta5_with):02485         
                      (grfdrv_beta5_with):02486         * NOTE: Once we have it working, will move to be near screen scrolling, so we can BSR
                      (grfdrv_beta5_with):02487         * from there. That will be used much more often then loading a GP buffer
                      (grfdrv_beta5_with):02488                IFEQ  H6309
                      (grfdrv_beta5_with):02489         * Mini stack blast copy - works on odd # of bytes. Will use stack pull 4 bytes/time when
                      (grfdrv_beta5_with):02490         * possible.
                      (grfdrv_beta5_with):02491         * If you know that you are doing even 4 byte multiple, you will need D & Y pushed to the stack
                      (grfdrv_beta5_with):02492         *   and enter with X being the end copy address (for source)
                      (grfdrv_beta5_with):02493         * Entry: D=size of copy
                      (grfdrv_beta5_with):02494         *        U=Source ptr
                      (grfdrv_beta5_with):02495         *        Y=Dest ptr
                      (grfdrv_beta5_with):02496         * Exit: U=ptr to end of source
                      (grfdrv_beta5_with):02497         *       Y=ptr to end of dest
                      (grfdrv_beta5_with):02498         * X not preserved!
0AE7 3426             (grfdrv_beta5_with):02499         StkBlCpy pshs  d,y            Save dest ptr & size
0AE9 30CB             (grfdrv_beta5_with):02500                  leax  d,u            Point to end of source copy
0AEB 3410             (grfdrv_beta5_with):02501                  pshs  x              Save that as where to stop copying
0AED C403             (grfdrv_beta5_with):02502                  andb  #$03           1st, check if non-even multiple of 4 bytes
0AEF 270F             (grfdrv_beta5_with):02503                  beq   ChkBlst        Even multiple of 4, go straight to mini-stack blast
0AF1 A6C0             (grfdrv_beta5_with):02504         OddCpy   lda   ,u+            Otherwise, copy 1-3 bytes 1 at at time until we line up with a 4 byte boundary
0AF3 A7A0             (grfdrv_beta5_with):02505                  sta   ,y+            
0AF5 5A               (grfdrv_beta5_with):02506                  decb                 Done odd bytes?
0AF6 26F9             (grfdrv_beta5_with):02507                  bne   OddCpy         No, keep copying 1 at a time
0AF8 2006             (grfdrv_beta5_with):02508                  bra   ChkBlst        Yes, finish any remaining 4 bytes/time with stack blast*
                      (grfdrv_beta5_with):02509         
                      (grfdrv_beta5_with):02510         * Mini stack blast copy - does 4 byte stack blast for read, 4 byte 'normal' write
                      (grfdrv_beta5_with):02511         * 35 cycles/4 bytes copied
                      (grfdrv_beta5_with):02512         * Entry: U=ptr to src
                      (grfdrv_beta5_with):02513         *        Y=ptr to dest
                      (grfdrv_beta5_with):02514         *        0,s=ptr to stop at (for source)
0AFA 3716             (grfdrv_beta5_with):02515         BlstCpy  pulu  d,x            (9 cyc) Get 4 bytes really quickly
0AFC EDA1             (grfdrv_beta5_with):02516                  std   ,y++           (8 cyc) Save them in output buffer. 
0AFE AFA1             (grfdrv_beta5_with):02517                  stx   ,y++           (8 cyc) 
0B00 11A3E4           (grfdrv_beta5_with):02518         ChkBlst  cmpu  ,s             (7 cyc) Are we done?
0B03 25F5             (grfdrv_beta5_with):02519                  blo   BlstCpy        (3 cyc)
0B05 10AF64           (grfdrv_beta5_with):02520                  sty   4,s            Save new dest address (is this needed)
0B08 3262             (grfdrv_beta5_with):02521                  leas  2,s            Eat stop address
0B0A 35A6             (grfdrv_beta5_with):02522                  puls  d,y,pc         Restore regs & return
                      (grfdrv_beta5_with):02523                ENDC
                      (grfdrv_beta5_with):02524         
                      (grfdrv_beta5_with):02525         
                      (grfdrv_beta5_with):02526         * GetBlk entry point
0B0C 171678           (grfdrv_beta5_with):02527         L0BAE    lbsr  L1DF6          Go scale X/Y coords @ <$47-$4A,check if in range
0B0F 25D3             (grfdrv_beta5_with):02528                  bcs   L0BE7          No, exit with error
                      (grfdrv_beta5_with):02529                IFNE  H6309
                      (grfdrv_beta5_with):02530                  ldq   <$4f           Get X/Y sizes
                      (grfdrv_beta5_with):02531                  decd                 Bump down by 1 each since size, not coord
                      (grfdrv_beta5_with):02532                  decw
                      (grfdrv_beta5_with):02533                  stq   <$4f           Save
                      (grfdrv_beta5_with):02534                ELSE
0B11 DC51             (grfdrv_beta5_with):02535                  ldd   <$51
0B13 830001           (grfdrv_beta5_with):02536                  subd  #1
0B16 DD51             (grfdrv_beta5_with):02537                  std   <$51
0B18 DDB5             (grfdrv_beta5_with):02538                  std   <$B5
0B1A DC4F             (grfdrv_beta5_with):02539                  ldd   <$4f
0B1C 830001           (grfdrv_beta5_with):02540                  subd  #1
0B1F DD4F             (grfdrv_beta5_with):02541                  std   <$4f
                      (grfdrv_beta5_with):02542                ENDC
0B21 171689           (grfdrv_beta5_with):02543                  lbsr  L1E01          Go scale X/Y Sizes @ <$4f-$52,check if in range 
0B24 25BE             (grfdrv_beta5_with):02544                  bcs   L0BE7          No, exit with error
                      (grfdrv_beta5_with):02545                IFNE  H6309
                      (grfdrv_beta5_with):02546                  ldq   <$4f           Get X/Y sizes
                      (grfdrv_beta5_with):02547                  incd                 Bump back up
                      (grfdrv_beta5_with):02548                  incw
                      (grfdrv_beta5_with):02549                  stq   <$4f           Save
                      (grfdrv_beta5_with):02550                ELSE
0B26 DC51             (grfdrv_beta5_with):02551                  ldd   <$51
0B28 C30001           (grfdrv_beta5_with):02552                  addd  #1
0B2B DD51             (grfdrv_beta5_with):02553                  std   <$51
0B2D DDB5             (grfdrv_beta5_with):02554                  std   <$B5
0B2F DC4F             (grfdrv_beta5_with):02555                  ldd   <$4f
0B31 C30001           (grfdrv_beta5_with):02556                  addd  #1
0B34 DD4F             (grfdrv_beta5_with):02557                  std   <$4f
                      (grfdrv_beta5_with):02558                ENDC
0B36 17F5BF           (grfdrv_beta5_with):02559                  lbsr  L0177          Map in window & setup some GRFDRV vars.
0B39 8D47             (grfdrv_beta5_with):02560                  bsr   L0C0B          Calc width of buffer in bytes & next line offset
0B3B 17FD12           (grfdrv_beta5_with):02561                  lbsr  L0930          Go search for GP buffer
0B3E 2407             (grfdrv_beta5_with):02562                  bcc   L0BC9          Found it, skip ahead
0B40 17FCBF           (grfdrv_beta5_with):02563                  lbsr  L08E1          Couldn't, create one
0B43 240D             (grfdrv_beta5_with):02564                  bcc   L0BD4          Got one, skip ahead
0B45 209D             (grfdrv_beta5_with):02565                  bra   L0BE7          Otherwise, exit with error
                      (grfdrv_beta5_with):02566         
                      (grfdrv_beta5_with):02567         * Found GP buffer already defined
0B47 D77D             (grfdrv_beta5_with):02568         L0BC9    stb   <$007D         Save block #
0B49 9F7E             (grfdrv_beta5_with):02569                  stx   <$007E         Save offset into block
0B4B DC80             (grfdrv_beta5_with):02570                  ldd   <$0080         Get buffer length
0B4D 10A305           (grfdrv_beta5_with):02571                  cmpd  Grf.BSz,x      Within range of buffer's current length?
0B50 228F             (grfdrv_beta5_with):02572                  bhi   L0BE4          No, exit with Buffer Size Too Small error
                      (grfdrv_beta5_with):02573         * GP buffer will fit requested data size
0B52 170084           (grfdrv_beta5_with):02574         L0BD4    lbsr  L0C69          Go set up the GP buffer's header
0B55 1707FE           (grfdrv_beta5_with):02575                  lbsr  L1E9D          Go calculate addr. on screen to start GETting @
0B58 9F72             (grfdrv_beta5_with):02576                  stx   <$0072         Save it
0B5A 9E7E             (grfdrv_beta5_with):02577                  ldx   <$007E         Get offset into GP buffer block
0B5C 17009D           (grfdrv_beta5_with):02578                  lbsr  L0C8D          Go copy from screen into buffer
0B5F 7E50A4           (grfdrv_beta5_with):02579         L0BE1    jmp   >GrfStrt+L0F78 exit with no errors
                      (grfdrv_beta5_with):02580         
                      (grfdrv_beta5_with):02581         * Save switch on- comes here to save screen contents under overlay window
                      (grfdrv_beta5_with):02582         * into a get/put buffer
                      (grfdrv_beta5_with):02583         * Entry: Y=Current (or current Overlay) window ptr
0B62 EC33             (grfdrv_beta5_with):02584         L0BEA    ldd   Wt.LStrt,y      Get screen logical start address
0B64 DD72             (grfdrv_beta5_with):02585                  std   <$72            Make it the overlay window save start
0B66 8D1A             (grfdrv_beta5_with):02586                  bsr   L0C0B           Calculate sizes in bytes, etc.
0B68 CCFFFF           (grfdrv_beta5_with):02587                  ldd   #$FFFF          Group & buffer # to $FF
0B6B DD57             (grfdrv_beta5_with):02588                  std   <$57
0B6D 17FC92           (grfdrv_beta5_with):02589                  lbsr  L08E1           Define get/put buffer for overlay window
0B70 250F             (grfdrv_beta5_with):02590                  bcs   L0C0A           Error defining buffer;exit with it
0B72 D67D             (grfdrv_beta5_with):02591                  ldb   <$007D          Get MMU block # for overlay window copy
0B74 E7A811           (grfdrv_beta5_with):02592                  stb   Wt.OBlk,y       Save in window table
0B77 DC7E             (grfdrv_beta5_with):02593                  ldd   <$007E          Get offset into MMU block for overlay window copy
0B79 EDA812           (grfdrv_beta5_with):02594                  std   Wt.OOff,y       Save it in window table
0B7C 8D5B             (grfdrv_beta5_with):02595                  bsr   L0C69           Set up get/put buffer header
0B7E 8D7C             (grfdrv_beta5_with):02596                  bsr   L0C8D           Preserve screen under overlay window
0B80 5F               (grfdrv_beta5_with):02597                  clrb                  No error & return
0B81 39               (grfdrv_beta5_with):02598         L0C0A    rts   
                      (grfdrv_beta5_with):02599         
                      (grfdrv_beta5_with):02600         * Setup # bytes wide overlay window is & offset to get to next line in overlay
                      (grfdrv_beta5_with):02601         *   window when saving/restoring
                      (grfdrv_beta5_with):02602         * Entry: Y=Current (or current Overlay) window ptr
0B82 D660             (grfdrv_beta5_with):02603         L0C0B    ldb   <$60            Get screen type
0B84 2A07             (grfdrv_beta5_with):02604                  bpl   L0C18           If gfx window, skip ahead
0B86 D650             (grfdrv_beta5_with):02605                  ldb   <$50            Get LSB of X size of overlay window
0B88 58               (grfdrv_beta5_with):02606                  lslb                  Multiply x2 (for attribute byte)
0B89 D709             (grfdrv_beta5_with):02607                  stb   <$09            Save width of window (in bytes)
0B8B 2004             (grfdrv_beta5_with):02608                  bra   L0C1C           Skip ahead
                      (grfdrv_beta5_with):02609         
0B8D 8D0E             (grfdrv_beta5_with):02610         L0C18    bsr   L0C2B           Calculate width info for Gfx windows
0B8F D609             (grfdrv_beta5_with):02611                  ldb   <$09            Get # bytes for width of window
0B91 9652             (grfdrv_beta5_with):02612         L0C1C    lda   <$52            Get height of window in bytes
0B93 3D               (grfdrv_beta5_with):02613                  mul                   Calculate total # bytes needed
0B94 DD80             (grfdrv_beta5_with):02614                  std   <$80            Preserve # bytes needed to hold saved area
0B96 D663             (grfdrv_beta5_with):02615                  ldb   <$63            Get # bytes per row on screen
0B98 D009             (grfdrv_beta5_with):02616                  subb  <$09            Subtract # bytes wide saved area will be
0B9A D70A             (grfdrv_beta5_with):02617                  stb   <$0A            Store # bytes to next line after current width is done
0B9C 39               (grfdrv_beta5_with):02618                  rts                   Return
                      (grfdrv_beta5_with):02619         
                      (grfdrv_beta5_with):02620         * Calculate GP buffer width in bytes for graphics, & # pixels used in first &
                      (grfdrv_beta5_with):02621         *  last bytes of each GP buffer line
                      (grfdrv_beta5_with):02622         *   (Used by GetBlk, GPLoad, OWSet)
                      (grfdrv_beta5_with):02623         * Entry: B=Screen type
0B9D 8607             (grfdrv_beta5_with):02624         L0C2B    lda   #%00000111      2 color divide by 8 mask
0B9F 5A               (grfdrv_beta5_with):02625                  decb  
0BA0 2706             (grfdrv_beta5_with):02626                  beq   L0C38           For 640x200x2 screens
0BA2 44               (grfdrv_beta5_with):02627                  lsra                  %00000011 divide by 2 mask
0BA3 C103             (grfdrv_beta5_with):02628                  cmpb  #$03            16 color?
0BA5 2601             (grfdrv_beta5_with):02629                  bne   L0C38           No, leave as 4 color divide by 2 mask
0BA7 44               (grfdrv_beta5_with):02630                  lsra                  16 color divide by 2 mask
0BA8 9797             (grfdrv_beta5_with):02631         L0C38    sta   <$97            Preserve mask for # pixels used in 1 byte
0BAA D648             (grfdrv_beta5_with):02632                  ldb   <$48            Get working X coordinate LSB (0 from OWSet)
0BAC 53               (grfdrv_beta5_with):02633                  comb                  Make 'hole' to calculate # pixels
0BAD D497             (grfdrv_beta5_with):02634                  andb  <$97            Use mask to calculate # pixels used
0BAF 5C               (grfdrv_beta5_with):02635                  incb                  Make base 1
0BB0 D706             (grfdrv_beta5_with):02636                  stb   <$06            Preserve # pixels used in 1st byte of GP line
0BB2 4F               (grfdrv_beta5_with):02637                  clra                  D=# pixels used in last byte
0BB3 10934F           (grfdrv_beta5_with):02638                  cmpd  <$4F            More than # bytes on screen?
0BB6 2C0B             (grfdrv_beta5_with):02639                  bge   L0C53           Yes, 
0BB8 D650             (grfdrv_beta5_with):02640                  ldb   <$50            Otherwise, get LSB of X size in bytes
0BBA D006             (grfdrv_beta5_with):02641                  subb  <$06            Subtract # pixels used in first byte
0BBC D497             (grfdrv_beta5_with):02642                  andb  <$97            Calculate # pixels in last byte
0BBE 2603             (grfdrv_beta5_with):02643                  bne   L0C53           If not 0, it is legit
0BC0 D697             (grfdrv_beta5_with):02644                  ldb   <$97            If it is 0, then use full byte's worth
0BC2 5C               (grfdrv_beta5_with):02645                  incb
0BC3 D707             (grfdrv_beta5_with):02646         L0C53    stb   <$07            Save # pixels used in last byte of GP line
0BC5 4F               (grfdrv_beta5_with):02647                  clra                  D=# of pixels wide GP buffer is
0BC6 D648             (grfdrv_beta5_with):02648                  ldb   <$48            Get LSB of 'working' X coordinate
0BC8 D497             (grfdrv_beta5_with):02649                  andb  <$97            AND it with # pixels/byte
0BCA D34F             (grfdrv_beta5_with):02650                  addd  <$4F            Add value to X size (in bytes)
0BCC DB97             (grfdrv_beta5_with):02651                  addb  <$97            Add # pixels/byte
0BCE 8900             (grfdrv_beta5_with):02652                  adca  #$00            Make into D register
                      (grfdrv_beta5_with):02653         * Divide loop: Divide by 4 for 16 color, by 8 for 4 color & by 16 for 2 color
     0BD0             (grfdrv_beta5_with):02654         L0C60    equ   *
                      (grfdrv_beta5_with):02655                IFNE  H6309
                      (grfdrv_beta5_with):02656                  lsrd                  Divide by 2
                      (grfdrv_beta5_with):02657                ELSE
0BD0 44               (grfdrv_beta5_with):02658                  lsra
0BD1 56               (grfdrv_beta5_with):02659                  rorb
                      (grfdrv_beta5_with):02660                ENDC
0BD2 0497             (grfdrv_beta5_with):02661                  lsr   <$97            Shift right
0BD4 26FA             (grfdrv_beta5_with):02662                  bne   L0C60           until we hit first 0 bit
0BD6 D709             (grfdrv_beta5_with):02663                  stb   <$09            # bytes for width of overlay window
0BD8 39               (grfdrv_beta5_with):02664                  rts   
                      (grfdrv_beta5_with):02665         
                      (grfdrv_beta5_with):02666         * Setup buffer header
     0BD9             (grfdrv_beta5_with):02667         L0C69    equ   *
                      (grfdrv_beta5_with):02668                IFNE  H6309
                      (grfdrv_beta5_with):02669                  ldq   <$004F       get X & Y sizes (in pixels)
                      (grfdrv_beta5_with):02670                  stq   Grf.XSz,x    save it in buffer header
                      (grfdrv_beta5_with):02671                ELSE
0BD9 DC51             (grfdrv_beta5_with):02672                  ldd   <$51
0BDB ED09             (grfdrv_beta5_with):02673                  std   Grf.XSz+2,x
0BDD DDB5             (grfdrv_beta5_with):02674                  std   <$B5 
0BDF DC4F             (grfdrv_beta5_with):02675                  ldd   <$4F
0BE1 ED07             (grfdrv_beta5_with):02676                  std   Grf.XSz,x
                      (grfdrv_beta5_with):02677                ENDC
0BE3 D660             (grfdrv_beta5_with):02678                  ldb   <$0060       get screen type
0BE5 E70E             (grfdrv_beta5_with):02679                  stb   Grf.STY,x    save it in header
0BE7 DC06             (grfdrv_beta5_with):02680                  ldd   <$0006       Get start & end pixel masks (for uneven bytes)
0BE9 ED0C             (grfdrv_beta5_with):02681                  std   Grf.LfPx,x   save them in header
0BEB D609             (grfdrv_beta5_with):02682                  ldb   <$0009       Get width of buffer in bytes?
0BED E70B             (grfdrv_beta5_with):02683                  stb   Grf.XBSz,x   save it in header
0BEF 4F               (grfdrv_beta5_with):02684                  clra               D=B
0BF0 DD4F             (grfdrv_beta5_with):02685                  std   <$004F       Save into working X coord
0BF2 39               (grfdrv_beta5_with):02686                  rts   
                      (grfdrv_beta5_with):02687         
                      (grfdrv_beta5_with):02688         * Move get/put buffer to screen
                      (grfdrv_beta5_with):02689         * Entry: Y=Ptr to GP buffer?
0BF3 30A4             (grfdrv_beta5_with):02690         L0C81    leax  ,y           X=Ptr to GP buffer
0BF5 9697             (grfdrv_beta5_with):02691                  lda   <$0097       Get # bytes to start on next GP line on screen
0BF7 970A             (grfdrv_beta5_with):02692                  sta   <$000A       Save in another spot
0BF9 8601             (grfdrv_beta5_with):02693                  lda   #$01         flag we're going to screen
0BFB 21               (grfdrv_beta5_with):02694                  fcb   $21          skip 1 byte
                      (grfdrv_beta5_with):02695         * Move get/put buffer to mem
0BFC 4F               (grfdrv_beta5_with):02696         L0C8D    clra               Flag we're going to memory
0BFD 9799             (grfdrv_beta5_with):02697                  sta   <$0099       save flag
                      (grfdrv_beta5_with):02698         * Move buffer to screen/mem
                      (grfdrv_beta5_with):02699         * Attempt reversing roles of D & W
0BFF 3420             (grfdrv_beta5_with):02700                  pshs  y            preserve y
0C01 318820           (grfdrv_beta5_with):02701                  leay  Grf.Siz,x    get pointer to raw buffer data
0C04 9E72             (grfdrv_beta5_with):02702                  ldx   <$0072       get address of screen
0C06 D650             (grfdrv_beta5_with):02703         L0C96    ldb   <$0050       Get width count of buffer
0C08 8D09             (grfdrv_beta5_with):02704                  bsr   PutOneL      put one line
0C0A D60A             (grfdrv_beta5_with):02705                  ldb   <$000A       get width # bytes to start of next GP line on scrn
0C0C 3A               (grfdrv_beta5_with):02706                  abx                move to next line
0C0D 0A52             (grfdrv_beta5_with):02707                  dec   <$0052       done height?
0C0F 26F5             (grfdrv_beta5_with):02708                  bne   L0C96        no, go do next line
0C11 35A0             (grfdrv_beta5_with):02709                  puls  pc,y         restore & return
                      (grfdrv_beta5_with):02710         
                      (grfdrv_beta5_with):02711         * put one line from a GP buffer onto the screen
0C13 4F               (grfdrv_beta5_with):02712         PutOneL  clra               make 16-bit number of width of GP buffer
                      (grfdrv_beta5_with):02713                IFNE  H6309
                      (grfdrv_beta5_with):02714                  tfr   d,w          copy it to W
                      (grfdrv_beta5_with):02715                  addr  y,d          check if we will need to get next GP 8k bank
                      (grfdrv_beta5_with):02716                ELSE
0C14 DDB5             (grfdrv_beta5_with):02717                  std   <$B5
0C16 109FBF           (grfdrv_beta5_with):02718                  sty   <grScrtch
0C19 D3BF             (grfdrv_beta5_with):02719                  addd  <grScrtch
                      (grfdrv_beta5_with):02720                ENDC
0C1B 8140             (grfdrv_beta5_with):02721                  cmpa  #$40         do we?
0C1D 251B             (grfdrv_beta5_with):02722                  blo   L0C98        nope, go do it
0C1F CC4000           (grfdrv_beta5_with):02723                  ldd   #$4000       calculate # bytes we can do from this 8k bank
                      (grfdrv_beta5_with):02724                IFNE  H6309
                      (grfdrv_beta5_with):02725                  subr  y,d
                      (grfdrv_beta5_with):02726                  subr  d,w          calculate leftover into W
                      (grfdrv_beta5_with):02727                  exg   d,w          Swap for copy
                      (grfdrv_beta5_with):02728                ELSE
0C22 109FBF           (grfdrv_beta5_with):02729                  sty   <grScrtch
0C25 93BF             (grfdrv_beta5_with):02730                  subd  <grScrtch    D=D-Y
0C27 3446             (grfdrv_beta5_with):02731                  pshs  d,u          save regD & regU
0C29 DCB5             (grfdrv_beta5_with):02732                  ldd   <$B5         get regW
0C2B A3E4             (grfdrv_beta5_with):02733                  subd  ,s           subr d,w regD now = regW
0C2D EEE1             (grfdrv_beta5_with):02734                  ldu   ,s++         get regD
0C2F DFB5             (grfdrv_beta5_with):02735                  stu   <$B5         exg d,w
0C31 3540             (grfdrv_beta5_with):02736                  puls  u
                      (grfdrv_beta5_with):02737                ENDC
0C33 8D05             (grfdrv_beta5_with):02738                  bsr   L0C98        move first chunk
                      (grfdrv_beta5_with):02739                IFNE  H6309
                      (grfdrv_beta5_with):02740                  tfr   d,w          Move remainder to W
                      (grfdrv_beta5_with):02741                ELSE
0C35 DDB5             (grfdrv_beta5_with):02742                  std   <$B5         Save size to copy in 2nd chunk
                      (grfdrv_beta5_with):02743                ENDC
0C37 17025D           (grfdrv_beta5_with):02744                  lbsr  L0E70        go map in next block & reset buffer pointer
                      (grfdrv_beta5_with):02745         * Move a graphics line of data
                      (grfdrv_beta5_with):02746         * Entry: W=# contiguous bytes to move
0C3A 0D99             (grfdrv_beta5_with):02747         L0C98    tst   <$0099       going to screen or mem?
0C3C 260F             (grfdrv_beta5_with):02748                  bne   L0CA2        screen, go move it
                      (grfdrv_beta5_with):02749                IFNE  H6309
                      (grfdrv_beta5_with):02750                  tfm   x+,y+        Copy from screen to mem
                      (grfdrv_beta5_with):02751                  rts
                      (grfdrv_beta5_with):02752                  
                      (grfdrv_beta5_with):02753                ELSE
                      (grfdrv_beta5_with):02754         * Entry: X=src ptr
                      (grfdrv_beta5_with):02755         *        Y=Dest ptr
                      (grfdrv_beta5_with):02756         *        <$B5=# of bytes to copy
                      (grfdrv_beta5_with):02757         * Exit:  X=end src ptr
                      (grfdrv_beta5_with):02758         *        Y=end dest ptr
                      (grfdrv_beta5_with):02759         *        A,U is preserved
                      (grfdrv_beta5_with):02760         *      <$B5 zeroed out (this may not be necessary)
0C3E 3456             (grfdrv_beta5_with):02761         CallCpy  pshs   d,x,u      Preserve size, X (src ptr), U
0C40 3384             (grfdrv_beta5_with):02762                  leau   ,x         U=src ptr
0C42 DCB5             (grfdrv_beta5_with):02763                  ldd    <$B5       D=# of bytes to copy
0C44 2705             (grfdrv_beta5_with):02764                  beq    LMove3b    If none, restore regs & exit
0C46 17FE9E           (grfdrv_beta5_with):02765                  lbsr   StkBlCpy   Go copy line
0C49 EF62             (grfdrv_beta5_with):02766                  stu    2,s        Save updated src ptr on stack to pull into X
0C4B 35D6             (grfdrv_beta5_with):02767         LMove3b  puls  d,x,u,pc
                      (grfdrv_beta5_with):02768                ENDC
                      (grfdrv_beta5_with):02769         
     0C4D             (grfdrv_beta5_with):02770         L0CA2    equ   *
                      (grfdrv_beta5_with):02771                IFNE  H6309
                      (grfdrv_beta5_with):02772                  tfm   y+,x+        Copy from mem to screen
                      (grfdrv_beta5_with):02773                  rts
                      (grfdrv_beta5_with):02774         
                      (grfdrv_beta5_with):02775                ELSE
                      (grfdrv_beta5_with):02776         * Change to use mem copy vector later
0C4D 1E12             (grfdrv_beta5_with):02777                   exg   x,y
0C4F 8DED             (grfdrv_beta5_with):02778                   bsr   CallCpy
0C51 1E12             (grfdrv_beta5_with):02779                   exg   x,y
0C53 39               (grfdrv_beta5_with):02780                   rts
                      (grfdrv_beta5_with):02781                ENDC
                      (grfdrv_beta5_with):02782         
                      (grfdrv_beta5_with):02783         * PutBlk entry point
                      (grfdrv_beta5_with):02784         * NOTE: POSSIBLE EXTENSION - ALLOW NEGATIVE START X/Y COORDS, SO THAT ONE CAN SCROLL GET/PUT
                      (grfdrv_beta5_with):02785         *  BUFFERS OFF THE TOP/LEFT OF THE SCREEN. USE SIGNED 16 BIT NUMBERS FOR X/Y START COORDS.
                      (grfdrv_beta5_with):02786         * CLIPPING ON BOTTOM WAS ALREADY DONE BY ALAN FOR HIGH SPEED; NEED TO ALLOW SAME FOR OTHER 3
                      (grfdrv_beta5_with):02787         * SIDES (NOTE BY LCB)
                      (grfdrv_beta5_with):02788         * Entry from GRF/WINDInt:
                      (grfdrv_beta5_with):02789         * <$57=Group #
                      (grfdrv_beta5_with):02790         * <$58=Buffer #
                      (grfdrv_beta5_with):02791         * <$47=Upper left X coord
                      (grfdrv_beta5_with):02792         * <$49=Upper left Y coord
                      (grfdrv_beta5_with):02793         * Uses:
                      (grfdrv_beta5_with):02794         * <$4F=X size of GP buffer (bytes)
                      (grfdrv_beta5_with):02795         * <$51=Y size of GP buffer
0C54 17F4A1           (grfdrv_beta5_with):02796         L0CBB    lbsr  L0177        Go map in window & setup some GRFDRV vars
0C57 17FBF6           (grfdrv_beta5_with):02797                  lbsr  L0930        search & map in get put buffer
0C5A 254A             (grfdrv_beta5_with):02798                  bcs   L0CF5        Error; exit with it
0C5C D77D             (grfdrv_beta5_with):02799                  stb   <$007D       save block # of buffer
0C5E 9F7E             (grfdrv_beta5_with):02800                  stx   <$007E       save offset into block buffer starts at
                      (grfdrv_beta5_with):02801                IFNE  H6309
                      (grfdrv_beta5_with):02802                  ldq   Grf.XSz,x    Get X&Y Sizes of buffer
                      (grfdrv_beta5_with):02803                  decd               Adjust since size, not coord
                      (grfdrv_beta5_with):02804                  decw
                      (grfdrv_beta5_with):02805                  stq   <$4F         Save them
                      (grfdrv_beta5_with):02806                ELSE
0C60 EC09             (grfdrv_beta5_with):02807                  ldd   Grf.YSz,x    Get Y size of GP buffer
0C62 830001           (grfdrv_beta5_with):02808                  subd  #1           base 0
0C65 DD51             (grfdrv_beta5_with):02809                  std   <$51         Save adjusted version
                      (grfdrv_beta5_with):02810         * 6809 - I don't think this std is needed (LCB)
0C67 DDB5             (grfdrv_beta5_with):02811                  std   <$B5
0C69 EC07             (grfdrv_beta5_with):02812                  ldd   Grf.XSz,x    Get X size of GP buffer
0C6B 830001           (grfdrv_beta5_with):02813                  subd  #1           base 0
0C6E DD4F             (grfdrv_beta5_with):02814                  std   <$4f         Save adjusted version
                      (grfdrv_beta5_with):02815                ENDC
0C70 171514           (grfdrv_beta5_with):02816                  lbsr  L1DF6        Check validity/scale starting X/Y coords
0C73 2531             (grfdrv_beta5_with):02817                  bcs   L0CF5        Error, exit with it
0C75 171535           (grfdrv_beta5_with):02818                  lbsr  L1E01        Check validity/scale X&Y sizes
0C78 252C             (grfdrv_beta5_with):02819                  bcs   L0CF5        Error; exit with it
                      (grfdrv_beta5_with):02820                IFNE  H6309
                      (grfdrv_beta5_with):02821                  ldq   <$4f         Adjust sizes back
                      (grfdrv_beta5_with):02822                  incd
                      (grfdrv_beta5_with):02823                  incw
                      (grfdrv_beta5_with):02824                  stq   <$4f
                      (grfdrv_beta5_with):02825                ELSE
0C7A DC51             (grfdrv_beta5_with):02826                  ldd   <$51         Adjust sizes back
0C7C C30001           (grfdrv_beta5_with):02827                  addd  #1
0C7F DD51             (grfdrv_beta5_with):02828                  std   <$51
                      (grfdrv_beta5_with):02829         * 6809 - I don't think this std is needed (LCB)
0C81 DDB5             (grfdrv_beta5_with):02830                  std   <$B5
0C83 DC4F             (grfdrv_beta5_with):02831                  ldd   <$4f
0C85 C30001           (grfdrv_beta5_with):02832                  addd  #1
0C88 DD4F             (grfdrv_beta5_with):02833                  std   <$4f
                      (grfdrv_beta5_with):02834                ENDC
0C8A 1706C9           (grfdrv_beta5_with):02835                  lbsr  L1E9D        calculate screen address & start pixel mask
0C8D 9F72             (grfdrv_beta5_with):02836                  stx   <$0072       save screen address
0C8F D774             (grfdrv_beta5_with):02837                  stb   <$0074       Save start pixel mask
0C91 109E7E           (grfdrv_beta5_with):02838                  ldy   <$007E       get ptr to GP buffer
0C94 8601             (grfdrv_beta5_with):02839                  lda   #$01         Flag to indicate we have to check size vs. window
0C96 8D2D             (grfdrv_beta5_with):02840                  bsr   L0D14        Go set up start/end pixel masks & check scrn types
0C98 2505             (grfdrv_beta5_with):02841                  bcs   L0CEE        If screen type different or has to be clipped, go
0C9A 1700D5           (grfdrv_beta5_with):02842                  lbsr  L0D9D        Screen types same & fits; do normal putting
0C9D 2006             (grfdrv_beta5_with):02843                  bra   L0CF4        return without error
                      (grfdrv_beta5_with):02844         * Get/put width buffer's original screen type being different from actual
                      (grfdrv_beta5_with):02845         *   screen type or will go ever edge of window go here
0C9F 170177           (grfdrv_beta5_with):02846         L0CEE    lbsr  L0E03        ??? Do set up for screen type conversions
0CA2 170219           (grfdrv_beta5_with):02847                  lbsr  L0E97        Do actual PUTting
0CA5 5F               (grfdrv_beta5_with):02848         L0CF4    clrb               No error & return to system
0CA6 7E50A5           (grfdrv_beta5_with):02849         L0CF5    jmp   >GrfStrt+SysRet
                      (grfdrv_beta5_with):02850         
                      (grfdrv_beta5_with):02851         * Place Overlay window's original contents back on screen
0CA9 3420             (grfdrv_beta5_with):02852         L0CF8    pshs  y            Preserve window table ptr
0CAB EC33             (grfdrv_beta5_with):02853                  ldd   Wt.LStrt,y   get screen logical start address
0CAD DD72             (grfdrv_beta5_with):02854                  std   <$0072       Save it
                      (grfdrv_beta5_with):02855                IFNE  H6309
                      (grfdrv_beta5_with):02856                  clrd
                      (grfdrv_beta5_with):02857                ELSE
0CAF 4F               (grfdrv_beta5_with):02858                  clra
0CB0 5F               (grfdrv_beta5_with):02859                  clrb
                      (grfdrv_beta5_with):02860                ENDC
0CB1 DD47             (grfdrv_beta5_with):02861                  std   <$0047       'Working' X Coord to 0
0CB3 109E7E           (grfdrv_beta5_with):02862                  ldy   <$007E       Get offset to buffer
0CB6 8D0D             (grfdrv_beta5_with):02863                  bsr   L0D14        Go verify that overlay can fit back on screen
0CB8 2506             (grfdrv_beta5_with):02864                  bcs   L0D0F        Couldn't put, exit with error
0CBA 17FF36           (grfdrv_beta5_with):02865                  lbsr  L0C81        Move get/put buffer to screen (fast put)
0CBD 5F               (grfdrv_beta5_with):02866                  clrb               No error & return
0CBE 35A0             (grfdrv_beta5_with):02867                  puls  pc,y
                      (grfdrv_beta5_with):02868         
0CC0 53               (grfdrv_beta5_with):02869         L0D0F    comb  
0CC1 C6BE             (grfdrv_beta5_with):02870                  ldb   #$BE         get internal integrity check error
0CC3 35A0             (grfdrv_beta5_with):02871                  puls  pc,y
                      (grfdrv_beta5_with):02872         
                      (grfdrv_beta5_with):02873         * Check for common color mode between window & buffer, and check if the
                      (grfdrv_beta5_with):02874         * PUT will need to be clipped. If screen types different or clipping
                      (grfdrv_beta5_with):02875         * required, exit with carry set
                      (grfdrv_beta5_with):02876         * 6809/6309 - LCB need to change: allow X clipping if screen type the same &
                      (grfdrv_beta5_with):02877         *   start pixel mask the same, and adjust X size (like Alan did with Y clipping)
0CC5 3410             (grfdrv_beta5_with):02878         L0D14    pshs  x            Save screen address
0CC7 D660             (grfdrv_beta5_with):02879                  ldb   <$0060       get screen type
0CC9 E12E             (grfdrv_beta5_with):02880                  cmpb  Grf.STY,y    Same as screen type of GP buffer's screen type?
0CCB 2711             (grfdrv_beta5_with):02881                  beq   GdTyp        Yes, no problem so far
                      (grfdrv_beta5_with):02882         * 03/03/93 mod: 4 color windows will count as same type
0CCD 5D               (grfdrv_beta5_with):02883                  tstb               (to properly check high bit)
0CCE 2B68             (grfdrv_beta5_with):02884                  bmi   L0D63        If text, exit with carry set
0CD0 C502             (grfdrv_beta5_with):02885                  bitb  #$02         Check 4 color mode bit
0CD2 2764             (grfdrv_beta5_with):02886                  beq   L0D63        Not a 4 color mode, so set carry & exit
                      (grfdrv_beta5_with):02887                IFNE  H6309
                      (grfdrv_beta5_with):02888                  tim   #$02,Grf.STY,y Check 4 color mode bit in buffer's screen type
                      (grfdrv_beta5_with):02889                ELSE
0CD4 3402             (grfdrv_beta5_with):02890                  pshs  a
0CD6 A62E             (grfdrv_beta5_with):02891                  lda   Grf.STY,y 
0CD8 8502             (grfdrv_beta5_with):02892                  bita  #2
0CDA 3502             (grfdrv_beta5_with):02893                  puls  a
                      (grfdrv_beta5_with):02894                ENDC
0CDC 275A             (grfdrv_beta5_with):02895                  beq   L0D63        It's not a 4 color mode, so set carry & exit
0CDE 5D               (grfdrv_beta5_with):02896         GdTyp    tstb               graphics window?
0CDF 2A08             (grfdrv_beta5_with):02897                  bpl   L0D27        yep, go on
0CE1 C6FF             (grfdrv_beta5_with):02898                  ldb   #$FF         Hardware text; group # forced to $FF (overlay window)
0CE3 D700             (grfdrv_beta5_with):02899                  stb   <$0000       Set right based pixel mask to all
0CE5 D701             (grfdrv_beta5_with):02900                  stb   <$0001       Ditto for left based
0CE7 2044             (grfdrv_beta5_with):02901                  bra   L0D58        Skip ahead
                      (grfdrv_beta5_with):02902         
                      (grfdrv_beta5_with):02903         * Process graphics put (A=1 if straight from PutBlk,0 if from OWEnd)
                      (grfdrv_beta5_with):02904         * If A=1, need to see if GP Buffer fits on window (L0D27 routine)
                      (grfdrv_beta5_with):02905         * If A=0, we already know it did, so we can skip size checks
                      (grfdrv_beta5_with):02906         * NOTE: If we are MANUALLY doing a hardware text get/put, this should A=1
                      (grfdrv_beta5_with):02907         *   and check to see it isn't running off the right (as opposed to Overlay)
                      (grfdrv_beta5_with):02908         * Should change CLIPPING checks so that it just changes some DP variables
                      (grfdrv_beta5_with):02909         *  for # bytes to print line, # bytes per line on screen & # bytes per line
                      (grfdrv_beta5_with):02910         *  in GP buffer. That way even byte/same color mode clipped GP buffers will go
                      (grfdrv_beta5_with):02911         *  full speed as well.
0CE9 8D7E             (grfdrv_beta5_with):02912         L0D27    bsr   L0D94        set up <$50 = X-count, <$52 = y-count
0CEB 4D               (grfdrv_beta5_with):02913                  tsta               Do we already know size is legit?
0CEC 2725             (grfdrv_beta5_with):02914                  beq   L0D3F        Yes, skip ahead
                      (grfdrv_beta5_with):02915         * don't bother for now to do clipping on X-boundaries, i.e. off rhs of the
                      (grfdrv_beta5_with):02916         * screen
                      (grfdrv_beta5_with):02917         
                      (grfdrv_beta5_with):02918         
                      (grfdrv_beta5_with):02919         * PROBLEM HERE - WHY RELOADING D TWICE? REMOVE FIRST LDD (BOTH 6809/6309). This was in 3.3.0 as well.
                      (grfdrv_beta5_with):02920         
0CEE EC27             (grfdrv_beta5_with):02921                  ldd   Grf.XSz,y    size in pixels of the GP buffer
0CF0 DC47             (grfdrv_beta5_with):02922                  ldd   <$0047       Get upper left X coord of PUT
                      (grfdrv_beta5_with):02923         
                      (grfdrv_beta5_with):02924         
0CF2 E327             (grfdrv_beta5_with):02925                  addd  Grf.XSz,y    Add X size of GP buffer
0CF4 10936A           (grfdrv_beta5_with):02926                  cmpd  <$006A       past max X coord.?  (i.e. 319)
0CF7 2308             (grfdrv_beta5_with):02927                  bls   L0D30        no, don't clip it
                      (grfdrv_beta5_with):02928                IFNE  H6309
                      (grfdrv_beta5_with):02929                  decd               are we overflowing by one pixel  (i.e.320)
                      (grfdrv_beta5_with):02930                ELSE
0CF9 830001           (grfdrv_beta5_with):02931                  subd  #1
                      (grfdrv_beta5_with):02932                ENDC
0CFC 10936A           (grfdrv_beta5_with):02933                  cmpd  <$006A       check against highest allowed X
0CFF 2637             (grfdrv_beta5_with):02934                  bne   L0D63        not the same, so we go clip it
0D01 EC29             (grfdrv_beta5_with):02935         L0D30    ldd   Grf.YSz,y    Get Y size: ATD: 16-bit, so we can check for >256!
0D03 D349             (grfdrv_beta5_with):02936                  addd  <$0049       add it to upper left Y coord. ( max 199)
0D05 10936C           (grfdrv_beta5_with):02937                  cmpd  <$006C       past max Y coord.?
0D08 2509             (grfdrv_beta5_with):02938                  blo   L0D3F        no, don't bother clipping it
                      (grfdrv_beta5_with):02939         * Y coord clipping added 03/10/96 by ATD
0D0A DC6C             (grfdrv_beta5_with):02940                  ldd   <$006C       get max. Y coord
0D0C 9349             (grfdrv_beta5_with):02941                  subd  <$0049       take out starting Y coord
                      (grfdrv_beta5_with):02942                IFNE  H6309
                      (grfdrv_beta5_with):02943                  incd               make it PUT at least one line...
                      (grfdrv_beta5_with):02944                ELSE
0D0E C30001           (grfdrv_beta5_with):02945                  addd  #1
                      (grfdrv_beta5_with):02946                ENDC
0D11 D752             (grfdrv_beta5_with):02947                  stb   <$52         save y-count of pixels to do
                      (grfdrv_beta5_with):02948         * Divide by # pixels / byte to see if even byte boundary
0D13 D660             (grfdrv_beta5_with):02949         L0D3F    ldb   <$0060       get screen type
0D15 8E4D44           (grfdrv_beta5_with):02950                  ldx   #GrfStrt+L0D70-1  Point to powers of 2 division table
0D18 9648             (grfdrv_beta5_with):02951                  lda   <$0048       get LSB of X coord.
0D1A 43               (grfdrv_beta5_with):02952                  coma               invert it
0D1B A485             (grfdrv_beta5_with):02953                  anda  b,x          Get # ^2 divisions
0D1D 4C               (grfdrv_beta5_with):02954                  inca               Add 1
0D1E A12C             (grfdrv_beta5_with):02955                  cmpa  Grf.LfPx,y   Same as # pixels used in 1st byte of GP buffer?
0D20 2616             (grfdrv_beta5_with):02956                  bne   L0D63        No, set carry indicating non-even byte boundary
0D22 8D17             (grfdrv_beta5_with):02957                  bsr   L0D66        Go get starting/ending pixel masks
0D24 9700             (grfdrv_beta5_with):02958                  sta   <$0000       Save right-based mask
0D26 EC2D             (grfdrv_beta5_with):02959                  ldd   Grf.RtPx,y   Get right based pixel mask & GP buffer type
0D28 8D11             (grfdrv_beta5_with):02960                  bsr   L0D66        Go get starting/ending pixel masks
0D2A D701             (grfdrv_beta5_with):02961                  stb   <$0001       Save left-based pixel mask
0D2C 8C               (grfdrv_beta5_with):02962                  fcb   $8C          skip setting up
                      (grfdrv_beta5_with):02963         * Text put comes here with B=Group # ($FF) for overlay windows
                      (grfdrv_beta5_with):02964         * Entry: B=buffer block #
0D2D 8D3A             (grfdrv_beta5_with):02965         L0D58    bsr   L0D94        Move x-size to $50 y-size to $52 (16 bit is $4F and $51 respectively)
0D2F D663             (grfdrv_beta5_with):02966                  ldb   <$0063       Get # bytes/row for screen
0D31 D050             (grfdrv_beta5_with):02967                  subb  <$0050       subtract LSB of X size
0D33 D797             (grfdrv_beta5_with):02968                  stb   <$0097       Save width of buffer
0D35 5F               (grfdrv_beta5_with):02969                  clrb               No error, restore screen address & return
0D36 3590             (grfdrv_beta5_with):02970                  puls  pc,x
                      (grfdrv_beta5_with):02971         
0D38 53               (grfdrv_beta5_with):02972         L0D63    comb               Different screen types or clipping required, set
0D39 3590             (grfdrv_beta5_with):02973                  puls  pc,x          carry, restore screen address & return
                      (grfdrv_beta5_with):02974         
                      (grfdrv_beta5_with):02975         * Entry: B=Gfx screen type (1-4)
                      (grfdrv_beta5_with):02976         * A=# pixels to go in?
0D3B 8E4D48           (grfdrv_beta5_with):02977         L0D66    ldx   #GrfStrt+L0D74-1  Point to table
0D3E E685             (grfdrv_beta5_with):02978                  ldb   b,x            Get vector offset to proper table
0D40 3A               (grfdrv_beta5_with):02979                  abx                  Calculate vector
0D41 48               (grfdrv_beta5_with):02980                  lsla                 2 bytes/entry
0D42 EC86             (grfdrv_beta5_with):02981                  ldd   a,x            Get both masks & return
0D44 39               (grfdrv_beta5_with):02982                  rts   
                      (grfdrv_beta5_with):02983         
                      (grfdrv_beta5_with):02984         * Some sort of bit mask table - appears to be used in a LSR loop after inverted
                      (grfdrv_beta5_with):02985         *   ,will continue loop until the carried bit changes to 0
0D45 07               (grfdrv_beta5_with):02986         L0D70    fcb   %00000111      640x200x2
0D46 03               (grfdrv_beta5_with):02987                  fcb   %00000011      320x200x4
0D47 03               (grfdrv_beta5_with):02988                  fcb   %00000011      640x200x4
0D48 01               (grfdrv_beta5_with):02989                  fcb   %00000001      320x200x16
                      (grfdrv_beta5_with):02990         
                      (grfdrv_beta5_with):02991         * Vector table based on screen type (points to following 3 tables)
0D49 03               (grfdrv_beta5_with):02992         L0D74    fcb   L0D78-(L0D74+1)   640x200x2
0D4A 13               (grfdrv_beta5_with):02993                  fcb   L0D88-(L0D74+1)   320x200x4
0D4B 13               (grfdrv_beta5_with):02994                  fcb   L0D88-(L0D74+1)   640x200x4
0D4C 1B               (grfdrv_beta5_with):02995                  fcb   L0D90-(L0D74+1)   320x200x16
                      (grfdrv_beta5_with):02996         
                      (grfdrv_beta5_with):02997         * 2 color masks (2 bytes/entry)
0D4D 0180             (grfdrv_beta5_with):02998         L0D78    fcb   %00000001,%10000000
0D4F 03C0             (grfdrv_beta5_with):02999                  fcb   %00000011,%11000000
0D51 07E0             (grfdrv_beta5_with):03000                  fcb   %00000111,%11100000
0D53 0FF0             (grfdrv_beta5_with):03001                  fcb   %00001111,%11110000
0D55 1FF8             (grfdrv_beta5_with):03002                  fcb   %00011111,%11111000
0D57 3FFC             (grfdrv_beta5_with):03003                  fcb   %00111111,%11111100
0D59 7FFE             (grfdrv_beta5_with):03004                  fcb   %01111111,%11111110
0D5B FFFF             (grfdrv_beta5_with):03005                  fcb   %11111111,%11111111
                      (grfdrv_beta5_with):03006                  
                      (grfdrv_beta5_with):03007         * 4 color masks
0D5D 03C0             (grfdrv_beta5_with):03008         L0D88    fcb   %00000011,%11000000
0D5F 0FF0             (grfdrv_beta5_with):03009                  fcb   %00001111,%11110000
0D61 3FFC             (grfdrv_beta5_with):03010                  fcb   %00111111,%11111100
0D63 FFFF             (grfdrv_beta5_with):03011                  fcb   %11111111,%11111111
                      (grfdrv_beta5_with):03012         
                      (grfdrv_beta5_with):03013         * 16 color masks
0D65 0FF0             (grfdrv_beta5_with):03014         L0D90    fcb   %00001111,%11110000
0D67 FFFF             (grfdrv_beta5_with):03015                  fcb   %11111111,%11111111
                      (grfdrv_beta5_with):03016         
                      (grfdrv_beta5_with):03017         * Copy X Size & Y size from GP buffer header
                      (grfdrv_beta5_with):03018         * Entry: Y=GP buffer header ptr
0D69 E62B             (grfdrv_beta5_with):03019         L0D94    ldb   Grf.XBSz,y     Get X size of GP buffer in bytes
0D6B D750             (grfdrv_beta5_with):03020                  stb   <$50           Save X size of GP buffer in bytes
0D6D E62A             (grfdrv_beta5_with):03021                  ldb   Grf.YSz+1,y    Get Y size of GP buffer in bytes
0D6F D752             (grfdrv_beta5_with):03022                  stb   <$52           Save Y size of GP buffer in bytes (pixels)
0D71 39               (grfdrv_beta5_with):03023                  rts   
                      (grfdrv_beta5_with):03024         
                      (grfdrv_beta5_with):03025         * Put buffer with buffer's screen type matching actual screen type
0D72 D660             (grfdrv_beta5_with):03026         L0D9D    ldb   <$60           Get screen type
0D74 8E58C4           (grfdrv_beta5_with):03027                  ldx   #GrfStrt+L16B1-1  Point to table
0D77 A685             (grfdrv_beta5_with):03028                  lda   b,x            Get # pixels per byte for this screen type
                      (grfdrv_beta5_with):03029         * 6809 - ldb   b,x is 1 cycle faster than TFR (5 vs 6), same size
0D79 1F89             (grfdrv_beta5_with):03030                  tfr   a,b            Dupe for D comparison
                      (grfdrv_beta5_with):03031         * no PSET?
0D7B 8E6282           (grfdrv_beta5_with):03032                  ldx   #GrfStrt+L1F9E Point to 'normal' PSET vector
0D7E 9C64             (grfdrv_beta5_with):03033                  cmpx  <$64           Is that the current one?
0D80 264E             (grfdrv_beta5_with):03034                  bne   L0DBE          No, use slow PUT
                      (grfdrv_beta5_with):03035         * no LSET?
0D82 8E583D           (grfdrv_beta5_with):03036                  ldx   #GrfStrt+L1FA9 Point to 'normal' LSET vector
0D85 9C68             (grfdrv_beta5_with):03037                  cmpx  <$68           Is that the current one?
0D87 2647             (grfdrv_beta5_with):03038                  bne   L0DBE          Yes, can use TFM PUT
                      (grfdrv_beta5_with):03039         * no even byte boundary?
0D89 10A32C           (grfdrv_beta5_with):03040                  cmpd  Grf.LfPx,y     Even byte boundary on both left & right sides?
0D8C 1027FE63         (grfdrv_beta5_with):03041                  lbeq  L0C81          yes, go do fast TFM put
                      (grfdrv_beta5_with):03042         * odd pixel boundaries: do 1st pixel slow, use TFM for the rest
0D90 9799             (grfdrv_beta5_with):03043                  sta   <$0099         flag we're copying to the screen
0D92 DC00             (grfdrv_beta5_with):03044                  ldd   <$00           masks for pixels to keep from GP buffer
                      (grfdrv_beta5_with):03045                IFNE  H6309
                      (grfdrv_beta5_with):03046                  comd
                      (grfdrv_beta5_with):03047                ELSE
0D94 43               (grfdrv_beta5_with):03048                  coma
0D95 53               (grfdrv_beta5_with):03049                  comb
                      (grfdrv_beta5_with):03050                ENDC
0D96 DD20             (grfdrv_beta5_with):03051                  std   <$20         masks for pixels to keep from screen
0D98 9E72             (grfdrv_beta5_with):03052                  ldx   <$0072       get start address for PUT
0D9A 31A820           (grfdrv_beta5_with):03053                  leay  $20,y        skip GP buffer header
                      (grfdrv_beta5_with):03054         * do first byte of the line: almost a complete TFM
0D9D A684             (grfdrv_beta5_with):03055         Put.ATFM lda   ,x           grab first byte
0D9F 9420             (grfdrv_beta5_with):03056                  anda  <$20         get only pixels we want to keep
0DA1 E6A4             (grfdrv_beta5_with):03057                  ldb   ,y           grab pixels from GP buffer
0DA3 D400             (grfdrv_beta5_with):03058                  andb  <$00         get the ones we want to keep
                      (grfdrv_beta5_with):03059                IFNE  H6309
                      (grfdrv_beta5_with):03060                  orr   b,a          OR the pixels together
                      (grfdrv_beta5_with):03061                ELSE
0DA5 D7BF             (grfdrv_beta5_with):03062                  stb   <grScrtch
0DA7 9ABF             (grfdrv_beta5_with):03063                  ora   <grScrtch
                      (grfdrv_beta5_with):03064                ENDC
0DA9 A7A4             (grfdrv_beta5_with):03065                  sta   ,y           save in the GP buffer
0DAB DC4F             (grfdrv_beta5_with):03066                  ldd   <$4F         get width of GP buffer in bytes
                      (grfdrv_beta5_with):03067                IFNE  H6309
                      (grfdrv_beta5_with):03068                  decd               account for 0th byte
                      (grfdrv_beta5_with):03069                ELSE
0DAD 830001           (grfdrv_beta5_with):03070                  subd  #1
                      (grfdrv_beta5_with):03071                ENDC
0DB0 A68B             (grfdrv_beta5_with):03072                  lda   d,x          get right hand byte from the screen
0DB2 3402             (grfdrv_beta5_with):03073                  pshs  a            save end byte
                      (grfdrv_beta5_with):03074                IFNE  H6309
                      (grfdrv_beta5_with):03075                  incd
                      (grfdrv_beta5_with):03076                ELSE
0DB4 C30001           (grfdrv_beta5_with):03077                  addd  #1
                      (grfdrv_beta5_with):03078                ENDC
0DB7 17FE59           (grfdrv_beta5_with):03079                  lbsr  PutOneL      blast it over using TFM
                      (grfdrv_beta5_with):03080         * do the last byte of the line
                      (grfdrv_beta5_with):03081         * this kludge is necessary because doing it the proper way would add a LOT
                      (grfdrv_beta5_with):03082         * of code to check for GP buffer 8k block boundaries.  It won't be noticed
                      (grfdrv_beta5_with):03083         * except for really large PutBlks.  Oh well.
0DBA 9601             (grfdrv_beta5_with):03084                  lda   <$0001       get end pixel mask
0DBC A41F             (grfdrv_beta5_with):03085                  anda  -1,x         keep only the pixels we want
0DBE D621             (grfdrv_beta5_with):03086                  ldb   <$0021       inverted mask
0DC0 E4E0             (grfdrv_beta5_with):03087                  andb  ,s+          AND in with original screen data
                      (grfdrv_beta5_with):03088                IFNE  H6309
                      (grfdrv_beta5_with):03089                  orr   b,a          OR in the pixel we put on the screen
                      (grfdrv_beta5_with):03090                ELSE
0DC2 D7BF             (grfdrv_beta5_with):03091                  stb   <grScrtch
0DC4 9ABF             (grfdrv_beta5_with):03092                  ora   <grScrtch
                      (grfdrv_beta5_with):03093                ENDC
0DC6 A71F             (grfdrv_beta5_with):03094                  sta   -1,x         save it
0DC8 D697             (grfdrv_beta5_with):03095                  ldb   <$0097       get width of the screen
0DCA 3A               (grfdrv_beta5_with):03096                  abx                go to the next line
0DCB 0A52             (grfdrv_beta5_with):03097                  dec   <$52         count down one line
0DCD 26CE             (grfdrv_beta5_with):03098                  bne   Put.ATFM
0DCF 39               (grfdrv_beta5_with):03099                  rts
                      (grfdrv_beta5_with):03100         
                      (grfdrv_beta5_with):03101         * Either not even byte, or PSET/LSET or not defaults:use slow PUT
0DD0 9705             (grfdrv_beta5_with):03102         L0DBE    sta   <$05           Save # pixels/byte
0DD2 3420             (grfdrv_beta5_with):03103                  pshs  y              Save Get/Put buffer ptr
0DD4 DE64             (grfdrv_beta5_with):03104                  ldu   <$64           Get PSET vector
                      (grfdrv_beta5_with):03105                IFNE  H6309
                      (grfdrv_beta5_with):03106                  ldw   <$68           Get LSET vector (for PSET routine)
                      (grfdrv_beta5_with):03107                ELSE
0DD6 9E68             (grfdrv_beta5_with):03108                  ldx   <$68
0DD8 9FB5             (grfdrv_beta5_with):03109                  stx   <$B5
                      (grfdrv_beta5_with):03110                ENDC
0DDA 31A820           (grfdrv_beta5_with):03111                  leay  <$20,y         Skip buffer header
0DDD 9E72             (grfdrv_beta5_with):03112                  ldx   <$72           Get address of where to start PUTting on scrn
0DDF 0C97             (grfdrv_beta5_with):03113                  inc   <$97           Save # bytes to start of next line GP buffer
0DE1 0A50             (grfdrv_beta5_with):03114                  dec   <$50           Adjust X byte count down for base 0
                      (grfdrv_beta5_with):03115         * Loop from here to end of L0DFA - Move Get/Put buffer onto screen using LSET
                      (grfdrv_beta5_with):03116         * logic.
                      (grfdrv_beta5_with):03117         * This outside part does the 1st byte's worth of pixels
                      (grfdrv_beta5_with):03118         * NOTE: X=ptr to current byte being done on screen
                      (grfdrv_beta5_with):03119         *       Y=ptr to current byte being done in GP buffer
0DE3 D600             (grfdrv_beta5_with):03120         L0DCB    ldb   <$00           Get pixel mask for 1st byte of 1st line in buffr
0DE5 9650             (grfdrv_beta5_with):03121                  lda   <$50           Get LSB of X size
0DE7 271A             (grfdrv_beta5_with):03122                  beq   L0DED          If 0, just 1 byte to do - use last byte routine
0DE9 9799             (grfdrv_beta5_with):03123                  sta   <$99           Save LSB of X size
                      (grfdrv_beta5_with):03124         * This part does all the full-byte pixels
0DEB C6FF             (grfdrv_beta5_with):03125         L0DD5    ldb   #$FF           Mask byte- all bits
0DED A6A0             (grfdrv_beta5_with):03126         L0DD7    lda   ,y+            Get bits to set from GP buffer
0DEF ADC4             (grfdrv_beta5_with):03127                  jsr   ,u             Put on screen
0DF1 C601             (grfdrv_beta5_with):03128                  ldb   #1             Screen ptr bump count
0DF3 3A               (grfdrv_beta5_with):03129                  abx                  Bump screen ptr
0DF4 108C4000         (grfdrv_beta5_with):03130                  cmpy  #$4000         Done current 8K block of Get/put buffer?
0DF8 2503             (grfdrv_beta5_with):03131                  blo   L0DE7          No, continue normally
0DFA 17009A           (grfdrv_beta5_with):03132                  lbsr  L0E70          Yes, go map in next block
0DFD 0A99             (grfdrv_beta5_with):03133         L0DE7    dec   <$99           Dec X byte count
0DFF 26EA             (grfdrv_beta5_with):03134                  bne   L0DD5          Continue moving until done X size
                      (grfdrv_beta5_with):03135         * This part does the last byte's worth of pixels
0E01 D601             (grfdrv_beta5_with):03136                  ldb   <$01           Get pixel mask for last byte of last line
0E03 A6A0             (grfdrv_beta5_with):03137         L0DED    lda   ,y+            Get last byte for current line in GP buffer
0E05 ADC4             (grfdrv_beta5_with):03138                  jsr   ,u             Put it on screen
0E07 108C4000         (grfdrv_beta5_with):03139                  cmpy  #$4000         Done 8K block yet?
0E0B 2503             (grfdrv_beta5_with):03140                  blo   L0DFA          No, skip ahead
0E0D 170087           (grfdrv_beta5_with):03141                  lbsr  L0E70          Yes, go map in next block
0E10 D697             (grfdrv_beta5_with):03142         L0DFA    ldb   <$0097         Get # bytes to beginning of next line
0E12 3A               (grfdrv_beta5_with):03143                  abx                  Point to start of next line
0E13 0A52             (grfdrv_beta5_with):03144                  dec   <$0052         Dec # of lines counter
0E15 26CC             (grfdrv_beta5_with):03145                  bne   L0DCB          Continue putting until done
0E17 35A0             (grfdrv_beta5_with):03146                  puls  pc,y           Restore GP buffer ptr & return
                      (grfdrv_beta5_with):03147         
                      (grfdrv_beta5_with):03148         * Put buffer with buffer's screen type different than original
0E19 3420             (grfdrv_beta5_with):03149         L0E03    pshs  y              Save GP buffer ptr?
0E1B DC6A             (grfdrv_beta5_with):03150                  ldd   <$006A         Get max. allowed X coordinate
0E1D 9347             (grfdrv_beta5_with):03151                  subd  <$0047         Subtract working X coordinate
                      (grfdrv_beta5_with):03152                IFNE  H6309
                      (grfdrv_beta5_with):03153                  incd                 Base 1
                      (grfdrv_beta5_with):03154                ELSE
0E1F C30001           (grfdrv_beta5_with):03155                  addd  #1
                      (grfdrv_beta5_with):03156                ENDC
0E22 DD9B             (grfdrv_beta5_with):03157                  std   <$009B         Save width of some sort
0E24 D66D             (grfdrv_beta5_with):03158                  ldb   <$006D         Get max. allowed Y coordinate
0E26 D04A             (grfdrv_beta5_with):03159                  subb  <$004A         Calc height of some sort
0E28 5C               (grfdrv_beta5_with):03160                  incb                 Make base 1
0E29 201F             (grfdrv_beta5_with):03161                  bra   L0E2F          Save it
                      (grfdrv_beta5_with):03162         
0E2B 53               (grfdrv_beta5_with):03163         i.iwtyp  comb
0E2C C6B7             (grfdrv_beta5_with):03164                  ldb   #E$IWTyp
0E2E 7E50A5           (grfdrv_beta5_with):03165                  jmp   >GrfStrt+SysRet
                      (grfdrv_beta5_with):03166         
                      (grfdrv_beta5_with):03167         * Called from Mouse cursor routine @ L15FE
0E31 3420             (grfdrv_beta5_with):03168         L0E14    pshs  y              Preserve GP buffer ptr
0E33 CC0140           (grfdrv_beta5_with):03169                  ldd   #320           Default res to 320 (Base 1)
                      (grfdrv_beta5_with):03170                IFNE  H6309
                      (grfdrv_beta5_with):03171                  tim   #$01,<$60      Get res bit from screen type
                      (grfdrv_beta5_with):03172                ELSE
0E36 3402             (grfdrv_beta5_with):03173                  pshs  a
0E38 9660             (grfdrv_beta5_with):03174                  lda   <$60
0E3A 8501             (grfdrv_beta5_with):03175                  bita  #1
0E3C 3502             (grfdrv_beta5_with):03176                  puls  a
                      (grfdrv_beta5_with):03177                ENDC
0E3E 2702             (grfdrv_beta5_with):03178                  beq   L0E24          It is 320 mode, skip ahead
                      (grfdrv_beta5_with):03179                IFNE  H6309
                      (grfdrv_beta5_with):03180                  lsld                 Multiply by 2 to get 640
                      (grfdrv_beta5_with):03181                ELSE
0E40 58               (grfdrv_beta5_with):03182                  lslb
0E41 49               (grfdrv_beta5_with):03183                  rola
                      (grfdrv_beta5_with):03184                ENDC
0E42 933D             (grfdrv_beta5_with):03185         L0E24    subd  <$3D           Subtract last X coord Gfx cursor was ON at
0E44 DD9B             (grfdrv_beta5_with):03186                  std   <$009B         Save # pixels to end of screen
0E46 C6C7             (grfdrv_beta5_with):03187                  ldb   #MaxLine+1     Full height of screen
0E48 D040             (grfdrv_beta5_with):03188                  subb  <$0040         Calculate # pixels remaining
0E4A D7A0             (grfdrv_beta5_with):03189         L0E2F    stb   <$00A0         Save it
0E4C 1713E7           (grfdrv_beta5_with):03190                  lbsr  L1EF1          Setup pix mask & shift vector ($79 & $7A)
0E4F 17FF17           (grfdrv_beta5_with):03191                  lbsr  L0D94          Set up element X&Y sizes (in bytes)
                      (grfdrv_beta5_with):03192         * B=Height of GP buffer (also in <$52) in bytes
0E52 D1A0             (grfdrv_beta5_with):03193                  cmpb  <$00A0         Compare with room left on window Y axis
0E54 2304             (grfdrv_beta5_with):03194                  bls   FullSz
0E56 D6A0             (grfdrv_beta5_with):03195                  ldb   <$00A0         Get remaining # lines on window
0E58 D752             (grfdrv_beta5_with):03196                  stb   <$0052         Save as our single counter of lines left
0E5A EC2C             (grfdrv_beta5_with):03197         FullSz   ldd   Grf.LfPx,y     Get # pixels used in 1st byte & last byte
0E5C DD06             (grfdrv_beta5_with):03198                  std   <$0006         Save them
0E5E 8E46B9           (grfdrv_beta5_with):03199                  ldx   #GrfStrt+L075F-1  Point to color mask table index
0E61 D660             (grfdrv_beta5_with):03200                  ldb   <$0060         Get screen type
                      (grfdrv_beta5_with):03201         * ATD: Added to get around problem of GetBlk on text screen, and PutBlk
                      (grfdrv_beta5_with):03202         * on gfx screen crashing the system!
                      (grfdrv_beta5_with):03203         * We now allow GETBlk and PutBlk on text screens, too!
0E63 E82E             (grfdrv_beta5_with):03204                  eorb  Grf.STY,y    EOR with buffer sty type
0E65 2BC4             (grfdrv_beta5_with):03205                  bmi   i.iwtyp      exit IMMEDIATELY if mixing text and gfx puts
0E67 D660             (grfdrv_beta5_with):03206                  ldb   <$0060       get screen type again
0E69 E685             (grfdrv_beta5_with):03207                  ldb   b,x            Calc. offset to proper color mask table
0E6B 3A               (grfdrv_beta5_with):03208                  abx   
0E6C A680             (grfdrv_beta5_with):03209                  lda   ,x+            Get active bits mask (0001, 0011 or 1111)
0E6E 9F02             (grfdrv_beta5_with):03210                  stx   <$0002         Save base of color mask table
0E70 8E4EA2           (grfdrv_beta5_with):03211                  ldx   #GrfStrt+L0E7C-1  Point to index for pixel tables
0E73 E62E             (grfdrv_beta5_with):03212                  ldb   Grf.STY,y      Get GP buffers original screen type
0E75 E685             (grfdrv_beta5_with):03213                  ldb   b,x            Calc ptr to proper pixel table
0E77 3A               (grfdrv_beta5_with):03214                  abx   
0E78 E684             (grfdrv_beta5_with):03215                  ldb   ,x             Get offset for default shift?
0E7A 3185             (grfdrv_beta5_with):03216                  leay  b,x            Get vector for 4, 2 or 1 shift
0E7C 109FA3           (grfdrv_beta5_with):03217                  sty   <$00A3         Save it
0E7F A401             (grfdrv_beta5_with):03218                  anda  1,x            And bit mask from scrn with bit mask from GP bfr
0E81 9708             (grfdrv_beta5_with):03219                  sta   <$0008         Save it
0E83 E602             (grfdrv_beta5_with):03220                  ldb   2,x            Get # pixels/byte for GP buffer type
0E85 D705             (grfdrv_beta5_with):03221                  stb   <$0005         Save it
0E87 D606             (grfdrv_beta5_with):03222                  ldb   <$0006         Get # pixels used in 1st byte of GP buffer line
0E89 CB02             (grfdrv_beta5_with):03223                  addb  #$02           Adjust up to skip bit mask & # pixels/byte
0E8B E685             (grfdrv_beta5_with):03224                  ldb   b,x            Get offset
0E8D 3185             (grfdrv_beta5_with):03225                  leay  b,x            Save vectors for bit shifts
0E8F 109FA1           (grfdrv_beta5_with):03226                  sty   <$00A1
0E92 109FA5           (grfdrv_beta5_with):03227                  sty   <$00A5
0E95 35A0             (grfdrv_beta5_with):03228                  puls  pc,y           Restore GP buffer ptr & return?
                      (grfdrv_beta5_with):03229         
                      (grfdrv_beta5_with):03230         * Get next 8K block of get/put buffers
                      (grfdrv_beta5_with):03231         * Exit: Y=Ptr to start of block ($2000)
0E97 0C7D             (grfdrv_beta5_with):03232         L0E70    inc   <$007D         Increment buffer block #
0E99 D67D             (grfdrv_beta5_with):03233                  ldb   <$007D         Get it
0E9B 17096D           (grfdrv_beta5_with):03234                  lbsr  L017C          Go map in next block in get/put buffer
0E9E 108E2000         (grfdrv_beta5_with):03235                  ldy   #$2000         Y=Ptr to start of GP buffer block
0EA2 39               (grfdrv_beta5_with):03236                  rts   
                      (grfdrv_beta5_with):03237         
                      (grfdrv_beta5_with):03238         * Index to proper tables for GP buffer's original screen types
0EA3 05               (grfdrv_beta5_with):03239         L0E7C    fcb   L0E80-(L0E7C-1) Type 5 (2 color)
0EA4 10               (grfdrv_beta5_with):03240                  fcb   L0E8B-(L0E7C-1) Type 6 (4 color)
0EA5 10               (grfdrv_beta5_with):03241                  fcb   L0E8B-(L0E7C-1) Type 7 (4 color)
0EA6 17               (grfdrv_beta5_with):03242                  fcb   L0E92-(L0E7C-1) Type 8 (16 color)
                      (grfdrv_beta5_with):03243         * All of following tables' references to pixel # are based on 1 being the
                      (grfdrv_beta5_with):03244         *  far left pixel in the byte
                      (grfdrv_beta5_with):03245         * Vector table for GP buffer's taken from 2 color screens
0EA7 66               (grfdrv_beta5_with):03246         L0E80    fcb   L0EE0-L0E80    <$00A3 vector
0EA8 01               (grfdrv_beta5_with):03247                  fcb   %00000001      Bit mask for 1 pixel
0EA9 08               (grfdrv_beta5_with):03248                  fcb   8              # pixels /byte
0EAA 67               (grfdrv_beta5_with):03249                  fcb   L0EE1-L0E80    Shift for 1st pixel
0EAB 60               (grfdrv_beta5_with):03250                  fcb   L0EDA-L0E80    Shift for 2nd pixel
0EAC 61               (grfdrv_beta5_with):03251                  fcb   L0EDB-L0E80    Shift for 3rd pixel
0EAD 62               (grfdrv_beta5_with):03252                  fcb   L0EDC-L0E80    Shift for 4th pixel
0EAE 63               (grfdrv_beta5_with):03253                  fcb   L0EDD-L0E80    Shift for 5th pixel
0EAF 64               (grfdrv_beta5_with):03254                  fcb   L0EDE-L0E80    Shift for 6th pixel
0EB0 65               (grfdrv_beta5_with):03255                  fcb   L0EDF-L0E80    Shift for 7th pixel
0EB1 66               (grfdrv_beta5_with):03256                  fcb   L0EE0-L0E80    Shift for 8th pixel
                      (grfdrv_beta5_with):03257         * Vector table for GP buffer's taken from 4 color screens
0EB2 5A               (grfdrv_beta5_with):03258         L0E8B    fcb   L0EDF-L0E8B    <$00A3 vector
0EB3 03               (grfdrv_beta5_with):03259                  fcb   %00000011      Bit mask for 1 pixel
0EB4 04               (grfdrv_beta5_with):03260                  fcb   4              # pixels/byte
0EB5 5C               (grfdrv_beta5_with):03261                  fcb   L0EE1-L0E8B    Shift for 1st pixel
0EB6 56               (grfdrv_beta5_with):03262                  fcb   L0EDB-L0E8B    Shift for 2nd pixel
0EB7 58               (grfdrv_beta5_with):03263                  fcb   L0EDD-L0E8B    Shift for 3rd pixel
0EB8 5A               (grfdrv_beta5_with):03264                  fcb   L0EDF-L0E8B    Shift for 4th pixel
                      (grfdrv_beta5_with):03265         * Vector table for GP buffer's taken from 16 color screens
0EB9 51               (grfdrv_beta5_with):03266         L0E92    fcb   L0EDD-L0E92    <$00A3 vector
0EBA 0F               (grfdrv_beta5_with):03267                  fcb   %00001111      Bit mask for 1 pixel
0EBB 02               (grfdrv_beta5_with):03268                  fcb   2              # pixels/byte
0EBC 55               (grfdrv_beta5_with):03269                  fcb   L0EE1-L0E92    Shift for 1st pixel
0EBD 51               (grfdrv_beta5_with):03270                  fcb   L0EDD-L0E92    Shift for 2nd pixel
                      (grfdrv_beta5_with):03271         
0EBE 31A820           (grfdrv_beta5_with):03272         L0E97    leay  Grf.Siz,y      Skip GP buffer header
0EC1 3420             (grfdrv_beta5_with):03273                  pshs  y              Save ptr to raw GP buffer data
0EC3 9E72             (grfdrv_beta5_with):03274                  ldx   <$0072         Get ptr to start of buffer placement on screen
0EC5 DE64             (grfdrv_beta5_with):03275                  ldu   <$64           Get PSET vector for main loop @ L0EE1
0EC7 8C               (grfdrv_beta5_with):03276                  fcb   $8C          skip 2 bytes: same cycle time, 1 byte shorter
                      (grfdrv_beta5_with):03277         
0EC8 9F72             (grfdrv_beta5_with):03278         L0E9E    stx   <$0072         Save get/put screen start address
0ECA DC9B             (grfdrv_beta5_with):03279         L0EA0    ldd   <$009B         ??? x-count to do
0ECC DD9D             (grfdrv_beta5_with):03280                  std   <$009D         ???
0ECE 9650             (grfdrv_beta5_with):03281                  lda   <$0050         Get LSB of X size (in bytes)
0ED0 9704             (grfdrv_beta5_with):03282                  sta   <$0004         Save # bytes left in width (including partials)
0ED2 D606             (grfdrv_beta5_with):03283                  ldb   <$0006         Get # of pixels used in 1st byte of GP line
0ED4 D797             (grfdrv_beta5_with):03284                  stb   <$0097         Save as # pixels left to do in current byte
0ED6 DCA5             (grfdrv_beta5_with):03285                  ldd   <$00A5         Get A5 vector
0ED8 DDA1             (grfdrv_beta5_with):03286                  std   <$00A1         Save as A1 vector
0EDA D674             (grfdrv_beta5_with):03287                  ldb   <$0074         Get pixel mask for 1st byte of GP buffer on scrn
                      (grfdrv_beta5_with):03288                IFNE  H6309
                      (grfdrv_beta5_with):03289                  ldw   <$68           Get LSET vector
                      (grfdrv_beta5_with):03290                ELSE
0EDC 109E68           (grfdrv_beta5_with):03291                  ldy   <$68
0EDF 109FB5           (grfdrv_beta5_with):03292                  sty   <$B5
                      (grfdrv_beta5_with):03293                ENDC
0EE2 10AEE4           (grfdrv_beta5_with):03294         L0EB2    ldy   ,s             Get buffer data ptr
0EE5 108C4000         (grfdrv_beta5_with):03295                  cmpy  #$4000         At end of 8K block yet?
0EE9 2506             (grfdrv_beta5_with):03296                  blo   L0EC1          No, continue
0EEB D799             (grfdrv_beta5_with):03297                  stb   <$0099         Save B
0EED 8DA8             (grfdrv_beta5_with):03298                  bsr   L0E70          Go map in next 8K block
0EEF D699             (grfdrv_beta5_with):03299                  ldb   <$0099         Restore B
0EF1 A6A0             (grfdrv_beta5_with):03300         L0EC1    lda   ,y+            Get byte of data from GP buffer
0EF3 10AFE4           (grfdrv_beta5_with):03301                  sty   ,s             Save updated buffer ptr
0EF6 108E4F0E         (grfdrv_beta5_with):03302                  ldy   #GrfStrt+L0EE1  Check if <$A1 vector points here
0EFA 109CA1           (grfdrv_beta5_with):03303                  cmpy  <$00A1         no shifting of bits?
0EFD 2701             (grfdrv_beta5_with):03304                  beq   L0ED6          It does, call vector
0EFF 48               (grfdrv_beta5_with):03305                  lsla                 Doesn't, shift buffer data left 1 first
0F00 109E02           (grfdrv_beta5_with):03306         L0ED6    ldy   <$0002         Get ptr to table of bit masks for colors
0F03 6E9F11A1         (grfdrv_beta5_with):03307                  jmp   [>GrfMem+gr00A1]       Place byte from GP buffer on screen
                      (grfdrv_beta5_with):03308         
                      (grfdrv_beta5_with):03309         * Bit shifter for adjusting pixel placements in non-aligned, possible differ-
                      (grfdrv_beta5_with):03310         *  ent screen type, Get/put buffers
                      (grfdrv_beta5_with):03311         * Entry: W=LSET vector (for use with <$64,u vector)
0F07 49               (grfdrv_beta5_with):03312         L0EDA    rola                 Adjust pixel to proper place in byte
0F08 49               (grfdrv_beta5_with):03313         L0EDB    rola
0F09 49               (grfdrv_beta5_with):03314         L0EDC    rola
0F0A 49               (grfdrv_beta5_with):03315         L0EDD    rola
0F0B 49               (grfdrv_beta5_with):03316         L0EDE    rola
0F0C 49               (grfdrv_beta5_with):03317         L0EDF    rola
0F0D 49               (grfdrv_beta5_with):03318         L0EE0    rola
0F0E 3407             (grfdrv_beta5_with):03319         L0EE1    pshs  cc,d           Save carry & pixel/color masks
0F10 DC9D             (grfdrv_beta5_with):03320                  ldd   <$009D         ??? Get some sort of counter (X width?)
0F12 2714             (grfdrv_beta5_with):03321                  beq   L0EFA          If 0, skip ahead
                      (grfdrv_beta5_with):03322                IFNE  H6309
                      (grfdrv_beta5_with):03323                  decd                 Drop it down
                      (grfdrv_beta5_with):03324                ELSE
0F14 830001           (grfdrv_beta5_with):03325                  subd  #1
                      (grfdrv_beta5_with):03326                ENDC
0F17 DD9D             (grfdrv_beta5_with):03327                  std   <$009D         Save it
0F19 EC61             (grfdrv_beta5_with):03328                  ldd   1,s            Get pixel/color masks back
0F1B 9408             (grfdrv_beta5_with):03329                  anda  <$0008         Mask out all but common bits of screen/buffer types
0F1D A6A6             (grfdrv_beta5_with):03330                  lda   a,y            Get proper color bit mask
0F1F ADC4             (grfdrv_beta5_with):03331                  jsr   ,u             Put pixel on screen
0F21 E662             (grfdrv_beta5_with):03332                  ldb   2,s            Restore original pixel bit mask
0F23 170AB7           (grfdrv_beta5_with):03333                  lbsr  L1F0E          B=New pixel mask, X=new scrn addr. (if chng)
0F26 E762             (grfdrv_beta5_with):03334                  stb   2,s            Save pixel mask for next pixel
0F28 0A97             (grfdrv_beta5_with):03335         L0EFA    dec   <$0097         Dec # pixels left in current byte
0F2A 2706             (grfdrv_beta5_with):03336                  beq   L0F04          Done byte, skip ahead
0F2C 3507             (grfdrv_beta5_with):03337                  puls  d,cc           Restore pixel/color masks & carry
0F2E 6E9F11A3         (grfdrv_beta5_with):03338                  jmp   [>GrfMem+gr00A3]       Call vector
                      (grfdrv_beta5_with):03339         
                      (grfdrv_beta5_with):03340         * Current byte's worth of pixels done: set up next byte
0F32 3263             (grfdrv_beta5_with):03341         L0F04    leas  3,s            Eat stack
0F34 9604             (grfdrv_beta5_with):03342                  lda   <$0004         Get # bytes wide GP buffer is
0F36 4A               (grfdrv_beta5_with):03343                  deca                 Decrement it
0F37 2714             (grfdrv_beta5_with):03344                  beq   L0F20          If totally done buffer width, go to next line
0F39 9704             (grfdrv_beta5_with):03345                  sta   <$0004         Save new total
0F3B 4A               (grfdrv_beta5_with):03346                  deca                 If only 1, set up for partially used last byte
0F3C 2703             (grfdrv_beta5_with):03347                  beq   L0F14
0F3E 9605             (grfdrv_beta5_with):03348                  lda   <$0005         Get # pixels/byte in GP buffer for full byte
0F40 8C               (grfdrv_beta5_with):03349                  fcb   $8C          skip 2 bytes: same cycle time, 1 byte shorter
0F41 9607             (grfdrv_beta5_with):03350         L0F14    lda   <$0007         Get # pixels to do in last (partial) byte of bfr
0F43 9797             (grfdrv_beta5_with):03351         L0F16    sta   <$0097         Save # pixels to do in next byte
0F45 109EA3           (grfdrv_beta5_with):03352                  ldy   <$00A3         Move last byte partial vector to normal
0F48 109FA1           (grfdrv_beta5_with):03353                  sty   <$00A1           so we can use same routines
0F4B 2095             (grfdrv_beta5_with):03354                  bra   L0EB2          Go finish off the last byte
                      (grfdrv_beta5_with):03355                  
                      (grfdrv_beta5_with):03356         * Done current line of GP buffer, set up for next line
0F4D 9E72             (grfdrv_beta5_with):03357         L0F20    ldx   <$0072         Get screen addr of current line in GP buffer
0F4F D663             (grfdrv_beta5_with):03358                  ldb   <$0063         Get # bytes/row on screen
0F51 3A               (grfdrv_beta5_with):03359                  abx                  Point to start of next line on screen
0F52 0A52             (grfdrv_beta5_with):03360                  dec   <$0052         Dec # lines left on window / GP buffer
0F54 1026FF70         (grfdrv_beta5_with):03361                  lbne  L0E9E          If not bottom, continue PUTting
0F58 35A0             (grfdrv_beta5_with):03362                  puls  pc,y           As far as we can go, restore Y & return
                      (grfdrv_beta5_with):03363         
                      (grfdrv_beta5_with):03364         * Map GP buffer entry point
0F5A 17F8F3           (grfdrv_beta5_with):03365         L0F31    lbsr  L0930        find the buffer
0F5D 10250144         (grfdrv_beta5_with):03366                  lbcs  SysRet       If error, exit back to system with it
0F61 D797             (grfdrv_beta5_with):03367                  stb   <$0097       save starting block number
0F63 E60F             (grfdrv_beta5_with):03368                  ldb   Grf.NBlk,x   number of blocks in the buffer
0F65 D799             (grfdrv_beta5_with):03369                  stb   <$0099       save count
0F67 EC05             (grfdrv_beta5_with):03370                  ldd   Grf.BSz,x    size of data inside the buffer
0F69 DD9B             (grfdrv_beta5_with):03371                  std   <$009B       save size of the buffer
0F6B 308820           (grfdrv_beta5_with):03372                  leax  Grf.Siz,x    point to the start of the buffer data itself
0F6E 1F10             (grfdrv_beta5_with):03373                  tfr   x,d          move into math register
0F70 841F             (grfdrv_beta5_with):03374                  anda  #$1F         keep offset within the block
0F72 DD9D             (grfdrv_beta5_with):03375                  std   <$009D       save offset
0F74 16012D           (grfdrv_beta5_with):03376                  lbra  L0F78        exit with no error
                      (grfdrv_beta5_with):03377         
                      (grfdrv_beta5_with):03378         * ATD: this special-purpose text routine results in gfx screens being
                      (grfdrv_beta5_with):03379         * marginally slower, but it saves ~170 clock cycles per character put
                      (grfdrv_beta5_with):03380         * on a hardware text screen.
0F77 0A83             (grfdrv_beta5_with):03381         fast.set dec   <$0083       account for the first character we printed out
                      (grfdrv_beta5_with):03382         * reset the various parameters after falling off the rhs of the screen
0F79 3540             (grfdrv_beta5_with):03383         fast.txt puls  u            restore pointer to our fast text
                      (grfdrv_beta5_with):03384                IFNE  H6309
                      (grfdrv_beta5_with):03385                  ldw   Wt.CurX,y    move current X position into W
                      (grfdrv_beta5_with):03386                ELSE
0F7B AE3E             (grfdrv_beta5_with):03387                  ldx   Wt.CurX,y
0F7D 9FB5             (grfdrv_beta5_with):03388                  stx   <$B5
                      (grfdrv_beta5_with):03389                ENDC
0F7F AE3B             (grfdrv_beta5_with):03390                  ldx   Wt.Cur,y     get current cursor address on the screen 
0F81 E628             (grfdrv_beta5_with):03391                  ldb   Wt.Attr,y    grab current attributes
0F83 A6C0             (grfdrv_beta5_with):03392         ftxt.lp  lda   ,u+          get a character
0F85 2A03             (grfdrv_beta5_with):03393                bpl   nofix        No high bit, skip adjust
0F87 1700F3           (grfdrv_beta5_with):03394                  lbsr  txt.fixa     fix A so it's printable
0F8A 170131           (grfdrv_beta5_with):03395         nofix    lbsr  L0F7C.0      do more text screen fixes, and STD ,X++
                      (grfdrv_beta5_with):03396                IFNE  H6309
                      (grfdrv_beta5_with):03397                  incw               right one character BEFORE counting down
                      (grfdrv_beta5_with):03398                ELSE
0F8D DDBF             (grfdrv_beta5_with):03399                  std   <grScrtch     Preserve D
0F8F DCB5             (grfdrv_beta5_with):03400                  ldd   <$B5          Get char X position
0F91 C30001           (grfdrv_beta5_with):03401                  addd  #1            Increase by 1
0F94 DDB5             (grfdrv_beta5_with):03402                  std   <$B5          Save new position
0F96 DCBF             (grfdrv_beta5_with):03403                  ldd   <grScrtch     Get original D back
                      (grfdrv_beta5_with):03404                ENDC
0F98 0A83             (grfdrv_beta5_with):03405                  dec   <$83         count down
0F9A 2712             (grfdrv_beta5_with):03406                  beq   ftxt.ex      exit if it's zero: we're done here
                      (grfdrv_beta5_with):03407                IFNE  H6309
                      (grfdrv_beta5_with):03408                  cmpw  Wt.MaxX,y    are we at the rhs of the screen?
                      (grfdrv_beta5_with):03409                ELSE
0F9C 3410             (grfdrv_beta5_with):03410                  pshs  x
0F9E 9EB5             (grfdrv_beta5_with):03411                  ldx   <$B5
0FA0 ACA81B           (grfdrv_beta5_with):03412                  cmpx  Wt.MaxX,y
0FA3 3510             (grfdrv_beta5_with):03413                  puls  x
                      (grfdrv_beta5_with):03414                ENDC
0FA5 23DC             (grfdrv_beta5_with):03415                  bls   ftxt.lp      no, continue doing fast text put
0FA7 3440             (grfdrv_beta5_with):03416                  pshs  u            save text pointer
0FA9 170452           (grfdrv_beta5_with):03417                  lbsr  L1238        zero out X coord, do scroll, etc
0FAC 20CB             (grfdrv_beta5_with):03418                  bra   fast.txt     and go reset out parameters
                      (grfdrv_beta5_with):03419         
     0FAE             (grfdrv_beta5_with):03420         ftxt.ex  equ   *
                      (grfdrv_beta5_with):03421                IFNE  H6309
                      (grfdrv_beta5_with):03422                  cmpw  Wt.MaxX,y    Are we at the right hand side of the screen?
                      (grfdrv_beta5_with):03423                ELSE
0FAE 3410             (grfdrv_beta5_with):03424                  pshs  x
0FB0 9EB5             (grfdrv_beta5_with):03425                  ldx   <$B5
0FB2 ACA81B           (grfdrv_beta5_with):03426                  cmpx  Wt.MaxX,y
0FB5 3510             (grfdrv_beta5_with):03427                  puls  x
                      (grfdrv_beta5_with):03428                ENDC
0FB7 2307             (grfdrv_beta5_with):03429                  bls   NoScroll     No, exit normally
0FB9 170442           (grfdrv_beta5_with):03430                  lbsr  L1238        Do scroll stuff
                      (grfdrv_beta5_with):03431                IFNE  H6309
                      (grfdrv_beta5_with):03432                  clrw               Zero out current X coord
                      (grfdrv_beta5_with):03433                ELSE
0FBC 0FB5             (grfdrv_beta5_with):03434                  clr   <$B5
0FBE 0FB6             (grfdrv_beta5_with):03435                  clr   <$B6
                      (grfdrv_beta5_with):03436                ENDC
     0FC0             (grfdrv_beta5_with):03437         NoScroll equ   *
                      (grfdrv_beta5_with):03438                IFNE  H6309
                      (grfdrv_beta5_with):03439                  stw   Wt.CurX,y    save current X coordinate
                      (grfdrv_beta5_with):03440                ELSE
0FC0 DCB5             (grfdrv_beta5_with):03441                  ldd   <$B5         Save current X coordinate (D gets destroyed in L11D1)
0FC2 ED3E             (grfdrv_beta5_with):03442                  std   Wt.CurX,y
                      (grfdrv_beta5_with):03443                ENDC
0FC4 1703D2           (grfdrv_beta5_with):03444                  lbsr  L11D1        set up for the next call
0FC7 1600DA           (grfdrv_beta5_with):03445                  lbra  L0F78        exit without error
                      (grfdrv_beta5_with):03446         
                      (grfdrv_beta5_with):03447         * entry: A = number of characters at $0180 to write
                      (grfdrv_beta5_with):03448         *        Y = window table pointer
0FCA 8E0180           (grfdrv_beta5_with):03449         fast.chr ldx   #$0180       where the data is located
                      (grfdrv_beta5_with):03450         * ATD: $83 is unused by anything as far as I can tell.
0FCD 9783             (grfdrv_beta5_with):03451                  sta   <$83         save count of characters to do for later
0FCF A680             (grfdrv_beta5_with):03452                  lda   ,x+          get the first character
0FD1 3410             (grfdrv_beta5_with):03453                  pshs  x            save address of character
0FD3 17008D           (grfdrv_beta5_with):03454                  lbsr  L0F4B.1      ensure window is set up properly during 1st chr.
                      (grfdrv_beta5_with):03455         * perhaps the DEC <$83 could be here... remove FAST.SET, and fix f1.do
0FD6 9660             (grfdrv_beta5_with):03456                  lda   <$60         is it a text screen?
0FD8 2B9D             (grfdrv_beta5_with):03457                  bmi   fast.set     yes, make it _really_ fast
0FDA D66F             (grfdrv_beta5_with):03458                  ldb   <$006F       get X size of font
0FDC C108             (grfdrv_beta5_with):03459                  cmpb  #$08         Even byte wide size font?
0FDE 267B             (grfdrv_beta5_with):03460                  bne   f1.do        no, go setup for multi-color/shiftable screen
0FE0 9EB0             (grfdrv_beta5_with):03461                  ldx   <$B0         get cached font pointer
0FE2 2777             (grfdrv_beta5_with):03462                  beq   f1.do        didn't find a font: skip ahead
                      (grfdrv_beta5_with):03463                IFNE  H6309
                      (grfdrv_beta5_with):03464                  tim   #Prop,<$E    Proportional?
                      (grfdrv_beta5_with):03465                ELSE
0FE4 960E             (grfdrv_beta5_with):03466                  lda   <$E 
0FE6 8510             (grfdrv_beta5_with):03467                  bita  #Prop        Proportional?
                      (grfdrv_beta5_with):03468                ENDC
0FE8 2671             (grfdrv_beta5_with):03469                  bne   f1.do        yes, use slow method
                      (grfdrv_beta5_with):03470         * OK.  Now we have GFX screens only here, at least one character printed
                      (grfdrv_beta5_with):03471         * to ensure that the buffers etc. are set up and mapped in.  We can now go to
                      (grfdrv_beta5_with):03472         * special-purpose routine for fixed-width 8x8 fonts: ~15% speedup!
0FEA EC05             (grfdrv_beta5_with):03473                  ldd   Grf.BSz,x    Get size of font buffer (data only)
0FEC 308820           (grfdrv_beta5_with):03474                  leax  Grf.Siz,x    point X to the first character in the font
0FEF 338B             (grfdrv_beta5_with):03475                  leau  d,x          point U to the absolute end-address of the font
                      (grfdrv_beta5_with):03476         * Moved the DP saves from $B2 to $B9; RG
0FF1 DFB9             (grfdrv_beta5_with):03477                  stu   <$B9         save the pointer for later
0FF3 4F               (grfdrv_beta5_with):03478                  clra
0FF4 E623             (grfdrv_beta5_with):03479                  ldb   Wt.CWTmp,y   get bytes per font character
0FF6 DDBB             (grfdrv_beta5_with):03480                  std   <$BB
0FF8 ECA81B           (grfdrv_beta5_with):03481                  ldd   Wt.MaxX,y    get maximum X position (e.g. 319, 639)
0FFB 830007           (grfdrv_beta5_with):03482                  subd  #$0007       (D+1-8) point D to the last X position possible for
0FFE DDBD             (grfdrv_beta5_with):03483                  std   <$BD         a character, and save it
                      (grfdrv_beta5_with):03484         * Note: W *SHOULD* be set up properly from the previous call to print one
                      (grfdrv_beta5_with):03485         * character, but that character might have caused the text to wrap, and thus
                      (grfdrv_beta5_with):03486         * destroy W
1000 CE51C0           (grfdrv_beta5_with):03487                  ldu   #GrfStrt+Fast.pt-2  point to fast font put table
1003 D660             (grfdrv_beta5_with):03488                  ldb   <$0060       get screen type
1005 58               (grfdrv_beta5_with):03489                  aslb               2 bytes per entry
                      (grfdrv_beta5_with):03490                IFNE  H6309
                      (grfdrv_beta5_with):03491                  ldw   b,u          grab pointer to routine to use
                      (grfdrv_beta5_with):03492                  puls  u            restore character pointer
                      (grfdrv_beta5_with):03493                ELSE
1006 3410             (grfdrv_beta5_with):03494                  pshs  x            (7) Save X
1008 AEC5             (grfdrv_beta5_with):03495                  ldx   b,u          (6) Get ptr to routine to use
100A 9FB5             (grfdrv_beta5_with):03496                  stx   <$B5         (5) Save it
100C 3550             (grfdrv_beta5_with):03497                  puls  x,u          (9) Restore X & character ptr
                      (grfdrv_beta5_with):03498                ENDC
100E 203F             (grfdrv_beta5_with):03499                  bra   f2.do        jump to the middle of the loop
                      (grfdrv_beta5_with):03500         
                      (grfdrv_beta5_with):03501         * U = pointer to characters to print
                      (grfdrv_beta5_with):03502         * Y = window table pointer
                      (grfdrv_beta5_with):03503         * X = font GP buffer pointer
1010 A6C0             (grfdrv_beta5_with):03504         f2.next  lda   ,u+          grab a character
1012 3470             (grfdrv_beta5_with):03505                  pshs  x,y,u        save all sorts of registers
1014 2A02             (grfdrv_beta5_with):03506                bpl   f2.next2     If no high bit on character, skip adjust
1016 8D65             (grfdrv_beta5_with):03507                  bsr   txt.fixa     fix the character in A so it's printable (does not affect Y)
1018 1F89             (grfdrv_beta5_with):03508         f2.next2 tfr   a,b          move character to B
101A 4F               (grfdrv_beta5_with):03509                  clra               make 16-bit offset
                      (grfdrv_beta5_with):03510                IFNE  H6309
                      (grfdrv_beta5_with):03511                  lsld               ALL fonts are 8 pixels high
                      (grfdrv_beta5_with):03512                  lsld
                      (grfdrv_beta5_with):03513                  lsld
                      (grfdrv_beta5_with):03514                  addr  d,x          point to the font data
                      (grfdrv_beta5_with):03515                ELSE
101B 58               (grfdrv_beta5_with):03516                  lslb
101C 49               (grfdrv_beta5_with):03517                  rola
101D 58               (grfdrv_beta5_with):03518                  lslb
101E 49               (grfdrv_beta5_with):03519                  rola
101F 58               (grfdrv_beta5_with):03520                  lslb
1020 49               (grfdrv_beta5_with):03521                  rola
1021 308B             (grfdrv_beta5_with):03522                  leax  d,x
                      (grfdrv_beta5_with):03523                ENDC
1023 9CB9             (grfdrv_beta5_with):03524                  cmpx  <$B9         are we within the font's memory buffer?
1025 2503             (grfdrv_beta5_with):03525                  blo   f2.fnt       yes, we're OK
1027 8E512F           (grfdrv_beta5_with):03526                  ldx   #GrfStrt+L0FFA  otherwise point to default font character '.'
102A 170162           (grfdrv_beta5_with):03527         f2.fnt   lbsr  L102F.1      go print the character on the screen
102D 10AE62           (grfdrv_beta5_with):03528                  ldy   2,s          get window pointer again
1030 EC3B             (grfdrv_beta5_with):03529                  ldd   Wt.Cur,y     get current cursor address
1032 D3BB             (grfdrv_beta5_with):03530                  addd  <$BB         add in bytes per character
1034 ED3B             (grfdrv_beta5_with):03531                  std   Wt.Cur,y
1036 EC3E             (grfdrv_beta5_with):03532                  ldd   Wt.CurX,y    Get X coordinate
1038 C30008           (grfdrv_beta5_with):03533                  addd  #$0008       Add to X pixel count (1, 6 or 8?)
103B ED3E             (grfdrv_beta5_with):03534                  std   Wt.CurX,y    Update value
103D 1093BD           (grfdrv_beta5_with):03535                  cmpd  <$BD         Compare with maximum X coordinate
1040 230B             (grfdrv_beta5_with):03536                  bls   f2.do1       If not past right hand side, leave
                      (grfdrv_beta5_with):03537                IFNE  H6309
                      (grfdrv_beta5_with):03538                  pshsw              save pointer to which font-put routine to use
                      (grfdrv_beta5_with):03539                ELSE
1042 DCB5             (grfdrv_beta5_with):03540                  ldd   <$B5         Get ptr to which font-put routine to use
1044 3406             (grfdrv_beta5_with):03541                  pshs  d            Save before we call L1238
                      (grfdrv_beta5_with):03542                ENDC
1046 1703B5           (grfdrv_beta5_with):03543                  lbsr  L1238        fix X,Y coordinate, scroll screen, set up bitmasks (destroys D)
                      (grfdrv_beta5_with):03544                IFNE  H6309
                      (grfdrv_beta5_with):03545                  pulsw
                      (grfdrv_beta5_with):03546                ELSE
1049 3510             (grfdrv_beta5_with):03547                  puls  x
104B 9FB5             (grfdrv_beta5_with):03548                  stx   <$B5
                      (grfdrv_beta5_with):03549                ENDC
104D 3570             (grfdrv_beta5_with):03550         f2.do1   puls  x,y,u        restore registers
104F 0A83             (grfdrv_beta5_with):03551         f2.do    dec   <$83         count down
1051 26BD             (grfdrv_beta5_with):03552                  bne   f2.next      continue
1053 204F             (grfdrv_beta5_with):03553                  bra   L0F78        and exit if we're all done
                      (grfdrv_beta5_with):03554         
1055 A680             (grfdrv_beta5_with):03555         f1.next  lda   ,x+
1057 3410             (grfdrv_beta5_with):03556                  pshs  x
                      (grfdrv_beta5_with):03557         *         bsr   L0F4B.2      put one character on the screen
1059 8D12             (grfdrv_beta5_with):03558                  bsr   Not8Wd       put one character on the screen
105B 3510             (grfdrv_beta5_with):03559         f1.do    puls  x            restore count, pointer
105D 0A83             (grfdrv_beta5_with):03560                  dec   <$83         count down
105F 26F4             (grfdrv_beta5_with):03561                  bne   f1.next      continue
1061 2041             (grfdrv_beta5_with):03562                  bra   L0F78        and exit if we're all done
                      (grfdrv_beta5_with):03563         
                      (grfdrv_beta5_with):03564         * L0F4B.1 is now a subroutine to put one character on the screen...
                      (grfdrv_beta5_with):03565         * Alpha put entry point
                      (grfdrv_beta5_with):03566         * Entry: A = Character to write
                      (grfdrv_beta5_with):03567         *        Y = window table ptr
                      (grfdrv_beta5_with):03568         * 07/19/93: LBSR L0177 to L0175
1063 17F08B           (grfdrv_beta5_with):03569         L0F4B.1  lbsr  L0175        Switch to the window we are writing to
1066 1700D1           (grfdrv_beta5_with):03570                  lbsr  L1002        set up character x,y sizes and font pointers
1069 109FA9           (grfdrv_beta5_with):03571                  sty   <$A9         Save window tbl ptr from this Alpha put
106C 4D               (grfdrv_beta5_with):03572                  tsta               Is the character ASCII 127 or less?
106D 2A02             (grfdrv_beta5_with):03573         Not8Wd   bpl   L0F4D        Yes, skip adjusting
106F 8D0C             (grfdrv_beta5_with):03574         L0F4B.2  bsr   txt.fixa     fix A: adds 10 cycles for slow puts and gfx puts
1071 D660             (grfdrv_beta5_with):03575         L0F4D    ldb   <$0060       Get screen type
1073 2A03             (grfdrv_beta5_with):03576                  bpl   L0F73        If gfx  screen, go do it
1075 8D43             (grfdrv_beta5_with):03577                  bsr   L0F7C        hardware text; go print it on-screen
1077 8C               (grfdrv_beta5_with):03578                  fcb   $8C          skip the next 2 bytes
1078 8D6E             (grfdrv_beta5_with):03579         L0F73    bsr   L0FAE        go print graphic font
107A 160370           (grfdrv_beta5_with):03580         L0F75    lbra  L121A        check for screen scroll and/or next line
                      (grfdrv_beta5_with):03581         
                      (grfdrv_beta5_with):03582         * LCB - Added a flag that signifies that we are doing a GFX font, and that the
                      (grfdrv_beta5_with):03583         *       font buffer size is $700 bytes. If this flag is set at entry to this
                      (grfdrv_beta5_with):03584         *       routine (after bpl), return to print it.
                      (grfdrv_beta5_with):03585         * Entry: A=ASCII character to print, and CC flags set from TSTA
                      (grfdrv_beta5_with):03586         * exit:  A=modified character for GIME
                      (grfdrv_beta5_with):03587         *txt.fixa bpl   L0F6B        Yes, go print it
107D 0DAB             (grfdrv_beta5_with):03588         txt.fixa tst   <grBigFnt    Gfx mode with a 224 char font?
107F 2707             (grfdrv_beta5_with):03589                  beq   NormRMap     No, do normal remapping
1081 81E0             (grfdrv_beta5_with):03590                  cmpa  #$e0         Last 31 chars?
1083 2502             (grfdrv_beta5_with):03591                  blo   BigOut       No, exit
1085 80E0             (grfdrv_beta5_with):03592                  suba  #$e0         Point to 1st 31 chars in font
1087 39               (grfdrv_beta5_with):03593         BigOut   rts
                      (grfdrv_beta5_with):03594         
1088 81BF             (grfdrv_beta5_with):03595         NormRMap cmpa  #$BF
108A 220B             (grfdrv_beta5_with):03596                  bhi   L0F61        Anything >=$C0 gets wrapped back
108C 84EF             (grfdrv_beta5_with):03597                  anda  #$EF         Mask out high bit
108E 8090             (grfdrv_beta5_with):03598                  suba  #$90
1090 811A             (grfdrv_beta5_with):03599                  cmpa  #$1A
1092 240D             (grfdrv_beta5_with):03600                  bhs   L0F6B        yes, go print it
1094 862E             (grfdrv_beta5_with):03601         L0F5D    lda   #'.          Change illegal character to a period
1096 39               (grfdrv_beta5_with):03602                  rts
                      (grfdrv_beta5_with):03603         
1097 84DF             (grfdrv_beta5_with):03604         L0F61    anda  #$DF
1099 80C1             (grfdrv_beta5_with):03605                  suba  #$C1
109B 2BF7             (grfdrv_beta5_with):03606                  bmi   L0F5D        yes, change it to a period
109D 8119             (grfdrv_beta5_with):03607                  cmpa  #$19
109F 22F3             (grfdrv_beta5_with):03608                  bhi   L0F5D        yes, change it to a period
10A1 39               (grfdrv_beta5_with):03609         L0F6B    rts
                      (grfdrv_beta5_with):03610         
                      (grfdrv_beta5_with):03611         * this adds 10 cycles to any normal alpha put, but it should
                      (grfdrv_beta5_with):03612         * save us lots of cycles later!
10A2 8DBF             (grfdrv_beta5_with):03613         L0F4B    bsr   L0F4B.1      do internal alpha-put routine
                      (grfdrv_beta5_with):03614         * Return to the system without any errors
10A4 5F               (grfdrv_beta5_with):03615         L0F78    clrb               No errors
                      (grfdrv_beta5_with):03616         * Return to system (Jumps to [D.Flip0] with X=system stack ptr & A=CC status)
10A5 1FA8             (grfdrv_beta5_with):03617         SysRet   tfr   cc,a         save IRQ status for os9p1
10A7 1A50             (grfdrv_beta5_with):03618                  orcc  #IntMasks    Shut off interrupts
10A9 BE1007           (grfdrv_beta5_with):03619                  ldx   >WGlobal+G.GrfStk       Get system stack ptr
10AC 7F1002           (grfdrv_beta5_with):03620                  clr   >WGlobal+G.GfBusy       Flag that Grfdrv will no longer be task 1
                      (grfdrv_beta5_with):03621                IFNE  H6309
                      (grfdrv_beta5_with):03622                  tfr   0,dp         Restore system DP register for os9p1
                      (grfdrv_beta5_with):03623                ELSE
10AF 3402             (grfdrv_beta5_with):03624                  pshs  a
10B1 4F               (grfdrv_beta5_with):03625                  clra
10B2 1F8B             (grfdrv_beta5_with):03626                  tfr   a,dp
10B4 3502             (grfdrv_beta5_with):03627                  puls  a
                      (grfdrv_beta5_with):03628                ENDC
10B6 6E9F00A9         (grfdrv_beta5_with):03629                  jmp   [>D.Flip0]   Return to system
                      (grfdrv_beta5_with):03630         
                      (grfdrv_beta5_with):03631         * Print text to hardware text - optimized for lowercase, then upper
                      (grfdrv_beta5_with):03632         * Can be switched around by swapping blo/bhi sections. This does one char @ a time
                      (grfdrv_beta5_with):03633         *   and is called from L0F4B.2.
                      (grfdrv_beta5_with):03634         * Entry: Y=Window table ptr
                      (grfdrv_beta5_with):03635         *        A=character to print (pre-conversion)
                      (grfdrv_beta5_with):03636         * Exit: Character/attribute pair put on screen
                      (grfdrv_beta5_with):03637         *       X=updated cursor address
10BA E628             (grfdrv_beta5_with):03638         L0F7C    ldb   Wt.Attr,y    Get current attribute byte
10BC AE3B             (grfdrv_beta5_with):03639                  ldx   Wt.Cur,y     Get address of cursor on screen
                      (grfdrv_beta5_with):03640         * Print text to hardware text entry point from f.txt (fast text) loop
10BE 8160             (grfdrv_beta5_with):03641         L0F7C.0  cmpa  #$60         Convert ASCII reverse apostrophe to apostrophe
10C0 2211             (grfdrv_beta5_with):03642                  bhi   L0F8E        Above is safe, go straight to print
10C2 2604             (grfdrv_beta5_with):03643                  bne   L0F88        No, try next
10C4 8627             (grfdrv_beta5_with):03644                  lda   #$27         GIME apostrophe
10C6 200B             (grfdrv_beta5_with):03645                  bra   L0F8E        Skip rest
                      (grfdrv_beta5_with):03646                  
10C8 815E             (grfdrv_beta5_with):03647         L0F88    cmpa  #$5E         Convert ASCII carat to GIME carat
10CA 2507             (grfdrv_beta5_with):03648                  blo   L0F8E        Below is safe, go straight to print
10CC 2603             (grfdrv_beta5_with):03649                  bne   L0F82        No, has to be Underscore
10CE 8660             (grfdrv_beta5_with):03650                  lda   #$60         GIME carat
10D0 8C               (grfdrv_beta5_with):03651                  fcb   $8C          skip 2 bytes (CMPX opcode): same cycle time, 1 byte shorter
10D1 867F             (grfdrv_beta5_with):03652         L0F82    lda   #$7F         Convert ASCII underscore to GIME underscore
                      (grfdrv_beta5_with):03653         * Hardware transparency added back in, as it is in version 3.0 upgrade as well
                      (grfdrv_beta5_with):03654         * This keeps the background color in the current character, only changing foreground
                      (grfdrv_beta5_with):03655         *  color, blink and underline attributes to current settings
10D3 6D29             (grfdrv_beta5_with):03656         L0F8E    tst   Wt.BSW,y     transparent characters?
10D5 2B0E             (grfdrv_beta5_with):03657                  bmi   L0FA4        no, go on
                      (grfdrv_beta5_with):03658                IFNE  H6309
                      (grfdrv_beta5_with):03659                  aim   #$07,1,x     mask off everything but background attributes
                      (grfdrv_beta5_with):03660                ELSE
10D7 97BF             (grfdrv_beta5_with):03661                  sta   <grScrtch
10D9 A601             (grfdrv_beta5_with):03662                  lda   1,x
10DB 8407             (grfdrv_beta5_with):03663                  anda  #7
10DD A701             (grfdrv_beta5_with):03664                  sta   1,x
10DF 96BF             (grfdrv_beta5_with):03665                  lda   <grScrtch
                      (grfdrv_beta5_with):03666                ENDC
10E1 C4F8             (grfdrv_beta5_with):03667                  andb  #$F8         get rid of background color
10E3 EA01             (grfdrv_beta5_with):03668                  orb   1,x          merge in background color
10E5 ED81             (grfdrv_beta5_with):03669         L0FA4    std   ,x++         save character & attribute to screen
10E7 39               (grfdrv_beta5_with):03670                  rts                Check for screen scroll/new line
                      (grfdrv_beta5_with):03671         
                      (grfdrv_beta5_with):03672         * Print text to graphics window
                      (grfdrv_beta5_with):03673         * Note: $61 & $62 contain the bit masks for the foreground & background colors
                      (grfdrv_beta5_with):03674         *   for the whole width of the byte (ex. a 2 color would be a $00 or $ff)
10E8 3422             (grfdrv_beta5_with):03675         L0FAE    pshs  a,y          Preserve character to print & Window table ptr
10EA E629             (grfdrv_beta5_with):03676                  ldb   Wt.BSW,y     get current attributes
10EC D70E             (grfdrv_beta5_with):03677                  stb   <$000E       save 'em for quicker access
10EE C504             (grfdrv_beta5_with):03678                  bitb  #Invers      inverse on?
10F0 2706             (grfdrv_beta5_with):03679                  beq   L0FBE        no, go on
                      (grfdrv_beta5_with):03680         * 07/20/93 mod: Get colors from window table instead of GRFDRV mem for speedup
10F2 A627             (grfdrv_beta5_with):03681                  lda   Wt.Back,y    Get background color
10F4 E626             (grfdrv_beta5_with):03682                  ldb   Wt.Fore,y    Get foreground color
10F6 DD61             (grfdrv_beta5_with):03683                  std   <$0061       save 'em back
10F8 9EB0             (grfdrv_beta5_with):03684         L0FBE    ldx   <$00B0       get cached font pointer
10FA 270E             (grfdrv_beta5_with):03685                  beq   L0FCC        if none, point to '.' font character
10FC E608             (grfdrv_beta5_with):03686                  ldb   Grf.XSz+1,x  get x-size of the font
10FE D76F             (grfdrv_beta5_with):03687                  stb   <$006F       save here again: proportional fonts destroy it
1100 A6E4             (grfdrv_beta5_with):03688                  lda   ,s           grab again the character to print
                      (grfdrv_beta5_with):03689         * ATD: is this next line really necessary?  The code at L064A ENSURES that
                      (grfdrv_beta5_with):03690         * Grf.XBSz = Grf.YSz = $08, so this next line could be replaced by a LDB #8
                      (grfdrv_beta5_with):03691         * LCB - leaving as is to allow for variable width fonts in future (can share
                      (grfdrv_beta5_with):03692         * some code with proportional fonts, which already have variable width up to 8)
1102 E60B             (grfdrv_beta5_with):03693                  ldb   Grf.XBSz,x   get size of each buffer entry in bytes
1104 3D               (grfdrv_beta5_with):03694                  mul                Calculate offset into buffer for character
1105 10A305           (grfdrv_beta5_with):03695                  cmpd  Grf.BSz,x    Still in our buffer? (Not illegal character?)
1108 2505             (grfdrv_beta5_with):03696                  blo   L0FD1        yes, go on
110A 8E512F           (grfdrv_beta5_with):03697         L0FCC    ldx   #GrfStrt+L0FFA  Point to default font char ('.')
110D 2005             (grfdrv_beta5_with):03698                  bra   L0FD6
                      (grfdrv_beta5_with):03699         
110F C30020           (grfdrv_beta5_with):03700         L0FD1    addd  #Grf.Siz     Add 32 (past header in Gfx buffer table?)
                      (grfdrv_beta5_with):03701                IFNE  H6309
                      (grfdrv_beta5_with):03702                  addr  d,x          Point to the character within buffer we need
                      (grfdrv_beta5_with):03703                ELSE
1112 308B             (grfdrv_beta5_with):03704                  leax  d,x
                      (grfdrv_beta5_with):03705                ENDC
1114 D66F             (grfdrv_beta5_with):03706         L0FD6    ldb   <$006F       get X size of font
1116 C108             (grfdrv_beta5_with):03707                  cmpb  #$08         Even byte wide size font?
1118 260A             (grfdrv_beta5_with):03708                  bne   L0FEC        no, go setup for multi-color/shiftable screen
                      (grfdrv_beta5_with):03709                IFNE  H6309
                      (grfdrv_beta5_with):03710                  tim   #Prop,<$E    Proportional?
                      (grfdrv_beta5_with):03711                ELSE
111A 3402             (grfdrv_beta5_with):03712                  pshs  a
111C 960E             (grfdrv_beta5_with):03713                  lda   <$E 
111E 8510             (grfdrv_beta5_with):03714                  bita  #Prop
1120 3502             (grfdrv_beta5_with):03715                  puls  a
                      (grfdrv_beta5_with):03716                ENDC
1122 2759             (grfdrv_beta5_with):03717                  beq   L102F        no, use fast method
                      (grfdrv_beta5_with):03718         * Setup for multi-color/shiftable gfx text
1124 CE5298           (grfdrv_beta5_with):03719         L0FEC    ldu   #GrfStrt+L10DF  Normal gfx text vector
1127 10AE61           (grfdrv_beta5_with):03720                  ldy   1,s          get window table pointer back
112A 170100           (grfdrv_beta5_with):03721                  lbsr  L106D        go print it
112D 35A2             (grfdrv_beta5_with):03722         L0FF8    puls  a,y,pc       return
                      (grfdrv_beta5_with):03723         
                      (grfdrv_beta5_with):03724         * Default font character if no font buffer defined ('.')
112F 00               (grfdrv_beta5_with):03725         L0FFA    fcb   %00000000
1130 00               (grfdrv_beta5_with):03726                  fcb   %00000000
1131 00               (grfdrv_beta5_with):03727                  fcb   %00000000
1132 00               (grfdrv_beta5_with):03728                  fcb   %00000000
1133 00               (grfdrv_beta5_with):03729                  fcb   %00000000
1134 00               (grfdrv_beta5_with):03730                  fcb   %00000000
1135 10               (grfdrv_beta5_with):03731                  fcb   %00010000
1136 00               (grfdrv_beta5_with):03732                  fcb   %00000000
                      (grfdrv_beta5_with):03733         
                      (grfdrv_beta5_with):03734         * Check if font buffers defined?
1137 17EFBE           (grfdrv_beta5_with):03735         L0FFF    lbsr  L0177
113A 3402             (grfdrv_beta5_with):03736         L1002    pshs  a            save character
113C D660             (grfdrv_beta5_with):03737                  ldb   <$0060       get STY marker
113E 2A0D             (grfdrv_beta5_with):03738                  bpl   L1011        graphics, go on
                      (grfdrv_beta5_with):03739         * Set text font H/W
1140 CC0001           (grfdrv_beta5_with):03740                  ldd   #$0001       get text font size
1143 DD6E             (grfdrv_beta5_with):03741                  std   <$006E
1145 DD70             (grfdrv_beta5_with):03742                  std   <$0070
                      (grfdrv_beta5_with):03743         * Added LCB 97/05/26 for 224 char font support
1147 97AB             (grfdrv_beta5_with):03744                  sta   <grBigFnt    Flag that this is not a 224 char font
1149 3582             (grfdrv_beta5_with):03745                  puls  a,pc         larger, but faster than LDQ/bra L1022
                      (grfdrv_beta5_with):03746         
                      (grfdrv_beta5_with):03747         * Set undefined graphics font H/W
                      (grfdrv_beta5_with):03748         * L100F is ONLY called from alpha put routine, above.
114B 3402             (grfdrv_beta5_with):03749         L100F    pshs  a            Preserve A (so PULS PC,A works)
114D E62B             (grfdrv_beta5_with):03750         L1011    ldb   Wt.FBlk,y    any font defined?
114F 260B             (grfdrv_beta5_with):03751                  bne   L101F        yes, go map it in & get X/Y sizes
1151 53               (grfdrv_beta5_with):03752                  comb               set carry
                      (grfdrv_beta5_with):03753                IFNE  H6309
                      (grfdrv_beta5_with):03754                  ldq   #$00080008   get default width & height
                      (grfdrv_beta5_with):03755                  tfr   0,x          make garbage font ptr
                      (grfdrv_beta5_with):03756                ELSE
1152 CC0008           (grfdrv_beta5_with):03757                  ldd   #8
1155 DDB5             (grfdrv_beta5_with):03758                  std   <$B5
1157 8E0000           (grfdrv_beta5_with):03759                  ldx   #0
                      (grfdrv_beta5_with):03760                ENDC
115A 200C             (grfdrv_beta5_with):03761                  bra   L1020
                      (grfdrv_beta5_with):03762         
                      (grfdrv_beta5_with):03763         * Setup defined graphics font H/W
115C 1706AC           (grfdrv_beta5_with):03764         L101F    lbsr  L017C        map in font block
115F AE2C             (grfdrv_beta5_with):03765                  ldx   Wt.FOff,y    get offset of font in mem block
1161 5F               (grfdrv_beta5_with):03766                  clrb               clear carry
                      (grfdrv_beta5_with):03767                IFNE  H6309
                      (grfdrv_beta5_with):03768                  ldq   Grf.XSz,x    Get width & height from window table
                      (grfdrv_beta5_with):03769                ELSE
1162 EC09             (grfdrv_beta5_with):03770                  ldd   Grf.XSz+2,x
1164 DDB5             (grfdrv_beta5_with):03771                  std   <$B5
1166 EC07             (grfdrv_beta5_with):03772                  ldd   Grf.XSz,x
                      (grfdrv_beta5_with):03773                ENDC
1168 9FB0             (grfdrv_beta5_with):03774         L1020    stx   <$B0         cache font pointer for later
     116A             (grfdrv_beta5_with):03775         L1022    equ   *
                      (grfdrv_beta5_with):03776                IFNE  H6309
                      (grfdrv_beta5_with):03777                  stq   <$6e         Set working copies
                      (grfdrv_beta5_with):03778                ELSE
116A DD6E             (grfdrv_beta5_with):03779                  std   <$6e
116C DCB5             (grfdrv_beta5_with):03780                  ldd   <$B5
116E DD70             (grfdrv_beta5_with):03781                  std   <$70
                      (grfdrv_beta5_with):03782                ENDC
                      (grfdrv_beta5_with):03783         * LCB 05/25/97 - Added flag for 224 char fonts
1170 CC0700           (grfdrv_beta5_with):03784                  ldd   #$700        Size of font we are checking for
1173 10A305           (grfdrv_beta5_with):03785                  cmpd  Grf.BSz,x    Is this a big font?
1176 2601             (grfdrv_beta5_with):03786                  bne   NotBig
1178 5C               (grfdrv_beta5_with):03787                  incb               Flag it is a big font
1179 D7AB             (grfdrv_beta5_with):03788         NotBig   stb   <grBigFnt    Set flag for 224 char font
117B 3582             (grfdrv_beta5_with):03789                  puls  a,pc         return
                      (grfdrv_beta5_with):03790         
117D 8D02             (grfdrv_beta5_with):03791         L102F    bsr   L102F.2
117F 20AC             (grfdrv_beta5_with):03792                  bra   L0FF8
                      (grfdrv_beta5_with):03793         
                      (grfdrv_beta5_with):03794         * fast draw a graphic font character to a graphics window
                      (grfdrv_beta5_with):03795         * If inverse was selected, they have already been swapped
                      (grfdrv_beta5_with):03796         * Note: <$61 contains the foreground color mask, <$62 contains the background
                      (grfdrv_beta5_with):03797         *   color mask.
                      (grfdrv_beta5_with):03798         * Entry: Y=window table pointer
                      (grfdrv_beta5_with):03799         *        X=Ptr to char in font we are printing
1181 CE51C0           (grfdrv_beta5_with):03800         L102F.2  ldu   #GrfStrt+Fast.pt-2  point to fast font put table
1184 D660             (grfdrv_beta5_with):03801                  ldb   <$0060       get screen type
1186 58               (grfdrv_beta5_with):03802                  aslb               2 bytes per entry
                      (grfdrv_beta5_with):03803                IFNE  H6309
                      (grfdrv_beta5_with):03804                  ldw   b,u          grab pointer to routine to use
                      (grfdrv_beta5_with):03805                ELSE
1187 9FBF             (grfdrv_beta5_with):03806                  stx   <grScrtch
1189 AEC5             (grfdrv_beta5_with):03807                  ldx   b,u
118B 9FB5             (grfdrv_beta5_with):03808                  stx   <$B5
118D 9EBF             (grfdrv_beta5_with):03809                  ldx   <grScrtch
                      (grfdrv_beta5_with):03810                ENDC
118F 10AE3B           (grfdrv_beta5_with):03811         L102F.1  ldy   Wt.Cur,y     get cursor address on screen
1192 1E12             (grfdrv_beta5_with):03812                  exg   x,y          Swap Cursor address & font address
1194 CE520E           (grfdrv_beta5_with):03813                  ldu   #GrfStrt+fast.tbl  point to table of expanded pixels
1197 9671             (grfdrv_beta5_with):03814                  lda   <$71         get font height
1199 4A               (grfdrv_beta5_with):03815                  deca               adjust it for double branch compare
119A 9720             (grfdrv_beta5_with):03816                  sta   <$20         save in temp buffer for later
119C A6A0             (grfdrv_beta5_with):03817         L1039    lda   ,y+          get a line of character (8 pixels)
                      (grfdrv_beta5_with):03818                IFNE  H6309
                      (grfdrv_beta5_with):03819                  tim   #Bold,<$0E   Bold attribute on?
                      (grfdrv_beta5_with):03820                ELSE
119E 3402             (grfdrv_beta5_with):03821                  pshs  a
11A0 960E             (grfdrv_beta5_with):03822                  lda   <$0E 
11A2 8520             (grfdrv_beta5_with):03823                  bita  #Bold
11A4 3502             (grfdrv_beta5_with):03824                  puls  a
                      (grfdrv_beta5_with):03825                ENDC
11A6 2703             (grfdrv_beta5_with):03826                  beq   L1044        no, skip bold mask
11A8 44               (grfdrv_beta5_with):03827                  lsra               shift pixel pattern
11A9 AA3F             (grfdrv_beta5_with):03828                  ora   -1,y         merge it with original to double up pixels
     11AB             (grfdrv_beta5_with):03829         L1044    equ   *
                      (grfdrv_beta5_with):03830                IFNE  H6309
                      (grfdrv_beta5_with):03831                  jsr   ,w           do a full 8-pixel width of bytes
                      (grfdrv_beta5_with):03832                ELSE
11AB AD9F11B5         (grfdrv_beta5_with):03833                  jsr   [>GrfMem+$B5]
                      (grfdrv_beta5_with):03834                ENDC
11AF D663             (grfdrv_beta5_with):03835                  ldb   <$0063       get bytes per line
11B1 3A               (grfdrv_beta5_with):03836                  abx                move screen address to next line
11B2 0A20             (grfdrv_beta5_with):03837                  dec   <$20         done 7 or 8 lines?
11B4 2EE6             (grfdrv_beta5_with):03838                  bgt   L1039        No, go do next line
11B6 2B26             (grfdrv_beta5_with):03839                  bmi   L1052        yes, return
                      (grfdrv_beta5_with):03840                IFNE  H6309
                      (grfdrv_beta5_with):03841                  tim   #Under,<$0E  Underline attribute on?
                      (grfdrv_beta5_with):03842                  beq   L1039        No, go do last byte of font
                      (grfdrv_beta5_with):03843                ELSE
11B8 960E             (grfdrv_beta5_with):03844                  lda   <$0E 
11BA 8440             (grfdrv_beta5_with):03845                  anda  #Under       Underline attribute on?
11BC 27DE             (grfdrv_beta5_with):03846                  beq   L1039        No, go do last byte of font
                      (grfdrv_beta5_with):03847                ENDC
11BE 86FF             (grfdrv_beta5_with):03848                  lda   #$FF         Yes, set underline byte
11C0 20E9             (grfdrv_beta5_with):03849                  bra   L1044        Go put it in instead
                      (grfdrv_beta5_with):03850         
11C2 51CA             (grfdrv_beta5_with):03851         Fast.pt  fdb   GrfStrt+Font.2    2 color font
11C4 51EB             (grfdrv_beta5_with):03852                  fdb   GrfStrt+Font.4    4 color
11C6 51EB             (grfdrv_beta5_with):03853                  fdb   GrfStrt+Font.4    4 color
11C8 51DF             (grfdrv_beta5_with):03854                  fdb   GrfStrt+Font.16   16 color
                      (grfdrv_beta5_with):03855         
                      (grfdrv_beta5_with):03856         * smaller than old method.  Perhaps slower, but it should get the right
                      (grfdrv_beta5_with):03857         * foreground/background colors
11CA 1F89             (grfdrv_beta5_with):03858         Font.2   tfr   a,b          move font character into mask
11CC 53               (grfdrv_beta5_with):03859                  comb               invert it
11CD 0D0E             (grfdrv_beta5_with):03860         ChkTChr  tst   <$0E         Transparent attribute on?
11CF 2A03             (grfdrv_beta5_with):03861                  bpl   L1051        if transparent, do only foreground colors
11D1 D462             (grfdrv_beta5_with):03862                  andb  <$0062       AND in background color: 0 or 1
11D3 8C               (grfdrv_beta5_with):03863                  fcb   $8C          skip 2 bytes
11D4 E484             (grfdrv_beta5_with):03864         L1051    andb  ,x           AND in background
11D6 9461             (grfdrv_beta5_with):03865                  anda  <$0061       AND in foreground color
                      (grfdrv_beta5_with):03866                IFNE  H6309
                      (grfdrv_beta5_with):03867                  orr   b,a          OR in the background that's already there
                      (grfdrv_beta5_with):03868                ELSE
11D8 D7BF             (grfdrv_beta5_with):03869                  stb   <grScrtch
11DA 9ABF             (grfdrv_beta5_with):03870                  ora   <grScrtch
                      (grfdrv_beta5_with):03871                ENDC
11DC A784             (grfdrv_beta5_with):03872                  sta   ,x           save font to screen
11DE 39               (grfdrv_beta5_with):03873         L1052    rts                and return
                      (grfdrv_beta5_with):03874         
11DF 8D3D             (grfdrv_beta5_with):03875         Font.16  bsr   get.font     expand it once
11E1 3412             (grfdrv_beta5_with):03876                  pshs  a,x          save low byte, and current X coordinate
11E3 1F98             (grfdrv_beta5_with):03877                  tfr   b,a          move right hand mask into A
11E5 3002             (grfdrv_beta5_with):03878                  leax  2,x          do the right side of the font first
11E7 8D02             (grfdrv_beta5_with):03879                  bsr   Font.4       expand it again, and do another 2 bytes
11E9 3512             (grfdrv_beta5_with):03880                  puls  a,x          restore left hand byte and screen position
                      (grfdrv_beta5_with):03881         
11EB 8D31             (grfdrv_beta5_with):03882         Font.4   bsr   get.font     get the font data into 2 bytes
11ED 3406             (grfdrv_beta5_with):03883                  pshs  d            save mask
                      (grfdrv_beta5_with):03884                IFNE  H6309
                      (grfdrv_beta5_with):03885                  comd               invert it for background check
                      (grfdrv_beta5_with):03886                ELSE
11EF 43               (grfdrv_beta5_with):03887                  coma
11F0 53               (grfdrv_beta5_with):03888                  comb
                      (grfdrv_beta5_with):03889                ENDC
11F1 0D0E             (grfdrv_beta5_with):03890                  tst   <$0E         check transparent flag
11F3 2A06             (grfdrv_beta5_with):03891                  bpl   fast.for     if transparent, only do foreground colors
11F5 9462             (grfdrv_beta5_with):03892                  anda  <$62         AND in background color
11F7 D462             (grfdrv_beta5_with):03893                  andb  <$62         into both A and B
11F9 2004             (grfdrv_beta5_with):03894                  bra   fast.st
                      (grfdrv_beta5_with):03895         
     11FB             (grfdrv_beta5_with):03896         fast.for equ   *
                      (grfdrv_beta5_with):03897                IFNE  H6309
                      (grfdrv_beta5_with):03898                  andd  ,x           AND in background of screen if transparent
                      (grfdrv_beta5_with):03899                ELSE
11FB A484             (grfdrv_beta5_with):03900                  anda  ,x
11FD E401             (grfdrv_beta5_with):03901                  andb  1,x
                      (grfdrv_beta5_with):03902                ENDC
11FF ED84             (grfdrv_beta5_with):03903         fast.st  std   ,x           save new background of the screen
1201 3506             (grfdrv_beta5_with):03904                  puls  d            restore the old pixel mask
1203 9461             (grfdrv_beta5_with):03905                  anda  <$61         AND in foreground color
1205 D461             (grfdrv_beta5_with):03906                  andb  <$61         B, too
                      (grfdrv_beta5_with):03907                IFNE  H6309
                      (grfdrv_beta5_with):03908                  ord   ,x           OR in background that's already there
                      (grfdrv_beta5_with):03909                ELSE
1207 AA84             (grfdrv_beta5_with):03910                  ora   ,x
1209 EA01             (grfdrv_beta5_with):03911                  orb   1,x
                      (grfdrv_beta5_with):03912                ENDC
120B ED84             (grfdrv_beta5_with):03913                  std   ,x           save it on-screen
120D 39               (grfdrv_beta5_with):03914                  rts
                      (grfdrv_beta5_with):03915         
                      (grfdrv_beta5_with):03916         * convert a byte of font data into pixel data
                      (grfdrv_beta5_with):03917         * This table turns a 2-color nibble (4 pixels) into a 4-color byte (4 pixels)
                      (grfdrv_beta5_with):03918         * The lookup is done twice for 16-color screens
120E 00030C0F         (grfdrv_beta5_with):03919         fast.tbl fcb   $00,$03,$0C,$0F
1212 30333C3F         (grfdrv_beta5_with):03920                  fcb   $30,$33,$3C,$3F
1216 C0C3CCCF         (grfdrv_beta5_with):03921                  fcb   $C0,$C3,$CC,$CF
121A F0F3FCFF         (grfdrv_beta5_with):03922                  fcb   $F0,$F3,$FC,$FF
                      (grfdrv_beta5_with):03923         
                      (grfdrv_beta5_with):03924         * A = font byte data
                      (grfdrv_beta5_with):03925         * U = pointer to fast.tbl, above
                      (grfdrv_beta5_with):03926         * returns D = pixel mask for this byte for a 4-color screen
121E 97BF             (grfdrv_beta5_with):03927         get.font sta   <grScrtch
1220 840F             (grfdrv_beta5_with):03928                  anda  #%00001111
1222 E6C6             (grfdrv_beta5_with):03929                  ldb   a,u          get rightmost byte
1224 96BF             (grfdrv_beta5_with):03930                  lda   <grScrtch
1226 44               (grfdrv_beta5_with):03931                  lsra
1227 44               (grfdrv_beta5_with):03932                  lsra
1228 44               (grfdrv_beta5_with):03933                  lsra
1229 44               (grfdrv_beta5_with):03934                  lsra               move high nibble into low nibble
122A A6C6             (grfdrv_beta5_with):03935                  lda   a,u          get leftmost byte
122C 39               (grfdrv_beta5_with):03936                  rts
                      (grfdrv_beta5_with):03937         * ATD: end of new font routines
                      (grfdrv_beta5_with):03938         
                      (grfdrv_beta5_with):03939         * Draw a graphic font to multi color windows
                      (grfdrv_beta5_with):03940         * May want to change so E/F contains the byte from the font/screen mem to use
                      (grfdrv_beta5_with):03941         *   register to register AND/OR, etc.
122D 3410             (grfdrv_beta5_with):03942         L106D    pshs  x            save font address
122F CC528A           (grfdrv_beta5_with):03943                  ldd   #GrfStrt+L10CF  Point to default graphic plot routine
1232 DD10             (grfdrv_beta5_with):03944                  std   <$0010       Save vector
                      (grfdrv_beta5_with):03945                IFNE  H6309
                      (grfdrv_beta5_with):03946                  tim   #Prop,<$E    Proportional spacing?
                      (grfdrv_beta5_with):03947                ELSE
1234 960E             (grfdrv_beta5_with):03948                  lda   <$E          no need to preserve regA
1236 8510             (grfdrv_beta5_with):03949                  bita  #Prop
                      (grfdrv_beta5_with):03950                ENDC
1238 2723             (grfdrv_beta5_with):03951                  beq   L10A4        no, skip finding font size
                      (grfdrv_beta5_with):03952         * Calc positioning for proportional spacing
123A D671             (grfdrv_beta5_with):03953                  ldb   <$0071       Get Y pixel count
123C 5A               (grfdrv_beta5_with):03954                  decb               dec by 1 (0-7?)
123D 4F               (grfdrv_beta5_with):03955                  clra               Clear out byte for mask checking
                      (grfdrv_beta5_with):03956         * This goes through all 8 bytes of a font character, ORing them into A
                      (grfdrv_beta5_with):03957         * The resultant byte on completion of the loop has all bits set that will be
123E AA85             (grfdrv_beta5_with):03958         L1080    ora   b,x          Mask in byte from font
1240 5A               (grfdrv_beta5_with):03959                  decb               Dec counter (& position in font)
1241 2AFB             (grfdrv_beta5_with):03960                  bpl   L1080        Still more to check, continue
1243 4D               (grfdrv_beta5_with):03961                  tsta               Check byte still clear?
1244 2604             (grfdrv_beta5_with):03962                  bne   L108E        No, skip ahead (B=$ff at this point)
1246 046F             (grfdrv_beta5_with):03963                  lsr   <$006F       Divide X pixel count by 2 if it is
1248 2013             (grfdrv_beta5_with):03964                  bra   L10A4        Start printing with normal vector
                      (grfdrv_beta5_with):03965         
                      (grfdrv_beta5_with):03966         * Non-blank char
124A 5A               (grfdrv_beta5_with):03967         L108E    decb               dec B (# active pixels counter)
124B 48               (grfdrv_beta5_with):03968                  lsla               Shift merged pixel mask byte left 1 bit
124C 24FC             (grfdrv_beta5_with):03969                  bcc   L108E        Pixel is unused in font char, keep looking
                      (grfdrv_beta5_with):03970         * Found pixel that will be needed, set up vector to shift char to be flush
                      (grfdrv_beta5_with):03971         * left
124E 8E528C           (grfdrv_beta5_with):03972                  ldx   #GrfStrt+L10CF+2 Point to shifting gfx text plot routine
1251 3085             (grfdrv_beta5_with):03973                  leax  b,x
1253 9F10             (grfdrv_beta5_with):03974                  stx   <$0010       Save the vector
                      (grfdrv_beta5_with):03975         * Count # pixels that will be active
1255 C601             (grfdrv_beta5_with):03976                  ldb   #$01         Set up counter for #pixels to print (min.=2)
1257 5C               (grfdrv_beta5_with):03977         L109E    incb               Inc counter
1258 48               (grfdrv_beta5_with):03978                  lsla               Shift out merged pixel mask byte  
1259 25FC             (grfdrv_beta5_with):03979                  bcs   L109E        Until we either hit blank or run out
125B D76F             (grfdrv_beta5_with):03980                  stb   <$006F       Save # pixels to print in X pixel count
                      (grfdrv_beta5_with):03981         * Main printing starts here - sets up for outside loop (at L10BB)
125D E63D             (grfdrv_beta5_with):03982         L10A4    ldb   Wt.FMsk,y    Get start pixel mask (may be into byte for prop.)
125F D70F             (grfdrv_beta5_with):03983                  stb   <$000F       Save in GrfDrv mem
1261 AE3B             (grfdrv_beta5_with):03984                  ldx   Wt.Cur,y     get address of cursor in screen mem
1263 3520             (grfdrv_beta5_with):03985                  puls  y            Get font address
1265 9671             (grfdrv_beta5_with):03986                  lda   <$0071       Get # bytes high char is
1267 4A               (grfdrv_beta5_with):03987                  deca               bump down by 1 (base 0)
1268 9799             (grfdrv_beta5_with):03988                  sta   <$0099       Save in temp (as counter)
126A 9F0C             (grfdrv_beta5_with):03989                  stx   <$000C       Save cursor address
126C 170FC7           (grfdrv_beta5_with):03990                  lbsr  L1EF1        Set up mask & vector to bit shift routine
126F 9E0C             (grfdrv_beta5_with):03991                  ldx   <$000C       Get cursor address
                      (grfdrv_beta5_with):03992         * Outside loop for Gfx font - A is byte of 2 color font data we are currently
                      (grfdrv_beta5_with):03993         * doing
1271 A6A0             (grfdrv_beta5_with):03994         L10BB    lda   ,y+          Get line of font data
                      (grfdrv_beta5_with):03995                IFNE  H6309
                      (grfdrv_beta5_with):03996                  tim   #$20,<$E     Bold text?
                      (grfdrv_beta5_with):03997                ELSE
1273 3402             (grfdrv_beta5_with):03998                  pshs  a
1275 960E             (grfdrv_beta5_with):03999                  lda   <$E 
1277 8520             (grfdrv_beta5_with):04000                  bita  #$20
1279 3502             (grfdrv_beta5_with):04001                  puls  a
                      (grfdrv_beta5_with):04002                ENDC
127B 2703             (grfdrv_beta5_with):04003                  beq   L10C6        No, skip doubling up pixels
127D 44               (grfdrv_beta5_with):04004                  lsra               shift it right 1
127E AA3F             (grfdrv_beta5_with):04005                  ora   -1,y         merge with original to double up pixels
1280 6E9F1110         (grfdrv_beta5_with):04006         L10C6    jmp   [>GrfMem+gr0010]     Flush left the font data in byte
                      (grfdrv_beta5_with):04007         
                      (grfdrv_beta5_with):04008         * Bit shift offsets for proportional fonts
                      (grfdrv_beta5_with):04009         * Outside loop: A=byte from font data in 2 color format
                      (grfdrv_beta5_with):04010         * Will take byte of font data in A and make it flush left
1284 48               (grfdrv_beta5_with):04011         L10C9    lsla
1285 48               (grfdrv_beta5_with):04012         L10CA    lsla
1286 48               (grfdrv_beta5_with):04013         L10CB    lsla
1287 48               (grfdrv_beta5_with):04014         L10CC    lsla
1288 48               (grfdrv_beta5_with):04015         L10CD    lsla
1289 48               (grfdrv_beta5_with):04016         L10CE    lsla
                      (grfdrv_beta5_with):04017         * Entry point for non-proportional fonts - byte already flush left (6 or 8)
128A 970B             (grfdrv_beta5_with):04018         L10CF    sta   <$000B       Save flush left font byte, 1 bit/pixel
                      (grfdrv_beta5_with):04019                IFNE  H6309
                      (grfdrv_beta5_with):04020                  lde   <$006F       get X width of font char in pixels
                      (grfdrv_beta5_with):04021                ELSE
128C D66F             (grfdrv_beta5_with):04022                  ldb   <$6F
128E D7B5             (grfdrv_beta5_with):04023                  stb   <$B5
                      (grfdrv_beta5_with):04024                ENDC
1290 D60F             (grfdrv_beta5_with):04025                  ldb   <$000F       Get bit mask for start pixel on screen
                      (grfdrv_beta5_with):04026         * NOTE: SHOULD TRY TO BUILD A WHOLE BYTE'S WORTH OF PIXELS INTO B TO PUT AS
                      (grfdrv_beta5_with):04027         * MANY PIXELS ONTO SCREEN AT ONCE - NEED TO KNOW HOW MANY PIXELS LEFT IN BYTE
                      (grfdrv_beta5_with):04028         * FROM START THOUGH (COULD USE F AS COUNTER)
1292 3404             (grfdrv_beta5_with):04029                  pshs  b            Save pixel mask on stack
1294 9F0C             (grfdrv_beta5_with):04030                  stx   <$000C       save screen address
1296 6EC4             (grfdrv_beta5_with):04031                  jmp   ,u           Put it on screen (calls 10DF or 10FA only)
                      (grfdrv_beta5_with):04032         
                      (grfdrv_beta5_with):04033         * Print line of font char onto screen
                      (grfdrv_beta5_with):04034         * Inside loop: does 1 pixel at a time from font byte (stored in $000B)
1298 080B             (grfdrv_beta5_with):04035         L10DF    lsl   <$000B       Shift pixel into carry from font byte
129A 250E             (grfdrv_beta5_with):04036                  bcs   L10EB        Pixel is set, put it on screen in foregrnd color
129C 960E             (grfdrv_beta5_with):04037                  lda   <$000E       Pixel is not used, transparent characters?
129E 2A19             (grfdrv_beta5_with):04038                  bpl   L10FE        No, skip this pixel entirely
12A0 9662             (grfdrv_beta5_with):04039                  lda   <$0062       Transparent, get bckgrnd color full byte bit mask
12A2 2008             (grfdrv_beta5_with):04040                  bra   L10ED        Go put it on screen
                      (grfdrv_beta5_with):04041         
                      (grfdrv_beta5_with):04042         * Used by Update Window Cursor updates (Inverse for cursor)
12A4 E884             (grfdrv_beta5_with):04043         L10FA    eorb  ,x           Invert data on screen with bit data
12A6 E784             (grfdrv_beta5_with):04044                  stb   ,x           Save it on screen (Invert for cursor)
12A8 200F             (grfdrv_beta5_with):04045                  bra   L10FE        Check if we have more to do
                      (grfdrv_beta5_with):04046         
12AA 9661             (grfdrv_beta5_with):04047         L10EB    lda   <$0061       get foreground color full byte bit mask
                      (grfdrv_beta5_with):04048         * Entry: B=Current pixel mask
                      (grfdrv_beta5_with):04049         *        A=Color mask (can be fore or background)
     12AC             (grfdrv_beta5_with):04050         L10ED    equ   *
                      (grfdrv_beta5_with):04051                IFNE  H6309
                      (grfdrv_beta5_with):04052                  andr  b,a          Keep only color data we can use
                      (grfdrv_beta5_with):04053                ELSE
12AC D7BF             (grfdrv_beta5_with):04054                  stb   <grScrtch
12AE 94BF             (grfdrv_beta5_with):04055                  anda  <grScrtch
                      (grfdrv_beta5_with):04056                ENDC
12B0 53               (grfdrv_beta5_with):04057                  comb               Make 'hole' with font data
12B1 E484             (grfdrv_beta5_with):04058                  andb  ,x            & screen data
                      (grfdrv_beta5_with):04059                IFNE  H6309
                      (grfdrv_beta5_with):04060                  orr   b,a          Merge font color onto existing screen byte
                      (grfdrv_beta5_with):04061                ELSE
12B3 D7BF             (grfdrv_beta5_with):04062                  stb   <grScrtch
12B5 9ABF             (grfdrv_beta5_with):04063                  ora   <grScrtch
                      (grfdrv_beta5_with):04064                ENDC
12B7 A784             (grfdrv_beta5_with):04065                  sta   ,x           Save result onto screen
     12B9             (grfdrv_beta5_with):04066         L10FE    equ   *
                      (grfdrv_beta5_with):04067                IFNE  H6309
                      (grfdrv_beta5_with):04068                  dece               Dec # pixels left on current font line
                      (grfdrv_beta5_with):04069                ELSE
12B9 0AB5             (grfdrv_beta5_with):04070                  dec   <$B5
                      (grfdrv_beta5_with):04071                ENDC
12BB 3504             (grfdrv_beta5_with):04072                  puls  b            Get current pixel mask again
12BD 2707             (grfdrv_beta5_with):04073                  beq   L1109        Done current line, skip ahead
12BF 17071B           (grfdrv_beta5_with):04074                  lbsr  L1F0E        Move to next pixel position
12C2 3404             (grfdrv_beta5_with):04075                  pshs  b            Save new pixel mask on stack
12C4 6EC4             (grfdrv_beta5_with):04076                  jmp   ,u           Put it on screen (calls 10DF or 10FA only)
                      (grfdrv_beta5_with):04077         * End of inside loop (each pixel within font byte)
                      (grfdrv_beta5_with):04078         
12C6 9E0C             (grfdrv_beta5_with):04079         L1109    ldx   <$000C       get start of char. screen address again
12C8 D663             (grfdrv_beta5_with):04080                  ldb   <$0063       Get # bytes per row on screen
12CA 3A               (grfdrv_beta5_with):04081                  abx                Point to next line on screen
12CB 0A99             (grfdrv_beta5_with):04082                  dec   <$0099       Are we done whole char (or on last line)?
12CD 2EA2             (grfdrv_beta5_with):04083                  bgt   L10BB        No, continue drawing char
12CF 2B0A             (grfdrv_beta5_with):04084                  bmi   L1120        Totally done, exit
                      (grfdrv_beta5_with):04085         * on last line ($99=0)
                      (grfdrv_beta5_with):04086                IFNE  H6309
                      (grfdrv_beta5_with):04087                  tim   #Under,<$0E  Underline requested?
                      (grfdrv_beta5_with):04088                ELSE
12D1 960E             (grfdrv_beta5_with):04089                  lda   <$0E 
12D3 8540             (grfdrv_beta5_with):04090                  bita  #Under
                      (grfdrv_beta5_with):04091                ENDC
12D5 279A             (grfdrv_beta5_with):04092                  beq   L10BB        No, go draw last line
12D7 86FF             (grfdrv_beta5_with):04093                  lda   #$FF         Underline code
12D9 20AF             (grfdrv_beta5_with):04094                  bra   L10CF        Go draw it
                      (grfdrv_beta5_with):04095         * End of outside loop (for each line with font)
                      (grfdrv_beta5_with):04096         
12DB 39               (grfdrv_beta5_with):04097         L1120    rts                Return
                      (grfdrv_beta5_with):04098         
                      (grfdrv_beta5_with):04099         * 2 color mode pixel mask table
12DC 07               (grfdrv_beta5_with):04100         L1EE0    fcb   $07          Mask for pixel #'s we care about
12DD 8040201008040201 (grfdrv_beta5_with):04101                  fcb   $80,$40,$20,$10,$08,$04,$02,$01
                      (grfdrv_beta5_with):04102         
                      (grfdrv_beta5_with):04103         * 4 color mode pixel mask table
12E5 03               (grfdrv_beta5_with):04104         L1EE9    fcb   $03          Mask for pixel #'s we care about
12E6 C0300C03         (grfdrv_beta5_with):04105                  fcb   $c0,$30,$0c,$03
                      (grfdrv_beta5_with):04106         
                      (grfdrv_beta5_with):04107         * 16 color mode pixel mask table
12EA 01               (grfdrv_beta5_with):04108         L1EEE    fcb   $01          Mask for pixel #'s we care about
12EB F00F             (grfdrv_beta5_with):04109                  fcb   $f0,$0f
                      (grfdrv_beta5_with):04110         
                      (grfdrv_beta5_with):04111         * Goto X/Y entry point
12ED 17FE47           (grfdrv_beta5_with):04112         L1186    lbsr  L0FFF          Set up font sizes (and font if on gfx screen)
12F0 D647             (grfdrv_beta5_with):04113                  ldb   <$0047         Get X coord
12F2 C020             (grfdrv_beta5_with):04114                  subb  #$20           Kill off ASCII part of it
12F4 966F             (grfdrv_beta5_with):04115                  lda   <$006F         Get # pixels wide each text char is
12F6 3D               (grfdrv_beta5_with):04116                  mul                  Calculate # pixels into screen to start at
12F7 DD47             (grfdrv_beta5_with):04117                  std   <$0047         Preserve Start pixel # as 'working' X coord
12F9 D36E             (grfdrv_beta5_with):04118                  addd  <$006E         Add width in pixels again (calculate end X coord)
                      (grfdrv_beta5_with):04119                IFNE  H6309
                      (grfdrv_beta5_with):04120                  decd                 Adjust
                      (grfdrv_beta5_with):04121                ELSE
12FB 830001           (grfdrv_beta5_with):04122                  subd  #1
                      (grfdrv_beta5_with):04123                ENDC
12FE 10A3A81B         (grfdrv_beta5_with):04124                  cmpd  Wt.MaxX,y      Would we be past end of window?
1302 2220             (grfdrv_beta5_with):04125                  bhi   L11CA          Yes, exit out of grfdrv
1304 D649             (grfdrv_beta5_with):04126                  ldb   <$0049         Get Y coord
1306 C020             (grfdrv_beta5_with):04127                  subb  #$20           Kill off ASCII part of it
1308 9671             (grfdrv_beta5_with):04128                  lda   <$0071         Get Y size of font in bytes
130A 3D               (grfdrv_beta5_with):04129                  mul                  Calculate # bytes from top of screen to start at
130B DD49             (grfdrv_beta5_with):04130                  std   <$0049         Save it
130D D370             (grfdrv_beta5_with):04131                  addd  <$0070         Bump down by 1 more text char Y size
                      (grfdrv_beta5_with):04132                IFNE  H6309
                      (grfdrv_beta5_with):04133                  decd                 Adjust
                      (grfdrv_beta5_with):04134                ELSE
130F 830001           (grfdrv_beta5_with):04135                  subd  #1
                      (grfdrv_beta5_with):04136                ENDC
1312 10A3A81D         (grfdrv_beta5_with):04137                  cmpd  Wt.MaxY,y      Would end of char go past bottom of window?
1316 220C             (grfdrv_beta5_with):04138                  bhi   L11CA          Yes, exit out of grfdrv
                      (grfdrv_beta5_with):04139                IFNE  H6309
                      (grfdrv_beta5_with):04140                  ldq   <$0047         Get x & y coords
                      (grfdrv_beta5_with):04141                  stq   Wt.CurX,y      Move into window table (-2 to +1)
                      (grfdrv_beta5_with):04142                ELSE
1318 DC49             (grfdrv_beta5_with):04143                  ldd   <$49           Get Y coord
131A EDA4             (grfdrv_beta5_with):04144                  std   Wt.CurY,y      Move into window table
                      (grfdrv_beta5_with):04145         * 6809 - check calling routines - may not need to save W copy here
131C DDB5             (grfdrv_beta5_with):04146                  std   <$B5           Save as W copy
131E DC47             (grfdrv_beta5_with):04147                  ldd   <$47           Get X coord
1320 ED3E             (grfdrv_beta5_with):04148                  std   Wt.CurX,y      Move into window table
                      (grfdrv_beta5_with):04149                ENDC
1322 8D7D             (grfdrv_beta5_with):04150                  bsr   NewEnt         Originally bsr L11D1 (redundant)
1324 7E50A4           (grfdrv_beta5_with):04151         L11CA    jmp   >GrfStrt+L0F78
                      (grfdrv_beta5_with):04152         
                      (grfdrv_beta5_with):04153         * Control code processor
                      (grfdrv_beta5_with):04154         * Entry: A=ctrl code
                      (grfdrv_beta5_with):04155         * ATD: 69 bytes old method, 47 new method
1327 17FE0D           (grfdrv_beta5_with):04156         L1129    lbsr  L0FFF        Set up font sizes (and font if on gfx screen)
132A 4A               (grfdrv_beta5_with):04157                  deca               make 1-D = 0-C
132B 2B0C             (grfdrv_beta5_with):04158                  bmi   L1130        if 0 or smaller, exit
132D 810D             (grfdrv_beta5_with):04159                  cmpa  #$0D         too high? (now 0-C instead of 1-D)
132F 2408             (grfdrv_beta5_with):04160                  bhs   L1130        yes, exit
1331 8E533C           (grfdrv_beta5_with):04161                  ldx   #GrfStrt+T.1133  point to offset table to use
1334 48               (grfdrv_beta5_with):04162                  asla               2 bytes per entry
1335 EC86             (grfdrv_beta5_with):04163                  ldd   a,x          get pointer to routine
1337 AD8B             (grfdrv_beta5_with):04164                  jsr   d,x          call it
1339 7E50A4           (grfdrv_beta5_with):04165         L1130    jmp   >GrfStrt+L0F78 return to CoWin: No errors
                      (grfdrv_beta5_with):04166         
133C 006C             (grfdrv_beta5_with):04167         T.1133   fdb   L11E1-T.1133 1 home cursor
133E FFFD             (grfdrv_beta5_with):04168                  fdb   L1130-T.1133 2   GOTO X,Y: handled elsewhere
1340 01AF             (grfdrv_beta5_with):04169                  fdb   L1352-T.1133 3 erase current line
1342 01BC             (grfdrv_beta5_with):04170                  fdb   L135F-T.1133 4 erase to end of line
1344 FFFD             (grfdrv_beta5_with):04171                  fdb   L1130-T.1133 5   cursor on/off: handled elsewhere
1346 00B1             (grfdrv_beta5_with):04172                  fdb   L121A-T.1133 6 cursor right
1348 FFFD             (grfdrv_beta5_with):04173                  fdb   L1130-T.1133 7   BELL: handled elsewhere
134A 0085             (grfdrv_beta5_with):04174                  fdb   L11F9-T.1133 8 cursor left
134C 00A6             (grfdrv_beta5_with):04175                  fdb   L122F-T.1133 9 cursor up
134E 00C4             (grfdrv_beta5_with):04176                  fdb   L123A-T.1133 A cursor down (LF)
1350 01E8             (grfdrv_beta5_with):04177                  fdb   L138D-T.1133 B erase to end of screen
1352 01D4             (grfdrv_beta5_with):04178                  fdb   L1377-T.1133 C clear screen
1354 0059             (grfdrv_beta5_with):04179                  fdb   L11CD-T.1133 D cursor to LHS of the screen (CR)
                      (grfdrv_beta5_with):04180         
                      (grfdrv_beta5_with):04181         * Calculate screen logical address based on X/Y text coordinates
                      (grfdrv_beta5_with):04182         * Exit: X=Screen logical address pointing to X,Y text coordinate location
                      (grfdrv_beta5_with):04183         *       If graphics screen, B=Mask for specific pixel
1356 AE33             (grfdrv_beta5_with):04184         L1E9D    ldx   Wt.LStrt,y   get screen logical start
                      (grfdrv_beta5_with):04185         * Calculate offset for Y location
1358 964A             (grfdrv_beta5_with):04186         L1E9F    lda   <$004A       get Y coordinate (0-199)
135A D663             (grfdrv_beta5_with):04187                  ldb   <$0063       get bytes/row
135C 3D               (grfdrv_beta5_with):04188                  mul                Calculate # bytes into screen to go
                      (grfdrv_beta5_with):04189                IFNE  H6309
                      (grfdrv_beta5_with):04190                  addr  d,x          Add to screen start
                      (grfdrv_beta5_with):04191                ELSE
135D 308B             (grfdrv_beta5_with):04192                  leax  d,x
                      (grfdrv_beta5_with):04193                ENDC
135F D660             (grfdrv_beta5_with):04194                  ldb   <$0060       get screen type
1361 2A05             (grfdrv_beta5_with):04195                  bpl   L1EB5        graphics screen, go adjust X coordinate
                      (grfdrv_beta5_with):04196         * Calculate offset for X location (text only)
1363 D648             (grfdrv_beta5_with):04197                  ldb   <$0048       Get X coordinate
1365 58               (grfdrv_beta5_with):04198                  lslb               account for attribute byte
1366 3A               (grfdrv_beta5_with):04199                  abx                point X to screen location & return
1367 39               (grfdrv_beta5_with):04200                  rts
                      (grfdrv_beta5_with):04201         
                      (grfdrv_beta5_with):04202         * Calculate offset for X location (gfx only)
                      (grfdrv_beta5_with):04203         * Fast horizontal and vertical lines call this after doing a LDW <$68 (LSET)
1368 3440             (grfdrv_beta5_with):04204         L1EB5    pshs  u            Preserve U
136A C104             (grfdrv_beta5_with):04205                  cmpb  #$04         320 16 color screen?
136C 2607             (grfdrv_beta5_with):04206                  bne   L1EC0        No, try next
                      (grfdrv_beta5_with):04207         * 16 color screens (2 pixels/byte)
136E DC47             (grfdrv_beta5_with):04208                  ldd   <$0047       get requested X coordinate
1370 CE52EA           (grfdrv_beta5_with):04209                  ldu   #GrfStrt+L1EEE  Point to 2 pixel/byte tables
1373 2014             (grfdrv_beta5_with):04210                  bra   L1ED4        Adjust screen address accordingly
                      (grfdrv_beta5_with):04211         
1375 C101             (grfdrv_beta5_with):04212         L1EC0    cmpb  #$01         640 2 color screen?
1377 2707             (grfdrv_beta5_with):04213                  beq   L1ECB        Yes, go process it
                      (grfdrv_beta5_with):04214         * 4 color screens go here (4 pixels/byte)
1379 DC47             (grfdrv_beta5_with):04215                  ldd   <$0047       Get requested X coordinate
137B CE52E5           (grfdrv_beta5_with):04216                  ldu   #GrfStrt+L1EE9  Point to 4 pixel/byte tables
137E 2007             (grfdrv_beta5_with):04217                  bra   L1ED2        Adjust Screen address accordingly
                      (grfdrv_beta5_with):04218         
                      (grfdrv_beta5_with):04219         * 2 color screens go here (8 pixels/byte)
1380 DC47             (grfdrv_beta5_with):04220         L1ECB    ldd   <$0047       Get requested X coordinate
1382 CE52DC           (grfdrv_beta5_with):04221                  ldu   #GrfStrt+L1EE0  Point to 8 pixel/byte tables
                      (grfdrv_beta5_with):04222                IFNE  H6309
                      (grfdrv_beta5_with):04223                  lsrd               Divide by 8 for byte address
1385                  (grfdrv_beta5_with):04224         L1ED2    lsrd               divide by 4
1385                  (grfdrv_beta5_with):04225         L1ED4    lsrd               divide coordinate by 2 (to get Byte offest)
                      (grfdrv_beta5_with):04226                  addr  d,x          Point X to byte offset for pixel
                      (grfdrv_beta5_with):04227                ELSE
1385 44               (grfdrv_beta5_with):04228                  lsra
1386 56               (grfdrv_beta5_with):04229                  rorb
1387 44               (grfdrv_beta5_with):04230         L1ED2    lsra
1388 56               (grfdrv_beta5_with):04231                  rorb
1389 44               (grfdrv_beta5_with):04232         L1ED4    lsra
138A 56               (grfdrv_beta5_with):04233                  rorb
138B 308B             (grfdrv_beta5_with):04234                  leax  d,x
                      (grfdrv_beta5_with):04235                ENDC
138D D648             (grfdrv_beta5_with):04236                  ldb   <$0048       Get LSB of X coordinate requested
138F E4C0             (grfdrv_beta5_with):04237                  andb  ,u+          Mask out all but pixels we need to address
1391 E6C5             (grfdrv_beta5_with):04238                  ldb   b,u          Get mask for specific pixel we need
1393 35C0             (grfdrv_beta5_with):04239                  puls  pc,u         Restore Y & exit
                      (grfdrv_beta5_with):04240         
                      (grfdrv_beta5_with):04241         * Cursor to left margin (CR)
     1395             (grfdrv_beta5_with):04242         L11CD    equ   *
                      (grfdrv_beta5_with):04243                IFNE  H6309
                      (grfdrv_beta5_with):04244                  clrd                 Set X coordinate to 0
                      (grfdrv_beta5_with):04245                ELSE
1395 4F               (grfdrv_beta5_with):04246                  clra
1396 5F               (grfdrv_beta5_with):04247                  clrb
                      (grfdrv_beta5_with):04248                ENDC
1397 ED3E             (grfdrv_beta5_with):04249                  std   Wt.CurX,y
     1399             (grfdrv_beta5_with):04250         L11D1    equ   *
                      (grfdrv_beta5_with):04251                IFNE  H6309
                      (grfdrv_beta5_with):04252                  ldq   Wt.CurX,y      Copy window table x,y coord to grfdrv x,y
                      (grfdrv_beta5_with):04253                  stq   <$0047
                      (grfdrv_beta5_with):04254                ELSE
1399 EC3E             (grfdrv_beta5_with):04255                  ldd   Wt.CurX,y      Copy cursor X coord to grfdrv temp
139B DD47             (grfdrv_beta5_with):04256         JustY    std   <$47
139D ECA4             (grfdrv_beta5_with):04257                  ldd   Wt.CurY,y      Copy cursor Y coord to grfdrv temp
139F DD49             (grfdrv_beta5_with):04258                  std   <$49
                      (grfdrv_beta5_with):04259                ENDC
13A1 8DB3             (grfdrv_beta5_with):04260         NewEnt   bsr   L1E9D          Go calculate screen logical address
13A3 AF3B             (grfdrv_beta5_with):04261                  stx   Wt.Cur,y       Preserve screen location
13A5 E73D             (grfdrv_beta5_with):04262                  stb   Wt.FMsk,y      Preserve x coord (adjusted by x2 for text attr
13A7 39               (grfdrv_beta5_with):04263                  rts                    if needed)
                      (grfdrv_beta5_with):04264         
                      (grfdrv_beta5_with):04265         * Home cursor
13A8 EC33             (grfdrv_beta5_with):04266         L11E1    ldd   Wt.LStrt,y  Make cursor address same as upper left of screen
13AA ED3B             (grfdrv_beta5_with):04267                  std   Wt.Cur,y
13AC 8E6242           (grfdrv_beta5_with):04268                  ldx   #GrfStrt+L1F00-2  Point to bit mask/vector table
13AF D660             (grfdrv_beta5_with):04269                  ldb   <$0060      Get screen type
13B1 2B05             (grfdrv_beta5_with):04270                  bmi   L11F8       If text, skip bit mask calculation
13B3 58               (grfdrv_beta5_with):04271                  lslb              Multiply x2 to get table entry
13B4 E685             (grfdrv_beta5_with):04272                  ldb   b,x         Get bit mask
13B6 E73D             (grfdrv_beta5_with):04273                  stb   Wt.FMsk,y   Preserve it
     13B8             (grfdrv_beta5_with):04274         L11F8    equ   *
                      (grfdrv_beta5_with):04275                IFNE  H6309
                      (grfdrv_beta5_with):04276                  clrd              Clear out x & y coord's in window table
                      (grfdrv_beta5_with):04277                  clrw
                      (grfdrv_beta5_with):04278                  stq   Wt.CurX,y
                      (grfdrv_beta5_with):04279                ELSE
13B8 4F               (grfdrv_beta5_with):04280                  clra
13B9 5F               (grfdrv_beta5_with):04281                  clrb
13BA DDB5             (grfdrv_beta5_with):04282                  std   <$B5
13BC ED3E             (grfdrv_beta5_with):04283                  std   Wt.CurX,y
13BE EDA4             (grfdrv_beta5_with):04284                  std   Wt.CurY,y
                      (grfdrv_beta5_with):04285                ENDC
13C0 39               (grfdrv_beta5_with):04286                  rts   
                      (grfdrv_beta5_with):04287         
                      (grfdrv_beta5_with):04288         * Cursor left
13C1 EC3E             (grfdrv_beta5_with):04289         L11F9    ldd   Wt.CurX,y
13C3 936E             (grfdrv_beta5_with):04290                  subd  <$006E      Subtract X pixel count
13C5 ED3E             (grfdrv_beta5_with):04291                  std   Wt.CurX,y
                      (grfdrv_beta5_with):04292                  IFNE  H6309
                      (grfdrv_beta5_with):04293                    bpl  L11D1      Didn't wrap into negative, leave
                      (grfdrv_beta5_with):04294                  ELSE
13C7 2AD2             (grfdrv_beta5_with):04295                    bpl   JustY     Didn't wrap into negative, leave
                      (grfdrv_beta5_with):04296                  ENDC
13C9 ECA81B           (grfdrv_beta5_with):04297                  ldd   Wt.MaxX,y   Get Max X coordinate
13CC 936E             (grfdrv_beta5_with):04298                  subd  <$006E      subtract X pixel count
                      (grfdrv_beta5_with):04299                IFNE  H6309
                      (grfdrv_beta5_with):04300                  incd              Bump up by 1
                      (grfdrv_beta5_with):04301                ELSE
13CE C30001           (grfdrv_beta5_with):04302                  addd  #1
                      (grfdrv_beta5_with):04303                ENDC
13D1 ED3E             (grfdrv_beta5_with):04304                  std   Wt.CurX,y   Save new X coordinate
13D3 ECA4             (grfdrv_beta5_with):04305                  ldd   ,y          Get Y coordinate
13D5 9370             (grfdrv_beta5_with):04306                  subd  <$0070      Subtract Y pixel count
13D7 EDA4             (grfdrv_beta5_with):04307                  std   Wt.CurY,y   Save updated Y coordinate
13D9 2ABE             (grfdrv_beta5_with):04308                  bpl   L11D1       Didn't wrap into negative, leave
                      (grfdrv_beta5_with):04309                IFNE  H6309
                      (grfdrv_beta5_with):04310                  clrd              Set coordinates to 0,0
                      (grfdrv_beta5_with):04311                ELSE
13DB 4F               (grfdrv_beta5_with):04312                  clra
13DC 5F               (grfdrv_beta5_with):04313                  clrb
                      (grfdrv_beta5_with):04314                ENDC
13DD ED3E             (grfdrv_beta5_with):04315                  std   Wt.CurX,y   Save X coordinate
13DF EDA4             (grfdrv_beta5_with):04316                  std   Wt.CurY,y   Save Y coordinate
13E1 39               (grfdrv_beta5_with):04317                  rts   
                      (grfdrv_beta5_with):04318         
                      (grfdrv_beta5_with):04319         * Cursor Up
13E2 ECA4             (grfdrv_beta5_with):04320         L122F    ldd   Wt.CurY,y     Get Y coordinate
13E4 9370             (grfdrv_beta5_with):04321                  subd  <$0070        Subtract Y pixel size
13E6 2A01             (grfdrv_beta5_with):04322                  bpl   GoodUp        If not at top, save coordinate
13E8 39               (grfdrv_beta5_with):04323                  rts                 Otherwise, exit
                      (grfdrv_beta5_with):04324         
13E9 EDA4             (grfdrv_beta5_with):04325         GoodUp   std   Wt.CurY,y     Save new Y coordinate
13EB 20AC             (grfdrv_beta5_with):04326                  bra   L11D1         Leave
                      (grfdrv_beta5_with):04327         
                      (grfdrv_beta5_with):04328         * Cursor right
13ED EC3E             (grfdrv_beta5_with):04329         L121A    ldd   Wt.CurX,y     Get X coordinate
13EF D36E             (grfdrv_beta5_with):04330                  addd  <$006E        Add to X pixel count (1, 6 or 8?)
13F1 ED3E             (grfdrv_beta5_with):04331                  std   Wt.CurX,y     Update value
13F3 D36E             (grfdrv_beta5_with):04332                  addd  <$006E        Add to X pixel count again
                      (grfdrv_beta5_with):04333                IFNE  H6309
                      (grfdrv_beta5_with):04334                  decd                Dec by 1
                      (grfdrv_beta5_with):04335                ELSE
13F5 830001           (grfdrv_beta5_with):04336                  subd  #1
                      (grfdrv_beta5_with):04337                ENDC
13F8 10A3A81B         (grfdrv_beta5_with):04338                  cmpd  Wt.MaxX,y     Compare with maximum X coordinate
13FC 239B             (grfdrv_beta5_with):04339                  bls   L11D1         If not past right hand side, leave
13FE 8D95             (grfdrv_beta5_with):04340         L1238    bsr   L11CD         Zero out X coordinate
                      (grfdrv_beta5_with):04341         
                      (grfdrv_beta5_with):04342         * Cursor Down (LF)
                      (grfdrv_beta5_with):04343         * Called by font change. Entry= Y=window table ptr, X=Screen addr, B=X coord
                      (grfdrv_beta5_with):04344         * on current line on physical screen
1400 ECA4             (grfdrv_beta5_with):04345         L123A    ldd   Wt.CurY,y     Get current Y coord
1402 D370             (grfdrv_beta5_with):04346                  addd  <$0070        Add to Y pixel count
1404 1F01             (grfdrv_beta5_with):04347                  tfr   d,x           Move result to X
1406 D370             (grfdrv_beta5_with):04348                  addd  <$0070        Add Y pixel count again
                      (grfdrv_beta5_with):04349                IFNE  H6309
                      (grfdrv_beta5_with):04350                  decd                decrement by 1
                      (grfdrv_beta5_with):04351                ELSE
1408 830001           (grfdrv_beta5_with):04352                  subd  #1
                      (grfdrv_beta5_with):04353                ENDC
140B 10A3A81D         (grfdrv_beta5_with):04354                  cmpd  Wt.MaxY,y     compare with Maximum Y coordinate
140F 2204             (grfdrv_beta5_with):04355                  bhi   L124F         If higher (scroll needed), skip ahead
1411 AFA4             (grfdrv_beta5_with):04356                  stx   Wt.CurY,y     Store +1 Y coordinate
1413 2084             (grfdrv_beta5_with):04357                  bra   L11D1         Update grfdrv's X&Y ptrs & leave
                      (grfdrv_beta5_with):04358         
                      (grfdrv_beta5_with):04359         * new Y coord+1 is >bottom of window goes here
1415 3420             (grfdrv_beta5_with):04360         L124F    pshs  y             Preserve window table ptr
1417 E622             (grfdrv_beta5_with):04361                  ldb   Wt.XBCnt,y    Get width of window in bytes
1419 D797             (grfdrv_beta5_with):04362                  stb   <$0097        Save since Y will disappear
141B 4F               (grfdrv_beta5_with):04363                  clra                Clear MSB of D
141C D663             (grfdrv_beta5_with):04364                  ldb   <$0063        Get # bytes per row of screen
141E DD99             (grfdrv_beta5_with):04365                  std   <$0099        preserve value (16 bit for proper ADDR)
1420 ECA4             (grfdrv_beta5_with):04366                  ldd   Wt.CurY,y     Get current Y coord
1422 DD9D             (grfdrv_beta5_with):04367                  std   <$009D        Preserve
1424 A638             (grfdrv_beta5_with):04368                  lda   Wt.SZY,y      Get current Y size
1426 4A               (grfdrv_beta5_with):04369                  deca                0 base
1427 979B             (grfdrv_beta5_with):04370                  sta   <$009B        Preserve
1429 274B             (grfdrv_beta5_with):04371                  beq   L128A         If window only 1 line high, then no scroll needed
142B AE33             (grfdrv_beta5_with):04372                  ldx   Wt.LStrt,y    Get screen logical start addr. (top of screen)
142D EC24             (grfdrv_beta5_with):04373                  ldd   Wt.BRow,y     Get # bytes/text row (8 pixel lines if gfx)
142F 3184             (grfdrv_beta5_with):04374                  leay  ,x            Move screen start addr. to Y
                      (grfdrv_beta5_with):04375                IFNE  H6309
                      (grfdrv_beta5_with):04376                  addr  d,x           X=Screen addr+1 text line
                      (grfdrv_beta5_with):04377                ELSE
1431 308B             (grfdrv_beta5_with):04378                  leax  d,x
                      (grfdrv_beta5_with):04379                ENDC
1433 969B             (grfdrv_beta5_with):04380                  lda   <$009B        Get Y size (0 base)
1435 D660             (grfdrv_beta5_with):04381                  ldb   <$0060        Check screen type
1437 2B05             (grfdrv_beta5_with):04382                  bmi   L1267         If text, skip ahead
1439 48               (grfdrv_beta5_with):04383                  lsla                Multiply by 8 (# pixel lines/text line)
143A 48               (grfdrv_beta5_with):04384                  lsla  
143B 48               (grfdrv_beta5_with):04385                  lsla  
143C 979B             (grfdrv_beta5_with):04386                  sta   <$009B        Y size into # pixel lines, not text lines
                      (grfdrv_beta5_with):04387         * Special check for full width windows
143E D697             (grfdrv_beta5_with):04388         L1267    ldb   <$97          Get width of window in bytes
1440 D163             (grfdrv_beta5_with):04389                  cmpb  <$63          Same as screen width?
1442 260C             (grfdrv_beta5_with):04390                  bne   L127B         No, do normal scroll
1444 3D               (grfdrv_beta5_with):04391         L1267a   mul                 Calculate size of entire window to move
                      (grfdrv_beta5_with):04392         * Scroll entire window in one shot since full width of screen
                      (grfdrv_beta5_with):04393                IFNE  H6309
                      (grfdrv_beta5_with):04394                  tfr   d,w           Move to TFM size reg.
                      (grfdrv_beta5_with):04395                  tfm   x+,y+         Move screen
                      (grfdrv_beta5_with):04396                ELSE
                      (grfdrv_beta5_with):04397         * Entry: D=size of copy (in bytes)
                      (grfdrv_beta5_with):04398         *        X=Src ptr
                      (grfdrv_beta5_with):04399         *        Y=Dest ptr        
1445 3440             (grfdrv_beta5_with):04400                  pshs  u             Save U register
1447 3384             (grfdrv_beta5_with):04401                  leau  ,x            Point U to src of copy
1449 17F69B           (grfdrv_beta5_with):04402                  lbsr  StkBlCpy      Mini stack blast the scroll
144C 3540             (grfdrv_beta5_with):04403                  puls  u             Restore U
                      (grfdrv_beta5_with):04404                ENDC
144E 2026             (grfdrv_beta5_with):04405                  bra   L128A         Exit scroll routine
                      (grfdrv_beta5_with):04406         
                      (grfdrv_beta5_with):04407         * Scroll window that is not full width of screen. Can scroll either direction
                      (grfdrv_beta5_with):04408         * so some vars are signed.
                      (grfdrv_beta5_with):04409         * Used for scroll, delete line, and insert line
     1450             (grfdrv_beta5_with):04410         L127B    equ   *
                      (grfdrv_beta5_with):04411                IFNE  H6309
                      (grfdrv_beta5_with):04412                  ldd   <$99         Get # bytes/row for screen
                      (grfdrv_beta5_with):04413                  ldf   <$97         Get # bytes wide window is
                      (grfdrv_beta5_with):04414                  clre
                      (grfdrv_beta5_with):04415                  subr  w,d          Calc # bytes to next line
                      (grfdrv_beta5_with):04416         * Entry: X=src ptr of copy
                      (grfdrv_beta5_with):04417         *        Y=dest ptr of copy
                      (grfdrv_beta5_with):04418         *  6809   
1450                  (grfdrv_beta5_with):04419         L127E    tfm   x+,y+        Block move the line
                      (grfdrv_beta5_with):04420                ELSE
1450 4F               (grfdrv_beta5_with):04421                  clra
1451 D697             (grfdrv_beta5_with):04422                  ldb   <$97         D=# bytes wide window is
1453 DDBF             (grfdrv_beta5_with):04423                  std   <grScrtch    Save copy
1455 DC99             (grfdrv_beta5_with):04424                  ldd   <$99         Get # bytes/row to move (CAN BE SIGNED!)
1457 93BF             (grfdrv_beta5_with):04425                  subd  <grScrtch    Subtract # bytes wide window is
1459 DDB5             (grfdrv_beta5_with):04426                  std   <$B5         Save # bytes to skip to next line after current line is done
145B DCBF             (grfdrv_beta5_with):04427                  ldd   <grScrtch    Get # bytes wide to copy again
145D 3440             (grfdrv_beta5_with):04428                  pshs  u            Save U
                      (grfdrv_beta5_with):04429         * Entry: D=size of copy
                      (grfdrv_beta5_with):04430         *        X=src ptr
                      (grfdrv_beta5_with):04431         *        Y=dest ptr
145F 3384             (grfdrv_beta5_with):04432         L127E    leau  ,x           U=ptr to src of copy
1461 17F683           (grfdrv_beta5_with):04433                  lbsr  StkBlCpy     Copy line
1464 30C4             (grfdrv_beta5_with):04434                  leax  ,u           Move updated src ptr to X
                      (grfdrv_beta5_with):04435                ENDC
                      (grfdrv_beta5_with):04436         * Entry: D=# bytes to start of next line
                      (grfdrv_beta5_with):04437         *        X=updated src ptr,
                      (grfdrv_beta5_with):04438         *        Y=updated dest ptr
1466 0A9B             (grfdrv_beta5_with):04439                  dec   <$9B          Dec # lines to still copy
                      (grfdrv_beta5_with):04440                IFNE  H6309
                      (grfdrv_beta5_with):04441                  beq   L128A         If done, exit
                      (grfdrv_beta5_with):04442                  addr  d,x           Bump start ptr by 1 line (might be signed)
                      (grfdrv_beta5_with):04443                  addr  d,y           Bump end ptr by 1 line
                      (grfdrv_beta5_with):04444                  ldf   <$97          Get width of window in bytes
                      (grfdrv_beta5_with):04445                ELSE
1468 270A             (grfdrv_beta5_with):04446                  beq   L128A.2       If done, exit
146A DCB5             (grfdrv_beta5_with):04447                  ldd   <$B5          Get # of bytes to skip for next line (signed)
146C 308B             (grfdrv_beta5_with):04448                  leax  d,x           Bump src ptr (might be signed)
146E 31AB             (grfdrv_beta5_with):04449                  leay  d,y           Bump dest ptr
1470 DCBF             (grfdrv_beta5_with):04450                  ldd   <grScrtch     Get # bytes wide to copy again
                      (grfdrv_beta5_with):04451                ENDC
1472 20EB             (grfdrv_beta5_with):04452                  bra   L127E         Do until we have moved all the lines
                      (grfdrv_beta5_with):04453                  
                      (grfdrv_beta5_with):04454                IFEQ  H6309
1474 3540             (grfdrv_beta5_with):04455         L128A.2  puls  u             Restore U
                      (grfdrv_beta5_with):04456                ENDC
1476 3520             (grfdrv_beta5_with):04457         L128A    puls  y             Get back window table ptr
1478 DC9D             (grfdrv_beta5_with):04458         L128C    ldd   <$009D        Get back current Y coord
147A 2071             (grfdrv_beta5_with):04459         L128E    bra   L1354         Go clear new line & exit
                      (grfdrv_beta5_with):04460         
                      (grfdrv_beta5_with):04461         * Insert line - currently not working with 6809
147C 3420             (grfdrv_beta5_with):04462         L1291    pshs  y             Save window table ptr
147E ECA4             (grfdrv_beta5_with):04463                  ldd   Wt.CurY,y     Get current Y coord
1480 DD9D             (grfdrv_beta5_with):04464                  std   <$009D        Preserve it
1482 E622             (grfdrv_beta5_with):04465                  ldb   Wt.XBCnt,y    Get width of window in bytes
1484 D797             (grfdrv_beta5_with):04466                  stb   <$0097        Save in fast mem
1486 4F               (grfdrv_beta5_with):04467                  clra                Get # bytes/row into D
1487 D663             (grfdrv_beta5_with):04468                  ldb   <$0063         (16 bit for ADDR)
                      (grfdrv_beta5_with):04469                IFNE  H6309
                      (grfdrv_beta5_with):04470                  negd                Make negative (since scrolling down?)
                      (grfdrv_beta5_with):04471                ELSE
1489 43               (grfdrv_beta5_with):04472                  coma
148A 53               (grfdrv_beta5_with):04473                  comb
148B C30001           (grfdrv_beta5_with):04474                  addd  #1
                      (grfdrv_beta5_with):04475                ENDC
148E DD99             (grfdrv_beta5_with):04476                  std   <$0099        Preserve it
1490 E638             (grfdrv_beta5_with):04477                  ldb   Wt.SZY,y      Get current Y size
1492 5A               (grfdrv_beta5_with):04478                  decb                0 base
1493 9671             (grfdrv_beta5_with):04479                  lda   <$0071        Get Y pixel count (1 or 8)
1495 3D               (grfdrv_beta5_with):04480                  mul                 Multiply by current Y size
1496 1F98             (grfdrv_beta5_with):04481                  tfr   b,a           Dupe result
1498 4A               (grfdrv_beta5_with):04482                  deca                Don't include line we are on
1499 E021             (grfdrv_beta5_with):04483                  subb  Wt.CurY+1,y   Subtract Y coord of cursor
149B D171             (grfdrv_beta5_with):04484                  cmpb  <$0071        Compare with Y pixel count
149D 25D7             (grfdrv_beta5_with):04485                  blo   L128A         If on bottom line, don't bother
149F D79B             (grfdrv_beta5_with):04486                  stb   <$009B        Save # lines to leave alone
14A1 D663             (grfdrv_beta5_with):04487                  ldb   <$0063        Get #bytes/row
14A3 3D               (grfdrv_beta5_with):04488                  mul                 Calculate # bytes to skip scrolling
14A4 E333             (grfdrv_beta5_with):04489                  addd  Wt.LStrt,y    Add to screen start address
14A6 1F01             (grfdrv_beta5_with):04490                  tfr   d,x           Move to top of scroll area reg. for TFM
14A8 E324             (grfdrv_beta5_with):04491                  addd  Wt.BRow,y     Add # bytes/text row
14AA 1F02             (grfdrv_beta5_with):04492                  tfr   d,y           Move to bottom of scroll area reg. for TFM
14AC 20A2             (grfdrv_beta5_with):04493                  bra   L127B         Do insert scroll
                      (grfdrv_beta5_with):04494         
                      (grfdrv_beta5_with):04495         * Delete line
14AE 3420             (grfdrv_beta5_with):04496         L12C5    pshs  y             Save window table ptr
14B0 E622             (grfdrv_beta5_with):04497                  ldb   Wt.XBCnt,y    Get width of window in bytes
14B2 D797             (grfdrv_beta5_with):04498                  stb   <$0097        Save it
14B4 4F               (grfdrv_beta5_with):04499                  clra                Get # bytes/row on screen into D
14B5 D663             (grfdrv_beta5_with):04500                  ldb   <$0063
14B7 DD99             (grfdrv_beta5_with):04501                  std   <$0099        Save for ADDR loop
14B9 A638             (grfdrv_beta5_with):04502                  lda   Wt.SZY,y      Get current Y size
14BB 4A               (grfdrv_beta5_with):04503                  deca                0 base
14BC D660             (grfdrv_beta5_with):04504                  ldb   <$0060        Check screen type
14BE 2B03             (grfdrv_beta5_with):04505                  bmi   L12DC         If text, skip ahead
14C0 48               (grfdrv_beta5_with):04506                  lsla                Multiply x8 (height of font)
14C1 48               (grfdrv_beta5_with):04507                  lsla  
14C2 48               (grfdrv_beta5_with):04508                  lsla  
14C3 A021             (grfdrv_beta5_with):04509         L12DC    suba  Wt.CurY+1,y   Subtract current Y location
14C5 2206             (grfdrv_beta5_with):04510                  bhi   L12E6         Not on bottom of screen, continue
14C7 3520             (grfdrv_beta5_with):04511                  puls  y             On bottom, get back window table ptr
14C9 ECA4             (grfdrv_beta5_with):04512                  ldd   Wt.CurY,y     Get Y coord back
14CB 2020             (grfdrv_beta5_with):04513                  bra   L1354         Just clear the line & exit
                      (grfdrv_beta5_with):04514         
14CD 979B             (grfdrv_beta5_with):04515         L12E6    sta   <$009B        Save # lines to scroll
14CF ECA81D           (grfdrv_beta5_with):04516                  ldd   Wt.MaxY,y     Get Maximum Y coordinate
14D2 9370             (grfdrv_beta5_with):04517                  subd  <$0070        Subtract Y pixel count
                      (grfdrv_beta5_with):04518                IFNE  H6309
                      (grfdrv_beta5_with):04519                  incd                Base 1
                      (grfdrv_beta5_with):04520                ELSE
14D4 C30001           (grfdrv_beta5_with):04521                  addd  #1
                      (grfdrv_beta5_with):04522                ENDC
14D7 DD9D             (grfdrv_beta5_with):04523                  std   <$009D        Save size of area to scroll for delete
14D9 9663             (grfdrv_beta5_with):04524                  lda   <$0063        Get # bytes/row
14DB E621             (grfdrv_beta5_with):04525                  ldb   Wt.CurY+1,y   Get Y coord of cursor
14DD 3D               (grfdrv_beta5_with):04526                  mul                 Calculate offset to top of area to scroll
14DE E333             (grfdrv_beta5_with):04527                  addd  Wt.LStrt,y    Add to Screen logical start address
14E0 1F01             (grfdrv_beta5_with):04528                  tfr   d,x           Move to top of window reg. for TFM
14E2 EC24             (grfdrv_beta5_with):04529                  ldd   Wt.BRow,y     Get # bytes/text row
14E4 3184             (grfdrv_beta5_with):04530                  leay  ,x            Swap top of window to bottom since reverse scroll
                      (grfdrv_beta5_with):04531                IFNE  H6309
                      (grfdrv_beta5_with):04532                  addr  d,x           Calculate top of window reg. for backwards TFM
                      (grfdrv_beta5_with):04533                ELSE
14E6 308B             (grfdrv_beta5_with):04534                  leax  d,x
                      (grfdrv_beta5_with):04535                ENDC
14E8 7E5450           (grfdrv_beta5_with):04536                  jmp   >GrfStrt+L127B Go delete the line
                      (grfdrv_beta5_with):04537         
                      (grfdrv_beta5_with):04538         * Erase current line
14EB ECA4             (grfdrv_beta5_with):04539         L1352    ldd   Wt.CurY,y     Get Y coordinate
14ED DD49             (grfdrv_beta5_with):04540         L1354    std   <$0049        Preserve 'working' Y coordinate
                      (grfdrv_beta5_with):04541                IFNE  H6309
                      (grfdrv_beta5_with):04542                  clrd
                      (grfdrv_beta5_with):04543                ELSE
14EF 4F               (grfdrv_beta5_with):04544                  clra
14F0 5F               (grfdrv_beta5_with):04545                  clrb
                      (grfdrv_beta5_with):04546                ENDC
14F1 DD47             (grfdrv_beta5_with):04547                  std   <$0047        'Working' X coordinate to 0
14F3 ECA81B           (grfdrv_beta5_with):04548                  ldd   Wt.MaxX,y     Get maximum X coordinate
14F6 200D             (grfdrv_beta5_with):04549                  bra   L136C
                      (grfdrv_beta5_with):04550         
                      (grfdrv_beta5_with):04551         * Erase to end of line
     14F8             (grfdrv_beta5_with):04552         L135F    equ   *
                      (grfdrv_beta5_with):04553                IFNE  H6309
                      (grfdrv_beta5_with):04554                  ldq   Wt.CurX,y     Get X & Y coordinates
                      (grfdrv_beta5_with):04555                  stq   <$0047        Save as 'working' copies
                      (grfdrv_beta5_with):04556                ELSE
14F8 ECA4             (grfdrv_beta5_with):04557                  ldd   Wt.CurX+2,y
14FA DD49             (grfdrv_beta5_with):04558                  std   <$49
14FC EC3E             (grfdrv_beta5_with):04559                  ldd   Wt.CurX,y
14FE DD47             (grfdrv_beta5_with):04560                  std   <$47
                      (grfdrv_beta5_with):04561                ENDC
1500 ECA81B           (grfdrv_beta5_with):04562                  ldd   Wt.MaxX,y     Get maximum X coordinate
1503 A33E             (grfdrv_beta5_with):04563                  subd  Wt.CurX,y     Subtract X coordinate
     1505             (grfdrv_beta5_with):04564         L136C    equ   *
                      (grfdrv_beta5_with):04565                IFNE  H6309
                      (grfdrv_beta5_with):04566                  incd                Add 1 to X size
                      (grfdrv_beta5_with):04567                ELSE
1505 C30001           (grfdrv_beta5_with):04568                  addd  #1
                      (grfdrv_beta5_with):04569                ENDC
1508 DD4F             (grfdrv_beta5_with):04570                  std   <$004F        New X size (in bytes)
150A DC70             (grfdrv_beta5_with):04571                  ldd   <$0070        Get Y pixel count
150C DD51             (grfdrv_beta5_with):04572                  std   <$0051        New Y size (in bytes)
150E 2034             (grfdrv_beta5_with):04573                  bra   L13AD
                      (grfdrv_beta5_with):04574         
                      (grfdrv_beta5_with):04575         * CLS (Chr$(12))
1510 17FE95           (grfdrv_beta5_with):04576         L1377    lbsr  L11E1         Home cursor (D&W are 0 on exit)
                      (grfdrv_beta5_with):04577                IFNE  H6309
                      (grfdrv_beta5_with):04578                  stq   <$47
                      (grfdrv_beta5_with):04579                ELSE
1513 DD49             (grfdrv_beta5_with):04580                  std   <$49
1515 DD47             (grfdrv_beta5_with):04581                  std   <$47
                      (grfdrv_beta5_with):04582                ENDC
1517 ECA81B           (grfdrv_beta5_with):04583                  ldd   Wt.MaxX,y     Get maximum X coordinate
                      (grfdrv_beta5_with):04584                IFNE  H6309
                      (grfdrv_beta5_with):04585                  incd                Bump up by 1
                      (grfdrv_beta5_with):04586                ELSE
151A C30001           (grfdrv_beta5_with):04587                  addd  #1
                      (grfdrv_beta5_with):04588                ENDC
151D DD4F             (grfdrv_beta5_with):04589                  std   <$004F        New X size
151F ECA81D           (grfdrv_beta5_with):04590                  ldd   Wt.MaxY,y     Get maximum Y coordinate
1522 201B             (grfdrv_beta5_with):04591                  bra   L13A8
                      (grfdrv_beta5_with):04592         
                      (grfdrv_beta5_with):04593         * Erase to end of screen
1524 8DD2             (grfdrv_beta5_with):04594         L138D    bsr   L135F         Erase to end of current line first
                      (grfdrv_beta5_with):04595                IFNE  H6309
                      (grfdrv_beta5_with):04596                  clrd                'working' X coordinate to 0
                      (grfdrv_beta5_with):04597                ELSE
1526 4F               (grfdrv_beta5_with):04598                  clra
1527 5F               (grfdrv_beta5_with):04599                  clrb
                      (grfdrv_beta5_with):04600                ENDC
1528 DD47             (grfdrv_beta5_with):04601                  std   <$0047
152A ECA4             (grfdrv_beta5_with):04602                  ldd   Wt.CurY,y
152C D370             (grfdrv_beta5_with):04603                  addd  <$0070        Add Y pixel count
152E DD49             (grfdrv_beta5_with):04604                  std   <$0049        New Y coordinate
1530 ECA81B           (grfdrv_beta5_with):04605                  ldd   Wt.MaxX,y     Get maximum X coordinate
                      (grfdrv_beta5_with):04606                IFNE  H6309
                      (grfdrv_beta5_with):04607                  incd                bump up by 1
                      (grfdrv_beta5_with):04608                ELSE
1533 C30001           (grfdrv_beta5_with):04609                  addd  #1
                      (grfdrv_beta5_with):04610                ENDC
1536 DD4F             (grfdrv_beta5_with):04611                  std   <$004F        New X size
1538 ECA81D           (grfdrv_beta5_with):04612                  ldd   Wt.MaxY,y     Get maximum Y coordinate
153B 9349             (grfdrv_beta5_with):04613                  subd  <$0049        Subtract Y coordinate
153D 2B4C             (grfdrv_beta5_with):04614                  bmi   L13B7         If negative, skip
     153F             (grfdrv_beta5_with):04615         L13A8    equ   *
                      (grfdrv_beta5_with):04616                IFNE  H6309
                      (grfdrv_beta5_with):04617                  incd                Bump up by 1
                      (grfdrv_beta5_with):04618                ELSE
153F C30001           (grfdrv_beta5_with):04619                  addd  #1
                      (grfdrv_beta5_with):04620                ENDC
1542 DD51             (grfdrv_beta5_with):04621                  std   <$0051        Save Y size
                      (grfdrv_beta5_with):04622         * Erase to end of screen/line comes here too
                      (grfdrv_beta5_with):04623         * Entry: Y=Ptr to window table
1544 17FE0F           (grfdrv_beta5_with):04624         L13AD    lbsr  L1E9D        get screen logical start address into X
                      (grfdrv_beta5_with):04625         * and also the starting pixel mask into B.
1547 9660             (grfdrv_beta5_with):04626                  lda   <$0060        Get screen type
1549 2A73             (grfdrv_beta5_with):04627                  bpl   L13E3         Do CLS on gfx screen & return
                      (grfdrv_beta5_with):04628         * Do the CLS on text screen. Use mini stack blast here for both 6809/6309
                      (grfdrv_beta5_with):04629         * At this point, X=ptr to start of area to clear
154B 8D36             (grfdrv_beta5_with):04630                  bsr   MakeChar      Make 2 byte (space + attrib)
154D 3466             (grfdrv_beta5_with):04631                  pshs  d,y,u         Save it & U and Y
154F 3384             (grfdrv_beta5_with):04632                  leau  ,x            Point U to start address to clear from
1551 D650             (grfdrv_beta5_with):04633                  ldb   <$50          Get width of window area to clear (in chars)
1553 58               (grfdrv_beta5_with):04634                  lslb                * 2 to include attribute byte
1554 D163             (grfdrv_beta5_with):04635                  cmpb  <$63          Same as width of screen?
1556 2716             (grfdrv_beta5_with):04636                  beq   ClsFTxt       Yes, window is full screen width, go do whole thing in one shot
                      (grfdrv_beta5_with):04637         * Hardware text clear - non full screen width. B=width to clear
1558 4F               (grfdrv_beta5_with):04638                  clra
1559 DDBF             (grfdrv_beta5_with):04639                  std   <grScrtch     Save width to clear (in bytes) it so we don't have to recalculate
155B 9EBF             (grfdrv_beta5_with):04640         HTxtLp   ldx   <grScrtch     Get width to clear
155D ECE4             (grfdrv_beta5_with):04641                  ldd   ,s            Get char/attr
155F 8D2D             (grfdrv_beta5_with):04642                  bsr   StkBlCl2      Clear line (exits with U=ptr to beginning of line we cleared)
1561 4F               (grfdrv_beta5_with):04643                  clra                More lines to do, get # of bytes/row on screen into D
1562 D663             (grfdrv_beta5_with):04644                  ldb   <$63
1564 33CB             (grfdrv_beta5_with):04645                  leau  d,u           Point to start of next line
1566 0A52             (grfdrv_beta5_with):04646                  dec   <$52          Dec # of lines high we are doing
1568 26F1             (grfdrv_beta5_with):04647                  bne   HTxtLp        done all lines, exit
156A EF64             (grfdrv_beta5_with):04648                  stu   4,s           Save updated U
156C 35E6             (grfdrv_beta5_with):04649                  puls  d,y,u,pc      Restore U,Y & return
                      (grfdrv_beta5_with):04650         
                      (grfdrv_beta5_with):04651         * Special optimized routine for full screen width hardware text - clear entire area in one shot
                      (grfdrv_beta5_with):04652         * Entry: U=ptr to start area to clear
156E D663             (grfdrv_beta5_with):04653         ClsFTxt  ldb   <$63          Get # bytes per line for screen
1570 9652             (grfdrv_beta5_with):04654                  lda   <$52          Get # of rows (lines)
1572 3D               (grfdrv_beta5_with):04655                  mul                 D=# chars to clear
1573 3406             (grfdrv_beta5_with):04656                  pshs  d             Save size (so we can add it later)
1575 1F01             (grfdrv_beta5_with):04657                  tfr   d,x           Move for subroutine
1577 EC62             (grfdrv_beta5_with):04658                  ldd   2,s           Get attrib/char
1579 8D13             (grfdrv_beta5_with):04659                  bsr   StkBlCl2      Clear it
157B 3506             (grfdrv_beta5_with):04660                  puls  d             Get complete size again
157D 33CB             (grfdrv_beta5_with):04661                  leau  d,u           Point to end of copy
157F EF64             (grfdrv_beta5_with):04662                  stu   4,s           Save over U on stack
1581 35E6             (grfdrv_beta5_with):04663                  puls  d,y,u,pc      Restore regs & return
                      (grfdrv_beta5_with):04664                  
                      (grfdrv_beta5_with):04665                  
                      (grfdrv_beta5_with):04666         * Get space char/attribute byte set up in D
1583 8620             (grfdrv_beta5_with):04667         MakeChar lda   #$20          Space character
1585 E628             (grfdrv_beta5_with):04668                  ldb   Wt.Attr,y     Get default attributes
1587 C438             (grfdrv_beta5_with):04669                  andb  #$38          Mask out Flash/Underline & bckgrnd color
1589 DA62             (grfdrv_beta5_with):04670                  orb   <$0062        Mask in background color (D is now space char/attr byte)
158B 39               (grfdrv_beta5_with):04671         L13B7    rts
                      (grfdrv_beta5_with):04672         
                      (grfdrv_beta5_with):04673         * Entry: B=Value to clear with (single byte). NOTE: If you enter at StkBlCl2, you can 
                      (grfdrv_beta5_with):04674         *          have D=double byte value to clear with (useful for hardware text screens, like in
                      (grfdrv_beta5_with):04675         *          Level II grfdrv)
                      (grfdrv_beta5_with):04676         *        X=Size (in bytes) to clear
                      (grfdrv_beta5_with):04677         *        U=Start address to clear from
                      (grfdrv_beta5_with):04678         * NOTE: No incoming regs preserved!
                      (grfdrv_beta5_with):04679         * NOTE: If you have a 2 byte value (hware text), put that in D, and call via StkBlCl2
                      (grfdrv_beta5_with):04680         * NOTE 2: If you know you are doing an even 4 byte sized clear, you can preload X with the value(s)
                      (grfdrv_beta5_with):04681         *    to clear with, A:B as the # of 4 byte chunks, and U as the ptr to then end of the clear,
                      (grfdrv_beta5_with):04682         *    and jump straight to either NormClr. You do have to add 3 bytes to the stack first
158C 1F98             (grfdrv_beta5_with):04683         StkBlClr tfr   b,a            D=double copy of value to clear memory with
158E 1E10             (grfdrv_beta5_with):04684         StkBlCl2 exg   x,d            D=Size to clear (in bytes), X=2 byte value to clear with
                      (grfdrv_beta5_with):04685                IFNE  H6309
                      (grfdrv_beta5_with):04686                  addr  d,u            Point to end of clear area for stack blast
                      (grfdrv_beta5_with):04687                ELSE
1590 33CB             (grfdrv_beta5_with):04688                  leau  d,u            Point to end of clear area for stack blast
                      (grfdrv_beta5_with):04689                ENDC
1592 3414             (grfdrv_beta5_with):04690                  pshs  b,x            Save 16 bit value to clear with, & LSB of size (to check for leftover bytes)
1594 44               (grfdrv_beta5_with):04691                  lsra                 Divide size by 4 (since we are doing 4 bytes at a time)
1595 56               (grfdrv_beta5_with):04692                  rorb
1596 44               (grfdrv_beta5_with):04693                  lsra
1597 56               (grfdrv_beta5_with):04694                  rorb
1598 3406             (grfdrv_beta5_with):04695                  pshs  d              Save mini-stackblast counters
159A EC62             (grfdrv_beta5_with):04696                  ldd   2,s            Get A=LSB of # of bytes to clear, B=byte to clear with
159C 8403             (grfdrv_beta5_with):04697                  anda  #%00000011     Non-even multiple of 4?
159E 270A             (grfdrv_beta5_with):04698                  beq   NoOdd          Even, skip single byte cleanup copy
                      (grfdrv_beta5_with):04699         * LCB - This patch allow 1-3 byte "leftovers" to function properly for both graphics (1 byte value)
                      (grfdrv_beta5_with):04700         *  & text (2 byte values) clears to work, for partial width screens.
                      (grfdrv_beta5_with):04701         * (should allow text and gfx to both work)
15A0 44               (grfdrv_beta5_with):04702         OverLp   lsra                 Odd # of bytes?
15A1 2405             (grfdrv_beta5_with):04703                  bcc    Do2           No, skip to 2 byte copy (can only be 2 at this point)
15A3 E7C2             (grfdrv_beta5_with):04704                  stb    ,-u           Yes, save 1 byte (could be 1 or 3)
15A5 44               (grfdrv_beta5_with):04705         Chk2Byte lsra                 Double byte as well?
15A6 2402             (grfdrv_beta5_with):04706                  bcc    NoOdd         No, do 4 byte chunks if needed
15A8 AFC3             (grfdrv_beta5_with):04707         Do2      stx   ,--u           Save double byte value
15AA ECE1             (grfdrv_beta5_with):04708         NoOdd    ldd   ,s++           Get Mini-stack blast ctrs back
15AC 270A             (grfdrv_beta5_with):04709                  beq   ExitClrB       No 4 byte blocks, done
15AE 3184             (grfdrv_beta5_with):04710         NormClr  leay  ,x             Dupe 16 bit clear value to Y
15B0 3630             (grfdrv_beta5_with):04711         ClrLp    pshu  x,y            Clear 4 bytes
15B2 5A               (grfdrv_beta5_with):04712                  decb                 Dec "leftover" (<256) 4 byte block counter
15B3 26FB             (grfdrv_beta5_with):04713                  bne   ClrLp          Keep doing till that chunk is done
15B5 4A               (grfdrv_beta5_with):04714                  deca                 Dec 1Kbyte counter
15B6 2AF8             (grfdrv_beta5_with):04715                  bpl   ClrLp          Still going (B has been set to 0, so inner loop is 256 now)
15B8 3594             (grfdrv_beta5_with):04716         ExitClrB puls  b,x,pc         Eat temp regs & return
                      (grfdrv_beta5_with):04717         
                      (grfdrv_beta5_with):04718         * Entry if known 4 byte multiple to clear ONLY
                      (grfdrv_beta5_with):04719         * Entry if called here: B,X on stack (or leas -3,s if you don't care)
                      (grfdrv_beta5_with):04720         *   X=16 bit value to clear with
                      (grfdrv_beta5_with):04721         *   U=ptr to end of clear ptr+1
                      (grfdrv_beta5_with):04722         *   A=# of 1k blocks to clear
                      (grfdrv_beta5_with):04723         *   B=# of 4 byte "leftover" blocks to clear
15BA 3414             (grfdrv_beta5_with):04724         FourBClr pshs  b,x            Preserve regs for sub
15BC 20F0             (grfdrv_beta5_with):04725                  bra   NormClr        Do copy
                      (grfdrv_beta5_with):04726         
                      (grfdrv_beta5_with):04727         * Part of CLS/Erase to end of screen/line - Gfx only
                      (grfdrv_beta5_with):04728         * all coords & sizes should be pixel based
                      (grfdrv_beta5_with):04729         *   the cmpx's at the bottom should be F or E (screen type)
                      (grfdrv_beta5_with):04730         * NOTE: <$48 contains a 0 when coming in here for CLS
                      (grfdrv_beta5_with):04731         *   If this is the only way to get here, may change lda/coma to lda #$ff
                      (grfdrv_beta5_with):04732         * <$4F=X size in pixels (1-640) to clear
                      (grfdrv_beta5_with):04733         * <$51=Y size in pixels (1-200) to clear
                      (grfdrv_beta5_with):04734         * This routine calculates the pixel mask if you are clearing from the middle
                      (grfdrv_beta5_with):04735         * of a byte to properly handle proportional chars or 6 pixel fonts
                      (grfdrv_beta5_with):04736         * ATD: OK, MOST clears are on 8x8 pixel boundaries, but for proportional, etc.
                      (grfdrv_beta5_with):04737         * fonts and clear to EOL, we may be in the middle of a byte.  In that case,
                      (grfdrv_beta5_with):04738         * do a BAR.  It's slower, but a lot smaller code.
                      (grfdrv_beta5_with):04739         * Entry: A=Screen type
                      (grfdrv_beta5_with):04740         *        B= starting pixel mask for this byte: important for pixel boundaries!
                      (grfdrv_beta5_with):04741         *        X=absolute address of the start of the screen
15BE CE4D44           (grfdrv_beta5_with):04742         L13E3    ldu   #GrfStrt+L0D70-1  mask for pixels
15C1 A6C6             (grfdrv_beta5_with):04743                  lda   a,u          grab mask (7,3,1)
15C3 5D               (grfdrv_beta5_with):04744                  tstb               is the high bit of the pixel mask set?
15C4 2B29             (grfdrv_beta5_with):04745                  bmi   L13F0        yes, we're starting on a byte boundary
15C6 3412             (grfdrv_beta5_with):04746                  pshs  a,x          save X-coord mask, and screen ptr for later
15C8 1F98             (grfdrv_beta5_with):04747                  tfr   b,a          get another copy of the pixel mask
15CA 54               (grfdrv_beta5_with):04748         L13E5    lsrb               move the mask one bit to the right
                      (grfdrv_beta5_with):04749                IFNE  H6309
                      (grfdrv_beta5_with):04750                  orr   b,a          make A the right-most mask
                      (grfdrv_beta5_with):04751                ELSE
15CB D7BF             (grfdrv_beta5_with):04752                  stb   <grScrtch
15CD 9ABF             (grfdrv_beta5_with):04753                  ora   <grScrtch
                      (grfdrv_beta5_with):04754                ENDC
15CF 24F9             (grfdrv_beta5_with):04755                  bcc   L13E5        the low bits of A will be the pixel mask
15D1 1F89             (grfdrv_beta5_with):04756                  tfr   a,b          copy A to B again
15D3 43               (grfdrv_beta5_with):04757                  coma
15D4 D462             (grfdrv_beta5_with):04758                  andb  <$62         AND with full-byte background color mask
15D6 DD97             (grfdrv_beta5_with):04759                  std   <$97         save screen mask, background color
                      (grfdrv_beta5_with):04760                IFNE  H6309
                      (grfdrv_beta5_with):04761                  lde   <$52         get the lines to clear
                      (grfdrv_beta5_with):04762                ELSE
15D8 D652             (grfdrv_beta5_with):04763                  ldb   <$52
15DA D7B5             (grfdrv_beta5_with):04764                  stb   <$B5
                      (grfdrv_beta5_with):04765                ENDC
15DC D663             (grfdrv_beta5_with):04766                  ldb   <$63         get the size of the screen
15DE A684             (grfdrv_beta5_with):04767         L13E8    lda   ,x           grab a byte off of the screen
15E0 9497             (grfdrv_beta5_with):04768                  anda  <$97         AND in only the screen pixels we want
15E2 9A98             (grfdrv_beta5_with):04769                  ora   <$98         OR in the background color
15E4 A784             (grfdrv_beta5_with):04770                  sta   ,x           save the updated byte
15E6 3A               (grfdrv_beta5_with):04771                  abx                go to the next screen line
                      (grfdrv_beta5_with):04772                IFNE  H6309
                      (grfdrv_beta5_with):04773                  dece               count down
                      (grfdrv_beta5_with):04774                ELSE
15E7 0AB5             (grfdrv_beta5_with):04775                  dec   <$B5
                      (grfdrv_beta5_with):04776                ENDC
15E9 26F3             (grfdrv_beta5_with):04777                  bne   L13E8        continue until done
15EB 3512             (grfdrv_beta5_with):04778                  puls  a,x          restore X coord mask and screen ptr
15ED 3001             (grfdrv_beta5_with):04779                  leax  1,x          we've done these bytes already
                      (grfdrv_beta5_with):04780         * Even byte boundary for start
15EF 4C               (grfdrv_beta5_with):04781         L13F0    inca               now B=number of pixels per byte (8,4,2);A not B; RG
15F0 D662             (grfdrv_beta5_with):04782                  ldb   <$62         Get background full-byte pixel mask
15F2 3406             (grfdrv_beta5_with):04783                  pshs  d            save pixels/byte, color mask
15F4 DC4F             (grfdrv_beta5_with):04784                  ldd   <$004F       Get X size (in pixels)
                      (grfdrv_beta5_with):04785                IFNE  H6309
                      (grfdrv_beta5_with):04786                  divd  ,s+          divide by pixels/byte: B=bytes wide the window is
                      (grfdrv_beta5_with):04787         * PANIC if A<>0!!!          leave mask on stack for later use
                      (grfdrv_beta5_with):04788                ELSE
                      (grfdrv_beta5_with):04789         * 6809 - Should be able to use <grScrtch & <grScrtch+1 for the answer and divisor
15F6 0FBF             (grfdrv_beta5_with):04790                  clr   <grScrtch    Clear result to start
15F8 0CBF             (grfdrv_beta5_with):04791         L13F0b   inc   <grScrtch    Bump up result
15FA E0E4             (grfdrv_beta5_with):04792                  subb  ,s           Subtract pixels/byte
15FC 8200             (grfdrv_beta5_with):04793                  sbca  #0
15FE 24F8             (grfdrv_beta5_with):04794                  bcc   L13F0b       Still more possible, subtract again/bump up answer
1600 D6BF             (grfdrv_beta5_with):04795                  ldb   <grScrtch    Get result NOTE: We don't care about remainder
1602 5A               (grfdrv_beta5_with):04796                  decb               Adjust back down to final answer (since we borrowed)
1603 3261             (grfdrv_beta5_with):04797                  leas  1,s
                      (grfdrv_beta5_with):04798                ENDC
1605 D163             (grfdrv_beta5_with):04799                  cmpb  <$0063       Are we clearing the full width of the screen?
1607 272F             (grfdrv_beta5_with):04800                  beq   ClsFGfx      Yes, do complete TFM
1609 D797             (grfdrv_beta5_with):04801                  stb   <$97         save width of window for later
160B D063             (grfdrv_beta5_with):04802                  subb  <$63         subtract width of window from width of screen
160D 50               (grfdrv_beta5_with):04803                  negb               now B=offset from X-end,Y to X-start,Y+1
160E 9652             (grfdrv_beta5_with):04804                  lda   <$52         Get # lines to clear
                      (grfdrv_beta5_with):04805                IFNE  H6309
                      (grfdrv_beta5_with):04806                  clre               W for TFM size
1610                  (grfdrv_beta5_with):04807         L1450    ldf   <$97         Get width of window in bytes
                      (grfdrv_beta5_with):04808                  tfm   s,x+         Clear out line
                      (grfdrv_beta5_with):04809                  deca               Dec line ctr
                      (grfdrv_beta5_with):04810                  beq   L146F        Done, exit
                      (grfdrv_beta5_with):04811                  abx                Bump to start of next line
                      (grfdrv_beta5_with):04812                  bra   L1450        Keep clearing until done
                      (grfdrv_beta5_with):04813                ELSE
                      (grfdrv_beta5_with):04814         * Entry: A=# of lines to clear
                      (grfdrv_beta5_with):04815         *        X=ptr to start of line on screen
1610 D663             (grfdrv_beta5_with):04816         L1450    ldb   <$63         Get # bytes/line on screen
1612 DDBF             (grfdrv_beta5_with):04817                  std   <grScrtch    Save # of lines we are clearing & bytes/line
1614 4F               (grfdrv_beta5_with):04818                  clra
1615 D697             (grfdrv_beta5_with):04819                  ldb   <$97         Get # of bytes wide we are clearing
1617 3466             (grfdrv_beta5_with):04820                  pshs  d,y,u        Save regs
1619 3384             (grfdrv_beta5_with):04821                  leau  ,x           Point to start of copy
161B AEE4             (grfdrv_beta5_with):04822         L1450b   ldx   ,s           Get size to copy into X for subroutine
161D E666             (grfdrv_beta5_with):04823                  ldb   6,s          Get full byte color mask
161F 17FF6A           (grfdrv_beta5_with):04824                  lbsr  StkBlClr     Go clear the line
1622 DCBF             (grfdrv_beta5_with):04825                  ldd   <grScrtch    Get # lines left to clear & bytes/line
1624 4A               (grfdrv_beta5_with):04826                  deca               Dec line ctr
1625 2707             (grfdrv_beta5_with):04827                  beq   DoneClLn     Done, skip ahead
1627 97BF             (grfdrv_beta5_with):04828                  sta   <grScrtch    Save lines left ctr
1629 4F               (grfdrv_beta5_with):04829                  clra               D=# of bytes/line
162A 33CB             (grfdrv_beta5_with):04830                  leau  d,u          Point to start of next line
162C 20ED             (grfdrv_beta5_with):04831                  bra   L1450b       Keep doing until done
                      (grfdrv_beta5_with):04832                  
162E D697             (grfdrv_beta5_with):04833         DoneClLn ldb   <$97         Get size of copy into D (A=0 from deca to get here)
1630 33CB             (grfdrv_beta5_with):04834                  leau  d,u          Point U to end of last copy
1632 EFE4             (grfdrv_beta5_with):04835                  stu   ,s           Save over X on stack
1634 3570             (grfdrv_beta5_with):04836                  puls  x,y,u        Restore regs
1636 3582             (grfdrv_beta5_with):04837                  puls  a,pc         Eat stack & return
                      (grfdrv_beta5_with):04838                ENDC
                      (grfdrv_beta5_with):04839         
                      (grfdrv_beta5_with):04840         * Clearing Gfx screen/even byte start/full width window
                      (grfdrv_beta5_with):04841         * Entry: B=width of screen/window in bytes
                      (grfdrv_beta5_with):04842         *        X=ptr to start of window area to clear
                      (grfdrv_beta5_with):04843         *        ,s = byte to clear with
1638 9652             (grfdrv_beta5_with):04844         ClsFGfx  lda   <$52         Get # lines to clear
163A 3D               (grfdrv_beta5_with):04845                  mul                Calculate # bytes for remainder of screen
                      (grfdrv_beta5_with):04846                IFNE  H6309
                      (grfdrv_beta5_with):04847                  tfr   d,w          Move to TFM size register
                      (grfdrv_beta5_with):04848                  tfm   s,x+         Clear out remainder of screen
                      (grfdrv_beta5_with):04849                ELSE
163B 270F             (grfdrv_beta5_with):04850                  beq   L146F       If window size is 0 bytes, just return
                      (grfdrv_beta5_with):04851         * was just d,x,u
163D 3476             (grfdrv_beta5_with):04852                  pshs  d,x,y,u          Save start screen ptr & U
163F 3384             (grfdrv_beta5_with):04853                  leau  ,x          Point U to start of window to clear
1641 1F01             (grfdrv_beta5_with):04854                  tfr   d,x         X=size to clear
1643 E668             (grfdrv_beta5_with):04855                  ldb   8,s         Get byte to clear with
1645 17FF44           (grfdrv_beta5_with):04856                  lbsr  StkBlClr    Clear window
                      (grfdrv_beta5_with):04857         *         puls  d,x,u          Get regs back
1648 3576             (grfdrv_beta5_with):04858                  puls  d,x,y,u          Get regs back
164A 308B             (grfdrv_beta5_with):04859                  leax  d,x         Point X to end of window cleared
                      (grfdrv_beta5_with):04860                ENDC
                      (grfdrv_beta5_with):04861         
                      (grfdrv_beta5_with):04862         
164C 3582             (grfdrv_beta5_with):04863         L146F    puls  pc,a              Eat a & return
                      (grfdrv_beta5_with):04864         
                      (grfdrv_beta5_with):04865         * $1f code processor
                      (grfdrv_beta5_with):04866         *L1478    lbsr  L0177          Map in window/setup GRFDRV mem/update cursors
164E 17FAE6           (grfdrv_beta5_with):04867         L1478    lbsr  L0FFF          Set up font info
1651 8D03             (grfdrv_beta5_with):04868                  bsr   L1483          Perform $1F function
1653 7E50A4           (grfdrv_beta5_with):04869                  jmp   >GrfStrt+L0F78 Return to Grf/Wind Int: no errors
                      (grfdrv_beta5_with):04870         
1656 8020             (grfdrv_beta5_with):04871         L1483    suba  #$20           Inverse on? (A=$20)
1658 271B             (grfdrv_beta5_with):04872                  beq   L14A8        yes, go do it
165A 4A               (grfdrv_beta5_with):04873                  deca               A=$21 Inverse off?
165B 2732             (grfdrv_beta5_with):04874                  beq   L14C4
165D 4A               (grfdrv_beta5_with):04875                  deca               A=$22 Underline on?
165E 273B             (grfdrv_beta5_with):04876                  beq   L14D0
1660 4A               (grfdrv_beta5_with):04877                  deca               A=$23 Underline off?
1661 2749             (grfdrv_beta5_with):04878                  beq   L14D9
1663 4A               (grfdrv_beta5_with):04879                  deca               A=$24 Blink on?
1664 2757             (grfdrv_beta5_with):04880                  beq   L14E2
1666 4A               (grfdrv_beta5_with):04881                  deca               A=$25 blink off?
1667 275F             (grfdrv_beta5_with):04882                  beq   L14E9
1669 800B             (grfdrv_beta5_with):04883                  suba  #$30-$25     A=$30 Insert line?
166B 1027FE0D         (grfdrv_beta5_with):04884                  lbeq  L1291
166F 4A               (grfdrv_beta5_with):04885                  deca               A=$31 Delete line?
1670 1027FE3A         (grfdrv_beta5_with):04886                  lbeq  L12C5
1674 39               (grfdrv_beta5_with):04887                  rts   
                      (grfdrv_beta5_with):04888         
                      (grfdrv_beta5_with):04889         * Inverse ON
1675 E629             (grfdrv_beta5_with):04890         L14A8    ldb   Wt.BSW,y       Get window bit flags
1677 C504             (grfdrv_beta5_with):04891                  bitb  #Invers        Inverse on?
1679 2613             (grfdrv_beta5_with):04892                  bne   L14C3          Already on, leave it alone
167B CA04             (grfdrv_beta5_with):04893                  orb   #Invers        Set inverse on flag
167D E729             (grfdrv_beta5_with):04894                  stb   Wt.BSW,y       Save new bit flags
167F A628             (grfdrv_beta5_with):04895         L14B2    lda   Wt.Attr,y      Get default attributes
1681 170105           (grfdrv_beta5_with):04896                  lbsr  L15B2          Go swap Fore/Background colors into A
1684 E628             (grfdrv_beta5_with):04897                  ldb   Wt.Attr,y      Get default attributes again
1686 C4C0             (grfdrv_beta5_with):04898                  andb  #Blink+Under   Mask out all but Blink & underline
                      (grfdrv_beta5_with):04899                IFNE  H6309
                      (grfdrv_beta5_with):04900                  orr   a,b            Mask in swapped colors
                      (grfdrv_beta5_with):04901                ELSE
1688 97BF             (grfdrv_beta5_with):04902                  sta   <grScrtch
168A DABF             (grfdrv_beta5_with):04903                  orb   <grScrtch
                      (grfdrv_beta5_with):04904                ENDC
168C E728             (grfdrv_beta5_with):04905                  stb   Wt.Attr,y      Save new default attribute byte & return
168E 39               (grfdrv_beta5_with):04906         L14C3    rts   
                      (grfdrv_beta5_with):04907         
                      (grfdrv_beta5_with):04908         * Inverse OFF
168F E629             (grfdrv_beta5_with):04909         L14C4    ldb   Wt.BSW,y       Get window bit flags
1691 C504             (grfdrv_beta5_with):04910                  bitb  #Invers        Inverse off?
1693 27F9             (grfdrv_beta5_with):04911                  beq   L14C3          Already off, leave
1695 C4FB             (grfdrv_beta5_with):04912                  andb  #^Invers       Shut inverse bit flag off
1697 E729             (grfdrv_beta5_with):04913                  stb   Wt.BSW,y       Save updated bit flags
1699 20E4             (grfdrv_beta5_with):04914                  bra   L14B2          Go swap colors in attribute byte
                      (grfdrv_beta5_with):04915         
                      (grfdrv_beta5_with):04916         * Underline ON
     169B             (grfdrv_beta5_with):04917         L14D0    equ   *
                      (grfdrv_beta5_with):04918                IFNE  H6309
                      (grfdrv_beta5_with):04919                  oim   #Under,Wt.Attr,y
                      (grfdrv_beta5_with):04920                  oim   #Under,Wt.BSW,y
                      (grfdrv_beta5_with):04921                ELSE
169B 97BF             (grfdrv_beta5_with):04922                  sta   <grScrtch
169D A628             (grfdrv_beta5_with):04923                  lda   Wt.Attr,y 
169F 8A40             (grfdrv_beta5_with):04924                  ora   #Under
16A1 A728             (grfdrv_beta5_with):04925                  sta   Wt.Attr,y
16A3 A629             (grfdrv_beta5_with):04926                  lda   Wt.BSW,y 
16A5 8A40             (grfdrv_beta5_with):04927                  ora   #Under
16A7 A729             (grfdrv_beta5_with):04928                  sta   Wt.BSW,y
16A9 96BF             (grfdrv_beta5_with):04929                  lda   <grScrtch
                      (grfdrv_beta5_with):04930                ENDC
16AB 39               (grfdrv_beta5_with):04931                  rts
                      (grfdrv_beta5_with):04932         
                      (grfdrv_beta5_with):04933         * Underline OFF
     16AC             (grfdrv_beta5_with):04934         L14D9    equ   *
                      (grfdrv_beta5_with):04935                IFNE  H6309
                      (grfdrv_beta5_with):04936                  aim   #^Under,Wt.Attr,y
                      (grfdrv_beta5_with):04937                  aim   #^Under,Wt.BSW,y
                      (grfdrv_beta5_with):04938                ELSE
16AC 97BF             (grfdrv_beta5_with):04939                  sta   <grScrtch
16AE A628             (grfdrv_beta5_with):04940                  lda   Wt.Attr,y 
16B0 84BF             (grfdrv_beta5_with):04941                  anda  #^Under
16B2 A728             (grfdrv_beta5_with):04942                  sta   Wt.Attr,y
16B4 A629             (grfdrv_beta5_with):04943                  lda   Wt.BSW,y 
16B6 84BF             (grfdrv_beta5_with):04944                  anda  #^Under
16B8 A729             (grfdrv_beta5_with):04945                  sta   Wt.BSW,y
16BA 96BF             (grfdrv_beta5_with):04946                  lda   <grScrtch
                      (grfdrv_beta5_with):04947                ENDC
16BC 39               (grfdrv_beta5_with):04948                  rts
                      (grfdrv_beta5_with):04949         
                      (grfdrv_beta5_with):04950         * Blink on
     16BD             (grfdrv_beta5_with):04951         L14E2    equ   *
                      (grfdrv_beta5_with):04952                IFNE  H6309
                      (grfdrv_beta5_with):04953                  oim   #Blink,Wt.Attr,y
                      (grfdrv_beta5_with):04954                ELSE
16BD 97BF             (grfdrv_beta5_with):04955                  sta   <grScrtch
16BF A628             (grfdrv_beta5_with):04956                  lda   Wt.Attr,y 
16C1 8A80             (grfdrv_beta5_with):04957                  ora   #Blink
16C3 A728             (grfdrv_beta5_with):04958                  sta   Wt.Attr,y
16C5 96BF             (grfdrv_beta5_with):04959                  lda   <grScrtch
                      (grfdrv_beta5_with):04960                ENDC
16C7 39               (grfdrv_beta5_with):04961                  rts   
                      (grfdrv_beta5_with):04962         
                      (grfdrv_beta5_with):04963         * Blink off
     16C8             (grfdrv_beta5_with):04964         L14E9    equ   *
                      (grfdrv_beta5_with):04965                IFNE  H6309
                      (grfdrv_beta5_with):04966                  aim   #^Blink,Wt.Attr,y
                      (grfdrv_beta5_with):04967                ELSE
16C8 97BF             (grfdrv_beta5_with):04968                  sta   <grScrtch
16CA A628             (grfdrv_beta5_with):04969                  lda   Wt.Attr,y 
16CC 847F             (grfdrv_beta5_with):04970                  anda  #^Blink
16CE A728             (grfdrv_beta5_with):04971                  sta   Wt.Attr,y
16D0 96BF             (grfdrv_beta5_with):04972                  lda   <grScrtch
                      (grfdrv_beta5_with):04973                ENDC
16D2 39               (grfdrv_beta5_with):04974                  rts   
                      (grfdrv_beta5_with):04975         
                      (grfdrv_beta5_with):04976         * Cursor On/Off entry point
16D3 17FA61           (grfdrv_beta5_with):04977         L116E    lbsr  L0FFF          Set up font sizes (and font if on gfx screen)
16D6 8D02             (grfdrv_beta5_with):04978                  bsr   L1179          Do appropriate action
16D8 2010             (grfdrv_beta5_with):04979                  bra   L1508
                      (grfdrv_beta5_with):04980         
16DA 8020             (grfdrv_beta5_with):04981         L1179    suba  #$20           A=$20  Cursor Off?
16DC 276B             (grfdrv_beta5_with):04982                  beq   L14F8          Yes, go do it
16DE 4A               (grfdrv_beta5_with):04983                  deca                 A=$21  Cursor on?
16DF 275E             (grfdrv_beta5_with):04984                  beq   L14F0          Yes, go do it
16E1 39               (grfdrv_beta5_with):04985                  rts                  Neither, return
                      (grfdrv_beta5_with):04986         
                      (grfdrv_beta5_with):04987         * Update Window entrypoint - Put txt & Gfx cursors back on scrn
16E2 17E9BA           (grfdrv_beta5_with):04988         L1500    lbsr  L0129          Map the window in & setup Grfdrv mem
16E5 8D5E             (grfdrv_beta5_with):04989                  bsr   L1563          Put text cursor back on window
16E7 1700AF           (grfdrv_beta5_with):04990         L1505    lbsr  L15BF          Put gfx cursor back on window
16EA 7E50A4           (grfdrv_beta5_with):04991         L1508    jmp   >GrfStrt+L0F78 no error & exit
                      (grfdrv_beta5_with):04992         
                      (grfdrv_beta5_with):04993         * This takes the gfx/txt cursors off the screen before returning to original
                      (grfdrv_beta5_with):04994         * Grfdrv call
16ED 3436             (grfdrv_beta5_with):04995         L150C    pshs  y,x,d          Preserve regs
16EF 8D5E             (grfdrv_beta5_with):04996                  bsr   L157A          Take text cursor off (restore original char)
16F1 1700C7           (grfdrv_beta5_with):04997                  lbsr  L15E2          Take Gfx cursor off (restore original screen)
16F4 F61000           (grfdrv_beta5_with):04998                  ldb   >WGlobal+G.CurTik  Get restart counter for # clock interrupts per
16F7 F71001           (grfdrv_beta5_with):04999                  stb   >WGlobal+G.CntTik  cursor update & make it current counter
16FA 35B6             (grfdrv_beta5_with):05000                  puls  pc,y,x,d       Restore regs & return
                      (grfdrv_beta5_with):05001         
                      (grfdrv_beta5_with):05002         * PutGC entry point (Took out mapping in window since the CMPY only lets us
                      (grfdrv_beta5_with):05003         * do anything if it IS mapped in currently
16FC 17E9A0           (grfdrv_beta5_with):05004         L151B    lbsr  L0129          Map in window & setup Grfdrv vars
16FF 109C2E           (grfdrv_beta5_with):05005                  cmpy  <$002E         Are we the current active window (window tbl)?
1702 26E6             (grfdrv_beta5_with):05006                  bne   L1508          No, don't bother with PutGC
1704 DC5B             (grfdrv_beta5_with):05007                  ldd   <$005B         Get Graphics cursor X coord
1706 10933D           (grfdrv_beta5_with):05008                  cmpd  <$003D         Same as last used graphics cursor coord?
1709 2607             (grfdrv_beta5_with):05009                  bne   L1531          No, go draw new graphics cursor
170B DC5D             (grfdrv_beta5_with):05010                  ldd   <$005D         Get Graphics cursor Y coord
170D 10933F           (grfdrv_beta5_with):05011                  cmpd  <$003F         Same as last used graphics cursor coord?
1710 27D8             (grfdrv_beta5_with):05012                  beq   L1508          Yes, don't bother updating
1712 1700A6           (grfdrv_beta5_with):05013         L1531    lbsr  L15E2          Put original data under cursor back to normal
1715 8D02             (grfdrv_beta5_with):05014                  bsr   L153B          Update 'last gfx cursor' on position to new one
1717 20CE             (grfdrv_beta5_with):05015                  bra   L1505          put gfx cursor back on screen, and exit: +3C:-3B
                      (grfdrv_beta5_with):05016         
1719 DC47             (grfdrv_beta5_with):05017         L153B    ldd   <$0047         Get current 'working' X & Y coords
171B 9E49             (grfdrv_beta5_with):05018                  ldx   <$0049
171D 3416             (grfdrv_beta5_with):05019                  pshs  d,x            Save them on stack
                      (grfdrv_beta5_with):05020                IFNE  H6309
                      (grfdrv_beta5_with):05021                  ldq   <$005b         Get new graphics cursor X & Y coords
                      (grfdrv_beta5_with):05022                  stq   <$0047         Save as working copies for Put routines
                      (grfdrv_beta5_with):05023                  stq   <$003d         Also, make them the new 'last position' coords
                      (grfdrv_beta5_with):05024                ELSE
171F DC5D             (grfdrv_beta5_with):05025                  ldd   <$5d           Get 'working' Y coord
                      (grfdrv_beta5_with):05026         * 6809 this copy of W may not need to be saved
1721 DDB5             (grfdrv_beta5_with):05027                  std   <$B5           Save W copy
1723 DD49             (grfdrv_beta5_with):05028                  std   <$49           Save working copy for Put routines
1725 DD3F             (grfdrv_beta5_with):05029                  std   <$3f           Save as new 'last position' Y coord
1727 DC5B             (grfdrv_beta5_with):05030                  ldd   <$5b           Get 'working' X coord
1729 DD47             (grfdrv_beta5_with):05031                  std   <$47           Save working copy for Put routines
172B DD3D             (grfdrv_beta5_with):05032                  std   <$3d           Save as new 'last position' X coord
                      (grfdrv_beta5_with):05033                ENDC
172D AE30             (grfdrv_beta5_with):05034                  ldx   Wt.STbl,y      Get screen table ptr
172F AE02             (grfdrv_beta5_with):05035                  ldx   St.LStrt,x     Get screen start address
1731 17FC24           (grfdrv_beta5_with):05036                  lbsr  L1E9F          Screen address to put=X, start pixel mask=B
1734 9F41             (grfdrv_beta5_with):05037                  stx   <$0041         Save screen ptr
1736 D743             (grfdrv_beta5_with):05038                  stb   <$0043         Save start pixel mask
1738 3516             (grfdrv_beta5_with):05039                  puls  d,x            Get back original 'working' coords
173A DD47             (grfdrv_beta5_with):05040                  std   <$0047
173C 9F49             (grfdrv_beta5_with):05041                  stx   <$0049         Put them back for original GrfDrv function
173E 39               (grfdrv_beta5_with):05042         L1579    rts
                      (grfdrv_beta5_with):05043         
                      (grfdrv_beta5_with):05044         * Cursor on
     173F             (grfdrv_beta5_with):05045         L14F0    equ   *
                      (grfdrv_beta5_with):05046                IFNE  H6309
                      (grfdrv_beta5_with):05047                  aim   #^NoCurs,Wt.BSW,y  Set cursor flag to on
                      (grfdrv_beta5_with):05048                ELSE
173F A629             (grfdrv_beta5_with):05049                  lda   Wt.BSW,y 
1741 84FD             (grfdrv_beta5_with):05050                  anda  #^NoCurs
1743 A729             (grfdrv_beta5_with):05051                  sta   Wt.BSW,y
                      (grfdrv_beta5_with):05052                ENDC
                      (grfdrv_beta5_with):05053         * Update txt cursor (on gfx or txt screens) from UPDATE Window 'hidden' call
1745 8601             (grfdrv_beta5_with):05054         L1563    lda   #$01           put the cursor on the screen
1747 2007             (grfdrv_beta5_with):05055                  bra   L157B
                      (grfdrv_beta5_with):05056         
                      (grfdrv_beta5_with):05057         * Cursor off
     1749             (grfdrv_beta5_with):05058         L14F8    equ   *
                      (grfdrv_beta5_with):05059                IFNE  H6309
                      (grfdrv_beta5_with):05060                  oim   #NoCurs,Wt.BSW,y  Set cursor flag to off
                      (grfdrv_beta5_with):05061                ELSE
1749 A629             (grfdrv_beta5_with):05062                  lda   Wt.BSW,y 
174B 8A02             (grfdrv_beta5_with):05063                  ora   #NoCurs
174D A729             (grfdrv_beta5_with):05064                  sta   Wt.BSW,y
                      (grfdrv_beta5_with):05065                ENDC
                      (grfdrv_beta5_with):05066         * Update text cursor (on gfx or text screens) from within Grfdrv
174F 4F               (grfdrv_beta5_with):05067         L157A    clra               take the cursor off of the screen
1750 109C2E           (grfdrv_beta5_with):05068         L157B    cmpy  <$002E       We on current window?
1753 26E9             (grfdrv_beta5_with):05069                  bne   L1579        No, exit
                      (grfdrv_beta5_with):05070                IFNE  H6309
                      (grfdrv_beta5_with):05071                  tim   #NoCurs,Wt.BSW,y Cursor enabled?
                      (grfdrv_beta5_with):05072                ELSE
1755 3402             (grfdrv_beta5_with):05073                  pshs  a
1757 A629             (grfdrv_beta5_with):05074                  lda   Wt.BSW,y     Cursor enabled?
1759 8502             (grfdrv_beta5_with):05075                  bita  #NoCurs
175B 3502             (grfdrv_beta5_with):05076                  puls  a
                      (grfdrv_beta5_with):05077                ENDC
175D 26DF             (grfdrv_beta5_with):05078                  bne   L1579        No, exit
175F 9139             (grfdrv_beta5_with):05079                  cmpa  <$0039       get cursor on screen flag
1761 27DB             (grfdrv_beta5_with):05080                  beq   L1579        same state as last time, exit
1763 9739             (grfdrv_beta5_with):05081                  sta   <$0039       cursor is ON the screen
1765 17F9D2           (grfdrv_beta5_with):05082                  lbsr  L1002        Set up fonts, character sizes
                      (grfdrv_beta5_with):05083         * Useless bra?
                      (grfdrv_beta5_with):05084         *         bra   L158B        go put the cursor on-screen
                      (grfdrv_beta5_with):05085         
                      (grfdrv_beta5_with):05086         * Handle char. under cursor on Hware Text screen
                      (grfdrv_beta5_with):05087         * Entry: Y=window table ptr
                      (grfdrv_beta5_with):05088         * Exit: Attribute byte on screen has fore/bckground colors reversed
1768 AE3B             (grfdrv_beta5_with):05089         L158B    ldx   Wt.Cur,y     get cursor physical address
176A D660             (grfdrv_beta5_with):05090                  ldb   <$0060       get screen type
176C 2A0F             (grfdrv_beta5_with):05091                  bpl   L15A5        Skip ahead if gfx screen
176E A601             (grfdrv_beta5_with):05092                  lda   1,x          Get attribute byte of char. under cursor
1770 8D17             (grfdrv_beta5_with):05093                  bsr   L15B2        Get inversed fore/bck ground colors mask into A
1772 E601             (grfdrv_beta5_with):05094                  ldb   1,x          Get original attribute byte back
1774 C4C0             (grfdrv_beta5_with):05095                  andb  #%11000000   Mask out all but blink & underline
                      (grfdrv_beta5_with):05096                IFNE  H6309
                      (grfdrv_beta5_with):05097                  orr   a,b          Merge in swapped colors mask
                      (grfdrv_beta5_with):05098                ELSE
1776 97BF             (grfdrv_beta5_with):05099                  sta   <grScrtch
1778 DABF             (grfdrv_beta5_with):05100                  orb   <grScrtch
                      (grfdrv_beta5_with):05101                ENDC
177A E701             (grfdrv_beta5_with):05102                  stb   1,x          Set new attributes for this char
177C 39               (grfdrv_beta5_with):05103                  rts
                      (grfdrv_beta5_with):05104         
                      (grfdrv_beta5_with):05105         * Set attributes on Gfx screen
177D 3420             (grfdrv_beta5_with):05106         L15A5    pshs  y            Save window table ptr
177F CE52A4           (grfdrv_beta5_with):05107                  ldu   #GrfStrt+L10FA  Setup vector for cursor on Gfx screen
1782 0F0E             (grfdrv_beta5_with):05108                  clr   <$000E       Shut off all attributes
1784 17FAA6           (grfdrv_beta5_with):05109                  lbsr  L106D        Go put inversed char (under cursor) on screen
1787 35A0             (grfdrv_beta5_with):05110                  puls  pc,y         Restore window tbl ptr & return
                      (grfdrv_beta5_with):05111         
                      (grfdrv_beta5_with):05112         * Flip fore/background color masks for hardware text attribute byte
                      (grfdrv_beta5_with):05113         * Entry:A=attribute byte for h/ware text screen
                      (grfdrv_beta5_with):05114         * Exit: A=Reversed color masks
1789 5F               (grfdrv_beta5_with):05115         L15B2    clrb               no attributes here yet
178A 843F             (grfdrv_beta5_with):05116                  anda  #%00111111   Mask out blinking, underline bits
                      (grfdrv_beta5_with):05117                IFNE  H6309
                      (grfdrv_beta5_with):05118                  lsrd               one byte smaller than old method
                      (grfdrv_beta5_with):05119                  lsrd               move foreground in A to background in A,
                      (grfdrv_beta5_with):05120                  lsrd               background in A to 3 high bits of B
                      (grfdrv_beta5_with):05121                ELSE
178C 44               (grfdrv_beta5_with):05122                  lsra
178D 56               (grfdrv_beta5_with):05123                  rorb
178E 44               (grfdrv_beta5_with):05124                  lsra
178F 56               (grfdrv_beta5_with):05125                  rorb
1790 44               (grfdrv_beta5_with):05126                  lsra
1791 56               (grfdrv_beta5_with):05127                  rorb
                      (grfdrv_beta5_with):05128                ENDC
1792 54               (grfdrv_beta5_with):05129                  lsrb               shift background in B 2 bits: blink & underline
1793 54               (grfdrv_beta5_with):05130                  lsrb               now background in A is in foreground in B
                      (grfdrv_beta5_with):05131                IFNE  H6309
                      (grfdrv_beta5_with):05132                  orr   b,a          Merge two masks together in A
                      (grfdrv_beta5_with):05133                ELSE
1794 D7BF             (grfdrv_beta5_with):05134                  stb   <grScrtch
1796 9ABF             (grfdrv_beta5_with):05135                  ora   <grScrtch
                      (grfdrv_beta5_with):05136                ENDC
1798 39               (grfdrv_beta5_with):05137                  rts   
                      (grfdrv_beta5_with):05138         
                      (grfdrv_beta5_with):05139         * Update Gfx Cursor - UPDATE Window 'hidden' call version - Put it on scrn
1799 3430             (grfdrv_beta5_with):05140         L15BF    pshs  y,x          Preserve window & screen tbl ptrs
179B AE30             (grfdrv_beta5_with):05141                  ldx   Wt.STbl,y    Get scrn tbl ptr from window tbl
179D 9C30             (grfdrv_beta5_with):05142                  cmpx  <$0030       Same as current screen?
179F 2618             (grfdrv_beta5_with):05143                  bne   L15E0        No, leave
17A1 D63A             (grfdrv_beta5_with):05144                  ldb   <$003A       Get Gfx cursor XOR'd on/off flag
17A3 2614             (grfdrv_beta5_with):05145                  bne   L15E0        It's already on screen, exit
17A5 E6A818           (grfdrv_beta5_with):05146                  ldb   Wt.GBlk,y    Get memory block # of gfx cursor
17A8 D744             (grfdrv_beta5_with):05147                  stb   <$0044       Save in Grfdrv mem
17AA 270D             (grfdrv_beta5_with):05148                  beq   L15E0        If there is no Gfx cursor defined, exit
17AC 8D5D             (grfdrv_beta5_with):05149                  bsr   L017C        Map in Gfx cursor GP buffer block
17AE 10AEA819         (grfdrv_beta5_with):05150                  ldy   Wt.GOff,y    Get ptr to actual shape in block
17B2 109F45           (grfdrv_beta5_with):05151                  sty   <$0045       Save it in Grfdrv mem
17B5 8D1F             (grfdrv_beta5_with):05152                  bsr   L15FE        XOR mouse cursor onto screen (put it on)
17B7 0C3A             (grfdrv_beta5_with):05153                  inc   <$003A       Set Gfx cursor XOR flag to 'ON'
17B9 35B0             (grfdrv_beta5_with):05154         L15E0    puls  pc,y,x       Restore regs & return
                      (grfdrv_beta5_with):05155         
                      (grfdrv_beta5_with):05156         * Update Gfx cursor - from within GRFDRV - Take old one off scrn
17BB 3430             (grfdrv_beta5_with):05157         L15E2    pshs  y,x
17BD AE30             (grfdrv_beta5_with):05158                  ldx   Wt.STbl,y
17BF 9C30             (grfdrv_beta5_with):05159                  cmpx  <$0030
17C1 2611             (grfdrv_beta5_with):05160                  bne   L15FC
17C3 D63A             (grfdrv_beta5_with):05161                  ldb   <$003A       is the Gfx cursor on the screen?
17C5 270D             (grfdrv_beta5_with):05162                  beq   L15FC        no, exit.
17C7 D644             (grfdrv_beta5_with):05163                  ldb   <$0044       grab gfx cursor GP buffer number
17C9 27EE             (grfdrv_beta5_with):05164                  beq   L15E0        if none, exit
17CB 8D3E             (grfdrv_beta5_with):05165                  bsr   L017C        map in get/put buffer
17CD 109E45           (grfdrv_beta5_with):05166                  ldy   <$0045       grab pointer to cursor in block
17D0 8D04             (grfdrv_beta5_with):05167                  bsr   L15FE        XOR mouse cursor onto screen (take off old one)
17D2 0F3A             (grfdrv_beta5_with):05168                  clr   <$003A       Set Gfx cursor XOR flag to 'OFF'
17D4 35B0             (grfdrv_beta5_with):05169         L15FC    puls  pc,y,x
                      (grfdrv_beta5_with):05170         
                      (grfdrv_beta5_with):05171         * XOR mouse cursor onto screen
17D6 D660             (grfdrv_beta5_with):05172         L15FE    ldb   <$0060       Get screen type
17D8 2B30             (grfdrv_beta5_with):05173                  bmi   L1634        Text; exit
17DA DC4F             (grfdrv_beta5_with):05174                  ldd   <$004F       Get original X & Y sizes
17DC 9E51             (grfdrv_beta5_with):05175                  ldx   <$0051
17DE 3416             (grfdrv_beta5_with):05176                  pshs  x,d          Save them
17E0 DC64             (grfdrv_beta5_with):05177                  ldd   <$0064       Get original Pset & Lset vectors
17E2 9E68             (grfdrv_beta5_with):05178                  ldx   <$0068
17E4 3416             (grfdrv_beta5_with):05179                  pshs  x,d          Save them
17E6 DC41             (grfdrv_beta5_with):05180                  ldd   <$0041       Get screen address of Gfx cursor
17E8 DD72             (grfdrv_beta5_with):05181                  std   <$0072       Save as GP buffer start position
17EA D643             (grfdrv_beta5_with):05182                  ldb   <$0043       Get pixel mask for start of Gfx cursor
17EC D774             (grfdrv_beta5_with):05183                  stb   <$0074       Save as GP buffer pixel mask start
17EE 8E6282           (grfdrv_beta5_with):05184                  ldx   #GrfStrt+L1F9E Force PSET to 'off'
17F1 9F64             (grfdrv_beta5_with):05185                  stx   <$0064
17F3 8E5836           (grfdrv_beta5_with):05186                  ldx   #GrfStrt+L1FA3 For LSET to XOR
17F6 9F68             (grfdrv_beta5_with):05187                  stx   <$0068
17F8 17F636           (grfdrv_beta5_with):05188                  lbsr  L0E14        set up for different STY in buffer/screen
17FB 17F6C0           (grfdrv_beta5_with):05189                  lbsr  L0E97        go put the cursor on-screen
17FE 3516             (grfdrv_beta5_with):05190                  puls  x,d          Restore original vectors
1800 DD64             (grfdrv_beta5_with):05191                  std   <$0064
1802 9F68             (grfdrv_beta5_with):05192                  stx   <$0068
1804 3516             (grfdrv_beta5_with):05193                  puls  x,d          Restore original X/Y sizes
1806 DD4F             (grfdrv_beta5_with):05194                  std   <$004F
1808 9F51             (grfdrv_beta5_with):05195                  stx   <$0051
180A 39               (grfdrv_beta5_with):05196         L1634    rts                return
                      (grfdrv_beta5_with):05197         
                      (grfdrv_beta5_with):05198         * Bring in Get/Put buffer memory bank - put into GRFDRV DAT Img @ <$87
                      (grfdrv_beta5_with):05199         * Entry: B=MMU block # to get
180B 0F89             (grfdrv_beta5_with):05200         L017C    clr   <$89         Make sure System Global is first
180D D78A             (grfdrv_beta5_with):05201                  stb   <$8A         Save Block number of Get/Put buffer
180F F7FFA9           (grfdrv_beta5_with):05202                  stb   >$FFA9       Save it to MMU as well
1812 39               (grfdrv_beta5_with):05203                  rts                Return
                      (grfdrv_beta5_with):05204         
                      (grfdrv_beta5_with):05205         * LSet entry point
1813 8E5832           (grfdrv_beta5_with):05206         L06A4    ldx   #GrfStrt+L06BC  Point to LSET vector table
1816 E62A             (grfdrv_beta5_with):05207                  ldb   Wt.LSet,y    Get LSet type
1818 C103             (grfdrv_beta5_with):05208                  cmpb  #$03         If higher than 3, error
181A 2209             (grfdrv_beta5_with):05209                  bhi   L06B7
181C E685             (grfdrv_beta5_with):05210                  ldb   b,x          Get vector offset
181E 3A               (grfdrv_beta5_with):05211                  abx                Calculate vector
181F AFA814           (grfdrv_beta5_with):05212                  stx   Wt.LVec,y    Save LSet table vector
1822 7E50A4           (grfdrv_beta5_with):05213                  jmp   >GrfStrt+L0F78 Return to system without error
                      (grfdrv_beta5_with):05214         
1825 53               (grfdrv_beta5_with):05215         L06B7    comb               Return to system with Illegal argument error
1826 C6BB             (grfdrv_beta5_with):05216                  ldb   #E$IllArg
1828 7E50A5           (grfdrv_beta5_with):05217                  jmp   >GrfStrt+SysRet
                      (grfdrv_beta5_with):05218         
                      (grfdrv_beta5_with):05219         * Retain "magic" spacing
                      (grfdrv_beta5_with):05220                IFEQ  H6309
     182B             (grfdrv_beta5_with):05221         L1FA3b   equ   *
182B 97BF             (grfdrv_beta5_with):05222                  sta   <grScrtch
182D DABF             (grfdrv_beta5_with):05223                  orb   <grScrtch
182F E784             (grfdrv_beta5_with):05224                  stb   ,x
1831 39               (grfdrv_beta5_with):05225                  rts
                      (grfdrv_beta5_with):05226         
                      (grfdrv_beta5_with):05227         * 6809 - since we already had to "break out" of magic spacing, just put the
                      (grfdrv_beta5_with):05228         * stb ,x / rts here, and leave the "duplicate" version @ L1FA3C, even though
                      (grfdrv_beta5_with):05229         * it won't be used. (or use those 3 bytes for a constant or something to be
                      (grfdrv_beta5_with):05230         * used from elsewhere)
                      (grfdrv_beta5_with):05231                ENDC 
                      (grfdrv_beta5_with):05232         
                      (grfdrv_beta5_with):05233         * LSet vector table
1832 0B               (grfdrv_beta5_with):05234         L06BC    fcb   L1FA9-L06BC    Normal vector
1833 09               (grfdrv_beta5_with):05235                  fcb   L1FA7-L06BC    AND logical vector
1834 14               (grfdrv_beta5_with):05236                  fcb   L1FAE-L06BC    OR logical vector
1835 04               (grfdrv_beta5_with):05237                  fcb   L1FA3-L06BC    XOR logical vector
                      (grfdrv_beta5_with):05238         * LSET routines here: affecting how pixels go on screen
                      (grfdrv_beta5_with):05239         * The proper vector is stored in the window table @ <$14,y
                      (grfdrv_beta5_with):05240         * Entry: X=address of pixel to change
                      (grfdrv_beta5_with):05241         *        B=Bit mask of specific pixel to change (1, 2 or 4 bits)
                      (grfdrv_beta5_with):05242         *        A=Bits to actually set (color palette #)
                      (grfdrv_beta5_with):05243         *        A&B are also both preserved on the stack by the calling routine
                      (grfdrv_beta5_with):05244         * XOR
1836 A884             (grfdrv_beta5_with):05245         L1FA3    eora  ,x             EOR new bits onto what is on screen
1838 A784             (grfdrv_beta5_with):05246                  sta   ,x             and save onto screen
183A 39               (grfdrv_beta5_with):05247                  rts                  5 bytes
                      (grfdrv_beta5_with):05248         * AND
183B A484             (grfdrv_beta5_with):05249         L1FA7    anda  ,x             AND new color onto what is on screen
                      (grfdrv_beta5_with):05250         * Normal
183D 53               (grfdrv_beta5_with):05251         L1FA9    comb                 Make 'hole' for transparent putting
183E E484             (grfdrv_beta5_with):05252                  andb  ,x             Create mask of bits already on screen
                      (grfdrv_beta5_with):05253                IFNE  H6309
                      (grfdrv_beta5_with):05254                  orr   a,b            Merge color & bit mask
                      (grfdrv_beta5_with):05255                ELSE
1840 20E9             (grfdrv_beta5_with):05256                  bra   L1FA3b
1842 12               (grfdrv_beta5_with):05257                  nop                  keep byte count the same
                      (grfdrv_beta5_with):05258                ENDC
1843 E784             (grfdrv_beta5_with):05259         L1FA3c   stb   ,x             Save new byte
1845 39               (grfdrv_beta5_with):05260                  rts
                      (grfdrv_beta5_with):05261         * OR
1846 AA84             (grfdrv_beta5_with):05262         L1FAE    ora   ,x             Merge new color onto screen
1848 A784             (grfdrv_beta5_with):05263                  sta   ,x             and store them
184A 39               (grfdrv_beta5_with):05264         L1FB2    rts                  return
                      (grfdrv_beta5_with):05265         
                      (grfdrv_beta5_with):05266         * do a word of pixels at one time
                      (grfdrv_beta5_with):05267         * This is an ALAN DEKOK MAGIC ROUTINE! Do NOT CHANGE ANYTHING
                      (grfdrv_beta5_with):05268         * Likewise, do NOT change any offsets at the normal pixel routines at
                      (grfdrv_beta5_with):05269         * L1FA3 and following!
                      (grfdrv_beta5_with):05270         * NOTE: For 6809, some of these routines, when they exit the "magic area" because the
                      (grfdrv_beta5_with):05271         * code is longer, can stay out and finish without branching back in. The extra bytes
                      (grfdrv_beta5_with):05272         * can be padded, or used for constants. LCB
     184B             (grfdrv_beta5_with):05273         Pix.XOR  equ   *
                      (grfdrv_beta5_with):05274                IFNE  H6309
                      (grfdrv_beta5_with):05275                  eord  ,x          offset 0
                      (grfdrv_beta5_with):05276                ELSE
184B 2016             (grfdrv_beta5_with):05277                  bra  PEOR         keep byte count same
184D 12               (grfdrv_beta5_with):05278                  nop
                      (grfdrv_beta5_with):05279                ENDC
184E ED81             (grfdrv_beta5_with):05280         PXOR2    std   ,x++
1850 39               (grfdrv_beta5_with):05281                  rts
                      (grfdrv_beta5_with):05282         
     1851             (grfdrv_beta5_with):05283         Pix.AND  equ   *
                      (grfdrv_beta5_with):05284                IFNE  H6309
                      (grfdrv_beta5_with):05285                  andd  ,x           offset 6
                      (grfdrv_beta5_with):05286                ELSE
1851 2016             (grfdrv_beta5_with):05287                  bra  PAND
1853 12               (grfdrv_beta5_with):05288                  nop
                      (grfdrv_beta5_with):05289                ENDC
1854 ED81             (grfdrv_beta5_with):05290         PAND2    std   ,x++
1856 39               (grfdrv_beta5_with):05291                  rts
                      (grfdrv_beta5_with):05292         
1857 414C414E44       (grfdrv_beta5_with):05293                  fcc   /ALAND/      space fillers 
                      (grfdrv_beta5_with):05294         
     185C             (grfdrv_beta5_with):05295         Pix.OR   equ   *
                      (grfdrv_beta5_with):05296                IFNE  H6309
                      (grfdrv_beta5_with):05297                  ord   ,x           offset 17
                      (grfdrv_beta5_with):05298                ELSE
185C AA84             (grfdrv_beta5_with):05299                  ora   ,x
185E EA01             (grfdrv_beta5_with):05300                  orb   1,x
                      (grfdrv_beta5_with):05301                ENDC
1860 ED81             (grfdrv_beta5_with):05302                  std   ,x++
1862 39               (grfdrv_beta5_with):05303                  rts
                      (grfdrv_beta5_with):05304         * End of ATD's magic routine!
                      (grfdrv_beta5_with):05305         
                      (grfdrv_beta5_with):05306                IFEQ  H6309
1863 A884             (grfdrv_beta5_with):05307         PEOR     eora  ,x
1865 E801             (grfdrv_beta5_with):05308                  eorb  1,x
1867 20E5             (grfdrv_beta5_with):05309                  bra   PXOR2
                      (grfdrv_beta5_with):05310         
1869 A484             (grfdrv_beta5_with):05311         PAND     anda  ,x
186B E401             (grfdrv_beta5_with):05312                  andb  1,x
186D 20E5             (grfdrv_beta5_with):05313                  bra   PAND2
                      (grfdrv_beta5_with):05314                ENDC
                      (grfdrv_beta5_with):05315         
                      (grfdrv_beta5_with):05316         * Point entry point
186F 8D18             (grfdrv_beta5_with):05317         L1635    bsr   I.point      map screen and PSET block in, scale coordinates
1871 2541             (grfdrv_beta5_with):05318                  bcs   L1688          Error scaling, exit with it
1873 17FAE0           (grfdrv_beta5_with):05319                  lbsr  L1E9D          Get:X=ptr to byte on screen,B=bit mask for pixel
1876 9661             (grfdrv_beta5_with):05320                  lda   <$0061         Get foreground color
                      (grfdrv_beta5_with):05321                IFNE  H6309
                      (grfdrv_beta5_with):05322                  ldw   <$68           Get LSET vector
                      (grfdrv_beta5_with):05323                ELSE
1878 9FBF             (grfdrv_beta5_with):05324                  stx   <grScrtch
187A 9E68             (grfdrv_beta5_with):05325                  ldx   <$68
187C 9FB5             (grfdrv_beta5_with):05326                  stx   <$B5
187E 9EBF             (grfdrv_beta5_with):05327                  ldx   <grScrtch
                      (grfdrv_beta5_with):05328                ENDC
1880 ADC4             (grfdrv_beta5_with):05329                  jsr   ,u             Put pixel on screen
1882 202F             (grfdrv_beta5_with):05330                  bra   L1687          Exit without error
                      (grfdrv_beta5_with):05331         
                      (grfdrv_beta5_with):05332         * Line entry point
                      (grfdrv_beta5_with):05333         * ATD: Line/bar/box set up screen: saves ~40 bytes, adds 6 clock cycles
1884 170922           (grfdrv_beta5_with):05334         I.Line   lbsr  L1DFD          scale 2nd set of coordinates
1887 253B             (grfdrv_beta5_with):05335                  bcs   L16B0          error: exit to a convenient RTS
1889 1702C3           (grfdrv_beta5_with):05336         I.point  lbsr  L1884          map in window, and verify it's graphics
188C DE64             (grfdrv_beta5_with):05337                  ldu   <$64           get PSET vector for line/bar/box routines
188E 1608F6           (grfdrv_beta5_with):05338                  lbra  L1DF6          Scale 1st set of coords
                      (grfdrv_beta5_with):05339         
                      (grfdrv_beta5_with):05340         * Line entry point
1891 8DF1             (grfdrv_beta5_with):05341         L1654    bsr   I.Line         internal line set up routine
1893 251F             (grfdrv_beta5_with):05342                  bcs   L1688          Error; exit
                      (grfdrv_beta5_with):05343                IFNE  H6309
                      (grfdrv_beta5_with):05344                  ldw   <$68           Get LSET vector
                      (grfdrv_beta5_with):05345                ELSE
1895 DC68             (grfdrv_beta5_with):05346                  ldd   <$68
1897 DDB5             (grfdrv_beta5_with):05347                  std   <$B5
                      (grfdrv_beta5_with):05348                ENDC
1899 DC49             (grfdrv_beta5_with):05349                  ldd   <$0049         Get 'working' Y coordinate
189B 10934D           (grfdrv_beta5_with):05350                  cmpd  <$004D         Same as current Y coordinate?
189E 2604             (grfdrv_beta5_with):05351                  bne   L1679          No, check X
18A0 8D27             (grfdrv_beta5_with):05352                  bsr   L168B          Do 'fast' horizontal line
18A2 200F             (grfdrv_beta5_with):05353                  bra   L1687          Return to system without error
                      (grfdrv_beta5_with):05354         
18A4 DC47             (grfdrv_beta5_with):05355         L1679    ldd   <$0047         Get 'working' X coordinate
18A6 10934B           (grfdrv_beta5_with):05356                  cmpd  <$004B         Same as current X coordinate?
18A9 2605             (grfdrv_beta5_with):05357                  bne   L1684          No, use 'normal' line routine
18AB 1700FA           (grfdrv_beta5_with):05358                  lbsr  L16F4          Do 'fast' vertical line
18AE 2003             (grfdrv_beta5_with):05359                  bra   L1687          Return to system without error
                      (grfdrv_beta5_with):05360         
18B0 17014E           (grfdrv_beta5_with):05361         L1684    lbsr  L1724          Do 'normal' line routine
18B3 5F               (grfdrv_beta5_with):05362         L1687    clrb                 No error
18B4 7E50A5           (grfdrv_beta5_with):05363         L1688    jmp   >GrfStrt+SysRet Return to system
                      (grfdrv_beta5_with):05364         
                      (grfdrv_beta5_with):05365         * Swap start & end X coords if backwards ($47=Start, $4B=End)
18B7 DC4B             (grfdrv_beta5_with):05366         L16A3    ldd   <$004B         Get end X coord
18B9 109347           (grfdrv_beta5_with):05367                  cmpd  <$0047         Compare with start X coord
18BC 2C06             (grfdrv_beta5_with):05368                  bge   L16B0          Proper order, leave
18BE 9E47             (grfdrv_beta5_with):05369         L16AA    ldx   <$0047         Swap the 2 X coord's around
18C0 DD47             (grfdrv_beta5_with):05370                  std   <$0047
18C2 9F4B             (grfdrv_beta5_with):05371                  stx   <$004B
18C4 39               (grfdrv_beta5_with):05372         L16B0    rts   
                      (grfdrv_beta5_with):05373         
                      (grfdrv_beta5_with):05374         * # of pixels/byte table
18C5 08               (grfdrv_beta5_with):05375         L16B1    fcb   $08            640x200x2 color
18C6 04               (grfdrv_beta5_with):05376                  fcb   $04            320x200x4 color
18C7 04               (grfdrv_beta5_with):05377                  fcb   $04            640x200x4 color
18C8 02               (grfdrv_beta5_with):05378                  fcb   $02            320x200x16 color
                      (grfdrv_beta5_with):05379         
                      (grfdrv_beta5_with):05380         * Fast horizontal line routine
18C9 8DEC             (grfdrv_beta5_with):05381         L168B    bsr   L16A3          Make sure X coords in right order
18CB 170968           (grfdrv_beta5_with):05382         L168D    lbsr  L1EF1          <$79=Start of byte pixel mask, <$77=Shift vector
                      (grfdrv_beta5_with):05383         * Entry point from FFILL
18CE DC4B             (grfdrv_beta5_with):05384         L1690    ldd   <$004B         Get end X coord of line
18D0 9347             (grfdrv_beta5_with):05385                  subd  <$0047         # pixels wide line is
                      (grfdrv_beta5_with):05386                IFNE  H6309
                      (grfdrv_beta5_with):05387                  incd                 +1 (base 1)
                      (grfdrv_beta5_with):05388                ELSE
18D2 C30001           (grfdrv_beta5_with):05389                  addd  #1
                      (grfdrv_beta5_with):05390                ENDC
18D5 DD99             (grfdrv_beta5_with):05391                  std   <$0099         Save # of pixels left
18D7 17FA7C           (grfdrv_beta5_with):05392                  lbsr  L1E9D          X=Mem ptr to 1st pixel, B=Mask for start pixel
18DA 9661             (grfdrv_beta5_with):05393                  lda   <$0061         Get foreground color mask (full byte)
18DC 109E99           (grfdrv_beta5_with):05394                  ldy   <$0099         Get # pixels to do
                      (grfdrv_beta5_with):05395         
                      (grfdrv_beta5_with):05396         * "Fast" horizontal line draw
                      (grfdrv_beta5_with):05397         * Entry: Y = # pixels left
                      (grfdrv_beta5_with):05398         *        A = Color bit mask
                      (grfdrv_beta5_with):05399         *        X = Screen address
                      (grfdrv_beta5_with):05400         *        B = mask for first pixel
                      (grfdrv_beta5_with):05401         *        W = address of LSET routine
                      (grfdrv_beta5_with):05402         *        U = address of PSET routine
18DF 3476             (grfdrv_beta5_with):05403         L16B5    pshs  u,y,x,d        Preserve X & D, and reserve 4 bytes on stack
18E1 A766             (grfdrv_beta5_with):05404                  sta   6,s            Save Full byte color mask
18E3 8E58C4           (grfdrv_beta5_with):05405                  ldx   #GrfStrt+L16B1-1  Point to # pixels/byte table
18E6 D660             (grfdrv_beta5_with):05406                  ldb   <$0060         Get screen type
18E8 4F               (grfdrv_beta5_with):05407                  clra                 Clear high byte
18E9 E685             (grfdrv_beta5_with):05408                  ldb   b,x            Get # pixels/byte for screen type
18EB ED64             (grfdrv_beta5_with):05409                  std   4,s            Save overtop original Y on stack
18ED 3516             (grfdrv_beta5_with):05410                  puls  x,d            Restore Screen ptr & Color/pixel masks
18EF 5D               (grfdrv_beta5_with):05411                  tstb                 is the pixel mask at the high bit of the byte?
18F0 2B14             (grfdrv_beta5_with):05412                  bmi   L16D5          yes, start off with a check for TFM
18F2 8C               (grfdrv_beta5_with):05413                  fcb   $8C            skip 2 bytes: same cycle time, 1 byte shorter
                      (grfdrv_beta5_with):05414         * Stack now has: 0,s = # pixels per byte (2,4 or 8, 16 bit # for Y compare)
                      (grfdrv_beta5_with):05415         *                2,s = Color mask
                      (grfdrv_beta5_with):05416         *                3,s = Garbage? (LSB of U)
                      (grfdrv_beta5_with):05417         *                Y   = # pixels left in line
                      (grfdrv_beta5_with):05418         * Put single pixels on the screen
18F3 D679             (grfdrv_beta5_with):05419         L16C7    ldb   <$0079         Get bit mask for 1st pixel in byte
18F5 DD97             (grfdrv_beta5_with):05420         L16C9    std   <$97           Save current color & bit masks
18F7 ADC4             (grfdrv_beta5_with):05421                  jsr   ,u             put pixel on the screen
18F9 313F             (grfdrv_beta5_with):05422                  leay  -1,y           Bump line pixel count down by 1
18FB 2602             (grfdrv_beta5_with):05423                  bne   L16C9.2        Still more, keep going
18FD 3596             (grfdrv_beta5_with):05424                  puls  pc,x,d         done, restore regs & return when done
                      (grfdrv_beta5_with):05425         
18FF DC97             (grfdrv_beta5_with):05426         L16C9.2  ldd   <$97           Get color & bit masks back
                      (grfdrv_beta5_with):05427         * Set up bit pattern for next pixel, including changing byte position
1901 BD59D7           (grfdrv_beta5_with):05428                  jsr   >GrfStrt+L1F08  Set up for next pixel (scrn address & bit mask)
1904 2AEF             (grfdrv_beta5_with):05429                  bpl   L16C9          (1st bit would be set if next byte, keep going)
                      (grfdrv_beta5_with):05430         * If on last byte, Y<#pixels per byte, so will use above loop
                      (grfdrv_beta5_with):05431         * If not on last byte, Y>#pixels per byte, so can 'cheat' & do 1 byte at a
                      (grfdrv_beta5_with):05432         * time below
1906 10ACE4           (grfdrv_beta5_with):05433         L16D5    cmpy  ,s             Done pixel count for current byte (or last byte)
1909 25E8             (grfdrv_beta5_with):05434                  blo   L16C7          No, keep going
                      (grfdrv_beta5_with):05435         * Draw remainder of line 1 full byte (2,4 or 8 pixels) at a time
                      (grfdrv_beta5_with):05436         * ATD: GrfStrt+L1FA9 is the normal PUT (no fancy stuff) routine
     190B             (grfdrv_beta5_with):05437         L16D7    equ   *
                      (grfdrv_beta5_with):05438         *tfr   y,d            get number of pixels left into D
                      (grfdrv_beta5_with):05439                IFNE  H6309
                      (grfdrv_beta5_with):05440                  tfr   y,d            get number of pixels left into D
                      (grfdrv_beta5_with):05441                  divd  1,s            divide it by the number of pixels in 1 byte
                      (grfdrv_beta5_with):05442                  pshs  a              save remainder for later
                      (grfdrv_beta5_with):05443                  clr   ,-s            and make remainder on-stack 16-bit
                      (grfdrv_beta5_with):05444                  pshs  b              Save # of bytes to do
                      (grfdrv_beta5_with):05445                ELSE
                      (grfdrv_beta5_with):05446         *For remainder (do first, since it needs to be on stack first anyways):
                      (grfdrv_beta5_with):05447         *Entry: D=# to divide into
                      (grfdrv_beta5_with):05448         *       1,s = # to divide by (2,4,8)
190B E661             (grfdrv_beta5_with):05449                  ldb    1,s            Get # pixels per byte for current screen mode
190D C001             (grfdrv_beta5_with):05450                  subb   #1             Make it *001, *011 or *111
190F D7BF             (grfdrv_beta5_with):05451                  stb    <grScrtch      Save bit shift counter
1911 1F20             (grfdrv_beta5_with):05452                  tfr    y,d            Move # of pixels left to D
1913 D4BF             (grfdrv_beta5_with):05453                  andb   <grScrtch      Mask for just remainder
1915 4F               (grfdrv_beta5_with):05454                  clra                  Make 16 bit
1916 3406             (grfdrv_beta5_with):05455                  pshs   d              Save leftover pixel count on stack
1918 1F20             (grfdrv_beta5_with):05456                  tfr    y,d            # of pixels total again
191A 44               (grfdrv_beta5_with):05457         ShftLp   lsra                  Divide by 2
191B 56               (grfdrv_beta5_with):05458                  rorb
191C 04BF             (grfdrv_beta5_with):05459                  lsr    <grScrtch      Shift # of shifts counter
191E 26FA             (grfdrv_beta5_with):05460                  bne    ShftLp         Do 1-3 times depending on mode
1920 3404             (grfdrv_beta5_with):05461                  pshs   b              Save # of full bytes to do
                      (grfdrv_beta5_with):05462                ENDC
                      (grfdrv_beta5_with):05463         * now we have: 
                      (grfdrv_beta5_with):05464         * B   = number of bytes to do a full byte at a time
                      (grfdrv_beta5_with):05465         * 0,S = number of bytes to do a full byte at a time
                      (grfdrv_beta5_with):05466         * 1,s = remainder of pixels in last byte to do
                      (grfdrv_beta5_with):05467         * 3,s = pixels per byte
                      (grfdrv_beta5_with):05468         * 5,s = color mask
1922 8682             (grfdrv_beta5_with):05469                  lda   #(GrfStrt+L1F9E)&$00FF  point to NO pset vector
1924 9165             (grfdrv_beta5_with):05470                  cmpa  <$64+1       is it just a normal color routine?
1926 2668             (grfdrv_beta5_with):05471                  bne   L16E2        no, it's a PSET, so go do it especially
                      (grfdrv_beta5_with):05472                IFNE  H6309
                      (grfdrv_beta5_with):05473                  cmpw  #GrfStrt+L1FA9  is it the normal LSet routine?
                      (grfdrv_beta5_with):05474                ELSE
1928 3410             (grfdrv_beta5_with):05475                  pshs  x
192A 9EB5             (grfdrv_beta5_with):05476                  ldx   <$B5
192C 8C583D           (grfdrv_beta5_with):05477                  cmpx  #GrfStrt+L1FA9  Is it the normal LSet routine?
192F 3510             (grfdrv_beta5_with):05478                  puls  x
                      (grfdrv_beta5_with):05479                ENDC
1931 262A             (grfdrv_beta5_with):05480                  bne   L16E0        no, go use old method
1933 4F               (grfdrv_beta5_with):05481                  clra
                      (grfdrv_beta5_with):05482                IFNE  H6309
                      (grfdrv_beta5_with):05483                  tfr   d,w          into TFM counter register
                      (grfdrv_beta5_with):05484                ENDC
1934 3165             (grfdrv_beta5_with):05485                  leay  5,s          point to full byte color mask
                      (grfdrv_beta5_with):05486                IFNE  H6309
                      (grfdrv_beta5_with):05487                  tfm   y,x+         move everything else a byte at a time
                      (grfdrv_beta5_with):05488         * LDW MUST go before the call to L16F2!
                      (grfdrv_beta5_with):05489                  ldw   #GrfStrt+L1FA9  and restore vector to normal LSet routine
                      (grfdrv_beta5_with):05490                ELSE
1936 3476             (grfdrv_beta5_with):05491                  pshs  d,x,y,u      Save full byte size, X,Y, start ptr of full byte write
1938 3384             (grfdrv_beta5_with):05492                  leau  ,x           Point U to start of full byte part of line (WORKS)
193A AEE4             (grfdrv_beta5_with):05493                  ldx   ,s           Get # of full bytes to clear back
                      (grfdrv_beta5_with):05494         * at this point:
                      (grfdrv_beta5_with):05495         * U=ptr to start of full byte part of line
                      (grfdrv_beta5_with):05496         * X=# of bytes to clear
193C E6A4             (grfdrv_beta5_with):05497                  ldb   ,y           Get byte value to clear with
193E 17FC4B           (grfdrv_beta5_with):05498                  lbsr  StkBlClr     Clear it
1941 CC583D           (grfdrv_beta5_with):05499                  ldd   #GrfStrt+L1FA9  Reset the 'W' vector to normal LSet routine
1944 DDB5             (grfdrv_beta5_with):05500                  std   <$B5
1946 3516             (grfdrv_beta5_with):05501                  puls  d,x          (9) Get size & start ptr
1948 3A               (grfdrv_beta5_with):05502                  abx                (3) Point to end of part we clear (we know B<=160)
1949 3560             (grfdrv_beta5_with):05503                  puls  y,u          (9) Restore Y and U
                      (grfdrv_beta5_with):05504                ENDC
194B 3504             (grfdrv_beta5_with):05505         L16DE    puls  b            restore number of full bytes to do
194D A663             (grfdrv_beta5_with):05506                  lda   3,s          get number of pixels per byte
194F 3D               (grfdrv_beta5_with):05507                  mul                get number of pixels done
1950 D347             (grfdrv_beta5_with):05508                  addd  <$47         add to current X coordinate
1952 DD47             (grfdrv_beta5_with):05509                  std   <$47         and save as current X coordinate
1954 10AEE1           (grfdrv_beta5_with):05510         L16DF    ldy   ,s++         restore 16-bit remainder of pixels: GET CC.Z bit
1957 274D             (grfdrv_beta5_with):05511                  beq   L16F2        exit quickly if done all of the bytes
1959 A662             (grfdrv_beta5_with):05512                  lda   2,s          get pixel mask
195B 2096             (grfdrv_beta5_with):05513                  bra   L16C7        and do the last few pixels of the line
                      (grfdrv_beta5_with):05514         
195D 54               (grfdrv_beta5_with):05515         L16E0    lsrb               divide by 2
195E 2730             (grfdrv_beta5_with):05516                  beq   L16E2        only 1 pixel to do, go do it.
                      (grfdrv_beta5_with):05517         * here we have 2 or more pixels to do full-byte, so we go to a method
                      (grfdrv_beta5_with):05518         * using D: much magic here!
                      (grfdrv_beta5_with):05519         * W = pointer to LSET routine
                      (grfdrv_beta5_with):05520         * U = pointer to routine that does ANDR B,A  JMP ,W
                      (grfdrv_beta5_with):05521                IFNE  H6309
                      (grfdrv_beta5_with):05522                  subw  #GrfStrt+L1FA3  point to start of LSET routines
                      (grfdrv_beta5_with):05523                ELSE
1960 3406             (grfdrv_beta5_with):05524                  pshs  d
1962 DCB5             (grfdrv_beta5_with):05525                  ldd   <$B5
1964 835836           (grfdrv_beta5_with):05526                  subd  #GrfStrt+L1FA3
1967 DDB5             (grfdrv_beta5_with):05527                  std   <$B5
1969 3506             (grfdrv_beta5_with):05528                  puls  d
                      (grfdrv_beta5_with):05529                ENDC
196B 2702             (grfdrv_beta5_with):05530                  beq   pix.do       skip fancy stuff for XOR
                      (grfdrv_beta5_with):05531                IFNE  H6309
                      (grfdrv_beta5_with):05532                  incf               go up by one byte
                      (grfdrv_beta5_with):05533                ELSE
196D 0CB6             (grfdrv_beta5_with):05534                  inc   <$B6
                      (grfdrv_beta5_with):05535                ENDC
196F CE584B           (grfdrv_beta5_with):05536         pix.do   ldu   #GrfStrt+Pix.XOR  point to double-byte pixel routines
                      (grfdrv_beta5_with):05537                IFNE  H6309
                      (grfdrv_beta5_with):05538                  leau  f,u          point U to the appropriate routine
                      (grfdrv_beta5_with):05539                  tfr   b,f          move counter to a register
                      (grfdrv_beta5_with):05540                ELSE
1972 96B6             (grfdrv_beta5_with):05541                  lda   <$B6
1974 33C6             (grfdrv_beta5_with):05542                  leau  a,u
1976 D7B6             (grfdrv_beta5_with):05543                  stb   <$B6
                      (grfdrv_beta5_with):05544                ENDC
1978 A665             (grfdrv_beta5_with):05545         pix.next lda   5,s          grab full-byte color mask
197A 1F89             (grfdrv_beta5_with):05546                  tfr   a,b          make D=color mask
197C ADC4             (grfdrv_beta5_with):05547                  jsr   ,u           call 2-byte routine
                      (grfdrv_beta5_with):05548                IFNE  H6309
                      (grfdrv_beta5_with):05549                  decf
                      (grfdrv_beta5_with):05550                ELSE
197E 0AB6             (grfdrv_beta5_with):05551                  dec   <$B6
                      (grfdrv_beta5_with):05552                ENDC
1980 26F6             (grfdrv_beta5_with):05553                  bne   pix.next
                      (grfdrv_beta5_with):05554                IFNE  H6309
                      (grfdrv_beta5_with):05555                  ldw   <$68         get LSET vector
                      (grfdrv_beta5_with):05556                ELSE
1982 DE68             (grfdrv_beta5_with):05557                  ldu   <$68
1984 DFB5             (grfdrv_beta5_with):05558                  stu   <$B5
                      (grfdrv_beta5_with):05559                ENDC
1986 DE64             (grfdrv_beta5_with):05560                  ldu   <$64         and PSET vector again
1988 E6E4             (grfdrv_beta5_with):05561                  ldb   ,s           get number of bytes left to do: do NOT do PULS!
198A C401             (grfdrv_beta5_with):05562                  andb  #1           check for odd-numbered bytes
198C 27BD             (grfdrv_beta5_with):05563                  beq   L16DE        if done all the bytes, exit: does a PULS B
198E E7E4             (grfdrv_beta5_with):05564                  stb   ,s           save the count of bytes to do: =1, and do one byte
                      (grfdrv_beta5_with):05565         * PSET+LSET full byte line draws come here
1990 C6FF             (grfdrv_beta5_with):05566         L16E2    ldb   #$FF         Full byte bit mask
1992 A665             (grfdrv_beta5_with):05567                  lda   5,s          Get color mask
1994 ADC4             (grfdrv_beta5_with):05568                  jsr   ,u           put the pixel on the screen
1996 3001             (grfdrv_beta5_with):05569                  leax  1,x          Bump screen ptr up by 1
1998 EC63             (grfdrv_beta5_with):05570                  ldd   3,s          get number of pixels per byte
199A D347             (grfdrv_beta5_with):05571                  addd  <$0047       Update 'working' X-cord to reflect pixels we did
199C DD47             (grfdrv_beta5_with):05572                  std   <$0047       Save result
199E 6AE4             (grfdrv_beta5_with):05573                  dec   ,s           decrement counter
19A0 26EE             (grfdrv_beta5_with):05574                  bne   L16E2        continue until done
19A2 3261             (grfdrv_beta5_with):05575                  leas  1,s          kill the counter off of the stack
19A4 20AE             (grfdrv_beta5_with):05576                  bra   L16DF        restore 16-bit pixel remainder, and do last byte
                      (grfdrv_beta5_with):05577         
19A6 3596             (grfdrv_beta5_with):05578         L16F2    puls  pc,x,d       Restore regs & return when done
                      (grfdrv_beta5_with):05579         
                      (grfdrv_beta5_with):05580         * Fast vertical line routine
19A8 8D1F             (grfdrv_beta5_with):05581         L16F4    bsr   L1716          Make sure Y coords in right order
19AA DC4D             (grfdrv_beta5_with):05582         L16F6    ldd   <$004D         Calculate height of line in pixels
19AC D04A             (grfdrv_beta5_with):05583                  subb  <$004A
19AE 5C               (grfdrv_beta5_with):05584                  incb                 Base 1
19AF DD99             (grfdrv_beta5_with):05585                  std   <$0099         Save height
19B1 17F9A2           (grfdrv_beta5_with):05586                  lbsr  L1E9D          Calculate screen address & pixel mask
19B4 9661             (grfdrv_beta5_with):05587                  lda   <$0061         Get color mask
19B6 DD97             (grfdrv_beta5_with):05588                  std   <$0097         Save color & pixel masks
19B8 109E99           (grfdrv_beta5_with):05589                  ldy   <$0099         Get Y pixel counter
19BB DC97             (grfdrv_beta5_with):05590         L1707    ldd   <$0097         Get color & pixel mask
19BD ADC4             (grfdrv_beta5_with):05591                  jsr   ,u             Put pixel on screen
19BF D663             (grfdrv_beta5_with):05592                  ldb   <$0063         Get # bytes to next line on screen
19C1 3A               (grfdrv_beta5_with):05593                  abx                  Point to it
19C2 0C4A             (grfdrv_beta5_with):05594                  inc   <$004A         Bump up working Y coord
19C4 313F             (grfdrv_beta5_with):05595                  leay  -1,y           Dec. Y counter
19C6 26F3             (grfdrv_beta5_with):05596                  bne   L1707          Do until done
19C8 39               (grfdrv_beta5_with):05597                  rts   
                      (grfdrv_beta5_with):05598         
                      (grfdrv_beta5_with):05599         * Swap Y coords so lower is first
19C9 DC4D             (grfdrv_beta5_with):05600         L1716    ldd   <$004D         Get current Y coord
19CB 109349           (grfdrv_beta5_with):05601                  cmpd  <$0049         Compare with destination Y coord
19CE 2C06             (grfdrv_beta5_with):05602                  bge   L1723          If higher or same, done
19D0 9E49             (grfdrv_beta5_with):05603         L171D    ldx   <$0049
19D2 DD49             (grfdrv_beta5_with):05604                  std   <$0049
19D4 9F4D             (grfdrv_beta5_with):05605                  stx   <$004D
19D6 39               (grfdrv_beta5_with):05606         L1723    rts   
                      (grfdrv_beta5_with):05607         
                      (grfdrv_beta5_with):05608         * Next pixel calcs - See if <$47 could not be done outside the loop by a
                      (grfdrv_beta5_with):05609         *  simple ADDD (if needed at all)
                      (grfdrv_beta5_with):05610         * If it is needed in loop for some, simply have the ones that don't need to
                      (grfdrv_beta5_with):05611         *  come in at L1F0E instead
                      (grfdrv_beta5_with):05612         * Called from Fast Horizontal Line L16C9, Normal Line L177D, Flood Fill L1CD4
                      (grfdrv_beta5_with):05613         * Entry: <$0047 = Working X coord
                      (grfdrv_beta5_with):05614         *   B=Bit mask for current pixel
                      (grfdrv_beta5_with):05615         *   X=Screen address
                      (grfdrv_beta5_with):05616         * Exit:
                      (grfdrv_beta5_with):05617         *   B=Bit mask for new pixel (high bit set if starting new byte)
                      (grfdrv_beta5_with):05618         *   X=New screen address (may not have changed)
                      (grfdrv_beta5_with):05619         * ATD: Could replace calls to L1F08 with jsr [>GrfMem+gr0077], and move 'lsrb's
                      (grfdrv_beta5_with):05620         * from L1F14 here, to the TOP of the routine.  That would convert a
                      (grfdrv_beta5_with):05621         * JSR >foo, JMP[>GrfMem+gr0077] to a jsr [>], saving 4 cycles, adding 2 bytes per call
                      (grfdrv_beta5_with):05622         * Also, the 'inc' does NOT affect the carry.
19D7 0C48             (grfdrv_beta5_with):05623         L1F08    inc   <$0048         Inc LSB of working X coord
19D9 2602             (grfdrv_beta5_with):05624                  bne   L1F0E          Didn't wrap, skip ahead
19DB 0C47             (grfdrv_beta5_with):05625                  inc   <$0047         Inc MSB of working X coord
19DD 54               (grfdrv_beta5_with):05626         L1F0E    lsrb                 Shift to next bit mask
19DE 2504             (grfdrv_beta5_with):05627                  bcs   L1F18          Finished byte, reload for next
19E0 6E9F1177         (grfdrv_beta5_with):05628                  jmp   [>GrfMem+gr0077]   Shift B more (if needed) depending on scrn type
                      (grfdrv_beta5_with):05629         
19E4 C601             (grfdrv_beta5_with):05630         L1F18    ldb   #1             Bump screen address by 1
19E6 3A               (grfdrv_beta5_with):05631                  abx
19E7 D679             (grfdrv_beta5_with):05632                  ldb   <$0079         Get start single pixel mask (1,2 or 4 bits set)
19E9 39               (grfdrv_beta5_with):05633                  rts   
                      (grfdrv_beta5_with):05634         
                      (grfdrv_beta5_with):05635         * Routine to move left for Normal Line L177D. Needed to get correct symmetry
19EA DDBF             (grfdrv_beta5_with):05636         LeftMV   std   <grScrtch      Save D
19EC DC47             (grfdrv_beta5_with):05637                  ldd   <$0047         Get X coord
19EE 830001           (grfdrv_beta5_with):05638                  subd  #1             Dec by 1
19F1 DD47             (grfdrv_beta5_with):05639                  std   <$0047         Save it back
19F3 DCBF             (grfdrv_beta5_with):05640                  ldd   <grScrtch      Restore D
19F5 58               (grfdrv_beta5_with):05641         Lmore    lslb
19F6 2504             (grfdrv_beta5_with):05642                  bcs   Lmore2
19F8 6E9F117A         (grfdrv_beta5_with):05643                  jmp   [>GrfMem+gr007A]
19FC 301F             (grfdrv_beta5_with):05644         Lmore2   leax  -1,x
19FE D67C             (grfdrv_beta5_with):05645                  ldb   <$007C
1A00 39               (grfdrv_beta5_with):05646                  rts
                      (grfdrv_beta5_with):05647         
                      (grfdrv_beta5_with):05648         * A dX or dY of 1 will step the line in the middle. The ends of the line
                      (grfdrv_beta5_with):05649         * are not swapped. The initial error is a function of dX or dY.
                      (grfdrv_beta5_with):05650         * A flag for left/right movement <$12 is used.
                      (grfdrv_beta5_with):05651         * Normal line routine
1A01 0F12             (grfdrv_beta5_with):05652         L1724    clr   <$0012       flag for X swap
1A03 DC4B             (grfdrv_beta5_with):05653                  ldd   <$004B       current X
1A05 9347             (grfdrv_beta5_with):05654                  subd  <$0047       new X
1A07 DD13             (grfdrv_beta5_with):05655                  std   <$0013       save dX
1A09 2A08             (grfdrv_beta5_with):05656                  bpl   L1734
1A0B 0312             (grfdrv_beta5_with):05657                  com   <$0012       flag left movement
                      (grfdrv_beta5_with):05658                IFNE  H6309
                      (grfdrv_beta5_with):05659                  negd               make change positive
                      (grfdrv_beta5_with):05660                ELSE
1A0D 40               (grfdrv_beta5_with):05661                  nega
1A0E 50               (grfdrv_beta5_with):05662                  negb
1A0F 8200             (grfdrv_beta5_with):05663                  sbca  #0
                      (grfdrv_beta5_with):05664                ENDC
1A11 DD13             (grfdrv_beta5_with):05665                  std   <$0013       force dX>0
1A13 D663             (grfdrv_beta5_with):05666         L1734    ldb   <$0063       BPL bytes/line
1A15 4F               (grfdrv_beta5_with):05667                  clra  
1A16 DD17             (grfdrv_beta5_with):05668                  std   <$0017       save 16-bit bytes per line
1A18 DC4D             (grfdrv_beta5_with):05669                  ldd   <$004D       current Y
1A1A 9349             (grfdrv_beta5_with):05670                  subd  <$0049       subtract working Y
1A1C DD15             (grfdrv_beta5_with):05671                  std   <$0015       save dY
1A1E 2A0E             (grfdrv_beta5_with):05672                  bpl   L1753        if positive
                      (grfdrv_beta5_with):05673                IFNE  H6309
                      (grfdrv_beta5_with):05674                  negd               make change positive
                      (grfdrv_beta5_with):05675                ELSE
1A20 40               (grfdrv_beta5_with):05676                  nega
1A21 50               (grfdrv_beta5_with):05677                  negb
1A22 8200             (grfdrv_beta5_with):05678                  sbca  #0
                      (grfdrv_beta5_with):05679                ENDC
1A24 DD15             (grfdrv_beta5_with):05680                  std   <$0015       force dY>0
1A26 DC17             (grfdrv_beta5_with):05681                  ldd   <$0017       up/down movement; up=+ down=-
                      (grfdrv_beta5_with):05682                IFNE  H6309
                      (grfdrv_beta5_with):05683                  negd
                      (grfdrv_beta5_with):05684                  ELSE
1A28 40               (grfdrv_beta5_with):05685                  nega
1A29 50               (grfdrv_beta5_with):05686                  negb
1A2A 8200             (grfdrv_beta5_with):05687                  sbca  #0
                      (grfdrv_beta5_with):05688                ENDC
1A2C DD17             (grfdrv_beta5_with):05689                  std   <$0017       now points the correct direction
1A2E DC13             (grfdrv_beta5_with):05690         L1753    ldd    <$0013      compare dX with dY to find larger
1A30 109315           (grfdrv_beta5_with):05691                  cmpd   <$0015
1A33 2504             (grfdrv_beta5_with):05692                  bcs    Ylarge
                      (grfdrv_beta5_with):05693                IFNE   H6309
                      (grfdrv_beta5_with):05694                  asrd               error = dX/2
                      (grfdrv_beta5_with):05695                  bra    Lvector
                      (grfdrv_beta5_with):05696         
1A35                  (grfdrv_beta5_with):05697         Ylarge   ldd    <$0015
                      (grfdrv_beta5_with):05698                  negd
                      (grfdrv_beta5_with):05699                  asrd               error = -dY/2
                      (grfdrv_beta5_with):05700                ELSE
1A35 47               (grfdrv_beta5_with):05701                  asra
1A36 56               (grfdrv_beta5_with):05702                  rorb
1A37 2008             (grfdrv_beta5_with):05703                  bra    Lvector
                      (grfdrv_beta5_with):05704                  
1A39 DC15             (grfdrv_beta5_with):05705         Ylarge   ldd    <$0015
1A3B 40               (grfdrv_beta5_with):05706                  nega
1A3C 50               (grfdrv_beta5_with):05707                  negb
1A3D 8200             (grfdrv_beta5_with):05708                  sbca   #0
1A3F 47               (grfdrv_beta5_with):05709                  asra
1A40 56               (grfdrv_beta5_with):05710                  rorb
                      (grfdrv_beta5_with):05711                ENDC
1A41 DD75             (grfdrv_beta5_with):05712         Lvector  std   <$0075       error term
1A43 1707F0           (grfdrv_beta5_with):05713                  lbsr  L1EF1        Set up <$77 right bit shift vector & <$79 pixel mask
                      (grfdrv_beta5_with):05714         * for symmetry
1A46 170579           (grfdrv_beta5_with):05715                  lbsr  L1F1D        Set up <$7A left bit shift vector & <$79 pixel mask
1A49 17F90A           (grfdrv_beta5_with):05716                  lbsr  L1E9D        Calculate screen addr into X & pixel mask into B
1A4C D774             (grfdrv_beta5_with):05717                  stb   <$0074       Save pixel mask
1A4E D674             (grfdrv_beta5_with):05718         L1760    ldb   <$0074       Get pixel mask
1A50 9661             (grfdrv_beta5_with):05719                  lda   <$0061       Get color mask
1A52 ADC4             (grfdrv_beta5_with):05720                  jsr   ,u
1A54 DC47             (grfdrv_beta5_with):05721         L1788    ldd   <$0047       finished with X movement?
1A56 10934B           (grfdrv_beta5_with):05722                  cmpd  <$004B
1A59 2608             (grfdrv_beta5_with):05723                  bne   L1788b
1A5B DC49             (grfdrv_beta5_with):05724                  ldd   <$0049       finished with Y movement?
1A5D 10934D           (grfdrv_beta5_with):05725                  cmpd  <$004D
1A60 2601             (grfdrv_beta5_with):05726                  bne   L1788b
1A62 39               (grfdrv_beta5_with):05727                  rts                finished fo leave
                      (grfdrv_beta5_with):05728         
1A63 DC75             (grfdrv_beta5_with):05729         L1788b   ldd   <$0075       get error
1A65 2A12             (grfdrv_beta5_with):05730                  bpl   L177D        if >=0
1A67 D313             (grfdrv_beta5_with):05731                  addd  <$0013       add in dX
1A69 DD75             (grfdrv_beta5_with):05732                  std   <$0075       save new working error
1A6B DC17             (grfdrv_beta5_with):05733                  ldd   <$0017       get BPL
                      (grfdrv_beta5_with):05734                IFNE  H6309
                      (grfdrv_beta5_with):05735                  addr  d,x
                      (grfdrv_beta5_with):05736                  bcs   L1779        test direction not result
                      (grfdrv_beta5_with):05737                ELSE
1A6D 308B             (grfdrv_beta5_with):05738                  leax  d,x          will not change regCC N
1A6F 2B04             (grfdrv_beta5_with):05739                  bmi   L1779
                      (grfdrv_beta5_with):05740                ENDC       
1A71 0C4A             (grfdrv_beta5_with):05741                  inc   <$004A       go down one Y-line
1A73 20D9             (grfdrv_beta5_with):05742                  bra   L1760
                      (grfdrv_beta5_with):05743         
1A75 0A4A             (grfdrv_beta5_with):05744         L1779    dec   <$004A       decrement y-count
1A77 20D5             (grfdrv_beta5_with):05745                  bra   L1760
                      (grfdrv_beta5_with):05746         
1A79 9315             (grfdrv_beta5_with):05747         L177D    subd  <$0015       take out one BPL
1A7B DD75             (grfdrv_beta5_with):05748                  std   <$0075       save new count
1A7D D674             (grfdrv_beta5_with):05749                  ldb   <$0074       grab pixel mask
1A7F 0D12             (grfdrv_beta5_with):05750                  tst   <$12         flag for left/right movement
1A81 2607             (grfdrv_beta5_with):05751                  bne   L177D2
1A83 17FF51           (grfdrv_beta5_with):05752                  lbsr   L1F08       go right one pixel
1A86 D774             (grfdrv_beta5_with):05753         L177D3   stb   <$0074       save new pixel mask
1A88 20C4             (grfdrv_beta5_with):05754                  bra   L1760        loop to draw it
                      (grfdrv_beta5_with):05755         
1A8A 17FF5D           (grfdrv_beta5_with):05756         L177D2   lbsr  LeftMV       go left one pixel
1A8D 20F7             (grfdrv_beta5_with):05757                  bra   L177D3
                      (grfdrv_beta5_with):05758                    
                      (grfdrv_beta5_with):05759         * Box entry point
                      (grfdrv_beta5_with):05760         * The optimizations here work because the special-purpose horizontal and
                      (grfdrv_beta5_with):05761         * vertical line routines only check start X,Y and end X OR Y, not BOTH of
                      (grfdrv_beta5_with):05762         * the end X,Y.  We can use this behaviour to leave in end X or Y coordinates
                      (grfdrv_beta5_with):05763         * that we want to use later.
                      (grfdrv_beta5_with):05764         * Possible problem: If the normal line routine is fixed to work properly,
                      (grfdrv_beta5_with):05765         * there won't be much need for the fast vertical line routine, and we'll have
                      (grfdrv_beta5_with):05766         * to fix up the X coordinates here.
1A8F 17FDF2           (grfdrv_beta5_with):05767         L1790    lbsr  I.Line       internal line/bar/box setup
1A92 2542             (grfdrv_beta5_with):05768                  bcs   L17F9        Error; exit
1A94 17FE20           (grfdrv_beta5_with):05769                  lbsr  L16A3        Make sure X coords in right order
1A97 17FF2F           (grfdrv_beta5_with):05770                  lbsr  L1716        Make sure Y coords in right order
1A9A 327C             (grfdrv_beta5_with):05771                  leas  -4,s         Make 4 byte buffer on stack
                      (grfdrv_beta5_with):05772                IFNE  H6309
                      (grfdrv_beta5_with):05773                  ldq   <$47         Copy upper left coords: SX,SY
                      (grfdrv_beta5_with):05774                  stq   ,s           save on the stack
                      (grfdrv_beta5_with):05775                ELSE
1A9C DC49             (grfdrv_beta5_with):05776                  ldd   <$49
1A9E ED62             (grfdrv_beta5_with):05777                  std   2,s
1AA0 DC47             (grfdrv_beta5_with):05778                  ldd   <$47
1AA2 EDE4             (grfdrv_beta5_with):05779                  std   ,s
                      (grfdrv_beta5_with):05780                ENDC
1AA4 3420             (grfdrv_beta5_with):05781                  pshs  y             Save window table ptr
                      (grfdrv_beta5_with):05782                IFNE  H6309
                      (grfdrv_beta5_with):05783                  ldw   <$68          Get LSET vector
                      (grfdrv_beta5_with):05784                ELSE
1AA6 9FBF             (grfdrv_beta5_with):05785                  stx   <grScrtch
1AA8 9E68             (grfdrv_beta5_with):05786                  ldx   <$68
1AAA 9FB5             (grfdrv_beta5_with):05787                  stx   <$B5
1AAC 9EBF             (grfdrv_beta5_with):05788                  ldx   <grScrtch
                      (grfdrv_beta5_with):05789                ENDC
                      (grfdrv_beta5_with):05790         * enters with SX,SY ; EX,EY
1AAE 17FE1A           (grfdrv_beta5_with):05791                  lbsr  L168D         Do fast horizontal line: 0,0 -> X,0
                      (grfdrv_beta5_with):05792         * leaves with $47-$4D = EX+1,SY ; EX,EY
1AB1 DC4B             (grfdrv_beta5_with):05793                  ldd   <$4B         grab EX+1 (incremented after line)
1AB3 DD47             (grfdrv_beta5_with):05794                  std   <$47         save proper EX
1AB5 10AEE4           (grfdrv_beta5_with):05795                  ldy   ,s           grab window table pointer again: for L1E9D call
1AB8 17FEEF           (grfdrv_beta5_with):05796                  lbsr  L16F6        Do fast vertical line: X,0 -> X,Y
                      (grfdrv_beta5_with):05797         * leaves with $47-$4D = EX,EY+1 ; EX,EY
1ABB EC64             (grfdrv_beta5_with):05798                  ldd   4,s          get SY
1ABD DD49             (grfdrv_beta5_with):05799                  std   <$49         save SY again
1ABF EC62             (grfdrv_beta5_with):05800                  ldd   2,s          get SX
1AC1 DD47             (grfdrv_beta5_with):05801                  std   <$47         save SX again
1AC3 10AEE4           (grfdrv_beta5_with):05802                  ldy   ,s           get window table ptr
                      (grfdrv_beta5_with):05803         * enters with SX,SY ; EX,EY
1AC6 17FEE1           (grfdrv_beta5_with):05804                  lbsr  L16F6         Do other fast vertical line 0,0 -> 0,Y
                      (grfdrv_beta5_with):05805         * leaves with $47-$4D = SX,EY ; EX,EY
1AC9 10AEE4           (grfdrv_beta5_with):05806                  ldy   ,s           restore window table pointer
1ACC DC4D             (grfdrv_beta5_with):05807                  ldd   <$4D         grab EY+1 (incremented after line)
1ACE DD49             (grfdrv_beta5_with):05808                  std   <$49         save EY
1AD0 17FDF8           (grfdrv_beta5_with):05809                  lbsr  L168D         Do final fast horizontal line: 0,Y -> X,Y
1AD3 3266             (grfdrv_beta5_with):05810                  leas   6,s          Eat stack buffer
1AD5 5F               (grfdrv_beta5_with):05811                  clrb                No error & return
1AD6 7E50A5           (grfdrv_beta5_with):05812         L17F9    jmp   >GrfStrt+SysRet
                      (grfdrv_beta5_with):05813         
                      (grfdrv_beta5_with):05814         * Bar entry point
1AD9 17FDA8           (grfdrv_beta5_with):05815         L17FB    lbsr  I.Line       internal line/bar/box routine
1ADC 2542             (grfdrv_beta5_with):05816                  bcs   L1853
1ADE 17FDD6           (grfdrv_beta5_with):05817                  lbsr  L16A3        Make sure X coords in right order
1AE1 17FEE5           (grfdrv_beta5_with):05818                  lbsr  L1716        Make sure Y coords in right order
                      (grfdrv_beta5_with):05819                IFNE  H6309
                      (grfdrv_beta5_with):05820                  ldw   <$68         Get LSET vector
                      (grfdrv_beta5_with):05821                ELSE
1AE4 DC68             (grfdrv_beta5_with):05822                  ldd   <$68
1AE6 DDB5             (grfdrv_beta5_with):05823                  std   <$B5
                      (grfdrv_beta5_with):05824                ENDC
                      (grfdrv_beta5_with):05825         * internal BAR routine called from CLS for non-byte boundary clear to EOL
1AE8 DC47             (grfdrv_beta5_with):05826         i.bar    ldd   <$0047       grab start X coordinate
1AEA DD99             (grfdrv_beta5_with):05827                  std   <$0099       save it for later
1AEC 934B             (grfdrv_beta5_with):05828                  subd  <$4B         take out end X coordinate
                      (grfdrv_beta5_with):05829                IFNE  H6309
                      (grfdrv_beta5_with):05830                  negd               negate it
                      (grfdrv_beta5_with):05831                  incd               add one
                      (grfdrv_beta5_with):05832                ELSE
1AEE 43               (grfdrv_beta5_with):05833                  coma
1AEF 53               (grfdrv_beta5_with):05834                  comb
1AF0 C30002           (grfdrv_beta5_with):05835                  addd  #2
                      (grfdrv_beta5_with):05836                ENDC
1AF3 DD9B             (grfdrv_beta5_with):05837                  std   <$9B         save for later
1AF5 17073E           (grfdrv_beta5_with):05838                  lbsr  L1EF1        Set up <$79 bit mask & <$77 bit shft vector
1AF8 17F85B           (grfdrv_beta5_with):05839                  lbsr  L1E9D        Calculate scrn ptr & 1st bit mask
1AFB 9661             (grfdrv_beta5_with):05840                  lda   <$0061       Get color mask
1AFD DD9D             (grfdrv_beta5_with):05841                  std   <$009D       Save color mask & pixel mask
1AFF DC4D             (grfdrv_beta5_with):05842                  ldd   <$004D
1B01 D04A             (grfdrv_beta5_with):05843                  subb  <$004A
1B03 5C               (grfdrv_beta5_with):05844                  incb  
1B04 1F02             (grfdrv_beta5_with):05845                  tfr   d,y          Move # horizontal lines to draw to Y
1B06 3430             (grfdrv_beta5_with):05846         L1839    pshs  y,x          Preserve # lines left & screen ptr
1B08 109E9B           (grfdrv_beta5_with):05847                  ldy   <$009B
1B0B DC9D             (grfdrv_beta5_with):05848                  ldd   <$009D       Get color & pixel masks
1B0D 17FDCF           (grfdrv_beta5_with):05849                  lbsr  L16B5        Do fast horizontal line
1B10 3530             (grfdrv_beta5_with):05850                  puls  y,x          Get # lines left & screen ptr
1B12 D663             (grfdrv_beta5_with):05851                  ldb   <$0063       Bump ptr to start of next line in bar
1B14 3A               (grfdrv_beta5_with):05852                  abx   
1B15 0C4A             (grfdrv_beta5_with):05853                  inc   <$004A       Bump up Y coord
1B17 DC99             (grfdrv_beta5_with):05854                  ldd   <$0099       get saved starting X coordinate
1B19 DD47             (grfdrv_beta5_with):05855                  std   <$0047       save as current X coordinate
1B1B 313F             (grfdrv_beta5_with):05856                  leay  -1,y         Bump line counter
1B1D 26E7             (grfdrv_beta5_with):05857                  bne   L1839        Draw until done
1B1F 5F               (grfdrv_beta5_with):05858                  clrb               No error & return
1B20 7E50A5           (grfdrv_beta5_with):05859         L1853    jmp   >GrfStrt+SysRet
                      (grfdrv_beta5_with):05860         
                      (grfdrv_beta5_with):05861         * Circle entry point
1B23 8D2A             (grfdrv_beta5_with):05862         L1856    bsr   L1884          Make sure window is graphics
1B25 DC53             (grfdrv_beta5_with):05863                  ldd   <$53           Get radius (horizontal)
                      (grfdrv_beta5_with):05864                IFNE  H6309
                      (grfdrv_beta5_with):05865                  lsrd                 Calculate vertical radius for 'perfect circle'
                      (grfdrv_beta5_with):05866                ELSE
1B27 44               (grfdrv_beta5_with):05867                  lsra
1B28 56               (grfdrv_beta5_with):05868                  rorb
                      (grfdrv_beta5_with):05869                ENDC
1B29 DD55             (grfdrv_beta5_with):05870                  std   <$55           Vertical radius=Horizontal radius/2
1B2B 206C             (grfdrv_beta5_with):05871                  bra   L18BF          Go to appropriate place in ellipse routine
                      (grfdrv_beta5_with):05872         
                      (grfdrv_beta5_with):05873         * Arc entry point
1B2D 8D20             (grfdrv_beta5_with):05874         L1860    bsr   L1884          Make sure window is graphics
1B2F 17067F           (grfdrv_beta5_with):05875                  lbsr  L1E05          Go scale start 'clip' coords, check if legal
1B32 25EC             (grfdrv_beta5_with):05876                  bcs   L1853          Illegal coordinate, exit with error
1B34 17069C           (grfdrv_beta5_with):05877                  lbsr  L1E24          Go scale end 'clip' coords, check if legal
1B37 25E7             (grfdrv_beta5_with):05878                  bcs   L1853          Illegal coordinate, exit with error
1B39 DC20             (grfdrv_beta5_with):05879                  ldd   <$0020         Get start clip X coord
1B3B 109324           (grfdrv_beta5_with):05880                  cmpd  <$0024         Same as end clip X coord?
1B3E 261F             (grfdrv_beta5_with):05881                  bne   L188E          No, skip ahead
1B40 8E5DB8           (grfdrv_beta5_with):05882                  ldx   #GrfStrt+L1A9D Point to vertical line clip vector
1B43 DC22             (grfdrv_beta5_with):05883                  ldd   <$0022         Get start clip Y coord
1B45 109326           (grfdrv_beta5_with):05884                  cmpd  <$0026         Same as end clip Y coord?
1B48 2D52             (grfdrv_beta5_with):05885                  blt   L18B3          If lower, skip ahead
1B4A 8E5DBF           (grfdrv_beta5_with):05886                  ldx   #GrfStrt+L1AA4 End X clip is to right of Start vector
1B4D 204D             (grfdrv_beta5_with):05887                  bra   L18B3          Go save vector & continue
                      (grfdrv_beta5_with):05888         
1B4F 17E5A6           (grfdrv_beta5_with):05889         L1884    lbsr  L0177          Map in window
1B52 D660             (grfdrv_beta5_with):05890                  ldb   <$60           Get screen type
1B54 102BE9AF         (grfdrv_beta5_with):05891                  lbmi  L0569          If text, return with Error 192
1B58 E62E             (grfdrv_beta5_with):05892                  ldb   Wt.PBlk,y      Get Pattern memory block
1B5A 273A             (grfdrv_beta5_with):05893                  beq   L18BC          None, exit to a convenient RTS
1B5C 16FCAC           (grfdrv_beta5_with):05894                  lbra  L017C          Map that block in
                      (grfdrv_beta5_with):05895         
                      (grfdrv_beta5_with):05896         * Different X coord clip coords
1B5F 9E22             (grfdrv_beta5_with):05897         L188E    ldx   <$0022         Get start Y coord
1B61 9C26             (grfdrv_beta5_with):05898                  cmpx  <$0026         Same as end Y coord?
1B63 260D             (grfdrv_beta5_with):05899                  bne   L18A3          No, skip ahead
1B65 8E5DC6           (grfdrv_beta5_with):05900                  ldx   #GrfStrt+L1AAB Point to horizontal line clip vector
1B68 109324           (grfdrv_beta5_with):05901                  cmpd  <$0024         Is start X coord left of end X coord?
1B6B 2D2F             (grfdrv_beta5_with):05902                  blt   L18B3          Yes, use this vector
1B6D 8E5DCC           (grfdrv_beta5_with):05903                  ldx   #GrfStrt+L1AB1 Point to horizontal line/to right vector
1B70 202A             (grfdrv_beta5_with):05904                  bra   L18B3          Go save the vector & continue
                      (grfdrv_beta5_with):05905         
                      (grfdrv_beta5_with):05906         * Different X & Y clip coords
1B72 8E5DD2           (grfdrv_beta5_with):05907         L18A3    ldx   #GrfStrt+L1AB7 Point to 'normal' Arc Clip line vector
1B75 DC20             (grfdrv_beta5_with):05908                  ldd   <$0020         Get start X coord
1B77 9324             (grfdrv_beta5_with):05909                  subd  <$0024         Calculate X clip line width
1B79 DD97             (grfdrv_beta5_with):05910                  std   <$0097         Save it
1B7B DC22             (grfdrv_beta5_with):05911                  ldd   <$0022         Get start Y coord
1B7D 9326             (grfdrv_beta5_with):05912                  subd  <$0026         Calculate Y clip line height
1B7F DD99             (grfdrv_beta5_with):05913                  std   <$0099         Save it
1B81 2019             (grfdrv_beta5_with):05914                  bra   L18B3          Go save vector & continue
                      (grfdrv_beta5_with):05915         
1B83 1702FD           (grfdrv_beta5_with):05916         L18B7    lbsr  L1B3B          Copy 5 byte integer from ,Y to ,X
                      (grfdrv_beta5_with):05917         * Shift 5 byte number pointed to by X to the left 1 bit
1B86 6804             (grfdrv_beta5_with):05918         L1BDD    lsl   4,x            (four 7 cycles & one 6 cycle)
                      (grfdrv_beta5_with):05919                IFNE  H6309
                      (grfdrv_beta5_with):05920                  ldq   ,x             Get rest of 5 byte #
                      (grfdrv_beta5_with):05921                  rolw                 Shift it all left
                      (grfdrv_beta5_with):05922                  rold
                      (grfdrv_beta5_with):05923                  stq   ,x             Store result
                      (grfdrv_beta5_with):05924                ELSE
1B88 EC02             (grfdrv_beta5_with):05925                  ldd   2,x
1B8A 59               (grfdrv_beta5_with):05926                  rolb
1B8B 49               (grfdrv_beta5_with):05927                  rola
1B8C ED02             (grfdrv_beta5_with):05928                  std   2,x
1B8E DDB5             (grfdrv_beta5_with):05929                  std   <$B5
1B90 EC84             (grfdrv_beta5_with):05930                  ldd   ,x
1B92 59               (grfdrv_beta5_with):05931                  rolb
1B93 49               (grfdrv_beta5_with):05932                  rola
1B94 ED84             (grfdrv_beta5_with):05933                  std   ,x
                      (grfdrv_beta5_with):05934                ENDC
1B96 39               (grfdrv_beta5_with):05935         L18BC    rts                  Exit
                      (grfdrv_beta5_with):05936         
                      (grfdrv_beta5_with):05937         * Ellipse entry point
1B97 8DB6             (grfdrv_beta5_with):05938         L18BD    bsr   L1884          Make sure we are on graphics screen
                      (grfdrv_beta5_with):05939         * Circle comes here after a little set up
1B99 8E5DD6           (grfdrv_beta5_with):05940         L18BF    ldx   #GrfStrt+L1ABB Point to 'no clipping' routine
1B9C 9FA1             (grfdrv_beta5_with):05941         L18B3    stx   <$A1           Preserve clipping vector
                      (grfdrv_beta5_with):05942         * Clipping vector setup, start processing ARC
1B9E 1705E6           (grfdrv_beta5_with):05943         L18C5    lbsr  L1DF6          Make sure coord's & scaling will work
1BA1 2503             (grfdrv_beta5_with):05944                  bcs   L18D4          Error, return to system with error #
1BA3 170631           (grfdrv_beta5_with):05945                  lbsr  L1E28          Go make sure X & Y Radius values are legit
1BA6 10250182         (grfdrv_beta5_with):05946         L18D4    lbcs  L1A75          Nope, exit with error
                      (grfdrv_beta5_with):05947                IFNE  H6309
                      (grfdrv_beta5_with):05948                  ldq   <$47           Get Draw pointer's X & Y Coordinates
                      (grfdrv_beta5_with):05949                  stq   <$18           Make working copies
                      (grfdrv_beta5_with):05950                  clrd                 Set some variable to 0
                      (grfdrv_beta5_with):05951                ELSE
1BAA DC47             (grfdrv_beta5_with):05952                  ldd   <$47
1BAC DD18             (grfdrv_beta5_with):05953                  std   <$18
1BAE DC49             (grfdrv_beta5_with):05954                  ldd   <$49
1BB0 DD1A             (grfdrv_beta5_with):05955                  std   <$1A
1BB2 4F               (grfdrv_beta5_with):05956                  clra
1BB3 5F               (grfdrv_beta5_with):05957                  clrb
                      (grfdrv_beta5_with):05958                ENDC
1BB4 DD1C             (grfdrv_beta5_with):05959                  std   <$1C           Store it
1BB6 DC55             (grfdrv_beta5_with):05960                  ldd   <$55           Get Y radius value
1BB8 DD1E             (grfdrv_beta5_with):05961                  std   <$1E           Move to working area
1BBA 32E8C2           (grfdrv_beta5_with):05962                  leas  <-$3E,s        Make a 62 byte working stack area
1BBD 10AFE83C         (grfdrv_beta5_with):05963                  sty   <$3C,s         Preserve Y in last 2 bytes of stack area
1BC1 3065             (grfdrv_beta5_with):05964                  leax  $05,s          Point X into stack working area
1BC3 DC53             (grfdrv_beta5_with):05965                  ldd   <$0053         Get horizontal radius
1BC5 17030A           (grfdrv_beta5_with):05966                  lbsr  L1BA1.0        ATD: lbsr L1B32 moved for size
1BC8 3184             (grfdrv_beta5_with):05967                  leay  ,x
1BCA 30E814           (grfdrv_beta5_with):05968                  leax  <$14,s
1BCD DC55             (grfdrv_beta5_with):05969                  ldd   <$0055
1BCF 170312           (grfdrv_beta5_with):05970                  lbsr  L1BB1
1BD2 306A             (grfdrv_beta5_with):05971                  leax  $0A,s
1BD4 8DAD             (grfdrv_beta5_with):05972                  bsr   L18B7
1BD6 3184             (grfdrv_beta5_with):05973                  leay  ,x
1BD8 306F             (grfdrv_beta5_with):05974                  leax  $0F,s
1BDA 8DA7             (grfdrv_beta5_with):05975                  bsr   L18B7
1BDC 30E819           (grfdrv_beta5_with):05976                  leax  <$19,s
1BDF DC55             (grfdrv_beta5_with):05977                  ldd   <$0055
1BE1 1702EE           (grfdrv_beta5_with):05978                  lbsr  L1BA1.0        ATD: lbsr L1B32 moved for size
1BE4 3184             (grfdrv_beta5_with):05979                  leay  ,x
1BE6 30E81E           (grfdrv_beta5_with):05980                  leax  <$1E,s
1BE9 8D98             (grfdrv_beta5_with):05981                  bsr   L18B7
1BEB 3184             (grfdrv_beta5_with):05982                  leay  ,x
1BED 30E823           (grfdrv_beta5_with):05983                  leax  <$23,s
1BF0 8D91             (grfdrv_beta5_with):05984                  bsr   L18B7
1BF2 30E828           (grfdrv_beta5_with):05985                  leax  <$28,s
1BF5 17027A           (grfdrv_beta5_with):05986                  lbsr  L1B32.0        ATD: CLRD moved for size
1BF8 30E82D           (grfdrv_beta5_with):05987                  leax  <$2D,s
1BFB DC1E             (grfdrv_beta5_with):05988                  ldd   <$001E
1BFD 170274           (grfdrv_beta5_with):05989                  lbsr  L1B32
                      (grfdrv_beta5_with):05990                IFNE  H6309
                      (grfdrv_beta5_with):05991                  decd                 Doesn't affect circle
                      (grfdrv_beta5_with):05992                ELSE
1C00 830001           (grfdrv_beta5_with):05993                  subd  #1
                      (grfdrv_beta5_with):05994                ENDC
1C03 1702CE           (grfdrv_beta5_with):05995                  lbsr  L1BA1
1C06 316A             (grfdrv_beta5_with):05996                  leay  $0A,s
1C08 1702DB           (grfdrv_beta5_with):05997                  lbsr  L1BB4
1C0B 3165             (grfdrv_beta5_with):05998                  leay  $05,s
1C0D 8D7B             (grfdrv_beta5_with):05999                  bsr   L19C3
1C0F 30E4             (grfdrv_beta5_with):06000                  leax  ,s
1C11 8D7D             (grfdrv_beta5_with):06001                  bsr   L19C6
1C13 17028A           (grfdrv_beta5_with):06002                  lbsr  L1B63          ATD: LDD moved for size
1C16 31E81E           (grfdrv_beta5_with):06003                  leay  <$1E,s
1C19 1702CA           (grfdrv_beta5_with):06004                  lbsr  L1BB4
1C1C 3184             (grfdrv_beta5_with):06005                  leay  ,x
1C1E 8D67             (grfdrv_beta5_with):06006                  bsr   L19C3.0        ATD: LEAX moved for size
1C20 30E832           (grfdrv_beta5_with):06007                  leax  <$32,s
1C23 8D68             (grfdrv_beta5_with):06008                  bsr   L19C6.0        ATD: LEAY moved for size
1C25 8D5B             (grfdrv_beta5_with):06009                  bsr   L19C0.0        ATD: LDD moved for size
1C27 30E837           (grfdrv_beta5_with):06010                  leax  <$37,s
1C2A 31E81E           (grfdrv_beta5_with):06011                  leay  <$1E,s
1C2D 170253           (grfdrv_beta5_with):06012                  lbsr  L1B3B
1C30 30E814           (grfdrv_beta5_with):06013         L1970    leax  <$14,s
1C33 31E828           (grfdrv_beta5_with):06014                  leay  <$28,s
1C36 17031D           (grfdrv_beta5_with):06015                  lbsr  L1C2E
1C39 2F5B             (grfdrv_beta5_with):06016                  ble   L19CC
1C3B 1700F1           (grfdrv_beta5_with):06017                  lbsr  L1A78
1C3E 6DE82D           (grfdrv_beta5_with):06018                  tst   <$2D,s
1C41 2B22             (grfdrv_beta5_with):06019                  bmi   L19A0
1C43 30E832           (grfdrv_beta5_with):06020                  leax  <$32,s
1C46 316F             (grfdrv_beta5_with):06021                  leay  $0F,s
1C48 8D40             (grfdrv_beta5_with):06022                  bsr   L19C3
1C4A 3184             (grfdrv_beta5_with):06023                  leay  ,x
1C4C 8D39             (grfdrv_beta5_with):06024                  bsr   L19C3.0        ATD: LEAX moved for size
1C4E 30E814           (grfdrv_beta5_with):06025                  leax  <$14,s
1C51 3165             (grfdrv_beta5_with):06026                  leay  $05,s
                      (grfdrv_beta5_with):06027         
                      (grfdrv_beta5_with):06028         * [X] = [X] - [Y] : leave [Y] alone
                      (grfdrv_beta5_with):06029         * ONLY called once.  Moving it would save 1 byte (rts) (save LBSR, convert
                      (grfdrv_beta5_with):06030         * 3 BSRs to LBSRs), and save
                      (grfdrv_beta5_with):06031         * one LBSR/rts (11 cycles), and convert 3 BSR to LBSR (+3)
                      (grfdrv_beta5_with):06032         * can also get rid of superfluous exg x,y at the end of the routine
                      (grfdrv_beta5_with):06033         * used to be a stand-alone routine
1C53 1702E1           (grfdrv_beta5_with):06034         L1B92    lbsr  L1C11.0        negate 5 byte [Y]: ATD: EXG X,Y moved for size
1C56 1E12             (grfdrv_beta5_with):06035                  exg   x,y
1C58 17025F           (grfdrv_beta5_with):06036                  lbsr  L1B7A          40 bit add: [X] = [X] + [Y]
1C5B 1702D9           (grfdrv_beta5_with):06037                  lbsr  L1C11.0        negate 5 byte int: ATD: EXG X,Y moved for size
1C5E DC1E             (grfdrv_beta5_with):06038                  ldd   <$001E         Dec some sort of counter
                      (grfdrv_beta5_with):06039                IFNE  H6309
                      (grfdrv_beta5_with):06040                  decd                 Doesn't affect circle
                      (grfdrv_beta5_with):06041                ELSE
1C60 830001           (grfdrv_beta5_with):06042                  subd  #1
                      (grfdrv_beta5_with):06043                ENDC
1C63 DD1E             (grfdrv_beta5_with):06044                  std   <$001E
1C65 30E837           (grfdrv_beta5_with):06045         L19A0    leax  <$37,s
1C68 31E823           (grfdrv_beta5_with):06046                  leay  <$23,s
1C6B 8D1D             (grfdrv_beta5_with):06047                  bsr   L19C3
1C6D 3184             (grfdrv_beta5_with):06048                  leay  ,x
1C6F 8D16             (grfdrv_beta5_with):06049                  bsr   L19C3.0        ATD: LEAX moved for size
1C71 30E828           (grfdrv_beta5_with):06050                  leax  <$28,s
1C74 31E819           (grfdrv_beta5_with):06051                  leay  <$19,s
1C77 8D11             (grfdrv_beta5_with):06052                  bsr   L19C3
1C79 DC1C             (grfdrv_beta5_with):06053                  ldd   <$001C
                      (grfdrv_beta5_with):06054                IFNE  H6309
                      (grfdrv_beta5_with):06055                  incd                 Doesn't affect circle
                      (grfdrv_beta5_with):06056                ELSE
1C7B C30001           (grfdrv_beta5_with):06057                  addd  #1
                      (grfdrv_beta5_with):06058                ENDC
1C7E DD1C             (grfdrv_beta5_with):06059                  std   <$001C
1C80 20AE             (grfdrv_beta5_with):06060                  bra   L1970
                      (grfdrv_beta5_with):06061         
1C82 DC1E             (grfdrv_beta5_with):06062         L19C0.0  ldd   <$001E         ATD: moved here for size
1C84 7E5ED4           (grfdrv_beta5_with):06063         L19C0    jmp   >GrfStrt+L1BA1
                      (grfdrv_beta5_with):06064         
1C87 30E82F           (grfdrv_beta5_with):06065         L19C3.0  leax  <$2D+2,s       ATD: moved here for size
1C8A 7E5EBA           (grfdrv_beta5_with):06066         L19C3    jmp   >GrfStrt+L1B7A add 40 bit [X] = [X] + [Y]
                      (grfdrv_beta5_with):06067         
1C8D 31E811           (grfdrv_beta5_with):06068         L19C6.0  leay  <$0F+2,s       ATD: moved here for size
1C90 1701F0           (grfdrv_beta5_with):06069         L19C6    lbsr  L1B3B
1C93 7E5F39           (grfdrv_beta5_with):06070                  jmp   >GrfStrt+L1C11 negate 5-byte integer, return from there
                      (grfdrv_beta5_with):06071         
1C96 30E82D           (grfdrv_beta5_with):06072         L19CC    leax  <$2D,s
1C99 DC1C             (grfdrv_beta5_with):06073                  ldd   <$001C
1C9B 1701D6           (grfdrv_beta5_with):06074                  lbsr  L1B32
                      (grfdrv_beta5_with):06075                IFNE  H6309
                      (grfdrv_beta5_with):06076                  incd                 Doesn't affect circle
                      (grfdrv_beta5_with):06077                ELSE
1C9E C30001           (grfdrv_beta5_with):06078                  addd  #1
                      (grfdrv_beta5_with):06079                ENDC
1CA1 8DE1             (grfdrv_beta5_with):06080                  bsr   L19C0
1CA3 31E81E           (grfdrv_beta5_with):06081                  leay  <$1E,s
1CA6 17023D           (grfdrv_beta5_with):06082                  lbsr  L1BB4
1CA9 30E4             (grfdrv_beta5_with):06083                  leax  ,s
1CAB DC1E             (grfdrv_beta5_with):06084                  ldd   <$001E
1CAD 1701C4           (grfdrv_beta5_with):06085                  lbsr  L1B32
1CB0 830002           (grfdrv_beta5_with):06086                  subd  #$0002
1CB3 8DCF             (grfdrv_beta5_with):06087                  bsr   L19C0
1CB5 1701E8           (grfdrv_beta5_with):06088                  lbsr  L1B63          ATD: LDD moved for size
1CB8 316A             (grfdrv_beta5_with):06089                  leay  $0A,s
1CBA 170229           (grfdrv_beta5_with):06090                  lbsr  L1BB4
1CBD 3184             (grfdrv_beta5_with):06091                  leay  ,x
1CBF 8DC6             (grfdrv_beta5_with):06092                  bsr   L19C3.0        ATD: LEAX moved for size
1CC1 30E4             (grfdrv_beta5_with):06093                  leax  ,s
1CC3 316A             (grfdrv_beta5_with):06094                  leay  $0A,s
1CC5 8DC9             (grfdrv_beta5_with):06095                  bsr   L19C6
1CC7 1701D6           (grfdrv_beta5_with):06096                  lbsr  L1B63          ATD: LDD moved for size
1CCA 31E819           (grfdrv_beta5_with):06097                  leay  <$19,s
1CCD 170216           (grfdrv_beta5_with):06098                  lbsr  L1BB4
1CD0 3184             (grfdrv_beta5_with):06099                  leay  ,x
1CD2 8DB3             (grfdrv_beta5_with):06100                  bsr   L19C3.0        ATD: LEAX moved for size
1CD4 30E832           (grfdrv_beta5_with):06101                  leax  <$32,s
1CD7 31E823           (grfdrv_beta5_with):06102                  leay  <$23,s
1CDA 1701A6           (grfdrv_beta5_with):06103                  lbsr  L1B3B
1CDD DC1C             (grfdrv_beta5_with):06104                  ldd   <$001C
1CDF 8DA3             (grfdrv_beta5_with):06105                  bsr   L19C0
1CE1 30E837           (grfdrv_beta5_with):06106                  leax  <$37,s
1CE4 8DA7             (grfdrv_beta5_with):06107                  bsr   L19C6.0        ATD: LEAY moved for size
1CE6 8D9A             (grfdrv_beta5_with):06108                  bsr   L19C0.0        ATD: LDD moved for size
1CE8 316A             (grfdrv_beta5_with):06109                  leay  $0A,s
1CEA 8D9E             (grfdrv_beta5_with):06110                  bsr   L19C3
1CEC DC1E             (grfdrv_beta5_with):06111         L1A32    ldd   <$001E
1CEE 1083FFFF         (grfdrv_beta5_with):06112                  cmpd  #-1            (was $FFFF) change to INCD?
1CF2 2734             (grfdrv_beta5_with):06113                  beq   L1A71          won't be affected by INCD: exit routine
1CF4 8D39             (grfdrv_beta5_with):06114                  bsr   L1A78          draw pixel: shouldn't be affected by INCD
1CF6 6DE82D           (grfdrv_beta5_with):06115                  tst   <$2D,s
1CF9 2A13             (grfdrv_beta5_with):06116                  bpl   L1A57
1CFB 30E832           (grfdrv_beta5_with):06117                  leax  <$32,s
1CFE 31E823           (grfdrv_beta5_with):06118                  leay  <$23,s
1D01 8D22             (grfdrv_beta5_with):06119                  bsr   L1A6E
1D03 3184             (grfdrv_beta5_with):06120                  leay  ,x
1D05 8D1B             (grfdrv_beta5_with):06121                  bsr   L1A6E.0        ATD: LEAX moved for size
1D07 DC1C             (grfdrv_beta5_with):06122                  ldd   <$001C
                      (grfdrv_beta5_with):06123                IFNE  H6309
                      (grfdrv_beta5_with):06124                  incd                 Doesn't affect Circle
                      (grfdrv_beta5_with):06125                ELSE
1D09 C30001           (grfdrv_beta5_with):06126                  addd  #1
                      (grfdrv_beta5_with):06127                ENDC
1D0C DD1C             (grfdrv_beta5_with):06128                  std   <$001C
1D0E 30E837           (grfdrv_beta5_with):06129         L1A57    leax  <$37,s
1D11 316F             (grfdrv_beta5_with):06130                  leay  $0F,s
1D13 8D10             (grfdrv_beta5_with):06131                  bsr   L1A6E
1D15 3184             (grfdrv_beta5_with):06132                  leay  ,x
1D17 8D09             (grfdrv_beta5_with):06133                  bsr   L1A6E.0        ATD: LEAX moved for size
1D19 DC1E             (grfdrv_beta5_with):06134                  ldd   <$001E
                      (grfdrv_beta5_with):06135                IFNE  H6309
                      (grfdrv_beta5_with):06136                  decd                 Doesn't affect circle
                      (grfdrv_beta5_with):06137                ELSE
1D1B 830001           (grfdrv_beta5_with):06138                  subd  #1
                      (grfdrv_beta5_with):06139                ENDC
1D1E DD1E             (grfdrv_beta5_with):06140                  std   <$001E
1D20 20CA             (grfdrv_beta5_with):06141                  bra   L1A32
                      (grfdrv_beta5_with):06142         
1D22 30E82F           (grfdrv_beta5_with):06143         L1A6E.0  leax  <$2D+2,s       ATD: moved here for size
1D25 7E5EBA           (grfdrv_beta5_with):06144         L1A6E    jmp   >GrfStrt+L1B7A
                      (grfdrv_beta5_with):06145         
1D28 32E83E           (grfdrv_beta5_with):06146         L1A71    leas  <$3E,s
1D2B 5F               (grfdrv_beta5_with):06147                  clrb
1D2C 7E50A5           (grfdrv_beta5_with):06148         L1A75    jmp   >GrfStrt+SysRet
                      (grfdrv_beta5_with):06149         
                      (grfdrv_beta5_with):06150         * Draw all 4 points that one calculation covers (opposite corners)
                      (grfdrv_beta5_with):06151         * (Ellipse & Circle)
1D2F 10AEE83E         (grfdrv_beta5_with):06152         L1A78    ldy   <$3E,s         Get window table ptr back (for [>GrfMem+gr00A1])
1D33 DC1C             (grfdrv_beta5_with):06153                  ldd   <$001C         grab current X offset from center
1D35 9E1E             (grfdrv_beta5_with):06154                  ldx   <$001E         grab current Y offset from center
                      (grfdrv_beta5_with):06155         * At this point, add check for filled flag. If set, put x,y pairs in
                      (grfdrv_beta5_with):06156         * for line command call (with bounds checking) & call line routine 2 times
                      (grfdrv_beta5_with):06157         * (once for top line, once for bottom line)
1D37 0DB2             (grfdrv_beta5_with):06158                  tst   <$b2           We doing a Filled Ellipse/Circle?
1D39 2761             (grfdrv_beta5_with):06159                  beq   NotFill        No, do normal
1D3B 8D40             (grfdrv_beta5_with):06160                  bsr   SetX           Do any adjustments to start X needed
1D3D DD47             (grfdrv_beta5_with):06161                  std   <$47           Save as start X
1D3F DDAD             (grfdrv_beta5_with):06162                  std   <$AD           Save copy
1D41 DC1C             (grfdrv_beta5_with):06163                  ldd   <$1C           Get current X offset again
                      (grfdrv_beta5_with):06164                IFNE  H6309
                      (grfdrv_beta5_with):06165                  negd                 Negate for coord on other side of radius
                      (grfdrv_beta5_with):06166                ELSE
1D43 43               (grfdrv_beta5_with):06167                  coma
1D44 53               (grfdrv_beta5_with):06168                  comb
1D45 C30001           (grfdrv_beta5_with):06169                  addd  #1
                      (grfdrv_beta5_with):06170                ENDC
1D48 8D33             (grfdrv_beta5_with):06171                  bsr   SetX           Do any adjustments
1D4A DD4B             (grfdrv_beta5_with):06172                  std   <$4b           Save end X coord
1D4C DDAF             (grfdrv_beta5_with):06173                  std   <$AF           Save Copy
1D4E 1F10             (grfdrv_beta5_with):06174                  tfr   x,d            Copy current Y offset into D
1D50 3470             (grfdrv_beta5_with):06175                  pshs  x,y,u          Preserve regs for HLine call
1D52 8D18             (grfdrv_beta5_with):06176                  bsr   DoHLine        Do line (if necessary)
1D54 10AE62           (grfdrv_beta5_with):06177                  ldy   2,s            Get window table ptr back for checks
                      (grfdrv_beta5_with):06178                IFNE  H6309
                      (grfdrv_beta5_with):06179                  ldq   <$AD           Get original X coords back
                      (grfdrv_beta5_with):06180                  std   <$47           Save Start X
                      (grfdrv_beta5_with):06181                  stw   <$4b           Save End X
                      (grfdrv_beta5_with):06182                ELSE
1D57 DCAF             (grfdrv_beta5_with):06183                  ldd   <$AF
1D59 DDB5             (grfdrv_beta5_with):06184                  std   <$B5
1D5B DD4B             (grfdrv_beta5_with):06185                  std   <$4b
1D5D DCAD             (grfdrv_beta5_with):06186                  ldd   <$AD
1D5F DD47             (grfdrv_beta5_with):06187                  std   <$47
                      (grfdrv_beta5_with):06188                ENDC
1D61 ECE4             (grfdrv_beta5_with):06189                  ldd   ,s             Get Y coord back
                      (grfdrv_beta5_with):06190                IFNE  H6309
                      (grfdrv_beta5_with):06191                  negd                 Negate for coord on other side of radius
                      (grfdrv_beta5_with):06192                ELSE
1D63 43               (grfdrv_beta5_with):06193                  coma
1D64 53               (grfdrv_beta5_with):06194                  comb
1D65 C30001           (grfdrv_beta5_with):06195                  addd  #1
                      (grfdrv_beta5_with):06196                ENDC
1D68 8D02             (grfdrv_beta5_with):06197                  bsr   DoHLine        Do line (if necessary)
1D6A 35F0             (grfdrv_beta5_with):06198                  puls  x,y,u,pc       Restore regs & return
                      (grfdrv_beta5_with):06199         
                      (grfdrv_beta5_with):06200         * NOTE: THIS WILL MODIFY <$47 AS IT GOES THROUGH THE LINE!
1D6C 8D20             (grfdrv_beta5_with):06201         DoHLine  bsr   SetY           Do Y adjustments
1D6E 81FF             (grfdrv_beta5_with):06202                  cmpa  #$FF           Off window?
1D70 2718             (grfdrv_beta5_with):06203                  beq   SaveStrX       Yes, return without drawing
1D72 DD49             (grfdrv_beta5_with):06204                  std   <$49           Save Y coord for fast horizontal line
                      (grfdrv_beta5_with):06205                IFNE  H6309
                      (grfdrv_beta5_with):06206                  ldw   <$68           Get LSET vector
                      (grfdrv_beta5_with):06207                ELSE
1D74 DE68             (grfdrv_beta5_with):06208                  ldu   <$68
1D76 DFB5             (grfdrv_beta5_with):06209                  stu   <$B5
                      (grfdrv_beta5_with):06210                ENDC
1D78 DE64             (grfdrv_beta5_with):06211                  ldu   <$64           Get PSET vector
1D7A 7E58C9           (grfdrv_beta5_with):06212                  jmp   >GrfStrt+L168B Call fast horizontal line & return from there
                      (grfdrv_beta5_with):06213         
                      (grfdrv_beta5_with):06214         * Calc X coord & make sure in range
1D7D D318             (grfdrv_beta5_with):06215         SetX     addd  <$18           Add X center point
1D7F 2B0A             (grfdrv_beta5_with):06216                  bmi   OffLeft        Off left hand side, use 0
1D81 10A3A81B         (grfdrv_beta5_with):06217                  cmpd  Wt.MaxX,y      Past right hand side?
1D85 2303             (grfdrv_beta5_with):06218                  bls   SaveStrX       No, save start X
1D87 ECA81B           (grfdrv_beta5_with):06219                  ldd   Wt.MaxX,y      Get right side of window
1D8A 39               (grfdrv_beta5_with):06220         SaveStrX rts
                      (grfdrv_beta5_with):06221         
     1D8B             (grfdrv_beta5_with):06222         OffLeft  equ   *
                      (grfdrv_beta5_with):06223                IFNE  H6309
                      (grfdrv_beta5_with):06224                  clrd                 0 X Coord start
                      (grfdrv_beta5_with):06225                ELSE
1D8B 4F               (grfdrv_beta5_with):06226                  clra
1D8C 5F               (grfdrv_beta5_with):06227                  clrb
                      (grfdrv_beta5_with):06228                ENDC
1D8D 39               (grfdrv_beta5_with):06229                  rts
                      (grfdrv_beta5_with):06230         
                      (grfdrv_beta5_with):06231         * Calc Y coord & make sure in range
1D8E D31A             (grfdrv_beta5_with):06232         SetY     addd  <$1a           Add Y center point
1D90 2B07             (grfdrv_beta5_with):06233                  bmi   OffTop         Off top, not drawable
1D92 10A3A81D         (grfdrv_beta5_with):06234                  cmpd  Wt.MaxY,y      Past bottom?
1D96 2201             (grfdrv_beta5_with):06235                  bhi   OffTop         Yes, not drawable
1D98 39               (grfdrv_beta5_with):06236         SaveStrY rts
                      (grfdrv_beta5_with):06237         
1D99 86FF             (grfdrv_beta5_with):06238         OffTop   lda   #$FF           Flag that it is off the window
1D9B 39               (grfdrv_beta5_with):06239                  rts
                      (grfdrv_beta5_with):06240         
                      (grfdrv_beta5_with):06241         * Not filled circle or ellipse
1D9C 8D14             (grfdrv_beta5_with):06242         NotFill  bsr   L1A97          Draw X,Y
                      (grfdrv_beta5_with):06243                IFNE  H6309
                      (grfdrv_beta5_with):06244                  negd                 invert X
                      (grfdrv_beta5_with):06245                ELSE
1D9E 43               (grfdrv_beta5_with):06246                  coma
1D9F 53               (grfdrv_beta5_with):06247                  comb
1DA0 C30001           (grfdrv_beta5_with):06248                  addd  #1
                      (grfdrv_beta5_with):06249                ENDC
1DA3 8D0D             (grfdrv_beta5_with):06250                  bsr   L1A97          Draw -X,Y
1DA5 1E01             (grfdrv_beta5_with):06251                  exg   d,x            Invert Y
                      (grfdrv_beta5_with):06252                IFNE  H6309
                      (grfdrv_beta5_with):06253                  negd                 invert X
                      (grfdrv_beta5_with):06254                ELSE
1DA7 43               (grfdrv_beta5_with):06255                  coma
1DA8 53               (grfdrv_beta5_with):06256                  comb
1DA9 C30001           (grfdrv_beta5_with):06257                  addd  #1
                      (grfdrv_beta5_with):06258                ENDC
1DAC 1E01             (grfdrv_beta5_with):06259                  exg   d,x
1DAE 8D02             (grfdrv_beta5_with):06260                  bsr   L1A97          Draw inverted X, inverted Y pixel
1DB0 DC1C             (grfdrv_beta5_with):06261                  ldd   <$001C         Last, draw X,-Y
1DB2 3416             (grfdrv_beta5_with):06262         L1A97    pshs  x,d            Preserve x,y coords
1DB4 6E9F11A1         (grfdrv_beta5_with):06263                  jmp   [>GrfMem+gr00A1]  Draw point (L1ABB if circle/ellipse)
                      (grfdrv_beta5_with):06264         
                      (grfdrv_beta5_with):06265         * NOTE: THE FOLLOWING 6 LABELS (L1A9D, L1AA4, L1AAB, L1AB1, L1AB7 & L1ABB)
                      (grfdrv_beta5_with):06266         *   ARE POINTED TO BY >GrfMem+gr00A1, DEPENDING ON WHETHER ARC IS ON OR NOT, AND THE
                      (grfdrv_beta5_with):06267         *   COORDINATES ARE WITHIN CERTAIN BOUNDARIES. THE ENTRY CONDITIONS FOR ALL
                      (grfdrv_beta5_with):06268         *   6 OF THESE ARE (AND NOTE THAT THESE ARE SIGNED):
                      (grfdrv_beta5_with):06269         * D=X coord offset from center point
                      (grfdrv_beta5_with):06270         * X=Y coord offset from center point
                      (grfdrv_beta5_with):06271         * (ARC) Vertical clip line, start Y > end Y coord vector
1DB8 109320           (grfdrv_beta5_with):06272         L1A9D    cmpd  <$0020         >= start clip X coord?
1DBB 2C19             (grfdrv_beta5_with):06273                  bge   L1ABB          Yes, go draw point
1DBD 3596             (grfdrv_beta5_with):06274                  puls  pc,x,d         No, return
                      (grfdrv_beta5_with):06275         
                      (grfdrv_beta5_with):06276         * (ARC) Vertical clip line, start Y < end Y coord vector
1DBF 109320           (grfdrv_beta5_with):06277         L1AA4    cmpd  <$0020         <= start clip X coord?
1DC2 2F12             (grfdrv_beta5_with):06278                  ble   L1ABB          Yes, go draw point
1DC4 3596             (grfdrv_beta5_with):06279                  puls  pc,x,d         No, return
                      (grfdrv_beta5_with):06280         
                      (grfdrv_beta5_with):06281         * (ARC) Horizontal clip line, start X < end X coord vector
1DC6 9C22             (grfdrv_beta5_with):06282         L1AAB    cmpx  <$0022         <= start clip Y coord?
1DC8 2F0C             (grfdrv_beta5_with):06283                  ble   L1ABB          Yes, go draw point
1DCA 3596             (grfdrv_beta5_with):06284                  puls  pc,x,d         No, return
                      (grfdrv_beta5_with):06285         
                      (grfdrv_beta5_with):06286         * (ARC) Horizontal clip line, start X > end X coord vector
1DCC 9C22             (grfdrv_beta5_with):06287         L1AB1    cmpx  <$0022         >= start clip Y coord?
1DCE 2C06             (grfdrv_beta5_with):06288                  bge   L1ABB          Yes, go draw point
1DD0 3596             (grfdrv_beta5_with):06289                  puls  pc,x,d         No, return
                      (grfdrv_beta5_with):06290         
                      (grfdrv_beta5_with):06291         * (ARC) Clip line is diagonal in some way
1DD2 8D2F             (grfdrv_beta5_with):06292         L1AB7    bsr   L1ADF          Check if within range of diagonal clip line
1DD4 2E2B             (grfdrv_beta5_with):06293                  bgt   L1ADD          If out of range, don't put pixel on screen
                      (grfdrv_beta5_with):06294         * Entry point for 'No clipping' routine pixel put
                      (grfdrv_beta5_with):06295         * Entry: D=X offset from center point
                      (grfdrv_beta5_with):06296         *        X=Y offset from center point
1DD6 D318             (grfdrv_beta5_with):06297         L1ABB    addd  <$0018         Add X offset to center point X
1DD8 2B27             (grfdrv_beta5_with):06298                  bmi   L1ADD          Off of left side of window, don't bother
1DDA 10A3A81B         (grfdrv_beta5_with):06299                  cmpd  Wt.MaxX,y      Past right side of window?
1DDE 2221             (grfdrv_beta5_with):06300                  bhi   L1ADD          Yes, don't bother
1DE0 DD47             (grfdrv_beta5_with):06301                  std   <$0047         Save X for Point routine
1DE2 1F10             (grfdrv_beta5_with):06302                  tfr   x,d            Move Y offset to D
1DE4 D31A             (grfdrv_beta5_with):06303                  addd  <$001A         Add Y offset to center point Y
1DE6 2B19             (grfdrv_beta5_with):06304                  bmi   L1ADD          Off of top of window, don't bother
1DE8 10A3A81D         (grfdrv_beta5_with):06305                  cmpd  Wt.MaxY,y      Past bottom of window?
1DEC 2213             (grfdrv_beta5_with):06306                  bhi   L1ADD          Yes, don't bother
1DEE DD49             (grfdrv_beta5_with):06307                  std   <$0049         Save Y coord for Point routine
1DF0 17F563           (grfdrv_beta5_with):06308                  lbsr  L1E9D          Calculate scrn addr:X, bit mask into B
1DF3 9661             (grfdrv_beta5_with):06309                  lda   <$0061         Get color mask
                      (grfdrv_beta5_with):06310                IFNE  H6309
                      (grfdrv_beta5_with):06311                  ldw   <$68           Get LSET vector
                      (grfdrv_beta5_with):06312                ELSE
1DF5 9FBF             (grfdrv_beta5_with):06313                  stx   <grScrtch
1DF7 9E68             (grfdrv_beta5_with):06314                  ldx   <$68
1DF9 9FB5             (grfdrv_beta5_with):06315                  stx   <$B5
1DFB 9EBF             (grfdrv_beta5_with):06316                  ldx   <grScrtch
                      (grfdrv_beta5_with):06317                ENDC
1DFD AD9F1164         (grfdrv_beta5_with):06318                  jsr   [>GrfMem+gr0064] Put pixel on screen
1E01 3596             (grfdrv_beta5_with):06319         L1ADD    puls  pc,x,d         Restore regs & return
                      (grfdrv_beta5_with):06320         
                      (grfdrv_beta5_with):06321         * Uses signed 16x16 bit multiply
                      (grfdrv_beta5_with):06322         * Called by Arc (probably in clipping coordinates)
1E03 3416             (grfdrv_beta5_with):06323         L1ADF    pshs  x,d
1E05 327C             (grfdrv_beta5_with):06324                  leas  -4,s
1E07 1F10             (grfdrv_beta5_with):06325                  tfr   x,d
1E09 9326             (grfdrv_beta5_with):06326                  subd  <$26
                      (grfdrv_beta5_with):06327                IFNE  H6309
                      (grfdrv_beta5_with):06328                  muld  <$97           Calculate 1st result
                      (grfdrv_beta5_with):06329                  stq   ,s             Save 24 bit result
                      (grfdrv_beta5_with):06330                ELSE                 
1E0B 3470             (grfdrv_beta5_with):06331                  pshs  x,y,u
1E0D 9E97             (grfdrv_beta5_with):06332                  ldx   <$97
1E0F 8D26             (grfdrv_beta5_with):06333                  bsr   MUL16          Multiply D*X into Y&U
1E11 10AF66           (grfdrv_beta5_with):06334                  sty   6,s
1E14 EF68             (grfdrv_beta5_with):06335                  stu   8,s
1E16 DFB5             (grfdrv_beta5_with):06336                  stu   <$B5
1E18 3570             (grfdrv_beta5_with):06337                  puls  x,y,u
                      (grfdrv_beta5_with):06338                ENDC
1E1A EC64             (grfdrv_beta5_with):06339                  ldd   4,s
1E1C 9324             (grfdrv_beta5_with):06340                  subd  <$24
                      (grfdrv_beta5_with):06341                IFNE  H6309
                      (grfdrv_beta5_with):06342                  muld  <$99           Calculate 2nd result
                      (grfdrv_beta5_with):06343                ELSE
1E1E 3470             (grfdrv_beta5_with):06344                  pshs  x,y,u
1E20 9E99             (grfdrv_beta5_with):06345                  ldx   <$99
1E22 8D13             (grfdrv_beta5_with):06346                  bsr   MUL16          Multiply D*X into Y&U
1E24 DFB5             (grfdrv_beta5_with):06347                  stu   <$B5
1E26 1F20             (grfdrv_beta5_with):06348                  tfr   y,d
1E28 3570             (grfdrv_beta5_with):06349                  puls  x,y,u
                      (grfdrv_beta5_with):06350                ENDC
1E2A E161             (grfdrv_beta5_with):06351                  cmpb  1,s            Compare high byte with original multiply
1E2C 2605             (grfdrv_beta5_with):06352                  bne   L1AF9          Not equal, exit with CC indicating that
                      (grfdrv_beta5_with):06353                IFNE  H6309
                      (grfdrv_beta5_with):06354                  cmpw  2,s            Check rest of 24 bit #
                      (grfdrv_beta5_with):06355                ELSE
1E2E DCB5             (grfdrv_beta5_with):06356                  ldd   <$B5
1E30 10A362           (grfdrv_beta5_with):06357                  cmpd  2,s
                      (grfdrv_beta5_with):06358                ENDC
1E33 3264             (grfdrv_beta5_with):06359         L1AF9    leas  4,s            Eat our buffer
1E35 3596             (grfdrv_beta5_with):06360                  puls  pc,x,d         Restore regs & return
                      (grfdrv_beta5_with):06361         
                      (grfdrv_beta5_with):06362                IFEQ  H6309
                      (grfdrv_beta5_with):06363         * Original code was unsigned only routine - which breaks with relative coords, etc.
                      (grfdrv_beta5_with):06364         * Preserves original D:X, returns 32 bit signed D*X in Y:U, and
                      (grfdrv_beta5_with):06365         *   sets CC flags for compare
                      (grfdrv_beta5_with):06366         * 16x16 SIGNED multiply
                      (grfdrv_beta5_with):06367         * Entry: X=16 bit signed #1
                      (grfdrv_beta5_with):06368         *        D=16 bit signed #2
                      (grfdrv_beta5_with):06369         * NOTE: This only calculates up to 24 bits (then pads to 32), since that is
                      (grfdrv_beta5_with):06370         *   all that Grfdrv actually needs
                      (grfdrv_beta5_with):06371         * Exit:  Y:U = 32 bit signed result, and CMP bits set in CC
1E37 3416             (grfdrv_beta5_with):06372         MUL16    pshs  x,d
1E39 A663             (grfdrv_beta5_with):06373                  lda   3,s
1E3B 3D               (grfdrv_beta5_with):06374                  mul   
1E3C 3406             (grfdrv_beta5_with):06375                  pshs  d
1E3E A665             (grfdrv_beta5_with):06376                  lda   5,s
1E40 E662             (grfdrv_beta5_with):06377                  ldb   2,s
1E42 3D               (grfdrv_beta5_with):06378                  mul   
1E43 EBE0             (grfdrv_beta5_with):06379                  addb  ,s+
1E45 8900             (grfdrv_beta5_with):06380                  adca  #$00
1E47 3406             (grfdrv_beta5_with):06381                  pshs  d
1E49 EC64             (grfdrv_beta5_with):06382                  ldd   4,s
1E4B 3D               (grfdrv_beta5_with):06383                  mul   
1E4C E3E4             (grfdrv_beta5_with):06384                  addd  ,s
1E4E EDE4             (grfdrv_beta5_with):06385                  std   ,s
1E50 A665             (grfdrv_beta5_with):06386                  lda   5,s
1E52 E663             (grfdrv_beta5_with):06387                  ldb   3,s
1E54 3D               (grfdrv_beta5_with):06388                  mul   
1E55 EBE4             (grfdrv_beta5_with):06389                  addb  ,s
1E57 AE61             (grfdrv_beta5_with):06390                  ldx   1,s
1E59 6D63             (grfdrv_beta5_with):06391                  tst   3,s
1E5B 2A04             (grfdrv_beta5_with):06392                  bpl   L1B49
1E5D 6066             (grfdrv_beta5_with):06393                  neg   6,s
1E5F EB66             (grfdrv_beta5_with):06394                  addb  6,s
1E61 6D65             (grfdrv_beta5_with):06395         L1B49    tst   5,s
1E63 2A04             (grfdrv_beta5_with):06396                  bpl   L1B51
1E65 6064             (grfdrv_beta5_with):06397                  neg   4,s
1E67 EB64             (grfdrv_beta5_with):06398                  addb  4,s
1E69 1D               (grfdrv_beta5_with):06399         L1B51    sex                  Force to full 32 bits
1E6A 1F02             (grfdrv_beta5_with):06400                  tfr   d,y            Move to Y:U
1E6C 1F13             (grfdrv_beta5_with):06401                  tfr   x,u
1E6E 3263             (grfdrv_beta5_with):06402                  leas  3,s            Eat temps
1E70 3596             (grfdrv_beta5_with):06403                  puls  d,x,pc         Restore D:X & return
                      (grfdrv_beta5_with):06404                ENDC
                      (grfdrv_beta5_with):06405         
     1E72             (grfdrv_beta5_with):06406         L1B32.0  equ   *
                      (grfdrv_beta5_with):06407                IFNE  H6309
                      (grfdrv_beta5_with):06408                  clrd                 ATD: moved here for size
1E72                  (grfdrv_beta5_with):06409         L1B32    clrw
                      (grfdrv_beta5_with):06410                  stw   ,x
                      (grfdrv_beta5_with):06411                  ste   2,x
                      (grfdrv_beta5_with):06412                ELSE
1E72 4F               (grfdrv_beta5_with):06413                  clra
1E73 5F               (grfdrv_beta5_with):06414                  clrb
1E74 DDBF             (grfdrv_beta5_with):06415         L1B32    std   <grScrtch
1E76 4F               (grfdrv_beta5_with):06416                  clra
1E77 5F               (grfdrv_beta5_with):06417                  clrb
1E78 DDB5             (grfdrv_beta5_with):06418                  std   <$B5
1E7A ED84             (grfdrv_beta5_with):06419                  std   ,x
1E7C A702             (grfdrv_beta5_with):06420                  sta   2,x
1E7E DCBF             (grfdrv_beta5_with):06421                  ldd   <grScrtch
                      (grfdrv_beta5_with):06422                ENDC
1E80 ED03             (grfdrv_beta5_with):06423                  std   3,x
1E82 39               (grfdrv_beta5_with):06424                  rts   
                      (grfdrv_beta5_with):06425         
1E83 3406             (grfdrv_beta5_with):06426         L1B3B    pshs  d
                      (grfdrv_beta5_with):06427                IFNE  H6309
                      (grfdrv_beta5_with):06428                  ldq   ,y
                      (grfdrv_beta5_with):06429                  stq   ,x
                      (grfdrv_beta5_with):06430                ELSE
1E85 EC22             (grfdrv_beta5_with):06431                  ldd   2,y
1E87 DDB5             (grfdrv_beta5_with):06432                  std   <$B5
1E89 ED02             (grfdrv_beta5_with):06433                  std   2,x
1E8B ECA4             (grfdrv_beta5_with):06434                  ldd   ,y
1E8D ED84             (grfdrv_beta5_with):06435                  std   ,x
                      (grfdrv_beta5_with):06436                ENDC
1E8F E624             (grfdrv_beta5_with):06437                  ldb   4,y
1E91 E704             (grfdrv_beta5_with):06438                  stb   4,x
1E93 3586             (grfdrv_beta5_with):06439                  puls  pc,d
                      (grfdrv_beta5_with):06440         
1E95 1E23             (grfdrv_beta5_with):06441         L1B52    exg   y,u
1E97 1E12             (grfdrv_beta5_with):06442                  exg   x,y
1E99 8DE8             (grfdrv_beta5_with):06443                  bsr   L1B3B
1E9B 1E12             (grfdrv_beta5_with):06444                  exg   x,y
1E9D 1E23             (grfdrv_beta5_with):06445                  exg   y,u
1E9F 39               (grfdrv_beta5_with):06446                  rts
                      (grfdrv_beta5_with):06447                  
                      (grfdrv_beta5_with):06448         * Called by ellipse
                      (grfdrv_beta5_with):06449         * Add 16 bit to 40 bit number @ X (but don't carry in 5th byte)
1EA0 CC0001           (grfdrv_beta5_with):06450         L1B63    ldd   #$0001         for circle, etc. above
1EA3 3406             (grfdrv_beta5_with):06451         L1B64    pshs  d
1EA5 E303             (grfdrv_beta5_with):06452                  addd  3,x
1EA7 ED03             (grfdrv_beta5_with):06453                  std   3,x
1EA9 CC0000           (grfdrv_beta5_with):06454                  ldd   #$0000         For using carry
                      (grfdrv_beta5_with):06455                IFNE  H6309
                      (grfdrv_beta5_with):06456                  adcd  1,x
                      (grfdrv_beta5_with):06457                ELSE
1EAC E902             (grfdrv_beta5_with):06458                  adcb  2,x
1EAE A901             (grfdrv_beta5_with):06459                  adca  1,x
                      (grfdrv_beta5_with):06460                ENDC
1EB0 ED01             (grfdrv_beta5_with):06461                  std   1,x
1EB2 C600             (grfdrv_beta5_with):06462                  ldb   #$00           *CHANGE: WAS CLRB, BUT THAT WOULD SCREW CARRY UP
1EB4 E984             (grfdrv_beta5_with):06463                  adcb  ,x
1EB6 E784             (grfdrv_beta5_with):06464                  stb   ,x
1EB8 3586             (grfdrv_beta5_with):06465                  puls  pc,d
                      (grfdrv_beta5_with):06466         
                      (grfdrv_beta5_with):06467         * Add 40 bit # @ X to 40 bit # @ Y; result into X
1EBA 3406             (grfdrv_beta5_with):06468         L1B7A    pshs  d
1EBC EC03             (grfdrv_beta5_with):06469                  ldd   3,x
1EBE E323             (grfdrv_beta5_with):06470                  addd  3,y
1EC0 ED03             (grfdrv_beta5_with):06471                  std   3,x
1EC2 EC01             (grfdrv_beta5_with):06472                  ldd   1,x
                      (grfdrv_beta5_with):06473                IFNE  H6309
                      (grfdrv_beta5_with):06474                  adcd  1,y
                      (grfdrv_beta5_with):06475                ELSE
1EC4 E922             (grfdrv_beta5_with):06476                  adcb  2,y
1EC6 A921             (grfdrv_beta5_with):06477                  adca  1,y
                      (grfdrv_beta5_with):06478                ENDC
1EC8 ED01             (grfdrv_beta5_with):06479                  std   1,x
1ECA E684             (grfdrv_beta5_with):06480                  ldb   ,x
1ECC E9A4             (grfdrv_beta5_with):06481                  adcb  ,y
1ECE E784             (grfdrv_beta5_with):06482                  stb   ,x
1ED0 3586             (grfdrv_beta5_with):06483                  puls  pc,d
                      (grfdrv_beta5_with):06484         
1ED2 8DA0             (grfdrv_beta5_with):06485         L1BA1.0  bsr   L1B32
1ED4 3426             (grfdrv_beta5_with):06486         L1BA1    pshs  y,d
                      (grfdrv_beta5_with):06487                IFNE  H6309
                      (grfdrv_beta5_with):06488                  clrd
                      (grfdrv_beta5_with):06489                ELSE
1ED6 4F               (grfdrv_beta5_with):06490                  clra
1ED7 5F               (grfdrv_beta5_with):06491                  clrb
                      (grfdrv_beta5_with):06492                ENDC
1ED8 3406             (grfdrv_beta5_with):06493                  pshs  d              Put 3 0's on stack
1EDA 3404             (grfdrv_beta5_with):06494                  pshs  b
1EDC 31E4             (grfdrv_beta5_with):06495                  leay  ,s             Point Y to the 3 0's
1EDE 8D06             (grfdrv_beta5_with):06496                  bsr   L1BB4
1EE0 3263             (grfdrv_beta5_with):06497                  leas  3,s
1EE2 35A6             (grfdrv_beta5_with):06498                  puls  pc,y,d
                      (grfdrv_beta5_with):06499         
1EE4 8D8E             (grfdrv_beta5_with):06500         L1BB1    bsr   L1B32          Make 5 byte integer of D @ X
1EE6 3466             (grfdrv_beta5_with):06501         L1BB4    pshs  u,y,d          Preserve regs on stack
1EE8 3276             (grfdrv_beta5_with):06502                  leas  -10,s          Make buffer for two 5 byte integers
1EEA 33E4             (grfdrv_beta5_with):06503                  leau  ,s             Point U to first buffer
1EEC 1E13             (grfdrv_beta5_with):06504                  exg   x,u            Swap temp ptr with X ptr
1EEE 8D93             (grfdrv_beta5_with):06505                  bsr   L1B3B          Copy 5 byte # from Y to X (into 1st temp buffer)
1EF0 1E13             (grfdrv_beta5_with):06506                  exg   x,u            Swap ptrs back
1EF2 31C4             (grfdrv_beta5_with):06507                  leay  ,u             Move stack ptr to Y
1EF4 3345             (grfdrv_beta5_with):06508                  leau  5,u            Point U to 2nd 5 byte buffer
1EF6 8D9D             (grfdrv_beta5_with):06509                  bsr   L1B52
                      (grfdrv_beta5_with):06510                IFNE  H6309
                      (grfdrv_beta5_with):06511                  bsr   L1B32.0        ATD: CLRD moved for size
                      (grfdrv_beta5_with):06512                ELSE
1EF8 17FF77           (grfdrv_beta5_with):06513                  lbsr  L1B32.0
                      (grfdrv_beta5_with):06514                ENDC
1EFB 200E             (grfdrv_beta5_with):06515                  bra   L1BCB
                      (grfdrv_beta5_with):06516         
1EFD 6824             (grfdrv_beta5_with):06517         L1BC9    lsl   4,y            Multiply 5 byte integer by 2
                      (grfdrv_beta5_with):06518                IFNE  H6309
                      (grfdrv_beta5_with):06519                  ldq   ,y
                      (grfdrv_beta5_with):06520                  rolw
                      (grfdrv_beta5_with):06521                  rold
                      (grfdrv_beta5_with):06522                  stq   ,y
                      (grfdrv_beta5_with):06523                ELSE
1EFF EC22             (grfdrv_beta5_with):06524                  ldd   2,y
1F01 59               (grfdrv_beta5_with):06525                  rolb
1F02 49               (grfdrv_beta5_with):06526                  rola
1F03 ED22             (grfdrv_beta5_with):06527                  std   2,y
1F05 ECA4             (grfdrv_beta5_with):06528                  ldd   ,y
1F07 59               (grfdrv_beta5_with):06529                  rolb
1F08 49               (grfdrv_beta5_with):06530                  rola
1F09 EDA4             (grfdrv_beta5_with):06531                  std   ,y
                      (grfdrv_beta5_with):06532                ENDC
                      (grfdrv_beta5_with):06533         
                      (grfdrv_beta5_with):06534         * Loop-Divide U by 2 until U=0 or uneven divide
                      (grfdrv_beta5_with):06535         *  (each time, multiply Y by 2)
                      (grfdrv_beta5_with):06536         * When U=0 & no remainder, exits
                      (grfdrv_beta5_with):06537         * When U=0 & remainder, 5 byte # @ X = that # + 5 byte # @ Y
                      (grfdrv_beta5_with):06538         * NOTE: 6309 - If it works, change below & L1C06 to use LDQ/RORD/RORW/STQ
1F0B 64C4             (grfdrv_beta5_with):06539         L1BCB    lsr   ,u             Divide 5 byte integer by 2
1F0D 261E             (grfdrv_beta5_with):06540                  bne   L1C06          If any non-zero bytes, make sure to clear 0 flag
1F0F 6641             (grfdrv_beta5_with):06541                  ror   1,u
1F11 261C             (grfdrv_beta5_with):06542                  bne   L1C08
1F13 6642             (grfdrv_beta5_with):06543                  ror   2,u
1F15 261A             (grfdrv_beta5_with):06544                  bne   L1C0A
1F17 6643             (grfdrv_beta5_with):06545                  ror   3,u
1F19 2618             (grfdrv_beta5_with):06546                  bne   L1C0C
1F1B 6644             (grfdrv_beta5_with):06547                  ror   4,u
                      (grfdrv_beta5_with):06548         * If it gets this far, the resulting 5 byte # is zero
1F1D 2706             (grfdrv_beta5_with):06549                  beq   L1BD5          If result=0, skip ahead
1F1F 24DC             (grfdrv_beta5_with):06550         NewLbl   bcc   L1BC9          If no remainder, multiply Y by 2 again
1F21 8D97             (grfdrv_beta5_with):06551                  bsr   L1B7A          X=X+Y (5 byte #'s @ register names)
1F23 20D8             (grfdrv_beta5_with):06552                  bra   L1BC9          Continue (multiply Y by 2 & divide U by 2 again)
                      (grfdrv_beta5_with):06553         
1F25 2402             (grfdrv_beta5_with):06554         L1BD5    bcc   L1BD9          If result=0 & no remainder, done & return
1F27 8D91             (grfdrv_beta5_with):06555                  bsr   L1B7A          X=X+Y (5 byte #'s @ register names)
1F29 326A             (grfdrv_beta5_with):06556         L1BD9    leas  10,s           Eat 2 5 byte integers off of stack
1F2B 35E6             (grfdrv_beta5_with):06557                  puls  pc,u,y,d       Restore regs & return
                      (grfdrv_beta5_with):06558         
1F2D 6641             (grfdrv_beta5_with):06559         L1C06    ror   1,u            Finishes divide by 2 with non-zero result
1F2F 6642             (grfdrv_beta5_with):06560         L1C08    ror   2,u
1F31 6643             (grfdrv_beta5_with):06561         L1C0A    ror   3,u
1F33 6644             (grfdrv_beta5_with):06562         L1C0C    ror   4,u
1F35 20E8             (grfdrv_beta5_with):06563                  bra   NewLbl         Continue
                      (grfdrv_beta5_with):06564         
                      (grfdrv_beta5_with):06565         * Negate 5 byte integer w/o using registers
                      (grfdrv_beta5_with):06566         * 6809/6309 - check calling routines; if they don't need D (or Q), we
                      (grfdrv_beta5_with):06567         * may be able to speed this up.
1F37 1E12             (grfdrv_beta5_with):06568         L1C11.0  exg   x,y            ATD: moved here for size
1F39 6384             (grfdrv_beta5_with):06569         L1C11    com   ,x             Invert # @ X
1F3B 6301             (grfdrv_beta5_with):06570                  com   1,x
1F3D 6302             (grfdrv_beta5_with):06571                  com   2,x
1F3F 6303             (grfdrv_beta5_with):06572                  com   3,x
1F41 6304             (grfdrv_beta5_with):06573                  com   4,x
1F43 6C04             (grfdrv_beta5_with):06574                  inc   4,x
1F45 260E             (grfdrv_beta5_with):06575                  bne   L1C2D
1F47 6C03             (grfdrv_beta5_with):06576                  inc   3,x
1F49 260A             (grfdrv_beta5_with):06577                  bne   L1C2D
1F4B 6C02             (grfdrv_beta5_with):06578                  inc   2,x
1F4D 2606             (grfdrv_beta5_with):06579                  bne   L1C2D
1F4F 6C01             (grfdrv_beta5_with):06580                  inc   1,x
1F51 2602             (grfdrv_beta5_with):06581                  bne   L1C2D
1F53 6C84             (grfdrv_beta5_with):06582                  inc   ,x
1F55 39               (grfdrv_beta5_with):06583         L1C2D    rts
                      (grfdrv_beta5_with):06584         
                      (grfdrv_beta5_with):06585         * 5 byte compare ,x to ,y. Exits with CC set for higher, equal or lower
1F56 3406             (grfdrv_beta5_with):06586         L1C2E    pshs  d
1F58 EC84             (grfdrv_beta5_with):06587                  ldd   ,x
1F5A 10A3A4           (grfdrv_beta5_with):06588                  cmpd  ,y
1F5D 2615             (grfdrv_beta5_with):06589                  bne   L1C4D
1F5F EC02             (grfdrv_beta5_with):06590                  ldd   2,x
1F61 10A322           (grfdrv_beta5_with):06591                  cmpd  2,y
1F64 2606             (grfdrv_beta5_with):06592                  bne   L1C44
1F66 E604             (grfdrv_beta5_with):06593                  ldb   4,x
1F68 E124             (grfdrv_beta5_with):06594                  cmpb  4,y
1F6A 2708             (grfdrv_beta5_with):06595                  beq   L1C4D          Exit with zero flag set
1F6C 2203             (grfdrv_beta5_with):06596         L1C44    bhi   L1C4A          set CC for higher
1F6E 8608             (grfdrv_beta5_with):06597                  lda   #$08           Negative flag bit for CC (set CC for less than)
1F70 21               (grfdrv_beta5_with):06598                  fcb   $21            skip one byte: same cycle time, 1 byte smaller
1F71 4F               (grfdrv_beta5_with):06599         L1C4A    clra
1F72 1F8A             (grfdrv_beta5_with):06600         L1C4B    tfr   a,cc
1F74 3586             (grfdrv_beta5_with):06601         L1C4D    puls  pc,d
                      (grfdrv_beta5_with):06602         
                      (grfdrv_beta5_with):06603         
                      (grfdrv_beta5_with):06604         * FFill entry point
1F76 17FBD6           (grfdrv_beta5_with):06605         L1C4F    lbsr  L1884          ATD: +11C:-6B  exit if screen is text
1F79 C601             (grfdrv_beta5_with):06606                  ldb   #$01           Set flag that no error has occurred
1F7B D7B1             (grfdrv_beta5_with):06607                  stb   <$b1           LCB:Set flag that this is the 1st time through
1F7D D72A             (grfdrv_beta5_with):06608                  stb   <$002A
1F7F 170205           (grfdrv_beta5_with):06609                  lbsr  L1DF6          Check/calculate scaling
1F82 102500A6         (grfdrv_beta5_with):06610                  lbcs  L1CBF          Illegal coordinate, exit
                      (grfdrv_beta5_with):06611                IFNE  H6309
                      (grfdrv_beta5_with):06612                  ldq   <$47           Get original X,Y start (now scaled)
                      (grfdrv_beta5_with):06613                  stq   <$AD           Save them
                      (grfdrv_beta5_with):06614                ELSE
1F86 DC49             (grfdrv_beta5_with):06615                  ldd   <$49
1F88 DDB5             (grfdrv_beta5_with):06616                  std   <$B5
1F8A DDAF             (grfdrv_beta5_with):06617                  std   <$AF
1F8C DC47             (grfdrv_beta5_with):06618                  ldd   <$47
1F8E DDAD             (grfdrv_beta5_with):06619                  std   <$AD
                      (grfdrv_beta5_with):06620                ENDC
1F90 17F3C3           (grfdrv_beta5_with):06621                  lbsr  L1E9D          Calculate screen address to start filling @
1F93 9F72             (grfdrv_beta5_with):06622                  stx   <$0072         Save ptr to start pixel on physical screen
1F95 D774             (grfdrv_beta5_with):06623                  stb   <$0074         Save bit mask for start pixel
                      (grfdrv_beta5_with):06624         * replaced the code above with this: slightly larger, but L1F4B is smaller,
                      (grfdrv_beta5_with):06625         * and this code is only executed once, while L1F4B is executed many times
                      (grfdrv_beta5_with):06626         * the additional benefit is that <$0028 is now the full-byte color mask
                      (grfdrv_beta5_with):06627         * instead of the single pixel mask, and we can do byte-by-byte checks!
1F97 E484             (grfdrv_beta5_with):06628                  andb  ,x             get first pixel: somewhere in the byte...
1F99 8E46B9           (grfdrv_beta5_with):06629                  ldx   #GrfStrt+L075F-1   point to table of pixel masks
1F9C 9660             (grfdrv_beta5_with):06630                  lda   <$0060         Get screen type
1F9E A686             (grfdrv_beta5_with):06631                  lda   a,x            Get subtable ptr
1FA0 3086             (grfdrv_beta5_with):06632                  leax  a,x            Point to proper screen table
1FA2 A602             (grfdrv_beta5_with):06633                  lda   2,x            skip mask, color 0, get color 1 full-byte mask
1FA4 3D               (grfdrv_beta5_with):06634                  mul                  multiple color by $FF, $55, or $11 (1,4,16-color)
                      (grfdrv_beta5_with):06635                IFNE  H6309
                      (grfdrv_beta5_with):06636                  orr   b,a            bits are all mixed up: OR them together
                      (grfdrv_beta5_with):06637                ELSE
1FA5 D7BF             (grfdrv_beta5_with):06638                  stb   <grScrtch      bits are all mixed up: OR them together
1FA7 9ABF             (grfdrv_beta5_with):06639                  ora   <grScrtch
                      (grfdrv_beta5_with):06640                ENDC
                      (grfdrv_beta5_with):06641         * now A = full-byte color mask for the color we want to FFILL on
1FA9 8E58C4           (grfdrv_beta5_with):06642                  ldx   #GrfStrt+L16B1-1  point to pixels/byte table
1FAC D660             (grfdrv_beta5_with):06643                  ldb   <$0060         get screen type again
1FAE E685             (grfdrv_beta5_with):06644                  ldb   b,x            get B=pixels per byte
1FB0 DD28             (grfdrv_beta5_with):06645                  std   <$0028         save full-byte color mask, pixels per byte
                      (grfdrv_beta5_with):06646         * end of inserted code: a bit larger, but MUCH faster in the end
1FB2 A126             (grfdrv_beta5_with):06647                  cmpa  Wt.Fore,y      background color as current foreground color?
1FB4 276E             (grfdrv_beta5_with):06648                  beq   L1CB7          Yes, exit if no stack overflow occurred
1FB6 6FE2             (grfdrv_beta5_with):06649                  clr   ,-s            save y-direction=0: done FFILLing
1FB8 17027B           (grfdrv_beta5_with):06650                  lbsr  L1EF1          Setup start pixel mask & vector for right dir.
1FBB 8D05             (grfdrv_beta5_with):06651                  bsr   L1F1D
1FBD 9E72             (grfdrv_beta5_with):06652                  ldx   <$0072
1FBF 1600A9           (grfdrv_beta5_with):06653                  lbra  L1CC6
                      (grfdrv_beta5_with):06654         * Setup up bit mask & branch table for flood filling in the left direction
1FC2 9660             (grfdrv_beta5_with):06655         L1F1D    lda   <$0060         Get screen type
1FC4 8E5FCE           (grfdrv_beta5_with):06656                  ldx   #GrfStrt+L1F2C-2  Point to table
1FC7 48               (grfdrv_beta5_with):06657                  lsla                 x2 for table offset
1FC8 EC86             (grfdrv_beta5_with):06658                  ldd   a,x            Get mask and branch offset
1FCA 977C             (grfdrv_beta5_with):06659                  sta   <$007C         Preserve bit mask
1FCC 3A               (grfdrv_beta5_with):06660                  abx                  Store vector to bit shift routine
1FCD 9F7A             (grfdrv_beta5_with):06661                  stx   <$007A         save for later
1FCF 39               (grfdrv_beta5_with):06662                  rts
                      (grfdrv_beta5_with):06663                  
                      (grfdrv_beta5_with):06664         * Bit shift table to shift to the left 3,1 or 0 times
                      (grfdrv_beta5_with):06665         * Used by FFill when filling to the left
1FD0 010D             (grfdrv_beta5_with):06666         L1F2C    fcb   $01,L1F45-(L1F2C-2)  $1b  640 2-color
1FD2 030C             (grfdrv_beta5_with):06667                  fcb   $03,L1F44-(L1F2C-2)  $1a  320 4-color
1FD4 030C             (grfdrv_beta5_with):06668                  fcb   $03,L1F44-(L1F2C-2)  $1a  640 4-color
1FD6 0F0A             (grfdrv_beta5_with):06669                  fcb   $0f,L1F42-(L1F2C-2)  $18  320 16-color
                      (grfdrv_beta5_with):06670         * Bit shifts based on screen type
1FD8 58               (grfdrv_beta5_with):06671         L1F42    lslb
1FD9 58               (grfdrv_beta5_with):06672                  lslb
1FDA 58               (grfdrv_beta5_with):06673         L1F44    lslb
1FDB 39               (grfdrv_beta5_with):06674         L1F45    rts
                      (grfdrv_beta5_with):06675         
1FDC 9628             (grfdrv_beta5_with):06676         X1F08    lda   <$0028         get full-byte background color mask
1FDE A184             (grfdrv_beta5_with):06677                  cmpa  ,x             same as the byte we're on?
1FE0 2709             (grfdrv_beta5_with):06678                  beq   X1F16          yes, skip ahead
1FE2 3341             (grfdrv_beta5_with):06679                  leau  1,u            otherwise go to the right one pixel
1FE4 54               (grfdrv_beta5_with):06680         X1F0E    lsrb                 Shift to next bit mask
1FE5 2518             (grfdrv_beta5_with):06681                  bcs   X1F18          Finished byte, reload for next
1FE7 6E9F1177         (grfdrv_beta5_with):06682                  jmp   [>GrfMem+gr0077]   Shift B more (if needed) depending on scrn type
                      (grfdrv_beta5_with):06683         
                      (grfdrv_beta5_with):06684         * background is a byte value, but we don't know what the X coord is
1FEB 4F               (grfdrv_beta5_with):06685         X1F16    clra
1FEC D629             (grfdrv_beta5_with):06686                  ldb   <$29           D=pixels per byte
                      (grfdrv_beta5_with):06687                IFNE  H6309
                      (grfdrv_beta5_with):06688                  addr  d,u            go to the right one byte
                      (grfdrv_beta5_with):06689                ELSE
1FEE 33CB             (grfdrv_beta5_with):06690                  leau  d,u
                      (grfdrv_beta5_with):06691                ENDC
1FF0 5A               (grfdrv_beta5_with):06692                  decb                 make 2,4,8 into 1,3,7
                      (grfdrv_beta5_with):06693                IFNE  H6309
                      (grfdrv_beta5_with):06694                  comd                 get mask
                      (grfdrv_beta5_with):06695                  andr  d,u            force it to the left-most pixel of the byte
                      (grfdrv_beta5_with):06696                ELSE
1FF1 43               (grfdrv_beta5_with):06697                  coma
1FF2 53               (grfdrv_beta5_with):06698                  comb
1FF3 DDBF             (grfdrv_beta5_with):06699                  std   <grScrtch
1FF5 1F30             (grfdrv_beta5_with):06700                  tfr   u,d
1FF7 94BF             (grfdrv_beta5_with):06701                  anda  <grScrtch
1FF9 D4C0             (grfdrv_beta5_with):06702                  andb  <grScrtch+1
1FFB 1F03             (grfdrv_beta5_with):06703                  tfr   d,u
1FFD DCBF             (grfdrv_beta5_with):06704                  ldd   <grScrtch
                      (grfdrv_beta5_with):06705                ENDC
1FFF C601             (grfdrv_beta5_with):06706         X1F18    ldb   #1             Bump screen address by 1
2001 3A               (grfdrv_beta5_with):06707                  abx
2002 D679             (grfdrv_beta5_with):06708                  ldb   <$0079         Get start single pixel mask (1,2 or 4 bits set)
2004 39               (grfdrv_beta5_with):06709                  rts
                      (grfdrv_beta5_with):06710         
                      (grfdrv_beta5_with):06711         * Switch to next line for FFill
2005 3264             (grfdrv_beta5_with):06712         L1CC2    leas  4,s          Eat last set of X start ($47), end ($9B)
2007 E6E0             (grfdrv_beta5_with):06713         L1C93    ldb   ,s+            grab y-direction to travel
2009 2719             (grfdrv_beta5_with):06714                  beq   L1CB7          if zero, check if we're done
200B D72B             (grfdrv_beta5_with):06715                  stb   <$002B         save direction to travel in
200D EBE0             (grfdrv_beta5_with):06716                  addb  ,s+            add into saved Y-coordinate
200F E1A81E           (grfdrv_beta5_with):06717                  cmpb  <Wt.MaxY+1,y   check against the maximum Y position
2012 22F1             (grfdrv_beta5_with):06718                  bhi   L1CC2          too high, eat X start,end and go DOWN
2014 D74A             (grfdrv_beta5_with):06719                  stb   <$004A         save current Y-position
2016 3516             (grfdrv_beta5_with):06720                  puls  d,x            restore X start, X end
2018 DD47             (grfdrv_beta5_with):06721                  std   <$0047         save it for later
201A 9F4B             (grfdrv_beta5_with):06722                  stx   <$004B         save that, too
201C 17F337           (grfdrv_beta5_with):06723                  lbsr  L1E9D          get X=logical screen coordinates, B=pixel mask
201F D774             (grfdrv_beta5_with):06724                  stb   <$0074         save starting pixel mask
2021 7E60F6           (grfdrv_beta5_with):06725                  jmp   >GrfStrt+L1D40  go do some painting
                      (grfdrv_beta5_with):06726         
                      (grfdrv_beta5_with):06727         * Check if done filling or if error occurred
2024 5F               (grfdrv_beta5_with):06728         L1CB7    clrb                 Clear carry as default (no error)
2025 D62A             (grfdrv_beta5_with):06729                  ldb   <$002A         Get done/error flag
2027 2603             (grfdrv_beta5_with):06730                  bne   L1CBF          Done flag, exit without error
2029 C6BA             (grfdrv_beta5_with):06731         L1CBC    ldb   #E$StkOvf      Stack overflow error
202B 43               (grfdrv_beta5_with):06732                  coma
202C 7E50A5           (grfdrv_beta5_with):06733         L1CBF    jmp   >GrfStrt+SysRet
                      (grfdrv_beta5_with):06734         
                      (grfdrv_beta5_with):06735         * Move 1 pixel to left (for FFill)
                      (grfdrv_beta5_with):06736         * Entry: X=ptr to current byte on screen
                      (grfdrv_beta5_with):06737         *        U=X pixel #
                      (grfdrv_beta5_with):06738         *        B=current pixel mask
                      (grfdrv_beta5_with):06739         * <$0028 = full-byte color mask to paint on
                      (grfdrv_beta5_with):06740         * <$0029 = pixels per byte
202F A684             (grfdrv_beta5_with):06741         L1F34    lda   ,x             get current byte
2031 9128             (grfdrv_beta5_with):06742                  cmpa  <$0028         full-byte background color?
2033 2709             (grfdrv_beta5_with):06743                  beq   L1F3C          yes, go do full-checks
2035 335F             (grfdrv_beta5_with):06744                  leau  -1,u           drop down by 1
2037 58               (grfdrv_beta5_with):06745                  lslb                 Move pixel mask to left by 1
2038 2518             (grfdrv_beta5_with):06746                  bcs   L1F46          If finished byte, skip ahead
203A 6E9F117A         (grfdrv_beta5_with):06747                  jmp   [>GrfMem+gr007A]  Adjust for proper screen type (further LSLB's)
                      (grfdrv_beta5_with):06748         
203E 4F               (grfdrv_beta5_with):06749         L1F3C    clra                 make A=0
203F D629             (grfdrv_beta5_with):06750                  ldb   <$0029         get 16-bit value of pixels per byte
2041 5A               (grfdrv_beta5_with):06751                  decb                 get 7,3,1 pixel mask
                      (grfdrv_beta5_with):06752                IFNE  H6309
                      (grfdrv_beta5_with):06753                  comd                 get pixel mask, with low bits cleared out,
                      (grfdrv_beta5_with):06754                  andr  d,u            i.e. ensure we're to the LEFT as far as possible
                      (grfdrv_beta5_with):06755                ELSE
2042 43               (grfdrv_beta5_with):06756                  coma
2043 53               (grfdrv_beta5_with):06757                  comb
2044 DDBF             (grfdrv_beta5_with):06758                  std   <grScrtch
2046 1F30             (grfdrv_beta5_with):06759                  tfr   u,d            get pixel mask, with low bits cleared out,
2048 94BF             (grfdrv_beta5_with):06760                  anda  <grScrtch      i.e. ensure we're to the LEFT as far as possible
204A D4C0             (grfdrv_beta5_with):06761                  andb  <grScrtch+1
204C 1F03             (grfdrv_beta5_with):06762                  tfr   d,u
204E DCBF             (grfdrv_beta5_with):06763                  ldd   <grScrtch
                      (grfdrv_beta5_with):06764                ENDC
2050 335F             (grfdrv_beta5_with):06765                  leau  -1,u           go to the left one pixel
2052 D67C             (grfdrv_beta5_with):06766         L1F46    ldb   <$007C         Get start pixel mask (on right side)
2054 301F             (grfdrv_beta5_with):06767                  leax  -1,x           Bump screen's pixel ptr left & return
2056 39               (grfdrv_beta5_with):06768                  rts   
                      (grfdrv_beta5_with):06769         
                      (grfdrv_beta5_with):06770         * search until we find the left-most pixel which is NOT the paint on pixel,
                      (grfdrv_beta5_with):06771         * or the edge of the screen
                      (grfdrv_beta5_with):06772         * Exits with B=pixel mask
                      (grfdrv_beta5_with):06773         * W = current X position
                      (grfdrv_beta5_with):06774         * U = W
2057 D674             (grfdrv_beta5_with):06775         FFILL.1  ldb   <$0074         Get pixel mask for pixel we are doing
2059 DE47             (grfdrv_beta5_with):06776                  ldu   <$0047
205B 17008A           (grfdrv_beta5_with):06777         L1CC8    lbsr   L1F4B         check pixel
205E 2608             (grfdrv_beta5_with):06778                  bne   L1CD4          backup if not the background color pixel
2060 8DCD             (grfdrv_beta5_with):06779                  bsr   L1F34          exits with U = x-coord
                      (grfdrv_beta5_with):06780                IFNE  H6309
                      (grfdrv_beta5_with):06781                  cmpr  0,u            has it filled to line position -1?
                      (grfdrv_beta5_with):06782                ELSE
2062 11830000         (grfdrv_beta5_with):06783                  cmpu  #0
                      (grfdrv_beta5_with):06784                ENDC
2066 2AF3             (grfdrv_beta5_with):06785                  bpl   L1CC8          we're still on the same color, continue
                      (grfdrv_beta5_with):06786         * we've found the left boundary, go to the right
     2068             (grfdrv_beta5_with):06787         L1CD4    equ   *
                      (grfdrv_beta5_with):06788                IFNE  H6309
                      (grfdrv_beta5_with):06789                  bra   X1F08          go to the right one pixel: account for extra DECW
                      (grfdrv_beta5_with):06790                ELSE
2068 16FF71           (grfdrv_beta5_with):06791                  lbra  X1F08
                      (grfdrv_beta5_with):06792                ENDC
                      (grfdrv_beta5_with):06793         
206B 8DEA             (grfdrv_beta5_with):06794         L1CC6    bsr   FFILL.1
206D DF47             (grfdrv_beta5_with):06795                  stu   <$0047
206F DF9B             (grfdrv_beta5_with):06796                  stu   <$009B         save for later
2071 8D0A             (grfdrv_beta5_with):06797                  bsr   FFILL.2        paint to the right, a pixel at a time
2073 86FF             (grfdrv_beta5_with):06798                  lda   #-1            ($FF) get a flag: go UP one line
2075 8D5F             (grfdrv_beta5_with):06799                  bsr   L1D05          set up for another fill
2077 8601             (grfdrv_beta5_with):06800                  lda   #1             get a flag: go DOWN one line
2079 8D5B             (grfdrv_beta5_with):06801                  bsr   L1D05          save more things on the stack
207B 208A             (grfdrv_beta5_with):06802                  bra   L1C93          go do another line
                      (grfdrv_beta5_with):06803         
                      (grfdrv_beta5_with):06804         * paint to the right, a pixel at a time.
                      (grfdrv_beta5_with):06805         * Exits with B=pixel mask
                      (grfdrv_beta5_with):06806         * W = current X position
                      (grfdrv_beta5_with):06807         * U = W
207D DE47             (grfdrv_beta5_with):06808         FFILL.2  ldu   <$0047
207F DF20             (grfdrv_beta5_with):06809                  stu   <$20           save X-start for this fill routine
2081 0F2C             (grfdrv_beta5_with):06810                  clr   <$2C           clear flag: no pixels done yet
2083 8D63             (grfdrv_beta5_with):06811         FFILL.2a bsr   L1F4B          check if we hit color other than background
2085 260B             (grfdrv_beta5_with):06812                  bne   L1CEA          yes, skip ahead
2087 17FF52           (grfdrv_beta5_with):06813                  lbsr  X1F08          go to the right one pixel
208A D72C             (grfdrv_beta5_with):06814                  stb   <$2C
208C 11A3A81B         (grfdrv_beta5_with):06815                  cmpu  Wt.MaxX,y      Are we at right side of window?
2090 23F1             (grfdrv_beta5_with):06816                  bls   FFILL.2a       no, continue
                      (grfdrv_beta5_with):06817         * we've gone too far to the right
2092 8D9B             (grfdrv_beta5_with):06818         L1CEA    bsr   L1F34          back up one pixel
                      (grfdrv_beta5_with):06819         * ATD: New routine added.  Do a horizontal line from left to right!
                      (grfdrv_beta5_with):06820         * This is not substantially faster, perhaps, but it does look better.
2094 3406             (grfdrv_beta5_with):06821                  pshs  d
2096 962C             (grfdrv_beta5_with):06822                  lda   <$2C           check flag
2098 2738             (grfdrv_beta5_with):06823                  beq   L1D03          skip ahead: no pixels to draw
                      (grfdrv_beta5_with):06824         * LCB: New routine added to check if we are redoing the 1st pixel we started
                      (grfdrv_beta5_with):06825         * painting at. If we are, exit (Helps fix certain PSet variations that allow
                      (grfdrv_beta5_with):06826         * infinite recursions (loops) that hang Grfdrv - like in SnakeByte game)
209A 96B1             (grfdrv_beta5_with):06827                  lda   <$B1           Get flag that we are on 1st line of FFill
209C 2704             (grfdrv_beta5_with):06828                  beq   DoChecks       Not 1st time, do checks
209E 0FB1             (grfdrv_beta5_with):06829                  clr   <$B1           Clear flag & do draw
20A0 2019             (grfdrv_beta5_with):06830                  bra   Not1st
                      (grfdrv_beta5_with):06831         
20A2 DCAF             (grfdrv_beta5_with):06832         DoChecks ldd   <$AF           Get Y value from 1st FFill line
20A4 109349           (grfdrv_beta5_with):06833                  cmpd  <$49           Same as current?
20A7 2612             (grfdrv_beta5_with):06834                  bne   Not1st         No, go draw
20A9 1193AD           (grfdrv_beta5_with):06835                  cmpu  <$AD           right side X lower or same as original X?
20AC 220D             (grfdrv_beta5_with):06836                  bhi   Not1st         No, draw it
20AE DC20             (grfdrv_beta5_with):06837                  ldd   <$20           Get left X coord
20B0 1093AD           (grfdrv_beta5_with):06838                  cmpd  <$AD           left side X higher or same as original X?
20B3 2506             (grfdrv_beta5_with):06839                  blo   Not1st         No, draw it
20B5 3264             (grfdrv_beta5_with):06840                  leas  4,s            We already did this, eat stack & exit w/o error
20B7 5F               (grfdrv_beta5_with):06841                  clrb
20B8 7E50A5           (grfdrv_beta5_with):06842                  jmp   >GrfStrt+SysRet
                      (grfdrv_beta5_with):06843         
20BB DC4B             (grfdrv_beta5_with):06844         Not1st   ldd   <$4B           get old coordinate: U=<$0047 already
20BD 3476             (grfdrv_beta5_with):06845                  pshs  d,x,y,u
20BF DF4B             (grfdrv_beta5_with):06846                  stu   <$4B           save as X-end
20C1 DC20             (grfdrv_beta5_with):06847                  ldd   <$20           get LHS X coordinate
20C3 DD47             (grfdrv_beta5_with):06848                  std   <$47           save for the line routine
                      (grfdrv_beta5_with):06849         * ATD: warning: This routine trashes W!
                      (grfdrv_beta5_with):06850                IFNE  H6309
                      (grfdrv_beta5_with):06851                  ldw   <$68           get LSET vector
                      (grfdrv_beta5_with):06852                ELSE
20C5 DE68             (grfdrv_beta5_with):06853                  ldu   <$68
20C7 DFB5             (grfdrv_beta5_with):06854                  stu   <$B5
                      (grfdrv_beta5_with):06855                ENDC
20C9 DE64             (grfdrv_beta5_with):06856                  ldu   <$64           and PSET vector
20CB BD58CE           (grfdrv_beta5_with):06857                  jsr   >GrfStrt+L1690 do fast horizontal line
20CE 3576             (grfdrv_beta5_with):06858                  puls  d,x,y,u        restore registers
20D0 DD4B             (grfdrv_beta5_with):06859                  std   <$004B         save
20D2 DF47             (grfdrv_beta5_with):06860         L1D03    stu   <$0047         save
20D4 3586             (grfdrv_beta5_with):06861                  puls  d,pc
                      (grfdrv_beta5_with):06862         
20D6 3540             (grfdrv_beta5_with):06863         L1D05    puls  u              restore PC of calling routine
20D8 D64A             (grfdrv_beta5_with):06864                  ldb   <$004A         get B=working Y coordinate
20DA 3436             (grfdrv_beta5_with):06865                  pshs  y,x,d          save PC, and 4 junk bytes; ???RG
                      (grfdrv_beta5_with):06866                IFNE  H6309
                      (grfdrv_beta5_with):06867                  ldw   <$0047         Get 'working' X coord
                      (grfdrv_beta5_with):06868                ELSE
20DC DC47             (grfdrv_beta5_with):06869                  ldd   <$47
20DE DDB5             (grfdrv_beta5_with):06870                  std   <$B5
20E0 ED64             (grfdrv_beta5_with):06871                  std   4,s            see stq 2,s below
                      (grfdrv_beta5_with):06872                ENDC
20E2 DC9B             (grfdrv_beta5_with):06873                  ldd   <$009B         and left-most pixel we were at
                      (grfdrv_beta5_with):06874                IFNE  H6309
                      (grfdrv_beta5_with):06875                  stq   2,s            save X start, end positions on the stack
                      (grfdrv_beta5_with):06876                ELSE
20E4 ED62             (grfdrv_beta5_with):06877                  std   2,s            see std 4,s above
                      (grfdrv_beta5_with):06878                ENDC
20E6 6EC4             (grfdrv_beta5_with):06879                  jmp   ,u             return to calling routine
                      (grfdrv_beta5_with):06880         
                      (grfdrv_beta5_with):06881         * ATD: mod: <$0028 is full-byte color mask
                      (grfdrv_beta5_with):06882         * Entry: X=ptr to current byte on screen
                      (grfdrv_beta5_with):06883         *        B=bit mask for current pixel
                      (grfdrv_beta5_with):06884         * Exit:  B=bit mask for current pixel
                      (grfdrv_beta5_with):06885         *        CC set to check if we hit border of FFill
20E8 3404             (grfdrv_beta5_with):06886         L1F4B    pshs  b              Preserve pixel mask
20EA 1F98             (grfdrv_beta5_with):06887                  tfr   b,a            Duplicate it
20EC A484             (grfdrv_beta5_with):06888                  anda  ,x             Get common bits between screen/mask
20EE D428             (grfdrv_beta5_with):06889                  andb  <$0028         and common bits between full-byte color and mask
                      (grfdrv_beta5_with):06890                IFNE  H6309
                      (grfdrv_beta5_with):06891                  cmpr  b,a            are the 2 colors the same?
                      (grfdrv_beta5_with):06892                ELSE
20F0 D7BF             (grfdrv_beta5_with):06893                  stb   <grScrtch
20F2 91BF             (grfdrv_beta5_with):06894                  cmpa  <grScrtch
                      (grfdrv_beta5_with):06895                ENDC
20F4 3584             (grfdrv_beta5_with):06896                  puls  pc,b           Restore pixel mask & return
                      (grfdrv_beta5_with):06897         
                      (grfdrv_beta5_with):06898         * start painting at a new position.
                      (grfdrv_beta5_with):06899         * <$47=start X, <$49=current Y,  <$4B=end X
                      (grfdrv_beta5_with):06900         * Check to the left for bounds
20F6 DE47             (grfdrv_beta5_with):06901         L1D40    ldu   <$0047         get current X
20F8 335E             (grfdrv_beta5_with):06902                  leau  -2,u           go to the left 2 pixels? : wrap around stop pixel
20FA DF9B             (grfdrv_beta5_with):06903                  stu   <$009B         save position
20FC 17FF58           (grfdrv_beta5_with):06904                  lbsr  FFILL.1        search to the left
20FF 2003             (grfdrv_beta5_with):06905                  bra   L1D58          skip ahead
                      (grfdrv_beta5_with):06906         
2101 17FED8           (grfdrv_beta5_with):06907         L1D55    lbsr  X1F08          go to the right one pixel
2104 DF47             (grfdrv_beta5_with):06908         L1D58    stu   <$0047         save X coordinate
2106 11934B           (grfdrv_beta5_with):06909                  cmpu  <$004B         check against X-end from previous line
2109 1022FEFA         (grfdrv_beta5_with):06910                  lbhi  L1C93          too far to the right, skip this line
210D 8DD9             (grfdrv_beta5_with):06911                  bsr   L1F4B          check the pixel
210F 26F0             (grfdrv_beta5_with):06912                  bne   L1D55          not the same, go to the right
2111 D774             (grfdrv_beta5_with):06913                  stb   <$0074         save starting pixel mask
2113 11939B           (grfdrv_beta5_with):06914                  cmpu  <$009B         check current X against saved start (X-2)
2116 2E16             (grfdrv_beta5_with):06915                  bgt   L1D87          higher, so we do a paint to the right
2118 119C3B           (grfdrv_beta5_with):06916                  cmps  <$3B           check against lowest possible stack
211B 2204             (grfdrv_beta5_with):06917                  bhi   StkGd1         Good, continue
211D 0F2A             (grfdrv_beta5_with):06918                  clr   <$2A           Clear flag: stack is too low
211F 200D             (grfdrv_beta5_with):06919                  bra   L1D87          if 0: stack is too low
                      (grfdrv_beta5_with):06920                  
2121 DE9B             (grfdrv_beta5_with):06921         StkGd1   ldu   <$009B         grab X
2123 DC47             (grfdrv_beta5_with):06922                  ldd   <$0047         grab current X
                      (grfdrv_beta5_with):06923         * ATD: removed check for X coord <0, as the above call to X1F08 ensures it's
                      (grfdrv_beta5_with):06924         * at least 0.
2125 3446             (grfdrv_beta5_with):06925                  pshs  d,u            Save X start, X end coordinates
2127 D64A             (grfdrv_beta5_with):06926                  ldb   <$004A         Get Y coord
2129 962B             (grfdrv_beta5_with):06927                  lda   <$002B         Get save current Y-direction
212B 40               (grfdrv_beta5_with):06928                  nega                 Change direction
212C 3406             (grfdrv_beta5_with):06929                  pshs  d              Save direction flag and Y coord
212E DC47             (grfdrv_beta5_with):06930         L1D87    ldd   <$0047         Get current X coord
2130 DD9B             (grfdrv_beta5_with):06931                  std   <$009B         Save duplicate (for direction change???)
2132 D674             (grfdrv_beta5_with):06932                  ldb   <$0074         Get current pixel mask
                      (grfdrv_beta5_with):06933         * Paint towards right side
2134 17FF46           (grfdrv_beta5_with):06934         L1D98    lbsr  FFILL.2
2137 D774             (grfdrv_beta5_with):06935                  stb   <$0074         Save new start pixel mask
2139 119C3B           (grfdrv_beta5_with):06936                  cmps  <$3B           check against lowest possible stack
213C 2204             (grfdrv_beta5_with):06937                  bhi   StkGd2         Good, continue
213E 0F2A             (grfdrv_beta5_with):06938                  clr   <$2A           Clear flag: stack is too low
2140 2008             (grfdrv_beta5_with):06939                  bra   L1DAA          if 0: stack is too low
                      (grfdrv_beta5_with):06940         
2142 962B             (grfdrv_beta5_with):06941         StkGd2   lda   <$002B         grab direction flag
2144 8D90             (grfdrv_beta5_with):06942                  bsr   L1D05          save current X start, end on-stack
2146 D674             (grfdrv_beta5_with):06943                  ldb   <$0074         grab starting pixel mask
2148 DE47             (grfdrv_beta5_with):06944                  ldu   <$0047         restore current X-coord
                      (grfdrv_beta5_with):06945         * Small loop
214A 17FE8F           (grfdrv_beta5_with):06946         L1DAA    lbsr  X1F08          Adjust for next pixel on the right
214D D774             (grfdrv_beta5_with):06947                  stb   <$0074         Save new pixel mask
214F DF47             (grfdrv_beta5_with):06948                  stu   <$0047         and new X-coord
2151 11A3A81B         (grfdrv_beta5_with):06949                  cmpu  Wt.MaxX,y      Hit right side of window?
2155 2E0B             (grfdrv_beta5_with):06950                  bgt   L1DC4          Yes, skip ahead
2157 11934B           (grfdrv_beta5_with):06951                  cmpu  <$004B         Is current X coord going past Draw ptr X coord?
215A 2E06             (grfdrv_beta5_with):06952                  bgt   L1DC4          Yes, skip ahead
215C 8D8A             (grfdrv_beta5_with):06953                  bsr   L1F4B          Check if we are hitting a drawn border
215E 26EA             (grfdrv_beta5_with):06954                  bne   L1DAA          No, keep FFilling
2160 20CC             (grfdrv_beta5_with):06955                  bra   L1D87          paint to RHS of the screen
                      (grfdrv_beta5_with):06956         
                      (grfdrv_beta5_with):06957         * could be subroutine call to L1DEE
                      (grfdrv_beta5_with):06958         * saves 6 bytes, adds 10 clock cycles
2162 119C3B           (grfdrv_beta5_with):06959         L1DC4    cmps  <$003B         Stack about to get too big?
2165 2202             (grfdrv_beta5_with):06960                  bhi   L1DCB          No, continue
2167 0F2A             (grfdrv_beta5_with):06961                  clr   <$002A         Yes, set flag to indicate stack overflow
2169 335F             (grfdrv_beta5_with):06962         L1DCB    leau  -1,u           go to the left one pixel
216B DF47             (grfdrv_beta5_with):06963                  stu   <$0047         Save X coord
216D DC4B             (grfdrv_beta5_with):06964                  ldd   <$004B         Get draw ptr X coord
216F C30002           (grfdrv_beta5_with):06965                  addd  #2             Bump up by 2
                      (grfdrv_beta5_with):06966                IFNE  H6309
                      (grfdrv_beta5_with):06967                  cmpr  u,d            Past current X coord in FFill?
                      (grfdrv_beta5_with):06968                ELSE
2172 DFBF             (grfdrv_beta5_with):06969                  stu    <grScrtch     Past current X coord in FFill?
2174 1093BF           (grfdrv_beta5_with):06970                  cmpd   <grScrtch
                      (grfdrv_beta5_with):06971                ENDC
2177 1022FE8C         (grfdrv_beta5_with):06972                  lbhi  L1C93          Yes, go change Y-direction
217B 3446             (grfdrv_beta5_with):06973                  pshs  d,u            Save draw ptrs X+2, current X coord
217D D64A             (grfdrv_beta5_with):06974                  ldb   <$004A         Get working Y coord
217F 962B             (grfdrv_beta5_with):06975                  lda   <$002B         get y-direction flag
2181 40               (grfdrv_beta5_with):06976                  nega                 Change direction
2182 3406             (grfdrv_beta5_with):06977                  pshs  d              Save direction flag and Y coord
2184 7E6007           (grfdrv_beta5_with):06978         L1DEB    jmp   >GrfStrt+L1C93 go do another direction
                      (grfdrv_beta5_with):06979         
                      (grfdrv_beta5_with):06980         * Check validity & scale X/Y coords
2187 C647             (grfdrv_beta5_with):06981         L1DF6    ldb   #$47           get offset in grfdrv mem to working X coord
                      (grfdrv_beta5_with):06982         * Entry point if using different X/Y coord (current coord, current size)
                      (grfdrv_beta5_with):06983         * B=Offset into GRFDRV global mem to get coord pair
2189 8D50             (grfdrv_beta5_with):06984         L1DF8    bsr   L1E2C          Scale X/Y coord pair if scaling is turned on
                      (grfdrv_beta5_with):06985         * Check requested X/Y co-ordinates to window table to see if they are in range
                      (grfdrv_beta5_with):06986                IFNE  H6309
                      (grfdrv_beta5_with):06987                  ldq   ,x             Get requested X & Y coordinates
                      (grfdrv_beta5_with):06988                ELSE
218B EC02             (grfdrv_beta5_with):06989                  ldd   2,x
218D DDB5             (grfdrv_beta5_with):06990                  std   <$B5
218F EC84             (grfdrv_beta5_with):06991                  ldd   ,x
                      (grfdrv_beta5_with):06992                ENDC
2191 10A3A81B         (grfdrv_beta5_with):06993                  cmpd  Wt.MaxX,y      X within max. range of window?
2195 220E             (grfdrv_beta5_with):06994                  bhi   L1E99          No, return error
                      (grfdrv_beta5_with):06995                IFNE  H6309
                      (grfdrv_beta5_with):06996                  cmpw  Wt.MaxY,y      Y within max. range of window? (keep it 16-bit)
                      (grfdrv_beta5_with):06997                ELSE
2197 3410             (grfdrv_beta5_with):06998                  pshs  x
2199 9EB5             (grfdrv_beta5_with):06999                  ldx   <$B5
219B ACA81D           (grfdrv_beta5_with):07000                  cmpx  Wt.MaxY,y
219E 3510             (grfdrv_beta5_with):07001                  puls  x
                      (grfdrv_beta5_with):07002                ENDC
21A0 2203             (grfdrv_beta5_with):07003                  bhi   L1E99          No, return error
21A2 1CFE             (grfdrv_beta5_with):07004                  andcc #^Carry        They work, return without error
21A4 39               (grfdrv_beta5_with):07005                  rts
                      (grfdrv_beta5_with):07006         
21A5 53               (grfdrv_beta5_with):07007         L1E99    comb                 set carry
21A6 C6BD             (grfdrv_beta5_with):07008                  ldb   #E$ICoord      get error code
21A8 39               (grfdrv_beta5_with):07009                  rts                  return
                      (grfdrv_beta5_with):07010         
21A9 C64B             (grfdrv_beta5_with):07011         L1DFD    ldb   #$4B           Get offset in grfdrv mem to current X,Y coord
21AB 20DC             (grfdrv_beta5_with):07012                  bra   L1DF8
                      (grfdrv_beta5_with):07013         
21AD C64F             (grfdrv_beta5_with):07014         L1E01    ldb   #$4F           Get offset in Grfdrv mem to X,Y size
21AF 20D8             (grfdrv_beta5_with):07015                  bra   L1DF8
                      (grfdrv_beta5_with):07016         
21B1 C620             (grfdrv_beta5_with):07017         L1E05    ldb   #$20           Point to Arc 'clip line' Start coordinate
                      (grfdrv_beta5_with):07018         * Check both X and Y coordinates and see if valid (negative #'s OK)
                      (grfdrv_beta5_with):07019         * Entry : B=Offset into GRFDRV mem to get X & Y (16 bit) coordinates
21B3 8D26             (grfdrv_beta5_with):07020         L1E07    bsr   L1E2C          Do offset of X into grfdrv space by B bytes
                      (grfdrv_beta5_with):07021                IFNE  H6309
                      (grfdrv_beta5_with):07022                  ldw   #639           Maximum value allowed
                      (grfdrv_beta5_with):07023                ELSE
21B5 CC027F           (grfdrv_beta5_with):07024                  ldd   #639           Maximum value allowed
21B8 DDB5             (grfdrv_beta5_with):07025                  std   <$B5
                      (grfdrv_beta5_with):07026                ENDC
21BA 8D07             (grfdrv_beta5_with):07027                  bsr   L1E13          Check if requested coordinate is max. or less
21BC 2514             (grfdrv_beta5_with):07028                  bcs   L1E23          Error, exit
                      (grfdrv_beta5_with):07029                IFNE  H6309
                      (grfdrv_beta5_with):07030                  ldw   #MaxLines*8-1  Maximum Y coord allowed; check it too
                      (grfdrv_beta5_with):07031                ELSE
21BE CC00C7           (grfdrv_beta5_with):07032                  ldd   #MaxLines*8-1  Maximum Y coord allowed, check it too
21C1 DDB5             (grfdrv_beta5_with):07033                  std   <$B5
                      (grfdrv_beta5_with):07034                ENDC
                      (grfdrv_beta5_with):07035         * Make sure 16 bit coordinate is in range
                      (grfdrv_beta5_with):07036         * Entry: W=Maximum value allowed
                      (grfdrv_beta5_with):07037         *        X=Pointer to current 16 bit number to check
                      (grfdrv_beta5_with):07038         * Exit:  B=Error code (carry set if error)
21C3 EC81             (grfdrv_beta5_with):07039         L1E13    ldd   ,x++           Get original value we are checking
21C5 2A05             (grfdrv_beta5_with):07040                  bpl   L1E1D          Positive, do the compare
                      (grfdrv_beta5_with):07041                IFNE  H6309
                      (grfdrv_beta5_with):07042                  negd                 Flip a negative # to a positive #
21C7                  (grfdrv_beta5_with):07043         L1E1D    cmpr  w,d            If beyond maximum, return with Illegal coord error
                      (grfdrv_beta5_with):07044                ELSE
21C7 43               (grfdrv_beta5_with):07045                  coma                 Flip a negative # to a positive #
21C8 53               (grfdrv_beta5_with):07046                  comb
21C9 C30001           (grfdrv_beta5_with):07047                  addd  #1
21CC 1093B5           (grfdrv_beta5_with):07048         L1E1D    cmpd  <$B5           If beyond maximum, return with Illegal coord error
                      (grfdrv_beta5_with):07049                ENDC
21CF 2ED4             (grfdrv_beta5_with):07050                  bgt   L1E99
21D1 5F               (grfdrv_beta5_with):07051                  clrb                 In range, no error
21D2 39               (grfdrv_beta5_with):07052         L1E23    rts   
                      (grfdrv_beta5_with):07053         
21D3 C624             (grfdrv_beta5_with):07054         L1E24    ldb   #$24           Point to Arc 'clip line' end coordinate
21D5 20DC             (grfdrv_beta5_with):07055                  bra   L1E07
                      (grfdrv_beta5_with):07056         
21D7 C653             (grfdrv_beta5_with):07057         L1E28    ldb   #$53           Point to Horizontal Radius
21D9 20D8             (grfdrv_beta5_with):07058                  bra   L1E07
                      (grfdrv_beta5_with):07059         
                      (grfdrv_beta5_with):07060         * Offset X into grfdrv mem by B bytes (to point to 2 byte coordinates)
                      (grfdrv_beta5_with):07061         * Entry: B=offset into GRFDRV mem of X,Y coord pair (2 bytes each axis)
                      (grfdrv_beta5_with):07062         * Exit: X=ptr to GRFDRV mem of coords we are working on
                      (grfdrv_beta5_with):07063         *       ,x - 1,x = scaled X coord
                      (grfdrv_beta5_with):07064         *      2,x - 3,x = scaled Y coord
21DB 8E1100           (grfdrv_beta5_with):07065         L1E2C    ldx   #GrfMem        Point to GRFDRV mem
21DE 3A               (grfdrv_beta5_with):07066                  abx                  Point X to X,y coord pair we are working with
                      (grfdrv_beta5_with):07067                IFNE  H6309
                      (grfdrv_beta5_with):07068                  tim   #Scale,Wt.BSW,y  Scaling flag on?
                      (grfdrv_beta5_with):07069                ELSE
21DF A629             (grfdrv_beta5_with):07070                  lda   Wt.BSW,y
21E1 8508             (grfdrv_beta5_with):07071                  bita  #Scale
                      (grfdrv_beta5_with):07072                ENDC
21E3 2704             (grfdrv_beta5_with):07073                  beq   L1E39          no, return
21E5 EC39             (grfdrv_beta5_with):07074                  ldd   Wt.SXFct,y     Get X & Y scaling values
21E7 2601             (grfdrv_beta5_with):07075                  bne   L1E3A          If either <>0, scaling is required
21E9 39               (grfdrv_beta5_with):07076         L1E39    rts                  If both 0 (256), scaling not required
                      (grfdrv_beta5_with):07077         
                      (grfdrv_beta5_with):07078         * Scaling required - Scale both X & Y coords
                      (grfdrv_beta5_with):07079         * Change so ldb ,s/beq are both done before ldx ,y (will save time if that
                      (grfdrv_beta5_with):07080         * particular axis does not require scaling)
                      (grfdrv_beta5_with):07081         * Entry:X=Ptr to X,Y coordinate pair (2 bytes each)
                      (grfdrv_beta5_with):07082         *       Y=Window tble ptr
                      (grfdrv_beta5_with):07083         *       A=X scaling multiplier
                      (grfdrv_beta5_with):07084         *       B=Y scaling multiplier
21EA 3402             (grfdrv_beta5_with):07085         L1E3A    pshs  a              Preserve X scaling value
21EC 5D               (grfdrv_beta5_with):07086                  tstb                 Y need scaling?
21ED 2721             (grfdrv_beta5_with):07087                  beq   NoY            No, skip scaling it
                      (grfdrv_beta5_with):07088         * ATD: 10 bytes smaller, 20 cycles longer
                      (grfdrv_beta5_with):07089         * leax 2,x
                      (grfdrv_beta5_with):07090         * bsr L1E4A
                      (grfdrv_beta5_with):07091         * leax -2,s
21EF 4F               (grfdrv_beta5_with):07092                  clra                 D=Y scaling value
                      (grfdrv_beta5_with):07093                IFNE  H6309
                      (grfdrv_beta5_with):07094                  muld  2,x            Multiply by Y coordinate
                      (grfdrv_beta5_with):07095                  tfr   b,a            Move 16 bit result we want to D
                      (grfdrv_beta5_with):07096                  tfr   e,b
                      (grfdrv_beta5_with):07097                  cmpf  #$cd           Round up if >=.8 leftover
                      (grfdrv_beta5_with):07098                ELSE
21F0 3470             (grfdrv_beta5_with):07099                  pshs  x,y,u          Save regs used in MUL16
21F2 AE02             (grfdrv_beta5_with):07100                  ldx   2,x
21F4 17FC40           (grfdrv_beta5_with):07101                  lbsr  MUL16          Multiply D*X (returns Y:U)
21F7 1F20             (grfdrv_beta5_with):07102                  tfr   y,d            Move high word of result into D
21F9 DFB5             (grfdrv_beta5_with):07103                  stu   <$B5           Save low word of result
21FB 3570             (grfdrv_beta5_with):07104                  puls  x,y,u          Restore regs
21FD 1F98             (grfdrv_beta5_with):07105                  tfr   b,a
21FF D6B6             (grfdrv_beta5_with):07106                  ldb   <$B6
2201 C1CD             (grfdrv_beta5_with):07107                  cmpb  #$cd           cmpf #$cd
2203 3401             (grfdrv_beta5_with):07108                  pshs  cc             save result
2205 D6B5             (grfdrv_beta5_with):07109                  ldb   <$B5           tfr e,b
2207 3501             (grfdrv_beta5_with):07110                  puls  cc
                      (grfdrv_beta5_with):07111                ENDC
2209 2503             (grfdrv_beta5_with):07112                  blo   L1E48          Fine, store value & do X coord
                      (grfdrv_beta5_with):07113                IFNE  H6309
                      (grfdrv_beta5_with):07114                  incd                 Round up coordinate
                      (grfdrv_beta5_with):07115                ELSE
220B C30001           (grfdrv_beta5_with):07116                  addd  #1
                      (grfdrv_beta5_with):07117                ENDC
220E ED02             (grfdrv_beta5_with):07118         L1E48    std   2,x            Save scaled Y coordinate
2210 E6E0             (grfdrv_beta5_with):07119         NoY      ldb   ,s+            Get X scaling value
2212 2721             (grfdrv_beta5_with):07120                  beq   L1E52          None needed, exit
2214 4F               (grfdrv_beta5_with):07121         L1E4A    clra                 D=X scaling value
                      (grfdrv_beta5_with):07122                IFNE  H6309
                      (grfdrv_beta5_with):07123                  muld  ,x             Multiply by X coordinate
                      (grfdrv_beta5_with):07124                  tfr   b,a            Move 16 bit result we want to D
                      (grfdrv_beta5_with):07125                  tfr   e,b
                      (grfdrv_beta5_with):07126                  cmpf  #$cd           Round up if >=.8 leftover
                      (grfdrv_beta5_with):07127                ELSE
2215 3470             (grfdrv_beta5_with):07128                  pshs  x,y,u
2217 AE84             (grfdrv_beta5_with):07129                  ldx   ,x
2219 17FC1B           (grfdrv_beta5_with):07130                  lbsr  MUL16
221C DFB5             (grfdrv_beta5_with):07131                  stu   <$B5
221E 1F20             (grfdrv_beta5_with):07132                  tfr   y,d
2220 3570             (grfdrv_beta5_with):07133                  puls  x,y,u
2222 1F98             (grfdrv_beta5_with):07134                  tfr   b,a
2224 D6B6             (grfdrv_beta5_with):07135                  ldb   <$B6
2226 C1CD             (grfdrv_beta5_with):07136                  cmpb  #$cd           cmpf #$cd
2228 3401             (grfdrv_beta5_with):07137                  pshs  cc             save result
222A D6B5             (grfdrv_beta5_with):07138                  ldb   <$B5           tfr e,b
222C 3501             (grfdrv_beta5_with):07139                  puls  cc
                      (grfdrv_beta5_with):07140                ENDC
222E 2503             (grfdrv_beta5_with):07141                  blo   L1E50          Fine, store value & return
                      (grfdrv_beta5_with):07142                IFNE  H6309
                      (grfdrv_beta5_with):07143                  incd                 Round up coordinate
                      (grfdrv_beta5_with):07144                ELSE
2230 C30001           (grfdrv_beta5_with):07145                  addd  #1
                      (grfdrv_beta5_with):07146                ENDC
2233 ED84             (grfdrv_beta5_with):07147         L1E50    std   ,x             Save new X coordinate
2235 39               (grfdrv_beta5_with):07148         L1E52    rts                  Return
                      (grfdrv_beta5_with):07149         
2236 9660             (grfdrv_beta5_with):07150         L1EF1    lda   <$0060         get screen type
2238 8E6242           (grfdrv_beta5_with):07151                  ldx   #GrfStrt+L1F00-2  Point to mask & offset table (-2 since base 1)
223B 48               (grfdrv_beta5_with):07152                  lsla                 account for 2 bytes entry
223C EC86             (grfdrv_beta5_with):07153                  ldd   a,x            get mask & offset
223E 9779             (grfdrv_beta5_with):07154                  sta   <$0079         Preserve mask
2240 3A               (grfdrv_beta5_with):07155                  abx                  Point to bit shift routine
2241 9F77             (grfdrv_beta5_with):07156                  stx   <$0077         Preserve vector to bit shift routine
2243 39               (grfdrv_beta5_with):07157                  rts   
                      (grfdrv_beta5_with):07158         
                      (grfdrv_beta5_with):07159         * Bit shift table to shift to the right 3,2,1 or 0 times
2244 800D             (grfdrv_beta5_with):07160         L1F00    fcb   %10000000,L1F17-(L1F00-2)   $19    640 2 color
2246 C00C             (grfdrv_beta5_with):07161                  fcb   %11000000,L1F16-(L1F00-2)   $18    320 4 color
2248 C00C             (grfdrv_beta5_with):07162                  fcb   %11000000,L1F16-(L1F00-2)   $18    640 4 color
224A F00A             (grfdrv_beta5_with):07163                  fcb   %11110000,L1F14-(L1F00-2)   $16    320 16 color
                      (grfdrv_beta5_with):07164         
224C 54               (grfdrv_beta5_with):07165         L1F14    lsrb
224D 54               (grfdrv_beta5_with):07166                  lsrb  
224E 54               (grfdrv_beta5_with):07167         L1F16    lsrb  
224F 39               (grfdrv_beta5_with):07168         L1F17    rts   
                      (grfdrv_beta5_with):07169         
                      (grfdrv_beta5_with):07170         * PSET vector table - if PSET is on. Otherwise, it points to L1F9E, which
                      (grfdrv_beta5_with):07171         * does an AND to just keep the 1 pixel's worth of the color mask and calls
                      (grfdrv_beta5_with):07172         * the proper LSET routine
2250 05               (grfdrv_beta5_with):07173         L1FB4    fcb   L1F60-(L1FB4-1)  640x200x2
2251 13               (grfdrv_beta5_with):07174                  fcb   L1F6E-(L1FB4-1)  320x200x4
2252 13               (grfdrv_beta5_with):07175                  fcb   L1F6E-(L1FB4-1)  640x200x4
2253 21               (grfdrv_beta5_with):07176                  fcb   L1F7C-(L1FB4-1)  320x200x16
                      (grfdrv_beta5_with):07177         
                      (grfdrv_beta5_with):07178         * PSET vector ($16,y) routine - 2 color screens
2254 3414             (grfdrv_beta5_with):07179         L1F60    pshs  x,b            Preserve scrn ptr & pixel mask
2256 8D32             (grfdrv_beta5_with):07180                  bsr   L1F95          Calculate pixel offset into pattern buffer
2258 3A               (grfdrv_beta5_with):07181                  abx                  Since 1 bit/pixel, that is address we need
2259 D648             (grfdrv_beta5_with):07182                  ldb   <$0048         Get LSB of X coord
225B 54               (grfdrv_beta5_with):07183                  lsrb                 Divide by 8 for byte offset into pattern buffer
225C 54               (grfdrv_beta5_with):07184                  lsrb
225D 54               (grfdrv_beta5_with):07185                  lsrb
225E C403             (grfdrv_beta5_with):07186                  andb  #%00000011     MOD 4 since 2 color pattern buffer 4 bytes wide
2260 201A             (grfdrv_beta5_with):07187                  bra   L1F88          Go merge pattern buffer with pixel mask
                      (grfdrv_beta5_with):07188         
                      (grfdrv_beta5_with):07189         * PSET vector ($16,y) routine - 4 color screens
2262 3414             (grfdrv_beta5_with):07190         L1F6E    pshs  x,b            Preserve scrn ptr & pixel mask
2264 8D24             (grfdrv_beta5_with):07191                  bsr   L1F95          Calculate pixel offset into pattern buffer
2266 58               (grfdrv_beta5_with):07192                  lslb                 Since 2 bits/pixel, multiply vert. offset by 2
2267 3A               (grfdrv_beta5_with):07193                  abx
2268 D648             (grfdrv_beta5_with):07194                  ldb   <$0048         Get LSB of X coord
226A 54               (grfdrv_beta5_with):07195                  lsrb                 Divide by 4 for byte offset into pattern buffer
226B 54               (grfdrv_beta5_with):07196                  lsrb
226C C407             (grfdrv_beta5_with):07197                  andb  #%00000111     MOD 8 since 4 color pattern buffer 8 bytes wide
226E 200C             (grfdrv_beta5_with):07198                  bra   L1F88          Go merge pattern buffer with pixel mask
                      (grfdrv_beta5_with):07199         
                      (grfdrv_beta5_with):07200         * PSET vector ($16,y) routine - 16 color screens
2270 3414             (grfdrv_beta5_with):07201         L1F7C    pshs  x,b            Preserve scrn ptr & pixel mask
2272 8D16             (grfdrv_beta5_with):07202                  bsr   L1F95          Calculate pixel offset into pattern buffer
2274 58               (grfdrv_beta5_with):07203                  lslb                 Since 4 bits/pixel, multiply vert. offset by 4
2275 58               (grfdrv_beta5_with):07204                  lslb
2276 3A               (grfdrv_beta5_with):07205                  abx
2277 D648             (grfdrv_beta5_with):07206                  ldb   <$0048         Get LSB of X coord
2279 54               (grfdrv_beta5_with):07207                  lsrb                 Divide by 2 for byte offset into pattern buffer
227A C40F             (grfdrv_beta5_with):07208                  andb  #%00001111     MOD 16 since 16 color pattern buffer 16 bytes wide
227C E685             (grfdrv_beta5_with):07209         L1F88    ldb   b,x            Get proper byte from pattern buffer
227E E4E0             (grfdrv_beta5_with):07210                  andb  ,s+            Only keep bits that are in pixel mask
2280 3510             (grfdrv_beta5_with):07211                  puls  x              Restore screen ptr
                      (grfdrv_beta5_with):07212         * DEFAULT PSET ROUTINE IF NO PATTERN BUFFER IS CURRENTLY ACTIVE. POINTED TO
                      (grfdrv_beta5_with):07213         * BY [$64,u], usually called from L1F5B
     2282             (grfdrv_beta5_with):07214         L1F9E    equ   *
                      (grfdrv_beta5_with):07215                IFNE  H6309
                      (grfdrv_beta5_with):07216                  andr  b,a            Only keep proper color from patterned pixel mask
                      (grfdrv_beta5_with):07217                  jmp   ,w             Call current LSET vector
                      (grfdrv_beta5_with):07218                ELSE
2282 D7BF             (grfdrv_beta5_with):07219                  stb   <grScrtch      Only keep proper color from patterned pixel mask
2284 94BF             (grfdrv_beta5_with):07220                  anda  <grScrtch
                      (grfdrv_beta5_with):07221         *         pshs  b
                      (grfdrv_beta5_with):07222         *         anda  ,s+
2286 6E9F11B5         (grfdrv_beta5_with):07223                  jmp   [>GrfMem+$B5]  Call current LSET vector
                      (grfdrv_beta5_with):07224                ENDC
                      (grfdrv_beta5_with):07225         * Calculate pixel offset into pattern buffer (32x8 pixels only) from Y coord
                      (grfdrv_beta5_with):07226         * Exit: X=ptr to start of data in pattern buffer
                      (grfdrv_beta5_with):07227         *       B=Pixel offset within buffer to go to
228A 9E66             (grfdrv_beta5_with):07228         L1F95    ldx   <$0066         Get current pattern's buffer ptr
228C D64A             (grfdrv_beta5_with):07229                  ldb   <$004A         Calculate MOD 8 the line number we want
228E C407             (grfdrv_beta5_with):07230                  andb  #%00000111     to get data from the Pattern buffer
2290 58               (grfdrv_beta5_with):07231                  lslb                 Multiply by 4 to calculate which line within
2291 58               (grfdrv_beta5_with):07232                  lslb                 Pattern buffer we want (since 32 pixels/line)
2292 39               (grfdrv_beta5_with):07233                  rts
                      (grfdrv_beta5_with):07234         
2293 CD752A           (grfdrv_beta5_with):07235                  emod
     2296             (grfdrv_beta5_with):07236         eom      equ    *
                      (grfdrv_beta5_with):07237                  end
