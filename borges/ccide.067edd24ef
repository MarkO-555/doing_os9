                      (        ccide.asm):00001         ********************************************************************
                      (        ccide.asm):00002         * CCIDE - IDE device driver for CoCo
                      (        ccide.asm):00003         *
                      (        ccide.asm):00004         * $Id$
                      (        ccide.asm):00005         *
                      (        ccide.asm):00006         * DO NOT FORGET TO SET H6309 FLAG IN DEFSFILE APPROPRIATELY FOR 6809 VS.
                      (        ccide.asm):00007         *   6309 CODE WHEN ASSEMBLING!!
                      (        ccide.asm):00008         *
                      (        ccide.asm):00009         *  Driver originally from Jim Hathaway, originally 8-bit only
                      (        ccide.asm):00010         *  Converted to 16 bit by Alan DeKok
                      (        ccide.asm):00011         *  Disassembled (OK, so I didn't have the source version at first!)
                      (        ccide.asm):00012         *     by Eddie Kuns, ATA specs followed carefully and sector buffering
                      (        ccide.asm):00013         *     on writes handled more carefully
                      (        ccide.asm):00014         * This driver uses 16-bit transfers *only*
                      (        ccide.asm):00015         * Check with Glenside - can we switch to 16 bit only, so there is less to
                      (        ccide.asm):00016         *   maintain? With the cacheing stuff, the speed is fairly decent, although
                      (        ccide.asm):00017         *   some 6309 optimizations are still possible (cache copies, drive table
                      (        ccide.asm):00018         *   copies, hardware divide for CHS translation, etc.)
                      (        ccide.asm):00019         *
                      (        ccide.asm):00020         * NOTE: Currently, will return RAW error #'s from drive (see ATA bit flags
                      (        ccide.asm):00021         *   in error register). After driver finalized, switch back to OS9 error
                      (        ccide.asm):00022         *   codes.
                      (        ccide.asm):00023         * NOTE 2: drvrbusy checks are done even before hardware access, because
                      (        ccide.asm):00024         *  some variables are shared in the driver memory, and if a 2nd request
                      (        ccide.asm):00025         *  comes in in the middle of it, the vars might be changed at a dangerous
                      (        ccide.asm):00026         *  time. Note if you have two IDE controllers: since they get separate driver
                      (        ccide.asm):00027         *  memory from each other, that both controllers CAN be active at the same
                      (        ccide.asm):00028         *  time.
                      (        ccide.asm):00029         * BIG NOTE ON OLDER ATA-1 DRIVES!!!
                      (        ccide.asm):00030         * SOME DRIVES (MY MINISCRIBE 8051A INCLUDED) HAVE A TRANSLATION MODE THAT
                      (        ccide.asm):00031         * _IS_BUILT_INTO_THE_IDE_ROM_ITSELF! THE BAD PART IS, THE "IDENTIFY DRIVE"
                      (        ccide.asm):00032         * COMMAND _DOES_NOT_ TAKE THIS INTO CONSIDERATION, BUT RETURNS THE "NATIVE"
                      (        ccide.asm):00033         * DRIVE SPECS FOR CYLINDERS, HEADS & SECTORS PER TRACK. TO GET THE FULL
                      (        ccide.asm):00034         * CAPACITY OF THE DRIVE, WITHOUT ERRORS, YOU _MUST_ SET YOUR DEVICE
                      (        ccide.asm):00035         * DESCRIPTOR BASED ON THE HARDWARE _TRANSLATED_ SETTINGS, _NOT_ THE _NATIVE_
                      (        ccide.asm):00036         * SETTINGS (DESCRIBED IN THE IDENTIFY DRIVE COMMAND)! AS A REAL WORLD
                      (        ccide.asm):00037         * EXAMPLE, ON MY MINISCRIBE 8051A:
                      (        ccide.asm):00038         *   Drives "Native"  mode (as well as the Identify Drive command) returns:
                      (        ccide.asm):00039         *     745 cylinders, 4 heads & 28 sectors/cylinder.
                      (        ccide.asm):00040         *  HOWEVER, the "Translation" mode (which is checked off on the sticker on
                      (        ccide.asm):00041         *    the drive itself from the manufacturer), says:
                      (        ccide.asm):00042         *    Translated: 5 heads, 17 sectors. At this point, you will have to figure
                      (        ccide.asm):00043         *      out the # of cylinders, by computing the # of sectors TOTAL for the
                      (        ccide.asm):00044         *      drive in it's native mode (745*4*28 in the above example, or 83,440
                      (        ccide.asm):00045         *      sectors), and then dividing that value by (# of sectors/track * # of
                      (        ccide.asm):00046         *      heads) in the translation mode, and rounding down. In the above case,
                      (        ccide.asm):00047         *      83,440/(5*17)=981.647, so use 981 (which in hex is $03d5).
                      (        ccide.asm):00048         * Therefore, the proper device descriptor for this drive is:
                      (        ccide.asm):00049         *  cyl=3d5 sid=5 sct=22 t0s=22  (Actually, t0s is ignored by CCIDE)
                      (        ccide.asm):00050         *    The sct=22 is because the value is hexidecimal (it means 34 sectors/
                      (        ccide.asm):00051         *    track), and is double the 17 I mentioned above because OS9 sectors are
                      (        ccide.asm):00052         *    half the size of IDE sectors (256 bytes vs. 512 bytes). If this drive
                      (        ccide.asm):00053         *    had been shipped in "Native" mode, it would use the following:
                      (        ccide.asm):00054         *  cyl=2E9 sid=4 sct=38 t0s=38, which is what the IDENTIFY DRIVE command
                      (        ccide.asm):00055         *    reports.
                      (        ccide.asm):00056         * You can verify the highest cylinder # by setting the OFS in the descriptor
                      (        ccide.asm):00057         *   to what you think is the highest cylinder # (total # of cylinders-1 ...
                      (        ccide.asm):00058         *   remember that CHS cylinder numbers start at 0!), and then try to read
                      (        ccide.asm):00059         *   enough sectors to cover the whole track. If you go one past that value,
                      (        ccide.asm):00060         *   you should start getting errors if you have the right cylinder count.
                      (        ccide.asm):00061         * This is kind of a dumb system, but I assume it had something to do with
                      (        ccide.asm):00062         * IBM PC BIOS in the early days of IDE.
                      (        ccide.asm):00063         *A LITTLE LATER, WHEN THE DRIVER IS STABLE, MAY WANT TO ADD ANOTHER BIT FLAG
                      (        ccide.asm):00064         *  TO DRIVEFLG, SET UP BY A FIRST TIME READ: 8 BIT ACCEPTED. THEN, USE THE 8
                      (        ccide.asm):00065         *  BIT TRANSFER MODE IF POSSIBLE (LIKE I DID WITH LBA). THIS SHOULD ALLOW
                      (        ccide.asm):00066         *  MUCH FASTER SECTOR ACCESS ON A NITROS9 SYSTEM, AND IT WOULD BE INTERESTING
                      (        ccide.asm):00067         *  TO SEE HOW MANY DRIVES ACCEPT THAT MODE (SUPPOSED TO RETURN AN 'ABORTED'
                      (        ccide.asm):00068         *  FLAG IF IT DOES NOT).
                      (        ccide.asm):00069         * NOTE: RBF WILL ASSIGN NEW DEVICE MEM (,U PTR) TO _EACH_ CONTROLLER ON IT'S
                      (        ccide.asm):00070         *   OWN, BASED ON THE BASE ADDRESS FROM THE DEVICE DESCRIPTOR. THEREFORE,
                      (        ccide.asm):00071         *   CCIDE SHOULD BE SET UP FOR _2_ DRIVES MAX (PER CONTROLLER), AND LET RBF
                      (        ccide.asm):00072         *   TAKE CARE OF MULTIPLE CONTROLLERS.
                      (        ccide.asm):00073         *    The exception to this is when using partitions; since they will have a
                      (        ccide.asm):00074         *    separate descriptor for each partition, they will need a separate drive
                      (        ccide.asm):00075         *    table entry. Each table entry is $26 (38) bytes each, so it is not a lot.
                      (        ccide.asm):00076         *    Should make the device table fill up the rest of a 256 byte page (with
                      (        ccide.asm):00077         *    all other variables allocated), since OS9 will force System RAM pages to
                      (        ccide.asm):00078         *    even multiples of 256 anyways. Once full 8k block caching is implemented,
                      (        ccide.asm):00079         *    some of the two 256 byte sector buffers currently in system RAM could be
                      (        ccide.asm):00080         *    reused for more drive table entries as well. With current system RAM
                      (        ccide.asm):00081         *    requirements in driver, this would allow 5 device table entries without
                      (        ccide.asm):00082         *    taking any more system RAM then it is already. These can be shared in
                      (        ccide.asm):00083         *    whatever combination you need for your (up to) 2 physical drives.
                      (        ccide.asm):00084         * ALSO, RBF CALLS THE INIT ROUTINE ONLY ONCE PER _DRIVER_, NOT DRIVE!
                      (        ccide.asm):00085         *
                      (        ccide.asm):00086         * Ed.    Comments                                       Who YY/MM/DD
                      (        ccide.asm):00087         * ------------------------------------------------------------------
                      (        ccide.asm):00088         * 5      Source as distributed by Glenside                  99/05/02
                      (        ccide.asm):00089         *        Added comments from 8 bit driver               BGP 99/05/07
                      (        ccide.asm):00090         * 6      Driver now gets address from descriptor, made  BGP 99/05/10
                      (        ccide.asm):00091         *        minor optimizations, added symbols
                      (        ccide.asm):00092         * 7      Change to use real 16 bits                     LCB 99/09/06
                      (        ccide.asm):00093         *        partitions (both LBA & CHS)                     to 99/10/31
                      (        ccide.asm):00094         *        better error reporting
                      (        ccide.asm):00095         *        slightly optimized read
                      (        ccide.asm):00096         *        Half sector & LSN0 caches for current drive
                      (        ccide.asm):00097         *        Auto-sense/run LBA & CHS modes
                      (        ccide.asm):00098         *        Full CHS calculations (up to 4096 cylinders)
                      (        ccide.asm):00099         *          for ATA-1 old drive compatibility
                      (        ccide.asm):00100         * 8      Attempted to add support for removable media   LCB 00/05/27
                      (        ccide.asm):00101         *         commands (Door Lock/Unlock, Acknowledge Media  to 00/??/??
                      (        ccide.asm):00102         *         Change)
                      (        ccide.asm):00103         *        Attempt 'generic' ATA command system call
                      (        ccide.asm):00104         * Constants - change if needed
                      (        ccide.asm):00105         * NUMDRIVE is LOGICAL drives (partitions), NOT physical drives-use 5,11,etc
                      (        ccide.asm):00106         * 5=768 byte data area, 11=1024 byte data area
     000B             (        ccide.asm):00107         NUMDRIVE equ   11       Max. # of device descriptors per controller address
     012C             (        ccide.asm):00108         MAXWAIT  equ   60*5     Max. # clock ticks to give up on read/write (5 sec)
     0800             (        ccide.asm):00109         HDSclPwr equ   2048     Set to 2048 as start ^2 cylinder (CHS translate)
                      (        ccide.asm):00110         
                      (        ccide.asm):00111         * New definitions in Device Descriptor
     0026             (        ccide.asm):00112         PartOfs  equ   $26      2 byte partition offset
                      (        ccide.asm):00113         
                      (        ccide.asm):00114         * Definitions for DD.DNS
     0001             (        ccide.asm):00115         PhysDriv equ   %00000001  Physical drive # (0=Master, 1=Slave)
     0002             (        ccide.asm):00116         ForceCHS equ   %00000010  Force driver to use CHS mode
                      (        ccide.asm):00117         
                      (        ccide.asm):00118         * New GetStat/SetStat calls:
                      (        ccide.asm):00119         * SS.DrInf call shares call # with SS.ScInf from NitrOS9 WindInt (info)
     008F             (        ccide.asm):00120         SS.DrInf equ   $8f      Drive info call (see routine for parms)
                      (        ccide.asm):00121         * Subcall #'s fro SS.DrInf (Y register on entry)
     0000             (        ccide.asm):00122         ATAIdent equ   0        ATA (handles ATAPI & plain ATA)
                      (        ccide.asm):00123         
                      (        ccide.asm):00124         * IDE & ATAPI Commands (ATAPI stuff not implemented yet, and LBA is mandatory)
     0020             (        ccide.asm):00125         ReadRtry equ   $20      Read sector with retry
     0030             (        ccide.asm):00126         WritRtry equ   $30      Write sector with retry
     0090             (        ccide.asm):00127         Diagnost equ   $90      Execute drive diagnostic
     00EC             (        ccide.asm):00128         Identify equ   $EC      Identify drive command
     00DE             (        ccide.asm):00129         DoorLock equ   $DE      Lock drive
     00DF             (        ccide.asm):00130         DoorUnLk equ   $DF      Unlock (eject) drive
     00DB             (        ccide.asm):00131         AckMdChg equ   $DB      Acknowledge media change
                      (        ccide.asm):00132         
     00A1             (        ccide.asm):00133         PIIdent  equ   $A1      Identify ATAPI drive command
                      (        ccide.asm):00134         
                      (        ccide.asm):00135         * IDE Status Register
     0080             (        ccide.asm):00136         Busy     equ   %10000000 Drive busy (1=busy)
     0040             (        ccide.asm):00137         DrvReady equ   %01000000 Drive ready (1=ready to accept command)
     0020             (        ccide.asm):00138         WriteFlt equ   %00100000 Drive Write Fault (1=Write fault?)
     0010             (        ccide.asm):00139         SeekDone equ   %00010000 Seek Complete (1=Seek complete)
     0008             (        ccide.asm):00140         DataReq  equ   %00001000 Data Request (1=drive ready for read/write data)
     0004             (        ccide.asm):00141         CorrData equ   %00000100 Corrected Data (1=correctable data error was done)
     0002             (        ccide.asm):00142         Index    equ   %00000010 1=1 disk revolution completed
     0001             (        ccide.asm):00143         ErrorFnd equ   %00000001 1=Error detected - see error register
                      (        ccide.asm):00144         
                      (        ccide.asm):00145         * IDE hardware offsets
     0000             (        ccide.asm):00146         DataReg  equ   0         Data (1st 8 bits, non-latched)
     0001             (        ccide.asm):00147         Error    equ   1         Error # when read
     0001             (        ccide.asm):00148         Features equ   1         Features when write
     0002             (        ccide.asm):00149         SectCnt  equ   2         Sector count
     0003             (        ccide.asm):00150         SectNum  equ   3         Sector #
     0004             (        ccide.asm):00151         CylLow   equ   4         Low byte of cylinder
     0005             (        ccide.asm):00152         CylHigh  equ   5         High byte of cylinder
     0006             (        ccide.asm):00153         DevHead  equ   6         Device/Head
     0007             (        ccide.asm):00154         Status   equ   7         Status when read
     0007             (        ccide.asm):00155         Command  equ   7         Command when write
     0008             (        ccide.asm):00156         Latch    equ   8         Latch (2nd 8 bits of 16 bit word)
                      (        ccide.asm):00157         
                      (        ccide.asm):00158         * Special flags (Mini extra drive table - 1 byte per drive) - starts at
                      (        ccide.asm):00159         *    DriveFlg,u
                      (        ccide.asm):00160         * These are set by inquiring the drive, NOT from the descriptor
                      (        ccide.asm):00161         * Should add a GETSTAT to allow user to access these for any drive
     0080             (        ccide.asm):00162         Unused   equ   %10000000  Entry is un-initialized
     0001             (        ccide.asm):00163         DrvMode  equ   %00000001  0=CHS mode, 1=LBA mode
     0002             (        ccide.asm):00164         ATAPI    equ   %00000010  0=Device is ATA,1=Device is ATAPI
     0004             (        ccide.asm):00165         Remove   equ   %00000100  0=Fixed Drive, 1=Removable media
     0008             (        ccide.asm):00166         ReadOnly equ   %00001000  0=Read & write allowed, 1=Read only (CD-ROM)
                      (        ccide.asm):00167         *                           Could also use to write-protect hard drive
                      (        ccide.asm):00168                  nam   CCIDE
                      (        ccide.asm):00169                  ttl   IDE device driver for CoCo
                      (        ccide.asm):00170         
                      (        ccide.asm):00171                 IFP1
                      (        ccide.asm):00172                  use   defsfile
                      (         defsfile):00001             use os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
     0080             (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
     00FE             (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0004                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
002A                  (            os9.d):00820         DefIOSiz       EQU       12
002A                  (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
002A                  (            os9.d):00824         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00832         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00835         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00849                        RMB       $40-.               unused
002A                  (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
002A                  (            os9.d):00855         SysState       EQU       %10000000
002A                  (            os9.d):00856         TimSleep       EQU       %01000000
002A                  (            os9.d):00857         TimOut         EQU       %00100000
002A                  (            os9.d):00858         ImgChg         EQU       %00010000
002A                  (            os9.d):00859         Condem         EQU       %00000010
002A                  (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
     0010             (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0000                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00877         P$User         RMB       2                   User Index
000A                  (            os9.d):00878         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00879         P$Age          RMB       1                   Age
000C                  (            os9.d):00880         P$State        RMB       1                   Status
000D                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00892                        RMB       $20-.               unused
0020                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00905         P$Alarm        RMB       6
00C9                  (            os9.d):00906                        RMB       $200-.              Local stack
     0200             (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
     0080             (            os9.d):00913         SysState       EQU       %10000000
     0040             (            os9.d):00914         TimSleep       EQU       %01000000
     0020             (            os9.d):00915         TimOut         EQU       %00100000
     0010             (            os9.d):00916         ImgChg         EQU       %00010000
     0008             (            os9.d):00917         Suspend        EQU       %00001000
     0002             (            os9.d):00918         Condem         EQU       %00000010
     0001             (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     000D             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     000B             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
0005                  (            os9.d):01040         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01041         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01044         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01045         R$X            EQU       6                   X Index register
0005                  (            os9.d):01046         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01047         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01048         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
     0003             (            os9.d):01051         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01052         R$X            EQU       4                   X Index register
     0006             (            os9.d):01053         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01054         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01055         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
00FF                  (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
00FF                  (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
     003B             (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
     ED00             (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
00FF                  (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (         defsfile):00002             use rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (         defsfile):00003             use coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         *************************************************
                      (           coco.d):00148         *
                      (           coco.d):00149         * NitrOS-9 Level 1 Section
                      (           coco.d):00150         *
                      (           coco.d):00151         *************************************************
                      (           coco.d):00152         
0004                  (           coco.d):00153         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE      
                      (           coco.d):00156         
                      (           coco.d):00157         *************************************************
                      (           coco.d):00158         *
                      (           coco.d):00159         * NitrOS-9 Level 2 Section
                      (           coco.d):00160         *
                      (           coco.d):00161         *************************************************
                      (           coco.d):00162         
                      (           coco.d):00163         ****************************************
                      (           coco.d):00164         * Dynamic Address Translator Definitions
                      (           coco.d):00165         *
     0008             (           coco.d):00166         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00167         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00168         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00169         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00170         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00171         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00172         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00173         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00174         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00175         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00176         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00177         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00178         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00179         IOBlock        EQU       $3F
     003F             (           coco.d):00180         ROMBlock       EQU       $3F
     007F             (           coco.d):00181         IOAddr         EQU       $7F
     0001             (           coco.d):00182         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00183         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00184         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00185         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00186         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00187         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00188         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00189         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00190         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00191         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00192         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00193         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00194         
                      (           coco.d):00195         ***************************
                      (           coco.d):00196         * Color Computer 3 Specific
                      (           coco.d):00197         *
     0001             (           coco.d):00198         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00199         
                      (           coco.d):00200         ********************
                      (           coco.d):00201         * Hardware addresses
                      (           coco.d):00202         *
     FF00             (           coco.d):00203         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00204         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00205         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00206         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00207         
     0007             (           coco.d):00208         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00209         
                      (           coco.d):00210                        ENDC
                      (           coco.d):00211                        
                      (           coco.d):00212                        ENDC      
                      (           coco.d):00213         
                      (        ccide.asm):00173                 ENDC
                      (        ccide.asm):00174         
     00E1             (        ccide.asm):00175         tylg     set   Drivr+Objct   
     0081             (        ccide.asm):00176         atrv     set   ReEnt+rev
     0001             (        ccide.asm):00177         rev      set   $01
     0008             (        ccide.asm):00178         edition  equ   8
                      (        ccide.asm):00179         
0000 87CD067E000EE181 (        ccide.asm):00180                  mod   eom,name,tylg,atrv,start,size
     A3015103DE
                      (        ccide.asm):00181         
                      (        ccide.asm):00182         * NOTE: OS9 WILL ALWAYS ASSIGN DRIVER MEM SPACE ON AN EVEN 256 BYTE PAGE,
                      (        ccide.asm):00183         *   SO TAKE ADVANTAGE OF "EXTRA" SPACE!
                      (        ccide.asm):00184         
                      (        ccide.asm):00185                  org   0
0000.                 (        ccide.asm):00186                  rmb   DRVBEG+(DRVMEM*NUMDRIVE)
                      (        ccide.asm):00187         * Start of driver-specific statics
01B1.                 (        ccide.asm):00188         SlpCntr  rmb   2           # ticks left before we give up on a read/write
01B3.                 (        ccide.asm):00189         PhysDrv  rmb   1           Physical drive # (for quick lookup)
01B4.                 (        ccide.asm):00190         DriveFlg rmb   NUMDRIVE    1 byte per drive (bit flags)
01BF.                 (        ccide.asm):00191         OS9LSN   rmb   3           LSN of current OS-9 256-byte sector
                      (        ccide.asm):00192         * IDE spec can handle 28 bits (4 bits of 4th byte) for LBA mode. Since OS9
                      (        ccide.asm):00193         *   can't get that high anyways, we only work with 3, and then use the offset
                      (        ccide.asm):00194         *   partition value to bump it up beyond the 4 GB mark.
01C2.                 (        ccide.asm):00195         OS9PSN   rmb   3           PSN of current OS9 sector (512 byte)
01C5.                 (        ccide.asm):00196         DrivMask rmb   1           Drive # (0 or 1) for IDE (in proper bit position)
01C6.                 (        ccide.asm):00197         idecmd   rmb   1           1 byte IDE command code
01C7.                 (        ccide.asm):00198         identcmd rmb   1           1 byte IDE Identify drive code
                      (        ccide.asm):00199         
                      (        ccide.asm):00200         * Following flag is because the IDE interface can NOT access a 2nd drive
                      (        ccide.asm):00201         *   while the 1st drive is completing a read or write. Because of shared
                      (        ccide.asm):00202         *   device memory variables, this flag is set even on cached entries.
01C8.                 (        ccide.asm):00203         drvrbusy rmb   1           Driver busy flag (0=not busy)
                      (        ccide.asm):00204         
                      (        ccide.asm):00205         * Following for CHS mode drives only!
01C9.                 (        ccide.asm):00206         Head     rmb   1           Head # (s/b base 0)
01CA.                 (        ccide.asm):00207         Cylinder rmb   2           Cylinder #
01CC.                 (        ccide.asm):00208         CHSSect  rmb   1           CHS mode sector #
01CD.                 (        ccide.asm):00209         CHSSPT   rmb   2           CHS mode sectors/track
                      (        ccide.asm):00210         
                      (        ccide.asm):00211         * Buffer/cache variables
01CF.                 (        ccide.asm):00212         LSN0Flag rmb   1           $FF=Not LSN0, $00=LSN0
01D0.                 (        ccide.asm):00213         Sect0Drv rmb   1           Drive # of LSN0 currently buffered ($FF=none)
01D1.                 (        ccide.asm):00214         Sect0Ofs rmb   2           Offset value for current LSN0 buffered drive
01D3.                 (        ccide.asm):00215         TempHalf rmb   3           Temp spot to hold other half calculation
01D6.                 (        ccide.asm):00216         HalfDrv  rmb   1           Drive # of HalfBuff buffered ($FF=none)
01D7.                 (        ccide.asm):00217         HalfOfs  rmb   2           Offset value for drive for current cached sector
01D9.                 (        ccide.asm):00218         HalfSct  rmb   3           OS9 sector # of half sector not asked for
01DC.                 (        ccide.asm):00219         TempOfs  rmb   2           Temporary copy of partition offset
                      (        ccide.asm):00220         
                      (        ccide.asm):00221         * NOTE: When 8k block buffering is added, move both of these to that block.
                      (        ccide.asm):00222         *   Of course, if removable media, re-read LSN0 physically every time. At that
                      (        ccide.asm):00223         *   time, we should make tables here instead (32 entries per drive up to the
                      (        ccide.asm):00224         *   maximum # of drives) of LSN #'s buffered (3 bytes/entry).
01DE.                 (        ccide.asm):00225         Sect0    rmb   256         Buffer for LSN0
02DE.                 (        ccide.asm):00226         HalfBuff rmb   256         Buffer for other half of 512 byte phys. sector
     03DE             (        ccide.asm):00227         size     equ   .
                      (        ccide.asm):00228         
000D FF               (        ccide.asm):00229                  fcb   $FF         mode byte
                      (        ccide.asm):00230         
000E 43434944C5       (        ccide.asm):00231         name     fcs   /CCIDE/     module name
                      (        ccide.asm):00232         
                      (        ccide.asm):00233         * INIT - appears to only be called on 1ST try on ANY IDE device IF link counts
                      (        ccide.asm):00234         *   are 0.
                      (        ccide.asm):00235         * Y = address of path descriptor (but 
                      (        ccide.asm):00236         * U = address of driver memory (ie, of V.PAGE)
                      (        ccide.asm):00237         * Inits the drive table, and the DriveFlg table
0013 CC800B           (        ccide.asm):00238         Init     ldd   #$8000+NUMDRIVE Flag that special drive flags are all unused
0016 30C901B4         (        ccide.asm):00239                  leax  DriveFlg,u
001A A780             (        ccide.asm):00240         DrvFlgLp sta   ,x+
001C 5A               (        ccide.asm):00241                  decb
001D 26FB             (        ccide.asm):00242                  bne   DrvFlgLp
001F 304F             (        ccide.asm):00243         GoInit   leax  DRVBEG,u      Point to start of drive tables
0021 CCFF0B           (        ccide.asm):00244                  ldd   #$FF00+NUMDRIVE
0024 E746             (        ccide.asm):00245                  stb   V.NDRV,u      Max # of drives
0026 A7C901D0         (        ccide.asm):00246                  sta   Sect0Drv,u    Flag that no LSN0 is buffered
002A A7C901D6         (        ccide.asm):00247                  sta   HalfDrv,u     Flag that we have no half sector buffered
002E A784             (        ccide.asm):00248         NextDrv  sta   DD.TOT,x      Set Total # of sectors to illegal value
0030 A78815           (        ccide.asm):00249                  sta   V.TRAK,x      Non 0, so 1st seek can read Track 0
0033 308826           (        ccide.asm):00250                  leax  DRVMEM,x      Point to next drive
0036 5A               (        ccide.asm):00251                  decb                Dec # of drives left
0037 26F5             (        ccide.asm):00252                  bne   NextDrv       Still more, init them too
0039 5F               (        ccide.asm):00253                  clrb                No error & return
003A 39               (        ccide.asm):00254                  rts
                      (        ccide.asm):00255         
                      (        ccide.asm):00256         * Do drive diagnostic (use CHS mode) - Do not worry about ATAPI at this point
                      (        ccide.asm):00257         * Entry: U=driver mem ptr
                      (        ccide.asm):00258         *        Y=path descriptor
                      (        ccide.asm):00259         *        B=Identify command
                      (        ccide.asm):00260         * Exit:  CC clear - drive ready to send info
                      (        ccide.asm):00261         *        CC set   - error from drive, B contains raw error register
                      (        ccide.asm):00262         * TRASHES X - does timeout (CHECK - WILL SOME DRIVES TAKE TOO LONG?)
                      (        ccide.asm):00263         * This is called by INIT, and should also be called by a GETSTAT at some
                      (        ccide.asm):00264         *  point.
003B 3420             (        ccide.asm):00265         Ident    pshs  y             Save path descriptor
003D E7C901C7         (        ccide.asm):00266                  stb   identcmd,u    Save which Ident we are doing
0041 10AE41           (        ccide.asm):00267                  ldy   V.PORT,u      Get IDE controller address
0044 A6C901C5         (        ccide.asm):00268         DoIdent  lda   DrivMask,u    Get drive # requested
0048 8AA0             (        ccide.asm):00269                  ora   #%10100000    Mask in head 0 & CHS mode
004A ED26             (        ccide.asm):00270                  std   DevHead,y     Send drive/head to controller, and IDENTIFY
                      (        ccide.asm):00271         * Note, if person booting from ROM, drive may not have spun up yet. See if
                      (        ccide.asm):00272         *   we can check some sort of status or error flag that indicates drive is
                      (        ccide.asm):00273         *   still firing up, if this is a problem.
004C 8EA000           (        ccide.asm):00274                  ldx   #$a000        Arbitrary amount of time to give up
004F A627             (        ccide.asm):00275         WaitIdnt lda   Status,y      Get Status register
0051 2B08             (        ccide.asm):00276                  bmi   NoErr         Busy, drop counter
0053 8501             (        ccide.asm):00277                  bita  #ErrorFnd     Error?
0055 2704             (        ccide.asm):00278                  beq   NoErr         No, continue
0057 E621             (        ccide.asm):00279                  ldb   Error,y       Get error code
0059 200A             (        ccide.asm):00280                  bra   BadIdent
                      (        ccide.asm):00281         
005B 8158             (        ccide.asm):00282         NoErr    cmpa  #DrvReady+SeekDone+DataReq Drive ready to send Identify data?
005D 2709             (        ccide.asm):00283                  beq   GotIdent      Yep, exit out
005F 301F             (        ccide.asm):00284                  leax  -1,x          Drop timer
0061 26EC             (        ccide.asm):00285                  bne   WaitIdnt      Keep trying
0063 C6F6             (        ccide.asm):00286                  ldb   #E$NotRdy     Timed out, device not ready error
0065 43               (        ccide.asm):00287         BadIdent coma                Flag error
0066 35A0             (        ccide.asm):00288                  puls  y,pc          Restore path descriptor & return
                      (        ccide.asm):00289         
0068 5F               (        ccide.asm):00290         GotIdent clrb                No error
0069 35A0             (        ccide.asm):00291                  puls  y,pc          Restore path descriptor & return
                      (        ccide.asm):00292         
                      (        ccide.asm):00293         * Send Identify drive command (ATA or ATAPI - see identcmd,u), update DriveFlg
                      (        ccide.asm):00294         *   table
                      (        ccide.asm):00295         * PLEASE NOTE: The 2 identify commands are mutually exclusive; it will fail
                      (        ccide.asm):00296         *  with an 'Aborted' error if the wrong Identify is used.
                      (        ccide.asm):00297         *  UNLIKE A NORMAL READ OF A SECTOR, THE INFORMATION CONTAINED IN THE IDENTIFY
                      (        ccide.asm):00298         *  DRIVE COMMAND IS ALL IN INTEL ORDER WORD (16 BITS)
                      (        ccide.asm):00299         * Entry: Y=Ptr to path descriptor
                      (        ccide.asm):00300         *        U=Ptr to driver memory
                      (        ccide.asm):00301         * X IS DESTROYED!
                      (        ccide.asm):00302         * Exit:  CC=0 if DriveFlg properly updated
                      (        ccide.asm):00303         *          & A=DriveFlg value from update entry in table
                      (        ccide.asm):00304         *        CC=1, B=error if Identify Drive failed
                      (        ccide.asm):00305         *        DriveFlg,u - the proper flags for the specified controller/drive are
                      (        ccide.asm):00306         *                     updated
                      (        ccide.asm):00307         *        Sect0 contains 1st 256 bytes, HalfBuff contains 2nd half
006B 17050F           (        ccide.asm):00308         IdentDrv lbsr  WaitDrv       Wait for IDE to be ready
006E C6EC             (        ccide.asm):00309                  ldb   #Identify
0070 8DC9             (        ccide.asm):00310                  bsr   Ident         Send identify drive command to controller
0072 240A             (        ccide.asm):00311                  bcc   DoInfo        Worked, Do info
0074 C504             (        ccide.asm):00312                  bitb  #%00000100    Error, Aborted Flag set?
0076 2757             (        ccide.asm):00313                  beq   ExitIdnt      No, exit with other error
0078 C6A1             (        ccide.asm):00314                  ldb   #PIIdent      Try ATAPI identify
007A 8DBF             (        ccide.asm):00315                  bsr   Ident
007C 2551             (        ccide.asm):00316                  bcs   ExitIdnt      That didn't work either, abort
007E 30C901DE         (        ccide.asm):00317         DoInfo   leax  Sect0,u       Point to buffer
                      (        ccide.asm):00318         * NOTE: INIT routine only gets called when the DRIVER is Initing...not every
                      (        ccide.asm):00319         *   device. Hence, READ/WRITE must check the DriveFlg settings and make sure
                      (        ccide.asm):00320         *   the hi bit is clear for the drive it is using, to indicate that it HAS
                      (        ccide.asm):00321         *   been set properly from an Identify Drive command.
                      (        ccide.asm):00322         * Read in 1st 256 bytes of Identify Drive buffer, parse out info we need
                      (        ccide.asm):00323         *   for our special flag table
0082 170251           (        ccide.asm):00324                  lbsr  Read256       Generic 256 byte copy from IDE routine
0085 C6FF             (        ccide.asm):00325                  ldb   #$FF          Since we made it this far, flag that HalfBuff
0087 E7C901D6         (        ccide.asm):00326                  stb   HalfDrv,u       & Sect0Drv are now bogus
008B E7C901D0         (        ccide.asm):00327                  stb   Sect0Drv,u
008F 4F               (        ccide.asm):00328                  clra                Set current flags to all off
0090 30C901DE         (        ccide.asm):00329                  leax  Sect0,u       Point to start of buffer again
0094 E684             (        ccide.asm):00330                  ldb   ,x            Get general config low byte
0096 C480             (        ccide.asm):00331                  andb  #%10000000    Removable cartridge bit set?
0098 2702             (        ccide.asm):00332                  beq   CheckLBA      No, check LBA mode
009A 8A04             (        ccide.asm):00333                  ora   #Remove       Set removable media flag
009C E68863           (        ccide.asm):00334         CheckLBA ldb   99,x          Get LBA mode byte
009F C402             (        ccide.asm):00335                  andb  #%00000010    LBA allowed on this drive?
00A1 2702             (        ccide.asm):00336                  beq   ChkATAPI      No
00A3 8A01             (        ccide.asm):00337                  ora   #DrvMode      Yes, set LBA flag
00A5 E6C901C7         (        ccide.asm):00338         ChkATAPI ldb   identcmd,u    Get Identify drive command type
00A9 C1A1             (        ccide.asm):00339                  cmpb  #PIIdent      ATAPI?
00AB 2602             (        ccide.asm):00340                  bne   SetFlg        No, set drive flags
00AD 8A02             (        ccide.asm):00341                  ora   #ATAPI        Set ATAPI flag
00AF E6A824           (        ccide.asm):00342         SetFlg   ldb   PD.DNS,y      Get special settings flags
00B2 C502             (        ccide.asm):00343                  bitb  #ForceCHS     Force CHS mode on?
00B4 2702             (        ccide.asm):00344                  beq   LeavAlon      No
00B6 84FE             (        ccide.asm):00345                  anda  #^DrvMode     Yes, force to CHS mode
00B8 E6A821           (        ccide.asm):00346         LeavAlon ldb   PD.DRV,y      Get Logical drive #
00BB 30C901B4         (        ccide.asm):00347                  leax  DriveFlg,u    Point to drive flags table
00BF A785             (        ccide.asm):00348                  sta   b,x           Save flags
00C1 3402             (        ccide.asm):00349                  pshs  a             Save for exit
00C3 30C902DE         (        ccide.asm):00350                  leax  HalfBuff,u    Point to 2nd buffer
00C7 17020C           (        ccide.asm):00351                  lbsr  Read256       Identify info part 2
00CA 17039C           (        ccide.asm):00352                  lbsr  WaitOK        Make sure drive finished command
00CD 3502             (        ccide.asm):00353                  puls  a             Restore flags byte
00CF 39               (        ccide.asm):00354         ExitIdnt rts                 No error, return
                      (        ccide.asm):00355         
                      (        ccide.asm):00356         * Entry: U=driver memory ptr
                      (        ccide.asm):00357         *        Y=path descriptor ptr
00D0 AE26             (        ccide.asm):00358         GetStat  ldx   PD.RGS,y      Get ptr to callers register stack
00D2 A602             (        ccide.asm):00359                  lda   R$B,x         Get function code
00D4 818F             (        ccide.asm):00360                  cmpa  #SS.DrInf     Drive info command?
00D6 2673             (        ccide.asm):00361                  bne   NextGet       No, try next
00D8 EC06             (        ccide.asm):00362                  ldd   R$Y,x         Get sub-function type
00DA 2704             (        ccide.asm):00363                  beq   GoodFunc
00DC 53               (        ccide.asm):00364                  comb                Only sub-functions 0 allowed for IDE
                      (        ccide.asm):00365                 IFGE  Level-2
00DD C6BB             (        ccide.asm):00366                  ldb   #E$IllArg
                      (        ccide.asm):00367                 ELSE
                      (        ccide.asm):00368                  ldb   #187
                      (        ccide.asm):00369                 ENDC
00DF 39               (        ccide.asm):00370         ExitGet  rts
                      (        ccide.asm):00371         
00E0 3470             (        ccide.asm):00372         GoodFunc pshs  x,y,u         Preserve regs
00E2 8D87             (        ccide.asm):00373                  bsr   IdentDrv      Get either ATA or ATAPI Identify info
00E4 2402             (        ccide.asm):00374                  bcc   GotInfo       Something wrong, return
00E6 35F0             (        ccide.asm):00375                  puls  x,y,u,pc      Restore regs, return with error
                      (        ccide.asm):00376         
00E8 31C901DE         (        ccide.asm):00377         GotInfo  leay  Sect0,u       Point to start of 512 byte buffer
00EC 8E0100           (        ccide.asm):00378                  ldx   #256          # of two byte entries in buffer
00EF ECA4             (        ccide.asm):00379         SwapLoop ldd   ,y            Swap all words to Motorola order
00F1 1E89             (        ccide.asm):00380                  exg   a,b
00F3 EDA1             (        ccide.asm):00381                  std   ,y++
00F5 301F             (        ccide.asm):00382                  leax  -1,x
00F7 26F6             (        ccide.asm):00383                  bne   SwapLoop
00F9 31C901DE         (        ccide.asm):00384                  leay  Sect0,u       Point to start of buffer again
00FD AEA872           (        ccide.asm):00385                  ldx   114,y         Get Current Capacity, swap to Motorola
0100 ECA874           (        ccide.asm):00386                  ldd   116,y
0103 AFA874           (        ccide.asm):00387                  stx   116,y
0106 EDA872           (        ccide.asm):00388                  std   114,y
0109 AEA878           (        ccide.asm):00389                  ldx   120,y         Get LBA sector count, swap to Motorola
010C ECA87A           (        ccide.asm):00390                  ldd   122,y
010F AFA87A           (        ccide.asm):00391                  stx   122,y
0112 EDA878           (        ccide.asm):00392                  std   120,y
                      (        ccide.asm):00393                 IFGE  Level-2
0115 96D0             (        ccide.asm):00394                  lda   <D.SysTsk     Get system task #
0117 9E50             (        ccide.asm):00395                  ldx   <D.Proc       Get user task ptr
0119 E606             (        ccide.asm):00396                  ldb   P$Task,x      Get user's task #
011B 30C901DE         (        ccide.asm):00397                  leax  Sect0,u       Point to source buffer
011F EEE4             (        ccide.asm):00398                  ldu   ,s            Get ptr to PD.RGS
0121 EE44             (        ccide.asm):00399                  ldu   R$X,u         Get Destination ptr
0123 108E0200         (        ccide.asm):00400                  ldy   #512          Move 512 bytes to caller
0127 103F38           (        ccide.asm):00401                  os9   F$Move
                      (        ccide.asm):00402                 ELSE
                      (        ccide.asm):00403                 ENDC
012A 3570             (        ccide.asm):00404                  puls  x,y,u         Restore regs to normal
012C 2401             (        ccide.asm):00405                  bcc   SetUserR      No error, set exit registers for caller
012E 39               (        ccide.asm):00406                  rts
                      (        ccide.asm):00407         
012F CC0200           (        ccide.asm):00408         SetUserR ldd   #512          # of bytes returned=512 (Callers Y)
0132 ED06             (        ccide.asm):00409                  std   R$Y,x
0134 5F               (        ccide.asm):00410                  clrb                Device type=ATA
0135 A6C901C7         (        ccide.asm):00411                  lda   identcmd,u    Get which Identify Drive command worked
0139 81A1             (        ccide.asm):00412                  cmpa  #PIIdent      ATAPI?
013B 2601             (        ccide.asm):00413                  bne   SaveType      No, save ATA as type
013D 5C               (        ccide.asm):00414                  incb
013E A6A821           (        ccide.asm):00415         SaveType lda   PD.DRV,y      Get logical drive #
0141 31C901B4         (        ccide.asm):00416                  leay  DriveFlg,u    Point to drive flag table
0145 A6A6             (        ccide.asm):00417                  lda   a,y           Get drive flags
0147 ED01             (        ccide.asm):00418                  std   R$D,x         Save drive flags & device type
0149 5F               (        ccide.asm):00419                  clrb
014A 39               (        ccide.asm):00420                  rts
                      (        ccide.asm):00421         
014B 53               (        ccide.asm):00422         NextGet  comb
014C C6D0             (        ccide.asm):00423                  ldb   #E$UnkSvc
014E 39               (        ccide.asm):00424                  rts
                      (        ccide.asm):00425         
014F 5F               (        ccide.asm):00426         SetStat  clrb
0150 39               (        ccide.asm):00427                  rts
                      (        ccide.asm):00428         
0151 16FEBF           (        ccide.asm):00429         start    lbra  Init
0154 160099           (        ccide.asm):00430                  lbra  Read
0157 1601A3           (        ccide.asm):00431                  lbra  FWrite
015A 16FF73           (        ccide.asm):00432                  lbra  GetStat
015D 16FFEF           (        ccide.asm):00433                  lbra  SetStat
0160 5F               (        ccide.asm):00434                  clrb               Term routine (does nothing)
0161 39               (        ccide.asm):00435                  rts
                      (        ccide.asm):00436         
0162 86FF             (        ccide.asm):00437         NotBsy   lda   #$FF
0164 A7C901C8         (        ccide.asm):00438                  sta   drvrbusy,u
0168 39               (        ccide.asm):00439                  rts
                      (        ccide.asm):00440         
                      (        ccide.asm):00441         * Checks if driver is busy, retries & possibly sleeps if it is.
                      (        ccide.asm):00442         * Set's driver to busy again when done.
                      (        ccide.asm):00443         * A reg is destroyed, all others are preserved
0169 8640             (        ccide.asm):00444         ChekBusy lda   #64            # of fast retries for driver
016B 6DC901C8         (        ccide.asm):00445         BsyTst   tst   drvrbusy,u     Is current driver/controller already in use?
016F 27F1             (        ccide.asm):00446                  beq   NotBsy         No, continue
0171 4A               (        ccide.asm):00447                  deca
0172 26F7             (        ccide.asm):00448                  bne   BsyTst         Try up to 64 times
0174 3410             (        ccide.asm):00449                  pshs  x              Otherwise, sleep a tick & try again
0176 8E0001           (        ccide.asm):00450                  ldx   #1
0179 103F0A           (        ccide.asm):00451                  os9   F$Sleep
017C 3510             (        ccide.asm):00452                  puls  x
017E 20E9             (        ccide.asm):00453                  bra   ChekBusy
                      (        ccide.asm):00454         
                      (        ccide.asm):00455         * Save OS9 LSN & Physical PSN (not including any partition offset)
                      (        ccide.asm):00456         * Also saves sector # of other half that is buffered
                      (        ccide.asm):00457         * Will have to add check later for ATAPI stuff, up to 2048 bytes/sector
                      (        ccide.asm):00458         *   for CD ROM
                      (        ccide.asm):00459         * Entry: U=ptr to driver mem
                      (        ccide.asm):00460         *        B:X=OS9 LSN
                      (        ccide.asm):00461         * Exit:  B:X=OS9 LSN
                      (        ccide.asm):00462         *      OS9PSN updated (512 byte Physical sector # that IDE needs)
                      (        ccide.asm):00463         *      TempHalf updated to cached LSN # (Use HalfDrv to figure out if legit
                      (        ccide.asm):00464         *        or not)
                      (        ccide.asm):00465         *      TempOfs updated to current partition offset
                      (        ccide.asm):00466         *      Zero flag set if LSN0 was requested (also saved at LSN0Flag,u)
                      (        ccide.asm):00467         *      PhysDrv set to physical drive #
0180 3414             (        ccide.asm):00468         SavLSN   pshs  b,x          Save work copy of LSN
0182 A6A824           (        ccide.asm):00469                  lda   PD.DNS,y     Make copy of physical drive #
0185 8401             (        ccide.asm):00470                  anda  #PhysDriv
0187 A7C901B3         (        ccide.asm):00471                  sta   PhysDrv,u
018B 4F               (        ccide.asm):00472                  clra               Flag: LSN0
018C E7C901BF         (        ccide.asm):00473                  stb   OS9LSN,u     Save OS-9 LSN
0190 2701             (        ccide.asm):00474                  beq   dox          Could be LSN0
0192 4C               (        ccide.asm):00475                  inca               Not LSN0
0193 AFC901C0         (        ccide.asm):00476         dox      stx   OS9LSN+1,u
0197 2701             (        ccide.asm):00477                  beq   doPSN        Is LSN0
0199 4C               (        ccide.asm):00478                  inca               Not LSN0
019A A7C901CF         (        ccide.asm):00479         doPSN    sta   LSN0Flag,u   Save LSN0 flag (0=Yes, anything else, no)
019E E7C901C2         (        ccide.asm):00480                  stb   OS9PSN,u     Save OS-9 PSN
01A2 AFC901C3         (        ccide.asm):00481                  stx   OS9PSN+1,u
01A6 64C901C2         (        ccide.asm):00482                  lsr   OS9PSN,u     Divide LSN by 2 for PSN (512 bytes/sector)
01AA 66C901C3         (        ccide.asm):00483                  ror   OS9PSN+1,u
01AE 66C901C4         (        ccide.asm):00484                  ror   OS9PSN+2,u
01B2 240D             (        ccide.asm):00485                  bcc   Even         Even sector requested, half will be odd (+1)
                      (        ccide.asm):00486         * Subtract 1 from current LSN
01B4 EC61             (        ccide.asm):00487                  ldd   1,s
01B6 830001           (        ccide.asm):00488                  subd  #1
01B9 ED61             (        ccide.asm):00489                  std   1,s
01BB E6E4             (        ccide.asm):00490                  ldb   ,s
01BD C200             (        ccide.asm):00491                  sbcb  #0
01BF 200B             (        ccide.asm):00492                  bra   SaveExit
                      (        ccide.asm):00493         
                      (        ccide.asm):00494         * Add 1 to current LSN
01C1 EC61             (        ccide.asm):00495         Even     ldd   1,s
01C3 C30001           (        ccide.asm):00496                  addd  #1
01C6 ED61             (        ccide.asm):00497                  std   1,s
01C8 E6E4             (        ccide.asm):00498                  ldb   ,s
01CA C900             (        ccide.asm):00499                  adcb  #0
01CC AE61             (        ccide.asm):00500         SaveExit ldx   1,s
01CE E7C901D3         (        ccide.asm):00501                  stb   TempHalf,u   Save buffered sector #
01D2 AFC901D4         (        ccide.asm):00502                  stx   TempHalf+1,u
01D6 3263             (        ccide.asm):00503                  leas  3,s          Eat temp stack
01D8 AE23             (        ccide.asm):00504                  ldx   PD.DEV,y     Get ptr to device table entry
01DA AE04             (        ccide.asm):00505                  ldx   V$DESC,x     Get device descriptor ptr
01DC AE8826           (        ccide.asm):00506                  ldx   PartOfs,x    Get partition offset value
01DF AFC901DC         (        ccide.asm):00507                  stx   TempOfs,u    Save copy of it
01E3 E6C901BF         (        ccide.asm):00508                  ldb   OS9LSN,u     Restore LSN
01E7 AEC901C0         (        ccide.asm):00509                  ldx   OS9LSN+1,u
01EB A6C901CF         (        ccide.asm):00510                  lda   LSN0Flag,u   Set CC bits for LSN0 compare
01EF 39               (        ccide.asm):00511                  rts
                      (        ccide.asm):00512         
                      (        ccide.asm):00513         * READ
                      (        ccide.asm):00514         * Entry: Y = address of path descriptor
                      (        ccide.asm):00515         *        U = address of device memory (ie, of V.PAGE)
                      (        ccide.asm):00516         *        B = MSB of OS-9 disk LSN
                      (        ccide.asm):00517         *        X = LSB of OS-9 disk LSN
                      (        ccide.asm):00518         * Eventually change LSN stuff to use a bit from descriptor as to whether
                      (        ccide.asm):00519         *   buffered LSN0 or not. (After that, add in for general 8k block buffering
                      (        ccide.asm):00520         *   or not).
                      (        ccide.asm):00521         * Later, add check for DriveFlg that sees if device has removable media. If
                      (        ccide.asm):00522         *   not, and caching for each logical drive is done, keep PERMANENT copy of
                      (        ccide.asm):00523         *   LSN0 at all times, and just copy it when requested (WRITE will update copy
                      (        ccide.asm):00524         *   if new LSN0 is written).
                      (        ccide.asm):00525         * MAKE SURE WRITE ROUTINE UPDATES CACHING STUFF CORRECTLY!
01F0 17FF76           (        ccide.asm):00526         Read     lbsr  ChekBusy       Wait for driver to be unbusy
01F3 8D8B             (        ccide.asm):00527                  bsr   SavLSN         Save LSN/PSN, PartOfs & HalfSect info
01F5 261A             (        ccide.asm):00528                  bne   NotLSN0        Not LSN0, skip ahead
                      (        ccide.asm):00529         * Theoretically, following REM'ed out lines will handle removable media:
                      (        ccide.asm):00530         *         lda   DriveFlg,u     Get drive flag settings
                      (        ccide.asm):00531         *         bita  #Remove        Removable media?
                      (        ccide.asm):00532         *         bne   NotLSN0        Yes, LSN0 may change from disk swap
                      (        ccide.asm):00533         
                      (        ccide.asm):00534         * LSN0 - 1st see if buffered
01F7 A6C901B3         (        ccide.asm):00535                  lda   PhysDrv,u      Get requested physical drive #
01FB A1C901D0         (        ccide.asm):00536                  cmpa  Sect0Drv,u     Same drive in LSN0 cache?
01FF 2645             (        ccide.asm):00537                  bne   PhysRead       No, go physically read off of drive
0201 AEC901DC         (        ccide.asm):00538                  ldx   TempOfs,u      Get copy of partition offset
0205 ACC901D1         (        ccide.asm):00539                  cmpx  Sect0Ofs,u     Same as cached LSN0 offset?
0209 263B             (        ccide.asm):00540                  bne   PhysRead       No, physically read the sector
                      (        ccide.asm):00541         * LSN0 buffered goes here - later add check against DriveFlg with removable
                      (        ccide.asm):00542         *   media bit - if non-removable, copy from cache, otherwise to physical read
020B 30C901DE         (        ccide.asm):00543                  leax  Sect0,u        Point to LSN0 cache
020F 2025             (        ccide.asm):00544                  bra   CopyBuff       Copy to caller's PD.BUF, exit from there
                      (        ccide.asm):00545         
                      (        ccide.asm):00546         * Not LSN0 - see if normal sector is currently cached.
                      (        ccide.asm):00547         * Entry: B:X=LSN
0211 E1C901D9         (        ccide.asm):00548         NotLSN0  cmpb  HalfSct,u      Same as cached sector?
0215 262F             (        ccide.asm):00549                  bne   PhysRead
0217 ACC901DA         (        ccide.asm):00550                  cmpx  HalfSct+1,u    Same as cached sector?
021B 2629             (        ccide.asm):00551                  bne   PhysRead
021D A6C901B3         (        ccide.asm):00552                  lda   PhysDrv,u      Same drive as cached?
0221 A1C901D6         (        ccide.asm):00553                  cmpa  HalfDrv,u
0225 261F             (        ccide.asm):00554                  bne   PhysRead       No, need physical read of sector
0227 ECC901DC         (        ccide.asm):00555                  ldd   TempOfs,u      Get current request's Partition offset
022B 10A3C901D7       (        ccide.asm):00556                  cmpd  HalfOfs,u      Same as cached?
0230 2614             (        ccide.asm):00557                  bne   PhysRead       No, physical read of sector
                      (        ccide.asm):00558         * Non-LSN0 sector is cached - if removable drive, force physical read unless
                      (        ccide.asm):00559         *   we somehow monitor disk swaps (some media require Eject commands)
0232 30C902DE         (        ccide.asm):00560                  leax  HalfBuff,u     Point to cached sector
                      (        ccide.asm):00561         * Copy sector from cache buffer to caller's buffer
                      (        ccide.asm):00562         * Entry: X=Ptr to cache buffer (either Sect0, or HalfBuff)
0236 5F               (        ccide.asm):00563         CopyBuff clrb                 256 counter
0237 10AE28           (        ccide.asm):00564                  ldy   PD.BUF,y       Point to caller's buffer
023A A680             (        ccide.asm):00565         CpyLoop  lda   ,x+            Copy it
023C A7A0             (        ccide.asm):00566                  sta   ,y+
023E 5A               (        ccide.asm):00567                  decb
023F 26F9             (        ccide.asm):00568                  bne   CpyLoop
0241 6FC901C8         (        ccide.asm):00569                  clr   drvrbusy,u     Flag driver not busy
0245 39               (        ccide.asm):00570                  rts
                      (        ccide.asm):00571         
                      (        ccide.asm):00572         * Not buffered in any way - physical read required - update cache tags AFTER
                      (        ccide.asm):00573         *   read, or flag with $FF if failed.
                      (        ccide.asm):00574         * Entry: Y=Ptr to path descriptor
                      (        ccide.asm):00575         *        U=Driver mem
0246 170088           (        ccide.asm):00576         PhysRead lbsr  InitRead       Tell IDE to read sector
0249 240D             (        ccide.asm):00577                  bcc   DoRead         No error, do read
024B 86FF             (        ccide.asm):00578         FlagBad  lda   #$FF           If IDE can't even initiate read, flag both
024D A7C901D0         (        ccide.asm):00579                  sta   Sect0Drv,u     LSN0 and HalfBuff as bad
0251 A7C901D6         (        ccide.asm):00580                  sta   HalfDrv,u
0255 16021F           (        ccide.asm):00581                  lbra  RprtErr
                      (        ccide.asm):00582         
                      (        ccide.asm):00583         * Entry: Y=path dsc. ptr
                      (        ccide.asm):00584         *        U=Driver mem ptr
0258 A6C901C1         (        ccide.asm):00585         DoRead   lda   OS9LSN+2,u     Get LSB of OS9 sector #
025C 44               (        ccide.asm):00586                  lsra                 Shift 1/2 512 sector flag out
025D 250C             (        ccide.asm):00587                  bcs   DoOdd          Odd sector, buffer even one 1st
025F AE28             (        ccide.asm):00588                  ldx   PD.BUF,y       Get pointer to caller's buffer
0261 8D73             (        ccide.asm):00589                  bsr   Read256        Copy 1st half of HD sector there
0263 30C902DE         (        ccide.asm):00590                  leax  HalfBuff,u     Point to cache buffer
0267 8D6D             (        ccide.asm):00591                  bsr   Read256        Copy 2nd half of HD sector there
0269 200A             (        ccide.asm):00592                  bra   FinRead        Finish the Read command on IDE
                      (        ccide.asm):00593         
                      (        ccide.asm):00594         * Copy to cache 1st (Odd sector # request)
026B 30C902DE         (        ccide.asm):00595         DoOdd    leax  HalfBuff,u   Point to cache buffer
026F 8D65             (        ccide.asm):00596                  bsr   Read256      1st half goes there
0271 AE28             (        ccide.asm):00597                  ldx   PD.BUF,y     Get pointer to caller's buffer
0273 8D61             (        ccide.asm):00598                  bsr   Read256      2nd half goes there
0275 1701F1           (        ccide.asm):00599         FinRead  lbsr  WaitOK       Wait for drive to complete command
0278 2424             (        ccide.asm):00600                  bcc   DoneRead     No error, exit
027A 1601FA           (        ccide.asm):00601                  lbra  RprtErr      Exit with error
                      (        ccide.asm):00602         
                      (        ccide.asm):00603         * Update HalfSct vars to whatever is in TempHalf
027D ECC901D3         (        ccide.asm):00604         GoodCach ldd   TempHalf,u     Copy Buffered LSN to HalfSct
0281 EDC901D9         (        ccide.asm):00605                  std   HalfSct,u
0285 A6C901D5         (        ccide.asm):00606                  lda   TempHalf+2,u
0289 A7C901DB         (        ccide.asm):00607                  sta   HalfSct+2,u
028D ECC901DC         (        ccide.asm):00608                  ldd   TempOfs,u      Get partition offset
0291 EDC901D7         (        ccide.asm):00609                  std   HalfOfs,u      Save it
0295 A6C901B3         (        ccide.asm):00610                  lda   PhysDrv,u      Copy drive # to HalfDrv
0299 A7C901D6         (        ccide.asm):00611                  sta   HalfDrv,u
029D 39               (        ccide.asm):00612                  rts
                      (        ccide.asm):00613         
                      (        ccide.asm):00614         * Entry: Read command complete on IDE.
                      (        ccide.asm):00615         *   Y=ptr to path descriptor
                      (        ccide.asm):00616         *   U=ptr to driver mem
029E 8DDD             (        ccide.asm):00617         DoneRead bsr   GoodCach       Update HalfSct stuff with Temp stuff
02A0 E6C901CF         (        ccide.asm):00618                  ldb   LSN0Flag,u     Was this LSN0?
02A4 2626             (        ccide.asm):00619                  bne   GoodExit       No, leave
                      (        ccide.asm):00620         * LSN0 just physically read - update drive table
                      (        ccide.asm):00621         * CHANGE EVENTUALLY TO CHECK IF NON-REMOVABLE MEDIA; IF IT IS, DON'T BOTHER
                      (        ccide.asm):00622         *   WITH THESE CHECKS!
02A6 A7C901D0         (        ccide.asm):00623                  sta   Sect0Drv,u     Save which drive LSN0 is buffered
02AA ECC901DC         (        ccide.asm):00624                  ldd   TempOfs,u      Restore partition offset again
02AE EDC901D1         (        ccide.asm):00625                  std   Sect0Ofs,u     Save for LSN0
02B2 30C901DE         (        ccide.asm):00626                  leax  Sect0,u        Point to LSN0 buffer
02B6 5F               (        ccide.asm):00627                  clrb                 256 counter
02B7 3420             (        ccide.asm):00628                  pshs  y              Save path dsc. ptr
02B9 10AE28           (        ccide.asm):00629                  ldy   PD.BUF,y       Point to caller's buffer
02BC A6A0             (        ccide.asm):00630         LSN0Loop lda   ,y+            Copy LSN0 from callers buffer to LSN0 cache
02BE A780             (        ccide.asm):00631                  sta   ,x+
02C0 5A               (        ccide.asm):00632                  decb
02C1 26F9             (        ccide.asm):00633                  bne   LSN0Loop
02C3 3520             (        ccide.asm):00634                  puls  y              Restore path dsc. ptr
02C5 30C901DE         (        ccide.asm):00635                  leax  Sect0,u        Point to LSN0 cache again
02C9 1702DC           (        ccide.asm):00636         CopyTbl1 lbsr  CpyDrvTb       Copy LSN0 stuff to drive table
02CC 6FC901C8         (        ccide.asm):00637         GoodExit clr   drvrbusy,u     No error & return
02D0 39               (        ccide.asm):00638                  rts
                      (        ccide.asm):00639         
                      (        ccide.asm):00640         * Initiate the 512 byte READ sequence
                      (        ccide.asm):00641         * Entry: U=Driver mem ptr
                      (        ccide.asm):00642         *        Y=Path dsc. ptr (?)
                      (        ccide.asm):00643         * Exit:  CC=0 if no error
                      (        ccide.asm):00644         *        CC=1 if error
                      (        ccide.asm):00645         *            B=Error code
02D1 C620             (        ccide.asm):00646         InitRead ldb   #ReadRtry      Read sector (with retry) IDE command
02D3 1601E0           (        ccide.asm):00647                  lbra  SetIDE         Send to IDE, return from there (w or w/o err)
                      (        ccide.asm):00648         
                      (        ccide.asm):00649         * Copy 256 bytes of data from IDE controller (after READ, etc.)
                      (        ccide.asm):00650         * Entry: X=ptr to 256 byte destination buffer
                      (        ccide.asm):00651         *        U=ptr to driver memory
                      (        ccide.asm):00652         * Exit: 256 bytes copied
                      (        ccide.asm):00653         *        B is destroyed, A=0
                      (        ccide.asm):00654         *        Y is preserved
02D6 8620             (        ccide.asm):00655         Read256  lda   #$20           # of loops (of 8 bytes)
02D8 3422             (        ccide.asm):00656                  pshs  y,a            Save y & counter
02DA 10AE41           (        ccide.asm):00657                  ldy   V.PORT,u       Get ptr to IDE controller for this drive
02DD A6A4             (        ccide.asm):00658         ReadLp   lda   ,y             Get 16 bits of data, and save in buffer, 8
02DF E628             (        ccide.asm):00659                  ldb   Latch,y          times
02E1 ED84             (        ccide.asm):00660                  std   ,x
02E3 A6A4             (        ccide.asm):00661                  lda   ,y
02E5 E628             (        ccide.asm):00662                  ldb   Latch,y
02E7 ED02             (        ccide.asm):00663                  std   2,x
02E9 A6A4             (        ccide.asm):00664                  lda   ,y
02EB E628             (        ccide.asm):00665                  ldb   Latch,y
02ED ED04             (        ccide.asm):00666                  std   4,x
02EF A6A4             (        ccide.asm):00667                  lda   ,y
02F1 E628             (        ccide.asm):00668                  ldb   Latch,y
02F3 ED06             (        ccide.asm):00669                  std   6,x
02F5 3008             (        ccide.asm):00670                  leax  8,x            Bump ptr up
02F7 6AE4             (        ccide.asm):00671                  dec   ,s             Done all bytes?
02F9 26E2             (        ccide.asm):00672                  bne   ReadLp         No, keep going
02FB 35A2             (        ccide.asm):00673                  puls  a,y,pc         Restore Y & return
                      (        ccide.asm):00674         
                      (        ccide.asm):00675         * WRITE - Can use cache data, or preread sector
                      (        ccide.asm):00676         * Y = address of path descriptor
                      (        ccide.asm):00677         * U = address of device memory (ie, of V.PAGE)
                      (        ccide.asm):00678         * B = MSB of OS-9 disk LSN
                      (        ccide.asm):00679         * X = LSB of OS-9 disk LSN
                      (        ccide.asm):00680         * 1st , see if other half is buffered in HalfBuff
02FD 17FE69           (        ccide.asm):00681         FWrite   lbsr  ChekBusy     Wait for driver to be unbusy
0300 17FE7D           (        ccide.asm):00682                  lbsr  SavLSN       Save LSN info, set LSN0Flag for later
0303 E6C901D3         (        ccide.asm):00683                  ldb   TempHalf,u   Get OS9 LSN of 'other half' of 512 byte sector
0307 E1C901D9         (        ccide.asm):00684                  cmpb  HalfSct,u    Same MSB of buffered sector #?
030B 2627             (        ccide.asm):00685                  bne   ChkLSN1      No, check if LSN1
030D AEC901D4         (        ccide.asm):00686                  ldx   TempHalf+1,u LSW of 'other half'
0311 ACC901DA         (        ccide.asm):00687                  cmpx  HalfSct+1,u  Same as LSW of buffered sector #?
0315 261D             (        ccide.asm):00688                  bne   ChkLSN1      No, check if LSN1
0317 ECC901D7         (        ccide.asm):00689                  ldd   HalfOfs,u    Same partition as buffered sector's drive?
031B 10A3C901DC       (        ccide.asm):00690                  cmpd  TempOfs,u
0320 2612             (        ccide.asm):00691                  bne   ChkLSN1      No, check if LSN1
0322 A6C901B3         (        ccide.asm):00692                  lda   PhysDrv,u    Same physical drive as buffered sector's drive?
0326 A1C901D6         (        ccide.asm):00693                  cmpa  HalfDrv,u    Same as buffered sector's drive?
032A 2608             (        ccide.asm):00694                  bne   ChkLSN1      No, check is LSN1
                      (        ccide.asm):00695         * Buffered sector IS the other half of current write sector...no preread nec-
                      (        ccide.asm):00696         *   essary.
032C 170136           (        ccide.asm):00697                  lbsr  InitWrit     Send Write command to IDE, setup mode, etc.
032F 246E             (        ccide.asm):00698                  bcc   GoodWrit     No problems, continue with Write
0331 16FF17           (        ccide.asm):00699                  lbra  FlagBad      Flag caches as bad, exit with error
                      (        ccide.asm):00700         
                      (        ccide.asm):00701         * See if request is for LSN1, in which case we may have LSN0 buffered
0334 E6C901BF         (        ccide.asm):00702         ChkLSN1  ldb   OS9LSN,u     Get MSB of sector to write
0338 2632             (        ccide.asm):00703                  bne   PreRead      Not 0, need physical preread
033A AEC901C0         (        ccide.asm):00704                  ldx   OS9LSN+1,u   Get LSW of sector to write
033E 8C0001           (        ccide.asm):00705                  cmpx  #1           LSN=1?
0341 2629             (        ccide.asm):00706                  bne   PreRead      Not LSN1, need to preread sector
0343 A6C901B3         (        ccide.asm):00707                  lda   PhysDrv,u    Get physical drive #
0347 A1C901D0         (        ccide.asm):00708                  cmpa  Sect0Drv,u   Same as buffered LSN0?
034B 261F             (        ccide.asm):00709                  bne   PreRead      No, need physical preread
034D ECC901DC         (        ccide.asm):00710                  ldd   TempOfs,u    Get partition offset of requested sector
0351 10A3C901D1       (        ccide.asm):00711                  cmpd  Sect0Ofs,u   Same as buffered?
0356 2614             (        ccide.asm):00712                  bne   PreRead
                      (        ccide.asm):00713         * We have LSN0 buffered for an LSN1 write
0358 17010A           (        ccide.asm):00714                  lbsr  InitWrit     Send Write to IDE
035B 2403             (        ccide.asm):00715                  bcc   ContWrt1     Successful, continue
035D 160117           (        ccide.asm):00716                  lbra  RprtErr
                      (        ccide.asm):00717         
0360 30C901DE         (        ccide.asm):00718         ContWrt1 leax  Sect0,u      Point to buffered Sector 0
0364 8D5E             (        ccide.asm):00719                  bsr   Write256     Write to IDE
0366 AE28             (        ccide.asm):00720                  ldx   PD.BUF,y     Get ptr to caller's LSN1 buffer
0368 8D5A             (        ccide.asm):00721                  bsr   Write256     Write to IDE
036A 2050             (        ccide.asm):00722                  bra   FinWrite     Complete the write command
                      (        ccide.asm):00723         
                      (        ccide.asm):00724         * Nothing buffered, pre-read sector in so we have other half to write.
                      (        ccide.asm):00725         * Note that OS9PSN is already set to the correct physical sector.
036C 17FF62           (        ccide.asm):00726         PreRead  lbsr  InitRead     Send Read command to IDE
036F 2403             (        ccide.asm):00727                  bcc   GotPreRd     No problem, continue
0371 16FED7           (        ccide.asm):00728                  lbra  FlagBad      Flag caches as bad; exit with error
                      (        ccide.asm):00729         
0374 A6C901C1         (        ccide.asm):00730         GotPreRd lda   OS9LSN+2,u   Get least sig. byte of LSN to write
0378 44               (        ccide.asm):00731                  lsra               Odd or even sector?
0379 240B             (        ccide.asm):00732                  bcc   ReadOdd      Even write sector requested
                      (        ccide.asm):00733         * Odd write requested
037B 30C902DE         (        ccide.asm):00734                  leax  HalfBuff,u   Point to 1/2 sector cache
037F 17FF54           (        ccide.asm):00735                  lbsr  Read256      Read it in
0382 8D67             (        ccide.asm):00736                  bsr   Eat256       Bleed off other half (not needed)
0384 2009             (        ccide.asm):00737                  bra   FinPre
                      (        ccide.asm):00738         
                      (        ccide.asm):00739         * Even sector to write - buffer odd one
0386 8D63             (        ccide.asm):00740         ReadOdd  bsr   Eat256       Bleed 1st half
0388 30C902DE         (        ccide.asm):00741                  leax  HalfBuff,u   Read in 2nd half
038C 17FF47           (        ccide.asm):00742                  lbsr  Read256
038F 1700D7           (        ccide.asm):00743         FinPre   lbsr  WaitOK       Get OK from controller
0392 2403             (        ccide.asm):00744                  bcc   DonePre      Good, continue
0394 1600E0           (        ccide.asm):00745         BadExit  lbra  RprtErr      Error, exit with it
                      (        ccide.asm):00746         
0397 17FEE3           (        ccide.asm):00747         DonePre  lbsr  GoodCach     Update HalfSct stuff only
039A 1700C8           (        ccide.asm):00748                  lbsr  InitWrit     Initialize Write command
039D 25F5             (        ccide.asm):00749                  bcs   BadExit
                      (        ccide.asm):00750         * Now, onto the write
039F E6C901C1         (        ccide.asm):00751         GoodWrit ldb   OS9LSN+2,u   Get least sig. byte of LSN
03A3 54               (        ccide.asm):00752                  lsrb               Odd or even sector to write?
03A4 250C             (        ccide.asm):00753                  bcs   BuffWOdd     Write fully buffered Odd
                      (        ccide.asm):00754         * We are writing even portion, odd is in cache
03A6 AE28             (        ccide.asm):00755                  ldx   PD.BUF,y     Get ptr to caller's 256 byte buffer
03A8 8D1A             (        ccide.asm):00756                  bsr   Write256     Write to IDE
03AA 30C902DE         (        ccide.asm):00757                  leax  HalfBuff,u   Point to cached sector
03AE 8D14             (        ccide.asm):00758                  bsr   Write256     Write to IDE
03B0 200A             (        ccide.asm):00759                  bra   FinWrite
                      (        ccide.asm):00760         
03B2 30C902DE         (        ccide.asm):00761         BuffWOdd leax  HalfBuff,u   Point to cached sector
03B6 8D0C             (        ccide.asm):00762                  bsr   Write256     Write to IDE
03B8 AE28             (        ccide.asm):00763                  ldx   PD.BUF,y     Point to caller's 256 byte buffer
03BA 8D08             (        ccide.asm):00764                  bsr   Write256     Write to IDE
03BC 1700AA           (        ccide.asm):00765         FinWrite lbsr  WaitOK       Wait for IDE to be done command
03BF 243D             (        ccide.asm):00766                  bcc   DoneWrit     No error, done writing
03C1 1600B3           (        ccide.asm):00767                  lbra  RprtErr      Error, exit with it
                      (        ccide.asm):00768         
                      (        ccide.asm):00769         * Write 256 bytes from ,x to IDE
                      (        ccide.asm):00770         * Entry: X=ptr to 256 buffer to write
                      (        ccide.asm):00771         *        U=driver mem ptr
                      (        ccide.asm):00772         * Exit: 256 bytes written
                      (        ccide.asm):00773         *        B is destroyed, A=0
                      (        ccide.asm):00774         *        X=end of buffer+1
                      (        ccide.asm):00775         *        Y is preserved
03C4 8620             (        ccide.asm):00776         Write256 lda   #$20         # of 8 byte loops
03C6 3422             (        ccide.asm):00777                  pshs  y,a          Save Y & loop counter
03C8 10AE41           (        ccide.asm):00778                  ldy   V.PORT,u     Get IDE base address
03CB EC84             (        ccide.asm):00779         WritLp   ldd   ,x           Copy 256 bytes from buffer to IDE
03CD E728             (        ccide.asm):00780                  stb   Latch,y
03CF A7A4             (        ccide.asm):00781                  sta   ,y
03D1 EC02             (        ccide.asm):00782                  ldd   2,x
03D3 E728             (        ccide.asm):00783                  stb   Latch,y
03D5 A7A4             (        ccide.asm):00784                  sta   ,y
03D7 EC04             (        ccide.asm):00785                  ldd   4,x
03D9 E728             (        ccide.asm):00786                  stb   Latch,y
03DB A7A4             (        ccide.asm):00787                  sta   ,y
03DD EC06             (        ccide.asm):00788                  ldd   6,x
03DF E728             (        ccide.asm):00789                  stb   Latch,y
03E1 A7A4             (        ccide.asm):00790                  sta   ,y
03E3 3008             (        ccide.asm):00791                  leax  8,x
03E5 6AE4             (        ccide.asm):00792                  dec   ,s
03E7 26E2             (        ccide.asm):00793                  bne   WritLp
03E9 35A2             (        ccide.asm):00794                  puls  a,y,pc       Restore regs & return
                      (        ccide.asm):00795         
                      (        ccide.asm):00796         * Eat 256 bytes from IDE (hopefully, triggering latch will skip having to
                      (        ccide.asm):00797         *  read even bytes)
                      (        ccide.asm):00798         * Entry: U=driver memory ptr
                      (        ccide.asm):00799         *        Y=Path descriptor ptr
                      (        ccide.asm):00800         * Exit: 256 bytes bled off of sector buffer on IDE
                      (        ccide.asm):00801         * All regs preserved
03EB 3416             (        ccide.asm):00802         Eat256   pshs  d,x          Save regs
03ED C620             (        ccide.asm):00803                  ldb   #$20         32 loops
03EF AE41             (        ccide.asm):00804                  ldx   V.PORT,u     Get pointer to IDE
03F1 A684             (        ccide.asm):00805         EatLp    lda   ,x           Read seems to be a pre-trigger
03F3 A684             (        ccide.asm):00806                  lda   ,x           Eat each 16 bit trigger byte
03F5 A684             (        ccide.asm):00807                  lda   ,x
03F7 A684             (        ccide.asm):00808                  lda   ,x
03F9 5A               (        ccide.asm):00809                  decb
03FA 26F5             (        ccide.asm):00810                  bne   EatLp
03FC 3596             (        ccide.asm):00811                  puls  d,x,pc       Restore regs & return
                      (        ccide.asm):00812         
                      (        ccide.asm):00813         * Write command to IDE completed successfully
                      (        ccide.asm):00814         * Update cache (copy PD.BUF to Cache if even sector, so a sequential
                      (        ccide.asm):00815         *   write will have the 1st half cached, or leave current cache alone if
                      (        ccide.asm):00816         *   odd). Also, check if LSN0. If it is, copy to LSN0 cache, updating
                      (        ccide.asm):00817         *   vars, and copy drive table info
03FE E6C901CF         (        ccide.asm):00818         DoneWrit ldb   LSN0Flag,u   Was it sector 0?
0402 2740             (        ccide.asm):00819                  beq   WritLSN0     Yes, special processing for that
0404 E6C901C1         (        ccide.asm):00820                  ldb   OS9LSN+2,u   Get LSB of sector #
0408 54               (        ccide.asm):00821                  lsrb               Odd/Even?
0409 2405             (        ccide.asm):00822                  bcc   CpyCache     Even, copy to Cache
                      (        ccide.asm):00823         * Odd sector written, leave cache as is
040B 6FC901C8         (        ccide.asm):00824                  clr   drvrbusy,u   Exit without error
040F 39               (        ccide.asm):00825                  rts
                      (        ccide.asm):00826         
                      (        ccide.asm):00827         * Copy PD.BUF sector to HalfBuff cache, update cache tags
0410 A6C901B3         (        ccide.asm):00828         CpyCache lda   PhysDrv,u    Set cache vars for PD.BUF sector
0414 A7C901D6         (        ccide.asm):00829                  sta   HalfDrv,u
0418 ECC901DC         (        ccide.asm):00830                  ldd   TempOfs,u
041C EDC901D7         (        ccide.asm):00831                  std   HalfOfs,u
0420 ECC901BF         (        ccide.asm):00832                  ldd   OS9LSN,u
0424 EDC901D9         (        ccide.asm):00833                  std   HalfSct,u
0428 A6C901C1         (        ccide.asm):00834                  lda   OS9LSN+2,u
042C A7C901DB         (        ccide.asm):00835                  sta   HalfSct+2,u
0430 30C902DE         (        ccide.asm):00836                  leax  HalfBuff,u   Point to 1/2 sector cache
0434 5F               (        ccide.asm):00837         CachBuff clrb
0435 10AE28           (        ccide.asm):00838                  ldy   PD.BUF,y     Get ptr to callers buffer
0438 A6A0             (        ccide.asm):00839         CachLp   lda   ,y+          Copy even sector to cache (in case of sequential
043A A780             (        ccide.asm):00840                  sta   ,x+            writes)
043C 5A               (        ccide.asm):00841                  decb
043D 26F9             (        ccide.asm):00842                  bne   CachLp
043F 6FC901C8         (        ccide.asm):00843                  clr   drvrbusy,u
0443 39               (        ccide.asm):00844                  rts
                      (        ccide.asm):00845         
                      (        ccide.asm):00846         * We wrote LSN0 - 1st, update LSN0 cache tags, then copy PD.BUF to Sect0,
                      (        ccide.asm):00847         *   then update drive table entry.
                      (        ccide.asm):00848         * Entry: U=drive mem ptr
                      (        ccide.asm):00849         *        Y=path dsc. ptr
0444 A6C901B3         (        ccide.asm):00850         WritLSN0 lda   PhysDrv,u    Copy cache tag stuff for Sect0 cache
0448 A7C901D0         (        ccide.asm):00851                  sta   Sect0Drv,u
044C ECC901DC         (        ccide.asm):00852                  ldd   TempOfs,u
0450 EDC901D1         (        ccide.asm):00853                  std   Sect0Ofs,u
0454 30C901DE         (        ccide.asm):00854                  leax  Sect0,u      Point to LSN0 cache
0458 8DDA             (        ccide.asm):00855                  bsr   CachBuff     Copy from PD.BUF to Sect0 buff
045A 30C901DE         (        ccide.asm):00856                  leax  Sect0,u      Point to LSN0 cache again
045E 6FC901C8         (        ccide.asm):00857                  clr   drvrbusy,u
0462 160143           (        ccide.asm):00858                  lbra  CpyDrvTb     Copy info to drive table, exit from there
                      (        ccide.asm):00859         
                      (        ccide.asm):00860         * Initialize Write sequence to IDE
                      (        ccide.asm):00861         * Entry: U=driver mem ptr
                      (        ccide.asm):00862         *        Y=Ptr to path descriptor
                      (        ccide.asm):00863         * Exits back to calling routine. CC=0 if command ready on controller
                      (        ccide.asm):00864         *  CC=1, B=Raw IDE error code if command failed
0465 C630             (        ccide.asm):00865         InitWrit ldb   #WritRtry    IDE Write w/ Retry command
0467 204D             (        ccide.asm):00866                  bra   SetIDE       Send to IDE, return from there w or w/o error
                      (        ccide.asm):00867         
                      (        ccide.asm):00868         * After read or write, check drive status
                      (        ccide.asm):00869         * Exit: CC=0, command ok, CC=1, Error from IDE (B=Raw error code)
                      (        ccide.asm):00870         *   X=Ptr to hardware address
0469 AE41             (        ccide.asm):00871         WaitOK   ldx   V.PORT,u    Get status register
046B 6D07             (        ccide.asm):00872         WaitLp   tst   Status,x    Still busy, wait till unbusy
046D 2BFC             (        ccide.asm):00873                  bmi   WaitLp
046F 8601             (        ccide.asm):00874                  lda   #ErrorFnd   Check Error flag
0471 A507             (        ccide.asm):00875                  bita  Status,x    Error from controller?
0473 2602             (        ccide.asm):00876                  bne   RprtErr     Yes, go get error
0475 5F               (        ccide.asm):00877                  clrb              No, exit without error
0476 39               (        ccide.asm):00878                  rts
                      (        ccide.asm):00879         
                      (        ccide.asm):00880         * Entry: B=Error code from IDE
0477 54               (        ccide.asm):00881         RprtErr  lsrb
0478 2404             (        ccide.asm):00882                  bcc   ChkTk0
047A C6F1             (        ccide.asm):00883         SctrExit ldb   #E$Sect     Bad sector # for Addres Mark Not Found
047C 202A             (        ccide.asm):00884                  bra   ExitErr
                      (        ccide.asm):00885         
047E 54               (        ccide.asm):00886         ChkTk0   lsrb
047F 2404             (        ccide.asm):00887                  bcc   ChkMdChg
0481 C6F7             (        ccide.asm):00888         SeekExit ldb   #E$Seek     Seek error for Track 0 not found
0483 2023             (        ccide.asm):00889                  bra   ExitErr
                      (        ccide.asm):00890         
0485 54               (        ccide.asm):00891         ChkMdChg lsrb
0486 2404             (        ccide.asm):00892                  bcc   ChkAbrt
0488 C6FB             (        ccide.asm):00893         MdChExit ldb   #E$DIDC     Media changed error
048A 201C             (        ccide.asm):00894                  bra   ExitErr
                      (        ccide.asm):00895         
048C 54               (        ccide.asm):00896         ChkAbrt  lsrb
048D 2404             (        ccide.asm):00897                  bcc   ChkIdnf
048F C6D0             (        ccide.asm):00898                  ldb   #E$UnkSvc   Unknown service error for aborted command
0491 2015             (        ccide.asm):00899                  bra   ExitErr
                      (        ccide.asm):00900         
0493 54               (        ccide.asm):00901         ChkIdnf  lsrb
0494 25E4             (        ccide.asm):00902                  bcs   SctrExit    Sector error for ID not found
0496 54               (        ccide.asm):00903                  lsrb
0497 25EF             (        ccide.asm):00904                  bcs   MdChExit    Media changed error for Media Change
0499 54               (        ccide.asm):00905                  lsrb
049A 2404             (        ccide.asm):00906                  bcc   ChkBBK
049C C6F3             (        ccide.asm):00907                  ldb   #E$CRC      CRC Error for Uncorrectable data
049E 2008             (        ccide.asm):00908                  bra   ExitErr
                      (        ccide.asm):00909         
04A0 54               (        ccide.asm):00910         ChkBBK   lsrb
04A1 2503             (        ccide.asm):00911                  bcs   ReadExit    Read error for Bad Block Detected
                      (        ccide.asm):00912         * Error flag set, but no error condition
04A3 1600F6           (        ccide.asm):00913                  lbra  ENotRdy     Assume drive not ready
                      (        ccide.asm):00914         
04A6 C6F4             (        ccide.asm):00915         ReadExit ldb   #E$Read
04A8 6FC901C8         (        ccide.asm):00916         ExitErr  clr   drvrbusy,u  Flag driver not busy
04AC 43               (        ccide.asm):00917                  coma              Set carry & exit
04AD 39               (        ccide.asm):00918                  rts
                      (        ccide.asm):00919         
04AE C6F0             (        ccide.asm):00920         BadUnit  ldb   #E$Unit
04B0 20F6             (        ccide.asm):00921                  bra   ExitErr
                      (        ccide.asm):00922         
04B2 E601             (        ccide.asm):00923         CmdErr   ldb   Error,x     Get Error register
04B4 20C1             (        ccide.asm):00924                  bra   RprtErr
                      (        ccide.asm):00925         
                      (        ccide.asm):00926         * Send IDE command (read or write)
                      (        ccide.asm):00927         * Entry: B  = IDE command code
                      (        ccide.asm):00928         *        Y = address of path descriptor
                      (        ccide.asm):00929         *        U = address of device memory (ie, of V.PAGE)
                      (        ccide.asm):00930         * trashes D and X
                      (        ccide.asm):00931         * Exit: CC=0 if command exited with data ready on controller
                      (        ccide.asm):00932         *       CC=1, B=error if problem.
04B6 E7C901C6         (        ccide.asm):00933         SetIDE   stb   idecmd,u     Save copy of IDE command
04BA E6A821           (        ccide.asm):00934                  ldb   PD.DRV,y     Get logical drive #
04BD C10B             (        ccide.asm):00935                  cmpb  #NUMDRIVE    Within range?
04BF 24ED             (        ccide.asm):00936                  bhs   BadUnit      No, exit with error
04C1 30C901B4         (        ccide.asm):00937                  leax  DriveFlg,u   Point to special drive flags table
04C5 A685             (        ccide.asm):00938                  lda   b,x          Get flags for our drive
04C7 2A05             (        ccide.asm):00939                  bpl   TblReady     Properly initialized, figure out mode
04C9 17FB9F           (        ccide.asm):00940                  lbsr  IdentDrv     NOT Initialized, get mode info
04CC 25E4             (        ccide.asm):00941                  bcs   CmdErr       Error doing IDENTIFY DRIVE command, exit
04CE 8401             (        ccide.asm):00942         TblReady anda  #DrvMode     Just need CHS/LBA mode for now
04D0 263D             (        ccide.asm):00943                  bne   DoLBA        LBA mode, go do
                      (        ccide.asm):00944         * Do CHS mode
04D2 ECA829           (        ccide.asm):00945                  ldd   PD.SCT,y     Get # of OS9 (256) sectors/track
04D5 44               (        ccide.asm):00946                  lsra               Convert to 512 byte sectors/track
04D6 56               (        ccide.asm):00947                  rorb
04D7 EDC901CD         (        ccide.asm):00948                  std   CHSSPT,u     Save for Calc routine
04DB AEA81E           (        ccide.asm):00949                  ldx   PD.DTB,y     Get pointer to device table
04DE 1700DE           (        ccide.asm):00950                  lbsr  CalcCHS      Go calculate cyl/head/sector stuff
04E1 25CF             (        ccide.asm):00951                  bcs   CmdErr       Error calculating, exit
04E3 170097           (        ccide.asm):00952                  lbsr  WaitDrv      Go wait for the drive (preserves y)
04E6 25CA             (        ccide.asm):00953                  bcs   CmdErr       Error waiting for drive, exit
                      (        ccide.asm):00954         * Do sector #, then Drive/Head, then Cyl, then sector count, then command
04E8 3420             (        ccide.asm):00955                  pshs  y            Save path descriptor ptr
04EA 10AE41           (        ccide.asm):00956                  ldy   V.PORT,u     Get IDE hardware address
04ED A6C901CC         (        ccide.asm):00957                  lda   CHSSect,u    Get IDE sector #
04F1 A723             (        ccide.asm):00958                  sta   SectNum,y    Save to controller
04F3 A6C901C9         (        ccide.asm):00959                  lda   Head,u       Get IDE head #
04F7 8AA0             (        ccide.asm):00960                  ora   #%10100000   Set CHS mode
04F9 AAC901C5         (        ccide.asm):00961                  ora   DrivMask,u   Merge drive #
04FD A726             (        ccide.asm):00962                  sta   DevHead,y    Save to controller
04FF ECC901CA         (        ccide.asm):00963                  ldd   Cylinder,u   Get 16 bit cylinder # (4095 max)
0503 E3C901DC         (        ccide.asm):00964                  addd  TempOfs,u    Add partition offset cylinder
0507 2563             (        ccide.asm):00965                  bcs   SeekErr      If it overflowed, SEEK error
0509 A725             (        ccide.asm):00966                  sta   CylHigh,y    Save to controller
050B E724             (        ccide.asm):00967                  stb   CylLow,y
050D 2026             (        ccide.asm):00968                  bra   SendCmd      Send sector count & IDE command
                      (        ccide.asm):00969         
                      (        ccide.asm):00970         * Do LBA mode IDE command here
050F 8D6C             (        ccide.asm):00971         DoLBA    bsr   WaitDrv      Wait for controller to be ready
0511 3420             (        ccide.asm):00972                  pshs  y            Save path descriptor ptr
0513 10AE41           (        ccide.asm):00973                  ldy   V.PORT,u     Get IDE hardware address
                      (        ccide.asm):00974         * Copy LBA sector # to controller, including device/head (LBA 24-27)
0516 ECC901C3         (        ccide.asm):00975                  ldd   OS9PSN+1,u   Get bits 0-15 of PSN
051A E723             (        ccide.asm):00976                  stb   SectNum,y    Save bits 0-7
051C A724             (        ccide.asm):00977                  sta   CylLow,y     Save bit 8-15
051E 4F               (        ccide.asm):00978                  clra
051F E6C901C2         (        ccide.asm):00979                  ldb   OS9PSN,u     D=PSN bits 16-23 (24 & up set to 0 for OS9)
0523 E3C901DC         (        ccide.asm):00980                  addd  TempOfs,u    Add partition offset cylinder
0527 810F             (        ccide.asm):00981                  cmpa  #$0f         Overflow past LBA bits?
0529 2241             (        ccide.asm):00982                  bhi   SeekErr      Yes, SEEK error
052B E725             (        ccide.asm):00983                  stb   CylHigh,y    Save bits 16-23
052D 8AE0             (        ccide.asm):00984                  ora   #%11100000   Set LBA mode
052F AAC901C5         (        ccide.asm):00985                  ora   DrivMask,u   Merge drive #
0533 A726             (        ccide.asm):00986                  sta   DevHead,y    Save to controller
                      (        ccide.asm):00987         * Send sector count (1) & command to controller, get results
0535 8E012C           (        ccide.asm):00988         SendCmd  ldx   #MAXWAIT     Get # 1/60th sec. ticks to wait on drive
0538 AFC901B1         (        ccide.asm):00989                  stx   SlpCntr,u    Save it for sleep routine (if needed)
053C CC0140           (        ccide.asm):00990                  ldd   #$0140       Sector count to 1, fast retry to 64 tries
053F A722             (        ccide.asm):00991                  sta   SectCnt,y    Send to controller
0541 A6C901C6         (        ccide.asm):00992                  lda   idecmd,u     Get command to send
0545 A727             (        ccide.asm):00993                  sta   Command,y    Send to controller
0547 A627             (        ccide.asm):00994         CmdLp    lda   Status,y     Get status of drive command
0549 2BFC             (        ccide.asm):00995                  bmi   CmdLp        IDE still busy, no other bits are valid
054B 8501             (        ccide.asm):00996                  bita  #ErrorFnd    Not busy anymore, is there an error?
054D 2626             (        ccide.asm):00997                  bne   TransErr     Yes, figure out what (don't forget to PULS Y!)
054F 8508             (        ccide.asm):00998                  bita  #DataReq     Is data ready for us yet?
0551 2627             (        ccide.asm):00999                  bne   CmdDone      Yes, exit
0553 5A               (        ccide.asm):01000                  decb               Dec counter
0554 26F1             (        ccide.asm):01001                  bne   CmdLp        Keep trying
0556 AEC901B1         (        ccide.asm):01002                  ldx   SlpCntr,u    Get sleep tick counter
055A 301F             (        ccide.asm):01003                  leax  -1,x         Drop it by one
055C 2713             (        ccide.asm):01004                  beq   NoWay        Done count, give up with device not ready error
055E AFC901B1         (        ccide.asm):01005                  stx   SlpCntr,u    Save new sleep counter
0562 8E0001           (        ccide.asm):01006                  ldx   #1           Fast retry didn't work, sleep a tick
0565 103F0A           (        ccide.asm):01007                  os9   F$Sleep
0568 C640             (        ccide.asm):01008                  ldb   #$40         64 fast retries again
056A 20DB             (        ccide.asm):01009                  bra   CmdLp        Try again
                      (        ccide.asm):01010         
056C 17FF12           (        ccide.asm):01011         SeekErr  lbsr  SeekExit     Seek error & exit
056F 35A0             (        ccide.asm):01012                  puls  y,pc
                      (        ccide.asm):01013         
0571 3520             (        ccide.asm):01014         NoWay    puls  y
0573 2027             (        ccide.asm):01015                  bra   ENotRdy
                      (        ccide.asm):01016         
0575 17FF3A           (        ccide.asm):01017         TransErr lbsr  CmdErr       Get error code
0578 35A0             (        ccide.asm):01018                  puls  y,pc         Exit with it, restore path dsc. ptr
                      (        ccide.asm):01019         
057A 5F               (        ccide.asm):01020         CmdDone  clrb               Command complete, return with no error
057B 35A0             (        ccide.asm):01021                  puls  y,pc         Restore path dsc. ptr
                      (        ccide.asm):01022         
                      (        ccide.asm):01023         * Wait for IDE controller to be ready
                      (        ccide.asm):01024         * Entry: Y=path dsc. ptr
                      (        ccide.asm):01025         *        U=driver mem ptr
                      (        ccide.asm):01026         * Exit: CC=0 - controller ready for command
                      (        ccide.asm):01027         *       CC=1 - Error message in B
                      (        ccide.asm):01028         *       DrivMask,u - contains drive # bit ready for IDE masking
                      (        ccide.asm):01029         * PRESERVES X&Y
057D 3430             (        ccide.asm):01030         WaitDrv  pshs  x,y           Preserve regs
057F 8EA000           (        ccide.asm):01031                  ldx   #$A000        (1/2 to 1/3 second busy check)
0582 A6A824           (        ccide.asm):01032                  lda   PD.DNS,y      Get physical drive #
0585 8401             (        ccide.asm):01033                  anda  #PhysDriv     No bad drive # possible
0587 48               (        ccide.asm):01034                  lsla                Move drive # into proper bit for Drive/head
0588 48               (        ccide.asm):01035                  lsla
0589 48               (        ccide.asm):01036                  lsla
058A 48               (        ccide.asm):01037                  lsla
058B A7C901C5         (        ccide.asm):01038                  sta   DrivMask,u    Save drive mask for IDE
058F 10AE41           (        ccide.asm):01039                  ldy   V.PORT,u      Get controller address for drive selected
0592 6D27             (        ccide.asm):01040         RdyIni1  tst   Status,y      IDE busy?
0594 2A0E             (        ccide.asm):01041                  bpl   IDEReady      No, return
0596 301F             (        ccide.asm):01042                  leax  -1,x          Dec counter
0598 26F8             (        ccide.asm):01043                  bne   RdyIni1       Try again
059A 3530             (        ccide.asm):01044                  puls  x,y           Restore regs
059C 6FC901C8         (        ccide.asm):01045         ENotRdy  clr   drvrbusy,u
05A0 53               (        ccide.asm):01046                  comb                Tried too long; give up with error
05A1 C6F6             (        ccide.asm):01047                  ldb   #E$NotRdy
05A3 39               (        ccide.asm):01048                  rts
                      (        ccide.asm):01049         
05A4 3530             (        ccide.asm):01050         IDEReady puls  x,y           Restore regs
05A6 5F               (        ccide.asm):01051                  clrb                IDE ready, return
05A7 39               (        ccide.asm):01052                  rts
                      (        ccide.asm):01053         
                      (        ccide.asm):01054         * Copy LSN0 stuff into drive table
                      (        ccide.asm):01055         * Entry: X=ptr to 256 byte buffer containing LSN0 Sector.
                      (        ccide.asm):01056         * Exit: X,D is destroyed
05A8 3420             (        ccide.asm):01057         CpyDrvTb pshs  y              Save path desc. ptr
05AA E6A821           (        ccide.asm):01058                  ldb   PD.DRV,y       Get LOGICAL drive #
05AD 8626             (        ccide.asm):01059                  lda   #DRVMEM        Copy useful information to our LSN 0 buffer
05AF 3D               (        ccide.asm):01060                  mul                  Point to proper entry in drive table
05B0 314F             (        ccide.asm):01061                  leay  DRVBEG,u
05B2 31AB             (        ccide.asm):01062                  leay  d,y
05B4 8615             (        ccide.asm):01063                  lda   #DD.SIZ
05B6 E680             (        ccide.asm):01064         LSN0Cp   ldb   ,x+
05B8 E7A0             (        ccide.asm):01065                  stb   ,y+
05BA 4A               (        ccide.asm):01066                  deca  
05BB 26F9             (        ccide.asm):01067                  bne   LSN0Cp
05BD 35A0             (        ccide.asm):01068                  puls  y,pc           Restore path desc. ptr & return
                      (        ccide.asm):01069         
                      (        ccide.asm):01070         * Notes: PhysSN is the physical sector number to send to the controller,
                      (        ccide.asm):01071         * not the LSN...so it must be translated from the LSN (for IDE, divide by
                      (        ccide.asm):01072         * 2, unless using ATAPI CDROM, in which case divide by 8).
                      (        ccide.asm):01073         * Note that the head returned from this routine is base 0, so that the
                      (        ccide.asm):01074         * lowest head # returned would be 0 (for the first head). This matches
                      (        ccide.asm):01075         * the IDE spec (which can also only go up to 16 heads).
                      (        ccide.asm):01076         * The cylinder returned is also base 0, same as IDE.
                      (        ccide.asm):01077         * The sector returned is base 0, but IDE needs base 1.
                      (        ccide.asm):01078         * Vars used from elsewhere - OS9PSN,u   - Physical (IDE 512) sector #
                      (        ccide.asm):01079         *                          - Head,u     - IDE head #
                      (        ccide.asm):01080         *                          - Cylinder,u - IDE Cylinder #
                      (        ccide.asm):01081         *                          - CHSSect,u  - IDE sector (512) #
                      (        ccide.asm):01082         *                          - CHSSPT,u   - IDE (512 byte) sctrs/track)
                      (        ccide.asm):01083         
                      (        ccide.asm):01084         * LSN division routine variable definitions: all on temp stack
                      (        ccide.asm):01085                    org   0
0000.                 (        ccide.asm):01086         S.SclPwr   rmb   2              scale power
0002.                 (        ccide.asm):01087         S.SclAmt   rmb   3              scale amount
0005.                 (        ccide.asm):01088         S.Cyl      rmb   2              cylinder number
0007.                 (        ccide.asm):01089         S.PSN      rmb   3              physical sector number (work copy)
000A.                 (        ccide.asm):01090         S.Head     rmb   1              head number
     000B             (        ccide.asm):01091         S.Frame    equ   .              size of stack frame
                      (        ccide.asm):01092         
                      (        ccide.asm):01093         * Entry:   U=ptr to driver data area
                      (        ccide.asm):01094         *          Y=Ptr to path descriptor
                      (        ccide.asm):01095         *          X=Ptr to current drives' entry in drive table (DD.TOT, etc.)
                      (        ccide.asm):01096         *   OS9PSN,u-  Three byte Physical (512 byte) sector #)
                      (        ccide.asm):01097         * Exit:    U=ptr to driver data area
                      (        ccide.asm):01098         *          Y=ptr to path descriptor
                      (        ccide.asm):01099         *          X=Drive table ptr
                      (        ccide.asm):01100         *     Head,u=Head # in CHS mode
                      (        ccide.asm):01101         * Cylinder,u=Cylinder # in CHS mode
                      (        ccide.asm):01102         *  CHSSect,u=Sector # in CHS mode
                      (        ccide.asm):01103         * CC=0, no error, above 3 vars. are legit
                      (        ccide.asm):01104         * CC=1, error, error return in B
05BF 3275             (        ccide.asm):01105         CalcCHS    leas  -S.Frame,s     make room for LSN division variables
05C1 E6C901C2         (        ccide.asm):01106                    ldb   OS9PSN,u
05C5 E767             (        ccide.asm):01107                    stb   S.PSN,s        initialize PSN MSB
05C7 ECC901C3         (        ccide.asm):01108                    ldd   OS9PSN+1,u
05CB ED68             (        ccide.asm):01109                    std   S.PSN+1,s      initialize PSN LSBs
05CD CC0000           (        ccide.asm):01110                    ldd   #$0000
05D0 A76A             (        ccide.asm):01111                    sta   S.Head,s       initialize head number
05D2 ED65             (        ccide.asm):01112                    std   S.Cyl,s        initialize cylinder number
05D4 EC68             (        ccide.asm):01113                    ldd   S.PSN+1,s      get PSN LSBs
05D6 A3C901CD         (        ccide.asm):01114                    subd  CHSSPT,u       less sectors/track
05DA 2406             (        ccide.asm):01115                    bhs   NotTrk0
05DC 6D67             (        ccide.asm):01116                    tst   S.PSN,s        PSN MSB = 0?
05DE 2778             (        ccide.asm):01117                    beq   DivDone        yes, sector in track 0, go save info
05E0 6A67             (        ccide.asm):01118                    dec   S.PSN,s        PSN MSB less 1
05E2 ED68             (        ccide.asm):01119         NotTrk0    std   S.PSN+1,s      save remaining PSN LSBs
05E4 6C6A             (        ccide.asm):01120                    inc   S.Head,s       set to next head (1)
05E6 6C8816           (        ccide.asm):01121                    inc   V.TRAK+1,x     mark track as non-0 for SetUpWD
05E9 E6C901CE         (        ccide.asm):01122                    ldb   CHSSPT+1,u     get IDE sectors per track
05ED A6A827           (        ccide.asm):01123                    lda   PD.SID,y       Get # of disk heads
05F0 4A               (        ccide.asm):01124                    deca                 less track 0
05F1 3D               (        ccide.asm):01125                    mul                  calculate sectors remaining in cylinder 0
05F2 EDE4             (        ccide.asm):01126                    std   S.SclPwr,s     save it temporarily
05F4 EC68             (        ccide.asm):01127                    ldd   S.PSN+1,s      get remaining PSN LSBs
05F6 A3E4             (        ccide.asm):01128                    subd  S.SclPwr,s     less sectors remaining in cylinder 0
05F8 2406             (        ccide.asm):01129                    bhs   NotCyl0
05FA 6D67             (        ccide.asm):01130                    tst   S.PSN,s        remaining PSN MSB = 0?
05FC 274C             (        ccide.asm):01131                    beq   CalcHead       sector in cylinder 0, go get head number
05FE 6A67             (        ccide.asm):01132                    dec   S.PSN,s        remaining PSN MSB less 1
0600 ED68             (        ccide.asm):01133         NotCyl0    std   S.PSN+1,s      save remaining PSN LSBs
0602 6C66             (        ccide.asm):01134                    inc   S.Cyl+1,s      set cylinder to 1
0604 6F6A             (        ccide.asm):01135                    clr   S.Head,s       reset head number to 0
0606 A6A827           (        ccide.asm):01136                    lda   PD.SID,y       get disk sides
0609 E6C901CE         (        ccide.asm):01137                    ldb   CHSSPT+1,u     get sectors per track
060D 6F64             (        ccide.asm):01138         NrmlDiv    clr   S.SclAmt+2,s   initialize scale amount LSB
060F 48               (        ccide.asm):01139                    lsla                 HD prescale = heads x 8
0610 48               (        ccide.asm):01140                    lsla                   This is the max we can do with a 16 head
0611 48               (        ccide.asm):01141                    lsla                   drive, using 8 bit MUL.
0612 3D               (        ccide.asm):01142                    mul                  calculate scale amount MSBs
0613 ED62             (        ccide.asm):01143                    std   S.SclAmt,s     save scale amount MSBs
0615 CC0800           (        ccide.asm):01144                    ldd   #HDSclPwr      Set hard drive scale power
0618 EDE4             (        ccide.asm):01145                    std   S.SclPwr,s     save scale power
061A A667             (        ccide.asm):01146         DivLoop    lda   S.PSN,s        get remaining PSN MSB
061C A162             (        ccide.asm):01147                    cmpa  S.SclAmt,s     remaining PSN > scale amount?
061E 251E             (        ccide.asm):01148                    blo   DivLoop1       no, go set up next scale amount & power
0620 220A             (        ccide.asm):01149                    bhi   DivLoop2       yes, go do subtraction
0622 EC68             (        ccide.asm):01150                    ldd   S.PSN+1,s      get remaining PSN LSBs
0624 A363             (        ccide.asm):01151                    subd  S.SclAmt+1,s   remaining PSN >= scale amount?
0626 2516             (        ccide.asm):01152                    blo   DivLoop1       no, go set up next scale amount & power
0628 ED68             (        ccide.asm):01153                    std   S.PSN+1,s      save remaining PSN LSBs
062A 2006             (        ccide.asm):01154                    bra   DivLoop3
                      (        ccide.asm):01155         
062C EC68             (        ccide.asm):01156         DivLoop2   ldd   S.PSN+1,s      get remaining PSN LSBs
062E A363             (        ccide.asm):01157                    subd  S.SclAmt+1,s   less scale amount LSBs
0630 ED68             (        ccide.asm):01158                    std   S.PSN+1,s      save remaining PSN LSBs
0632 A667             (        ccide.asm):01159         DivLoop3   lda   S.PSN,s        get remaining PSN MSB
0634 A262             (        ccide.asm):01160                    sbca  S.SclAmt,s     less scale amount MSB and borrow (if any)
0636 A767             (        ccide.asm):01161                    sta   S.PSN,s        save remaining PSN MSB
0638 EC65             (        ccide.asm):01162                    ldd   S.Cyl,s        get cylinder number
063A E3E4             (        ccide.asm):01163                    addd  S.SclPwr,s     add scale power
063C ED65             (        ccide.asm):01164                    std   S.Cyl,s        save cylinder number
063E 6462             (        ccide.asm):01165         DivLoop1   lsr   S.SclAmt,s     * divide scale amount by two
0640 6663             (        ccide.asm):01166                    ror   S.SclAmt+1,s
0642 6664             (        ccide.asm):01167                    ror   S.SclAmt+2,s
0644 64E4             (        ccide.asm):01168                    lsr   S.SclPwr,s     * divide scale power by two
0646 6661             (        ccide.asm):01169                    ror   S.SclPwr+1,s
0648 24D0             (        ccide.asm):01170                    bcc   DivLoop
064A EC68             (        ccide.asm):01171         CalcHead   ldd   S.PSN+1,s      get remaining PSN LSBs
064C A3C901CD         (        ccide.asm):01172         NextHead   subd  CHSSPT,u       less sectors per track (head)
0650 2506             (        ccide.asm):01173                    blo   DivDone        underflow, go save info
0652 ED68             (        ccide.asm):01174                    std   S.PSN+1,s      save remaining PSN LSBs
0654 6C6A             (        ccide.asm):01175                    inc   S.Head,s       increment head number
0656 20F4             (        ccide.asm):01176                    bra   NextHead
                      (        ccide.asm):01177         
0658 EC65             (        ccide.asm):01178         DivDone    ldd   S.Cyl,s        get cylinder number
065A 10A3A825         (        ccide.asm):01179                    cmpd  PD.CYL,y       cylinder number OK?
065E 2415             (        ccide.asm):01180                    bhs   LSNErrSF       no, go return error
0660 EDC901CA         (        ccide.asm):01181                    std   Cylinder,u
0664 A669             (        ccide.asm):01182                    lda   S.PSN+2,s      get sector number (remaining PSN LSB)
0666 4C               (        ccide.asm):01183                    inca                 IDE needs base 1
0667 A7C901CC         (        ccide.asm):01184                    sta   CHSSect,u
066B E66A             (        ccide.asm):01185                    ldb   S.Head,s       get head number
066D E7C901C9         (        ccide.asm):01186                    stb   Head,u
0671 326B             (        ccide.asm):01187                    leas  S.Frame,s      restore stack pointer
0673 5F               (        ccide.asm):01188                    clrb
0674 39               (        ccide.asm):01189                    rts
                      (        ccide.asm):01190         
0675 326B             (        ccide.asm):01191         LSNErrSF   leas  S.Frame,s      restore stack pointer
0677 53               (        ccide.asm):01192         LSNErr     comb
0678 C6F1             (        ccide.asm):01193                    ldb   #E$Sect        Exit with Bad sector # error
067A 39               (        ccide.asm):01194                    rts
                      (        ccide.asm):01195         
067B DD24EF           (        ccide.asm):01196                  emod
     067E             (        ccide.asm):01197         eom      equ   *
                      (        ccide.asm):01198                  end
