                      (/home/strick/go/s):00001         *******************************************************************
                      (/home/strick/go/s):00002         * CoGrf/CoWin - NitrOS-9 Text/Graphics Window Module
                      (/home/strick/go/s):00003         *
                      (/home/strick/go/s):00004         * $Id$
                      (/home/strick/go/s):00005         *
                      (/home/strick/go/s):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/home/strick/go/s):00007         * Comment
                      (/home/strick/go/s):00008         * ------------------------------------------------------------------
                      (/home/strick/go/s):00009         *  19r0    2003/09/23  Robert Gault
                      (/home/strick/go/s):00010         * Many new patches for 6809 code use.
                      (/home/strick/go/s):00011         *
                      (/home/strick/go/s):00012         *  19r1    2003/11/14  Robert Gault
                      (/home/strick/go/s):00013         * Patches to scrollbar windows to recover arrows and markers.
                      (/home/strick/go/s):00014         * Includes new stdfonts with graphics added to the end.
                      (/home/strick/go/s):00015         *
                      (/home/strick/go/s):00016         *  1       2005/11/26  Boisy G. Pitre
                      (/home/strick/go/s):00017         * Renamed from WindInt/GrfInt, reset edition.
                      (/home/strick/go/s):00018         *
                      (/home/strick/go/s):00019         *          2006/01/09  Robert Gault
                      (/home/strick/go/s):00020         * Changed Select window routine so that it will work within a script and
                      (/home/strick/go/s):00021         * DWSet routine so that it will not require a [CLEAR] if the active window
                      (/home/strick/go/s):00022         * is killed with a display 1b 24 and restarted with a display 1b 20; ie
                      (/home/strick/go/s):00023         * DWSet. Changes are compatible with MultiVue and all test procedures
                      (/home/strick/go/s):00024         * tried. Short Sleep added to stabilize the screen change.
                      (/home/strick/go/s):00025         *
                      (/home/strick/go/s):00026         *  2       2007/08/22  Boisy G. Pitre
                      (/home/strick/go/s):00027         * Fixed crash bug in case where grfdrv wasn't loaded.  See comments at
                      (/home/strick/go/s):00028         * Term label.
                      (/home/strick/go/s):00029         
                      (/home/strick/go/s):00030                  nam   CoGrf/CoWin
                      (/home/strick/go/s):00031                  ttl   NitrOS-9 Window Module
                      (/home/strick/go/s):00032         
                      (/home/strick/go/s):00033                  ifp1  
                      (/home/strick/go/s):00034                  use   defsfile
                      (         defsfile):00001                  use   ../defsfile
     0002             (      ../defsfile):00001         Level    equ   2
                      (      ../defsfile):00002         
                      (      ../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (            os9.d):00637         * and for bytes in the system memory map at D.SysMem.
                      (            os9.d):00638         * A value of 0 indicates an unused/unassigned block.
                      (            os9.d):00639         * In the code, block assignment often involves incrementing a value
                      (            os9.d):00640         * from 0 to 1 rather than explict use of RAMinUse.
                      (            os9.d):00641         *
     0080             (            os9.d):00642         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00643         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00644         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00645         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00646         *
                      (            os9.d):00647         * Service Dispatch Table special entries
                      (            os9.d):00648         *
     00FE             (            os9.d):00649         IOEntry        EQU       254
                      (            os9.d):00650         
                      (            os9.d):00651                        ENDC      
                      (            os9.d):00652         
                      (            os9.d):00653                        TTL       Structure Formats
                      (            os9.d):00654                        PAG       
                      (            os9.d):00655         ************************************
                      (            os9.d):00656         * Module Directory Entry Definitions
                      (            os9.d):00657         *
                      (            os9.d):00658                        ORG       0
                      (            os9.d):00659                        IFGT      Level-1
0000                  (            os9.d):00660         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00661         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00662                        ENDC      
0004                  (            os9.d):00663         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00664         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00665         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00666         
                      (            os9.d):00667         ************************************
                      (            os9.d):00668         * Module Definitions
                      (            os9.d):00669         *
                      (            os9.d):00670         * Universal Module Offsets
                      (            os9.d):00671         *
                      (            os9.d):00672                        ORG       0
0000                  (            os9.d):00673         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00674         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00675         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00676         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00677         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00678         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00679         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00680         *
                      (            os9.d):00681         * Type-Dependent Module Offsets
                      (            os9.d):00682         *
                      (            os9.d):00683         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00684         *
0009                  (            os9.d):00685         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Program Module
                      (            os9.d):00688         *
000B                  (            os9.d):00689         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Driver, Device Descriptor Module
                      (            os9.d):00692         *
000D                  (            os9.d):00693         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00694         *
                      (            os9.d):00695         * Device Descriptor Module
                      (            os9.d):00696         *
                      (            os9.d):00697                        ORG       M$IDSize
0009                  (            os9.d):00698         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00699         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00700                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00701         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00702         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00703         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00704         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00705         *
                      (            os9.d):00706         * Configuration Module Entry Offsets
                      (            os9.d):00707         *
                      (            os9.d):00708                        ORG       M$IDSize
0009                  (            os9.d):00709         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00710         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00711         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00712         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00713         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00714         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00715         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00716         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00717         
0017                  (            os9.d):00718         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00719         OSVer          RMB       1                   OS version
0019                  (            os9.d):00720         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00721         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00722         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00723         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00724         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00725         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00726                        RMB       4                   reserved for future use
                      (            os9.d):00727         
                      (            os9.d):00728                        IFGT      Level-1
                      (            os9.d):00729         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00730         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00731         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00732         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00733         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00734                        ENDC      
                      (            os9.d):00735         
                      (            os9.d):00736         * Feature1 byte definitions
     0001             (            os9.d):00737         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00738         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00739         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00740         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00741         
                      (            os9.d):00742                        PAG       
                      (            os9.d):00743         **************************
                      (            os9.d):00744         * Module Field Definitions
                      (            os9.d):00745         *
                      (            os9.d):00746         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00747         *
     0087             (            os9.d):00748         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00749         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00750         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00751         
                      (            os9.d):00752         *
                      (            os9.d):00753         * Module Type/Language Field Masks
                      (            os9.d):00754         *
     00F0             (            os9.d):00755         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00756         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00757         
                      (            os9.d):00758         *
                      (            os9.d):00759         * Module Type Values
                      (            os9.d):00760         *
     00F0             (            os9.d):00761         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00762         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00763         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00764         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00765         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00766         Data           EQU       $40                 Data Module
     0030             (            os9.d):00767         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00768         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00769         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00770         
                      (            os9.d):00771         *
                      (            os9.d):00772         * Module Language Values
                      (            os9.d):00773         *
     0001             (            os9.d):00774         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00775         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00776         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00777         CCode          EQU       4                   C I-code
     0005             (            os9.d):00778         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00779         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00780         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00781         *
                      (            os9.d):00782         * Module Attributes / Revision byte
                      (            os9.d):00783         *
                      (            os9.d):00784         * Field Masks
                      (            os9.d):00785         *
     00F0             (            os9.d):00786         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00787         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00788         *
                      (            os9.d):00789         * Attribute Flags
                      (            os9.d):00790         *
     0080             (            os9.d):00791         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00792         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00793         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00794         
                      (            os9.d):00795         ********************
                      (            os9.d):00796         * Device Type Values
                      (            os9.d):00797         *
                      (            os9.d):00798         * These values define various classes of devices, which are
                      (            os9.d):00799         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00800         * in a device's device descriptor.
                      (            os9.d):00801         *
     0000             (            os9.d):00802         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00803         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00804         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00805         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00806         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00807         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00808         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00809         
                      (            os9.d):00810         *********************
                      (            os9.d):00811         * CRC Result Constant
                      (            os9.d):00812         *
     0080             (            os9.d):00813         CRCCon1        EQU       $80
     0FE3             (            os9.d):00814         CRCCon23       EQU       $0FE3
                      (            os9.d):00815         
                      (            os9.d):00816                        TTL       Process Information
                      (            os9.d):00817                        PAG       
                      (            os9.d):00818         ********************************
                      (            os9.d):00819         * Process Descriptor Definitions
                      (            os9.d):00820         *
                      (            os9.d):00821                        IFEQ      Level-1
                      (            os9.d):00822         
                      (            os9.d):00823         * Level 1 process descriptor defs
002A                  (            os9.d):00824         DefIOSiz       EQU       12
002A                  (            os9.d):00825         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00826         
                      (            os9.d):00827                        ORG       0
002A                  (            os9.d):00828         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00829         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00830         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00831         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00832         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00833         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00834         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00835         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00836         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00837         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00838         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00839         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00840         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00841         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00842         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00843         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00844         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00845         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00846         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00847         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00848         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00849         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00850         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00851         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00852         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00853                        RMB       $40-.               unused
002A                  (            os9.d):00854         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00855         
                      (            os9.d):00856         *
                      (            os9.d):00857         * Process State Flags
                      (            os9.d):00858         *
002A                  (            os9.d):00859         SysState       EQU       %10000000
002A                  (            os9.d):00860         TimSleep       EQU       %01000000
002A                  (            os9.d):00861         TimOut         EQU       %00100000
002A                  (            os9.d):00862         ImgChg         EQU       %00010000
002A                  (            os9.d):00863         Condem         EQU       %00000010
002A                  (            os9.d):00864         Dead           EQU       %00000001
                      (            os9.d):00865         
                      (            os9.d):00866                        ELSE      
                      (            os9.d):00867         
                      (            os9.d):00868         * Level 2 process descriptor defs
     0010             (            os9.d):00869         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00870         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00871         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00872         
                      (            os9.d):00873                        ORG       0
0000                  (            os9.d):00874         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00875         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00876         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00877         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00878         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00879         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00880         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00881         P$User         RMB       2                   User Index
000A                  (            os9.d):00882         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00883         P$Age          RMB       1                   Age
000C                  (            os9.d):00884         P$State        RMB       1                   Status
000D                  (            os9.d):00885         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00886         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00887         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00888         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00889         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00890         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00891         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00892         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00893         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00894         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00895         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00896                        RMB       $20-.               unused
0020                  (            os9.d):00897         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00898         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00899         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00900         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00901         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00902         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00903         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00904         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00905         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00906         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00907         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00908         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00909         P$Alarm        RMB       6
00C9                  (            os9.d):00910                        RMB       $200-.              Local stack
     0200             (            os9.d):00911         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00912         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00913         
                      (            os9.d):00914         *
                      (            os9.d):00915         * Process State Flags
                      (            os9.d):00916         *
     0080             (            os9.d):00917         SysState       EQU       %10000000
     0040             (            os9.d):00918         TimSleep       EQU       %01000000
     0020             (            os9.d):00919         TimOut         EQU       %00100000
     0010             (            os9.d):00920         ImgChg         EQU       %00010000
     0008             (            os9.d):00921         Suspend        EQU       %00001000
     0002             (            os9.d):00922         Condem         EQU       %00000010
     0001             (            os9.d):00923         Dead           EQU       %00000001
                      (            os9.d):00924         
                      (            os9.d):00925                        ENDC      
                      (            os9.d):00926         
                      (            os9.d):00927                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00928                        PAG       
                      (            os9.d):00929         *************************
                      (            os9.d):00930         * Path Descriptor Offsets
                      (            os9.d):00931         *
                      (            os9.d):00932                        ORG       0
0000                  (            os9.d):00933         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00934         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00935         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00936         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00937         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00938         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00939         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00940         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00941         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00942         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00943                        RMB       64-.                Path options
     0040             (            os9.d):00944         PDSIZE         EQU       .
                      (            os9.d):00945         
                      (            os9.d):00946         *
                      (            os9.d):00947         * Pathlist Special Symbols
                      (            os9.d):00948         *
     002F             (            os9.d):00949         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00950         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00951         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00952         
                      (            os9.d):00953                        PAG       
                      (            os9.d):00954         ****************************
                      (            os9.d):00955         * File Manager Entry Offsets
                      (            os9.d):00956         *
                      (            os9.d):00957                        ORG       0
0000                  (            os9.d):00958         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00959         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00960         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00961         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00962         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00963         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00964         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00965         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00966         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00967         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00968         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00969         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00970         FMCLOS         RMB       3                   Close File
                      (            os9.d):00971         
                      (            os9.d):00972         *****************************
                      (            os9.d):00973         * Device Driver Entry Offsets
                      (            os9.d):00974         *
                      (            os9.d):00975                        ORG       0
0000                  (            os9.d):00976         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00977         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00978         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00979         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00980         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00981         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00982         
                      (            os9.d):00983         *********************
                      (            os9.d):00984         * Device Table Format
                      (            os9.d):00985         *
                      (            os9.d):00986                        ORG       0
0000                  (            os9.d):00987         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00988         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00989         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00990         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00991         V$USRS         RMB       1                   use count
                      (            os9.d):00992                        IFGT      Level-1
0009                  (            os9.d):00993         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00994         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00995                        ENDC      
     000D             (            os9.d):00996         DEVSIZ         EQU       .
                      (            os9.d):00997         
                      (            os9.d):00998         *******************************
                      (            os9.d):00999         * Device Static Storage Offsets
                      (            os9.d):01000         *
                      (            os9.d):01001                        ORG       0
0000                  (            os9.d):01002         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):01003         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01004         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01005         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01006         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01007         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01008         
                      (            os9.d):01009         ********************************
                      (            os9.d):01010         * Interrupt Polling Table Format
                      (            os9.d):01011         *
                      (            os9.d):01012                        ORG       0
0000                  (            os9.d):01013         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01014         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01015         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01016         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01017         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01018         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01019                        IFGT      Level-1
0009                  (            os9.d):01020         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01021                        ENDC      
     000B             (            os9.d):01022         POLSIZ         EQU       .
                      (            os9.d):01023         
                      (            os9.d):01024         ********************
                      (            os9.d):01025         * VIRQ packet format
                      (            os9.d):01026         *
                      (            os9.d):01027                        ORG       0
0000                  (            os9.d):01028         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01029         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01030         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01031         Vi.PkSz        EQU       .
                      (            os9.d):01032         
     0001             (            os9.d):01033         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01034         
                      (            os9.d):01035                        PAG       
                      (            os9.d):01036         *************************************
                      (            os9.d):01037         * Machine Characteristics Definitions
                      (            os9.d):01038         *
     0000             (            os9.d):01039         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01040         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01041         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01042         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01043                        IFNE      H6309
0005                  (            os9.d):01044         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01045         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01046         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01047         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01048         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01049         R$X            EQU       6                   X Index register
0005                  (            os9.d):01050         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01051         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01052         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01053         R$Size         EQU       14                  Total register package size
                      (            os9.d):01054                        ELSE      
     0003             (            os9.d):01055         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01056         R$X            EQU       4                   X Index register
     0006             (            os9.d):01057         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01058         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01059         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01060         R$Size         EQU       12                  Total register package size
                      (            os9.d):01061                        ENDC      
                      (            os9.d):01062         
                      (            os9.d):01063         * MD register masks
                      (            os9.d):01064         * 6309 definitions
     0080             (            os9.d):01065         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01066         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01067         
     0080             (            os9.d):01068         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01069         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01070         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01071         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01072         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01073         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01074         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01075         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01076         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01077         Sign           EQU       %10000000           sign bit
                      (            os9.d):01078         
                      (            os9.d):01079                        TTL       Error Code Definitions
                      (            os9.d):01080                        PAG       
                      (            os9.d):01081         ************************
                      (            os9.d):01082         * Error Code Definitions
                      (            os9.d):01083         *
                      (            os9.d):01084         * Basic09 Error Codes
                      (            os9.d):01085         *
                      (            os9.d):01086                        ORG       10
000A                  (            os9.d):01087         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01088         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01089         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01090         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01091         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01092         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01093         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01094         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01095         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01096         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01097         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01098         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01099         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01100         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01101         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01102         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01103         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01104         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01105         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01106         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01107         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01108         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01109         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01110         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01111         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01112         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01113         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01114         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01115         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01116         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01117         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01118         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01119         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01120         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01121         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01122         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01123         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01124         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01125         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01126         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01127         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01128         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01129         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01130         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01131         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01132         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01133         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01134         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01135         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01136         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01137         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01138         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01139         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01140         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01141         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01142         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01143         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01144         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01145         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01146         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01147         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01148         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01149         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01150         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01151         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01152         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01153         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01154         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01155         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01156         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01157         
                      (            os9.d):01158         *
                      (            os9.d):01159         * System Dependent Error Codes
                      (            os9.d):01160         *
                      (            os9.d):01161         
                      (            os9.d):01162         * Level 2 windowing error codes
                      (            os9.d):01163                        ORG       183
00B7                  (            os9.d):01164         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01165         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01166         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01167         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01168         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01169                        RMB       1                   reserved
00BD                  (            os9.d):01170         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01171         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01172         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01173         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01174         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01175         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01176         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01177         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01178         
00C5                  (            os9.d):01179         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01180         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01181         E$Alias        RMB       1
                      (            os9.d):01182         
                      (            os9.d):01183         
                      (            os9.d):01184         *
                      (            os9.d):01185         * Standard NitrOS-9 Error Codes
                      (            os9.d):01186         *
                      (            os9.d):01187                        ORG       200
00C8                  (            os9.d):01188         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01189         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01190         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01191         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01192         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01193         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01194         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01195         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01196         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01197         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01198         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01199         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01200                        RMB       1
00D5                  (            os9.d):01201         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01202         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01203         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01204         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01205         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01206         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01207         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01208         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01209         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01210                        RMB       1
00DF                  (            os9.d):01211         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01212         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01213         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01214                        RMB       1
00E2                  (            os9.d):01215         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01216         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01217         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01218         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01219         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01220         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01221         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01222         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01223         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01224         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01225         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01226         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01227         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01228         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01229                        RMB       $F0-.               reserved
00F0                  (            os9.d):01230         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01231         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01232         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01233         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01234         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01235         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01236         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01237         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01238         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01239         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01240         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01241         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01242         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01243         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01244         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01245         
                      (            os9.d):01246         
                      (            os9.d):01247                        IFGT      Level-2
                      (            os9.d):01248         ***************************
                      (            os9.d):01249         * Level 3 Defs
                      (            os9.d):01250         *
                      (            os9.d):01251         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01252         *
00FF                  (            os9.d):01253         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01254         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01255         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01256         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01257         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01258         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01259                        ENDC      
                      (            os9.d):01260         
                      (            os9.d):01261                        ENDC      
                      (      ../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
     00E0             (            scf.d):00222         PARMASK        EQU       %11100000
                      (            scf.d):00223         
                      (            scf.d):00224         * PD.BAU definitions
                      (            scf.d):00225         *
                      (            scf.d):00226         * Baud rate
     0000             (            scf.d):00227         B110           EQU       %00000000
     0001             (            scf.d):00228         B300           EQU       %00000001
     0002             (            scf.d):00229         B600           EQU       %00000010
     0003             (            scf.d):00230         B1200          EQU       %00000011
     0004             (            scf.d):00231         B2400          EQU       %00000100
     0005             (            scf.d):00232         B4800          EQU       %00000101
     0006             (            scf.d):00233         B9600          EQU       %00000110
     0007             (            scf.d):00234         B19200         EQU       %00000111
     0008             (            scf.d):00235         B38400         EQU       %00001000
     0009             (            scf.d):00236         B57600         EQU       %00001001
     000A             (            scf.d):00237         B115200        EQU       %00001010
                      (            scf.d):00238         * Word size
     0000             (            scf.d):00239         WORD8          EQU       %00000000
     0020             (            scf.d):00240         WORD7          EQU       %00100000
                      (            scf.d):00241         * Stop bits
     0000             (            scf.d):00242         STOP1          EQU       %00000000
     0010             (            scf.d):00243         STOP2          EQU       %00010000
                      (            scf.d):00244         
                      (            scf.d):00245                        ENDC      
                      (      ../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (      ../defsfile):00006                  use   coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         ********************************
                      (           coco.d):00148         * Boot defs for NitrOS-9 Level 1
                      (           coco.d):00149         *
                      (           coco.d):00150         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00151         * system.
                      (           coco.d):00152         *
0004                  (           coco.d):00153         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE
                      (           coco.d):00156         
                      (           coco.d):00157         ******************************************
                      (           coco.d):00158         * Boot defs for NitrOS-9 Level 2 and above
                      (           coco.d):00159         *
                      (           coco.d):00160         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00161         * system.
                      (           coco.d):00162         *
     ED00             (           coco.d):00163         Bt.Start       SET       $ED00               Start address of the boot track in memory
     003B             (           coco.d):00164         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (           coco.d):00165         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (           coco.d):00166         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
                      (           coco.d):00167         
                      (           coco.d):00168                        ENDC
                      (           coco.d):00169         
                      (           coco.d):00170         * On the CoCo, the boot track is all of track 34
                      (           coco.d):00171         
     0022             (           coco.d):00172         Bt.Track       EQU       34                  Boot track
     0000             (           coco.d):00173         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (           coco.d):00174         
                      (           coco.d):00175         
     1080             (           coco.d):00176         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (           coco.d):00177         
                      (           coco.d):00178         
                      (           coco.d):00179                        IFEQ      Level-1
                      (           coco.d):00180         
                      (           coco.d):00181         *************************************************
                      (           coco.d):00182         *
                      (           coco.d):00183         * NitrOS-9 Level 1 Section
                      (           coco.d):00184         *
                      (           coco.d):00185         *************************************************
                      (           coco.d):00186         
0004                  (           coco.d):00187         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00188         
                      (           coco.d):00189                        ELSE      
                      (           coco.d):00190         
                      (           coco.d):00191         *************************************************
                      (           coco.d):00192         *
                      (           coco.d):00193         * NitrOS-9 Level 2 Section
                      (           coco.d):00194         *
                      (           coco.d):00195         *************************************************
                      (           coco.d):00196         
                      (           coco.d):00197         ****************************************
                      (           coco.d):00198         * Dynamic Address Translator Definitions
                      (           coco.d):00199         *
     0008             (           coco.d):00200         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00201         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00202         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00203         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00204         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00205         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00206         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00207         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00208         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00209         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00210         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00211         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00212         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00213         IOBlock        EQU       $3F
     003F             (           coco.d):00214         ROMBlock       EQU       $3F
     007F             (           coco.d):00215         IOAddr         EQU       $7F
     0001             (           coco.d):00216         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00217         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00218         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00219         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00220         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00221         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00222         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00223         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00224         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00225         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00226         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00227         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00228         
                      (           coco.d):00229         ***************************
                      (           coco.d):00230         * Color Computer 3 Specific
                      (           coco.d):00231         *
     0001             (           coco.d):00232         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00233         
                      (           coco.d):00234         ********************
                      (           coco.d):00235         * Hardware addresses
                      (           coco.d):00236         *
     FF00             (           coco.d):00237         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00238         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00239         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00240         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00241         
     0007             (           coco.d):00242         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00243         
                      (           coco.d):00244         * KrnBlk defines the block number of the 8K RAM block that is mapped to
                      (           coco.d):00245         * the top of CPU address space ($E000-$FFFF) for the system process, and
                      (           coco.d):00246         * which holds the Kernel. The top 2 pages of this CPU address space ($FFE0-
                      (           coco.d):00247         * $FFFF) has two special properties. Firstly, it contains the I/O space.
                      (           coco.d):00248         * Secondly, the parts that contain RAM map are not affected by the DAT
                      (           coco.d):00249         * mappings but, instead, *always* map that RAM to a fixed RAM block
                      (           coco.d):00250         * (KrnBlk). When a user process is mapped in, and requests enough memory,
                      (           coco.d):00251         * it will end up with its own block assigned for CPU address space $E000-
                      (           coco.d):00252         * $FFFF but the top of the address space is unusable by the user process:
                      (           coco.d):00253         * it still contains the I/O and the bit of RAM that's mapped to KrnBlk.
                      (           coco.d):00254         * Usually, the value of KrnBlk is fixed for a particular hardware design;
                      (           coco.d):00255         * For the COCO GIME, it's always $3F.
     003F             (           coco.d):00256         KrnBlk         SET       $3F
                      (           coco.d):00257         
                      (           coco.d):00258                        ENDC
                      (           coco.d):00259                        ENDC
                      (           coco.d):00260         
                      (/home/strick/go/s):00035                  use   cocovtio.d
                      (       cocovtio.d):00001                        IFNE      COCOVTIO.D-1
     0001             (       cocovtio.d):00002         COCOVTIO.D     SET       1
                      (       cocovtio.d):00003         
                      (       cocovtio.d):00004                        IFEQ      Level-1
                      (       cocovtio.d):00005         
                      (       cocovtio.d):00006         ********************************************************************
                      (       cocovtio.d):00007         * VTIODefs - Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00008         *
                      (       cocovtio.d):00009         * $Id$
                      (       cocovtio.d):00010         *
                      (       cocovtio.d):00011         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00012         * Comment
                      (       cocovtio.d):00013         * ------------------------------------------------------------------
                      (       cocovtio.d):00014         *          2004/11/29  P.Harvey-Smith.
                      (       cocovtio.d):00015         * Added symbolic defines for bits in V.CoLoad.
                      (       cocovtio.d):00016         *
                      (       cocovtio.d):00017         *          2004/12/02  P.Harvey-Smith.
                      (       cocovtio.d):00018         * Moved over all variables from co51.asm
                      (       cocovtio.d):00019         *
                      (       cocovtio.d):00020         *          2005/04/09  P.Harvey-Smith.
                      (       cocovtio.d):00021         * Decoded rest of the CoHR memory locations.
                      (       cocovtio.d):00022         *
                      (       cocovtio.d):00023         *              2005/04/24  P.Harvey-Smith.
                      (       cocovtio.d):00024         * Added variables for cursor flash, currently only implemented in co51
                      (       cocovtio.d):00025         *
                      (       cocovtio.d):00026                        NAM       VTIODefs  
                      (       cocovtio.d):00027                        TTL       Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00028         
                      (       cocovtio.d):00029         ********************
                      (       cocovtio.d):00030         * VTIO Static Memory
                      (       cocovtio.d):00031         *
                      (       cocovtio.d):00032                        ORG       V.SCF
0004                  (       cocovtio.d):00033         V.ScrnA        RMB       2                   (2) screen start address in system memory
0004                  (       cocovtio.d):00034         V.ScrnE        RMB       2                   (2) address of end of screen
0004                  (       cocovtio.d):00035         V.CrsrA        RMB       1                   (2) cursor address
0004                  (       cocovtio.d):00036         V.CrsAL        RMB       1                   cursor address low
0004                  (       cocovtio.d):00037         V.CChar        RMB       1                   value of character under cursor
0004                  (       cocovtio.d):00038         V.Mode         RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0004                  (       cocovtio.d):00039         V.NGChr        RMB       1                   number of additional characters to get
0004                  (       cocovtio.d):00040         V.RTAdd        RMB       2                   (2) return address after getting characters
0004                  (       cocovtio.d):00041         V.NChar        RMB       1                   character to process
0004                  (       cocovtio.d):00042         V.NChr2        RMB       1                   and the next one
                      (       cocovtio.d):00043                        RMB       1                   (I assume reserved for a 3rd parameter byte)
0004                  (       cocovtio.d):00044         V.Chr1         RMB       1                   same as under cursor character
0004                  (       cocovtio.d):00045         V.CColr        RMB       1                   cursor color
0004                  (       cocovtio.d):00046         V.Col          RMB       1                   number of columns for this screen
0004                  (       cocovtio.d):00047         V.Row          RMB       1                   number of rows
0004                  (       cocovtio.d):00048         V.Alpha        RMB       1                   0 when in alpha mode
0004                  (       cocovtio.d):00049         V.PIA1         RMB       1                   PIA1Base value
0004                  (       cocovtio.d):00050         V.Rdy          RMB       1                   device ready (see SS.DStat 0=not ready)
0004                  (       cocovtio.d):00051         V.CFlg1        RMB       1                   VDG display code values
0004                  (       cocovtio.d):00052         V.SBAdd        RMB       2                   (2) address of block screen is in
0004                  (       cocovtio.d):00053         V.GBuff        RMB       2                   allocation for graphics buffers (block#)
0004                  (       cocovtio.d):00054         V.AGBuf        RMB       4                   (2) additional graphics buffer
0004                  (       cocovtio.d):00055         V.FFMem        RMB       2                   Flood fill alloc'ed mem
0004                  (       cocovtio.d):00056         V.FFSPt        RMB       2                   Flood fill current stack pointer
0004                  (       cocovtio.d):00057         V.FFSTp        RMB       1                   Flood fill stack top
0004                  (       cocovtio.d):00058         V.FF6          RMB       1                   flood fill flag
0004                  (       cocovtio.d):00059         V.FFFlag       RMB       1                   Error in FloodFill - E$Write if FFill stack overflows, 0 if no error
0004                  (       cocovtio.d):00060         V.MTabl        RMB       2                   (2) address of mask table for pixels in byte
0004                  (       cocovtio.d):00061         V.PixBt        RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0004                  (       cocovtio.d):00062         V.GCrsX        RMB       1                   graphics cursor X value
0004                  (       cocovtio.d):00063         V.GCrsY        RMB       1                   graphics cursor Y
0004                  (       cocovtio.d):00064         V.Msk1         RMB       1                   mask byte 1
0004                  (       cocovtio.d):00065         V.Msk2         RMB       1                   mask byte 2 (00,55,AA,FF) Full byte Color Mask
0004                  (       cocovtio.d):00066         V.MCol         RMB       1                   Start pixel in a byte mask ($C0=4 color, $80=2 color)
0004                  (       cocovtio.d):00067         V.4A           RMB       1                   End pixel in a byte mask ($03=4 color,$01=2 color)
0004                  (       cocovtio.d):00068         V.PMask        RMB       1                   Full byte pixel mask for colors (i.e. $55, $CC etc)
0004                  (       cocovtio.d):00069         V.4C           RMB       1
0004                  (       cocovtio.d):00070         V.4D           RMB       1
0004                  (       cocovtio.d):00071         V.4E           RMB       1                   Flood Fill full byte color mask
0004                  (       cocovtio.d):00072         V.4F           RMB       1
0004                  (       cocovtio.d):00073         V.Caps         RMB       1                   caps lock info: $00=lower $FF=upper
0004                  (       cocovtio.d):00074         V.ClkCnt       RMB       1                   clock count ??
0004                  (       cocovtio.d):00075         V.WrChr        RMB       1                   character to write
0004                  (       cocovtio.d):00076         V.CurCo        RMB       1                   current CO-module in use
                      (       cocovtio.d):00077         * start of CoWP-specific static memory
0004                  (       cocovtio.d):00078         V.Co80X        RMB       1                   V.54
0004                  (       cocovtio.d):00079         V.Co80Y        RMB       1                   V.55
0004                  (       cocovtio.d):00080         V.ColPtr       RMB       1                   V.56
0004                  (       cocovtio.d):00081         V.RowPtr       RMB       1                   V.57
0004                  (       cocovtio.d):00082         V.C80X         RMB       1                   CoWP X position
0004                  (       cocovtio.d):00083         V.C80Y         RMB       1                   CoWP Y position
0004                  (       cocovtio.d):00084         V.Invers       RMB       1
                      (       cocovtio.d):00085         * end of CoWP-specific static memory
0004                  (       cocovtio.d):00086         V.DspVct       RMB       2                   vector to display screen
0004                  (       cocovtio.d):00087         V.CnvVct       RMB       2                   vector to X/Y to address conversion
0004                  (       cocovtio.d):00088         V.LKeyCd       RMB       1                   last key code
0004                  (       cocovtio.d):00089         V.2Key1        RMB       1                   2nd Key 1
0004                  (       cocovtio.d):00090         V.2Key2        RMB       1                   2nd Key 2
0004                  (       cocovtio.d):00091         V.2Key3        RMB       1                   2nd Key 3
0004                  (       cocovtio.d):00092         V.Key1         RMB       1                   Key 1
0004                  (       cocovtio.d):00093         V.Key2         RMB       1                   Key 2
0004                  (       cocovtio.d):00094         V.Key3         RMB       1                   Key 3
0004                  (       cocovtio.d):00095         V.ShftDn       RMB       1                   SHIFT/CTRL state
0004                  (       cocovtio.d):00096         V.CtrlDn       RMB       1                   CTRL key down
0004                  (       cocovtio.d):00097         V.KeyFlg       RMB       1                   key flag
0004                  (       cocovtio.d):00098         V.AltDwn       RMB       1                   ALT key down
0004                  (       cocovtio.d):00099         V.KySns        RMB       1                   key sense flags
0004                  (       cocovtio.d):00100         V.KySame       RMB       1                   key same as last flag
0004                  (       cocovtio.d):00101         V.KySnsF       RMB       1                   key sense flag
0004                  (       cocovtio.d):00102         V.Spcl         RMB       1
0004                  (       cocovtio.d):00103         V.KTblLC       RMB       1                   key table entry #
0004                  (       cocovtio.d):00104         V.6F           RMB       1                   ???
0004                  (       cocovtio.d):00105         V.COLoad       RMB       1                   CO-module loaded flags
0004                  (       cocovtio.d):00106         V.CFlag        RMB       1                   true lowercase flag $10=true, $00=false
0004                  (       cocovtio.d):00107         V.GrfDrvE      RMB       2                   GrfDrv entry point
0004                  (       cocovtio.d):00108         V.CoVDGE       RMB       2                   CoVDG entry point
0004                  (       cocovtio.d):00109         V.CoWPE        RMB       2                   CoWP entry point
0004                  (       cocovtio.d):00110         V.CoHRE        RMB       2                   CoHR entry point
0004                  (       cocovtio.d):00111         V.Co42E        RMB       2                   Co42 entry point
0004                  (       cocovtio.d):00112         V.CoVGAE       RMB       2                   CoVGA entry point
0004                  (       cocovtio.d):00113         V.Co80E        RMB       2                   Co80 entry point
0004                  (       cocovtio.d):00114         V.CoDPlusE     RMB       2                   CoDPlus entry point
0004                  (       cocovtio.d):00115         V.Flash        RMB       2                   Cursor flash routine address.
0004                  (       cocovtio.d):00116         v.FlashTime    RMB       1                   Cursor flash time
0004                  (       cocovtio.d):00117         v.FlashCount   RMB       1                   Cursor flash count
0004                  (       cocovtio.d):00118         V.NoFlash      RMB       1                   When this is non-zero do not flash cursor
                      (       cocovtio.d):00119         * If we make ClrBlk vector, throw it in here so the various comoduels, as well as VTIO,
                      (       cocovtio.d):00120         * can all use it (clearing text/graphics screens, clearing full width line (pure text or
                      (       cocovtio.d):00121         * CoHr/Co42 graphics lines), and possibly Clear to end of line could all use it.
0004                  (       cocovtio.d):00122         V.ClrBlk       RMB       2                   Vector to mini-stack blast clearing routine
0004                  (       cocovtio.d):00123         V.CpyBlk       RMB       2                   Vector to mini-stack blast copying routine
                      (       cocovtio.d):00124         * CoHR vars
0004                  (       cocovtio.d):00125         V.51ScrnA      RMB       2                   * Screen address.
0004                  (       cocovtio.d):00126         V.51XPos       RMB       1                   * X co-ordinate
0004                  (       cocovtio.d):00127         V.51YPos       RMB       1                   * Y co-ordinate
0004                  (       cocovtio.d):00128         V.51EscSeq     RMB       1                   * In escape sequence
0004                  (       cocovtio.d):00129         V.51ReverseFlag RMB       1                  * Reverse video flag
0004                  (       cocovtio.d):00130         V.51UnderlineFlag RMB       1                * Underline flag
0004                  (       cocovtio.d):00131         V.51CtrlDispatch RMB       2                 * Ctrl char dispatch address, currently processing
0004                  (       cocovtio.d):00132         V.51BytePixOffset RMB       1                * byte offset in screen line, of character X position        
0004                  (       cocovtio.d):00133         V.51OldCursorPosX RMB       1                * Position of old cursor before update        
0004                  (       cocovtio.d):00134         V.51OldCursorPosY RMB       1
0004                  (       cocovtio.d):00135         V.51CursorChanged RMB       1                * Has cursor position changed ? 1=yes,0=no
0004                  (       cocovtio.d):00136         V.51CursorOn   RMB       1                   * Is cursor on ? 1=yes 0=no                         
0004                  (       cocovtio.d):00137         V.51XORFlag    RMB       1                   * and data to screen (0) or Xor (1)                       
0004                  (       cocovtio.d):00138         V.51ScreenMask1 RMB       1                  * screen masks for drawing characters on screen         
0004                  (       cocovtio.d):00139         V.51ScreenMask2 RMB       1
                      (       cocovtio.d):00140         * End of CoHR vars
                      (       cocovtio.d):00141         **** Note these have to come at the end of the defs, or the keyboard ****
                      (       cocovtio.d):00142         **** code can clobber variables defined after these !                ****
0004                  (       cocovtio.d):00143         V.IBufH        RMB       1                   input buffer head
0004                  (       cocovtio.d):00144         V.IBufT        RMB       1                   input buffer tail
0004                  (       cocovtio.d):00145         V.InBuf        RMB       1                   input buffer ptr
0004                  (       cocovtio.d):00146         V.51End        RMB       1
                      (       cocovtio.d):00147                        RMB       250-.
0004                  (       cocovtio.d):00148         V.Last         EQU       .
                      (       cocovtio.d):00149         
                      (       cocovtio.d):00150         
                      (       cocovtio.d):00151         * Unknown for now
                      (       cocovtio.d):00152         *VD.FFMem rmb   2  (2) bottom of stack for flood fill
                      (       cocovtio.d):00153         *VD.FFSPt rmb   2  (2) flood fill stack pointer
                      (       cocovtio.d):00154         *VD.FFSTp rmb   2  (2) flood fill stack top pointer
                      (       cocovtio.d):00155         *VD.FF6   rmb   1   flood fill flag
                      (       cocovtio.d):00156         *VD.MCol2 rmb   1  color
                      (       cocovtio.d):00157         *VD.FF1   rmb   1  data for flood fill
                      (       cocovtio.d):00158         *VD.FF2   rmb   1  data for flood fill
                      (       cocovtio.d):00159         *VD.FFMsk rmb   1  flood fill mask
                      (       cocovtio.d):00160         *VD.FFFlg rmb   1  flood fill flag
                      (       cocovtio.d):00161         *VD.Palet rmb   16 (16) current palette values
                      (       cocovtio.d):00162         *VD.PlFlg rmb   1  initialized to $08 by L00DB, and then unused!
                      (       cocovtio.d):00163         
                      (       cocovtio.d):00164         *
                      (       cocovtio.d):00165         * Defs for V.COLoad flags.
                      (       cocovtio.d):00166         * 
                      (       cocovtio.d):00167         
0004                  (       cocovtio.d):00168         ModCoVDG       EQU       %00000010           CoVDG, Built-in VDG 32x16.
0004                  (       cocovtio.d):00169         ModCoWP        EQU       %00000100           CoWP, WordPak, 80x25
0004                  (       cocovtio.d):00170         ModCoHR        EQU       %00001000           CoHR, PMODE 4 51x25 text
0004                  (       cocovtio.d):00171         ModCo42        EQU       %00010000           Co42, PMODE 4 42x25 text
0004                  (       cocovtio.d):00172         ModCoVGA       EQU       %00100000           CoVGA, 64x32 text
0004                  (       cocovtio.d):00173         ModCo80        EQU       %01000000           Co80, CRT9128 WordPak, 80x25
0004                  (       cocovtio.d):00174         ModCoDPlus     EQU       %10000000           Dragon Plus, 6545, 80x24
                      (       cocovtio.d):00175         
                      (       cocovtio.d):00176         *
                      (       cocovtio.d):00177         * Defs for cursor flash counter
                      (       cocovtio.d):00178         *
                      (       cocovtio.d):00179         
0004                  (       cocovtio.d):00180         CFlash50hz     EQU       25                  * 50Hz flash counter
0004                  (       cocovtio.d):00181         CFlash60Hz     EQU       30                  * 60Hz flash counter
                      (       cocovtio.d):00182         
                      (       cocovtio.d):00183                        ELSE
                      (       cocovtio.d):00184                        
                      (       cocovtio.d):00185         ********************************************************************
                      (       cocovtio.d):00186         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00187         *
                      (       cocovtio.d):00188         * $Id$
                      (       cocovtio.d):00189         *
                      (       cocovtio.d):00190         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00191         * Comment
                      (       cocovtio.d):00192         * ------------------------------------------------------------------
                      (       cocovtio.d):00193         *          2004/07/18  Boisy G. Pitre
                      (       cocovtio.d):00194         * Started from systype
                      (       cocovtio.d):00195         
                      (       cocovtio.d):00196                        NAM       VTIODefs
                      (       cocovtio.d):00197                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00198         
                      (       cocovtio.d):00199         ****************
                      (       cocovtio.d):00200         * Window Devices
                      (       cocovtio.d):00201         *
                      (       cocovtio.d):00202                        ORG       $FF9F
FF9F                  (       cocovtio.d):00203         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (       cocovtio.d):00204         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (       cocovtio.d):00205         A.W1           RMB       1                   $FFA1
FFA2                  (       cocovtio.d):00206         A.W2           RMB       1                   $FFA2
FFA3                  (       cocovtio.d):00207         A.W3           RMB       1                   $FFA3
FFA4                  (       cocovtio.d):00208         A.W4           RMB       1                   $FFA4
FFA5                  (       cocovtio.d):00209         A.W5           RMB       1                   $FFA5
FFA6                  (       cocovtio.d):00210         A.W6           RMB       1                   $FFA6
FFA7                  (       cocovtio.d):00211         A.W7           RMB       1                   $FFA7
FFA8                  (       cocovtio.d):00212         A.W8           RMB       1                   $FFA8
FFA9                  (       cocovtio.d):00213         A.W9           RMB       1                   $FFA9
FFAA                  (       cocovtio.d):00214         A.W10          RMB       1                   $FFAA
FFAB                  (       cocovtio.d):00215         A.W11          RMB       1                   $FFAB
FFAC                  (       cocovtio.d):00216         A.W12          RMB       1                   $FFAC
FFAD                  (       cocovtio.d):00217         A.W13          RMB       1                   $FFAD
FFAE                  (       cocovtio.d):00218         A.W14          RMB       1                   $FFAE
FFAF                  (       cocovtio.d):00219         A.W15          RMB       1                   $FFAF
                      (       cocovtio.d):00220         
                      (       cocovtio.d):00221         **********************************
                      (       cocovtio.d):00222         * Pointer Device Packet Definition
                      (       cocovtio.d):00223         *
                      (       cocovtio.d):00224                        ORG       0
0000                  (       cocovtio.d):00225         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (       cocovtio.d):00226         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (       cocovtio.d):00227         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (       cocovtio.d):00228                        RMB       2                   reserved
0005                  (       cocovtio.d):00229         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (       cocovtio.d):00230         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (       cocovtio.d):00231         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (       cocovtio.d):00232         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (       cocovtio.d):00233         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (       cocovtio.d):00234         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (       cocovtio.d):00235         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (       cocovtio.d):00236         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (       cocovtio.d):00237         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (       cocovtio.d):00238         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (       cocovtio.d):00239                        RMB       2                   Reserved
0012                  (       cocovtio.d):00240         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (       cocovtio.d):00241         Pt.BDY         RMB       2                   Button down Y value
0016                  (       cocovtio.d):00242         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (       cocovtio.d):00243         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (       cocovtio.d):00244         Pt.AcX         RMB       2                   Actual X Value
001A                  (       cocovtio.d):00245         Pt.AcY         RMB       2                   Actual Y Value
001C                  (       cocovtio.d):00246         Pt.WRX         RMB       2                   Window Relative X
001E                  (       cocovtio.d):00247         Pt.WRY         RMB       2                   Window Relative Y
     0020             (       cocovtio.d):00248         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (       cocovtio.d):00249         
                      (       cocovtio.d):00250         **************************
                      (       cocovtio.d):00251         * window regions for mouse
                      (       cocovtio.d):00252         *
     0000             (       cocovtio.d):00253         WR.Cntnt       EQU       0                   content region
     0001             (       cocovtio.d):00254         WR.Cntrl       EQU       1                   control region
     0002             (       cocovtio.d):00255         WR.OfWin       EQU       2                   off window
                      (       cocovtio.d):00256         
                      (       cocovtio.d):00257         *************************************
                      (       cocovtio.d):00258         * Standard system get/put buffer defs
                      (       cocovtio.d):00259         *
                      (       cocovtio.d):00260         *
                      (       cocovtio.d):00261         * system group numbers
                      (       cocovtio.d):00262         *
                      (       cocovtio.d):00263                        ORG       200
00C8                  (       cocovtio.d):00264         Grp.Fnt        RMB       1                   font group
00C9                  (       cocovtio.d):00265         Grp.Clip       RMB       1                   clipboard group
00CA                  (       cocovtio.d):00266         Grp.Ptr        RMB       1                   pointer group
00CB                  (       cocovtio.d):00267         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (       cocovtio.d):00268         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (       cocovtio.d):00269         Grp.Pat6       RMB       1                   pattern group 16 color
                      (       cocovtio.d):00270         *
                      (       cocovtio.d):00271         * font buffer numbers
                      (       cocovtio.d):00272         *
                      (       cocovtio.d):00273                        ORG       1
0001                  (       cocovtio.d):00274         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (       cocovtio.d):00275         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (       cocovtio.d):00276         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (       cocovtio.d):00277         *
                      (       cocovtio.d):00278         * pattern buffer numbers
                      (       cocovtio.d):00279         *
                      (       cocovtio.d):00280                        ORG       1
0001                  (       cocovtio.d):00281         Pat.Dot        RMB       1
0002                  (       cocovtio.d):00282         Pat.Vrt        RMB       1
0003                  (       cocovtio.d):00283         Pat.Hrz        RMB       1
0004                  (       cocovtio.d):00284         Pat.XHtc       RMB       1
0005                  (       cocovtio.d):00285         Pat.LSnt       RMB       1
0006                  (       cocovtio.d):00286         Pat.RSnt       RMB       1
0007                  (       cocovtio.d):00287         Pat.SDot       RMB       1
0008                  (       cocovtio.d):00288         Pat.BDot       RMB       1
                      (       cocovtio.d):00289         *
                      (       cocovtio.d):00290         * pointer buffer numbers
                      (       cocovtio.d):00291         *
                      (       cocovtio.d):00292                        ORG       1
0001                  (       cocovtio.d):00293         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (       cocovtio.d):00294         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (       cocovtio.d):00295         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (       cocovtio.d):00296         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (       cocovtio.d):00297         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (       cocovtio.d):00298         Ptr.Txt        RMB       1                   Text pointer
0007                  (       cocovtio.d):00299         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (       cocovtio.d):00300         
                      (       cocovtio.d):00301         **********************
                      (       cocovtio.d):00302         * KeyDrv Entry Points
                      (       cocovtio.d):00303                        ORG       0
0000                  (       cocovtio.d):00304         K$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00305         K$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00306         K$FnKey        RMB       3                   get function key states
0009                  (       cocovtio.d):00307         K$RdKey        RMB       3                   get key states
                      (       cocovtio.d):00308         
                      (       cocovtio.d):00309         **********************
                      (       cocovtio.d):00310         * JoyDrv Entry Points
                      (       cocovtio.d):00311                        ORG       0
0000                  (       cocovtio.d):00312         J$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00313         J$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00314         J$MsBtn        RMB       3                   get mouse button states
0009                  (       cocovtio.d):00315         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (       cocovtio.d):00316         J$JyBtn        RMB       3                   get joystick button states
000F                  (       cocovtio.d):00317         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00318         
                      (       cocovtio.d):00319         **********************
                      (       cocovtio.d):00320         * SndDrv Entry Points
                      (       cocovtio.d):00321                        ORG       0
0000                  (       cocovtio.d):00322         S$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00323         S$GetStt       RMB       3                   joystick termination
0006                  (       cocovtio.d):00324         S$SetStt       RMB       3                   joystick termination
0009                  (       cocovtio.d):00325         S$Term         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00326         
                      (       cocovtio.d):00327         ********************************
                      (       cocovtio.d):00328         * Window/Menu Bar Data Structure
                      (       cocovtio.d):00329         *
                      (       cocovtio.d):00330         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (       cocovtio.d):00331         * for use in the high level windowing package.
                      (       cocovtio.d):00332         *
     000A             (       cocovtio.d):00333         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (       cocovtio.d):00334         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (       cocovtio.d):00335         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (       cocovtio.d):00336         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (       cocovtio.d):00337         *
                      (       cocovtio.d):00338         * Menu Item Descriptor : (MN.ITEMS)
                      (       cocovtio.d):00339         * one required for each item within the menu
                      (       cocovtio.d):00340         *
                      (       cocovtio.d):00341                        ORG       0
0000                  (       cocovtio.d):00342         MI.TTL         RMB       MXTTLEN             item name
000F                  (       cocovtio.d):00343         MI.ENBL        RMB       1                   enable flag
0010                  (       cocovtio.d):00344         MI.RES         RMB       5                   reserved bytes
     0015             (       cocovtio.d):00345         MI.SIZ         EQU       .                   size of menu item descriptor
                      (       cocovtio.d):00346         *
                      (       cocovtio.d):00347         * Menu Descriptor :
                      (       cocovtio.d):00348         * one for each menu on the manu bar
                      (       cocovtio.d):00349         * each is pointed to by MB.MPTR below
                      (       cocovtio.d):00350         *
                      (       cocovtio.d):00351                        ORG       0
0000                  (       cocovtio.d):00352         MN.TTL         RMB       MXTTLEN             menu title
000F                  (       cocovtio.d):00353         MN.ID          RMB       1                   menu id number (1-255)
0010                  (       cocovtio.d):00354         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (       cocovtio.d):00355         MN.NITS        RMB       1                   number of items in menu
0012                  (       cocovtio.d):00356         MN.ENBL        RMB       1                   enable flag
0013                  (       cocovtio.d):00357         MN.RES         RMB       2                   reserved bytes
0015                  (       cocovtio.d):00358         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (       cocovtio.d):00359         MN.SIZ         EQU       .                   size of menu descriptor
                      (       cocovtio.d):00360         *
                      (       cocovtio.d):00361         * Window Descriptor:
                      (       cocovtio.d):00362         * one required for each application in a framed window
                      (       cocovtio.d):00363         *
                      (       cocovtio.d):00364                        ORG       0
0000                  (       cocovtio.d):00365         WN.TTL         RMB       20                  title of window for title bar
0014                  (       cocovtio.d):00366         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (       cocovtio.d):00367         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (       cocovtio.d):00368         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (       cocovtio.d):00369         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (       cocovtio.d):00370         WN.RES         RMB       7                   reserved bytes
0020                  (       cocovtio.d):00371         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (       cocovtio.d):00372         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (       cocovtio.d):00373         
                      (       cocovtio.d):00374         *************************
                      (       cocovtio.d):00375         * Window Type Definitions
                      (       cocovtio.d):00376         *
                      (       cocovtio.d):00377         * To be used in setting up the border of the window in
                      (       cocovtio.d):00378         * the SS.WnSel SETSTAT
                      (       cocovtio.d):00379         *
                      (       cocovtio.d):00380                        ORG       0
0000                  (       cocovtio.d):00381         WT.NBox        RMB       1                   No Box
0001                  (       cocovtio.d):00382         WT.FWin        RMB       1                   Framed Window
0002                  (       cocovtio.d):00383         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (       cocovtio.d):00384         WT.SBox        RMB       1                   Shadowed Box
0004                  (       cocovtio.d):00385         WT.DBox        RMB       1                   Double Box
0005                  (       cocovtio.d):00386         WT.PBox        RMB       1                   Plain Box
                      (       cocovtio.d):00387         
                      (       cocovtio.d):00388         *************************************
                      (       cocovtio.d):00389         * Pre-Defined Menu IDs for the system
                      (       cocovtio.d):00390         *
                      (       cocovtio.d):00391                        ORG       1
0001                  (       cocovtio.d):00392         MId.Mov        RMB       1                   move box
0002                  (       cocovtio.d):00393         MId.Cls        RMB       1                   close box
0003                  (       cocovtio.d):00394         MId.Grw        RMB       1                   grow box
0004                  (       cocovtio.d):00395         MId.SUp        RMB       1                   scroll up
0005                  (       cocovtio.d):00396         MId.SDn        RMB       1                   scroll down
0006                  (       cocovtio.d):00397         MId.SRt        RMB       1                   scroll right
0007                  (       cocovtio.d):00398         MId.SLt        RMB       1                   scroll left
0008                  (       cocovtio.d):00399         MId.Chr        RMB       1                   character was depressed
                      (       cocovtio.d):00400                        ORG       20
0014                  (       cocovtio.d):00401         MId.Tdy        RMB       1                   Tandy menu
0015                  (       cocovtio.d):00402         MId.Fil        RMB       1                   Files Menu
0016                  (       cocovtio.d):00403         MId.Edt        RMB       1                   Edit Menu
0017                  (       cocovtio.d):00404         MId.Sty        RMB       1                   Styles menu
0018                  (       cocovtio.d):00405         MId.Fnt        RMB       1                   Font menu
                      (       cocovtio.d):00406         
                      (       cocovtio.d):00407         
                      (       cocovtio.d):00408         ******************************************************************************
                      (       cocovtio.d):00409         ******************************************************************************
                      (       cocovtio.d):00410         **                                                                          **
                      (       cocovtio.d):00411         ** NitrOS-9 Windowing system Global data definitions                        **
                      (       cocovtio.d):00412         **                                                                          **
                      (       cocovtio.d):00413         ******************************************************************************
                      (       cocovtio.d):00414         ******************************************************************************
                      (       cocovtio.d):00415         **                                                                          **
                      (       cocovtio.d):00416         ** System memory block 0 layout:                                            **
                      (       cocovtio.d):00417         **                                                                          **
                      (       cocovtio.d):00418         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (       cocovtio.d):00419         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (       cocovtio.d):00420         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (       cocovtio.d):00421         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (       cocovtio.d):00422         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (       cocovtio.d):00423         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (       cocovtio.d):00424         ** $0010-$001F : unused (User definable)                                    **
                      (       cocovtio.d):00425         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (       cocovtio.d):00426         ** $0100-$011F : Task usage table                                           **
                      (       cocovtio.d):00427         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (       cocovtio.d):00428         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (       cocovtio.d):00429         ** $0300-$03FF : system's system call dispatch table                        **
                      (       cocovtio.d):00430         ** $0400-$04FF : user's system call dispatch table                          **
                      (       cocovtio.d):00431         ** $0500-$05FF : process descriptor pointer table                           **
                      (       cocovtio.d):00432         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (       cocovtio.d):00433         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (       cocovtio.d):00434         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (       cocovtio.d):00435         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (       cocovtio.d):00436         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (       cocovtio.d):00437         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (       cocovtio.d):00438         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (       cocovtio.d):00439         ** $1248-$127F : ????                                                       **
                      (       cocovtio.d):00440         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (       cocovtio.d):00441         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (       cocovtio.d):00442         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (       cocovtio.d):00443         **                                                                          **
                      (       cocovtio.d):00444         ******************************************************************************
                      (       cocovtio.d):00445         ******************************************************************************
                      (       cocovtio.d):00446         
                      (       cocovtio.d):00447         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (       cocovtio.d):00448         MaxLines       EQU       25                  Max. Y coord text value
     0000             (       cocovtio.d):00449         Meg            SET       false               "true" if 1 or 2 meg machine
                      (       cocovtio.d):00450         
     0000             (       cocovtio.d):00451         COMP           EQU       0                   composite monitor
     0001             (       cocovtio.d):00452         RGB            EQU       1                   RGB Analog monitor 
     0002             (       cocovtio.d):00453         MONO           EQU       2                   monochrome monitor
                      (       cocovtio.d):00454         
     0001             (       cocovtio.d):00455         Monitor        SET       RGB
                      (       cocovtio.d):00456         
                      (       cocovtio.d):00457         * Global definitions
     0001             (       cocovtio.d):00458         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (       cocovtio.d):00459         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (       cocovtio.d):00460         CapsLck        EQU       %00000100           Capslock enabled
     0280             (       cocovtio.d):00461         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (       cocovtio.d):00462                      IFEQ      MaxLines-25
     00C6             (       cocovtio.d):00463         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00464                      ELSE      
0019                  (       cocovtio.d):00465         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00466                      ENDC      
                      (       cocovtio.d):00467         
                      (       cocovtio.d):00468         *****************************************************************************
                      (       cocovtio.d):00469         * Static memory area for each window (VTIO/TC9IO)
                      (       cocovtio.d):00470         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (       cocovtio.d):00471         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (       cocovtio.d):00472         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (       cocovtio.d):00473         * May have to have smaller limit for text to gfx screens, as it will run much
                      (       cocovtio.d):00474         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (       cocovtio.d):00475         *
                      (       cocovtio.d):00476         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (       cocovtio.d):00477         * V.SCF is to be resolved properly in pass 1!!
                      (       cocovtio.d):00478                        ORG       V.SCF
001D                  (       cocovtio.d):00479         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (       cocovtio.d):00480         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (       cocovtio.d):00481         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (       cocovtio.d):00482         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (       cocovtio.d):00483         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (       cocovtio.d):00484         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (       cocovtio.d):00485         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (       cocovtio.d):00486         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (       cocovtio.d):00487         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (       cocovtio.d):00488         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (       cocovtio.d):00489         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (       cocovtio.d):00490         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (       cocovtio.d):00491                        RMB       1                   unused                                       $2A
002B                  (       cocovtio.d):00492         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (       cocovtio.d):00493         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (       cocovtio.d):00494         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (       cocovtio.d):00495         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (       cocovtio.d):00496         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (       cocovtio.d):00497         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (       cocovtio.d):00498         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (       cocovtio.d):00499         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (       cocovtio.d):00500         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (       cocovtio.d):00501         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (       cocovtio.d):00502         CC3Parm        RMB       128-.               global parameter area
0080                  (       cocovtio.d):00503         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (       cocovtio.d):00504         CC3DSiz        EQU       .
                      (       cocovtio.d):00505         
                      (       cocovtio.d):00506         *****************************************************************************
                      (       cocovtio.d):00507         * GrfInt/WindInt global memory area
                      (       cocovtio.d):00508         * This area sits in system block 0 from $1000 to $10ff
     1000             (       cocovtio.d):00509         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (       cocovtio.d):00510                        ORG       0
0000                  (       cocovtio.d):00511         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (       cocovtio.d):00512         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (       cocovtio.d):00513         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (       cocovtio.d):00514         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (       cocovtio.d):00515         *g0003    rmb   2          NEW: UNUSED
0005                  (       cocovtio.d):00516         g0005          RMB       2                   Temp save in Windint RG
0007                  (       cocovtio.d):00517         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (       cocovtio.d):00518         G.MonTyp       RMB       1                   monitor type
     000A             (       cocovtio.d):00519         g000A          EQU       .                   Old label for compatibility
000A                  (       cocovtio.d):00520         G.CrDvFl       RMB       1  Are we current device flag (only set when all
                      (       cocovtio.d):00521         *                           Parms have been moved to Dev Mem)
                      (       cocovtio.d):00522         *                           0=We are not on our device
                      (       cocovtio.d):00523         *                           1=We are the current device
                      (       cocovtio.d):00524         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (       cocovtio.d):00525         *                           whether or not to update GIME regs themselves
                      (       cocovtio.d):00526         *                           If not current device, they don't.)
000B                  (       cocovtio.d):00527         G.WinType      RMB       1                   current device's V.TYPE
000C                  (       cocovtio.d):00528         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (       cocovtio.d):00529         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (       cocovtio.d):00530         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (       cocovtio.d):00531         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (       cocovtio.d):00532         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (       cocovtio.d):00533         G.BelVec       RMB       2                   BELL routine vector
0019                  (       cocovtio.d):00534         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (       cocovtio.d):00535         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (       cocovtio.d):00536         G.BelTnF       RMB       1                   BELL tone flag
001D                  (       cocovtio.d):00537         g001D          RMB       3
0020                  (       cocovtio.d):00538         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (       cocovtio.d):00539         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (       cocovtio.d):00540         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (       cocovtio.d):00541         *                           00000010 : VDGInt found
                      (       cocovtio.d):00542         *                           10000000 : GrfDrv found
0025                  (       cocovtio.d):00543         g0025          RMB       1
0026                  (       cocovtio.d):00544         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (       cocovtio.d):00545         *         IFEQ  TC9-true
                      (       cocovtio.d):00546         *CurLght  rmb   1          current keyboard light settings
                      (       cocovtio.d):00547         *         ELSE  
0027                  (       cocovtio.d):00548         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (       cocovtio.d):00549         *         ENDC  
0028                  (       cocovtio.d):00550         G.LKeyCd       RMB       1                   last keyboard code
0029                  (       cocovtio.d):00551         G.KyRept       RMB       1                   key repeat counter
                      (       cocovtio.d):00552         * A secondary 3 key table (same format as g002D below)
002A                  (       cocovtio.d):00553         G.2Key1        RMB       1                   $2A
002B                  (       cocovtio.d):00554         G.2Key2        RMB       1                   $2B
002C                  (       cocovtio.d):00555         G.2Key3        RMB       1
                      (       cocovtio.d):00556         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (       cocovtio.d):00557         * than 3 are hit, the last key is overwritten with the very last key down that
                      (       cocovtio.d):00558         * was checked. Format for all three is the same as the PIA column/row byte @
                      (       cocovtio.d):00559         * KeyFlag below.
002D                  (       cocovtio.d):00560         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (       cocovtio.d):00561         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (       cocovtio.d):00562         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (       cocovtio.d):00563         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (       cocovtio.d):00564         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (       cocovtio.d):00565         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (       cocovtio.d):00566         *                           %00000111-Column # (Output, 0-7)
                      (       cocovtio.d):00567         *                           %00111000-Row # (Input, 0-6)
0033                  (       cocovtio.d):00568         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (       cocovtio.d):00569         G.KySns        RMB       1                   key sense byte
0035                  (       cocovtio.d):00570         G.KySame       RMB       1                   same key flag
0036                  (       cocovtio.d):00571         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (       cocovtio.d):00572                        RMB       1
0038                  (       cocovtio.d):00573         g0038          RMB       1                   grfdrv initialized flag
0039                  (       cocovtio.d):00574                        RMB       2
003B                  (       cocovtio.d):00575         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (       cocovtio.d):00576         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (       cocovtio.d):00577         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (       cocovtio.d):00578         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (       cocovtio.d):00579         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (       cocovtio.d):00580         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (       cocovtio.d):00581         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (       cocovtio.d):00582         *         IFEQ  TC9-true
                      (       cocovtio.d):00583         *KeyParm  rmb   1          keyboard command parameter byte
                      (       cocovtio.d):00584         *         ELSE  
0063                  (       cocovtio.d):00585         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (       cocovtio.d):00586         *         ENDC  
0064                  (       cocovtio.d):00587         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (       cocovtio.d):00588         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (       cocovtio.d):00589         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (       cocovtio.d):00590         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (       cocovtio.d):00591         G.CoTble       RMB       6                   co-module table ($68)
006E                  (       cocovtio.d):00592         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (       cocovtio.d):00593         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (       cocovtio.d):00594         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (       cocovtio.d):00595         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (       cocovtio.d):00596         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (       cocovtio.d):00597         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (       cocovtio.d):00598         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (       cocovtio.d):00599         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (       cocovtio.d):00600         g00BD          RMB       1                   Current screen type for work window table
00BE                  (       cocovtio.d):00601         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (       cocovtio.d):00602         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (       cocovtio.d):00603         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (       cocovtio.d):00604         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (       cocovtio.d):00605         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (       cocovtio.d):00606         G.MsSig        RMB       1                   mouse signal flag
00C7                  (       cocovtio.d):00607         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (       cocovtio.d):00608         g00D7          RMB       9
00E0                  (       cocovtio.d):00609         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (       cocovtio.d):00610         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (       cocovtio.d):00611         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (       cocovtio.d):00612         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (       cocovtio.d):00613         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (       cocovtio.d):00614         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (       cocovtio.d):00615         
                      (       cocovtio.d):00616         *****************************************************************************
                      (       cocovtio.d):00617         * GrfDrv global memory data definitions
                      (       cocovtio.d):00618         * This area sits in system block 0 from $1100 to $119E
     1100             (       cocovtio.d):00619         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (       cocovtio.d):00620                        ORG       0
0000                  (       cocovtio.d):00621         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (       cocovtio.d):00622         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (       cocovtio.d):00623         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (       cocovtio.d):00624         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (       cocovtio.d):00625         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (       cocovtio.d):00626         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (       cocovtio.d):00627         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (       cocovtio.d):00628         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (       cocovtio.d):00629         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (       cocovtio.d):00630         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (       cocovtio.d):00631         *                             overlay width has been copied
000B                  (       cocovtio.d):00632         gr000B         RMB       1
000C                  (       cocovtio.d):00633         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (       cocovtio.d):00634         gr000E         RMB       1
000F                  (       cocovtio.d):00635         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (       cocovtio.d):00636         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (       cocovtio.d):00637         gr0012         RMB       6
0018                  (       cocovtio.d):00638         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (       cocovtio.d):00639         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (       cocovtio.d):00640         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (       cocovtio.d):00641         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (       cocovtio.d):00642         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (       cocovtio.d):00643         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (       cocovtio.d):00644         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (       cocovtio.d):00645         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (       cocovtio.d):00646         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (       cocovtio.d):00647         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (       cocovtio.d):00648         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (       cocovtio.d):00649         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (       cocovtio.d):00650         gr002C         RMB       2
002E                  (       cocovtio.d):00651         gr002E         RMB       2                   current window table entry
0030                  (       cocovtio.d):00652         gr0030         RMB       2                   current screen table ptr
0032                  (       cocovtio.d):00653         gr0032         RMB       1                   Last block # we used for buffers
0033                  (       cocovtio.d):00654         gr0033         RMB       2                   Last offset we used for buffers
0035                  (       cocovtio.d):00655         gr0035         RMB       1                   group
0036                  (       cocovtio.d):00656         gr0036         RMB       2                   offset
0038                  (       cocovtio.d):00657         gr0038         RMB       1                   group returned (new)
0039                  (       cocovtio.d):00658         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (       cocovtio.d):00659         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (       cocovtio.d):00660         gr003B         RMB       2                   end of vars ptr?
003D                  (       cocovtio.d):00661         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (       cocovtio.d):00662         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (       cocovtio.d):00663         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (       cocovtio.d):00664         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (       cocovtio.d):00665         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (       cocovtio.d):00666         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (       cocovtio.d):00667         gr0047         RMB       2                   'Working' X coordinate
0049                  (       cocovtio.d):00668         gr0049         RMB       2                   'Working' Y coordinate
004B                  (       cocovtio.d):00669         gr004B         RMB       2                   current X
004D                  (       cocovtio.d):00670         gr004D         RMB       2                   current Y
004F                  (       cocovtio.d):00671         gr004F         RMB       2                   X Size (in bytes)
0051                  (       cocovtio.d):00672         gr0051         RMB       2                   Y Size (in bytes)
0053                  (       cocovtio.d):00673         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (       cocovtio.d):00674         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (       cocovtio.d):00675         gr0057         RMB       1                   group
0058                  (       cocovtio.d):00676         gr0058         RMB       1                   buffer #
0059                  (       cocovtio.d):00677         gr0059         RMB       1                   save switch for overlay
005A                  (       cocovtio.d):00678         gr005A         RMB       1                   PRN
005B                  (       cocovtio.d):00679         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (       cocovtio.d):00680         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (       cocovtio.d):00681         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (       cocovtio.d):00682         Gr.STYMk       RMB       1                   STY marker
0061                  (       cocovtio.d):00683         gr0061         RMB       1                   foreground RGB data
0062                  (       cocovtio.d):00684         gr0062         RMB       1                   background RGB data
0063                  (       cocovtio.d):00685         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (       cocovtio.d):00686         gr0064         RMB       2                   PSet vector
0066                  (       cocovtio.d):00687         gr0066         RMB       2                   pset offset
0068                  (       cocovtio.d):00688         gr0068         RMB       2                   LSet vector
006A                  (       cocovtio.d):00689         gr006A         RMB       2                   max X co-ordinate
006C                  (       cocovtio.d):00690         gr006C         RMB       2                   max Y co-ordinate
006E                  (       cocovtio.d):00691         gr006E         RMB       2                   X pixel count
0070                  (       cocovtio.d):00692         gr0070         RMB       2                   Y pixel count
0072                  (       cocovtio.d):00693         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (       cocovtio.d):00694         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (       cocovtio.d):00695         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (       cocovtio.d):00696         gr0077         RMB       2                   Vector for right direction FFill
0079                  (       cocovtio.d):00697         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (       cocovtio.d):00698         gr007A         RMB       2                   Vector for left direction FFill
007C                  (       cocovtio.d):00699         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (       cocovtio.d):00700         gr007D         RMB       1                   buffer block #
007E                  (       cocovtio.d):00701         gr007E         RMB       2                   buffer offset #
0080                  (       cocovtio.d):00702         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (       cocovtio.d):00703         gr0082         RMB       3                   3 byte extended screen address
0085                  (       cocovtio.d):00704         gr0085         RMB       2                   temp
0087                  (       cocovtio.d):00705         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (       cocovtio.d):00706         gr0097         RMB       1                   temp
0098                  (       cocovtio.d):00707         gr0098         RMB       1                   temp
                      (       cocovtio.d):00708         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (       cocovtio.d):00709         gr0099         RMB       2                   temp
                      (       cocovtio.d):00710         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (       cocovtio.d):00711         gr009B         RMB       1                   counter temp
009C                  (       cocovtio.d):00712         gr009C         RMB       1
009D                  (       cocovtio.d):00713         gr009D         RMB       2                   offset to buffer in block
009F                  (       cocovtio.d):00714         gr009F         RMB       1
00A0                  (       cocovtio.d):00715         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (       cocovtio.d):00716         gr00A1         RMB       2                   vector routine for (changes lots)
                      (       cocovtio.d):00717         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (       cocovtio.d):00718         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (       cocovtio.d):00719         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (       cocovtio.d):00720         gr00A7         RMB       2
00A9                  (       cocovtio.d):00721         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (       cocovtio.d):00722         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (       cocovtio.d):00723         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (       cocovtio.d):00724         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (       cocovtio.d):00725         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (       cocovtio.d):00726         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (       cocovtio.d):00727         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (       cocovtio.d):00728         gr00B3         RMB       1                   temp variable grfdrv
00B4                  (       cocovtio.d):00729         gr00B4         RMB       1                   temp variable grfdrv
00B5                  (       cocovtio.d):00730         gr00B5         RMB       1                   regW for grfdrv
00B6                  (       cocovtio.d):00731         gr00B6         RMB       1
00B7                  (       cocovtio.d):00732         gr00B7         RMB       2
00B9                  (       cocovtio.d):00733         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (       cocovtio.d):00734         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (       cocovtio.d):00735         gr00BD         RMB       2                   previously used in grfdrv at $B6
00BF                  (       cocovtio.d):00736         gr00BF         RMB       256-.
                      (       cocovtio.d):00737         * GPLoad buffer - $1200 in system block 0
0100                  (       cocovtio.d):00738         GPBuf          RMB       72                  common move buffer for gpload/get/put
     0048             (       cocovtio.d):00739         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (       cocovtio.d):00740         
                      (       cocovtio.d):00741         *****************************************************************************
                      (       cocovtio.d):00742         * Window table entry structure
                      (       cocovtio.d):00743         * These tables sit in system block 0 and there is 1 for every window init'd
                      (       cocovtio.d):00744         * including any overlay windows.
     0020             (       cocovtio.d):00745         MaxWind        EQU       32                  maximum allowable window tables
     1290             (       cocovtio.d):00746         WinBase        EQU       $1290               base address to start of window tables
                      (       cocovtio.d):00747                        ORG       -$10
FFF0                  (       cocovtio.d):00748         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (       cocovtio.d):00749         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (       cocovtio.d):00750         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (       cocovtio.d):00751         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (       cocovtio.d):00752         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (       cocovtio.d):00753         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (       cocovtio.d):00754         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (       cocovtio.d):00755         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (       cocovtio.d):00756         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (       cocovtio.d):00757         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (       cocovtio.d):00758         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (       cocovtio.d):00759         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (       cocovtio.d):00760         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (       cocovtio.d):00761         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (       cocovtio.d):00762         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (       cocovtio.d):00763         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (       cocovtio.d):00764         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (       cocovtio.d):00765         Wt.Back        RMB       1                   background palette #                         $07
0008                  (       cocovtio.d):00766         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (       cocovtio.d):00767         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (       cocovtio.d):00768         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (       cocovtio.d):00769         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (       cocovtio.d):00770         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (       cocovtio.d):00771         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (       cocovtio.d):00772         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (       cocovtio.d):00773         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (       cocovtio.d):00774         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (       cocovtio.d):00775         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (       cocovtio.d):00776         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (       cocovtio.d):00777         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (       cocovtio.d):00778         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (       cocovtio.d):00779         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (       cocovtio.d):00780         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24,0-191)                 $1D
001F                  (       cocovtio.d):00781         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (       cocovtio.d):00782         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (       cocovtio.d):00783         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (       cocovtio.d):00784         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (       cocovtio.d):00785         * NOTE: The following default settings are what the window was initialized
                      (       cocovtio.d):00786         *       with, and thus are the MAXIMUM start/size the window can handle
                      (       cocovtio.d):00787         *       until it is restarted (DWEnd & DWSet)
                      (       cocovtio.d):00788         *       They also appear to be used in WindInt to determine the coords &
                      (       cocovtio.d):00789         *       sizes for control+content regions
0026                  (       cocovtio.d):00790         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (       cocovtio.d):00791         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (       cocovtio.d):00792         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (       cocovtio.d):00793         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (       cocovtio.d):00794         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (       cocovtio.d):00795         Wt.Siz         EQU       .+$10
                      (       cocovtio.d):00796         
                      (       cocovtio.d):00797         *****************************************************************************
                      (       cocovtio.d):00798         * Screen table entrys
                      (       cocovtio.d):00799         * These tables sit in system block 0 base=$1A80
                      (       cocovtio.d):00800         
     0010             (       cocovtio.d):00801         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (       cocovtio.d):00802         STblBse        EQU       $1A80               base address of screen tables
                      (       cocovtio.d):00803                        ORG       0
0000                  (       cocovtio.d):00804         St.Sty         RMB       1                   Screen type                         $00
0001                  (       cocovtio.d):00805         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (       cocovtio.d):00806         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (       cocovtio.d):00807         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (       cocovtio.d):00808         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (       cocovtio.d):00809         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (       cocovtio.d):00810         St.Back        RMB       1                   Background palette register #       $07
0008                  (       cocovtio.d):00811         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (       cocovtio.d):00812         St.Res         RMB       7                   UNUSED???                           $09
                      (       cocovtio.d):00813         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (       cocovtio.d):00814         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (       cocovtio.d):00815         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (       cocovtio.d):00816         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
0010                  (       cocovtio.d):00817         St.Pals        RMB       16                  Palette register contents           $10
     0020             (       cocovtio.d):00818         St.Siz         EQU       .
                      (       cocovtio.d):00819         
                      (       cocovtio.d):00820         *****************************************************************************
                      (       cocovtio.d):00821         * Graphics buffer tables
                      (       cocovtio.d):00822         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (       cocovtio.d):00823         * data.
                      (       cocovtio.d):00824                        ORG       0
0000                  (       cocovtio.d):00825         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (       cocovtio.d):00826         Grf.Off        RMB       2                   back block header offset            $01
0003                  (       cocovtio.d):00827         Grf.Grp        RMB       1                   group #                             $03
0004                  (       cocovtio.d):00828         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (       cocovtio.d):00829         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (       cocovtio.d):00830         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (       cocovtio.d):00831         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (       cocovtio.d):00832         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (       cocovtio.d):00833         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (       cocovtio.d):00834         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (       cocovtio.d):00835         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (       cocovtio.d):00836         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (       cocovtio.d):00837         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (       cocovtio.d):00838         Grf.Siz        EQU       .                   $20
                      (       cocovtio.d):00839         
                      (       cocovtio.d):00840         *****************************************************************************
                      (       cocovtio.d):00841         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (       cocovtio.d):00842         * $1075-$0176
                      (       cocovtio.d):00843         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (       cocovtio.d):00844                        ORG       0
0000                  (       cocovtio.d):00845         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (       cocovtio.d):00846         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (       cocovtio.d):00847         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (       cocovtio.d):00848         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (       cocovtio.d):00849         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (       cocovtio.d):00850         Gt.BClr        RMB       1                   Background color                               $08
0009                  (       cocovtio.d):00851         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (       cocovtio.d):00852         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (       cocovtio.d):00853         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (       cocovtio.d):00854         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (       cocovtio.d):00855         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (       cocovtio.d):00856         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (       cocovtio.d):00857         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (       cocovtio.d):00858         GTabSz         EQU       .
                      (       cocovtio.d):00859         
                      (       cocovtio.d):00860         *****************************************************************************
                      (       cocovtio.d):00861         * This table is located in the graphics table memory and is offset from
                      (       cocovtio.d):00862         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (       cocovtio.d):00863         * WindInt.
                      (       cocovtio.d):00864         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (       cocovtio.d):00865         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (       cocovtio.d):00866         *  COMBINATION EVERY TIME
                      (       cocovtio.d):00867                        ORG       $0240
0240                  (       cocovtio.d):00868                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (       cocovtio.d):00869                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (       cocovtio.d):00870                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (       cocovtio.d):00871                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (       cocovtio.d):00872         
                      (       cocovtio.d):00873         *****************************************************************************
                      (       cocovtio.d):00874         * WindInt menu handling table entry definition
                      (       cocovtio.d):00875                        ORG       0
0000                  (       cocovtio.d):00876         MnuXNum        RMB       1                   menu #
0001                  (       cocovtio.d):00877         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (       cocovtio.d):00878         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (       cocovtio.d):00879                        RMB       1                   unused?
     0004             (       cocovtio.d):00880         MnuHSiz        EQU       .
                      (       cocovtio.d):00881         
                      (       cocovtio.d):00882         *****************************************************************************
                      (       cocovtio.d):00883         * Character binary switches
     0080             (       cocovtio.d):00884         TChr           EQU       %10000000           transparent characters
     0040             (       cocovtio.d):00885         Under          EQU       %01000000           underline characters
     0020             (       cocovtio.d):00886         Bold           EQU       %00100000           bold characters
     0010             (       cocovtio.d):00887         Prop           EQU       %00010000           proportional spacing of characters
     0008             (       cocovtio.d):00888         Scale          EQU       %00001000           automatic window scaling
     0004             (       cocovtio.d):00889         Invers         EQU       %00000100           inverse characters
     0002             (       cocovtio.d):00890         NoCurs         EQU       %00000010           no cursor display
     0001             (       cocovtio.d):00891         Protect        EQU       %00000001           device window protection
                      (       cocovtio.d):00892         
                      (       cocovtio.d):00893         *****************************************************************************
                      (       cocovtio.d):00894         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (       cocovtio.d):00895         Current        EQU       $ff                 Current screen
                      (       cocovtio.d):00896         *         equ   1          640x200x2
                      (       cocovtio.d):00897         *         equ   2          320x200x4
                      (       cocovtio.d):00898         *         equ   3          640x200x4
                      (       cocovtio.d):00899         *         equ   4          320x200x16
                      (       cocovtio.d):00900         *         equ   $85        80 column text
                      (       cocovtio.d):00901         *         equ   $86        40 column text
                      (       cocovtio.d):00902         
                      (       cocovtio.d):00903         *************************************
                      (       cocovtio.d):00904         * Window default palette color codes
                      (       cocovtio.d):00905         *
                      (       cocovtio.d):00906                        ORG       0
0000                  (       cocovtio.d):00907         White.         RMB       1
0001                  (       cocovtio.d):00908         Blue.          RMB       1
0002                  (       cocovtio.d):00909         Black.         RMB       1
0003                  (       cocovtio.d):00910         Green.         RMB       1
0004                  (       cocovtio.d):00911         Red.           RMB       1
0005                  (       cocovtio.d):00912         Yellow.        RMB       1
0006                  (       cocovtio.d):00913         Magenta.       RMB       1
0007                  (       cocovtio.d):00914         Cyan.          RMB       1
                      (       cocovtio.d):00915         
                      (       cocovtio.d):00916                        ENDC      
                      (       cocovtio.d):00917                        ENDC      
                      (/home/strick/go/s):00036                  endc
                      (/home/strick/go/s):00037           
     00C1             (/home/strick/go/s):00038         tylg     set   Systm+Objct
     0080             (/home/strick/go/s):00039         atrv     set   ReEnt+rev
     0000             (/home/strick/go/s):00040         rev      set   $00
     0002             (/home/strick/go/s):00041         edition  equ   2
                      (/home/strick/go/s):00042         
                      (/home/strick/go/s):00043         * Color table for 3D look stuff & others - WILL NEED TO SWAP 1 & 2 FOR MENUS
                      (/home/strick/go/s):00044         * This should now match VIEW's color table
     0000             (/home/strick/go/s):00045         WColor0  equ   0          black
     0002             (/home/strick/go/s):00046         WColor1  equ   2          dark grey (was lite grey)
     0001             (/home/strick/go/s):00047         WColor2  equ   1          light grey (dark grey)
     0003             (/home/strick/go/s):00048         WColor3  equ   3          (white)
                      (/home/strick/go/s):00049         
0000 87CD1F52000DC180 (/home/strick/go/s):00050                  mod   eom,name,tylg,atrv,entry,size
     B402C10000
     0000             (/home/strick/go/s):00051         size     equ   .
                      (/home/strick/go/s):00052         
     000D             (/home/strick/go/s):00053         name     equ   *
                      (/home/strick/go/s):00054                  IFEQ  CoGrf-1
                      (/home/strick/go/s):00055                  fcs   /CoGrf/
                      (/home/strick/go/s):00056                  ELSE
000D 436F5769EE       (/home/strick/go/s):00057                  fcs   /CoWin/
                      (/home/strick/go/s):00058                  ENDC
0012 02               (/home/strick/go/s):00059                  fcb   edition
                      (/home/strick/go/s):00060         
                      (/home/strick/go/s):00061         ****************************
                      (/home/strick/go/s):00062         * Escape code parameter vector table
                      (/home/strick/go/s):00063         * Format: Byte 1  : Length of parameters required (in bytes)
                      (/home/strick/go/s):00064         *         Byte 2  : Internal function code for GrfDrv
                      (/home/strick/go/s):00065         *         Byte 3-4: Vector offset of routine from Byte 1
                      (/home/strick/go/s):00066         
0013 0704             (/home/strick/go/s):00067         L0027    fcb   7,$04      DWSet
0015 0390             (/home/strick/go/s):00068                  fdb   DWSet-*+2
0017 0010             (/home/strick/go/s):00069                  fcb   0,$10      Select
0019 0539             (/home/strick/go/s):00070                  fdb   Select-*+2
001B 070A             (/home/strick/go/s):00071                  fcb   7,$0A      OWSet
001D 048D             (/home/strick/go/s):00072                  fdb   OWSet-*+2
001F 000C             (/home/strick/go/s):00073                  fcb   0,$0C      OWEnd
0021 04E5             (/home/strick/go/s):00074                  fdb   OWEnd-*+2
0023 0008             (/home/strick/go/s):00075                  fcb   0,$08      DWEnd
0025 042E             (/home/strick/go/s):00076                  fdb   DWEnd-*+2
0027 040E             (/home/strick/go/s):00077                  fcb   4,$0E      CWArea
0029 0578             (/home/strick/go/s):00078                  fdb   CWArea-*+2
002B FF00             (/home/strick/go/s):00079                  fcb   $ff,$00    Blank
002D 0000             (/home/strick/go/s):00080                  fdb   $0000
002F FF00             (/home/strick/go/s):00081                  fcb   $ff,$00    Blank
0031 0000             (/home/strick/go/s):00082                  fdb   $0000
0033 FF00             (/home/strick/go/s):00083                  fcb   $ff,$00    Blank
0035 0000             (/home/strick/go/s):00084                  fdb   $0000
0037 042C             (/home/strick/go/s):00085                  fcb   4,$2C      DefGPB
0039 0812             (/home/strick/go/s):00086                  fdb   DefGPB-*+2
003B 022E             (/home/strick/go/s):00087                  fcb   2,$2E      KillBuf
003D 0676             (/home/strick/go/s):00088                  fdb   KillBuf-*+2
003F 0930             (/home/strick/go/s):00089                  fcb   9,$30      GPLoad
0041 0891             (/home/strick/go/s):00090                  fdb   GPLoad-*+2
0043 0A34             (/home/strick/go/s):00091                  fcb   10,$34     GetBlk
0045 083B             (/home/strick/go/s):00092                  fdb   GetBlk-*+2
0047 0636             (/home/strick/go/s):00093                  fcb   6,$36      PutBlk
0049 084B             (/home/strick/go/s):00094                  fdb   PutBlk-*+2
004B 0212             (/home/strick/go/s):00095                  fcb   2,$12      PSet
004D 0653             (/home/strick/go/s):00096                  fdb   PSet-*+2
004F 011E             (/home/strick/go/s):00097                  fcb   1,$1E      LSet
0051 05E8             (/home/strick/go/s):00098                  fdb   LSet-*+2
0053 001C             (/home/strick/go/s):00099                  fcb   0,$1C      DefPal
0055 060C             (/home/strick/go/s):00100                  fdb   DefPal-*+2
0057 0216             (/home/strick/go/s):00101                  fcb   2,$16      Palette
0059 062B             (/home/strick/go/s):00102                  fdb   Palette-*+2
005B 0120             (/home/strick/go/s):00103                  fcb   1,$20      FColor
005D 05F8             (/home/strick/go/s):00104                  fdb   FColor-*+2
005F 0122             (/home/strick/go/s):00105                  fcb   1,$22      BColor
0061 05F4             (/home/strick/go/s):00106                  fdb   BColor-*+2
0063 0114             (/home/strick/go/s):00107                  fcb   1,$14      Border
0065 05E2             (/home/strick/go/s):00108                  fdb   Border-*+2
0067 0128             (/home/strick/go/s):00109                  fcb   1,$28      ScaleSw
0069 1DFD             (/home/strick/go/s):00110                  fdb   ScaleSw-*+2
006B 0106             (/home/strick/go/s):00111                  fcb   1,$06      DWProtSw
006D 1DF9             (/home/strick/go/s):00112                  fdb   DWProtSw-*+2
006F FF00             (/home/strick/go/s):00113                  fcb   $ff,$00    Blank
0071 0000             (/home/strick/go/s):00114                  fdb   $0000
0073 FF00             (/home/strick/go/s):00115                  fcb   $ff,$00    Blank
0075 0000             (/home/strick/go/s):00116                  fdb   $0000
0077 021A             (/home/strick/go/s):00117                  fcb   2,$1A      GCSet
0079 059F             (/home/strick/go/s):00118                  fdb   L060C-*+2
007B 0218             (/home/strick/go/s):00119                  fcb   2,$18      Font
007D 0623             (/home/strick/go/s):00120                  fdb   Font-*+2
007F FF00             (/home/strick/go/s):00121                  fcb   $ff,$00    Blank
0081 0000             (/home/strick/go/s):00122                  fdb   $0000
0083 0124             (/home/strick/go/s):00123                  fcb   1,$24      TCharSw
0085 1DE1             (/home/strick/go/s):00124                  fdb   TCharSw-*+2
0087 012A             (/home/strick/go/s):00125                  fcb   1,$2A      Bold
0089 1DDD             (/home/strick/go/s):00126                  fdb   BoldSw-*+2
008B FF00             (/home/strick/go/s):00127                  fcb   $ff,$00    Blank
008D 0000             (/home/strick/go/s):00128                  fdb   $0000
008F 0126             (/home/strick/go/s):00129                  fcb   1,$26      PropSw
0091 1DD5             (/home/strick/go/s):00130                  fdb   PropSw-*+2
0093 0400             (/home/strick/go/s):00131                  fcb   4,$00      SetDP
0095 08EE             (/home/strick/go/s):00132                  fdb   SetDPtr-*+2
0097 0400             (/home/strick/go/s):00133                  fcb   4,$00      RSetDPtr
0099 090B             (/home/strick/go/s):00134                  fdb   RSetDPtr-*+2
009B 0448             (/home/strick/go/s):00135                  fcb   4,$48      Point
009D 0923             (/home/strick/go/s):00136                  fdb   Point-*+2
009F 0448             (/home/strick/go/s):00137                  fcb   4,$48      RPoint
00A1 0934             (/home/strick/go/s):00138                  fdb   RPoint-*+2
00A3 044A             (/home/strick/go/s):00139                  fcb   4,$4A      Line
00A5 094E             (/home/strick/go/s):00140                  fdb   Line-*+2
00A7 044A             (/home/strick/go/s):00141                  fcb   4,$4A      RLine
00A9 0964             (/home/strick/go/s):00142                  fdb   RLine-*+2
00AB 044A             (/home/strick/go/s):00143                  fcb   4,$4A      LineM
00AD 0972             (/home/strick/go/s):00144                  fdb   LineM-*+2
00AF 044A             (/home/strick/go/s):00145                  fcb   4,$4A      RLineM
00B1 098D             (/home/strick/go/s):00146                  fdb   RLineM-*+2
00B3 044C             (/home/strick/go/s):00147                  fcb   4,$4C      Box
00B5 093E             (/home/strick/go/s):00148                  fdb   Box-*+2
00B7 044C             (/home/strick/go/s):00149                  fcb   4,$4C      RBox
00B9 0954             (/home/strick/go/s):00150                  fdb   RBox-*+2
00BB 044E             (/home/strick/go/s):00151                  fcb   4,$4E      Bar
00BD 0936             (/home/strick/go/s):00152                  fdb   Bar-*+2
00BF 044E             (/home/strick/go/s):00153                  fcb   4,$4E      RBar
00C1 094C             (/home/strick/go/s):00154                  fdb   RBar-*+2
00C3 FF00             (/home/strick/go/s):00155                  fcb   $ff,$00    Blank
00C5 0000             (/home/strick/go/s):00156                  fdb   $0000
00C7 FF00             (/home/strick/go/s):00157                  fcb   $ff,$00    Blank
00C9 0000             (/home/strick/go/s):00158                  fdb   $0000
00CB 0444             (/home/strick/go/s):00159                  fcb   4,$44      PutGC
00CD 089F             (/home/strick/go/s):00160                  fdb   PutGC-*+2
00CF 0056             (/home/strick/go/s):00161                  fcb   0,$56      FFill
00D1 0986             (/home/strick/go/s):00162                  fdb   FFill-*+2
00D3 0250             (/home/strick/go/s):00163                  fcb   2,$50      Circle
00D5 0982             (/home/strick/go/s):00164                  fdb   Circle-*+2
00D7 0452             (/home/strick/go/s):00165                  fcb   4,$52      Ellipse
00D9 097E             (/home/strick/go/s):00166                  fdb   Ellipse-*+2
00DB 0C54             (/home/strick/go/s):00167                  fcb   12,$54     Arc
00DD 097A             (/home/strick/go/s):00168                  fdb   Arc-*+2
00DF 0250             (/home/strick/go/s):00169                  fcb   2,$50      Filled Circle (flag set to differentiate) $53
00E1 096F             (/home/strick/go/s):00170                  fdb   Filled-*+2
00E3 0452             (/home/strick/go/s):00171                  fcb   4,$52      Filled Ellipse (flag set to differentiate) $54
00E5 096B             (/home/strick/go/s):00172                  fdb   Filled-*+2
00E7 FF00             (/home/strick/go/s):00173                  fcb   $ff,$00    Blank
00E9 0000             (/home/strick/go/s):00174                  fdb   $0000
                      (/home/strick/go/s):00175         
00EB 2E2E2F434D44532F (/home/strick/go/s):00176         L0129    fcc   "../CMDS/"
00F3 6772666472F6     (/home/strick/go/s):00177         L0131    fcs   "grfdrv"
                      (/home/strick/go/s):00178         
                      (/home/strick/go/s):00179         ******************************
                      (/home/strick/go/s):00180         *
                      (/home/strick/go/s):00181         * Initialization routine
00F9 3460             (/home/strick/go/s):00182         Init     pshs  u,y        Preserve regs
00FB FC106E           (/home/strick/go/s):00183                  ldd   >WGlobal+G.GrfEnt     Grfdrv there?
00FE 102600A5         (/home/strick/go/s):00184                  lbne  L01DB      Yes, go on
                      (/home/strick/go/s):00185         * Setup window allocation bit map table
                      (/home/strick/go/s):00186                  IFNE  H6309
                      (/home/strick/go/s):00187                  clrd  
                      (/home/strick/go/s):00188                  clrw
                      (/home/strick/go/s):00189                  stq   >WGlobal+G.WUseTb     Set all 32 windows to be unused
                      (/home/strick/go/s):00190                  ELSE
0102 4F               (/home/strick/go/s):00191                  clra
0103 5F               (/home/strick/go/s):00192                  clrb
0104 FD11B5           (/home/strick/go/s):00193                  std   >GrfMem+gr00B5
0107 FD1071           (/home/strick/go/s):00194                  std   >WGlobal+G.WUseTb
010A FD1073           (/home/strick/go/s):00195                  std   >WGlobal+G.WUseTb+2
                      (/home/strick/go/s):00196                  ENDC
                      (/home/strick/go/s):00197         * Get grfdrv setup
010D 308CE3           (/home/strick/go/s):00198                  leax  <L0131,pc  Point to grfdrv module name
0110 1700B3           (/home/strick/go/s):00199                  lbsr  L01FB      Does it exist in memory?
0113 241C             (/home/strick/go/s):00200                  bcc   L0169      Yes, go on
0115 C1DD             (/home/strick/go/s):00201                  cmpb  #E$MNF     Module not found?
0117 260D             (/home/strick/go/s):00202                  bne   L0166      No, exit with error
0119 308CCF           (/home/strick/go/s):00203         L0159    leax  <L0129,pc  Point to full pathname
011C 1700C8           (/home/strick/go/s):00204                  lbsr  L021F      Load ok?
011F 2506             (/home/strick/go/s):00205                  bcs   L0167      No, exit with error
                      (/home/strick/go/s):00206         * Initialize grfdrv
0121 1700B3           (/home/strick/go/s):00207                  lbsr  L020C      Check grfdrv load address
0124 240B             (/home/strick/go/s):00208                  bcc   L0169      It's ok, go on
0126 43               (/home/strick/go/s):00209         L0166    coma             Set carry
0127 35E0             (/home/strick/go/s):00210         L0167    puls  y,u,pc     Return
                      (/home/strick/go/s):00211         
                      (/home/strick/go/s):00212         * Default palette color settings
0129 3F090012         (/home/strick/go/s):00213         L02F3    fcb   $3f,$09,$00,$12 Colors 0-3 & 8-11
012D 24362D1B         (/home/strick/go/s):00214         L02F7    fcb   $24,$36,$2d,$1b Colors 4-7 & 12-15
                      (/home/strick/go/s):00215         
                      (/home/strick/go/s):00216         * Execute Grfdrv's init routine
                      (/home/strick/go/s):00217         * Grfdrv will move itself over to task 1 & setup it's own memory map
0131 3460             (/home/strick/go/s):00218         L0169    pshs  y,u        Preserve regs
0133 CE1100           (/home/strick/go/s):00219                  ldu   #GrfMem    Point to GRFDRV global mem
0136 5F               (/home/strick/go/s):00220                  clrb             Get code to initialize grfdrv
0137 F71038           (/home/strick/go/s):00221                  stb   >WGlobal+g0038
013A ADA4             (/home/strick/go/s):00222                  jsr   ,y         Execute it
                      (/home/strick/go/s):00223         * unlink grfdrv from user map
013C 86C1             (/home/strick/go/s):00224                  lda   #Systm+Objct Get module type
013E 308CB2           (/home/strick/go/s):00225                  leax  <L0131,pc  Point to grfdrv name
0141 109E4A           (/home/strick/go/s):00226                  ldy   <D.SysPrc  Get system process dsc. ptr.
0144 31A840           (/home/strick/go/s):00227                  leay  <P$DATImg,y Point to the DAT image
0147 103F4E           (/home/strick/go/s):00228                  os9   F$FModul   Get module directory pointer to grfdrv
014A 6C47             (/home/strick/go/s):00229                  inc   MD$Link+1,u Increment it's link count
014C EE62             (/home/strick/go/s):00230                  ldu   2,s        Get pointer to Grfdrv module
014E 1700A6           (/home/strick/go/s):00231                  lbsr  L022F      Unlink it (it's already in system state)
0151 3506             (/home/strick/go/s):00232                  puls  d          Get pointer to Grfdrv entry
0153 841F             (/home/strick/go/s):00233                  anda  #$1F       Calculate new entry point
0155 8A40             (/home/strick/go/s):00234                  ora   #$40
0157 FD106E           (/home/strick/go/s):00235                  std   >WGlobal+G.GrfEnt     Save it
015A 3262             (/home/strick/go/s):00236                  leas  2,s        Purge stack
                      (/home/strick/go/s):00237                  IFNE  H6309
                      (/home/strick/go/s):00238                  oim   #$80,>WGlobal+G.BCFFlg Indicate that Grfdrv has been found?
                      (/home/strick/go/s):00239                  ELSE
015C B61024           (/home/strick/go/s):00240                  lda   >WGlobal+G.BCFFlg
015F 8A80             (/home/strick/go/s):00241                  ora   #$80
0161 B71024           (/home/strick/go/s):00242                  sta   >WGlobal+G.BCFFlg
                      (/home/strick/go/s):00243                  ENDC
                      (/home/strick/go/s):00244         * Initialize GFX tables
0164 CC02FF           (/home/strick/go/s):00245                  ldd   #$02FF     Get how many bytes we need
0167 103F28           (/home/strick/go/s):00246                  os9   F$SRqMem   Reserve it (note: only $2cf is used so far)
016A 25BA             (/home/strick/go/s):00247                  bcs   L0166      Can't get memory, exit
016C FF1075           (/home/strick/go/s):00248                  stu   >WGlobal+G.GfxTbl  Save the pointer to GFX tables (NOT IN GLOBAL!)
                      (/home/strick/go/s):00249                  IFNE  H6309
                      (/home/strick/go/s):00250                  tfr   d,w        Move mem size to W
                      (/home/strick/go/s):00251                  leay  <Nul0+2,pc Clear them all to NUL's
                      (/home/strick/go/s):00252                  tfm   y,u+
                      (/home/strick/go/s):00253                  stw   >WGlobal+G.PrWMPt     initialize previous window table pointer to 0
                      (/home/strick/go/s):00254                  ldu   #WGlobal+G.WrkWTb     Point to work window table
016F                  (/home/strick/go/s):00255         Nul0
                      (/home/strick/go/s):00256                  ldw   #$0040
                      (/home/strick/go/s):00257                  tfm   y,u+
                      (/home/strick/go/s):00258                  ELSE
016F 6FC0             (/home/strick/go/s):00259         ClrLp1   clr   ,u+ 
0171 830001           (/home/strick/go/s):00260                  subd  #$0001
0174 26F9             (/home/strick/go/s):00261                  bne   ClrLp1
0176 FD1022           (/home/strick/go/s):00262                  std   >WGlobal+G.PrWMPt     initialize previous window table pointer to 0
0179 CE1077           (/home/strick/go/s):00263                  ldu   #WGlobal+G.WrkWTb     Point to work window table
017C C640             (/home/strick/go/s):00264                  ldb   #$0040
017E 6FC0             (/home/strick/go/s):00265         ClrLp2   clr   ,u+
0180 5A               (/home/strick/go/s):00266                  decb
0181 26FB             (/home/strick/go/s):00267                  bne   ClrLp2 
                      (/home/strick/go/s):00268                  ENDC
                      (/home/strick/go/s):00269         * Set default palettes
0183 108E10C7         (/home/strick/go/s):00270                  ldy   #$10c7     Point to default palette register buffer
0187 10BF1019         (/home/strick/go/s):00271                  sty   >WGlobal+G.DefPal     Save it
                      (/home/strick/go/s):00272                  IFNE  H6309
                      (/home/strick/go/s):00273                  ldq   <L02F3,pc  Get 4 of default palettes
                      (/home/strick/go/s):00274                  stq   ,y         Save 0-3
                      (/home/strick/go/s):00275                  stq   8,y        Save 8-11
                      (/home/strick/go/s):00276                  ldq   <L02F7,pc  Get other 4 default palettes
                      (/home/strick/go/s):00277                  stq   4,y        Save 4-7
                      (/home/strick/go/s):00278                  stq   12,y       Save 12-15
                      (/home/strick/go/s):00279                  ELSE
018B EC8CA1           (/home/strick/go/s):00280                  ldd   L02F7+2,pc
018E ED26             (/home/strick/go/s):00281                  std   6,y
0190 ED2E             (/home/strick/go/s):00282                  std   14,y
0192 EC8C96           (/home/strick/go/s):00283                  ldd   L02F3+2,pc
0195 ED22             (/home/strick/go/s):00284                  std   2,y
0197 ED2A             (/home/strick/go/s):00285                  std   10,y
0199 EC8C8D           (/home/strick/go/s):00286                  ldd   L02F3,pc
019C EDA4             (/home/strick/go/s):00287                  std   ,y
019E ED28             (/home/strick/go/s):00288                  std   8,y
01A0 EC8C8A           (/home/strick/go/s):00289                  ldd   L02F7,pc
01A3 ED24             (/home/strick/go/s):00290                  std   4,y
01A5 ED2C             (/home/strick/go/s):00291                  std   12,y
                      (/home/strick/go/s):00292                  ENDC
01A7 EE62             (/home/strick/go/s):00293         L01DB    ldu   2,s        Get device static mem
01A9 10AEE4           (/home/strick/go/s):00294                  ldy   ,s         Get path descriptor pointer
01AC 30C838           (/home/strick/go/s):00295                  leax  CC3Parm,u  Point to parameters
01AF AFC82F           (/home/strick/go/s):00296                  stx   V.PrmStrt,u  Save it as param start pointer
01B2 AFC831           (/home/strick/go/s):00297                  stx   V.NxtPrm,u   Save it as pointer to next param
01B5 E6A82E           (/home/strick/go/s):00298                  ldb   IT.WND,y   Get window # from device dsc
01B8 E7C836           (/home/strick/go/s):00299                  stb   V.DWNum,u    Save it as window # in static mem
                      (/home/strick/go/s):00300         * If normal window # (0-31), mark as used in window bit table
                      (/home/strick/go/s):00301         * If high bit set (like /W's $FF), don't allocate, let SS.Open call use next
                      (/home/strick/go/s):00302         *  available one and let it mark which one it found
01BB 2B03             (/home/strick/go/s):00303                  bmi   L01F4      Skip ahead if /w type (Wildcard)
01BD 4F               (/home/strick/go/s):00304                  clra             Clear MSB of window #
01BE 8D54             (/home/strick/go/s):00305                  bsr   L024A      Allocate window in 32 bit window used table
01C0 170620           (/home/strick/go/s):00306         L01F4    lbsr  L07B0      Find empty window tbl entry & put in linked list
01C3 5F               (/home/strick/go/s):00307                  clrb             No error & return
01C4 35E0             (/home/strick/go/s):00308                  puls  u,y,pc
                      (/home/strick/go/s):00309         
                      (/home/strick/go/s):00310         * Link to module
01C6 327E             (/home/strick/go/s):00311         L01FB    leas  -2,s       Make buffer for current process dsc.
01C8 8D36             (/home/strick/go/s):00312                  bsr   L0238      Swap to system process
01CA 86C1             (/home/strick/go/s):00313                  lda   #Systm+Objct Link module
01CC 103F00           (/home/strick/go/s):00314                  os9   F$Link
01CF 8D3B             (/home/strick/go/s):00315                  bsr   L0244      Swap back to current process
01D1 2521             (/home/strick/go/s):00316                  bcs   L022C      Return if error
01D3 8D02             (/home/strick/go/s):00317                  bsr   L020C      Check load address
01D5 201D             (/home/strick/go/s):00318                  bra   L022C      Return
                      (/home/strick/go/s):00319         
                      (/home/strick/go/s):00320         * Check grfdrv load/link address
01D7 1F30             (/home/strick/go/s):00321         L020C    tfr   u,d        Move module header ptr to D
                      (/home/strick/go/s):00322                  IFNE  H6309
                      (/home/strick/go/s):00323                  andd  #$1FFF     Make sure on even 8K boundary
                      (/home/strick/go/s):00324                  ELSE
01D9 841F             (/home/strick/go/s):00325                  anda  #$1F
01DB 2606             (/home/strick/go/s):00326                  bne   L0217
01DD C4FF             (/home/strick/go/s):00327                  andb  #$FF
                      (/home/strick/go/s):00328                  ENDC
01DF 2602             (/home/strick/go/s):00329                  bne   L0217      It's not, exit with Bad Page Address error
01E1 5F               (/home/strick/go/s):00330                  clrb             No error, exit
01E2 39               (/home/strick/go/s):00331                  rts   
                      (/home/strick/go/s):00332         
01E3 53               (/home/strick/go/s):00333         L0217    comb             Exit with Bad Page Address error
01E4 C6D2             (/home/strick/go/s):00334                  ldb   #E$BPAddr
01E6 39               (/home/strick/go/s):00335                  rts   
                      (/home/strick/go/s):00336         
                      (/home/strick/go/s):00337         * Load a module
01E7 327E             (/home/strick/go/s):00338         L021F    leas  -2,s       Make a buffer for current process ptr
01E9 8D15             (/home/strick/go/s):00339                  bsr   L0238      Switch to system process descriptor
01EB 86C1             (/home/strick/go/s):00340                  lda   #Systm+Objct Load module
01ED DE50             (/home/strick/go/s):00341                  ldu   <D.Proc
01EF 103F01           (/home/strick/go/s):00342                  os9   F$Load
01F2 8D18             (/home/strick/go/s):00343         L022A    bsr   L0244      Swap back to current process
01F4 3262             (/home/strick/go/s):00344         L022C    leas  2,s        Purge stack & return
01F6 39               (/home/strick/go/s):00345                  rts   
                      (/home/strick/go/s):00346         
                      (/home/strick/go/s):00347         * Unlink a module
01F7 327E             (/home/strick/go/s):00348         L022F    leas  -2,s       Make buffer for current process ptr
01F9 8D05             (/home/strick/go/s):00349                  bsr   L0238      Switch to system process dsc.
01FB 103F02           (/home/strick/go/s):00350                  os9   F$UnLink   Unlink module
01FE 20F2             (/home/strick/go/s):00351                  bra   L022A      Return
                      (/home/strick/go/s):00352         
                      (/home/strick/go/s):00353         * Switch to system process descriptor
0200 3406             (/home/strick/go/s):00354         L0238    pshs  d          Preserve D
0202 DC50             (/home/strick/go/s):00355                  ldd   <D.Proc    Get current process dsc. ptr
0204 ED64             (/home/strick/go/s):00356                  std   4,s        Preserve on stack
0206 DC4A             (/home/strick/go/s):00357                  ldd   <D.SysPrc  Get system process dsc. ptr
0208 DD50             (/home/strick/go/s):00358                  std   <D.Proc    Make it the current process
020A 3586             (/home/strick/go/s):00359                  puls  d,pc       Restore D & return
                      (/home/strick/go/s):00360         
                      (/home/strick/go/s):00361         * Switch back to current process
020C 3406             (/home/strick/go/s):00362         L0244    pshs  d          Preserve D
020E EC64             (/home/strick/go/s):00363                  ldd   4,s        Get current process ptr
0210 DD50             (/home/strick/go/s):00364                  std   <D.Proc    Make it the current process
0212 3586             (/home/strick/go/s):00365                  puls  d,pc       Restore D & return
                      (/home/strick/go/s):00366         
                      (/home/strick/go/s):00367         * Allocate a window
                      (/home/strick/go/s):00368         * Entry: D=Window # to allocate
0214 3446             (/home/strick/go/s):00369         L024A    pshs  d,u        Preserve U
0216 8DE8             (/home/strick/go/s):00370                  bsr   L0238      Swap to system process dsc
0218 8D23             (/home/strick/go/s):00371                  bsr   L0279      Get pointer to window allocation table
021A 103F13           (/home/strick/go/s):00372                  os9   F$AllBit   Allocate it
021D 8DED             (/home/strick/go/s):00373         L0255    bsr   L0244      Swap back to current process
021F 3262             (/home/strick/go/s):00374                  leas  2,s        Purge stack
0221 35C0             (/home/strick/go/s):00375                  puls  u,pc       Restore U & return
                      (/home/strick/go/s):00376         
                      (/home/strick/go/s):00377         * Search for a free window
                      (/home/strick/go/s):00378         * Entry: D=Starting window #
0223 3446             (/home/strick/go/s):00379         L025B    pshs  d,u        Preserve U
0225 8DD9             (/home/strick/go/s):00380                  bsr   L0238      Swap to system process dsc
0227 8D14             (/home/strick/go/s):00381                  bsr   L0279      Get ptr to window map
0229 3304             (/home/strick/go/s):00382                  leau  4,x        Point to end of map
022B 103F12           (/home/strick/go/s):00383                  os9   F$SchBit   Find it
022E 20ED             (/home/strick/go/s):00384                  bra   L0255      Return with it
                      (/home/strick/go/s):00385         
                      (/home/strick/go/s):00386         * De-Allocate a window
                      (/home/strick/go/s):00387         * Entry: D=Window # to delete
0230 2B12             (/home/strick/go/s):00388         L026A    bmi   L0282      Illegal window #
0232 3446             (/home/strick/go/s):00389                  pshs  d,u        Preserve U
0234 8DCA             (/home/strick/go/s):00390                  bsr   L0238      Swap to system process dsc
0236 8D05             (/home/strick/go/s):00391                  bsr   L0279      Get ptr to window map
0238 103F14           (/home/strick/go/s):00392                  os9   F$DelBit   Delete it & return
023B 20E0             (/home/strick/go/s):00393                  bra   L0255
                      (/home/strick/go/s):00394         
                      (/home/strick/go/s):00395         * Point to window allocation table
023D 8E1071           (/home/strick/go/s):00396         L0279    ldx   #WGlobal+G.WUseTb  Point to window bit table
0240 108E0001         (/home/strick/go/s):00397                  ldy   #1         Get # windows to allocate/de-allocate
0244 39               (/home/strick/go/s):00398         L0282    rts              Return
                      (/home/strick/go/s):00399         
                      (/home/strick/go/s):00400         ******************************
                      (/home/strick/go/s):00401         * Terminate routine
                      (/home/strick/go/s):00402         * Entry: U=Static mem ptr
                      (/home/strick/go/s):00403         *        Y=Path dsc. ptr
0245                  (/home/strick/go/s):00404         Term
                      (/home/strick/go/s):00405         * Next two lines added by Boisy on 08/22/2007
                      (/home/strick/go/s):00406         * This test is necessary to prevent a crash in the case that grfdrv cannot be
                      (/home/strick/go/s):00407         * loaded.  If grfdrv isn't properly initialized, then the high bit of BCFFlg will
                      (/home/strick/go/s):00408         * be clear.  Without this check, the test for Wt.STbl,y to be equal to $FF would fail,
                      (/home/strick/go/s):00409         * and a DWEnd would be attempted.  Since grfdrv's init routine sets Wt.STBl,y to $FFFF
                      (/home/strick/go/s):00410         * for each window table entry, this wasn't getting done, and the call to DWEnd would
                      (/home/strick/go/s):00411         * be vectored to grfdrv, which wasn't to be found!
0245 7D1024           (/home/strick/go/s):00412                  tst   WGlobal+G.BCFFlg was Grfdrv found? (hi bit set if so)
0248 2A6F             (/home/strick/go/s):00413                  bpl   TermEx           if not, no nothing got initialized, so leave quietly
                      (/home/strick/go/s):00414         *
024A 4F               (/home/strick/go/s):00415                  clra             Get start window # for de-allocate
024B E6C836           (/home/strick/go/s):00416                  ldb   V.DWNum,u    Get device window # from static mem
024E 3460             (/home/strick/go/s):00417                  pshs  u,y        Preserve static mem & path dsc. ptrs
0250 8DDE             (/home/strick/go/s):00418                  bsr   L026A      De-allocate it from window map
0252 17049A           (/home/strick/go/s):00419                  lbsr  L06AE      Get window table pointer
0255 A630             (/home/strick/go/s):00420                  lda   Wt.STbl,y  Get MSB of screen table ptr
0257 81FF             (/home/strick/go/s):00421                  cmpa  #$FF       Set?
0259 2604             (/home/strick/go/s):00422                  bne   L0298      Yes, go on
025B A731             (/home/strick/go/s):00423                  sta   Wt.STbl+1,y Get rid of table ptr
025D 200D             (/home/strick/go/s):00424                  bra   L02A5      Go on
                      (/home/strick/go/s):00425         
                      (/home/strick/go/s):00426         * Send DWEnd to grfdrv
025F 10AEE4           (/home/strick/go/s):00427         L0298    ldy   ,s         Get path dsc. ptr
0262 EE62             (/home/strick/go/s):00428                  ldu   2,s        Get static mem ptr
0264 C608             (/home/strick/go/s):00429                  ldb   #$08       Get callcode for DWEnd
0266 E7C837           (/home/strick/go/s):00430                  stb   V.CallCde,u  Save it in static mem area
0269 1701F1           (/home/strick/go/s):00431                  lbsr  L0452      Go do it
                      (/home/strick/go/s):00432         * Clear out device static memory
026C 3560             (/home/strick/go/s):00433         L02A5    puls  u,y        Restore static mem & path dsc. ptrs
026E 30C835           (/home/strick/go/s):00434                  leax  V.WinNum,u   Point to window entry #
                      (/home/strick/go/s):00435                  IFNE  H6309
                      (/home/strick/go/s):00436                  leay  <Nul1+2,pc Point to NUL byte
0271                  (/home/strick/go/s):00437         Nul1     
                      (/home/strick/go/s):00438                  ldw   #CC3DSiz-V.WinNum     Size of block to clear
                      (/home/strick/go/s):00439                  tfm   y,x+
                      (/home/strick/go/s):00440                  ELSE
0271 CC00CB           (/home/strick/go/s):00441                  ldd   #CC3DSiz-V.WinNum
0274 A780             (/home/strick/go/s):00442         Lp4      sta   ,x+
0276 5A               (/home/strick/go/s):00443                  decb
0277 26FB             (/home/strick/go/s):00444                  bne   Lp4
                      (/home/strick/go/s):00445                  ENDC
0279 6FC81E           (/home/strick/go/s):00446                  clr   V.InfVld,u   Clear 'rest of info valid' flag
                      (/home/strick/go/s):00447         * Scan window tables for a valid window
027C 8E1290           (/home/strick/go/s):00448                  ldx   #WinBase   Point to base of window tables
027F CC2040           (/home/strick/go/s):00449                  ldd   #MaxWind*256+Wt.Siz     # of window tables & Size of each table
     0282             (/home/strick/go/s):00450         L02B9    equ   *
                      (/home/strick/go/s):00451                  IFNE  H6309
                      (/home/strick/go/s):00452                  ldw   Wt.STbl,x  Get screen table ptr
                      (/home/strick/go/s):00453                  cmpe  #$FF       MSB indicate unused?
                      (/home/strick/go/s):00454                  bne   L02F1      No, exit without error
                      (/home/strick/go/s):00455         * Just a guess, but if 2nd byte is $FE with 1st being $FF, could be a flag
                      (/home/strick/go/s):00456         *  for that this is a "copy" of a window to do overlapped device windows
                      (/home/strick/go/s):00457                  cmpf  #$FF       LSB indicate unused?
                      (/home/strick/go/s):00458                  bne   L02F1      No, exit without error 
                      (/home/strick/go/s):00459                  ELSE
0282 3406             (/home/strick/go/s):00460                  pshs  d
0284 EC10             (/home/strick/go/s):00461                  ldd   Wt.STbl,x
0286 FD11B5           (/home/strick/go/s):00462                  std   >GrfMem+gr00B5
0289 81FF             (/home/strick/go/s):00463                  cmpa  #$FF
028B 262E             (/home/strick/go/s):00464                  bne   L02F1B
028D C1FF             (/home/strick/go/s):00465                  cmpb  #$FF
028F 262A             (/home/strick/go/s):00466                  bne   L02F1B      No, exit without error
0291 3506             (/home/strick/go/s):00467                  puls  d 
                      (/home/strick/go/s):00468                  ENDC
0293 3A               (/home/strick/go/s):00469                  abx              Point to next window table
0294 4A               (/home/strick/go/s):00470                  deca             Decrement counter
0295 26EB             (/home/strick/go/s):00471                  bne   L02B9      Do until all 32 entries are checked
                      (/home/strick/go/s):00472         * All windows are unallocated, terminate GRFDRV
0297 1F12             (/home/strick/go/s):00473                  tfr   x,y        Move to proper register again
0299 C602             (/home/strick/go/s):00474                  ldb   #$02       get grfdrv terminate code
029B 17009B           (/home/strick/go/s):00475                  lbsr  L0101      go do it
029E FC106E           (/home/strick/go/s):00476                  ldd   >WGlobal+G.GrfEnt     get grfdrv address
02A1 5F               (/home/strick/go/s):00477                  clrb             Make it even page
02A2 1F03             (/home/strick/go/s):00478                  tfr   d,u        Move to proper reg for Unlink
02A4 103F02           (/home/strick/go/s):00479                  os9   F$UnLink   Unlink GRFDRV
02A7 2517             (/home/strick/go/s):00480                  bcs   L02F2      If error unlinking, exit
                      (/home/strick/go/s):00481                  IFNE  H6309
                      (/home/strick/go/s):00482                  clrd  
                      (/home/strick/go/s):00483                  ELSE
02A9 4F               (/home/strick/go/s):00484                  clra  
02AA 5F               (/home/strick/go/s):00485                  clrb  
                      (/home/strick/go/s):00486                  ENDC
02AB FD106E           (/home/strick/go/s):00487                  std   >WGlobal+G.GrfEnt     GRFDRV address to non-existant
02AE FE1075           (/home/strick/go/s):00488                  ldu   >WGlobal+G.GfxTbl     Get ptr to gfx tables
02B1 CC02FF           (/home/strick/go/s):00489                  ldd   #$02FF     Size of graphics tables
02B4 103F29           (/home/strick/go/s):00490                  os9   F$SRtMem   Return graphics table memory to system
02B7 2507             (/home/strick/go/s):00491                  bcs   L02F2      If error, exit with it
02B9 5F               (/home/strick/go/s):00492         TermEx   clrb  
02BA 39               (/home/strick/go/s):00493                  rts   
                      (/home/strick/go/s):00494         
                      (/home/strick/go/s):00495                  IFEQ  H6309
02BB 3506             (/home/strick/go/s):00496         L02F1B   puls  d
                      (/home/strick/go/s):00497                  ENDC
02BD 5F               (/home/strick/go/s):00498         L02F1    clrb             No error & return
02BE 1F12             (/home/strick/go/s):00499                  tfr   x,y        Move to proper register
02C0 39               (/home/strick/go/s):00500         L02F2    rts   
                      (/home/strick/go/s):00501         
                      (/home/strick/go/s):00502         ****************************
                      (/home/strick/go/s):00503         * Main Entry point from VTIO
                      (/home/strick/go/s):00504         * Entry: U=Device memory pointer
                      (/home/strick/go/s):00505         *        Y=Path descriptor pointer
                      (/home/strick/go/s):00506         
02C1 16FE35           (/home/strick/go/s):00507         entry    lbra  Init       Initialization
02C4 2011             (/home/strick/go/s):00508                  bra   Write      Write
02C6 12               (/home/strick/go/s):00509                  nop   
02C7 160842           (/home/strick/go/s):00510                  lbra  GetStt     Get status
02CA 160907           (/home/strick/go/s):00511                  lbra  SetStt     Set status
02CD 16FF75           (/home/strick/go/s):00512                  lbra  Term       Terminate
02D0 160A43           (/home/strick/go/s):00513                  lbra  L0C68      Window special processing
                      (/home/strick/go/s):00514         
02D3 53               (/home/strick/go/s):00515         L0A96    comb             Set error flag
02D4 C6D0             (/home/strick/go/s):00516                  ldb   #E$UnkSvc  Unknown service error
02D6 39               (/home/strick/go/s):00517                  rts   
                      (/home/strick/go/s):00518         
                      (/home/strick/go/s):00519         ****************************
                      (/home/strick/go/s):00520         * Write routine: Optomized for normal text
                      (/home/strick/go/s):00521         * Entry: A=Char to write
                      (/home/strick/go/s):00522         *        U=Device memory pointer
                      (/home/strick/go/s):00523         *        Y=Path descriptor pointer
02D7 C63A             (/home/strick/go/s):00524         Write    ldb   #$3a       get grfdrv function for Alpha put as default
02D9 8120             (/home/strick/go/s):00525                  cmpa  #C$SPAC    Space or higher?
02DB 2453             (/home/strick/go/s):00526                  bhs   L03A1      Yes, do alpha put
02DD 811B             (/home/strick/go/s):00527                  cmpa  #$1B       Escape code?
02DF 263C             (/home/strick/go/s):00528                  bne   L0347      No, keep checking
02E1 E6D82F           (/home/strick/go/s):00529                  ldb   [V.PrmStrt,u] get first parameter from parameter area
02E4 C155             (/home/strick/go/s):00530                  cmpb  #$55       Past maximum supported escape code?
02E6 22EB             (/home/strick/go/s):00531                  bhi   L0A96      Yes, exit with error
02E8 C020             (/home/strick/go/s):00532                  subb  #$20       Adjust it down for table offset
02EA 2BE7             (/home/strick/go/s):00533                  bmi   L0A96      Below minimum supported code, exit with error
02EC 58               (/home/strick/go/s):00534                  lslb             Adjust for 4 bytes/entry
02ED 58               (/home/strick/go/s):00535                  lslb  
02EE 308DFD21         (/home/strick/go/s):00536                  leax  >L0027,pc  Point to ESC code vector table
02F2 3A               (/home/strick/go/s):00537                  abx              Point to 4 byte entry
                      (/home/strick/go/s):00538                  IFNE  H6309
                      (/home/strick/go/s):00539                  ldq   ,x         A=# param bytes,B=GRFDRV code,W=vector offset
                      (/home/strick/go/s):00540                  ELSE
02F3 EC02             (/home/strick/go/s):00541                  ldd   2,x
02F5 FD11B5           (/home/strick/go/s):00542                  std   >GrfMem+gr00B5
02F8 EC84             (/home/strick/go/s):00543                  ldd   ,x
                      (/home/strick/go/s):00544                  ENDC
02FA E7C837           (/home/strick/go/s):00545                  stb   V.CallCde,u  Save GRFDRV code in Static mem (need for L00F7)
02FD 4D               (/home/strick/go/s):00546                  tsta             Any parameter bytes needed?
02FE 2712             (/home/strick/go/s):00547                  beq   L0339      No, just go do function
0300 2BD1             (/home/strick/go/s):00548                  bmi   L0A96      $FF=Empty, exit with error
0302 A7C82C           (/home/strick/go/s):00549                  sta   V.ParmCnt,u  Preserve for VTIO to get the rest
     0305             (/home/strick/go/s):00550         L032F    equ   *
                      (/home/strick/go/s):00551                  IFNE  H6309
                      (/home/strick/go/s):00552                  addr  w,x        Point to vector
                      (/home/strick/go/s):00553                  ELSE
0305 3404             (/home/strick/go/s):00554                  pshs  b
0307 EC02             (/home/strick/go/s):00555                  ldd   2,x
0309 308B             (/home/strick/go/s):00556                  leax  d,x
030B 3504             (/home/strick/go/s):00557                  puls  b
                      (/home/strick/go/s):00558                  ENDC
030D AFC82D           (/home/strick/go/s):00559                  stx   V.ParmVct,u  Save vector for VTIO to call
0310 4F               (/home/strick/go/s):00560                  clra             No error & return so VTIO can get rest of parms
0311 39               (/home/strick/go/s):00561                  rts   
                      (/home/strick/go/s):00562         
                      (/home/strick/go/s):00563         * No param calls go here
     0312             (/home/strick/go/s):00564         L0339    equ   *
                      (/home/strick/go/s):00565                  IFNE  H6309
                      (/home/strick/go/s):00566                  jmp   w,x        Go execute function
                      (/home/strick/go/s):00567                  ELSE
0312 3406             (/home/strick/go/s):00568                  pshs  d
0314 FC11B5           (/home/strick/go/s):00569                  ldd   >GrfMem+gr00B5
0317 308B             (/home/strick/go/s):00570                  leax  d,x
0319 3506             (/home/strick/go/s):00571                  puls  d
031B 6E84             (/home/strick/go/s):00572                  jmp   ,x 
                      (/home/strick/go/s):00573                  ENDC
                      (/home/strick/go/s):00574         
                      (/home/strick/go/s):00575         * Check special display codes
031D 811F             (/home/strick/go/s):00576         L0347    cmpa  #$1F       $1F codes?
031F 2774             (/home/strick/go/s):00577                  beq   L038D      Yes, go process them
0321 8102             (/home/strick/go/s):00578         L034D    cmpa  #$02       Cursor X,Y?
0323 2605             (/home/strick/go/s):00579                  bne   L0356      No, check next
0325 308C57           (/home/strick/go/s):00580                  leax  <L036E,pc  Point to Cursor X,Y routine
0328 204D             (/home/strick/go/s):00581                  bra   L0362      Let VTIO get rest of parms
                      (/home/strick/go/s):00582         
032A 8105             (/home/strick/go/s):00583         L0356    cmpa  #$05       Cursor On/Off?
032C 276E             (/home/strick/go/s):00584                  beq   L0396      Go to cursor on/off routine
032E C63C             (/home/strick/go/s):00585         L039F    ldb   #$3C       Otherwise, GrfDrv function: Control codes
0330 3406             (/home/strick/go/s):00586         L03A1    pshs  d          Preserve write char & GrfDrv function code
0332 170389           (/home/strick/go/s):00587                  lbsr  L06A0      Get window table ptr & verify it
0335 253B             (/home/strick/go/s):00588                  bcs   UnDef      Couldn't, exit with Window Undefined error
0337 3506             (/home/strick/go/s):00589                  puls  d          Get back write char & GrfDrv function code
                      (/home/strick/go/s):00590         
                      (/home/strick/go/s):00591         * Execute GrfDrv
                      (/home/strick/go/s):00592         * Entry: @ L0101 : B=Callcode for GRFDRV
                      (/home/strick/go/s):00593         * All regs are thrown onto stack for 'fake' RTI done by [D.Flip1] (in vector
                      (/home/strick/go/s):00594         * page RAM at the top of OS9p1) after switching to System Task #1 (GRFDRV)
                      (/home/strick/go/s):00595         * Added protection for regE; RG 2003/10/15
0339 BE106E           (/home/strick/go/s):00596         L0101    ldx   >WGlobal+G.GrfEnt     Get GrfDrv entry address
033C 1A80             (/home/strick/go/s):00597                  orcc  #Entire    Set up 'pull all regs' for RTI
                      (/home/strick/go/s):00598                  IFNE  H6309
                      (/home/strick/go/s):00599                  pshsw
                      (/home/strick/go/s):00600                  tfr   cc,e
                      (/home/strick/go/s):00601                  ste   >WGlobal+g0005
                      (/home/strick/go/s):00602                  pulsw
                      (/home/strick/go/s):00603                  ELSE
033E 3406             (/home/strick/go/s):00604                  pshs  d
0340 FC11B5           (/home/strick/go/s):00605                  ldd   >GrfMem+gr00B5
0343 FD11B5           (/home/strick/go/s):00606                  std   >GrfMem+gr00B5
0346 1FA8             (/home/strick/go/s):00607                  tfr   cc,a
0348 B71005           (/home/strick/go/s):00608                  sta   >WGlobal+g0005
034B 3506             (/home/strick/go/s):00609                  puls  d
                      (/home/strick/go/s):00610                  ENDC
034D 1A50             (/home/strick/go/s):00611                  orcc  #IntMasks  Disable IRQ's
034F 10FF1007         (/home/strick/go/s):00612                  sts   >WGlobal+G.GrfStk     Save stack ptr for GRFDRV
0353 10DEA7           (/home/strick/go/s):00613                  lds   <D.CCStk   Get new stack ptr
                      (/home/strick/go/s):00614         
                      (/home/strick/go/s):00615         * Dump all registers to stack for fake RTI
0356 34F8             (/home/strick/go/s):00616                  pshs  dp,x,y,u,pc dump all registers to stack for fake RTI
                      (/home/strick/go/s):00617                  IFNE  H6309
                      (/home/strick/go/s):00618                  pshsw           no register to push for 6809
                      (/home/strick/go/s):00619                  lde   >WGlobal+g0005   get back regDP 
                      (/home/strick/go/s):00620                  ENDC
0358 3407             (/home/strick/go/s):00621                  pshs  cc,d
035A AF6A             (/home/strick/go/s):00622                  stx   R$PC,s     Save grfdrv entry address as the PC on stack
                      (/home/strick/go/s):00623                  IFNE  H6309
                      (/home/strick/go/s):00624                  ste   R$CC,s     Save CC bitE into CC on stack
                      (/home/strick/go/s):00625                  ste   >WGlobal+G.GfBusy     Flag grfdrv busy
                      (/home/strick/go/s):00626                  ELSE
035C B61005           (/home/strick/go/s):00627                  lda   >WGlobal+g0005
035F A7E4             (/home/strick/go/s):00628                  sta   R$CC,s
0361 B71002           (/home/strick/go/s):00629                  sta   >WGlobal+G.GfBusy     Flag grfdrv busy 
0364 A661             (/home/strick/go/s):00630                  lda   R$A,s      may not be needed
                      (/home/strick/go/s):00631                  ENDC
0366 6E9F00AB         (/home/strick/go/s):00632                  jmp   [>D.Flip1] Flip to GRFDRV and execute it
                      (/home/strick/go/s):00633         
                      (/home/strick/go/s):00634         * GRFDRV will execute function, then call [D.Flip0] to switch back to here. It
                      (/home/strick/go/s):00635         * will use an RTS to return to the code here that called L00F7 or L0101 in the
                      (/home/strick/go/s):00636         * first place. Only SP,PC & CC are set up- ALL OTHER REGISTERS MAY BE MODIFIED
                      (/home/strick/go/s):00637         
                      (/home/strick/go/s):00638         * Entry point for GRFDRV for most GFX commands
036A BE100C           (/home/strick/go/s):00639         L00F7    ldx   >WGlobal+G.CurDvM     Get current device memory ptr
036D E68837           (/home/strick/go/s):00640                  ldb   V.CallCde,x  Get callcode from it
0370 20C7             (/home/strick/go/s):00641                  bra   L0101      Go call GRFDRV
                      (/home/strick/go/s):00642         
0372 3262             (/home/strick/go/s):00643         UnDef    leas  2,s        Eat stack
0374 C6C4             (/home/strick/go/s):00644         UnDef2   ldb   #E$WUndef  Undefined Window error
0376 39               (/home/strick/go/s):00645                  rts   
                      (/home/strick/go/s):00646         
                      (/home/strick/go/s):00647         * Set counts up for CC3/TC9IO to get rest of needed parms
0377 A7C82C           (/home/strick/go/s):00648         L0362    sta   V.ParmCnt,u  Store # bytes to get for params in static mem
037A AFC82D           (/home/strick/go/s):00649                  stx   V.ParmVct,u  Store vector to function in static mem
037D 4F               (/home/strick/go/s):00650                  clra             No error & return so VTIO can get rest of parms
037E 39               (/home/strick/go/s):00651                  rts   
                      (/home/strick/go/s):00652         
                      (/home/strick/go/s):00653         * Process CurXY after parms are gotten
                      (/home/strick/go/s):00654         * Entry: U=Static mem ptr
037F 3440             (/home/strick/go/s):00655         L036E    pshs  u          Save static mem ptr (in case DWSet modifies U)
0381 17033A           (/home/strick/go/s):00656                  lbsr  L06A0      Get window table ptr
0384 3540             (/home/strick/go/s):00657                  puls  u          Get back static mem ptr
0386 25EC             (/home/strick/go/s):00658                  bcs   UnDef2     Couldn't, exit with Window undefined error
0388 ECD82F           (/home/strick/go/s):00659                  ldd   [V.PrmStrt,u] get the coords requested
038B B71147           (/home/strick/go/s):00660         L0380    sta   >GrfMem+gr0047     Save X coord
038E F71149           (/home/strick/go/s):00661                  stb   >GrfMem+gr0049     Save Y coord
0391 C642             (/home/strick/go/s):00662                  ldb   #$42       GrfDrv function: Goto X/Y
0393 20A4             (/home/strick/go/s):00663         L038A    bra   L0101      Execute Grfdrv
                      (/home/strick/go/s):00664         
                      (/home/strick/go/s):00665         * Process $1f display codes
0395 A6D82F           (/home/strick/go/s):00666         L038D    lda   [V.PrmStrt,u] get type of $1f function
0398 C640             (/home/strick/go/s):00667                  ldb   #$40       GrfDrv function: $1F codes
039A 2094             (/home/strick/go/s):00668                  bra   L03A1      Go get window tbl ptr & execute GRFDRV
                      (/home/strick/go/s):00669         
                      (/home/strick/go/s):00670         * Cursor on/off
039C A6D82F           (/home/strick/go/s):00671         L0396    lda   [V.PrmStrt,u] get cursor on/off parameter byte
039F C63E             (/home/strick/go/s):00672                  ldb   #$3E       GrfDrv function: Cursor on/off
03A1 208D             (/home/strick/go/s):00673                  bra   L03A1      Go get window tbl ptr & execute GRFDRV
                      (/home/strick/go/s):00674         
                      (/home/strick/go/s):00675         ******************************
                      (/home/strick/go/s):00676         * DWSet entry point
                      (/home/strick/go/s):00677         * Entry: U=Device static mem pointer
                      (/home/strick/go/s):00678         *        Y=Path descriptor
                      (/home/strick/go/s):00679         *        X=Param pointer
03A3 3460             (/home/strick/go/s):00680         DWSet    pshs  y,u        preserve static mem & path descriptor pointers
03A5 170347           (/home/strick/go/s):00681                  lbsr  L06AE      get window table pointer for current window
                      (/home/strick/go/s):00682         * Window already defined?
03A8 A630             (/home/strick/go/s):00683                  lda   Wt.STbl,y  Get MSB of screen table ptr
03AA 81FF             (/home/strick/go/s):00684                  cmpa  #$FF       Already defined?
03AC 2705             (/home/strick/go/s):00685                  beq   L03BF      No, skip ahead
03AE 53               (/home/strick/go/s):00686                  comb             Exit with Window Already Defined error
03AF C6B8             (/home/strick/go/s):00687                  ldb   #E$WADef   get window already defined error
03B1 35E0             (/home/strick/go/s):00688                  puls  u,y,pc     Restore regs & return
                      (/home/strick/go/s):00689         
                      (/home/strick/go/s):00690         * Check screen type
03B3 A680             (/home/strick/go/s):00691         L03BF    lda   ,x+        Get screen type from parameters
03B5 17046D           (/home/strick/go/s):00692                  lbsr  L07E0      Convert it to internal code
03B8 2405             (/home/strick/go/s):00693                  bcc   L03CB      it's good, skip ahead
03BA 3560             (/home/strick/go/s):00694                  puls  u,y        Exit with Illegal Window Definition error
03BC 16032C           (/home/strick/go/s):00695                  lbra  L0697      return illegal window definition error
                      (/home/strick/go/s):00696         
                      (/home/strick/go/s):00697         * Legal window type, make sure coords & size are at least reasonable
03BF F71160           (/home/strick/go/s):00698         L03CB    stb   >GrfMem+Gr.STYMk     Save screen type in Grfdrv Mem
03C2 8D5A             (/home/strick/go/s):00699                  bsr   L0413      Move coord's, size & pals. to window table
03C4 2404             (/home/strick/go/s):00700                  bcc   L03D7      Legal values, skip ahead
03C6 C6C3             (/home/strick/go/s):00701                  ldb   #E$IWDef   Illegal Window Definition
03C8 35E0             (/home/strick/go/s):00702                  puls  pc,u,y     restore regs & return with error
                      (/home/strick/go/s):00703         
                      (/home/strick/go/s):00704         * Coordinates & size are within 0-127, continue
03CA C1FF             (/home/strick/go/s):00705         L03D7    cmpb  #$FF       is it same screen?
03CC 2715             (/home/strick/go/s):00706                  beq   L03F2      yes, don't bother getting border color
03CE 308C06           (/home/strick/go/s):00707                  leax  <L03E5,pc  point to processor for border color
03D1 8601             (/home/strick/go/s):00708                  lda   #$01       get # bytes to get
03D3 3560             (/home/strick/go/s):00709                  puls  u,y        purge stack
03D5 20A0             (/home/strick/go/s):00710                  bra   L0362      let VTIO get it for me
                      (/home/strick/go/s):00711         
                      (/home/strick/go/s):00712         * If the window was not on the current screen grab the optional border color
03D7 3460             (/home/strick/go/s):00713         L03E5    pshs  u,y        Preserve static mem & path dsc. ptrs
03D9 170313           (/home/strick/go/s):00714                  lbsr  L06AE      get window table pointer into Y
03DC A684             (/home/strick/go/s):00715                  lda   ,x         get border color
03DE B7115A           (/home/strick/go/s):00716                  sta   >GrfMem+gr005A     save it in grfdrv mem
03E1 2007             (/home/strick/go/s):00717                  bra   L03F9      continue processing
                      (/home/strick/go/s):00718         
                      (/home/strick/go/s):00719         * Current displayed screen or current process screen goes here
03E3 AEE4             (/home/strick/go/s):00720         L03F2    ldx   ,s         get path descriptor pointer
03E5 1703AC           (/home/strick/go/s):00721                  lbsr  L075C      check validity of screen table
03E8 252B             (/home/strick/go/s):00722                  bcs   L0408      error, return
                      (/home/strick/go/s):00723         * all parameters are moved, let grfdrv do the rest
03EA 17FF7D           (/home/strick/go/s):00724         L03F9    lbsr  L00F7      let grfdrv take over
03ED 2528             (/home/strick/go/s):00725                  bcs   L040A      grfdrv error, return
03EF EE62             (/home/strick/go/s):00726                  ldu   2,s        get static mem pointer
03F1 6CC81E           (/home/strick/go/s):00727                  inc   V.InfVld,u   Set flag to indicate rest of static mem valid
                      (/home/strick/go/s):00728                  IFNE  H6309
                      (/home/strick/go/s):00729                  ldw   >WGlobal+G.CurDev     Get current window ptr
                      (/home/strick/go/s):00730                  ELSE
03F4 10BE1020         (/home/strick/go/s):00731                  ldy   >WGlobal+G.CurDev
03F8 10BF11B5         (/home/strick/go/s):00732                  sty   >GrfMem+gr00B5
                      (/home/strick/go/s):00733                  ENDC
03FC 2708             (/home/strick/go/s):00734                  beq   Nowin      None, skip ahead
                      (/home/strick/go/s):00735                  IFNE  H6309
                      (/home/strick/go/s):00736                  lda   >V.ULCase,w  Get special keyflags
                      (/home/strick/go/s):00737                  ELSE
03FE A6A90021         (/home/strick/go/s):00738                  lda   >V.ULCase,y
                      (/home/strick/go/s):00739                  ENDC
0402 A7C90021         (/home/strick/go/s):00740                  sta   >V.ULCase,u   Save in new window
0406 10AEE4           (/home/strick/go/s):00741         Nowin    ldy   ,s         get path descriptor pointer
0409 8D36             (/home/strick/go/s):00742                  bsr   L0436      setup lines per page
                      (/home/strick/go/s):00743         * The following new lines permit a sequence like
                      (/home/strick/go/s):00744         * display 1b 24    kill window
                      (/home/strick/go/s):00745         * display 1b 20 2 0 0 50 18 0 1 2  change window format
                      (/home/strick/go/s):00746         * without requiring the additional line
                      (/home/strick/go/s):00747         * display 1b 21    display window
                      (/home/strick/go/s):00748         * which seems redundant. The change is compatible with MultiVue. RG
040B F61160           (/home/strick/go/s):00749                  ldb   >GrfMem+Gr.STYMk     get screen type from Grfdrv Mem
040E C101             (/home/strick/go/s):00750                  cmpb  #1           Is it an overlay?
0410 2303             (/home/strick/go/s):00751                  bls   L0408        don't flag screen if overlay
0412 6CC823           (/home/strick/go/s):00752                  inc   V.ScrChg,u   Flag that screen has changed for AltIRQ routine
                      (/home/strick/go/s):00753         * End of change to Nowin. RG
0415 35E0             (/home/strick/go/s):00754         L0408    puls  pc,u,y     all done, return
                      (/home/strick/go/s):00755         
                      (/home/strick/go/s):00756         * DWSet didn't work, flag window table entry as free again
0417 CEFFFF           (/home/strick/go/s):00757         L040A    ldu   #$FFFF     get table free value
041A EF30             (/home/strick/go/s):00758                  stu   Wt.STbl,y  put it in window table
041C 35E0             (/home/strick/go/s):00759                  puls  y,u,pc     restore & return
                      (/home/strick/go/s):00760         
                      (/home/strick/go/s):00761         * Move co-ordinates/size & fore/back colors into window table
041E 3406             (/home/strick/go/s):00762         L0413    pshs  d          Preserve D
0420 8D0C             (/home/strick/go/s):00763                  bsr   L0423      Move coordinates & size
0422 2506             (/home/strick/go/s):00764                  bcs   L041F      Error in size, return the error
0424 EC81             (/home/strick/go/s):00765                  ldd   ,x++       Get foreground/background colors
0426 ED26             (/home/strick/go/s):00766                  std   Wt.Fore,y  Put it in window table
0428 3586             (/home/strick/go/s):00767         L041D    puls  d,pc       Restore D & return
                      (/home/strick/go/s):00768         
042A E761             (/home/strick/go/s):00769         L041F    stb   1,s        Save error code into B on stack
042C 3586             (/home/strick/go/s):00770                  puls  d,pc       Restore D & return
                      (/home/strick/go/s):00771         
                      (/home/strick/go/s):00772         * Move start coordinates & size into window table
                      (/home/strick/go/s):00773         * Entry: X=Pointer to co-rdinates
                      (/home/strick/go/s):00774         *        Y=Window table pointer
042E EC81             (/home/strick/go/s):00775         L0423    ldd   ,x++       Get start coordinates
0430 ED35             (/home/strick/go/s):00776                  std   Wt.CPX,y   Save 'em
0432 A680             (/home/strick/go/s):00777                  lda   ,x+        Get X size
0434 2F04             (/home/strick/go/s):00778                  ble   L042F      Too big or 0, exit with error
0436 E680             (/home/strick/go/s):00779                  ldb   ,x+        Get Y size
0438 2E03             (/home/strick/go/s):00780                  bgt   L0432      Above 0, go on
043A 1602AE           (/home/strick/go/s):00781         L042F    lbra  L0697      Return error
                      (/home/strick/go/s):00782         
043D ED37             (/home/strick/go/s):00783         L0432    std   Wt.SZX,y   Save size to window table
043F 5F               (/home/strick/go/s):00784                  clrb             Clear error & return
0440 39               (/home/strick/go/s):00785                  rts   
                      (/home/strick/go/s):00786         
                      (/home/strick/go/s):00787         * Setup lines/page variables
                      (/home/strick/go/s):00788         * Entry: Y=Path descriptor pointer
                      (/home/strick/go/s):00789         *        U=Device static mem pointer for new window
0441 3420             (/home/strick/go/s):00790         L0436    pshs  y          L06AE resets y
0443 1702A9           (/home/strick/go/s):00791                  lbsr  L06AE      get window table pointer
0446 E638             (/home/strick/go/s):00792                  ldb   Wt.SZY,y   Get Y size
0448 3520             (/home/strick/go/s):00793                  puls  y          restore reg
044A E747             (/home/strick/go/s):00794                  stb   V.LINE,u   save it in static mem for SCF
044C E7A828           (/home/strick/go/s):00795                  stb   PD.PAG,y   Save it as the default in path descriptor
044F 5F               (/home/strick/go/s):00796                  clrb             clear errors
0450 39               (/home/strick/go/s):00797                  rts              return
                      (/home/strick/go/s):00798         
                      (/home/strick/go/s):00799         ****************************
                      (/home/strick/go/s):00800         * DWEnd entry point
                      (/home/strick/go/s):00801         * Entry: U=Static memory pointer
                      (/home/strick/go/s):00802         *        Y=Path descriptor pointer
0451 3440             (/home/strick/go/s):00803         DWEnd    pshs  u
0453 8D08             (/home/strick/go/s):00804                  bsr   L0452      process it
0455 3540             (/home/strick/go/s):00805                  puls  u
0457 2503             (/home/strick/go/s):00806                  bcs   L0451      error, return
0459 6FC81E           (/home/strick/go/s):00807                  clr   V.InfVld,u   clear flag - static mem no longer valid
045C 39               (/home/strick/go/s):00808         L0451    rts              return
                      (/home/strick/go/s):00809         
                      (/home/strick/go/s):00810         * Check for legal screen table (PRESERVES U)
045D 17028F           (/home/strick/go/s):00811         L0452    lbsr  L06AE      get pointer to window table into Y
0460 A630             (/home/strick/go/s):00812                  lda   Wt.STbl,y  screen table exist?
0462 2A04             (/home/strick/go/s):00813                  bpl   L0461      screen table exists, skip ahead
0464 53               (/home/strick/go/s):00814                  comb             set carry for error
0465 160253           (/home/strick/go/s):00815                  lbra  L069D      return undefined window error
                      (/home/strick/go/s):00816         
                      (/home/strick/go/s):00817         * Window legal, Delete any overlays (PRESERVES U)
0468 A632             (/home/strick/go/s):00818         L0461    lda   Wt.BLnk,y  Any overlay windows?
046A 2B14             (/home/strick/go/s):00819                  bmi   L0479      No, skip ahead
046C 3442             (/home/strick/go/s):00820                  pshs  a,u        save parent window # & static mem
                      (/home/strick/go/s):00821                  IFNE  H6309
                      (/home/strick/go/s):00822                  bsr   L04EA      Do a CWArea to full size
                      (/home/strick/go/s):00823                  ELSE
046E 17007E           (/home/strick/go/s):00824                  lbsr  L04EA
                      (/home/strick/go/s):00825                  ENDC
0471 C60C             (/home/strick/go/s):00826                  ldb   #$0C       Grfdrv function: Overlay window end
0473 17FEC3           (/home/strick/go/s):00827                  lbsr  L0101
0476 3542             (/home/strick/go/s):00828                  puls  a,u        restore parent & static mem
0478 A7C835           (/home/strick/go/s):00829                  sta   V.WinNum,u   save parent as current
047B 170271           (/home/strick/go/s):00830                  lbsr  L06AE      get it's window table pointer
047E 20E8             (/home/strick/go/s):00831                  bra   L0461      keep going
                      (/home/strick/go/s):00832         
                      (/home/strick/go/s):00833         * Change to full window size & clear out the graphics table entry
                      (/home/strick/go/s):00834         *   clear out the current window & screen table ptrs
0480 3440             (/home/strick/go/s):00835         L0479    pshs  u          save static mem pointer
0482 8D6B             (/home/strick/go/s):00836                  bsr   L04EA      Do a CWArea to full size
                      (/home/strick/go/s):00837         * clear out gfx table entry
0484 3540             (/home/strick/go/s):00838                  puls  u          Restore static mem ptr
0486 170272           (/home/strick/go/s):00839                  lbsr  L06B9      Point to gfx table entry for this window
                      (/home/strick/go/s):00840                  IFNE  H6309
                      (/home/strick/go/s):00841                  leau  <Nul2+2,pc
0489                  (/home/strick/go/s):00842         Nul2     ldw   #$0012
                      (/home/strick/go/s):00843                  tfm   u,x+
                      (/home/strick/go/s):00844                  ELSE
0489 3404             (/home/strick/go/s):00845                  pshs  b
048B CC0012           (/home/strick/go/s):00846                  ldd   #$0012
048E A780             (/home/strick/go/s):00847         Nul2     sta   ,x+
0490 5A               (/home/strick/go/s):00848                  decb
0491 26FB             (/home/strick/go/s):00849                  bne   Nul2
0493 3504             (/home/strick/go/s):00850                  puls  b
                      (/home/strick/go/s):00851                  ENDC
0495 B6100B           (/home/strick/go/s):00852                  lda   >WGlobal+G.WinType     is this a window?
0498 2B0B             (/home/strick/go/s):00853                  bmi   L0499      no, return
                      (/home/strick/go/s):00854                  IFNE  H6309
                      (/home/strick/go/s):00855                  clrd  
                      (/home/strick/go/s):00856                  stq   >GrfMem+gr002E     clear window & screen table entrys
                      (/home/strick/go/s):00857                  ELSE
049A 4F               (/home/strick/go/s):00858                  clra
049B 5F               (/home/strick/go/s):00859                  clrb
049C FD11B5           (/home/strick/go/s):00860                  std   >GrfMem+gr00B5 
049F FD112E           (/home/strick/go/s):00861                  std   >GrfMem+gr002E     clear window & screen table entrys
04A2 FD1130           (/home/strick/go/s):00862                  std   >GrfMem+gr002E+2
                      (/home/strick/go/s):00863                  ENDC
04A5 16FEC2           (/home/strick/go/s):00864         L0499    lbra  L00F7      let grfdrv do the rest
                      (/home/strick/go/s):00865         
                      (/home/strick/go/s):00866         *****************************
                      (/home/strick/go/s):00867         * OWSet entry point
                      (/home/strick/go/s):00868         * Entry: U=Device static mem pointer
                      (/home/strick/go/s):00869         *        Y=Path descriptor pointer
                      (/home/strick/go/s):00870         *        X=Parameter pointer
04A8 3460             (/home/strick/go/s):00871         OWSet    pshs  y,u        preserve path descriptor & static mem pointers
04AA 170211           (/home/strick/go/s):00872                  lbsr  L06A0      verify window table
04AD 3560             (/home/strick/go/s):00873                  puls  u,y        restore pointers
04AF 10250208         (/home/strick/go/s):00874                  lbcs  L069D      not a legal window, return undefined window error
04B3 3460             (/home/strick/go/s):00875                  pshs  u,y        preserve path descriptor & static mem pointers
04B5 17032B           (/home/strick/go/s):00876                  lbsr  L07B0      get a blank window table pointer
04B8 2406             (/home/strick/go/s):00877                  bcc   L04B6      we found one, skip ahead
04BA 35E0             (/home/strick/go/s):00878                  puls  u,y,pc     purge stack & return
                      (/home/strick/go/s):00879         
04BC 3560             (/home/strick/go/s):00880         L04B2    puls  u,y
04BE 201C             (/home/strick/go/s):00881                  bra   L04D5
                      (/home/strick/go/s):00882         
                      (/home/strick/go/s):00883         * We have a new window table for overlay, so process parameters
04C0 A680             (/home/strick/go/s):00884         L04B6    lda   ,x+        get save switch from parameters
04C2 B71159           (/home/strick/go/s):00885                  sta   >GrfMem+gr0059     save it in grfdrv mem
04C5 17FF56           (/home/strick/go/s):00886                  lbsr  L0413      move rest of parameters to grfdrv mem
04C8 25F2             (/home/strick/go/s):00887                  bcs   L04B2      error, return
04CA 3420             (/home/strick/go/s):00888                  pshs  y          preserve window table pointer
04CC 17FE9B           (/home/strick/go/s):00889                  lbsr  L00F7      let grfdrv create overlay
04CF 3520             (/home/strick/go/s):00890                  puls  y          restore window table pointer
04D1 2505             (/home/strick/go/s):00891                  bcs   L04D1      error from grfdrv, return
04D3 3560             (/home/strick/go/s):00892                  puls  u,y        restore path descriptor & static mem pointers
04D5 16FF69           (/home/strick/go/s):00893                  lbra  L0436      setup lines per page & return from there
                      (/home/strick/go/s):00894         
04D8 3262             (/home/strick/go/s):00895         L04D1    leas  2,s        Eat path dsc. ptr
04DA 3540             (/home/strick/go/s):00896                  puls  u          Get static mem ptr back
                      (/home/strick/go/s):00897         
                      (/home/strick/go/s):00898         * Could not find a window table for overlay, get rid of links & return
04DC A632             (/home/strick/go/s):00899         L04D5    lda   Wt.BLnk,y  Get back window # link
04DE A7C835           (/home/strick/go/s):00900                  sta   V.WinNum,u   Store it as current window #
                      (/home/strick/go/s):00901                  IFNE  H6309
                      (/home/strick/go/s):00902                  ldw   #$FFFF     Set screen table ptr to unused
                      (/home/strick/go/s):00903                  stw   Wt.STbl,y
                      (/home/strick/go/s):00904                  ELSE
04E1 3410             (/home/strick/go/s):00905                  pshs  x
04E3 8EFFFF           (/home/strick/go/s):00906                  ldx   #$FFFF
04E6 BF11B5           (/home/strick/go/s):00907                  stx   >GrfMem+gr00B5
04E9 AF30             (/home/strick/go/s):00908                  stx   Wt.STbl,y
04EB 3510             (/home/strick/go/s):00909                  puls  x
                      (/home/strick/go/s):00910                  ENDC
04ED 43               (/home/strick/go/s):00911                  coma             Set carry for error
04EE 39               (/home/strick/go/s):00912         L04E7    rts   
                      (/home/strick/go/s):00913         
                      (/home/strick/go/s):00914         * Change window to full size reported in window table
     04EF             (/home/strick/go/s):00915         L04EA    equ   *
                      (/home/strick/go/s):00916         * Relocated lines and removed regW; regE bug; RG
04EF ECA828           (/home/strick/go/s):00917                  ldd   Wt.DfSZX,y Get default size of window
04F2 ED37             (/home/strick/go/s):00918                  std   Wt.CPX+2,y         Save current size
04F4 FD11B5           (/home/strick/go/s):00919                  std   >GrfMem+gr00B5
                      (/home/strick/go/s):00920                  IFNE  H6309 
                      (/home/strick/go/s):00921                  clrd             set start coords to 0,0
                      (/home/strick/go/s):00922                  ELSE
04F7 4F               (/home/strick/go/s):00923                  clra
04F8 5F               (/home/strick/go/s):00924                  clrb
                      (/home/strick/go/s):00925                  ENDC
04F9 ED35             (/home/strick/go/s):00926                  std   Wt.CPX,y   Store coords
04FB C60E             (/home/strick/go/s):00927                  ldb   #$0E       GrfDrv function: CWArea
04FD 3420             (/home/strick/go/s):00928                  pshs  y          preserve window table ptr
04FF 17FE37           (/home/strick/go/s):00929                  lbsr  L0101      Send it to GrfDrv
0502 35A0             (/home/strick/go/s):00930                  puls  y,pc       Restore reg & return
                      (/home/strick/go/s):00931         
                      (/home/strick/go/s):00932         ****************************
                      (/home/strick/go/s):00933         * OWEnd entry point
                      (/home/strick/go/s):00934         * Entry: U=Device static mem pointer
                      (/home/strick/go/s):00935         *        Y=Path descriptor pointer
0504 3460             (/home/strick/go/s):00936         OWEnd    pshs  u,y        preserve path descriptor & static mem pointers
0506 1701B5           (/home/strick/go/s):00937                  lbsr  L06A0      get pointer to window table & verify it
0509 2405             (/home/strick/go/s):00938                  bcc   L0508      went ok, skip ahead
050B 3560             (/home/strick/go/s):00939                  puls  u,y        Restore regs
050D 1601AB           (/home/strick/go/s):00940                  lbra  L069D      Exit with undefined window error
                      (/home/strick/go/s):00941         
0510 A632             (/home/strick/go/s):00942         L0508    lda   Wt.BLnk,y  is this an overlay?
0512 2A05             (/home/strick/go/s):00943                  bpl   L0511      yes, go remove it
0514 3560             (/home/strick/go/s):00944                  puls  u,y        purge stack
0516 1601D2           (/home/strick/go/s):00945                  lbra  L0697      return with illegal window definition error
                      (/home/strick/go/s):00946         
                      (/home/strick/go/s):00947         * We are in overlay, remove it
0519 EE62             (/home/strick/go/s):00948         L0511    ldu   2,s        get static mem pointer
051B 1701DD           (/home/strick/go/s):00949                  lbsr  L06B9      get pointer to graphics table for this window
                      (/home/strick/go/s):00950                  IFNE  H6309
                      (/home/strick/go/s):00951                  lde   ,x         get menuing system screen type
                      (/home/strick/go/s):00952                  ELSE
051E A684             (/home/strick/go/s):00953                  lda   ,x
0520 B711B5           (/home/strick/go/s):00954                  sta   >GrfMem+gr00B5
                      (/home/strick/go/s):00955                  ENDC
0523 A632             (/home/strick/go/s):00956                  lda   Wt.BLnk,y  get parent window # of this overlay
                      (/home/strick/go/s):00957         * We know this is a overlay window, continue
0525 A7C835           (/home/strick/go/s):00958                  sta   V.WinNum,u   save new window #
0528 8DC5             (/home/strick/go/s):00959                  bsr   L04EA      change to the full size window 
052A C60C             (/home/strick/go/s):00960                  ldb   #$0C       get grfdrv function for OWEnd
052C 17FE0A           (/home/strick/go/s):00961                  lbsr  L0101      let grfdrv do the rest
052F 2402             (/home/strick/go/s):00962                  bcc   L052E      grfdrv went ok, skip ahead
0531 35E0             (/home/strick/go/s):00963         L052C    puls  y,u,pc     restore & return
                      (/home/strick/go/s):00964         
                      (/home/strick/go/s):00965         
                      (/home/strick/go/s):00966         * Overlay removed, check if we activate menu bar on parent window
0533 3560             (/home/strick/go/s):00967         L052E    puls  y,u        Restore static mem & path dsc. ptrs
0535 17FF09           (/home/strick/go/s):00968                  lbsr  L0436      set lines per page in path descriptor
                      (/home/strick/go/s):00969                 
                      (/home/strick/go/s):00970                  IFNE  CoGrf-1
                      (/home/strick/go/s):00971                  IFNE  H6309
                      (/home/strick/go/s):00972                  tste           is screen type a regular no box window?
                      (/home/strick/go/s):00973                  ELSE
0538 7D11B5           (/home/strick/go/s):00974                  tst   >GrfMem+gr00B5
                      (/home/strick/go/s):00975                  ENDC
053B 27B1             (/home/strick/go/s):00976                  beq   L04E7      yes, return
                      (/home/strick/go/s):00977                  IFNE  H6309
                      (/home/strick/go/s):00978                  cmpe  #WT.FSWin  do we have a menu bar on window?
                      (/home/strick/go/s):00979                  ELSE
053D 3402             (/home/strick/go/s):00980                  pshs  a
053F B611B5           (/home/strick/go/s):00981                  lda   >GrfMem+gr00B5
0542 8102             (/home/strick/go/s):00982                  cmpa  #WT.FSWin
0544 3502             (/home/strick/go/s):00983                  puls  a
                      (/home/strick/go/s):00984                  ENDC
0546 22A6             (/home/strick/go/s):00985                  bhi   L04E7      no, return
0548 B6100A           (/home/strick/go/s):00986                  lda   >WGlobal+G.CrDvFl     Are we the current active window?
054B 2740             (/home/strick/go/s):00987                  beq   L0591      no, no need to update menu bar
054D 160F02           (/home/strick/go/s):00988                  lbra  L13F5      set menu bar to active state
                      (/home/strick/go/s):00989                  ELSE
                      (/home/strick/go/s):00990                  rts
                      (/home/strick/go/s):00991                  ENDC
                      (/home/strick/go/s):00992         
                      (/home/strick/go/s):00993         ****************************
                      (/home/strick/go/s):00994         * Select entry point
                      (/home/strick/go/s):00995         * Entry: U=Static memory pointer
                      (/home/strick/go/s):00996         *        Y=Path descriptor pointer
                      (/home/strick/go/s):00997         * Routine is patched to permit
                      (/home/strick/go/s):00998         * display 1b 21
                      (/home/strick/go/s):00999         * to work within a script file. Multivue was not affected nor
                      (/home/strick/go/s):01000         * any other program during testing. RG
                      (/home/strick/go/s):01001         
0550 AE26             (/home/strick/go/s):01002         Select   ldx   PD.RGS,y   get register stack pointer
0552 A601             (/home/strick/go/s):01003                  lda   R$A,x      get path # to new window
0554 9E50             (/home/strick/go/s):01004                  ldx   <D.Proc    get current process pointer
                      (/home/strick/go/s):01005         * This does not seem to be of any use except to prevent script use. RG
                      (/home/strick/go/s):01006         *         cmpa  P$SelP,x   same as current selected path
                      (/home/strick/go/s):01007         *         beq   L0591      yes, nothing to do so return
0556 E68900AC         (/home/strick/go/s):01008                  ldb   P$SelP,x   get the current selected path
055A A78900AC         (/home/strick/go/s):01009                  sta   P$SelP,x   save new path
055E 3420             (/home/strick/go/s):01010                  pshs  y          save path descriptor pointer
0560 8D2C             (/home/strick/go/s):01011                  bsr   L0592      Get the device table ptr for old window
0562 AE22             (/home/strick/go/s):01012                  ldx   V$STAT,y   Get static mem ptr
                      (/home/strick/go/s):01013         * Again can't find a use for this or next branch. RG 
                      (/home/strick/go/s):01014         *         cmpx  >WGlobal+G.CurDev     Same as current device?
0564 3520             (/home/strick/go/s):01015                  puls  y          restore path descriptor pointer
                      (/home/strick/go/s):01016         *        bne   L0590      no match on old device, return
0566 3404             (/home/strick/go/s):01017                  pshs  b          save old window path block #
0568 30C4             (/home/strick/go/s):01018                  leax  ,u         point to static mem
056A 170151           (/home/strick/go/s):01019                  lbsr  L06A0      verify window table of new window
056D 3504             (/home/strick/go/s):01020                  puls  b          restore old window path block #
056F 2409             (/home/strick/go/s):01021                  bcc   L0582      window exists, skip ahead
0571 9E50             (/home/strick/go/s):01022                  ldx   <D.Proc    get current process pointer
0573 E78900AC         (/home/strick/go/s):01023                  stb   P$SelP,x   save old window path number back
0577 160141           (/home/strick/go/s):01024                  lbra  L069D      return undefined window error
                      (/home/strick/go/s):01025         
                      (/home/strick/go/s):01026         * New window exists, update screen to it
057A FE1020           (/home/strick/go/s):01027         L0582    ldu   >WGlobal+G.CurDev     Get current device mem ptr
057D FF1022           (/home/strick/go/s):01028                  stu   >WGlobal+G.PrWMPt     Save as previoius device mem ptr
0580 BF1020           (/home/strick/go/s):01029                  stx   >WGlobal+G.CurDev     Save new current device mem ptr
0583 6C8823           (/home/strick/go/s):01030                  inc   V.ScrChg,x   Flag screen has changed for AltIRQ routine
                      (/home/strick/go/s):01031         * Give system a chance to stabilize. RG
0586 8E0002           (/home/strick/go/s):01032                  ldx   #2
0589 103F0A           (/home/strick/go/s):01033                  os9   F$Sleep
058C 5F               (/home/strick/go/s):01034         L0590    clrb             clear errors
058D 39               (/home/strick/go/s):01035         L0591    rts              return
                      (/home/strick/go/s):01036         
                      (/home/strick/go/s):01037         * Get ptr to device table
                      (/home/strick/go/s):01038         * Entry: X=Pointer to process descriptor
                      (/home/strick/go/s):01039         *        B=Path block # to get 
                      (/home/strick/go/s):01040         * Exit : Y=Pointer to device table entry
058E 308830           (/home/strick/go/s):01041         L0592    leax  P$Path,x   get pointer to path #'s
                      (/home/strick/go/s):01042         * Added next line to protect regB from os9 F$Find64 error report. RG
0591 3404             (/home/strick/go/s):01043                  pshs  b
0593 A685             (/home/strick/go/s):01044                  lda   b,x        get path block
0595 9E88             (/home/strick/go/s):01045                  ldx   <D.PthDBT  get pointer to descriptor block table
0597 103F2F           (/home/strick/go/s):01046                  os9   F$Find64   get pointer to path descriptor
059A 10AE23           (/home/strick/go/s):01047                  ldy   PD.DEV,y   get pointer to device table entry
059D 3584             (/home/strick/go/s):01048                  puls  b,pc       return
                      (/home/strick/go/s):01049         
                      (/home/strick/go/s):01050         ****************************
                      (/home/strick/go/s):01051         * CWArea entry point
                      (/home/strick/go/s):01052         * Entry: U=Static memory pointer
                      (/home/strick/go/s):01053         *        Y=Path descriptor pointer
                      (/home/strick/go/s):01054         *        X=Pointer to parameters
059F 3460             (/home/strick/go/s):01055         CWArea   pshs  y,u        Save device mem ptr & path dsc. ptr on stack
05A1 17011A           (/home/strick/go/s):01056                  lbsr  L06A0      verify window table
                      (/home/strick/go/s):01057                  IFNE  H6309
                      (/home/strick/go/s):01058                  ldq   Wt.CPX,y   get original start & size
                      (/home/strick/go/s):01059                  pshsw             preserve them on the stack
                      (/home/strick/go/s):01060                  ELSE
05A4 EC37             (/home/strick/go/s):01061                  ldd   Wt.CPX+2,y
05A6 FD11B5           (/home/strick/go/s):01062                  std   >GrfMem+gr00B5
05A9 3406             (/home/strick/go/s):01063                  pshs  d
05AB EC35             (/home/strick/go/s):01064                  ldd   Wt.CPX,y
                      (/home/strick/go/s):01065                  ENDC
05AD 3406             (/home/strick/go/s):01066                  pshs  d
05AF 17FE7C           (/home/strick/go/s):01067                  lbsr  L0423      move coords to window table
05B2 2550             (/home/strick/go/s):01068                  bcs   L0609      didn't pan out, restore originals & return error
                      (/home/strick/go/s):01069         * The rest of this is unique to CoWin.  What it does is calculate the
                      (/home/strick/go/s):01070         * maximum allowable window sizes based on the window type defined in the
                      (/home/strick/go/s):01071         * menuing system.
                      (/home/strick/go/s):01072         * NOTE: MAY BE ABLE TO USE E & F FOR SOME OF THE ,S STUFF
05B4 EE66             (/home/strick/go/s):01073                  ldu   6,s        get device static memory pointer
05B6 170142           (/home/strick/go/s):01074                  lbsr  L06B9      get graphics table entry pointer for this window
                      (/home/strick/go/s):01075                  IFNE  H6309
                      (/home/strick/go/s):01076                  clrd             set starting X/Y coords to 0
                      (/home/strick/go/s):01077                  ELSE
05B9 4F               (/home/strick/go/s):01078                  clra
05BA 5F               (/home/strick/go/s):01079                  clrb
                      (/home/strick/go/s):01080                  ENDC
05BB 3406             (/home/strick/go/s):01081                  pshs  d
05BD ECA828           (/home/strick/go/s):01082                  ldd   Wt.DfSZX,y Get default X/Y sizes from window table
05C0 3406             (/home/strick/go/s):01083                  pshs  d          Make them the ending X,Y coords
                      (/home/strick/go/s):01084         
                      (/home/strick/go/s):01085                  IFNE  CoGrf-1
05C2 A684             (/home/strick/go/s):01086                  lda   ,x         get graphics table window type
05C4 271C             (/home/strick/go/s):01087                  beq   L05E3      If normal window, skip all adjustments
05C6 4A               (/home/strick/go/s):01088                  deca             Is it a WT.FWin (framed window=1)?
05C7 2606             (/home/strick/go/s):01089                  bne   L05CB      no, check for scroll bars
05C9 6A61             (/home/strick/go/s):01090                  dec   1,s        Yes, subtract 1 from Y size
05CB 6C63             (/home/strick/go/s):01091                  inc   3,s        Add 1 to Y start
05CD 2013             (/home/strick/go/s):01092                  bra   L05E3
                      (/home/strick/go/s):01093         
05CF 4A               (/home/strick/go/s):01094         L05CB    deca             Is it a WT.FSWin (scroll barred window=2)?
05D0 2604             (/home/strick/go/s):01095                  bne   L05D3      No, has to be Shadowed,double or plain, skip ahead
05D2 6AE4             (/home/strick/go/s):01096                  dec   ,s         decrement X size by 1 for right scroll bar
05D4 2006             (/home/strick/go/s):01097                  bra   L05DD      skip ahead
                      (/home/strick/go/s):01098         
                      (/home/strick/go/s):01099         * Shadowed, double & plain go here - 1 char border on all 4 sides
05D6 6C62             (/home/strick/go/s):01100         L05D3    inc   2,s        add 1 to X start for left border
05D8 6AE4             (/home/strick/go/s):01101                  dec   ,s         decrement X size by 2 for left & right borders
05DA 6AE4             (/home/strick/go/s):01102                  dec   ,s
05DC 6C63             (/home/strick/go/s):01103         L05DD    inc   3,s        add 1 to Y start for menu bar
05DE 6A61             (/home/strick/go/s):01104                  dec   1,s        decrement Y size by 2 for menu & bottom borders
05E0 6A61             (/home/strick/go/s):01105                  dec   1,s
                      (/home/strick/go/s):01106                  ENDC
                      (/home/strick/go/s):01107         
05E2 EC37             (/home/strick/go/s):01108         L05E3    ldd   Wt.SZX,y   get current X/Y sizes
05E4 A1E4             (/home/strick/go/s):01109                  cmpa  ,s         will X size fit?
05E6 221A             (/home/strick/go/s):01110                  bhi   L0606      no return error
05E8 E161             (/home/strick/go/s):01111                  cmpb  1,s        will Y size fit?
05EA 2216             (/home/strick/go/s):01112                  bhi   L0606      no, return error
05EC EC35             (/home/strick/go/s):01113                  ldd   Wt.CPX,y   get current X/Y start
05EE A162             (/home/strick/go/s):01114                  cmpa  2,s        will X start fit?
05F0 2510             (/home/strick/go/s):01115                  bcs   L0606      no, return error
05F2 E163             (/home/strick/go/s):01116                  cmpb  3,s        will Y start fit?
05F4 250C             (/home/strick/go/s):01117                  blo   L0606      no, return error
05F6 17FD71           (/home/strick/go/s):01118                  lbsr  L00F7      let grfdrv do the rest
05F9 2507             (/home/strick/go/s):01119                  bcs   L0606      error from grfdrv, return
05FB 3268             (/home/strick/go/s):01120                  leas  8,s        eat local data
05FD 3560             (/home/strick/go/s):01121                  puls  y,u        Get back path dsc. ptr & device mem ptr
05FF 16FE3F           (/home/strick/go/s):01122                  lbra  L0436      setup lines per page
                      (/home/strick/go/s):01123         
0602 3264             (/home/strick/go/s):01124         L0606    leas  4,s        Eat stack buffer & return
     0604             (/home/strick/go/s):01125         L0609    equ   *
                      (/home/strick/go/s):01126                  IFNE  H6309
                      (/home/strick/go/s):01127                  puls  d          Restore originals
                      (/home/strick/go/s):01128                  pulsw  
                      (/home/strick/go/s):01129                  stq   Wt.CPX,y
                      (/home/strick/go/s):01130                  ELSE
0604 EC62             (/home/strick/go/s):01131                  ldd   2,s
0606 ED37             (/home/strick/go/s):01132                  std   Wt.CPX+2,y
0608 FD11B5           (/home/strick/go/s):01133                  std   >GrfMem+gr00B5
060B ECE4             (/home/strick/go/s):01134                  ldd   ,s
060D ED35             (/home/strick/go/s):01135                  std   Wt.CPX,y
060F 3264             (/home/strick/go/s):01136                  leas  4,s        eat the stack
                      (/home/strick/go/s):01137                  ENDC
0611 53               (/home/strick/go/s):01138                  comb             Illegal coordinates error
0612 C6BD             (/home/strick/go/s):01139                  ldb   #E$ICoord
0614 35E0             (/home/strick/go/s):01140                  puls  y,u,pc
                      (/home/strick/go/s):01141         
                      (/home/strick/go/s):01142         ****************************
                      (/home/strick/go/s):01143         * GCSet entry point
                      (/home/strick/go/s):01144         * Entry: U=Static mem pointer
                      (/home/strick/go/s):01145         *        Y=path descriptor pointer
                      (/home/strick/go/s):01146         *        X=Parameter pointer
0616 3440             (/home/strick/go/s):01147         L060C    pshs  u          save static mem pointer
0618 1700A3           (/home/strick/go/s):01148                  lbsr  L06A0      verify window exists, or create it if it isn't
061B 1025009A         (/home/strick/go/s):01149                  lbcs  L069B      couldn't create, exit with error
061F EC84             (/home/strick/go/s):01150                  ldd   ,x         get group/buffer from parameters
0621 FD1157           (/home/strick/go/s):01151                  std   >GrfMem+gr0057     Save in Grfdrv mem
0624 17FD43           (/home/strick/go/s):01152                  lbsr  L00F7      let grfdrv do the rest
0627 3540             (/home/strick/go/s):01153                  puls  u          restore static mem pointer
0629 1700CF           (/home/strick/go/s):01154                  lbsr  L06B9      get graphics table pointer
062C A6A818           (/home/strick/go/s):01155                  lda   Wt.GBlk,y  Get graphics cursor memory block #
062F A70B             (/home/strick/go/s):01156                  sta   Gt.GBlk,x  save it in graphics table
0631 ECA819           (/home/strick/go/s):01157                  ldd   Wt.GOff,y  Get graphics cursor offset
0634 ED0C             (/home/strick/go/s):01158                  std   Gt.GOff,x  save it in graphics table
0636 39               (/home/strick/go/s):01159                  rts              return
                      (/home/strick/go/s):01160         
                      (/home/strick/go/s):01161         ****************************
                      (/home/strick/go/s):01162         * LSet entry point
     0637             (/home/strick/go/s):01163         LSet     equ   *
                      (/home/strick/go/s):01164                  IFNE  H6309
                      (/home/strick/go/s):01165                  bsr   L06A0      verify window table
                      (/home/strick/go/s):01166                  bcs   L069D      no good, return error 
                      (/home/strick/go/s):01167                  ELSE
0637 170084           (/home/strick/go/s):01168                  lbsr  L06A0
063A 1025007D         (/home/strick/go/s):01169                  lbcs   L069D      no good, return error 
                      (/home/strick/go/s):01170                  ENDC
063E A684             (/home/strick/go/s):01171                  lda   ,x         Get LSET type from params
0640 A72A             (/home/strick/go/s):01172                  sta   Wt.LSet,y  store it in window table
0642 16FD25           (/home/strick/go/s):01173                  lbra  L00F7      let grfdrv do the rest
                      (/home/strick/go/s):01174         
                      (/home/strick/go/s):01175         ****************************
                      (/home/strick/go/s):01176         * Border entry point
0645 3440             (/home/strick/go/s):01177         Border   pshs  u          preserve static mem
0647 8D75             (/home/strick/go/s):01178                  bsr   L06A0      verify window table
0649 256E             (/home/strick/go/s):01179                  bcs   L069B      not good, return error
064B A684             (/home/strick/go/s):01180                  lda   ,x         Get border color from parm area
064D AE30             (/home/strick/go/s):01181                  ldx   Wt.STbl,y  Get screen table ptr
064F A705             (/home/strick/go/s):01182                  sta   St.Brdr,x  Save as border color in screen tbl
0651 203F             (/home/strick/go/s):01183                  bra   L0669      Flag for GIME update & exit
                      (/home/strick/go/s):01184         
                      (/home/strick/go/s):01185         ****************************
                      (/home/strick/go/s):01186         * FColor/BColor entry point
0653                  (/home/strick/go/s):01187         BColor
0653 8D69             (/home/strick/go/s):01188         FColor   bsr   L06A0      verify window table
0655 2564             (/home/strick/go/s):01189                  bcs   L069D      not good, return error
0657 A684             (/home/strick/go/s):01190                  lda   ,x         Get palette # from param area
0659 B7115A           (/home/strick/go/s):01191                  sta   >GrfMem+gr005A     Put in GRFDRV's working palette #
065C 16FD0B           (/home/strick/go/s):01192         L064B    lbra  L00F7      Go into GrfDrv
                      (/home/strick/go/s):01193         
                      (/home/strick/go/s):01194         ****************************
                      (/home/strick/go/s):01195         * DefPal entry point
065F 3440             (/home/strick/go/s):01196         DefPal   pshs  u          preserve static mem pointer
0661 8D5B             (/home/strick/go/s):01197                  bsr   L06A0      verify window
0663 2554             (/home/strick/go/s):01198                  bcs   L069B      not good, return error
0665 AE30             (/home/strick/go/s):01199                  ldx   Wt.STbl,y  Get ptr to screen table
0667 308810           (/home/strick/go/s):01200                  leax  St.Pals,x  Point to palettes in screen table
066A FC1019           (/home/strick/go/s):01201                  ldd   >WGlobal+G.DefPal     Get ptr to system default palettes
                      (/home/strick/go/s):01202                  IFNE  H6309
                      (/home/strick/go/s):01203                  ldw   #16        # palette registers to copy
                      (/home/strick/go/s):01204                  tfm   d+,x+      Copy into screen table
                      (/home/strick/go/s):01205                  ELSE
066D 3420             (/home/strick/go/s):01206                  pshs  y
066F 1F02             (/home/strick/go/s):01207                  tfr   d,y
0671 C610             (/home/strick/go/s):01208                  ldb   #16
0673 A6A0             (/home/strick/go/s):01209         L064Eb   lda   ,y+
0675 A780             (/home/strick/go/s):01210                  sta   ,x+
0677 5A               (/home/strick/go/s):01211                  decb
0678 26F9             (/home/strick/go/s):01212                  bne   L064Eb
067A 4F               (/home/strick/go/s):01213                  clra
067B FD11B5           (/home/strick/go/s):01214                  std   >GrfMem+gr00B5
067E 3520             (/home/strick/go/s):01215                  puls  y
                      (/home/strick/go/s):01216                  ENDC   
0680 2010             (/home/strick/go/s):01217                  bra   L0669      Flag for GIME update & exit
                      (/home/strick/go/s):01218         
                      (/home/strick/go/s):01219         ****************************
                      (/home/strick/go/s):01220         * Palette entry point
0682 3440             (/home/strick/go/s):01221         Palette  pshs  u          preserve static mem pointer
0684 8D38             (/home/strick/go/s):01222                  bsr   L06A0      verify window table
0686 2531             (/home/strick/go/s):01223                  bcs   L069B      not good, return error
0688 EC84             (/home/strick/go/s):01224                  ldd   ,x         Get palette # & color
068A AE30             (/home/strick/go/s):01225                  ldx   Wt.STbl,y  Get screen table ptr
068C 840F             (/home/strick/go/s):01226                  anda  #$0f       Only allow palettes 0-15
068E 8B10             (/home/strick/go/s):01227                  adda  #St.Pals   Palette tbl starts @ +$10
0690 E786             (/home/strick/go/s):01228                  stb   a,x        Save in scrn tbl's palette
0692 5F               (/home/strick/go/s):01229         L0669    clrb             No error
0693 3540             (/home/strick/go/s):01230                  puls  u          restore static mem pointer
0695 B6100A           (/home/strick/go/s):01231                  lda   >WGlobal+G.CrDvFl     Are we the current device?
0698 2703             (/home/strick/go/s):01232                  beq   L0673      No, we are done
069A 6CC823           (/home/strick/go/s):01233                  inc   V.ScrChg,u   Yes, flag AltIRQ for screen update
069D 39               (/home/strick/go/s):01234         L0673    rts              return
                      (/home/strick/go/s):01235         
                      (/home/strick/go/s):01236         ****************************
                      (/home/strick/go/s):01237         * PSet/Font entry point
069E                  (/home/strick/go/s):01238         Font
069E 8D1E             (/home/strick/go/s):01239         PSet     bsr   L06A0      verify window table
06A0 2519             (/home/strick/go/s):01240                  bcs   L069D      not good, return error
06A2 EC84             (/home/strick/go/s):01241                  ldd   ,x         Get group & buffer #'s from parm area
06A4 2705             (/home/strick/go/s):01242                  beq   L0682      If caller wants to disable pattern set, skip
06A6 5D               (/home/strick/go/s):01243                  tstb             Is buffer=0?
06A7 102701B3         (/home/strick/go/s):01244                  lbeq  L0812      Yes, illegal
06AB FD1157           (/home/strick/go/s):01245         L0682    std   >GrfMem+gr0057     Save group & buffer #'s
06AE 16FCB9           (/home/strick/go/s):01246                  lbra  L00F7      Go to GrfDrv
                      (/home/strick/go/s):01247         
                      (/home/strick/go/s):01248         ****************************
                      (/home/strick/go/s):01249         * KillBuf entry point
06B1 8D0B             (/home/strick/go/s):01250         KillBuf  bsr   L06A0      verify window table
06B3 2506             (/home/strick/go/s):01251                  bcs   L069D      not good, return error
06B5 EC84             (/home/strick/go/s):01252                  ldd   ,x         Get buffer & group #
06B7 20F2             (/home/strick/go/s):01253                  bra   L0682      Save them
                      (/home/strick/go/s):01254         
                      (/home/strick/go/s):01255         * Return undefined window error
06B9 3262             (/home/strick/go/s):01256         L069B    leas  2,s        Eat stack
06BB C6C4             (/home/strick/go/s):01257         L069D    ldb   #E$WUndef  Window undefined error
06BD 39               (/home/strick/go/s):01258                  rts   
                      (/home/strick/go/s):01259         
                      (/home/strick/go/s):01260         * Get window table pointer & verify it
                      (/home/strick/go/s):01261         * Entry: X=parm ptr
                      (/home/strick/go/s):01262         *        Y=Path dsc. ptr
                      (/home/strick/go/s):01263         *        U=Device mem ptr
                      (/home/strick/go/s):01264         * Exit: Y=Window tbl ptr
                      (/home/strick/go/s):01265         *       X=Parm ptr
06BE E6C835           (/home/strick/go/s):01266         L06A0    ldb   V.WinNum,u   Get window # from device mem
06C1 8640             (/home/strick/go/s):01267                  lda   #Wt.Siz    Size of each entry
06C3 3D               (/home/strick/go/s):01268                  mul              Calculate window table offset
06C4 C31290           (/home/strick/go/s):01269                  addd  #WinBase   Point to specific window table entry
                      (/home/strick/go/s):01270                  IFNE  H6309
                      (/home/strick/go/s):01271                  tfr   d,w        Move to W (has indexing mode)
                      (/home/strick/go/s):01272                  lda   Wt.STbl,w  Get MSB of scrn tbl ptr
                      (/home/strick/go/s):01273                  ELSE
06C7 3420             (/home/strick/go/s):01274                  pshs  y
06C9 1F02             (/home/strick/go/s):01275                  tfr   d,y
06CB FD11B5           (/home/strick/go/s):01276                  std   >GrfMem+gr00B5
06CE A630             (/home/strick/go/s):01277                  lda   Wt.STbl,y
06D0 3520             (/home/strick/go/s):01278                  puls  y
                      (/home/strick/go/s):01279                  ENDC
06D2 2E11             (/home/strick/go/s):01280                  bgt   VerExit    If $01-$7f, should be ok
06D4 81FF             (/home/strick/go/s):01281                  cmpa  #$ff       Unused?
06D6 2613             (/home/strick/go/s):01282                  bne   L0697      No, in range of $80-$FE or $00, illegal
                      (/home/strick/go/s):01283                  IFNE  H6309
                      (/home/strick/go/s):01284                  pshsw            Preserve window tbl ptr
                      (/home/strick/go/s):01285                  pshs  x          Preserve param ptr
                      (/home/strick/go/s):01286                  tfr   y,x        Move path dsc. ptr to X
                      (/home/strick/go/s):01287                  tfr   w,y        Move window tbl ptr to Y
                      (/home/strick/go/s):01288                  ELSE
06D8 3430             (/home/strick/go/s):01289                  pshs  x,y
06DA BE11B5           (/home/strick/go/s):01290                  ldx   >GrfMem+gr00B5
06DD AF62             (/home/strick/go/s):01291                  stx   2,s        pshsw
06DF 1E21             (/home/strick/go/s):01292                  exg   y,x        tfr y,x; tfr w,y
                      (/home/strick/go/s):01293                  ENDC
06E1 8D27             (/home/strick/go/s):01294                  bsr   L06DD      Window doesn't exist, see if we can create
06E3 35B0             (/home/strick/go/s):01295                  puls  x,y,pc     Get parm ptr, window tbl ptr & return
                      (/home/strick/go/s):01296         
                      (/home/strick/go/s):01297         * X still parm ptr, just move window tbl ptr & return
06E5 4F               (/home/strick/go/s):01298         VerExit  clra             No error
                      (/home/strick/go/s):01299                  IFNE  H6309
                      (/home/strick/go/s):01300                  tfr   w,y        Move window tbl ptr to Y
                      (/home/strick/go/s):01301                  ELSE
06E6 10BE11B5         (/home/strick/go/s):01302                  ldy   >GrfMem+gr00B5
                      (/home/strick/go/s):01303                  ENDC
06EA 39               (/home/strick/go/s):01304                  rts              Return
                      (/home/strick/go/s):01305         
                      (/home/strick/go/s):01306         * Return illegal window definition error
06EB 53               (/home/strick/go/s):01307         L0697    comb             set carry
06EC C6C3             (/home/strick/go/s):01308                  ldb   #E$IWDef   Illegal window definition error
06EE 39               (/home/strick/go/s):01309                  rts
                      (/home/strick/go/s):01310         
                      (/home/strick/go/s):01311         * Get window table ptr for current window
                      (/home/strick/go/s):01312         * Entry: U=Static memory pointer
                      (/home/strick/go/s):01313         * Exit : Y=Window tbl ptr
06EF E6C835           (/home/strick/go/s):01314         L06AE    ldb   V.WinNum,u   Get window # from device mem
06F2 8640             (/home/strick/go/s):01315                  lda   #Wt.Siz    Size of each entry
06F4 3D               (/home/strick/go/s):01316                  mul              Calculate window table offset
06F5 C31290           (/home/strick/go/s):01317                  addd  #WinBase   Point to specific window tbl entry
06F8 1F02             (/home/strick/go/s):01318                  tfr   d,y        Put into Y & return
06FA 39               (/home/strick/go/s):01319                  rts   
                      (/home/strick/go/s):01320         
                      (/home/strick/go/s):01321         * Get graphics table pointer for current window
                      (/home/strick/go/s):01322         * Entry: U=Static memory pointer
06FB 3406             (/home/strick/go/s):01323         L06B9    pshs  d          Preserve D
06FD A6C835           (/home/strick/go/s):01324                  lda   V.WinNum,u   Get window #
0700 C612             (/home/strick/go/s):01325                  ldb   #GTabSz    Size of each entry
0702 3D               (/home/strick/go/s):01326                  mul              Calculate offset
0703 BE1075           (/home/strick/go/s):01327                  ldx   >WGlobal+G.GfxTbl     Get ptr to GFX tables
                      (/home/strick/go/s):01328                  IFNE  H6309
                      (/home/strick/go/s):01329                  addr  d,x        Point to table entry
                      (/home/strick/go/s):01330                  ELSE
0706 308B             (/home/strick/go/s):01331                  leax  d,x        Point to table entry
                      (/home/strick/go/s):01332                  ENDC
0708 3586             (/home/strick/go/s):01333                  puls  d,pc       Restore D & return
                      (/home/strick/go/s):01334         
                      (/home/strick/go/s):01335         * Verify window table
                      (/home/strick/go/s):01336         * Entry: Y=Window table ptr
                      (/home/strick/go/s):01337         * Unused window, check if device dsc. default is valid
070A 3410             (/home/strick/go/s):01338         L06DD    pshs  x          Preserve path dsc ptr
070C AE03             (/home/strick/go/s):01339                  ldx   PD.DEV,x   Get device table ptr
070E 3410             (/home/strick/go/s):01340                  pshs  x          Preserve it
0710 AE04             (/home/strick/go/s):01341                  ldx   V$DESC,x   Get device dsc ptr
0712 E6882F           (/home/strick/go/s):01342                  ldb   IT.VAL,x   Window dsc contain a valid type?
0715 2604             (/home/strick/go/s):01343                  bne   L06EE      Yes, skip ahead
0717 43               (/home/strick/go/s):01344                  coma             Otherwise, exit with error
0718 3264             (/home/strick/go/s):01345         L06EB    leas  4,s        Eat stack & return
071A 39               (/home/strick/go/s):01346                  rts   
                      (/home/strick/go/s):01347         
                      (/home/strick/go/s):01348         * Unused window with valid device dsc type
                      (/home/strick/go/s):01349         * X=Ptr to window's device dsc.
071B A68830           (/home/strick/go/s):01350         L06EE    lda   IT.STY,x   Get descriptor's screen type
071E 170104           (/home/strick/go/s):01351                  lbsr  L07E0      Go get GrfDrv internal screen type
0721 2404             (/home/strick/go/s):01352                  bcc   L06FA      Good window type found, continue
0723 3264             (/home/strick/go/s):01353                  leas  4,s        Eat stack & exit with error
0725 20C4             (/home/strick/go/s):01354                  bra   L0697
                      (/home/strick/go/s):01355         
                      (/home/strick/go/s):01356         * Valid screen type
0727 F71160           (/home/strick/go/s):01357         L06FA    stb   >GrfMem+Gr.STYMk     Preserve GrfDrv window type
072A C1FF             (/home/strick/go/s):01358                  cmpb  #$FF       Current screen?
072C 2708             (/home/strick/go/s):01359                  beq   L070B      Yes, skip ahead
072E A68835           (/home/strick/go/s):01360                  lda   IT.BDC,x   Get default border color
0731 B7115A           (/home/strick/go/s):01361                  sta   >GrfMem+gr005A     Put into palette area in grfdrv mem
0734 200A             (/home/strick/go/s):01362                  bra   L070F
                      (/home/strick/go/s):01363         
                      (/home/strick/go/s):01364         * If window is supposed to be on same screen, do this
0736 3410             (/home/strick/go/s):01365         L070B    pshs  x          preserve device descriptor pointer
0738 AE64             (/home/strick/go/s):01366                  ldx   4,s        get path descriptor pointer
073A 8D58             (/home/strick/go/s):01367                  bsr   L075C      Set up screen table ptr in window table
073C 3510             (/home/strick/go/s):01368                  puls  x          restore device descriptor pointer
073E 25D8             (/home/strick/go/s):01369                  bcs   L06EB      If error, eat stack & leave
                      (/home/strick/go/s):01370         
0740 EC8831           (/home/strick/go/s):01371         L070F    ldd   IT.CPX,x   Get start X coordinate from dsc
                      (/home/strick/go/s):01372                  IFNE  H6309
                      (/home/strick/go/s):01373                  ldw   IT.COL,x
                      (/home/strick/go/s):01374                  stq   Wt.CPX,y   Put into window table
                      (/home/strick/go/s):01375                  ELSE
0743 ED35             (/home/strick/go/s):01376                  std   Wt.CPX,y
0745 EC882C           (/home/strick/go/s):01377                  ldd   IT.COL,x
0748 FD11B5           (/home/strick/go/s):01378                  std   >GrfMem+gr00B5
074B ED37             (/home/strick/go/s):01379                  std   Wt.CPX+2,y
                      (/home/strick/go/s):01380                  ENDC
074D EC8833           (/home/strick/go/s):01381                  ldd   IT.FGC,x   Get foreground & background default colors
0750 ED26             (/home/strick/go/s):01382                  std   Wt.Fore,y  Save in window table
0752 C604             (/home/strick/go/s):01383                  ldb   #$04       GrfDrv function: DWSet
0754 17FBE2           (/home/strick/go/s):01384                  lbsr  L0101      Go make the window
0757 3510             (/home/strick/go/s):01385                  puls  x          Get device dsc. ptr back
0759 2408             (/home/strick/go/s):01386                  bcc   L0730      no error, skip ahead
075B CCFFFF           (/home/strick/go/s):01387                  ldd   #$FFFF     Error, Reset window table entry as 'unused'
075E ED30             (/home/strick/go/s):01388                  std   Wt.STbl,y
0760 3262             (/home/strick/go/s):01389                  leas  2,s        Eat stack & return
0762 39               (/home/strick/go/s):01390         L075B    rts   
                      (/home/strick/go/s):01391         
                      (/home/strick/go/s):01392         * Last part of DWSet
0763 AE02             (/home/strick/go/s):01393         L0730    ldx   V$STAT,x   Get device's static mem ptr
0765 6C881E           (/home/strick/go/s):01394                  inc   V.InfVld,x   Set flag indicating rest of table is valid
0768 3384             (/home/strick/go/s):01395                  leau  ,x         Point U to static storage
076A 1F20             (/home/strick/go/s):01396                  tfr   y,d        Move window table ptr to D
076C 3520             (/home/strick/go/s):01397                  puls  y          Get path dsc. ptr back into Y
076E 3406             (/home/strick/go/s):01398                  pshs  d          Save window table ptr on stack
0770 17FCCE           (/home/strick/go/s):01399                  lbsr  L0436      Set up some default size values
0773 3520             (/home/strick/go/s):01400                  puls  y          Get window table ptr back
0775 7D100A           (/home/strick/go/s):01401                  tst   >WGlobal+G.CrDvFl     Are we current device?
0778 27E8             (/home/strick/go/s):01402                  beq   L075B      No, skip ahead
                      (/home/strick/go/s):01403                  IFNE  H6309
                      (/home/strick/go/s):01404                  ldw   >WGlobal+G.CurDev     Get current device's static mem ptr
                      (/home/strick/go/s):01405                  stw   >WGlobal+G.PrWMPt     Move to old device's static mem ptr
                      (/home/strick/go/s):01406                  lda   >V.ULCase,w  Get old device's special keyboard flags
                      (/home/strick/go/s):01407                  ELSE
077A 3410             (/home/strick/go/s):01408                  pshs  x
077C BE1020           (/home/strick/go/s):01409                  ldx   >WGlobal+G.CurDev     Get current device's static mem ptr 
077F BF1022           (/home/strick/go/s):01410                  stx   >WGlobal+G.PrWMPt     Move to old device's static mem ptr
0782 BF11B5           (/home/strick/go/s):01411                  stx   >GrfMem+gr00B5 
0785 A6890021         (/home/strick/go/s):01412                  lda   >V.ULCase,x  Get old device's special keyboard flags
0789 3510             (/home/strick/go/s):01413                  puls  x
                      (/home/strick/go/s):01414                  ENDC 
078B A78821           (/home/strick/go/s):01415                  sta   V.ULCase,x   Save in new device (kybrd mouse in Gshell)
078E BF1020           (/home/strick/go/s):01416                  stx   >WGlobal+G.CurDev     Make it the current device's static mem ptr
0791 16059C           (/home/strick/go/s):01417                  lbra  L0C86      Select the window & do setmouse in VTIO
                      (/home/strick/go/s):01418         
                      (/home/strick/go/s):01419         * If current screen window, go here
                      (/home/strick/go/s):01420         * Entry: A=Screen type from caller
                      (/home/strick/go/s):01421         *        B=Internal screen type
                      (/home/strick/go/s):01422         *        X=Path descriptor ptr
                      (/home/strick/go/s):01423         *        Y=Window table ptr
                      (/home/strick/go/s):01424         * Exit: Screen table ptr in window dsc. table is set
0794 81FF             (/home/strick/go/s):01425         L075C    cmpa  #$FF       Current displayed screen?
0796 260C             (/home/strick/go/s):01426                  bne   L076D      No, must be process' current screen
0798 FC1130           (/home/strick/go/s):01427                  ldd   >GrfMem+gr0030     Get current screen table ptr
079B 2604             (/home/strick/go/s):01428                  bne   L076A      There is one, continue
079D 53               (/home/strick/go/s):01429                  comb             Otherwise, window undefined error
079E 16FF1A           (/home/strick/go/s):01430                  lbra  L069D
                      (/home/strick/go/s):01431         
07A1 ED30             (/home/strick/go/s):01432         L076A    std   Wt.STbl,y  Store screen table ptr in window table & return
07A3 39               (/home/strick/go/s):01433                  rts   
                      (/home/strick/go/s):01434         
                      (/home/strick/go/s):01435         * Verify that current process window is compatible with current window
                      (/home/strick/go/s):01436         * Entry: X=Path descriptor pointer
                      (/home/strick/go/s):01437         *        Y=Window table pointer of current window
07A4 3430             (/home/strick/go/s):01438         L076D    pshs  x,y        Preserve window table ptr & path dsc. ptr
07A6 9E50             (/home/strick/go/s):01439                  ldx   <D.Proc    Get current process dsc. ptr
07A8 E68900AC         (/home/strick/go/s):01440                  ldb   P$SelP,x   Get selected path for current window
07AC 17FDDF           (/home/strick/go/s):01441                  lbsr  L0592      Get device table ptr for the path (into Y)
07AF AEE4             (/home/strick/go/s):01442                  ldx   ,s         Get back path dsc. ptr
07B1 AE03             (/home/strick/go/s):01443                  ldx   PD.DEV,x   Get device table entry address
07B3 EC84             (/home/strick/go/s):01444                  ldd   V$DRIV,x   drivers match?
07B5 10A3A4           (/home/strick/go/s):01445                  cmpd  V$DRIV,y
07B8 2624             (/home/strick/go/s):01446                  bne   L07AB      No, they aren't compatible, exit with error
07BA 10AE22           (/home/strick/go/s):01447                  ldy   V$STAT,y   Get device driver static storage ptr
07BD A626             (/home/strick/go/s):01448                  lda   V.TYPE,y   Get device type
07BF 2A1D             (/home/strick/go/s):01449                  bpl   L07AB      not a window, exit with error
07C1 A6A81D           (/home/strick/go/s):01450                  lda   V.WinType,y  Get type of window flag
07C4 2618             (/home/strick/go/s):01451                  bne   L07AB      If not a Grf/CoWin window, error
07C6 A6A81E           (/home/strick/go/s):01452                  lda   V.InfVld,y   Get 'device mem info is valid' flag
07C9 2713             (/home/strick/go/s):01453                  beq   L07AB      If clear, error
07CB 33A4             (/home/strick/go/s):01454                  leau  ,y         Point U to static mem
07CD 17FF1F           (/home/strick/go/s):01455                  lbsr  L06AE      Get window table ptr for process window
07D0 A630             (/home/strick/go/s):01456                  lda   Wt.STbl,y  screen table active?
07D2 2B0A             (/home/strick/go/s):01457                  bmi   L07AB      no, exit with illegal window def. error
07D4 3262             (/home/strick/go/s):01458                  leas  2,s        Eat window device dsc. ptr
07D6 EC30             (/home/strick/go/s):01459                  ldd   WT.STbl,y  Get screen table ptr of process window
07D8 3520             (/home/strick/go/s):01460                  puls  y          Get window tbl ptr
07DA ED30             (/home/strick/go/s):01461                  std   WT.STbl,y  Put into current window's screen tbl ptr
07DC 4F               (/home/strick/go/s):01462                  clra             No error
07DD 39               (/home/strick/go/s):01463                  rts              return
                      (/home/strick/go/s):01464         
07DE 3530             (/home/strick/go/s):01465         L07AB    puls  y,x        Restore regs & illegal window definition error
07E0 16FF08           (/home/strick/go/s):01466                  lbra  L0697
                      (/home/strick/go/s):01467         
                      (/home/strick/go/s):01468         * Search for empty window table & setup window links
                      (/home/strick/go/s):01469         * Entry: U=Device static mem ptr
                      (/home/strick/go/s):01470         * Exit : Y=New window table pointer
07E3 3416             (/home/strick/go/s):01471         L07B0    pshs  d,x        Save regs used
07E5 31C4             (/home/strick/go/s):01472                  leay  ,u         Point to device static storage
07E7 8E1290           (/home/strick/go/s):01473                  ldx   #WinBase   swap it into X for ABX
07EA CC0040           (/home/strick/go/s):01474                  ldd   #Wt.Siz    A=Start entry #(0), B=Entry size
                      (/home/strick/go/s):01475                  IFNE  H6309
07ED                  (/home/strick/go/s):01476         L07B8    ldw   Wt.STbl,x  get screen table pointer
                      (/home/strick/go/s):01477                  ELSE
07ED 3420             (/home/strick/go/s):01478         L07B8    pshs  y
07EF 10AE10           (/home/strick/go/s):01479                  ldy   Wt.STbl,x
07F2 10BF11B5         (/home/strick/go/s):01480                  sty   >GrfMem+gr00B5
07F6 3520             (/home/strick/go/s):01481                  puls  y
                      (/home/strick/go/s):01482                  ENDC
07F8 2A1A             (/home/strick/go/s):01483                  bpl   L07CF      if high bit clear, table used, skip to next
                      (/home/strick/go/s):01484                  IFNE  H6309
                      (/home/strick/go/s):01485                  cmpf  #$FF       if LSB not a $ff, then check next one
                      (/home/strick/go/s):01486                  ELSE
07FA 3404             (/home/strick/go/s):01487                  pshs  b
07FC F611B6           (/home/strick/go/s):01488                  ldb   >GrfMem+gr00B5+1
07FF C1FF             (/home/strick/go/s):01489                  cmpb  #$FF
0801 3504             (/home/strick/go/s):01490                  puls  b
                      (/home/strick/go/s):01491                  ENDC
0803 260F             (/home/strick/go/s):01492                  bne   L07CF
                      (/home/strick/go/s):01493         * Found empty entry, link it in & make current device (static mem) point to
                      (/home/strick/go/s):01494         * new table entry
0805 E6A835           (/home/strick/go/s):01495                  ldb   V.WinNum,y   Get current window table #
0808 E712             (/home/strick/go/s):01496                  stb   Wt.BLnk,x  Save it as back link #
080A A7A835           (/home/strick/go/s):01497                  sta   V.WinNum,y   Save new window table entry #
080D 6A11             (/home/strick/go/s):01498                  dec   Wt.STbl+1,x make LSB of screen table ptr $fe
080F 1F12             (/home/strick/go/s):01499                  tfr   x,y        move window table pointer to Y
0811 5F               (/home/strick/go/s):01500                  clrb             Clear carry
0812 3596             (/home/strick/go/s):01501                  puls  d,x,pc     Restore & return
                      (/home/strick/go/s):01502         
0814 4C               (/home/strick/go/s):01503         L07CF    inca             Move to next table #
0815 8120             (/home/strick/go/s):01504                  cmpa  #$20       Past max table #?
0817 2203             (/home/strick/go/s):01505                  bhi   L07D9      Yes, exit with error
0819 3A               (/home/strick/go/s):01506                  abx              Nope, point to next one
081A 20D1             (/home/strick/go/s):01507                  bra   L07B8      Go try again
                      (/home/strick/go/s):01508         
                      (/home/strick/go/s):01509         * BUG @ approx L1789, it calls this routine, but does NOT check for a window
                      (/home/strick/go/s):01510         * table full error... it just stores Y assuming it worked.
081C 1F12             (/home/strick/go/s):01511         L07D9    tfr   x,y        move window table pointer to Y
081E 53               (/home/strick/go/s):01512                  comb             Set carry
081F C6C1             (/home/strick/go/s):01513                  ldb   #E$TblFul  Get table full error code
0821 E761             (/home/strick/go/s):01514                  stb   1,s        Save it in B on stack for restore
0823 3596             (/home/strick/go/s):01515                  puls  d,x,pc     Restore & return
                      (/home/strick/go/s):01516         
                      (/home/strick/go/s):01517         * Convert STY mark to internal type
                      (/home/strick/go/s):01518         * Entry: A=Requested screen type from parameters
                      (/home/strick/go/s):01519         * Exit : B=Internal screen type marker
0825 3422             (/home/strick/go/s):01520         L07E0    pshs  a,y        Preserve sty & window entry
0827 4C               (/home/strick/go/s):01521                  inca             Bump up so $FF type is now 0
0828 8109             (/home/strick/go/s):01522                  cmpa  #9         Past maximum allowable?
082A 220C             (/home/strick/go/s):01523                  bhi   L07F5      Yes, exit with error
082C 318C0C           (/home/strick/go/s):01524                  leay  <L07F9,pc  Point to conversion table (base 0)
082F E6A6             (/home/strick/go/s):01525                  ldb   a,y        Get internal code
0831 C1FE             (/home/strick/go/s):01526                  cmpb  #$FE       Invalid?
0833 2703             (/home/strick/go/s):01527                  beq   L07F5      Yes, exit
0835 4F               (/home/strick/go/s):01528                  clra             Clear carry
0836 35A2             (/home/strick/go/s):01529                  puls  a,y,pc     Restore & return
                      (/home/strick/go/s):01530         
0838 53               (/home/strick/go/s):01531         L07F5    comb             Set carry
0839 35A2             (/home/strick/go/s):01532                  puls  y,a,pc     Restore regs & return
                      (/home/strick/go/s):01533         
                      (/home/strick/go/s):01534         * Screen type conversion table
083B FF               (/home/strick/go/s):01535         L07F9    fcb   $ff        Current screen, sty=$ff
083C FF               (/home/strick/go/s):01536                  fcb   $ff        Current screen, sty=$00
083D 86               (/home/strick/go/s):01537                  fcb   $86        40 column, sty=$01
083E 85               (/home/strick/go/s):01538                  fcb   $85        80 column, sty=$02
083F FE               (/home/strick/go/s):01539                  fcb   $fe        Invalid, sty=$03
0840 FE               (/home/strick/go/s):01540                  fcb   $fe        Invalid, sty=$04
0841 01               (/home/strick/go/s):01541                  fcb   $01        640 2 color, sty=$05
0842 02               (/home/strick/go/s):01542                  fcb   $02        320 4 color, sty=$06
0843 03               (/home/strick/go/s):01543                  fcb   $03        640 4 color, sty=$07
0844 04               (/home/strick/go/s):01544                  fcb   $04        320 16 color, sty=$08
                      (/home/strick/go/s):01545         
0845 53               (/home/strick/go/s):01546         BadDef   comb  
0846 C6BB             (/home/strick/go/s):01547                  ldb   #E$IllArg
0848 39               (/home/strick/go/s):01548                  rts   
                      (/home/strick/go/s):01549         
                      (/home/strick/go/s):01550         ****************************
                      (/home/strick/go/s):01551         * DefGPB entry point
                      (/home/strick/go/s):01552         * Entry: U=Static memory pointer
                      (/home/strick/go/s):01553         *        Y=Path descriptor pointer
                      (/home/strick/go/s):01554         *        X=Parameter pointer
0849 17FE72           (/home/strick/go/s):01555         DefGPB   lbsr  L06A0      verify window table
084C 1025FE6B         (/home/strick/go/s):01556                  lbcs  L069D      not good, return error
                      (/home/strick/go/s):01557                  IFNE  H6309
                      (/home/strick/go/s):01558                  ldq   ,x         D=Group/Buffer W=Length
                      (/home/strick/go/s):01559                  ELSE
0850 EC02             (/home/strick/go/s):01560                  ldd   2,x
0852 FD11B5           (/home/strick/go/s):01561                  std   >GrfMem+gr00B5
0855 EC84             (/home/strick/go/s):01562                  ldd   ,x
                      (/home/strick/go/s):01563                  ENDC
0857 4D               (/home/strick/go/s):01564                  tsta             group a zero?
0858 2704             (/home/strick/go/s):01565                  beq   L0812      yes, illegal return error
085A 81FF             (/home/strick/go/s):01566                  cmpa  #$FF       is he trying to use overlay group?
085C 2604             (/home/strick/go/s):01567                  bne   L0816      no, go on
                      (/home/strick/go/s):01568         * Return bad buffer error
085E 53               (/home/strick/go/s):01569         L0812    comb             set carry
085F C6C2             (/home/strick/go/s):01570                  ldb   #E$BadBuf  get error code
0861 39               (/home/strick/go/s):01571                  rts              return to caller
                      (/home/strick/go/s):01572         
                      (/home/strick/go/s):01573         * check buffer #
0862 5D               (/home/strick/go/s):01574         L0816    tstb             buffer a zero?
0863 27F9             (/home/strick/go/s):01575                  beq   L0812      yes, illegal return error
                      (/home/strick/go/s):01576                  IFNE  H6309
                      (/home/strick/go/s):01577                  tstw             length a zero?
                      (/home/strick/go/s):01578                  ELSE
0865 3406             (/home/strick/go/s):01579                  pshs  d
0867 FC11B5           (/home/strick/go/s):01580                  ldd   >GrfMem+gr00B5
086A 3506             (/home/strick/go/s):01581                  puls  d
                      (/home/strick/go/s):01582                  ENDC
086C 27D7             (/home/strick/go/s):01583                  beq   BadDef     yes, return error
086E FD1157           (/home/strick/go/s):01584                  std   >GrfMem+gr0057     save group/buffer #'s in global mem
                      (/home/strick/go/s):01585                  IFNE  H6309
                      (/home/strick/go/s):01586                  stw   >GrfMem+gr0080     save length in global mem
                      (/home/strick/go/s):01587                  ELSE
0871 3406             (/home/strick/go/s):01588                  pshs  d
0873 FC11B5           (/home/strick/go/s):01589                  ldd   >GrfMem+gr00B5
0876 FD1180           (/home/strick/go/s):01590                  std   >GrfMem+gr0080     save length in global mem
0879 3506             (/home/strick/go/s):01591                  puls  d
                      (/home/strick/go/s):01592                  ENDC 
087B 16FAEC           (/home/strick/go/s):01593         L0822    lbra  L00F7      let grfdrv do the rest
                      (/home/strick/go/s):01594         
                      (/home/strick/go/s):01595         ****************************
                      (/home/strick/go/s):01596         * GetBlk entry point
                      (/home/strick/go/s):01597         * Entry: U=Static memory pointer
                      (/home/strick/go/s):01598         *        Y=Path descriptor pointer
                      (/home/strick/go/s):01599         *        X=Parameter pointer
087E 17FE3D           (/home/strick/go/s):01600         GetBlk   lbsr  L06A0      verify window table
0881 1025FE36         (/home/strick/go/s):01601                  lbcs  L069D      couldn't get it, return error
0885 8D19             (/home/strick/go/s):01602                  bsr   L0849      check group/buffer #'s & move upper left coords
0887 25D5             (/home/strick/go/s):01603                  bcs   L0812      error, return bad buffer
0889 8D29             (/home/strick/go/s):01604                  bsr   L085C      get X/Y sizes
088B 1024FADB         (/home/strick/go/s):01605                  lbcc  L00F7      let grfdrv do the rest if no error
088F C6BF             (/home/strick/go/s):01606         SmlBuf   ldb   #E$BufSiz  get error code
0891 39               (/home/strick/go/s):01607                  rts              return
                      (/home/strick/go/s):01608         
                      (/home/strick/go/s):01609         ****************************
                      (/home/strick/go/s):01610         * PutBlk entry point
0892 17FE29           (/home/strick/go/s):01611         PutBlk   lbsr  L06A0      verify window table
0895 1025FE22         (/home/strick/go/s):01612                  lbcs  L069D      exit if error
0899 8D05             (/home/strick/go/s):01613                  bsr   L0849      get parameters
089B 25C1             (/home/strick/go/s):01614                  bcs   L0812      exit if error
089D 16FACA           (/home/strick/go/s):01615                  lbra  L00F7      let grfdrv do rest
                      (/home/strick/go/s):01616         
                      (/home/strick/go/s):01617         * Check passed Group & buffer parameters and move start co-ordinates
08A0 EC81             (/home/strick/go/s):01618         L0849    ldd   ,x++       get group/buffer #'s
08A2 4D               (/home/strick/go/s):01619                  tsta             group a zero?
08A3 2729             (/home/strick/go/s):01620                  beq   L086E      yes, return error
08A5 81FF             (/home/strick/go/s):01621                  cmpa  #$FF       trying to use overlay?
08A7 2725             (/home/strick/go/s):01622                  beq   L086E      yes, return error
08A9 5D               (/home/strick/go/s):01623                  tstb             buffer a zero?
08AA 2722             (/home/strick/go/s):01624                  beq   L086E      yes, return error
08AC FD1157           (/home/strick/go/s):01625                  std   >GrfMem+gr0057     save group/buffer to global memory
08AF 170210           (/home/strick/go/s):01626                  lbsr  L0A32      move start coords
08B2 4F               (/home/strick/go/s):01627                  clra             clear errors
08B3 39               (/home/strick/go/s):01628                  rts              return
                      (/home/strick/go/s):01629         
                      (/home/strick/go/s):01630         * Parse passed X/Y sizes & move if ok
                      (/home/strick/go/s):01631         * Entry: X=Parameter pointer
                      (/home/strick/go/s):01632         * Exit : X - Incremented by 4
                      (/home/strick/go/s):01633                  IFNE  H6309
08B4                  (/home/strick/go/s):01634         L085C    ldq   ,x         D=X Size, W=Y size
                      (/home/strick/go/s):01635                  tstd             X size a zero?
                      (/home/strick/go/s):01636                  ELSE
08B4 EC02             (/home/strick/go/s):01637         L085C    ldd   2,x
08B6 FD11B5           (/home/strick/go/s):01638                  std   >GrfMem+gr00B5
08B9 EC84             (/home/strick/go/s):01639                  ldd   ,x
                      (/home/strick/go/s):01640                  ENDC
08BB 2711             (/home/strick/go/s):01641                  beq   L086E      yes, return error
                      (/home/strick/go/s):01642                  IFNE  H6309
                      (/home/strick/go/s):01643                  tstw             Y size a zero?
                      (/home/strick/go/s):01644                  ELSE
08BD EC02             (/home/strick/go/s):01645                  ldd   2,x
                      (/home/strick/go/s):01646                  ENDC
08BF 270D             (/home/strick/go/s):01647                  beq   L086E      yes, return error
                      (/home/strick/go/s):01648                  IFNE  H6309
                      (/home/strick/go/s):01649                  stq   >GrfMem+gr004F     save sizes into grfdrv mem
                      (/home/strick/go/s):01650                  ELSE
08C1 FD1151           (/home/strick/go/s):01651                  std   >GrfMem+gr004F+2     save sizes into grfdrv mem
08C4 EC84             (/home/strick/go/s):01652                  ldd   ,x
08C6 FD114F           (/home/strick/go/s):01653                  std   >GrfMem+gr004F     save sizes into grfdrv mem
                      (/home/strick/go/s):01654                  ENDC
08C9 C604             (/home/strick/go/s):01655                  ldb   #4         adjust parameter pointer
08CB 3A               (/home/strick/go/s):01656                  abx   
08CC 4F               (/home/strick/go/s):01657         L086C    clra             clear errors
08CD 39               (/home/strick/go/s):01658                  rts              return
                      (/home/strick/go/s):01659         
08CE 43               (/home/strick/go/s):01660         L086E    coma             set carry for error
08CF 39               (/home/strick/go/s):01661                  rts              return
                      (/home/strick/go/s):01662         
                      (/home/strick/go/s):01663         ****************************
                      (/home/strick/go/s):01664         * GPLoad entry point
                      (/home/strick/go/s):01665         * Entry: U=Static memory pointer
                      (/home/strick/go/s):01666         *        Y=Path descriptor pointer
                      (/home/strick/go/s):01667         *        X=Parameter pointer
08D0 3460             (/home/strick/go/s):01668         GPLoad   pshs  u,y        save regs
08D2 17FE1A           (/home/strick/go/s):01669                  lbsr  L06AE      get window table pointer for this window
08D5 EC81             (/home/strick/go/s):01670                  ldd   ,x++       get group & buffer
08D7 4D               (/home/strick/go/s):01671                  tsta             group a zero?
08D8 2704             (/home/strick/go/s):01672                  beq   L087D      yes, return error
08DA 81FF             (/home/strick/go/s):01673                  cmpa  #$FF       is he using overlay group?
08DC 2605             (/home/strick/go/s):01674                  bne   L0881      no, so far so good
08DE 3560             (/home/strick/go/s):01675         L087D    puls  u,y        purge stack
                      (/home/strick/go/s):01676                  IFNE  H6309
                      (/home/strick/go/s):01677                  bra   L0812      return error
                      (/home/strick/go/s):01678                  ELSE
08E0 16FF7B           (/home/strick/go/s):01679                  lbra  L0812
                      (/home/strick/go/s):01680                  ENDC
                      (/home/strick/go/s):01681         
                      (/home/strick/go/s):01682         * parse buffer & screen type parameters
08E3 5D               (/home/strick/go/s):01683         L0881    tstb             buffer a zero?
08E4 27F8             (/home/strick/go/s):01684                  beq   L087D      yes, return error
08E6 FD1157           (/home/strick/go/s):01685                  std   >GrfMem+gr0057     save it in grfdrv mem.
08E9 A680             (/home/strick/go/s):01686                  lda   ,x+        get screen type
08EB 17FF37           (/home/strick/go/s):01687                  lbsr  L07E0      convert it to internal screen type
08EE 5D               (/home/strick/go/s):01688                  tstb             is it a graphics screen?
08EF 2A05             (/home/strick/go/s):01689                  bpl   L0894      yes, skip ahead
08F1 3560             (/home/strick/go/s):01690                  puls  u,y        restore regs
08F3 16FDF5           (/home/strick/go/s):01691                  lbra  L0697      return illegal window definition error
                      (/home/strick/go/s):01692         
                      (/home/strick/go/s):01693         * parse X/Y size & buffer size parameters
08F6 F71160           (/home/strick/go/s):01694         L0894    stb   >GrfMem+Gr.STYMk     save screen type
08F9 8DB9             (/home/strick/go/s):01695                  bsr   L085C      get X/Y sizes
08FB 2404             (/home/strick/go/s):01696                  bcc   GdSiz      no error, skip ahead
08FD 3264             (/home/strick/go/s):01697                  leas  4,s        eat stack
08FF 208E             (/home/strick/go/s):01698                  bra   SmlBuf     return error
                      (/home/strick/go/s):01699         
0901 EC81             (/home/strick/go/s):01700         GdSiz    ldd   ,x++       get size of buffer
0903 EDA81F           (/home/strick/go/s):01701                  std   Wt.BLen,y  save it in window table as a counter
0906 3420             (/home/strick/go/s):01702                  pshs  y          preserve global mem & window table pointer
0908 17FA5F           (/home/strick/go/s):01703                  lbsr  L00F7      let grfdrv do some work
090B 3520             (/home/strick/go/s):01704                  puls  y          restore pointers
090D 251D             (/home/strick/go/s):01705                  bcs   L08CA      error from grfdrv, eat stack & return
                      (/home/strick/go/s):01706         * get buffer count grfdrv made & start the move process
090F ECA81F           (/home/strick/go/s):01707         L08A8    ldd   Wt.BLen,y  get buffer counter
0912 10830048         (/home/strick/go/s):01708                  cmpd  #72        more than 72 bytes left?
0916 2217             (/home/strick/go/s):01709                  bhi   L08CD      yes, skip last move
                      (/home/strick/go/s):01710         * last gpload buffer move
0918 F71070           (/home/strick/go/s):01711                  stb   >WGlobal+g0070     save LSB of count
091B 1F98             (/home/strick/go/s):01712                  tfr   b,a        copy count to A
091D 308C05           (/home/strick/go/s):01713                  leax  <L08BE,pc  get vector to buffer move processor
0920 3560             (/home/strick/go/s):01714         L08B9    puls  u,y        restore static mem & path descriptor pointers
0922 16FA52           (/home/strick/go/s):01715                  lbra  L0362      save into parameter area of static mem.
                      (/home/strick/go/s):01716         
                      (/home/strick/go/s):01717         * last buffer move parameter processor
0925 3460             (/home/strick/go/s):01718         L08BE    pshs  u,y        preserve static mem & path descriptor pointers
0927 17FDC5           (/home/strick/go/s):01719                  lbsr  L06AE      get window table pointer
092A 8D1E             (/home/strick/go/s):01720                  bsr   L08EA      Move data to shared buffer & then Grfdrv
                      (/home/strick/go/s):01721         *         bcs   L08CA      error, return
092C 3264             (/home/strick/go/s):01722         L08CA    leas  4,s        purge stack
092E 39               (/home/strick/go/s):01723                  rts              return
                      (/home/strick/go/s):01724         
                      (/home/strick/go/s):01725         * multi gpload buffer move
092F 830048           (/home/strick/go/s):01726         L08CD    subd  #72        subtract 72 from count
0932 EDA81F           (/home/strick/go/s):01727                  std   Wt.BLen,y  save count
0935 8648             (/home/strick/go/s):01728                  lda   #72
0937 B71070           (/home/strick/go/s):01729                  sta   >WGlobal+g0070
093A 308C02           (/home/strick/go/s):01730                  leax  <L08DD,pc  get vector
093D 20E1             (/home/strick/go/s):01731                  bra   L08B9      save into parameter area of static mem.
                      (/home/strick/go/s):01732         
                      (/home/strick/go/s):01733         * Place VTIO comes to for next gpload sub-buffer
093F 3460             (/home/strick/go/s):01734         L08DD    pshs  u,y        Preserve static & path dsc. ptrs
0941 17FDAB           (/home/strick/go/s):01735                  lbsr  L06AE      Get window tbl ptr
0944 8D04             (/home/strick/go/s):01736                  bsr   L08EA      Move data to shared buffer & then Grfdrv
0946 24C7             (/home/strick/go/s):01737                  bcc   L08A8      Continue moving until whole GPLoad done
0948 20E2             (/home/strick/go/s):01738                  bra   L08CA      Error from Grfdrv, exit with it
                      (/home/strick/go/s):01739         
                      (/home/strick/go/s):01740         * Move buffer to global area for GrfDrv
094A CE1200           (/home/strick/go/s):01741         L08EA    ldu   #$1200     Point to global move area
                      (/home/strick/go/s):01742                  IFNE  H6309
                      (/home/strick/go/s):01743                  ldf   >WGlobal+g0070     get byte count
                      (/home/strick/go/s):01744                  clre  
                      (/home/strick/go/s):01745                  tfm   x+,u+      move it
                      (/home/strick/go/s):01746                  ELSE
094D 3402             (/home/strick/go/s):01747                  pshs  a
094F F61070           (/home/strick/go/s):01748                  ldb   >WGlobal+g0070     get byte count
0952 A680             (/home/strick/go/s):01749         L08EAb   lda   ,x+
0954 A7C0             (/home/strick/go/s):01750                  sta   ,u+
0956 5A               (/home/strick/go/s):01751                  decb
0957 26F9             (/home/strick/go/s):01752                  bne   L08EAb
0959 4F               (/home/strick/go/s):01753                  clra
095A FD11B5           (/home/strick/go/s):01754                  std   >GrfMem+gr00B5
095D 3502             (/home/strick/go/s):01755                  puls  a 
                      (/home/strick/go/s):01756                  ENDC
                      (/home/strick/go/s):01757         * Send move buffer to GrfDrv
                      (/home/strick/go/s):01758         * Special problem. Seems to pass info via regF.
     095F             (/home/strick/go/s):01759         L08FC    equ   *
                      (/home/strick/go/s):01760                  IFNE  H6309
                      (/home/strick/go/s):01761                  ldf   >WGlobal+g0070     get count
                      (/home/strick/go/s):01762                  ELSE
095F F61070           (/home/strick/go/s):01763                  ldb   >WGlobal+g0070
                      (/home/strick/go/s):01764         *         stb   >GrfMem+$B6        grfdrv regF
0962 F711B6           (/home/strick/go/s):01765                  stb   >GrfMem+gr00B5+1   cowin regF
                      (/home/strick/go/s):01766                  ENDC
0965 C632             (/home/strick/go/s):01767                  ldb   #$32       get move buffer code
0967 16F9CF           (/home/strick/go/s):01768                  lbra  L0101      send it to grfdrv & return from there
                      (/home/strick/go/s):01769         
                      (/home/strick/go/s):01770         ****************************
                      (/home/strick/go/s):01771         * PutGC entry point
096A 17FD51           (/home/strick/go/s):01772         PutGC    lbsr  L06A0      verify window
096D 1025FD4A         (/home/strick/go/s):01773                  lbcs  L069D
                      (/home/strick/go/s):01774                  IFNE  H6309
                      (/home/strick/go/s):01775                  ldq   ,x         get position requested
                      (/home/strick/go/s):01776                  stq   >GrfMem+gr005B     save in grfdrv mem
                      (/home/strick/go/s):01777                  ELSE
0971 EC02             (/home/strick/go/s):01778                  ldd   2,x
0973 FD115D           (/home/strick/go/s):01779                  std   >GrfMem+gr005B+2     save in grfdrv mem
0976 FD11B5           (/home/strick/go/s):01780                  std   >GrfMem+gr00B5
0979 EC84             (/home/strick/go/s):01781                  ldd   ,x
097B FD115B           (/home/strick/go/s):01782                  std   >GrfMem+gr005B     save in grfdrv mem
                      (/home/strick/go/s):01783                  ENDC 
097E 16F9E9           (/home/strick/go/s):01784                  lbra  L00F7      go do it
                      (/home/strick/go/s):01785         
                      (/home/strick/go/s):01786         ****************************
                      (/home/strick/go/s):01787         * SetDPtr entry point
0981 3450             (/home/strick/go/s):01788         SetDPtr  pshs  x,u        preserve static mem & param pointers
0983 17FD38           (/home/strick/go/s):01789                  lbsr  L06A0      Verify/Create window
0986 2405             (/home/strick/go/s):01790                  bcc   L092A      Got window, continue
0988 3550             (/home/strick/go/s):01791         L0925    puls  x,u        Restore regs & exit with error
098A 16FD2E           (/home/strick/go/s):01792                  lbra  L069D
                      (/home/strick/go/s):01793         
098D 3420             (/home/strick/go/s):01794         L092A    pshs  y          save window table pointer
098F 8D70             (/home/strick/go/s):01795                  bsr   L098D      Get graphics table ptr into y
                      (/home/strick/go/s):01796                  IFNE  H6309
                      (/home/strick/go/s):01797                  ldq   ,x         get co-ordinates from parameters
                      (/home/strick/go/s):01798                  stq   Gt.GXCur,y put co-ordinates into graphics table
                      (/home/strick/go/s):01799                  ELSE
0991 EC02             (/home/strick/go/s):01800                  ldd   2,x
0993 ED23             (/home/strick/go/s):01801                  std   Gt.GXCur+2,y put co-ordinates into graphics table
0995 FD11B5           (/home/strick/go/s):01802                  std   >GrfMem+gr00B5
0998 EC84             (/home/strick/go/s):01803                  ldd   ,x
099A ED21             (/home/strick/go/s):01804                  std   Gt.GXCur,y put co-ordinates into graphics table
                      (/home/strick/go/s):01805                  ENDC 
099C 3520             (/home/strick/go/s):01806         L0934    puls  y
099E 3264             (/home/strick/go/s):01807                  leas  4,s
09A0 5F               (/home/strick/go/s):01808                  clrb  
09A1 39               (/home/strick/go/s):01809                  rts   
                      (/home/strick/go/s):01810         
                      (/home/strick/go/s):01811         ****************************
                      (/home/strick/go/s):01812         * RSetDPtr
09A2 3450             (/home/strick/go/s):01813         RSetDPtr pshs  u,x
09A4 17FD17           (/home/strick/go/s):01814                  lbsr  L06A0      Verify/create window
09A7 25DF             (/home/strick/go/s):01815                  bcs   L0925
09A9 3420             (/home/strick/go/s):01816                  pshs  y
09AB 8D54             (/home/strick/go/s):01817                  bsr   L098D      Get graphics table ptr into y
                      (/home/strick/go/s):01818                  IFNE  H6309
                      (/home/strick/go/s):01819                  ldq   ,x         Get graphics cursor coords
                      (/home/strick/go/s):01820                  addd  Gt.GXCur,y Add to graphics cursor coords
                      (/home/strick/go/s):01821                  addw  Gt.GYCur,y
                      (/home/strick/go/s):01822                  stq   Gt.GXCur,y Save update cursor coords
                      (/home/strick/go/s):01823                  ELSE
09AD EC02             (/home/strick/go/s):01824                  ldd   2,x
09AF E323             (/home/strick/go/s):01825                  addd  Gt.GYCur,y
09B1 ED23             (/home/strick/go/s):01826                  std   Gt.GXCur+2,y
09B3 FD11B5           (/home/strick/go/s):01827                  std   >GrfMem+gr00B5 
09B6 EC84             (/home/strick/go/s):01828                  ldd   ,x
09B8 E321             (/home/strick/go/s):01829                  addd  Gt.GXCur,y
09BA ED21             (/home/strick/go/s):01830                  std   Gt.GXCur,y
                      (/home/strick/go/s):01831                  ENDC
09BC 20DE             (/home/strick/go/s):01832                  bra   L0934
                      (/home/strick/go/s):01833         
                      (/home/strick/go/s):01834         ****************************
                      (/home/strick/go/s):01835         * Point entry point
09BE 3450             (/home/strick/go/s):01836         Point    pshs  u,x
09C0 17FCFB           (/home/strick/go/s):01837                  lbsr  L06A0
09C3 25C3             (/home/strick/go/s):01838                  bcs   L0925
09C5 3420             (/home/strick/go/s):01839                  pshs  y
09C7 8D38             (/home/strick/go/s):01840                  bsr   L098D
09C9 1700F6           (/home/strick/go/s):01841                  lbsr  L0A32
09CC 3520             (/home/strick/go/s):01842         L0961    puls  y
09CE 3264             (/home/strick/go/s):01843                  leas  4,s
09D0 16F997           (/home/strick/go/s):01844                  lbra  L00F7
                      (/home/strick/go/s):01845         
                      (/home/strick/go/s):01846         ****************************
                      (/home/strick/go/s):01847         * RPoint entry point
09D3 3450             (/home/strick/go/s):01848         RPoint   pshs  u,x
09D5 17FCE6           (/home/strick/go/s):01849                  lbsr  L06A0
09D8 25AE             (/home/strick/go/s):01850                  bcs   L0925
09DA 3420             (/home/strick/go/s):01851                  pshs  y
09DC 8D23             (/home/strick/go/s):01852                  bsr   L098D
                      (/home/strick/go/s):01853                  IFNE  H6309
                      (/home/strick/go/s):01854                  ldq   ,x         Get coord offsets
                      (/home/strick/go/s):01855                  addd  Gt.GXCur,y Add to X
                      (/home/strick/go/s):01856                  addw  Gt.GYCur,y Add to Y
                      (/home/strick/go/s):01857                  stq   >GrfMem+gr0047     Save in GRFDRV mem
                      (/home/strick/go/s):01858                  ELSE
09DE EC02             (/home/strick/go/s):01859                  ldd   2,x
09E0 E323             (/home/strick/go/s):01860                  addd  Gt.GYCur,y
09E2 FD1149           (/home/strick/go/s):01861                  std   >GrfMem+gr0047+2
09E5 FD11B5           (/home/strick/go/s):01862                  std   >GrfMem+gr00B5
09E8 EC84             (/home/strick/go/s):01863                  ldd   ,x
09EA E321             (/home/strick/go/s):01864                  addd  Gt.GXCur,y
09EC FD1147           (/home/strick/go/s):01865                  std   >GrfMem+gr0047
                      (/home/strick/go/s):01866                  ENDC
09EF 20DB             (/home/strick/go/s):01867                  bra   L0961
                      (/home/strick/go/s):01868         
                      (/home/strick/go/s):01869         ****************************
                      (/home/strick/go/s):01870         * Line/Box/Bar entry point
09F1                  (/home/strick/go/s):01871         Line
09F1                  (/home/strick/go/s):01872         Bar
09F1 3450             (/home/strick/go/s):01873         Box      pshs  u,x
09F3 17FCC8           (/home/strick/go/s):01874                  lbsr  L06A0
09F6 2590             (/home/strick/go/s):01875                  bcs   L0925
09F8 3420             (/home/strick/go/s):01876         L0984    pshs  y
09FA 8D05             (/home/strick/go/s):01877                  bsr   L098D
09FC 1700D4           (/home/strick/go/s):01878                  lbsr  L0A51
09FF 20CB             (/home/strick/go/s):01879         L098B    bra   L0961
                      (/home/strick/go/s):01880         
                      (/home/strick/go/s):01881         * Get graphics table pointer into Y
0A01 EE66             (/home/strick/go/s):01882         L098D    ldu   6,s        get static mem pointer
0A03 17FCF5           (/home/strick/go/s):01883                  lbsr  L06B9      get graphics table pointer
0A06 1F12             (/home/strick/go/s):01884                  tfr   x,y        move it to Y
0A08 AE64             (/home/strick/go/s):01885                  ldx   4,s        get parameter pointer
0A0A 39               (/home/strick/go/s):01886                  rts              return
                      (/home/strick/go/s):01887         
                      (/home/strick/go/s):01888         ****************************
                      (/home/strick/go/s):01889         * RLine/RBox/RBar entry point
                      (/home/strick/go/s):01890         * Entry: U=Static memory pointer
                      (/home/strick/go/s):01891         *        Y=Path descriptor pointer
                      (/home/strick/go/s):01892         *        X=Parameter pointer
0A0B                  (/home/strick/go/s):01893         RLine
0A0B                  (/home/strick/go/s):01894         RBox
0A0B 3450             (/home/strick/go/s):01895         RBar     pshs  u,x        save static & parameter pointers
0A0D 17FCAE           (/home/strick/go/s):01896                  lbsr  L06A0      get window table pointer
                      (/home/strick/go/s):01897                  IFNE  H6309
                      (/home/strick/go/s):01898                  bcs   L0925
                      (/home/strick/go/s):01899                  ELSE
0A10 1025FF74         (/home/strick/go/s):01900                  lbcs  L0925
                      (/home/strick/go/s):01901                  ENDC
0A14 3420             (/home/strick/go/s):01902         L09A3    pshs  y          preserve window table pointer
0A16 8DE9             (/home/strick/go/s):01903                  bsr   L098D      get graphics table pointer
0A18 1700DA           (/home/strick/go/s):01904                  lbsr  L0A5E
0A1B 20AF             (/home/strick/go/s):01905                  bra   L0961
                      (/home/strick/go/s):01906         
                      (/home/strick/go/s):01907         ****************************
                      (/home/strick/go/s):01908         * LineM entry point
0A1D 3450             (/home/strick/go/s):01909         LineM    pshs  u,x
0A1F 17FC9C           (/home/strick/go/s):01910                  lbsr  L06A0
0A22 1025FF62         (/home/strick/go/s):01911                  lbcs  L0925
0A26 3420             (/home/strick/go/s):01912                  pshs  y
0A28 8DD7             (/home/strick/go/s):01913                  bsr   L098D
                      (/home/strick/go/s):01914                  IFNE  H6309
                      (/home/strick/go/s):01915                  bsr   L0A51
                      (/home/strick/go/s):01916                  ELSE
0A2A 1700A6           (/home/strick/go/s):01917                  lbsr  L0A51
                      (/home/strick/go/s):01918                  ENDC
                      (/home/strick/go/s):01919         
     0A2D             (/home/strick/go/s):01920         L09BC    equ   *
                      (/home/strick/go/s):01921                  IFNE  H6309
                      (/home/strick/go/s):01922                  ldq   >GrfMem+gr004B
                      (/home/strick/go/s):01923                  stq   Gt.GXCur,y
                      (/home/strick/go/s):01924                  ELSE
0A2D FC114D           (/home/strick/go/s):01925                  ldd   >GrfMem+gr004B+2
0A30 ED23             (/home/strick/go/s):01926                  std   Gt.GXCur+2,y
0A32 FD11B5           (/home/strick/go/s):01927                  std   >GrfMem+gr00B5
0A35 FC114B           (/home/strick/go/s):01928                  ldd   >GrfMem+gr004B
0A38 ED21             (/home/strick/go/s):01929                  std   Gt.GXCur,y
                      (/home/strick/go/s):01930                  ENDC
0A3A 2090             (/home/strick/go/s):01931                  bra   L0961
                      (/home/strick/go/s):01932         
                      (/home/strick/go/s):01933         ****************************
                      (/home/strick/go/s):01934         * RLineM entry point
0A3C 3450             (/home/strick/go/s):01935         RLineM   pshs  u,x
0A3E 17FC7D           (/home/strick/go/s):01936                  lbsr  L06A0
0A41 1025FF43         (/home/strick/go/s):01937                  lbcs  L0925
0A45 3420             (/home/strick/go/s):01938                  pshs  y
0A47 8DB8             (/home/strick/go/s):01939                  bsr   L098D
                      (/home/strick/go/s):01940                  IFNE  H6309
                      (/home/strick/go/s):01941                  bsr   L0A5E
                      (/home/strick/go/s):01942                  ELSE
0A49 1700A9           (/home/strick/go/s):01943                  lbsr  L0A5E
                      (/home/strick/go/s):01944                  ENDC
0A4C 20DF             (/home/strick/go/s):01945                  bra   L09BC
                      (/home/strick/go/s):01946         
                      (/home/strick/go/s):01947         * Filled Circle/Ellipse entry point
0A4E 8601             (/home/strick/go/s):01948         Filled   lda   #1         Filled flag
0A50 B711B2           (/home/strick/go/s):01949                  sta   >GrfMem+gr00B2     Save flag
0A53 2003             (/home/strick/go/s):01950                  bra   FlagSet    skip ahead
                      (/home/strick/go/s):01951         
                      (/home/strick/go/s):01952         * FFill/Circle/Ellipse/Arc entry point
0A55                  (/home/strick/go/s):01953         Circle
0A55                  (/home/strick/go/s):01954         Ellipse
0A55                  (/home/strick/go/s):01955         Arc
0A55 7F11B2           (/home/strick/go/s):01956         FFill    clr   >GrfMem+gr00B2     Clear filled flag
0A58 3450             (/home/strick/go/s):01957         FlagSet  pshs  u,x        Preserve regs
0A5A 17FC61           (/home/strick/go/s):01958                  lbsr  L06A0      verify window table
0A5D 1025FF27         (/home/strick/go/s):01959                  lbcs  L0925      error, return
0A61 3420             (/home/strick/go/s):01960                  pshs  y          preserve window table pointer
0A63 EE64             (/home/strick/go/s):01961                  ldu   4,s        get device static mem pointer
0A65 E6C837           (/home/strick/go/s):01962                  ldb   V.CallCde,u  get grfdrv call #
0A68 3404             (/home/strick/go/s):01963                  pshs  b          save it
0A6A 17FC8E           (/home/strick/go/s):01964                  lbsr  L06B9      get graphics table pointer
0A6D 1F12             (/home/strick/go/s):01965                  tfr   x,y        move it to Y
0A6F AE63             (/home/strick/go/s):01966                  ldx   3,s        get parameter pointer
                      (/home/strick/go/s):01967         
                      (/home/strick/go/s):01968                  IFNE  H6309
                      (/home/strick/go/s):01969                  ldq   Gt.GXCur,y Get coords from graphics table
                      (/home/strick/go/s):01970                  stq   >GrfMem+gr0047     Save in GRFDRV mem
                      (/home/strick/go/s):01971                  ELSE
0A71 EC23             (/home/strick/go/s):01972                  ldd   Gt.GXCur+2,y
0A73 FD11B5           (/home/strick/go/s):01973                  std   >GrfMem+gr00B5
0A76 FD1149           (/home/strick/go/s):01974                  std   >GrfMem+gr0047+2
0A79 EC21             (/home/strick/go/s):01975                  ldd   Gt.GXCur,y
0A7B FD1147           (/home/strick/go/s):01976                  std   >GrfMem+gr0047
                      (/home/strick/go/s):01977                  ENDC
0A7E 3504             (/home/strick/go/s):01978                  puls  b          restore callcode
0A80 C156             (/home/strick/go/s):01979                  cmpb  #$56       is it flood fill?
0A82 273B             (/home/strick/go/s):01980                  beq   L0A2D      yes, let grfdrv do it
                      (/home/strick/go/s):01981                  IFNE  H6309
                      (/home/strick/go/s):01982                  ldw   ,x++       get X radius from parameters
                      (/home/strick/go/s):01983                  stw   >GrfMem+gr0053     save it in grfdrv mem
                      (/home/strick/go/s):01984                  ELSE
0A84 3420             (/home/strick/go/s):01985                  pshs  y
0A86 10AE81           (/home/strick/go/s):01986                  ldy   ,x++       get X radius from parameters
0A89 10BF1153         (/home/strick/go/s):01987                  sty   >GrfMem+gr0053     save it in grfdrv mem
0A8D 10BF11B5         (/home/strick/go/s):01988                  sty   >GrfMem+gr00B5
0A91 3520             (/home/strick/go/s):01989                  puls  y
                      (/home/strick/go/s):01990                  ENDC 
0A93 C150             (/home/strick/go/s):01991                  cmpb  #$50       is it circle?
0A95 2728             (/home/strick/go/s):01992                  beq   L0A2D      yes, let grfdrv do it
                      (/home/strick/go/s):01993                  IFNE  H6309
                      (/home/strick/go/s):01994                  ldw   ,x++       get Y radius from parameters
                      (/home/strick/go/s):01995                  stw   >GrfMem+gr0055     save it in grfdrv mem
                      (/home/strick/go/s):01996                  ELSE
0A97 3420             (/home/strick/go/s):01997                  pshs  y
0A99 10AE81           (/home/strick/go/s):01998                  ldy   ,x++       get Y radius from parameters
0A9C 10BF1155         (/home/strick/go/s):01999                  sty   >GrfMem+gr0055     save it in grfdrv mem
0AA0 10BF11B5         (/home/strick/go/s):02000                  sty   >GrfMem+gr00B5
0AA4 3520             (/home/strick/go/s):02001                  puls  y
                      (/home/strick/go/s):02002                  ENDC
0AA6 C152             (/home/strick/go/s):02003                  cmpb  #$52       is it ellipse?
0AA8 2715             (/home/strick/go/s):02004                  beq   L0A2D      yes, let grfdrv do it
0AAA 108E1120         (/home/strick/go/s):02005                  ldy   #GrfMem+gr0020     Move rest of parameters for ARC
                      (/home/strick/go/s):02006                  IFNE  H6309
                      (/home/strick/go/s):02007                  ldw   #8
                      (/home/strick/go/s):02008                  tfm   x+,y+
                      (/home/strick/go/s):02009                  ELSE
0AAE 3406             (/home/strick/go/s):02010                  pshs  d
0AB0 C608             (/home/strick/go/s):02011                  ldb   #8
0AB2 A680             (/home/strick/go/s):02012         L0A2Db   lda   ,x+
0AB4 A7A0             (/home/strick/go/s):02013                  sta   ,y+
0AB6 5A               (/home/strick/go/s):02014                  decb
0AB7 26F9             (/home/strick/go/s):02015                  bne   L0A2Db
0AB9 4F               (/home/strick/go/s):02016                  clra
0ABA FD11B5           (/home/strick/go/s):02017                  std   >GrfMem+gr00B5
0ABD 3506             (/home/strick/go/s):02018                  puls  d
                      (/home/strick/go/s):02019                  ENDC
0ABF 16FF0A           (/home/strick/go/s):02020         L0A2D    lbra  L0961      let grfdrv do the rest
                      (/home/strick/go/s):02021         
                      (/home/strick/go/s):02022         * Move X/Y co-ordinates from parameters into GrfDrv memory
                      (/home/strick/go/s):02023         
     0AC2             (/home/strick/go/s):02024         L0A32    equ   *
                      (/home/strick/go/s):02025                  IFNE  H6309
                      (/home/strick/go/s):02026                  ldq   ,x         Get X/Y coords
                      (/home/strick/go/s):02027                  stq   >GrfMem+gr0047     Save in GRFDRV mem
                      (/home/strick/go/s):02028                  ELSE
0AC2 EC02             (/home/strick/go/s):02029                  ldd   2,x
0AC4 FD11B5           (/home/strick/go/s):02030                  std   >GrfMem+gr00B5 
0AC7 FD1149           (/home/strick/go/s):02031                  std   >GrfMem+gr0047+2     Save in GRFDRV mem 
0ACA EC84             (/home/strick/go/s):02032                  ldd   ,x
0ACC FD1147           (/home/strick/go/s):02033                  std   >GrfMem+gr0047     Save in GRFDRV mem
                      (/home/strick/go/s):02034                  ENDC
0ACF C604             (/home/strick/go/s):02035                  ldb   #4         Bump param ptr up
0AD1 3A               (/home/strick/go/s):02036                  abx   
0AD2 39               (/home/strick/go/s):02037                  rts   
                      (/home/strick/go/s):02038         
                      (/home/strick/go/s):02039         * Move current draw pointer co-ordinates from graphics table 
                      (/home/strick/go/s):02040         * and destination co-ordinates from parameters into GrfDrv memory
                      (/home/strick/go/s):02041         * Entry: X=Parameter pointer
                      (/home/strick/go/s):02042         *        Y=Graphics table pointer
                      (/home/strick/go/s):02043         
                      (/home/strick/go/s):02044                  IFNE  H6309
0AD3                  (/home/strick/go/s):02045         L0A51    ldq   Gt.GXCur,y Get coords from graphics table
                      (/home/strick/go/s):02046                  stq   >GrfMem+gr0047     Save in GRFDRV mem
                      (/home/strick/go/s):02047                  ldq   ,x         Get X/Y coords from params
0AD3                  (/home/strick/go/s):02048         L0A59    stq   >GrfMem+gr004B
                      (/home/strick/go/s):02049                  ELSE
0AD3 EC21             (/home/strick/go/s):02050         L0A51    ldd   Gt.GXCur,y Get coords from graphics table
0AD5 FD1147           (/home/strick/go/s):02051                  std   >GrfMem+gr0047     Save in GRFDRV mem 
0AD8 EC23             (/home/strick/go/s):02052                  ldd   Gt.GXCur+2,y Get coords from graphics table
0ADA FD1149           (/home/strick/go/s):02053                  std   >GrfMem+gr0047+2     Save in GRFDRV mem
0ADD EC02             (/home/strick/go/s):02054                  ldd   2,x
0ADF FD11B5           (/home/strick/go/s):02055                  std   >GrfMem+gr00B5
0AE2 EC84             (/home/strick/go/s):02056                  ldd   ,x
0AE4 3406             (/home/strick/go/s):02057         L0A59    pshs  d
0AE6 FC11B5           (/home/strick/go/s):02058                  ldd   >GrfMem+gr00B5
0AE9 FD114D           (/home/strick/go/s):02059                  std   >GrfMem+gr004B+2
0AEC 3506             (/home/strick/go/s):02060                  puls  d
0AEE FD114B           (/home/strick/go/s):02061                  std   >GrfMem+gr004B
                      (/home/strick/go/s):02062                  ENDC
0AF1 C604             (/home/strick/go/s):02063                  ldb   #4         Bump param ptr past bytes we got
0AF3 3A               (/home/strick/go/s):02064                  abx   
0AF4 39               (/home/strick/go/s):02065                  rts   
                      (/home/strick/go/s):02066         
                      (/home/strick/go/s):02067         * Move current draw pointer co-ordinates from graphics table & calculate
                      (/home/strick/go/s):02068         * Destination draw pointer from parameters & move into GrfDrv memory
                      (/home/strick/go/s):02069         * Entry: X=Parameter pointer
                      (/home/strick/go/s):02070         *        Y=Graphics table pointer
                      (/home/strick/go/s):02071         
                      (/home/strick/go/s):02072                  IFNE  H6309
0AF5                  (/home/strick/go/s):02073         L0A5E    ldq   Gt.GXCur,y Get coords from graphics table
                      (/home/strick/go/s):02074                  stq   >GrfMem+gr0047     Save in GRFDRV mem
                      (/home/strick/go/s):02075                  ldq   ,x         Get X/Y coords from params
                      (/home/strick/go/s):02076                  addd  Gt.GXCur,y Make relative
                      (/home/strick/go/s):02077                  addw  Gt.GYCur,y
                      (/home/strick/go/s):02078                  ELSE
0AF5 EC21             (/home/strick/go/s):02079         L0A5E    ldd   Gt.GXCur,y Get coords from graphics table 
0AF7 FD1147           (/home/strick/go/s):02080                  std   >GrfMem+gr0047     Save in GRFDRV mem
0AFA EC23             (/home/strick/go/s):02081                  ldd   Gt.GXCur+2,y Get coords from graphics table
0AFC FD1149           (/home/strick/go/s):02082                  std   >GrfMem+gr0047+2     Save in GRFDRV mem
0AFF EC02             (/home/strick/go/s):02083                  ldd   2,x
0B01 E323             (/home/strick/go/s):02084                  addd  Gt.GYCur,y
0B03 FD11B5           (/home/strick/go/s):02085                  std   >GrfMem+gr00B5
0B06 EC84             (/home/strick/go/s):02086                  ldd   ,x         Get X/Y coords from params
0B08 E321             (/home/strick/go/s):02087                  addd  Gt.GXCur,y Make relative
                      (/home/strick/go/s):02088                  ENDC
0B0A 20D8             (/home/strick/go/s):02089                  bra   L0A59      Save & bump param ptr
                      (/home/strick/go/s):02090         
                      (/home/strick/go/s):02091         ****************************
                      (/home/strick/go/s):02092         * Get status entry point
                      (/home/strick/go/s):02093         * Entry: A=Function call #
0B0C 8126             (/home/strick/go/s):02094         GetStt   cmpa  #SS.ScSiz  get screen size?
0B0E 274C             (/home/strick/go/s):02095                  beq   L0A9A      yes, go process
0B10 8191             (/home/strick/go/s):02096                  cmpa  #SS.Palet  get palettes?
0B12 2755             (/home/strick/go/s):02097                  beq   L0AA7      yes, go process
0B14 8193             (/home/strick/go/s):02098                  cmpa  #SS.ScTyp  get screen type?
0B16 277F             (/home/strick/go/s):02099                  beq   L0AD5      yes, go process
0B18 8196             (/home/strick/go/s):02100                  cmpa  #SS.FBRgs  get colors?
0B1A 10270096         (/home/strick/go/s):02101                  lbeq  L0AF4      yes, go process
0B1E 8197             (/home/strick/go/s):02102                  cmpa  #SS.DfPal  get default colors?
0B20 2763             (/home/strick/go/s):02103                  beq   L0AC3      yes, go process
                      (/home/strick/go/s):02104                  IFNE  CoGrf-1
0B22 8187             (/home/strick/go/s):02105                  cmpa  #SS.MnSel  menu select?
0B24 10270A46         (/home/strick/go/s):02106                  lbeq  L1515      yes, go process
                      (/home/strick/go/s):02107                  ENDC
0B28 818F             (/home/strick/go/s):02108                  cmpa  #SS.ScInf  screen info?
0B2A 2703             (/home/strick/go/s):02109                  beq   SS.SInf    yes, go process
0B2C 16F7A4           (/home/strick/go/s):02110                  lbra  L0A96      All others illegal
                      (/home/strick/go/s):02111         
                      (/home/strick/go/s):02112         * SS.ScInf processor ($8F)
                      (/home/strick/go/s):02113         * New call to get info on current screen for use with direct mapped video
                      (/home/strick/go/s):02114         *  Programmer can even handle non-full sized window
                      (/home/strick/go/s):02115         *  Programmer will still have to get screen type to determine # bytes/line &
                      (/home/strick/go/s):02116         *  # of rows
                      (/home/strick/go/s):02117         * Returns: X=Offset into first block of screen start
                      (/home/strick/go/s):02118         *          A=# 8k blocks required for screen
                      (/home/strick/go/s):02119         *          B=Start block #
                      (/home/strick/go/s):02120         *          Y=High byte=X start of window
                      (/home/strick/go/s):02121         *            Low byte= X size of window
                      (/home/strick/go/s):02122         *          U=High byte=Y start of window
                      (/home/strick/go/s):02123         *            Low byte= Y size of window
                      (/home/strick/go/s):02124         * It should be noted that these are the current working area, not the original
                      (/home/strick/go/s):02125         *  window start/sizes
                      (/home/strick/go/s):02126         
0B2F 8D5C             (/home/strick/go/s):02127         SS.SInf  bsr   L0ACB      get register & window table pointers
0B31 EC33             (/home/strick/go/s):02128                  ldd   Wt.LStrt,y get current screen logical start
0B33 8080             (/home/strick/go/s):02129                  suba  #$80       make it a offset into 1st block
0B35 ED04             (/home/strick/go/s):02130                  std   R$X,x      save it to caller
                      (/home/strick/go/s):02131                  IFNE  H6309
                      (/home/strick/go/s):02132                  ldq   Wt.CPX,y   Get X&Y coord starts & X/Y sizes
                      (/home/strick/go/s):02133                  exg   b,e        Swap so registers easier for programmer
                      (/home/strick/go/s):02134                  stq   R$Y,x      Save X values & Y values into callers Y & U
                      (/home/strick/go/s):02135                  ELSE
0B37 EC35             (/home/strick/go/s):02136                  ldd   Wt.CPX,y
0B39 A706             (/home/strick/go/s):02137                  sta   R$Y,x
0B3B E708             (/home/strick/go/s):02138                  stb   R$Y+2,x
0B3D F711B5           (/home/strick/go/s):02139                  stb   >GrfMem+gr00B5
0B40 EC37             (/home/strick/go/s):02140                  ldd   Wt.CPX+2,y
0B42 A707             (/home/strick/go/s):02141                  sta   R$Y+1,x
0B44 E709             (/home/strick/go/s):02142                  stb   R$Y+3,x
0B46 F711B6           (/home/strick/go/s):02143                  stb   >GrfMem+gr00B5+1
                      (/home/strick/go/s):02144                  ENDC
0B49 ECB8F0           (/home/strick/go/s):02145                  ldd   [Wt.STbl,y] get screen type & start block #
0B4C 840F             (/home/strick/go/s):02146                  anda  #$0f       make it fit table
0B4E 338C04           (/home/strick/go/s):02147                  leau  <NmBlks-1,pc point to # blocks needed for screen type
0B51 A6C6             (/home/strick/go/s):02148                  lda   a,u        get # blocks
0B53 ED01             (/home/strick/go/s):02149                  std   R$D,x      save it to caller
0B55 39               (/home/strick/go/s):02150                  rts   
                      (/home/strick/go/s):02151         
0B56 020204040101     (/home/strick/go/s):02152         NmBlks   fcb   2,2,4,4,1,1
                      (/home/strick/go/s):02153         
                      (/home/strick/go/s):02154         * SS.ScSiz processing - Current size (with CWArea's in effect), not DWSet size
0B5C 8D2F             (/home/strick/go/s):02155         L0A9A    bsr   L0ACB      get register stack pointer & window table pointer
0B5E 4F               (/home/strick/go/s):02156                  clra  
0B5F E637             (/home/strick/go/s):02157                  ldb   Wt.SZX,y   get X size
0B61 ED04             (/home/strick/go/s):02158                  std   R$X,x      save it to caller
0B63 E638             (/home/strick/go/s):02159                  ldb   Wt.SZY,y   get Y size
0B65 ED06             (/home/strick/go/s):02160                  std   R$Y,x      save it to caller
0B67 5F               (/home/strick/go/s):02161                  clrb  
0B68 39               (/home/strick/go/s):02162                  rts   
                      (/home/strick/go/s):02163         
                      (/home/strick/go/s):02164         * SS.Palet processing
0B69 8D22             (/home/strick/go/s):02165         L0AA7    bsr   L0ACB      get register stack & window table pointers
0B6B 10AE30           (/home/strick/go/s):02166                  ldy   Wt.STbl,y  get screen table pointer
0B6E 31A810           (/home/strick/go/s):02167                  leay  St.Pals,y  point to palettes
0B71 EE04             (/home/strick/go/s):02168         L0AAF    ldu   R$X,x      get callers buffer pointer
0B73 9E50             (/home/strick/go/s):02169                  ldx   <D.Proc    get task # of caller
0B75 E606             (/home/strick/go/s):02170                  ldb   P$Task,x
0B77 9E4A             (/home/strick/go/s):02171                  ldx   <D.SysPrc  get task # of system
0B79 A606             (/home/strick/go/s):02172                  lda   P$Task,x
0B7B 1F21             (/home/strick/go/s):02173                  tfr   y,x
0B7D 108E0010         (/home/strick/go/s):02174         L0ABB    ldy   #16        get # bytes to move
0B81 103F38           (/home/strick/go/s):02175                  os9   F$Move     move 'em
0B84 39               (/home/strick/go/s):02176                  rts              return
                      (/home/strick/go/s):02177         
                      (/home/strick/go/s):02178         * SS.DfPal processing
0B85 AE26             (/home/strick/go/s):02179         L0AC3    ldx   PD.RGS,y   get register stack pointer
0B87 10BE1019         (/home/strick/go/s):02180                  ldy   >WGlobal+G.DefPal     get pointer to default palettes
0B8B 20E4             (/home/strick/go/s):02181                  bra   L0AAF      go move 'em
                      (/home/strick/go/s):02182         
                      (/home/strick/go/s):02183         * Get register stack pointer into X, window table pointer into Y & global mem
0B8D AE26             (/home/strick/go/s):02184         L0ACB    ldx   PD.RGS,y   Get ptr to caller's register stack
0B8F 17FB2C           (/home/strick/go/s):02185                  lbsr  L06A0      Go find window table entry
0B92 1025FB23         (/home/strick/go/s):02186                  lbcs  L069B      Error, exit
0B96 39               (/home/strick/go/s):02187                  rts              Return
                      (/home/strick/go/s):02188         
                      (/home/strick/go/s):02189         * SS.ScTyp processing
0B97 8DF4             (/home/strick/go/s):02190         L0AD5    bsr   L0ACB      get register stack & window table pointers
0B99 E6B8F0           (/home/strick/go/s):02191                  ldb   [Wt.STbl,y] get screen type
0B9C 2B04             (/home/strick/go/s):02192                  bmi   L0AE2      text, skip ahead
0B9E CB04             (/home/strick/go/s):02193                  addb  #$04       add 4 to make it a user screen type
0BA0 200A             (/home/strick/go/s):02194                  bra   L0AEC      go save it
                      (/home/strick/go/s):02195         
0BA2 C186             (/home/strick/go/s):02196         L0AE2    cmpb  #$86       40 column text?
0BA4 2604             (/home/strick/go/s):02197                  bne   L0AEA      no, skip ahead
0BA6 C601             (/home/strick/go/s):02198                  ldb   #$01       get screen type for 40 column text
0BA8 2002             (/home/strick/go/s):02199                  bra   L0AEC      save it
                      (/home/strick/go/s):02200         
0BAA C602             (/home/strick/go/s):02201         L0AEA    ldb   #$02       get screen type for 80 column text
0BAC E701             (/home/strick/go/s):02202         L0AEC    stb   R$A,x      save it to caller
0BAE 5F               (/home/strick/go/s):02203                  clrb  
0BAF 39               (/home/strick/go/s):02204                  rts   
                      (/home/strick/go/s):02205         
                      (/home/strick/go/s):02206         * Color mask for fore/back palette registers
0BB0 01               (/home/strick/go/s):02207         L0AF0    fcb   $01        2 color screens
0BB1 03               (/home/strick/go/s):02208                  fcb   $03        4 color screens
0BB2 0F               (/home/strick/go/s):02209                  fcb   $0f        16 color screens
0BB3 0F               (/home/strick/go/s):02210                  fcb   $0f        16 color screens
                      (/home/strick/go/s):02211         
                      (/home/strick/go/s):02212         * SS.FBRgs processing
0BB4 8DD7             (/home/strick/go/s):02213         L0AF4    bsr   L0ACB      get register stack & window table pointers
0BB6 8D08             (/home/strick/go/s):02214                  bsr   L0B01      Go get fore/back ground colors
0BB8 ED01             (/home/strick/go/s):02215                  std   R$D,x      Save in caller's D
0BBA E645             (/home/strick/go/s):02216                  ldb   St.Brdr,u  Get border register
0BBC 4F               (/home/strick/go/s):02217                  clra             D=border color
0BBD ED04             (/home/strick/go/s):02218                  std   R$X,x      Save in caller's X & return
0BBF 39               (/home/strick/go/s):02219                  rts   
                      (/home/strick/go/s):02220         
0BC0 E6B8F0           (/home/strick/go/s):02221         L0B01    ldb   [Wt.STbl,y] Get screen type from screen table
0BC3 C407             (/home/strick/go/s):02222                  andb  #$07       Mask off text mode, etc.
0BC5 54               (/home/strick/go/s):02223                  lsrb             Divide by 2 (for similiar screens)
0BC6 338CE7           (/home/strick/go/s):02224                  leau  <L0AF0,pc  Point to masking table
0BC9 E6C5             (/home/strick/go/s):02225                  ldb   b,u        Get table entry
0BCB 1F98             (/home/strick/go/s):02226                  tfr   b,a        Dupe for background color too
                      (/home/strick/go/s):02227                  IFNE  H6309
                      (/home/strick/go/s):02228                  andd  Wt.Fore,y  Mask with fore/bckground colors from window tbl
                      (/home/strick/go/s):02229                  ELSE
0BCD A426             (/home/strick/go/s):02230                  anda  Wt.Fore,y
0BCF E427             (/home/strick/go/s):02231                  andb  Wt.Fore+1,y
                      (/home/strick/go/s):02232                  ENDC
0BD1 EE30             (/home/strick/go/s):02233                  ldu   Wt.STbl,y  Get screen table ptr for border reg
0BD3 39               (/home/strick/go/s):02234                  rts   
                      (/home/strick/go/s):02235         
                      (/home/strick/go/s):02236         ****************************
                      (/home/strick/go/s):02237         * Set status entry point
                      (/home/strick/go/s):02238         * Entry: U=Static memory pointer
                      (/home/strick/go/s):02239         *        Y=Path descriptor pointer
0BD4 8129             (/home/strick/go/s):02240         SetStt   cmpa  #SS.Open   Open window call (for /W)
0BD6 2731             (/home/strick/go/s):02241                  beq   L0B4B
0BD8 8184             (/home/strick/go/s):02242                  cmpa  #SS.MpGPB  Map Get/Put buffer into callers program space
0BDA 102700A3         (/home/strick/go/s):02243                  lbeq  L0BD1
0BDE 8197             (/home/strick/go/s):02244                  cmpa  #SS.DfPal  Set default palettes
0BE0 2715             (/home/strick/go/s):02245                  beq   L0B38
                      (/home/strick/go/s):02246                  IFNE  CoGrf-1
0BE2 8186             (/home/strick/go/s):02247                  cmpa  #SS.WnSet
0BE4 102701CA         (/home/strick/go/s):02248                  lbeq  L0D23
0BE8 8188             (/home/strick/go/s):02249                  cmpa  #SS.SBar
0BEA 10270F2C         (/home/strick/go/s):02250                  lbeq  L1AB9
0BEE 8195             (/home/strick/go/s):02251                  cmpa  #SS.UmBar  Update menu bar
0BF0 1027085E         (/home/strick/go/s):02252                  lbeq  L13F5
                      (/home/strick/go/s):02253                  ENDC
0BF4 16F6DC           (/home/strick/go/s):02254                  lbra  L0A96
                      (/home/strick/go/s):02255         
                      (/home/strick/go/s):02256         * SS.DfPal entry point
0BF7 AE26             (/home/strick/go/s):02257         L0B38    ldx   PD.RGS,y   get register stack pointer
0BF9 AE04             (/home/strick/go/s):02258                  ldx   R$X,x      get pointer to palettes
0BFB DE50             (/home/strick/go/s):02259                  ldu   <D.Proc    get task # of caller
0BFD A646             (/home/strick/go/s):02260                  lda   P$Task,u
0BFF DE4A             (/home/strick/go/s):02261                  ldu   <D.SysPrc  get task # of system
0C01 E646             (/home/strick/go/s):02262                  ldb   P$Task,u
0C03 FE1019           (/home/strick/go/s):02263                  ldu   >WGlobal+G.DefPal     get pointer to destination of palettes
0C06 16FF74           (/home/strick/go/s):02264                  lbra  L0ABB      move 'em
                      (/home/strick/go/s):02265         
                      (/home/strick/go/s):02266         * SS.Open processor
                      (/home/strick/go/s):02267         * Entry: X=Register stack pointer
                      (/home/strick/go/s):02268         *        U=Static memory pointer
                      (/home/strick/go/s):02269         *        Y=Path descriptor pointer
0C09 3460             (/home/strick/go/s):02270         L0B4B    pshs  u,y        preserve registers
0C0B AE23             (/home/strick/go/s):02271                  ldx   PD.DEV,y   get pointer to device table entry
0C0D AE04             (/home/strick/go/s):02272                  ldx   V$DESC,x   get pointer to descriptor
0C0F E6882E           (/home/strick/go/s):02273                  ldb   IT.WND,x   get window # from descriptor
0C12 2A6A             (/home/strick/go/s):02274                  bpl   L0BCD      not a legal window descriptor, return
0C14 3410             (/home/strick/go/s):02275                  pshs  x          save device descriptor pointer
     0C16             (/home/strick/go/s):02276         L0B58    equ   *
                      (/home/strick/go/s):02277                  IFNE  H6309
                      (/home/strick/go/s):02278                  clrd             start window #=0
                      (/home/strick/go/s):02279                  ELSE
0C16 4F               (/home/strick/go/s):02280                  clra
0C17 5F               (/home/strick/go/s):02281                  clrb
                      (/home/strick/go/s):02282                  ENDC
0C18 17F608           (/home/strick/go/s):02283                  lbsr  L025B      find a free window in bit map
0C1B 2406             (/home/strick/go/s):02284                  bcc   L0B65      got one, skip ahead
0C1D 3570             (/home/strick/go/s):02285                  puls  u,y,x      purge stack
0C1F 53               (/home/strick/go/s):02286                  comb             set carry
0C20 C6DD             (/home/strick/go/s):02287                  ldb   #E$MNF     get module not found error
0C22 39               (/home/strick/go/s):02288                  rts              return
                      (/home/strick/go/s):02289         
                      (/home/strick/go/s):02290         * Found a free window
0C23 3404             (/home/strick/go/s):02291         L0B65    pshs  b          save window # of free entry
0C25 17F5EC           (/home/strick/go/s):02292                  lbsr  L024A      allocate the window we found
0C28 108E1200         (/home/strick/go/s):02293                  ldy   #$1200     Point to a buffer area (GPLoad area)
0C2C C677             (/home/strick/go/s):02294                  ldb   #'w        get window name prefix
0C2E E7A0             (/home/strick/go/s):02295                  stb   ,y+        put it in buffer
0C30 E6E4             (/home/strick/go/s):02296                  ldb   ,s         get window # that was free
                      (/home/strick/go/s):02297         * Convert window # in B to ASCII eqivalent with high bit set
                      (/home/strick/go/s):02298         
                      (/home/strick/go/s):02299                  IFNE  H6309
                      (/home/strick/go/s):02300                  divd  #10        divide it by 10
                      (/home/strick/go/s):02301                  ELSE
0C32 86FF             (/home/strick/go/s):02302                  lda   #-1
0C34 4C               (/home/strick/go/s):02303         L0B87b   inca
0C35 C00A             (/home/strick/go/s):02304                  subb  #10
0C37 24FB             (/home/strick/go/s):02305                  bcc   L0B87b
0C39 CB0A             (/home/strick/go/s):02306                  addb  #10
0C3B 1E89             (/home/strick/go/s):02307                  exg   a,b
0C3D C100             (/home/strick/go/s):02308                  cmpb  #0
                      (/home/strick/go/s):02309                  ENDC
0C3F 2704             (/home/strick/go/s):02310                  beq   L0B87      if answer is 0 there is only 1 digit, skip ahead 
0C41 CA30             (/home/strick/go/s):02311                  orb   #$30       make first digit ASCII
0C43 E7A0             (/home/strick/go/s):02312                  stb   ,y+        put it in buffer
0C45 8AB0             (/home/strick/go/s):02313         L0B87    ora   #$B0       make remainder ASCII with high bit set
0C47 A7A0             (/home/strick/go/s):02314                  sta   ,y+        put it in buffer
0C49 327E             (/home/strick/go/s):02315         L0B92    leas  -2,s       make a buffer for process decriptor pointer
0C4B 17F5B2           (/home/strick/go/s):02316                  lbsr  L0238      switch to system process descriptor
0C4E 8E1200           (/home/strick/go/s):02317                  ldx   #$1200     Point to calculated dsc. name
0C51 86F1             (/home/strick/go/s):02318                  lda   #Devic+Objct get module type
0C53 103F00           (/home/strick/go/s):02319                  os9   F$Link     try & link it
0C56 17F5B3           (/home/strick/go/s):02320                  lbsr  L0244      switch back to current process
0C59 3262             (/home/strick/go/s):02321                  leas  2,s        purge stack
0C5B 2404             (/home/strick/go/s):02322                  bcc   L0BAB      it's linked, skip ahead
0C5D 3261             (/home/strick/go/s):02323         L0BA7    leas  1,s        purge window #
0C5F 20B5             (/home/strick/go/s):02324                  bra   L0B58      go look for another one
                      (/home/strick/go/s):02325         
                      (/home/strick/go/s):02326         * Got a device descriptor, put into device table & save window # into static
0C61 A6C826           (/home/strick/go/s):02327         L0BAB    lda   IT.PAR,u   valid window?
0C64 2AF7             (/home/strick/go/s):02328                  bpl   L0BA7      no, go look for another one
0C66 10AE63           (/home/strick/go/s):02329                  ldy   3,s        get path descriptor pointer
0C69 AE23             (/home/strick/go/s):02330                  ldx   PD.DEV,y   get pointer to device table
0C6B EF04             (/home/strick/go/s):02331                  stu   V$DESC,x   save pointer to descriptor into it
0C6D E6E4             (/home/strick/go/s):02332                  ldb   ,s         get window #
0C6F EE65             (/home/strick/go/s):02333                  ldu   5,s        get static mem pointer
0C71 E7C836           (/home/strick/go/s):02334                  stb   V.DWNum,u    save window # as active window in static mem
0C74 EE61             (/home/strick/go/s):02335                  ldu   1,s        get pointer to descriptor
0C76 103F02           (/home/strick/go/s):02336                  os9   F$UnLink   unlink it from system map
0C79 EE65             (/home/strick/go/s):02337                  ldu   5,s        get static mem pointer
0C7B 3267             (/home/strick/go/s):02338                  leas  7,s        purge stack
0C7D 39               (/home/strick/go/s):02339                  rts              Return with or without error
                      (/home/strick/go/s):02340         
0C7E 5F               (/home/strick/go/s):02341         L0BCD    clrb             No error
0C7F 35E0             (/home/strick/go/s):02342                  puls  u,y,pc     Restore regs & return
                      (/home/strick/go/s):02343         
                      (/home/strick/go/s):02344         * SS.MpGPB (map get/put buffer)
                      (/home/strick/go/s):02345         * Parameters: X=Group/Buffer #'s
                      (/home/strick/go/s):02346         *             Y=Map/Un-Map flag, 0=Un-Map, 1+=Map
                      (/home/strick/go/s):02347         * Returns   : X=Start address of buffer in 64k user map
                      (/home/strick/go/s):02348         *             Y=Length of buffer
                      (/home/strick/go/s):02349         * Entry: U=Static memory pointer
                      (/home/strick/go/s):02350         *        Y=Path descriptor pointer
0C81 AE26             (/home/strick/go/s):02351         L0BD1    ldx   PD.RGS,y   get register stack pointer
0C83 3410             (/home/strick/go/s):02352                  pshs  x          preserve it
0C85 17FA36           (/home/strick/go/s):02353                  lbsr  L06A0      verify window table
0C88 EC04             (/home/strick/go/s):02354                  ldd   R$X,x      get group/buffer #'s
0C8A FD1157           (/home/strick/go/s):02355                  std   >GrfMem+gr0057     save it to grfdrv mem
0C8D C638             (/home/strick/go/s):02356                  ldb   #$38       get grfdrv function call to map
0C8F 17F6A7           (/home/strick/go/s):02357                  lbsr  L0101      let grfdrv calculate block # & count
0C92 F61197           (/home/strick/go/s):02358                  ldb   >GrfMem+gr0097     get block #
0C95 B61199           (/home/strick/go/s):02359                  lda   >GrfMem+gr0099     get # blocks long
0C98 3510             (/home/strick/go/s):02360                  puls  x          Get register stack ptr back
0C9A 6D07             (/home/strick/go/s):02361                  tst   R$Y+1,x    mapping or un-mapping?
0C9C 2728             (/home/strick/go/s):02362                  beq   L0C1F      un-map, remove it from process space
                      (/home/strick/go/s):02363         * Map the get/put buffer into process space
0C9E 3456             (/home/strick/go/s):02364                  pshs  d,x,u      save block #/# of blocks, reg stack & global
0CA0 8D3B             (/home/strick/go/s):02365                  bsr   L0C31      Make sure all blocks needed are there
0CA2 241E             (/home/strick/go/s):02366                  bcc   L0C1B      Yes, exit
0CA4 4F               (/home/strick/go/s):02367                  clra  
0CA5 E661             (/home/strick/go/s):02368                  ldb   1,s        get starting block #
0CA7 1F01             (/home/strick/go/s):02369                  tfr   d,x
0CA9 E6E4             (/home/strick/go/s):02370                  ldb   ,s         get # blocks
0CAB 103F4F           (/home/strick/go/s):02371                  os9   F$MapBlk   map blocks into process space
0CAE E761             (/home/strick/go/s):02372                  stb   1,s        save error code if any
0CB0 250E             (/home/strick/go/s):02373                  bcs   L0C19      return if there was a error
0CB2 1F30             (/home/strick/go/s):02374                  tfr   u,d        copy start address to D
0CB4 AE62             (/home/strick/go/s):02375                  ldx   2,s        get register stack pointer
0CB6 F3119D           (/home/strick/go/s):02376                  addd  >GrfMem+gr009D     add in offset to buffer
0CB9 ED04             (/home/strick/go/s):02377                  std   R$X,x      save offset into block of buffer
0CBB FC119B           (/home/strick/go/s):02378                  ldd   >GrfMem+gr009B     get length of buffer
0CBE ED06             (/home/strick/go/s):02379                  std   R$Y,x      save it into callers Y
0CC0 35D6             (/home/strick/go/s):02380         L0C19    puls  d,x,u,pc   restore regs & return
                      (/home/strick/go/s):02381         
0CC2 3262             (/home/strick/go/s):02382         L0C1B    leas  2,s        purge stack
0CC4 35D0             (/home/strick/go/s):02383                  puls  pc,u,x
                      (/home/strick/go/s):02384         
                      (/home/strick/go/s):02385         * Remove get/put buffer from process space
0CC6 3432             (/home/strick/go/s):02386         L0C1F    pshs  a,x,y      preserve # blocks, register stack & window table
0CC8 8D13             (/home/strick/go/s):02387                  bsr   L0C31      Go verify all blocks are correct & contiguous
0CCA 250F             (/home/strick/go/s):02388                  bcs   L0C2E      Nope, exit with error
                      (/home/strick/go/s):02389                  IFNE  H6309
                      (/home/strick/go/s):02390                  lde   ,s         Get counter back
                      (/home/strick/go/s):02391                  ELSE
0CCC A6E4             (/home/strick/go/s):02392                  lda   ,s
0CCE B711B5           (/home/strick/go/s):02393                  sta   >GrfMem+gr00B5
                      (/home/strick/go/s):02394                  ENDC
0CD1 CC333E           (/home/strick/go/s):02395                  ldd   #DAT.Free  Empty DAT marker
                      (/home/strick/go/s):02396         
0CD4 ED81             (/home/strick/go/s):02397         L0C28    std   ,x++       Save them in DAT image
                      (/home/strick/go/s):02398                  IFNE  H6309
                      (/home/strick/go/s):02399                  dece             Keep marking unused blocks until done
                      (/home/strick/go/s):02400                  ELSE
0CD6 7A11B5           (/home/strick/go/s):02401                  dec   >GrfMem+gr00B5
                      (/home/strick/go/s):02402                  ENDC
0CD9 26F9             (/home/strick/go/s):02403                  bne   L0C28
0CDB 35B2             (/home/strick/go/s):02404         L0C2E    puls  a,x,y,pc   Restore regs & return
                      (/home/strick/go/s):02405         
                      (/home/strick/go/s):02406         * Verify blocks in process DAT image
                      (/home/strick/go/s):02407         * Entry: A=# blocks in GP buffer
                      (/home/strick/go/s):02408         *        B=Start block #
                      (/home/strick/go/s):02409         *        X=Caller's register stack ptr
                      (/home/strick/go/s):02410         * Exit:  A=block #*16 in DAT image
                      (/home/strick/go/s):02411         
                      (/home/strick/go/s):02412                  IFNE  H6309
0CDD                  (/home/strick/go/s):02413         L0C31    tfr   a,e        copy start block
                      (/home/strick/go/s):02414                  ldf   #8         get # DAT slots
                      (/home/strick/go/s):02415                  ELSE
0CDD 3404             (/home/strick/go/s):02416         L0C31    pshs  b
0CDF C608             (/home/strick/go/s):02417                  ldb   #8
0CE1 FD11B5           (/home/strick/go/s):02418                  std   >GrfMem+gr00B5
0CE4 3504             (/home/strick/go/s):02419                  puls  b
                      (/home/strick/go/s):02420                  ENDC
0CE6 9E50             (/home/strick/go/s):02421                  ldx   <D.Proc    get current process pointer
0CE8 308850           (/home/strick/go/s):02422                  leax  P$DATImg+16,x point to end of DAT image
                      (/home/strick/go/s):02423                  IFNE  H6309
                      (/home/strick/go/s):02424                  addr  e,b        Add # blocks to start block #
                      (/home/strick/go/s):02425                  ELSE
0CEB FB11B5           (/home/strick/go/s):02426                  addb  >GrfMem+gr00B5
                      (/home/strick/go/s):02427                  ENDC
0CEE 4F               (/home/strick/go/s):02428                  clra             Clear high byte of D 
0CEF 5A               (/home/strick/go/s):02429                  decb             Adjust for zero based
0CF0 10A383           (/home/strick/go/s):02430         L0C40    cmpd  ,--x       Same block as DAT image?
0CF3 2709             (/home/strick/go/s):02431                  beq   L0C4B      yes, skip ahead
                      (/home/strick/go/s):02432                  IFNE  H6309
                      (/home/strick/go/s):02433                  decf             No, dec block counter
                      (/home/strick/go/s):02434                  ELSE
0CF5 7A11B6           (/home/strick/go/s):02435                  dec   >GrfMem+gr00B5+1
                      (/home/strick/go/s):02436                  ENDC
0CF8 26F6             (/home/strick/go/s):02437                  bne   L0C40      Do until all 8 blocks are checked
0CFA 53               (/home/strick/go/s):02438         L0C62    comb             Exit with boundary (bad page address) error
0CFB C6D2             (/home/strick/go/s):02439                  ldb   #E$BPAddr
0CFD 39               (/home/strick/go/s):02440                  rts   
                      (/home/strick/go/s):02441         
     0CFE             (/home/strick/go/s):02442         L0C4B    equ   *
                      (/home/strick/go/s):02443                  IFNE  H6309
                      (/home/strick/go/s):02444                  decf             Dec block # counter
                      (/home/strick/go/s):02445                  dece             Dec # blocks in buffer counter
                      (/home/strick/go/s):02446                  ELSE
0CFE 7A11B6           (/home/strick/go/s):02447                  dec   >GrfMem+gr00B5+1
0D01 7A11B5           (/home/strick/go/s):02448                  dec   >GrfMem+gr00B5
                      (/home/strick/go/s):02449                  ENDC
0D04 2707             (/home/strick/go/s):02450                  beq   L0C58      Do until GP blocks are checked
0D06 5A               (/home/strick/go/s):02451                  decb             Dec block #
0D07 E183             (/home/strick/go/s):02452                  cmpb  ,--x       Same as previous one in DAT image
0D09 27F3             (/home/strick/go/s):02453                  beq   L0C4B      Yes, keep going
0D0B 20ED             (/home/strick/go/s):02454                  bra   L0C62      No, exit with bad page address error
                      (/home/strick/go/s):02455         
                      (/home/strick/go/s):02456         
                      (/home/strick/go/s):02457                  IFNE  H6309
0D0D                  (/home/strick/go/s):02458         L0C58    tfr   f,a        Move block # within DAT to proper reg
                      (/home/strick/go/s):02459                  ELSE
0D0D B611B6           (/home/strick/go/s):02460         L0C58    lda   >GrfMem+gr00B5+1
                      (/home/strick/go/s):02461                  ENDC
0D10 48               (/home/strick/go/s):02462                  lsla             Multiply x 16
0D11 48               (/home/strick/go/s):02463                  lsla  
0D12 48               (/home/strick/go/s):02464                  lsla  
0D13 48               (/home/strick/go/s):02465                  lsla  
0D14 5F               (/home/strick/go/s):02466                  clrb  
0D15 39               (/home/strick/go/s):02467         L0CF1    rts              return
                      (/home/strick/go/s):02468         
                      (/home/strick/go/s):02469         ******************************
                      (/home/strick/go/s):02470         * Special windowing processor (called from AltIRQ in VTIO)
                      (/home/strick/go/s):02471         * Entry: A=$00 - Screen has changed in some way
                      (/home/strick/go/s):02472         *          $01 - Update mouse packet window region (Pt.Stat)
                      (/home/strick/go/s):02473         *          $02 - Update text & graphics cursor
                      (/home/strick/go/s):02474         *          $03 - Update auto follow mouse
0D16 4D               (/home/strick/go/s):02475         L0C68    tsta             Screen change?
0D17 2710             (/home/strick/go/s):02476                  beq   L0C7F      Yes, go do
0D19 4A               (/home/strick/go/s):02477                  deca             Update mouse packet?
                      (/home/strick/go/s):02478         * TODO: Does update mouse packet go in CoGrf?
                      (/home/strick/go/s):02479                  IFNE  CoGrf-1
0D1A 102710BA         (/home/strick/go/s):02480                  lbeq  L1CC8      Yes, go do
                      (/home/strick/go/s):02481                  ENDC
0D1E 4A               (/home/strick/go/s):02482                  deca             Update cursors?
0D1F 2763             (/home/strick/go/s):02483                  beq   L0CE7      Yes, go do
                      (/home/strick/go/s):02484         * TODO: Does auto-follow mouse go in CoGrf?
                      (/home/strick/go/s):02485                  IFNE  CoGrf-1
0D21 4A               (/home/strick/go/s):02486                  deca             Update auto-follow mouse?
0D22 10270E85         (/home/strick/go/s):02487                  lbeq  L1B4D      Yes, go do
                      (/home/strick/go/s):02488                  ENDC
0D26 16F5AA           (/home/strick/go/s):02489                  lbra  L0A96
                      (/home/strick/go/s):02490         
                      (/home/strick/go/s):02491         * Active window has changed, update everything
0D29 17F9C3           (/home/strick/go/s):02492         L0C7F    lbsr  L06AE      Get window table pointer
0D2C EC30             (/home/strick/go/s):02493                  ldd   Wt.STbl,y  Screen table active?
                      (/home/strick/go/s):02494         * NOTE: IS THIS THE WHITE SCREEN BUG???
0D2E 2BE5             (/home/strick/go/s):02495                  bmi   L0CF1      No, return
                      (/home/strick/go/s):02496         * Check for de-activation of previous window
0D30 6FE2             (/home/strick/go/s):02497         L0C86    clr   ,-s        clear activate/deactivate flag
0D32 BE1022           (/home/strick/go/s):02498                  ldx   >WGlobal+G.PrWMPt     get previous window static mem pointer
0D35 BC1020           (/home/strick/go/s):02499                  cmpx  >WGlobal+G.CurDev     Same as current device?
0D38 271D             (/home/strick/go/s):02500                  beq   L0CB3      Yes, activate current window
0D3A 6CE4             (/home/strick/go/s):02501                  inc   ,s         flag de-activation of last used window
0D3C FE1022           (/home/strick/go/s):02502                  ldu   >WGlobal+G.PrWMPt     get previous device static mem pointer
0D3F 2716             (/home/strick/go/s):02503                  beq   L0CB3      nothing there, skip ahead
0D41 3420             (/home/strick/go/s):02504                  pshs  y          preserve new window table pointer
0D43 8D49             (/home/strick/go/s):02505                  bsr   L0CF2      any overlay windows or frames?
                      (/home/strick/go/s):02506                  IFNE  CoGrf-1
0D45 2503             (/home/strick/go/s):02507                  bcs   L0CA3      no, skip ahead
0D47 17036E           (/home/strick/go/s):02508                  lbsr  L1034      set menu bar to in-active state
                      (/home/strick/go/s):02509                  ENDC
0D4A B610BE           (/home/strick/go/s):02510         L0CA3    lda   >WGlobal+g00BE     get new window table flag
0D4D 2B06             (/home/strick/go/s):02511                  bmi   L0CB1      not used, skip ahead
0D4F FE1022           (/home/strick/go/s):02512                  ldu   >WGlobal+G.PrWMPt     get previous device static mem pointer
0D52 A7C835           (/home/strick/go/s):02513                  sta   V.WinNum,u   save window table # into it
0D55 3520             (/home/strick/go/s):02514         L0CB1    puls  y          restore window table pointer
                      (/home/strick/go/s):02515         * Send select to grfdrv
0D57 C610             (/home/strick/go/s):02516         L0CB3    ldb   #$10       Get select callcode
0D59 17F5DD           (/home/strick/go/s):02517                  lbsr  L0101      Send it to grfdrv
0D5C FE1020           (/home/strick/go/s):02518                  ldu   >WGlobal+G.CurDev     Get current device static mem pointer
                      (/home/strick/go/s):02519         * Check for activation of current window
0D5F 6DE4             (/home/strick/go/s):02520                  tst   ,s         did we de-activate last used window?
0D61 271B             (/home/strick/go/s):02521                  beq   L0CE1      no, skip activate
0D63 3460             (/home/strick/go/s):02522                  pshs  y,u        Preserve regs
0D65 8D27             (/home/strick/go/s):02523                  bsr   L0CF2      any overlay or framed windows?
                      (/home/strick/go/s):02524                  IFNE  CoGrf-1
0D67 2503             (/home/strick/go/s):02525                  bcs   L0CCA      no, skip ahead
0D69 1706DA           (/home/strick/go/s):02526                  lbsr  L13E9      set menu bar to active state
                      (/home/strick/go/s):02527                  ENDC
0D6C 10BE1020         (/home/strick/go/s):02528         L0CCA    ldy   >WGlobal+G.CurDev     get current device mem pointer
0D70 10BF1022         (/home/strick/go/s):02529                  sty   >WGlobal+G.PrWMPt     save it as previous
0D74 3560             (/home/strick/go/s):02530                  puls  u,y        Get Y & static mem ptr back for possible overlay
0D76 B610BE           (/home/strick/go/s):02531                  lda   >WGlobal+g00BE     get overlay window #
0D79 2B03             (/home/strick/go/s):02532                  bmi   L0CE1      Wasn't an overlay, skip ahead
0D7B A7C835           (/home/strick/go/s):02533                  sta   V.WinNum,u   save it as current
0D7E 3261             (/home/strick/go/s):02534         L0CE1    leas  1,s        purge stack
0D80 6E9F10C4         (/home/strick/go/s):02535                  jmp   [>WGlobal+G.MsInit]   initialize mouse & return
                      (/home/strick/go/s):02536         
                      (/home/strick/go/s):02537         * Update text & mouse cursors
0D84 17F937           (/home/strick/go/s):02538         L0CE7    lbsr  L06A0      verify window table
0D87 258C             (/home/strick/go/s):02539                  bcs   L0CF1      not good, return error
0D89 C646             (/home/strick/go/s):02540         L0CEC    ldb   #$46       get set window code
0D8B 16F5AB           (/home/strick/go/s):02541                  lbra  L0101      send it to grfdrv
                      (/home/strick/go/s):02542         
                      (/home/strick/go/s):02543         * Checks for any overlay windows & framed or scroll barred windows
                      (/home/strick/go/s):02544         * Entry: U=Static mem pointer
                      (/home/strick/go/s):02545         * Exit : Carry set=No overlay windows & No framed/scroll barred window
                      (/home/strick/go/s):02546         *                  $BE in global mem will be $FF
                      (/home/strick/go/s):02547         *        Carry clear=There is 2 possibilitys here 1: Framed or scroll barred
                      (/home/strick/go/s):02548         *                    window or 2: Overlay window is present, $BE in global
                      (/home/strick/go/s):02549         *                    will contain the current window table # & $35 in static
                      (/home/strick/go/s):02550         *                    memory of current device will be switched to the
                      (/home/strick/go/s):02551         *                    parent window of the overlay
0D8E 86FF             (/home/strick/go/s):02552         L0CF2    lda   #$FF       initialize new window table flag
0D90 B710BE           (/home/strick/go/s):02553                  sta   >WGlobal+g00BE
0D93 17F959           (/home/strick/go/s):02554         L0CFA    lbsr  L06AE      get window table pointer of this window
                      (/home/strick/go/s):02555                  IFNE  CoGrf-1
0D96 170138           (/home/strick/go/s):02556                  lbsr  L0E34      framed or scroll barred window?
0D99 2501             (/home/strick/go/s):02557                  bcs   L0D06      no, skip ahead
0D9B 39               (/home/strick/go/s):02558                  rts   
                      (/home/strick/go/s):02559                  ENDC
                      (/home/strick/go/s):02560         
                      (/home/strick/go/s):02561         * No framed or scroll barred window, check for overlay window
0D9C A632             (/home/strick/go/s):02562         L0D06    lda   Wt.BLnk,y  is this a overlay window?
0D9E 2B10             (/home/strick/go/s):02563                  bmi   L0D20      no, return carry set
0DA0 E6C835           (/home/strick/go/s):02564                  ldb   V.WinNum,u   get current window table #
0DA3 7D10BE           (/home/strick/go/s):02565                  tst   >WGlobal+g00BE     already have one?
0DA6 2A03             (/home/strick/go/s):02566                  bpl   L0D1B      yes, skip ahead
0DA8 F710BE           (/home/strick/go/s):02567                  stb   >WGlobal+g00BE     save current window #
0DAB A7C835           (/home/strick/go/s):02568         L0D1B    sta   V.WinNum,u   save back link as current window in static mem
0DAE 20E3             (/home/strick/go/s):02569                  bra   L0CFA      go check it out
                      (/home/strick/go/s):02570         
0DB0 43               (/home/strick/go/s):02571         L0D20    coma             set carry & return
0DB1 39               (/home/strick/go/s):02572                  rts   
                      (/home/strick/go/s):02573         
                      (/home/strick/go/s):02574                  IFNE  CoGrf-1
                      (/home/strick/go/s):02575         * SS.WnSet SetStt call processor
0DB2 170623           (/home/strick/go/s):02576         L0D23    lbsr  L1358      setup the graphics table entry
0DB5 AE26             (/home/strick/go/s):02577                  ldx   PD.RGS,y   get register stack pointer
0DB7 E607             (/home/strick/go/s):02578                  ldb   R$Y+1,x    get requested window type
0DB9 C105             (/home/strick/go/s):02579                  cmpb  #WT.PBox   past maximum?
0DBB 1022F92C         (/home/strick/go/s):02580                  lbhi  L0697      yes, return error
0DBF 58               (/home/strick/go/s):02581                  lslb             adjust for 2 bytes/entry
0DC0 308C04           (/home/strick/go/s):02582                  leax  <L0D3C,pc  point to vector table
0DC3 EC85             (/home/strick/go/s):02583                  ldd   b,x        get offset
0DC5 6E8B             (/home/strick/go/s):02584                  jmp   d,x        continue from there
                      (/home/strick/go/s):02585         
0DC7 01DC             (/home/strick/go/s):02586         L0D3C    fdb   L0F9A-L0D3C No box
0DC9 000C             (/home/strick/go/s):02587                  fdb   L0D48-L0D3C Framed window
0DCB 00BF             (/home/strick/go/s):02588                  fdb   L0DE8-L0D3C Framed scroll barred window
0DCD 013B             (/home/strick/go/s):02589                  fdb   L0E68-L0D3C shadowed window
0DCF 019F             (/home/strick/go/s):02590                  fdb   L0EFC-L0D3C double box
0DD1 023B             (/home/strick/go/s):02591                  fdb   L0FF2-L0D3C plain box
                      (/home/strick/go/s):02592         
                      (/home/strick/go/s):02593         * Process framed window setstat
0DD3 1700CD           (/home/strick/go/s):02594         L0D48    lbsr  L0E04      is this an overlay window?
0DD6 2408             (/home/strick/go/s):02595                  bcc   L0D55      no, skip ahead
0DD8 7D100A           (/home/strick/go/s):02596                  tst   >WGlobal+G.CrDvFl     are we the active device?
0DDB 2703             (/home/strick/go/s):02597                  beq   L0D55      No, skip ahead
0DDD 1700D0           (/home/strick/go/s):02598                  lbsr  L0E13      de-activate parent window's menu bar
0DE0 1703BE           (/home/strick/go/s):02599         L0D55    lbsr  L115F      copy window table & check for graphics screen
0DE3 8601             (/home/strick/go/s):02600                  lda   #WT.FWin   get window type
0DE5 8D20             (/home/strick/go/s):02601                  bsr   L0D80      get window descriptor & setup graphics table entry
0DE7 240C             (/home/strick/go/s):02602                  bcc   L0D6A      went ok, skip ahead
                      (/home/strick/go/s):02603         * Error, re-draw parent window & return
0DE9 3405             (/home/strick/go/s):02604         L0D5E    pshs  cc,b       Preserve error
0DEB 7D100A           (/home/strick/go/s):02605                  tst   >WGlobal+G.CrDvFl     Are we active device?
0DEE 2703             (/home/strick/go/s):02606                  beq   L0D68      No, exit with error
0DF0 1700F5           (/home/strick/go/s):02607                  lbsr  L0E4B      activate parent window's menu bar
0DF3 3585             (/home/strick/go/s):02608         L0D68    puls  cc,b,pc    Exit with error
                      (/home/strick/go/s):02609         
                      (/home/strick/go/s):02610         * Window descriptor is good, print it according to active/in-active
0DF5 7D100A           (/home/strick/go/s):02611         L0D6A    tst   >WGlobal+G.CrDvFl     are we the active window?
0DF8 2705             (/home/strick/go/s):02612                  beq   L0D74      no, skip ahead
0DFA 170658           (/home/strick/go/s):02613                  lbsr  L13FA      print menu in active state
0DFD 2003             (/home/strick/go/s):02614                  bra   L0D77      skip ahead
                      (/home/strick/go/s):02615         
0DFF 1702B9           (/home/strick/go/s):02616         L0D74    lbsr  L1037      print menu in in-active state
0E02 2573             (/home/strick/go/s):02617         L0D77    bcs   L0D7F      error on printing, return
0E04 160423           (/home/strick/go/s):02618                  lbra  L11F3      change window working size for frame & exit
                      (/home/strick/go/s):02619         
                      (/home/strick/go/s):02620         * Setup graphics table entry with window type & check sizes
                      (/home/strick/go/s):02621         * Entry: A=Window type (Not related to grfdrv, cowin specific)
                      (/home/strick/go/s):02622         *        X=Graphics table entry pointer
                      (/home/strick/go/s):02623         *        Y=Path descriptor pointer
                      (/home/strick/go/s):02624         
0E07 32E8DE           (/home/strick/go/s):02625         L0D80    leas  -WN.SIZ,s  make a buffer to preserve current window desc.
0E0A A784             (/home/strick/go/s):02626                  sta   ,x         save window type
0E0C EE26             (/home/strick/go/s):02627                  ldu   PD.RGS,y   get pointer to register stack
0E0E EE44             (/home/strick/go/s):02628                  ldu   R$X,u      get pointer to window descriptor
0E10 EF05             (/home/strick/go/s):02629                  stu   Gt.DPtr,x  save it in graphics table
                      (/home/strick/go/s):02630                  IFNE  H6309
                      (/home/strick/go/s):02631                  ldw   <D.Proc    get process ID of creator
                      (/home/strick/go/s):02632                  lda   P$ID,w
                      (/home/strick/go/s):02633                  sta   Gt.Proc,x  save it in graphics table
                      (/home/strick/go/s):02634                  ste   Gt.PBlk,x  Save process block # into graphics table
                      (/home/strick/go/s):02635                  ELSE
0E12 3420             (/home/strick/go/s):02636                  pshs  y
0E14 109E50           (/home/strick/go/s):02637                  ldy   <D.Proc    get process ID of creator
0E17 10BF11B5         (/home/strick/go/s):02638                  sty   >GrfMem+gr00B5
0E1B 9650             (/home/strick/go/s):02639                  lda   <D.Proc
0E1D A70F             (/home/strick/go/s):02640                  sta   Gt.PBlk,x  ste 
0E1F A6A4             (/home/strick/go/s):02641                  lda   P$ID,y
0E21 A70E             (/home/strick/go/s):02642                  sta   Gt.Proc,x
0E23 3520             (/home/strick/go/s):02643                  puls  y
                      (/home/strick/go/s):02644                  ENDC
0E25 33E4             (/home/strick/go/s):02645                  leau  ,s         point to buffer
0E27 3410             (/home/strick/go/s):02646                  pshs  x          save graphics table pointer
0E29 BE1075           (/home/strick/go/s):02647                  ldx   >WGlobal+G.GfxTbl     get graphics table pointer
0E2C 30890240         (/home/strick/go/s):02648                  leax  >$0240,x   point to window descriptor buffer
                      (/home/strick/go/s):02649                  IFNE  H6309
                      (/home/strick/go/s):02650                  ldw   #WN.SIZ    Preserve window descriptor in stack buffer
                      (/home/strick/go/s):02651                  tfm   x+,u+
                      (/home/strick/go/s):02652                  ELSE
0E30 3406             (/home/strick/go/s):02653                  pshs  d
0E32 C622             (/home/strick/go/s):02654                  ldb   #WN.SIZ
0E34 A680             (/home/strick/go/s):02655         L0D80b   lda   ,x+
0E36 A7C0             (/home/strick/go/s):02656                  sta   ,u+
0E38 5A               (/home/strick/go/s):02657                  decb
0E39 26F9             (/home/strick/go/s):02658                  bne   L0D80b
0E3B FD11B5           (/home/strick/go/s):02659                  std   >GrfMem+gr00B5
0E3E 3506             (/home/strick/go/s):02660                  puls  d
                      (/home/strick/go/s):02661                  ENDC
0E40 AEE4             (/home/strick/go/s):02662                  ldx   ,s         restore graphics table entry pointer
0E42 1705AC           (/home/strick/go/s):02663                  lbsr  L1371      get window descriptor from caller
0E45 10BE10BB         (/home/strick/go/s):02664                  ldy   >WGlobal+g00BB     Get ptr to work window table
0E49 3384             (/home/strick/go/s):02665                  leau  ,x         point to window descriptor
0E4B 3510             (/home/strick/go/s):02666                  puls  x          restore graphics table entry pointer
                      (/home/strick/go/s):02667         * Check if window will fit
0E4D A637             (/home/strick/go/s):02668                  lda   Wt.SZX,y   get current X size from window table
0E4F A1C815           (/home/strick/go/s):02669                  cmpa  WN.XMIN,u  will it fit?
0E52 2507             (/home/strick/go/s):02670                  blo   L0DC0      no, clear entry & return
0E54 A638             (/home/strick/go/s):02671                  lda   Wt.SZY,y   get current Y size from window table
0E56 A1C816           (/home/strick/go/s):02672                  cmpa  WN.YMIN,u  will it fit?
0E59 241D             (/home/strick/go/s):02673                  bhs   L0DD6      yes, return
                      (/home/strick/go/s):02674         * Window descriptor won't fit on window, restore old & return
                      (/home/strick/go/s):02675         
0E5B 6F84             (/home/strick/go/s):02676         L0DC0    clr   Gt.WTyp,x  clear graphics table entry
0E5D FE1075           (/home/strick/go/s):02677                  ldu   >WGlobal+G.GfxTbl     get graphics table pointer
0E60 33C90240         (/home/strick/go/s):02678                  leau  >$0240,u   point to working buffer
                      (/home/strick/go/s):02679                  IFNE  H6309
                      (/home/strick/go/s):02680                  ldw   #WN.SIZ    Restore window descriptor from stack copy
                      (/home/strick/go/s):02681                  tfm   s+,u+
                      (/home/strick/go/s):02682                  ELSE
0E64 3402             (/home/strick/go/s):02683                  pshs  a
0E66 8622             (/home/strick/go/s):02684                  lda   #WN.SIZ
0E68 E6E0             (/home/strick/go/s):02685         L0DC0b   ldb   ,s+
0E6A E7C0             (/home/strick/go/s):02686                  stb   ,u+
0E6C 4A               (/home/strick/go/s):02687                  deca
0E6D 26F9             (/home/strick/go/s):02688                  bne   L0DC0b
0E6F B711B5           (/home/strick/go/s):02689                  sta   >GrfMem+gr00B5
0E72 3502             (/home/strick/go/s):02690                  puls  a
                      (/home/strick/go/s):02691                  ENDC
0E74 53               (/home/strick/go/s):02692                  comb             set carry
0E75 C6BD             (/home/strick/go/s):02693                  ldb   #E$ICoord  get illegal co-ordinates error
0E77 39               (/home/strick/go/s):02694         L0D7F    rts              return
                      (/home/strick/go/s):02695         
                      (/home/strick/go/s):02696         * Window table is good, return
0E78 32E822           (/home/strick/go/s):02697         L0DD6    leas  WN.SIZ,s   purge stack
0E7B A684             (/home/strick/go/s):02698                  lda   Gt.WTyp,x  get screen type
0E7D 8102             (/home/strick/go/s):02699                  cmpa  #WT.FSWin  scroll barred?
0E7F 102701B2         (/home/strick/go/s):02700                  lbeq  FSWin      yes, do 3D frame
0E83 160185           (/home/strick/go/s):02701                  lbra  L0FFC      draw 3D frame & return
                      (/home/strick/go/s):02702         
                      (/home/strick/go/s):02703         * Process a framed scroll barred window
0E86 8D1B             (/home/strick/go/s):02704         L0DE8    bsr   L0E04      is this a overlay window?
0E88 2407             (/home/strick/go/s):02705                  bcc   L0DF3      no, skip ahead
0E8A 7D100A           (/home/strick/go/s):02706                  tst   >WGlobal+G.CrDvFl     current device?
0E8D 2702             (/home/strick/go/s):02707                  beq   L0DF3      no, skip ahead
0E8F 8D1F             (/home/strick/go/s):02708                  bsr   L0E13      de-activate menu bar on parent window
0E91 17030D           (/home/strick/go/s):02709         L0DF3    lbsr  L115F      setup window table & check if graphics screen
0E94 8602             (/home/strick/go/s):02710                  lda   #WT.FSWin  get code for scroll barred window
                      (/home/strick/go/s):02711                  IFNE  H6309
                      (/home/strick/go/s):02712                  bsr   L0D80      setup graphics table entry & check window desc.
                      (/home/strick/go/s):02713                  ELSE
0E96 17FF6E           (/home/strick/go/s):02714                  lbsr  L0D80
                      (/home/strick/go/s):02715                  ENDC
0E99 1025FF4C         (/home/strick/go/s):02716                  lbcs  L0D5E      error, return
0E9D 170255           (/home/strick/go/s):02717                  lbsr  L108C      go draw window
0EA0 16FF52           (/home/strick/go/s):02718                  lbra  L0D6A      finish up by drawing menu bar & return
                      (/home/strick/go/s):02719         
                      (/home/strick/go/s):02720         * Check if this is a overlay window
0EA3 3460             (/home/strick/go/s):02721         L0E04    pshs  y,u        preserve regs
0EA5 17F847           (/home/strick/go/s):02722                  lbsr  L06AE      get window table pointer
0EA8 43               (/home/strick/go/s):02723                  coma             set carry
0EA9 A632             (/home/strick/go/s):02724                  lda   Wt.BLnk,y  any overlays?
0EAB 2A01             (/home/strick/go/s):02725                  bpl   L0E10      yes, return carry set
0EAD 4F               (/home/strick/go/s):02726                  clra             clear carry
0EAE 35E0             (/home/strick/go/s):02727         L0E10    puls  y,u,pc     return
                      (/home/strick/go/s):02728         
                      (/home/strick/go/s):02729         * Place parent window in a in-active state if it's a framed or scroll barred
                      (/home/strick/go/s):02730         * window.
0EB0 3460             (/home/strick/go/s):02731         L0E13    pshs  y,u        preserve registers
0EB2 17F83A           (/home/strick/go/s):02732                  lbsr  L06AE      get pointer to window table entry
0EB5 A632             (/home/strick/go/s):02733                  lda   Wt.BLnk,y  get overlay window back link
0EB7 EE62             (/home/strick/go/s):02734                  ldu   2,s        get static mem pointer
0EB9 10AEE4           (/home/strick/go/s):02735                  ldy   ,s         get path descriptor pointer
0EBC E6C835           (/home/strick/go/s):02736                  ldb   V.WinNum,u   get current window #
0EBF 3404             (/home/strick/go/s):02737                  pshs  b          save it
0EC1 A7C835           (/home/strick/go/s):02738                  sta   V.WinNum,u   make overlay back link current
0EC4 8D0B             (/home/strick/go/s):02739                  bsr   L0E34      framed or scroll barred?
0EC6 2503             (/home/strick/go/s):02740                  bcs   L0E2E      no, skip ahead
0EC8 1701ED           (/home/strick/go/s):02741                  lbsr  L1034      set menu bar to inactive state
0ECB 3564             (/home/strick/go/s):02742         L0E2E    puls  b,y,u      restore
0ECD E7C835           (/home/strick/go/s):02743                  stb   V.WinNum,u   restore active window
0ED0 39               (/home/strick/go/s):02744                  rts              return
                      (/home/strick/go/s):02745         
                      (/home/strick/go/s):02746         * Check whether current window has a framed or framed scrolled barred window
                      (/home/strick/go/s):02747         * Entry: U=Static mem pointer
                      (/home/strick/go/s):02748         * Exit:  CC: Carry set if window is scroll barred or framed
0ED1 3412             (/home/strick/go/s):02749         L0E34    pshs  a,x        preserve registers
0ED3 6D46             (/home/strick/go/s):02750                  tst   V.TYPE,u   is this a window?
0ED5 2A0E             (/home/strick/go/s):02751                  bpl   L0E48      no, return with carry
0ED7 17F821           (/home/strick/go/s):02752                  lbsr  L06B9      get graphics table pointer
0EDA A684             (/home/strick/go/s):02753                  lda   Gt.WTyp,x  get cowin screen type
0EDC 2707             (/home/strick/go/s):02754                  beq   L0E48      if no box, return with carry set
0EDE 8102             (/home/strick/go/s):02755                  cmpa  #WT.FSWin  scroll barred or framed?
0EE0 2203             (/home/strick/go/s):02756                  bhi   L0E48      no, return carry set
0EE2 4F               (/home/strick/go/s):02757                  clra             clear carry
0EE3 3592             (/home/strick/go/s):02758                  puls  a,x,pc     return
                      (/home/strick/go/s):02759         
0EE5 43               (/home/strick/go/s):02760         L0E48    coma             set carry
0EE6 3592             (/home/strick/go/s):02761                  puls  a,x,pc     return
                      (/home/strick/go/s):02762         
                      (/home/strick/go/s):02763         * Place parent window in a active state if it's a framed or scroll barred
                      (/home/strick/go/s):02764         * window.
0EE8 FE10B7           (/home/strick/go/s):02765         L0E4B    ldu   >WGlobal+g00B7     get static mem pointer
0EEB A632             (/home/strick/go/s):02766         L0E51    lda   Wt.BLnk,y  get overlay window link
0EED E6C835           (/home/strick/go/s):02767                  ldb   V.WinNum,u   get current window #
0EF0 3444             (/home/strick/go/s):02768                  pshs  b,u        save current window # & static mem
0EF2 A7C835           (/home/strick/go/s):02769                  sta   V.WinNum,u   save back link as current
0EF5 8DDA             (/home/strick/go/s):02770                  bsr   L0E34      framed or scroll barred?
0EF7 2503             (/home/strick/go/s):02771                  bcs   L0E62      no, skip ahead
0EF9 170556           (/home/strick/go/s):02772                  lbsr  L13F5      update menu bar
0EFC 3544             (/home/strick/go/s):02773         L0E62    puls  b,u        restore static mem & current window #
0EFE E7C835           (/home/strick/go/s):02774                  stb   V.WinNum,u   restore static mem to current window
0F01 39               (/home/strick/go/s):02775                  rts              return
                      (/home/strick/go/s):02776         
                      (/home/strick/go/s):02777         * Process a shadowed window
0F02 1700BA           (/home/strick/go/s):02778         L0E68    lbsr  L0FBB      update parent window if any
0F05 170299           (/home/strick/go/s):02779                  lbsr  L115F      check for graphic window
0F08 8603             (/home/strick/go/s):02780                  lda   #WT.SBox   save window type in graphics table entry
0F0A A784             (/home/strick/go/s):02781                  sta   Gt.WTyp,x
0F0C 10BE10BB         (/home/strick/go/s):02782                  ldy   >WGlobal+g00BB     Get ptr to work window table
0F10 17045C           (/home/strick/go/s):02783                  lbsr  L12BE      clear screen
0F13 308C14           (/home/strick/go/s):02784                  leax  <SBox1,pc  point to draw table for 640 wide screen
                      (/home/strick/go/s):02785                  IFNE  H6309
                      (/home/strick/go/s):02786                  tim   #$01,>WGlobal+g00BD 640 wide screen?
                      (/home/strick/go/s):02787                  ELSE
0F16 B610BD           (/home/strick/go/s):02788                  lda   >WGlobal+g00BD
0F19 8401             (/home/strick/go/s):02789                  anda  #$01
                      (/home/strick/go/s):02790                  ENDC
0F1B 2603             (/home/strick/go/s):02791                  bne   L0E91      no, skip ahead
0F1D 308C28           (/home/strick/go/s):02792                  leax  <SBox2,pc  point to draw table for 320 wide screen
0F20 8603             (/home/strick/go/s):02793         L0E91    lda   #$03       get # entrys in draw table
0F22 170355           (/home/strick/go/s):02794                  lbsr  DrawBar    draw window
0F25 170302           (/home/strick/go/s):02795                  lbsr  L11F3      change window to working size
0F28 5F               (/home/strick/go/s):02796                  clrb             clear errors
0F29 39               (/home/strick/go/s):02797                  rts              return
                      (/home/strick/go/s):02798         
                      (/home/strick/go/s):02799         * Draw table for shadowed window on 640 wide screen
                      (/home/strick/go/s):02800         * Draw table for Light Grey Box
0F2A 02               (/home/strick/go/s):02801         SBox1    fcb   WColor1    Color 1
0F2B 0000             (/home/strick/go/s):02802                  fdb   0          Start X=0
0F2D 0000             (/home/strick/go/s):02803                  fdb   0          Start Y=0
0F2F FFFD             (/home/strick/go/s):02804                  fdb   -3         End X=Width of window-3
0F31 FFFF             (/home/strick/go/s):02805                  fdb   -1         End Y=Height of window-1
0F33 4C               (/home/strick/go/s):02806                  fcb   $4c        Box function in GRFDRV
                      (/home/strick/go/s):02807         
                      (/home/strick/go/s):02808         * Draw table for Dark Grey shadow on right side
0F34 01               (/home/strick/go/s):02809                  fcb   WColor2    Color 2
0F35 FFFE             (/home/strick/go/s):02810                  fdb   -2         Start X=Width of window-2
0F37 0002             (/home/strick/go/s):02811                  fdb   2          Start Y=2
0F39 8000             (/home/strick/go/s):02812                  fdb   $8000      End X=Width of window
0F3B 8000             (/home/strick/go/s):02813                  fdb   $8000      End Y=Height of window
0F3D 4E               (/home/strick/go/s):02814                  fcb   $4e        Bar function in GRFDRV
                      (/home/strick/go/s):02815         
                      (/home/strick/go/s):02816         * Draw table for Dark Grey shadow on bottom
0F3E 01               (/home/strick/go/s):02817                  fcb   WColor2    Color 2
0F3F 0002             (/home/strick/go/s):02818                  fdb   2          Start X=2
0F41 8000             (/home/strick/go/s):02819                  fdb   $8000      Start Y=Height of window
0F43 8000             (/home/strick/go/s):02820                  fdb   $8000      End X=Width of window
0F45 8000             (/home/strick/go/s):02821                  fdb   $8000      End Y=Height of window
0F47 4A               (/home/strick/go/s):02822                  fcb   $4a        Line function in GRFDRV
                      (/home/strick/go/s):02823         
                      (/home/strick/go/s):02824         * Draw table for shadowed window on 320 wide screen
                      (/home/strick/go/s):02825         * Draw table for Light Grey Box
0F48 02               (/home/strick/go/s):02826         SBox2    fcb   WColor1    Color 1
0F49 0000             (/home/strick/go/s):02827                  fdb   0          Start X=0
0F4B 0000             (/home/strick/go/s):02828                  fdb   0          Start Y=0
0F4D FFFF             (/home/strick/go/s):02829                  fdb   -1         End X=Width of window-1
0F4F FFFF             (/home/strick/go/s):02830                  fdb   -1         End Y=Height of window-1
0F51 4C               (/home/strick/go/s):02831                  fcb   $4c        Box function in GRFDRV
                      (/home/strick/go/s):02832         
                      (/home/strick/go/s):02833         * Draw table for Dark Grey shadow on right side
0F52 01               (/home/strick/go/s):02834                  fcb   WColor2    Color 2
0F53 8000             (/home/strick/go/s):02835                  fdb   $8000      Start X=Width of window
0F55 0002             (/home/strick/go/s):02836                  fdb   2          Start Y=2
0F57 8000             (/home/strick/go/s):02837                  fdb   $8000      End X=Width of window
0F59 8000             (/home/strick/go/s):02838                  fdb   $8000      End Y=Height of window
0F5B 4A               (/home/strick/go/s):02839                  fcb   $4a        Line function in GRFDRV
                      (/home/strick/go/s):02840         
                      (/home/strick/go/s):02841         * Draw table for Dark Grey shadow on bottom
0F5C 01               (/home/strick/go/s):02842                  fcb   WColor2    Color 2
0F5D 0002             (/home/strick/go/s):02843                  fdb   2          Start X=2
0F5F 8000             (/home/strick/go/s):02844                  fdb   $8000      Start Y=Height of window
0F61 8000             (/home/strick/go/s):02845                  fdb   $8000      End X=Width of window
0F63 8000             (/home/strick/go/s):02846                  fdb   $8000      End Y=Height of window
0F65 4A               (/home/strick/go/s):02847                  fcb   $4a        Line function in GRFDRV
                      (/home/strick/go/s):02848         
                      (/home/strick/go/s):02849         * Process a double box window
0F66 8D57             (/home/strick/go/s):02850         L0EFC    bsr   L0FBB      update parent window if we have to
0F68 170236           (/home/strick/go/s):02851                  lbsr  L115F      if this comes back it's a graphic window
0F6B 8604             (/home/strick/go/s):02852                  lda   #WT.DBox   get window type
0F6D A784             (/home/strick/go/s):02853                  sta   Gt.WTyp,x  save it into graphics table entry
0F6F 10BE10BB         (/home/strick/go/s):02854                  ldy   >WGlobal+g00BB     Get ptr to work window table
0F73 1703F9           (/home/strick/go/s):02855                  lbsr  L12BE      clear screen
0F76 8D7E             (/home/strick/go/s):02856                  bsr   L1257      set text co-ordinates to 0,0
0F78 308C0A           (/home/strick/go/s):02857                  leax  <DBox,pc   point to draw table
0F7B 8603             (/home/strick/go/s):02858                  lda   #3         get # entrys
0F7D 1702FA           (/home/strick/go/s):02859                  lbsr  DrawBar    go draw it
0F80 1702A7           (/home/strick/go/s):02860                  lbsr  L11F3      setup window working area & return
0F83 5F               (/home/strick/go/s):02861                  clrb  
0F84 39               (/home/strick/go/s):02862                  rts   
                      (/home/strick/go/s):02863         
                      (/home/strick/go/s):02864         * Draw table for double box window
                      (/home/strick/go/s):02865         * Outside Box
0F85 01               (/home/strick/go/s):02866         DBox     fcb   WColor2    Color 2
0F86 0000             (/home/strick/go/s):02867                  fdb   $0000      Start X=0
0F88 0000             (/home/strick/go/s):02868                  fdb   $0000      Start Y=0
0F8A 8000             (/home/strick/go/s):02869                  fdb   $8000      End X=Width of window
0F8C 8000             (/home/strick/go/s):02870                  fdb   $8000      End Y=Height of window
0F8E 4C               (/home/strick/go/s):02871                  fcb   $4c        Box function in GRFDRV
                      (/home/strick/go/s):02872         
                      (/home/strick/go/s):02873         * Doubled up inside box - next 2
0F8F 01               (/home/strick/go/s):02874                  fcb   WColor2    Color 2
0F90 0002             (/home/strick/go/s):02875                  fdb   $0002      Start X=2
0F92 0002             (/home/strick/go/s):02876                  fdb   $0002      Start Y=2
0F94 FFFE             (/home/strick/go/s):02877                  fdb   -2         End X=Width of window-2
0F96 FFFE             (/home/strick/go/s):02878                  fdb   -2         End Y=Height of window-2
0F98 4C               (/home/strick/go/s):02879                  fcb   $4c        Box function
                      (/home/strick/go/s):02880         
0F99 01               (/home/strick/go/s):02881                  fcb   WColor2    Color 2
0F9A 0003             (/home/strick/go/s):02882                  fdb   $0003      Start X=3
0F9C 0003             (/home/strick/go/s):02883                  fdb   $0003      Start Y=3
0F9E FFFD             (/home/strick/go/s):02884                  fdb   -3         End X=Width of window-3
0FA0 FFFD             (/home/strick/go/s):02885                  fdb   -3         End Y=Height of window-3
0FA2 4C               (/home/strick/go/s):02886                  fcb   $4c        Box function
                      (/home/strick/go/s):02887         
                      (/home/strick/go/s):02888         * Process a no box window
0FA3 8D1A             (/home/strick/go/s):02889         L0F9A    bsr   L0FBB      update parent window if we have to
0FA5 170206           (/home/strick/go/s):02890                  lbsr  L116C      copy window table to working buffer
0FA8 4F               (/home/strick/go/s):02891                  clra             WT.NBox =0
0FA9 A784             (/home/strick/go/s):02892                  sta   Gt.WTyp,x
0FAB 10BE10B9         (/home/strick/go/s):02893                  ldy   >WGlobal+g00B9     get pointer to window table
0FAF 5F               (/home/strick/go/s):02894                  clrb             set start coord
0FB0 ED35             (/home/strick/go/s):02895                  std   Wt.CPX,y
0FB2 ECA828           (/home/strick/go/s):02896                  ldd   Wt.DfSZX,y get default size
0FB5 3460             (/home/strick/go/s):02897                  pshs  u,y
0FB7 170280           (/home/strick/go/s):02898                  lbsr  L1204      set default size
0FBA 3560             (/home/strick/go/s):02899                  puls  u,y
0FBC 1603B0           (/home/strick/go/s):02900                  lbra  L12BE      clear screen & return from there
                      (/home/strick/go/s):02901         
                      (/home/strick/go/s):02902         * Check if we have to update a parent window
0FBF 3460             (/home/strick/go/s):02903         L0FBB    pshs  y,u        preserve registers
0FC1 17FEDF           (/home/strick/go/s):02904                  lbsr  L0E04      we an overlay window?
0FC4 242E             (/home/strick/go/s):02905                  bcc   L0FF0      no, return
0FC6 17F732           (/home/strick/go/s):02906                  lbsr  L06B9      get graphics table pointer
0FC9 A684             (/home/strick/go/s):02907                  lda   Gt.WTyp,x  get cowin screen type
0FCB 2727             (/home/strick/go/s):02908                  beq   L0FF0      it's a plain window, return
0FCD 8102             (/home/strick/go/s):02909                  cmpa  #WT.FSWin  framed or scroll barred window?
0FCF 2223             (/home/strick/go/s):02910                  bhi   L0FF0      no, return
0FD1 7D100A           (/home/strick/go/s):02911                  tst   >WGlobal+G.CrDvFl     Are we the current active device
0FD4 271E             (/home/strick/go/s):02912                  beq   L0FF0      no, return
0FD6 EE62             (/home/strick/go/s):02913                  ldu   2,s        get static memory pointer
0FD8 17F714           (/home/strick/go/s):02914                  lbsr  L06AE      get window table pointer
0FDB EE62             (/home/strick/go/s):02915                  ldu   2,s        get static memory pointer
0FDD A6C835           (/home/strick/go/s):02916                  lda   V.WinNum,u   get window #
0FE0 3402             (/home/strick/go/s):02917                  pshs  a          save it
0FE2 A632             (/home/strick/go/s):02918                  lda   Wt.BLnk,y  get back window link
0FE4 A7C835           (/home/strick/go/s):02919                  sta   V.WinNum,u   save it as current
0FE7 17FEE7           (/home/strick/go/s):02920                  lbsr  L0E34      get framed or scroll barred window flag for this one
0FEA 3502             (/home/strick/go/s):02921                  puls  a          restore window #
0FEC A7C835           (/home/strick/go/s):02922                  sta   V.WinNum,u   save it
0FEF 2503             (/home/strick/go/s):02923                  bcs   L0FF0      if not a framed or scroll barred window, return
0FF1 17FEF7           (/home/strick/go/s):02924                  lbsr  L0E51      place parent window into a active state
0FF4 35E0             (/home/strick/go/s):02925         L0FF0    puls  y,u,pc     restore & return
                      (/home/strick/go/s):02926         
                      (/home/strick/go/s):02927         * Set current X/Y draw pointer to 0,0
     0FF6             (/home/strick/go/s):02928         L1257    equ   *
                      (/home/strick/go/s):02929                  IFNE  H6309
                      (/home/strick/go/s):02930                  clrd  
                      (/home/strick/go/s):02931                  clrw  
                      (/home/strick/go/s):02932                  stq   >GrfMem+gr0047     Save X&Y coords
                      (/home/strick/go/s):02933                  ELSE
0FF6 4F               (/home/strick/go/s):02934                  clra  
0FF7 5F               (/home/strick/go/s):02935                  clrb  
0FF8 FD1147           (/home/strick/go/s):02936                  std   >GrfMem+gr0047     Save X&Y coords
0FFB FD1149           (/home/strick/go/s):02937                  std   >GrfMem+gr0047+2
0FFE FD11B5           (/home/strick/go/s):02938                  std   >GrfMem+gr00B5
                      (/home/strick/go/s):02939                  ENDC
1001 39               (/home/strick/go/s):02940                  rts   
                      (/home/strick/go/s):02941         
                      (/home/strick/go/s):02942         * Process a plain box window
1002 8DBB             (/home/strick/go/s):02943         L0FF2    bsr   L0FBB
1004 17019A           (/home/strick/go/s):02944                  lbsr  L115F
1007 8605             (/home/strick/go/s):02945                  lda   #WT.PBox
1009 A784             (/home/strick/go/s):02946                  sta   Gt.WTyp,x
                      (/home/strick/go/s):02947         * Draw a frame around full window
                      (/home/strick/go/s):02948          
100B 10BE10BB         (/home/strick/go/s):02949         L0FFC    ldy   >WGlobal+g00BB     Get ptr to work window table
100F 17035D           (/home/strick/go/s):02950                  lbsr  L12BE      clear screen
1012 8DE2             (/home/strick/go/s):02951                  bsr   L1257      set text co-ordinates to 0,0
                      (/home/strick/go/s):02952                  IFNE  H6309
                      (/home/strick/go/s):02953                  lde   Wt.Fore,y  get current color mask
                      (/home/strick/go/s):02954                  ELSE
1014 A626             (/home/strick/go/s):02955                  lda   Wt.Fore,y
1016 B711B5           (/home/strick/go/s):02956                  sta   >GrfMem+gr00B5
                      (/home/strick/go/s):02957                  ENDC
1019 8601             (/home/strick/go/s):02958                  lda   #1
101B 1702B8           (/home/strick/go/s):02959                  lbsr  GetColr    convert it to mask
101E A726             (/home/strick/go/s):02960                  sta   Wt.Fore,y
1020 1702A3           (/home/strick/go/s):02961                  lbsr  L1013      calculate X size
1023 FD114B           (/home/strick/go/s):02962                  std   >GrfMem+gr004B
1026 170299           (/home/strick/go/s):02963                  lbsr  L100F      calculate Y size
1029 170221           (/home/strick/go/s):02964                  lbsr  L122B      draw the box
                      (/home/strick/go/s):02965                  IFNE  H6309
                      (/home/strick/go/s):02966                  ste   Wt.Fore,y
                      (/home/strick/go/s):02967                  rts
                      (/home/strick/go/s):02968                  ELSE
102C 3402             (/home/strick/go/s):02969                  pshs  a
102E B611B5           (/home/strick/go/s):02970                  lda   >GrfMem+gr00B5
1031 A726             (/home/strick/go/s):02971                  sta   Wt.Fore,y
1033 3582             (/home/strick/go/s):02972                  puls  a,pc
                      (/home/strick/go/s):02973                  ENDC
                      (/home/strick/go/s):02974         
                      (/home/strick/go/s):02975                  IFNE  CoGrf-1
                      (/home/strick/go/s):02976         * Draw a 3D frame around window for scroll barred window
1035 10BE10BB         (/home/strick/go/s):02977         FSWin    ldy   >WGlobal+g00BB     Get ptr to work window table
1039 170333           (/home/strick/go/s):02978                  lbsr  L12BE      clear screen
103C 8DB8             (/home/strick/go/s):02979                  bsr   L1257      set text co-ordinates to 0,0
103E 3410             (/home/strick/go/s):02980                  pshs  x          preserve graphics table pointer
1040 860B             (/home/strick/go/s):02981                  lda   #11        get # entrys
1042 308C05           (/home/strick/go/s):02982                  leax  <FSWinTbl,pc point to draw table
1045 170232           (/home/strick/go/s):02983                  lbsr  DrawBar
1048 3590             (/home/strick/go/s):02984                  puls  x,pc
                      (/home/strick/go/s):02985         
104A 02               (/home/strick/go/s):02986         FSWinTbl fcb   WColor1    left bar (Color 1)
104B 0000             (/home/strick/go/s):02987                  fdb   0          From 0,8 to 7,bottom
104D 0008             (/home/strick/go/s):02988                  fdb   8
104F 0007             (/home/strick/go/s):02989                  fdb   7
1051 8000             (/home/strick/go/s):02990                  fdb   $8000
1053 4E               (/home/strick/go/s):02991                  fcb   $4e        Bar command for GRFDRV
                      (/home/strick/go/s):02992         
1054 02               (/home/strick/go/s):02993                  fcb   WColor1    bottom bar (Color 1)
1055 0008             (/home/strick/go/s):02994                  fdb   8          From 8,(bottom-7) to (Right-8),bottom
1057 FFF9             (/home/strick/go/s):02995                  fdb   -7
1059 FFF8             (/home/strick/go/s):02996                  fdb   -8
105B 8000             (/home/strick/go/s):02997                  fdb   $8000
105D 4E               (/home/strick/go/s):02998                  fcb   $4e
                      (/home/strick/go/s):02999         
105E 02               (/home/strick/go/s):03000                  fcb   WColor1    right bar
105F FFF9             (/home/strick/go/s):03001                  fdb   -7
1061 0008             (/home/strick/go/s):03002                  fdb   8
1063 8000             (/home/strick/go/s):03003                  fdb   $8000
1065 8000             (/home/strick/go/s):03004                  fdb   $8000
1067 4E               (/home/strick/go/s):03005                  fcb   $4e
                      (/home/strick/go/s):03006         
1068 03               (/home/strick/go/s):03007                  fcb   WColor3    left bar 3D look
1069 0000             (/home/strick/go/s):03008                  fdb   0
106B 0008             (/home/strick/go/s):03009                  fdb   8
106D 0007             (/home/strick/go/s):03010                  fdb   7
106F 0008             (/home/strick/go/s):03011                  fdb   8
1071 4A               (/home/strick/go/s):03012                  fcb   $4a
                      (/home/strick/go/s):03013         
1072 03               (/home/strick/go/s):03014                  fcb   WColor3    White - 0,8 to 0,bottom-1
1073 0000             (/home/strick/go/s):03015                  fdb   0
1075 0008             (/home/strick/go/s):03016                  fdb   8
1077 0000             (/home/strick/go/s):03017                  fdb   0
1079 FFFF             (/home/strick/go/s):03018                  fdb   -1
107B 4A               (/home/strick/go/s):03019                  fcb   $4a
                      (/home/strick/go/s):03020         
107C 01               (/home/strick/go/s):03021                  fcb   WColor2    Light grey - 7,9 to 7,bottom-7
107D 0007             (/home/strick/go/s):03022                  fdb   7
107F 0009             (/home/strick/go/s):03023                  fdb   9
1081 0007             (/home/strick/go/s):03024                  fdb   7
1083 FFF9             (/home/strick/go/s):03025                  fdb   -7
1085 4A               (/home/strick/go/s):03026                  fcb   $4a
                      (/home/strick/go/s):03027         
                      (/home/strick/go/s):03028         * Bottom bar 3D look
1086 03               (/home/strick/go/s):03029                  fcb   WColor3    White
1087 0009             (/home/strick/go/s):03030                  fdb   9          From 9,(bottom-7) to (right-7),(bottom-7)
1089 FFF9             (/home/strick/go/s):03031                  fdb   -7
108B FFF9             (/home/strick/go/s):03032                  fdb   -7
108D FFF9             (/home/strick/go/s):03033                  fdb   -7
108F 4A               (/home/strick/go/s):03034                  fcb   $4a        Line
                      (/home/strick/go/s):03035         
1090 01               (/home/strick/go/s):03036                  fcb   WColor2    Light grey
1091 0001             (/home/strick/go/s):03037                  fdb   1          From 1,(bottom-1) to Right,(bottom-1)
1093 FFFF             (/home/strick/go/s):03038                  fdb   -1
1095 8000             (/home/strick/go/s):03039                  fdb   $8000
1097 FFFF             (/home/strick/go/s):03040                  fdb   -1
1099 4A               (/home/strick/go/s):03041                  fcb   $4a        Line
                      (/home/strick/go/s):03042         
109A 03               (/home/strick/go/s):03043                  fcb   WColor3    right bar 3D look
109B FFF9             (/home/strick/go/s):03044                  fdb   -7         right-7,8 to right,8
109D 0008             (/home/strick/go/s):03045                  fdb   8
109F 8000             (/home/strick/go/s):03046                  fdb   $8000
10A1 0008             (/home/strick/go/s):03047                  fdb   8
10A3 4A               (/home/strick/go/s):03048                  fcb   $4a
                      (/home/strick/go/s):03049         
10A4 03               (/home/strick/go/s):03050                  fcb   WColor3
10A5 FFF9             (/home/strick/go/s):03051                  fdb   -7         left+7,9 to left+7,bottom-8
10A7 0009             (/home/strick/go/s):03052                  fdb   9
10A9 FFF9             (/home/strick/go/s):03053                  fdb   -7
10AB FFF8             (/home/strick/go/s):03054                  fdb   -8
10AD 4A               (/home/strick/go/s):03055                  fcb   $4a
                      (/home/strick/go/s):03056         
10AE 01               (/home/strick/go/s):03057                  fcb   WColor2
10AF 8000             (/home/strick/go/s):03058                  fdb   $8000      left,9 to right,bottom-1
10B1 0009             (/home/strick/go/s):03059                  fdb   9
10B3 8000             (/home/strick/go/s):03060                  fdb   $8000
10B5 FFFF             (/home/strick/go/s):03061                  fdb   -1
10B7 4A               (/home/strick/go/s):03062                  fcb   $4a
                      (/home/strick/go/s):03063         
                      (/home/strick/go/s):03064         * Set Menu bar to in-active state by printing the window title
10B8 1700F3           (/home/strick/go/s):03065         L1034    lbsr  L116C      setup work window table
10BB 1701AD           (/home/strick/go/s):03066         L1037    lbsr  L1240      draw 3D bar
                      (/home/strick/go/s):03067         * Swap foreground/background colors
10BE EC26             (/home/strick/go/s):03068                  ldd   Wt.Fore,y  Get fore/background colors
10C0 A727             (/home/strick/go/s):03069                  sta   Wt.Back,y  Swap them
10C2 E726             (/home/strick/go/s):03070                  stb   Wt.Fore,y
10C4 1701FF           (/home/strick/go/s):03071                  lbsr  L1013      calculate X size in pixels
                      (/home/strick/go/s):03072                  IFNE  H6309
                      (/home/strick/go/s):03073                  decd             take off 1 of X co-ordinate
                      (/home/strick/go/s):03074                  ELSE
10C7 830001           (/home/strick/go/s):03075                  subd  #$0001
                      (/home/strick/go/s):03076                  ENDC
10CA 170324           (/home/strick/go/s):03077                  lbsr  L1371      get window descriptor pointer
10CD 2625             (/home/strick/go/s):03078                  bne   L107A      Not valid dsc., exit
10CF CC0100           (/home/strick/go/s):03079                  ldd   #$0100     Valid, get X/Y text start coord
10D2 170253           (/home/strick/go/s):03080                  lbsr  L128E      place in grfdrv mem
                      (/home/strick/go/s):03081                  IFNE  H6309
                      (/home/strick/go/s):03082                  aim   #^TChr,Wt.BSW,y Turn on transparency
                      (/home/strick/go/s):03083                  oim   #Prop,Wt.BSW,y Turn on proportional spacing
                      (/home/strick/go/s):03084                  ELSE
10D5 3402             (/home/strick/go/s):03085                  pshs  a
10D7 A629             (/home/strick/go/s):03086                  lda   Wt.BSW,y
10D9 847F             (/home/strick/go/s):03087                  anda  #^TChr
10DB 8A10             (/home/strick/go/s):03088                  ora   #Prop
10DD A729             (/home/strick/go/s):03089                  sta   Wt.BSW,y
10DF 3502             (/home/strick/go/s):03090                  puls  a
                      (/home/strick/go/s):03091                  ENDC
10E1 170258           (/home/strick/go/s):03092                  lbsr  L12A2      calculate string length of menu title
10E4 C002             (/home/strick/go/s):03093                  subb  #$02       subtract 2 to give 1 space on either side
10E6 E137             (/home/strick/go/s):03094                  cmpb  Wt.SZX,y   bigger than window?
10E8 2305             (/home/strick/go/s):03095                  bls   L1075      no, skip ahead
10EA E637             (/home/strick/go/s):03096                  ldb   Wt.SZX,y   Use X size of window as length
10EC 160258           (/home/strick/go/s):03097                  lbra  L12AE      Print menu bar title & return from there
                      (/home/strick/go/s):03098         
10EF CB02             (/home/strick/go/s):03099         L1075    addb  #2         get length back
10F1 160253           (/home/strick/go/s):03100                  lbra  L12AE      print menu bar title & return from there
                      (/home/strick/go/s):03101         
10F4 39               (/home/strick/go/s):03102         L107A    rts              return
                      (/home/strick/go/s):03103         
                      (/home/strick/go/s):03104         * Draw a framed scroll barred window
10F5 10BE10BB         (/home/strick/go/s):03105         L108C    ldy   >WGlobal+g00BB     Get ptr to work window table
                      (/home/strick/go/s):03106                  IFNE  H6309
                      (/home/strick/go/s):03107                  aim   #^TChr,Wt.BSW,y Turn on transparency
                      (/home/strick/go/s):03108                  ELSE
10F9 A629             (/home/strick/go/s):03109                  lda   Wt.BSW,y
10FB 847F             (/home/strick/go/s):03110                  anda  #^TChr
10FD A729             (/home/strick/go/s):03111                  sta   Wt.BSW,y
                      (/home/strick/go/s):03112                  ENDC
10FF 3410             (/home/strick/go/s):03113                  pshs  x          Preserve old X
1101 3276             (/home/strick/go/s):03114                  leas  -10,s      Make enough room for BS stack for R$X/Y
1103 30E4             (/home/strick/go/s):03115                  leax  ,s         Point X to stack
                      (/home/strick/go/s):03116                  IFNE  H6309
                      (/home/strick/go/s):03117                  clrd             get text co-ordinates
                      (/home/strick/go/s):03118                  ELSE
1105 4F               (/home/strick/go/s):03119                  clra
1106 5F               (/home/strick/go/s):03120                  clrb
                      (/home/strick/go/s):03121                  ENDC
1107 ED04             (/home/strick/go/s):03122                  std   R$X,x
1109 ED06             (/home/strick/go/s):03123                  std   R$Y,x
110B 170A15           (/home/strick/go/s):03124                  lbsr  DfltBar    Draw scroll bar markers
110E 8D0C             (/home/strick/go/s):03125                  bsr   DrawArr    draw the 4 arrows
1110 8607             (/home/strick/go/s):03126                  lda   #7         Draw 3D shading stuff
1112 308C46           (/home/strick/go/s):03127                  leax  <ScBar,pc  point to draw table
1115 170162           (/home/strick/go/s):03128                  lbsr  DrawBar
1118 326A             (/home/strick/go/s):03129                  leas  10,s       Restore stack to normal
111A 3590             (/home/strick/go/s):03130                  puls  x,pc       restore X
                      (/home/strick/go/s):03131         
                      (/home/strick/go/s):03132         * Draw scroll bar arrows
                      (/home/strick/go/s):03133         * Entry: Y=Window table pointer
                      (/home/strick/go/s):03134         *        U=Global mem pointer
                      (/home/strick/go/s):03135         * Exit : A=$00
                      (/home/strick/go/s):03136         *        All other regs. preserved
111C 8604             (/home/strick/go/s):03137         DrawArr  lda   #4         Get # arrows
111E 3412             (/home/strick/go/s):03138                  pshs  x,a        preserve X & arrow counter
1120 308C20           (/home/strick/go/s):03139                  leax  <ScArr,pc  point to table
1123 EC81             (/home/strick/go/s):03140         NxtArr   ldd   ,x++       get group/buffer
1125 FD1157           (/home/strick/go/s):03141                  std   >GrfMem+gr0057     save it to grfdrv mem
1128 17017F           (/home/strick/go/s):03142                  lbsr  CalXCord   calculate X start co-ordinate
112B FD1147           (/home/strick/go/s):03143                  std   >GrfMem+gr0047     save it in grfdrv mem.
112E 17017D           (/home/strick/go/s):03144                  lbsr  CalYCord   calculate Y start co-ordinate
1131 FD1149           (/home/strick/go/s):03145                  std   >GrfMem+gr0049     save it in grfdrv mem
1134 C636             (/home/strick/go/s):03146                  ldb   #$36       get grfdrv function code for PutBlk
                      (/home/strick/go/s):03147         * NOTE: SHOULDN'T NEED U PRESERVED
1136 3470             (/home/strick/go/s):03148                  pshs  x,y,u      preserve regs
1138 17F1FE           (/home/strick/go/s):03149                  lbsr  L0101      let grfdrv do the rest
113B 3570             (/home/strick/go/s):03150                  puls  x,y,u      restore regs
113D 6AE4             (/home/strick/go/s):03151                  dec   ,s         done?
113F 26E2             (/home/strick/go/s):03152                  bne   NxtArr     keep going till we're done
1141 3592             (/home/strick/go/s):03153                  puls  a,x,pc
                      (/home/strick/go/s):03154         
                      (/home/strick/go/s):03155         * Draw table for scroll barred window arrows
                      (/home/strick/go/s):03156         * This seems a major error in group number. $CE does not exist. RG
1143 CE01             (/home/strick/go/s):03157         ScArr    fdb   $ce01      group/buffer for up arrow
1145 FFF9             (/home/strick/go/s):03158                  fdb   -7
1147 0008             (/home/strick/go/s):03159                  fdb   8
                      (/home/strick/go/s):03160         
1149 CE02             (/home/strick/go/s):03161                  fdb   $ce02      group/buffer for down arrow
114B FFF9             (/home/strick/go/s):03162                  fdb   -7
114D FFF1             (/home/strick/go/s):03163                  fdb   -15
                      (/home/strick/go/s):03164         
114F CE03             (/home/strick/go/s):03165                  fdb   $ce03      group/buffer for left arrow
1151 0000             (/home/strick/go/s):03166                  fdb   0
1153 FFF9             (/home/strick/go/s):03167                  fdb   -7
                      (/home/strick/go/s):03168         
1155 CE04             (/home/strick/go/s):03169                  fdb   $ce04      group/buffer for right arrow
1157 FFF1             (/home/strick/go/s):03170                  fdb   -15
1159 FFF9             (/home/strick/go/s):03171                  fdb   -7
                      (/home/strick/go/s):03172         
                      (/home/strick/go/s):03173         * Draw table for for various lines on a scroll barred window
115B 03               (/home/strick/go/s):03174         ScBar    fcb   WColor3    white line below up arrow
115C FFF9             (/home/strick/go/s):03175                  fdb   -7
115E 0010             (/home/strick/go/s):03176                  fdb   16
1160 8000             (/home/strick/go/s):03177                  fdb   $8000
1162 0010             (/home/strick/go/s):03178                  fdb   16
1164 4A               (/home/strick/go/s):03179                  fcb   $4a
                      (/home/strick/go/s):03180         
1165 01               (/home/strick/go/s):03181                  fcb   WColor2    gray line above down arrow
1166 FFF9             (/home/strick/go/s):03182                  fdb   -7
1168 FFF0             (/home/strick/go/s):03183                  fdb   -16
116A 8000             (/home/strick/go/s):03184                  fdb   $8000
116C FFF0             (/home/strick/go/s):03185                  fdb   -16
116E 4A               (/home/strick/go/s):03186                  fcb   $4a
                      (/home/strick/go/s):03187         
116F 03               (/home/strick/go/s):03188                  fcb   WColor3    white line to the right of left arrow
1170 0008             (/home/strick/go/s):03189                  fdb   8
1172 FFF9             (/home/strick/go/s):03190                  fdb   -7
1174 0008             (/home/strick/go/s):03191                  fdb   8
1176 FFFF             (/home/strick/go/s):03192                  fdb   -1
1178 4A               (/home/strick/go/s):03193                  fcb   $4a
                      (/home/strick/go/s):03194         
1179 01               (/home/strick/go/s):03195                  fcb   WColor2    gray line to the left of right arrow
117A FFF0             (/home/strick/go/s):03196                  fdb   -16
117C FFF9             (/home/strick/go/s):03197                  fdb   -7
117E FFF0             (/home/strick/go/s):03198                  fdb   -16
1180 FFFF             (/home/strick/go/s):03199                  fdb   -1
1182 4A               (/home/strick/go/s):03200                  fcb   $4a
                      (/home/strick/go/s):03201         
1183 01               (/home/strick/go/s):03202                  fcb   WColor2    gray line above left arrow
1184 0000             (/home/strick/go/s):03203                  fdb   0
1186 FFF8             (/home/strick/go/s):03204                  fdb   -8
1188 0007             (/home/strick/go/s):03205                  fdb   7
118A FFF8             (/home/strick/go/s):03206                  fdb   -8
118C 4A               (/home/strick/go/s):03207                  fcb   $4a
                      (/home/strick/go/s):03208         
118D 03               (/home/strick/go/s):03209                  fcb   WColor3    white line to the right of right arrow
118E FFF9             (/home/strick/go/s):03210                  fdb   -7
1190 FFF9             (/home/strick/go/s):03211                  fdb   -7
1192 8000             (/home/strick/go/s):03212                  fdb   $8000
1194 FFF9             (/home/strick/go/s):03213                  fdb   -7
1196 4A               (/home/strick/go/s):03214                  fcb   $4a
                      (/home/strick/go/s):03215         
1197 03               (/home/strick/go/s):03216                  fcb   WColor3    white line below the down arrow
1198 FFF9             (/home/strick/go/s):03217                  fdb   -7
119A FFF9             (/home/strick/go/s):03218                  fdb   -7
119C FFF9             (/home/strick/go/s):03219                  fdb   -7
119E FFFF             (/home/strick/go/s):03220                  fdb   -1
11A0 4A               (/home/strick/go/s):03221                  fcb   $4a
                      (/home/strick/go/s):03222         
                      (/home/strick/go/s):03223                  ENDC
                      (/home/strick/go/s):03224         
                      (/home/strick/go/s):03225         * Check if window is a graphic window
11A1 8D0B             (/home/strick/go/s):03226         L115F    bsr   L116C      copy window table to work table
11A3 B610BD           (/home/strick/go/s):03227                  lda   >WGlobal+g00BD     Get current screen type
11A6 2A05             (/home/strick/go/s):03228                  bpl   L116B      graphics, skip ahead
11A8 3262             (/home/strick/go/s):03229                  leas  2,s        purge return address
11AA 53               (/home/strick/go/s):03230                  comb             set carry
11AB C6B7             (/home/strick/go/s):03231                  ldb   #E$IWTyp   get illegal window type error code
11AD 39               (/home/strick/go/s):03232         L116B    rts              return
                      (/home/strick/go/s):03233         
                      (/home/strick/go/s):03234         * Copy current window table into work table & set all default sizes in work
                      (/home/strick/go/s):03235         * table
                      (/home/strick/go/s):03236         
11AE 3420             (/home/strick/go/s):03237         L116C    pshs  y          save path descriptor pointer
11B0 FF10B7           (/home/strick/go/s):03238                  stu   >WGlobal+g00B7     save device static in global
11B3 10BF10C0         (/home/strick/go/s):03239                  sty   >WGlobal+g00C0     save path descriptor in global
11B7 17F504           (/home/strick/go/s):03240                  lbsr  L06A0      verify window table
11BA 10BF10B9         (/home/strick/go/s):03241                  sty   >WGlobal+g00B9     save window table pointer
11BE A6B8F0           (/home/strick/go/s):03242                  lda   [Wt.STbl,y] get screen type
11C1 B710BD           (/home/strick/go/s):03243                  sta   >WGlobal+g00BD     save it in global
11C4 FE10B7           (/home/strick/go/s):03244                  ldu   >WGlobal+g00B7     get static mem back
11C7 17F531           (/home/strick/go/s):03245                  lbsr  L06B9      get graphics table pointer for this window
11CA 108E1087         (/home/strick/go/s):03246                  ldy   #WGlobal+G.WrkWTb+$10     Point to work window table
11CE 10BF10BB         (/home/strick/go/s):03247                  sty   >WGlobal+g00BB     save the pointer to work table
11D2 FE10B9           (/home/strick/go/s):03248                  ldu   >WGlobal+g00B9     get pointer to current window table
                      (/home/strick/go/s):03249                  IFNE  H6309
                      (/home/strick/go/s):03250                  ldq   Wt.LStDf,u get default logical start & start X/Y co-ordinates
                      (/home/strick/go/s):03251                  stq   Wt.LStrt,y save it in window table
                      (/home/strick/go/s):03252                  ELSE
11D5 ECC826           (/home/strick/go/s):03253                  ldd   Wt.LStDf+2,u
11D8 ED35             (/home/strick/go/s):03254                  std   Wt.LStrt+2,y
11DA FD11B5           (/home/strick/go/s):03255                  std   >GrfMem+gr00B5
11DD ECC824           (/home/strick/go/s):03256                  ldd   Wt.LStDf,u
11E0 ED33             (/home/strick/go/s):03257                  std   Wt.LStrt,y
                      (/home/strick/go/s):03258                  ENDC
11E2 ECC828           (/home/strick/go/s):03259                  ldd   Wt.DfSZX,u get default X/Y sizes
11E5 ED37             (/home/strick/go/s):03260                  std   Wt.SZX,y   save as current working area
11E7 EC50             (/home/strick/go/s):03261                  ldd   Wt.STbl,u  get screen table pointer
11E9 ED30             (/home/strick/go/s):03262                  std   Wt.STbl,y  save it in new
11EB A652             (/home/strick/go/s):03263                  lda   Wt.BLnk,u  get overlay window link
11ED A732             (/home/strick/go/s):03264                  sta   Wt.BLnk,y  save it in new
11EF EC5B             (/home/strick/go/s):03265                  ldd   Wt.Cur,u   get cursor address
11F1 ED3B             (/home/strick/go/s):03266                  std   Wt.Cur,y   save it
11F3 EC5E             (/home/strick/go/s):03267                  ldd   Wt.CurX,u  get X/Y coord of cursor
11F5 ED3E             (/home/strick/go/s):03268                  std   Wt.CurX,y  save it
                      (/home/strick/go/s):03269                  IFNE  H6309
                      (/home/strick/go/s):03270                  ldq   Wt.XBCnt,u get X byte count & bytes/row
                      (/home/strick/go/s):03271                  stq   Wt.XBCnt,y save it in window table
                      (/home/strick/go/s):03272                  ELSE
11F7 EC44             (/home/strick/go/s):03273                  ldd   Wt.XBCnt+2,u
11F9 ED24             (/home/strick/go/s):03274                  std   Wt.XBCnt+2,y
11FB FD11B5           (/home/strick/go/s):03275                  std   >GrfMem+gr00B5
11FE EC42             (/home/strick/go/s):03276                  ldd   Wt.XBCnt,u 
1200 ED22             (/home/strick/go/s):03277                  std   Wt.XBCnt,y
                      (/home/strick/go/s):03278                  ENDC
1202 A64B             (/home/strick/go/s):03279                  lda   Wt.FBlk,u  get block # for font
1204 A72B             (/home/strick/go/s):03280                  sta   Wt.FBlk,y  save it
1206 EC4C             (/home/strick/go/s):03281                  ldd   Wt.FOff,u  get offset for font
1208 ED2C             (/home/strick/go/s):03282                  std   Wt.FOff,y
120A 6F29             (/home/strick/go/s):03283                  clr   Wt.BSW,y   clear window switches
120C 1701B5           (/home/strick/go/s):03284                  lbsr  L1337      set pattern to normal plot
120F 1701BD           (/home/strick/go/s):03285                  lbsr  L1342      set logic type to nothing
1212 E6C828           (/home/strick/go/s):03286                  ldb   Wt.DfSZX,u get X size
1215 1700B0           (/home/strick/go/s):03287                  lbsr  L1015      multiply by 8
1218 EDA81B           (/home/strick/go/s):03288                  std   Wt.MaxX,y  save max X coord
121B E6C829           (/home/strick/go/s):03289                  ldb   Wt.DfSZY,u get Y size
121E 1700A7           (/home/strick/go/s):03290                  lbsr  L1015      multiply by 8
1221 EDA81D           (/home/strick/go/s):03291                  std   Wt.MaxY,y  save max Y co-ordinate
1224 EC07             (/home/strick/go/s):03292                  ldd   Gt.FClr,x  get fore/back colors
1226 ED26             (/home/strick/go/s):03293                  std   Wt.Fore,y  save 'em
1228 35A0             (/home/strick/go/s):03294                  puls  y,pc       restore path descriptor ptr & return
                      (/home/strick/go/s):03295         
                      (/home/strick/go/s):03296         * Change window size to leave a 1 character space on all 4 sides
122A 10BE10B9         (/home/strick/go/s):03297         L11F3    ldy   >WGlobal+g00B9     get current window table pointer
122E CC0101           (/home/strick/go/s):03298                  ldd   #$0101     set X/Y start co-ordinate
1231 ED35             (/home/strick/go/s):03299                  std   Wt.CPX,y   save it
1233 ECA828           (/home/strick/go/s):03300                  ldd   Wt.DfSZX,y get default X/Y sizes
1236 5A               (/home/strick/go/s):03301         L1200    decb             take 2 off Y
1237 5A               (/home/strick/go/s):03302                  decb  
1238 4A               (/home/strick/go/s):03303                  deca             take 2 off X
1239 4A               (/home/strick/go/s):03304                  deca  
123A ED37             (/home/strick/go/s):03305         L1204    std   Wt.SZX,y   save X/Y size
123C C60E             (/home/strick/go/s):03306                  ldb   #$0E       get grfdrv function for CWArea
123E 17F0F8           (/home/strick/go/s):03307                  lbsr  L0101
1241 2566             (/home/strick/go/s):03308                  bcs   L11F2
1243 FE10B7           (/home/strick/go/s):03309                  ldu   >WGlobal+g00B7     get static mem pointer
1246 10BE10C0         (/home/strick/go/s):03310                  ldy   >WGlobal+g00C0     get path descriptor pointer
124A 16F1F4           (/home/strick/go/s):03311                  lbra  L0436      go setup lines per page & return
                      (/home/strick/go/s):03312         
                      (/home/strick/go/s):03313         * NOTE: ALL OF THESE MAY NOT NEED U PRESERVED ANYMORE
                      (/home/strick/go/s):03314         * Draw a box
124D FD114D           (/home/strick/go/s):03315         L122B    std   >GrfMem+gr004d
1250 3470             (/home/strick/go/s):03316                  pshs  u,y,x
1252 C64C             (/home/strick/go/s):03317                  ldb   #$4C       get code for box
1254 17F0E2           (/home/strick/go/s):03318         L1232    lbsr  L0101
1257 35F0             (/home/strick/go/s):03319                  puls  pc,u,y,x
                      (/home/strick/go/s):03320         
                      (/home/strick/go/s):03321         * Draw a line
1259 FD114D           (/home/strick/go/s):03322         L1237    std   >GrfMem+gr004d     save current Y coord
125C 3470             (/home/strick/go/s):03323         L123A    pshs  u,y,x      preserve regs
125E C64A             (/home/strick/go/s):03324                  ldb   #$4A       get grfdrv function for line
1260 20F2             (/home/strick/go/s):03325                  bra   L1232      send it to grfdrv
                      (/home/strick/go/s):03326         
                      (/home/strick/go/s):03327         * Draw a bar at current color
1262 FD114D           (/home/strick/go/s):03328         L124E    std   >GrfMem+gr004d
1265 3470             (/home/strick/go/s):03329                  pshs  u,y,x
1267 C64E             (/home/strick/go/s):03330                  ldb   #$4E
1269 20E9             (/home/strick/go/s):03331                  bra   L1232
                      (/home/strick/go/s):03332         
                      (/home/strick/go/s):03333         * Draw a 3D bar starting at 0,0 to 639,7 in current colors
126B 10BE10BB         (/home/strick/go/s):03334         L1240    ldy   >WGlobal+g00BB     Get ptr to work window table
126F 3410             (/home/strick/go/s):03335                  pshs  x          preserve X
1271 308C75           (/home/strick/go/s):03336                  leax  <TopBar,pc point to draw table for top bar
1274 8604             (/home/strick/go/s):03337                  lda   #4         get entry count
1276 8D02             (/home/strick/go/s):03338                  bsr   DrawBar    draw the bar
1278 3590             (/home/strick/go/s):03339                  puls  x,pc       restore & return
                      (/home/strick/go/s):03340         
                      (/home/strick/go/s):03341         * Draw a graphic sequence that requires start & end co-ordinates
                      (/home/strick/go/s):03342         * If the co-ordinate in draw table is negative, This will calculate the
                      (/home/strick/go/s):03343         * co-ordinate based on the size of the window in pixels.
                      (/home/strick/go/s):03344         * Entry: A=Number of draw table entrys
                      (/home/strick/go/s):03345         *        X=Pointer to draw table
                      (/home/strick/go/s):03346         *        Y=Pointer to window table
                      (/home/strick/go/s):03347         *        U=Global mem pointer
127A E626             (/home/strick/go/s):03348         DrawBar  ldb   $06,y      get current color
127C 3406             (/home/strick/go/s):03349                  pshs  d          save it and entry count
127E A680             (/home/strick/go/s):03350         DrawNxt  lda   ,x+        get foreground color
1280 8D54             (/home/strick/go/s):03351                  bsr   GetColr    get color mask
1282 A726             (/home/strick/go/s):03352                  sta   WT.Fore,y  put it in window table
1284 8D24             (/home/strick/go/s):03353                  bsr   CalXCord   calculate X start co-ordinate
1286 FD1147           (/home/strick/go/s):03354                  std   >GrfMem+gr0047     save it in grfdrv mem.
1289 8D23             (/home/strick/go/s):03355                  bsr   CalYCord   calculate Y start co-ordinate
128B FD1149           (/home/strick/go/s):03356                  std   >GrfMem+gr0049     save it in grfdrv mem
128E 8D1A             (/home/strick/go/s):03357                  bsr   CalXCord   calculate X end co-ordinate
1290 FD114B           (/home/strick/go/s):03358                  std   >GrfMem+gr004B     save it in grfdrv mem
1293 8D19             (/home/strick/go/s):03359                  bsr   CalYCord   calculate Y end co-ordinate
1295 FD114D           (/home/strick/go/s):03360                  std   >GrfMem+gr004D     save it in grfdrv mem
1298 E680             (/home/strick/go/s):03361                  ldb   ,x+        get grfdrv function code
129A 3470             (/home/strick/go/s):03362                  pshs  x,y,u      preserve regs
129C 17F09A           (/home/strick/go/s):03363                  lbsr  L0101      let grfdrv do the rest
129F 3570             (/home/strick/go/s):03364                  puls  x,y,u      restore regs
12A1 6AE4             (/home/strick/go/s):03365                  dec   ,s         done?
12A3 26D9             (/home/strick/go/s):03366                  bne   DrawNxt    keep going till we're done
12A5 3506             (/home/strick/go/s):03367                  puls  d          restore current color & purge stack
12A7 E726             (/home/strick/go/s):03368                  stb   Wt.Fore,y  put it back in window table
12A9 39               (/home/strick/go/s):03369         L11F2    rts   
                      (/home/strick/go/s):03370         
                      (/home/strick/go/s):03371         * Calculate X coord based on the size of window
12AA 8D1A             (/home/strick/go/s):03372         CalXCord bsr   L1013      get window X size in pixels
12AC 2002             (/home/strick/go/s):03373                  bra   CalCord
                      (/home/strick/go/s):03374         
                      (/home/strick/go/s):03375         * Calculate Y co-ordinate based on the size of window
12AE 8D12             (/home/strick/go/s):03376         CalYCord bsr   L100F      get window Y size in pixels
12B0 3406             (/home/strick/go/s):03377         CalCord  pshs  d          preserve size
12B2 EC81             (/home/strick/go/s):03378                  ldd   ,x++       get coord
12B4 2A09             (/home/strick/go/s):03379                  bpl   PosCord    it's positive, return coord
12B6 10838000         (/home/strick/go/s):03380                  cmpd  #$8000     use actual size?
12BA 2601             (/home/strick/go/s):03381                  bne   NegCord    no, skip ahead
12BC 4F               (/home/strick/go/s):03382                  clra             clear MSB to zero D
12BD E3E4             (/home/strick/go/s):03383         NegCord  addd  ,s         add it to the size (signed add!!)
12BF 3262             (/home/strick/go/s):03384         PosCord  leas  2,s        purge size from stack
12C1 39               (/home/strick/go/s):03385                  rts              return
                      (/home/strick/go/s):03386         
                      (/home/strick/go/s):03387         * Get window Y size in pixels - NEED TO CHANGE TO ADJUST FOR 200 LINE ONLY
12C2 E638             (/home/strick/go/s):03388         L100F    ldb   Wt.SZY,y   Get window Y size in chars
12C4 2002             (/home/strick/go/s):03389                  bra   L1015
                      (/home/strick/go/s):03390         
                      (/home/strick/go/s):03391         * Get window X size in pixels
12C6 E637             (/home/strick/go/s):03392         L1013    ldb   Wt.SZX,y   Get window X size in chars
12C8 4F               (/home/strick/go/s):03393         L1015    clra             Clear MSB
                      (/home/strick/go/s):03394         * NOTE: HOW OFTEN WILL WE GET A WINDOW SIZE OF ZERO? SHOULD CHANGE TO NOT
                      (/home/strick/go/s):03395         * BOTHER WITH EITHER TSTB OR BEQ (UNLESS CALLING ROUTINE CHECKS FLAG)
12C9 5D               (/home/strick/go/s):03396                  tstb             0?
12CA 2709             (/home/strick/go/s):03397                  beq   L101E      Yes, don't bother with multiply
                      (/home/strick/go/s):03398                  IFNE  H6309
                      (/home/strick/go/s):03399                  lsld             Multiply by 8
                      (/home/strick/go/s):03400                  lsld  
                      (/home/strick/go/s):03401                  lsld  
                      (/home/strick/go/s):03402                  decd             0 base
                      (/home/strick/go/s):03403                  ELSE
12CC 58               (/home/strick/go/s):03404                  lslb
12CD 49               (/home/strick/go/s):03405                  rola
12CE 58               (/home/strick/go/s):03406                  lslb
12CF 49               (/home/strick/go/s):03407                  rola
12D0 58               (/home/strick/go/s):03408                  lslb
12D1 49               (/home/strick/go/s):03409                  rola
12D2 830001           (/home/strick/go/s):03410                  subd  #$0001
                      (/home/strick/go/s):03411                  ENDC
12D5 39               (/home/strick/go/s):03412         L101E    rts              Return
                      (/home/strick/go/s):03413         
                      (/home/strick/go/s):03414         * Get color mask
12D6 3414             (/home/strick/go/s):03415         GetColr  pshs  b,x        save color & table pointer
12D8 F610BD           (/home/strick/go/s):03416                  ldb   >WGlobal+g00BD     get screen type
12DB 308C06           (/home/strick/go/s):03417                  leax  <ColrMsk-1,pc point to color mask table
12DE E685             (/home/strick/go/s):03418                  ldb   b,x
12E0 3D               (/home/strick/go/s):03419                  mul   
12E1 1F98             (/home/strick/go/s):03420                  tfr   b,a
12E3 3594             (/home/strick/go/s):03421                  puls  b,x,pc     restore & return
                      (/home/strick/go/s):03422         
12E5 FF555511         (/home/strick/go/s):03423         ColrMsk  fcb   $ff,$55,$55,$11
                      (/home/strick/go/s):03424         
                      (/home/strick/go/s):03425         * Draw table for top menu bar
12E9 02               (/home/strick/go/s):03426         TopBar   fcb   WColor1    Color 1- Draw Bar from 1,1 to (Right-1,6)
12EA 0001             (/home/strick/go/s):03427                  fdb   1          (Changed from original 0,0-Right,7)
12EC 0001             (/home/strick/go/s):03428                  fdb   1
12EE FFFF             (/home/strick/go/s):03429                  fdb   -1
12F0 0006             (/home/strick/go/s):03430                  fdb   6
12F2 4E               (/home/strick/go/s):03431                  fcb   $4e
                      (/home/strick/go/s):03432         
12F3 03               (/home/strick/go/s):03433                  fcb   WColor3    Color 3-Draw Box from 0,0 to Right,7)
12F4 0000             (/home/strick/go/s):03434                  fdb   0
12F6 0000             (/home/strick/go/s):03435                  fdb   0
12F8 8000             (/home/strick/go/s):03436                  fdb   $8000
12FA 0007             (/home/strick/go/s):03437                  fdb   7
12FC 4C               (/home/strick/go/s):03438                  fcb   $4c
                      (/home/strick/go/s):03439         
12FD 01               (/home/strick/go/s):03440                  fcb   WColor2    Foreground color
12FE 0000             (/home/strick/go/s):03441                  fdb   $0000      Start X co-ordinate
1300 0007             (/home/strick/go/s):03442                  fdb   $0007      Start Y co-ordinate
1302 8000             (/home/strick/go/s):03443                  fdb   $8000      End X
1304 0007             (/home/strick/go/s):03444                  fdb   $0007      End Y
1306 4A               (/home/strick/go/s):03445                  fcb   $4a        grfdrv function code
                      (/home/strick/go/s):03446         
1307 01               (/home/strick/go/s):03447                  fcb   WColor2    Foreground color
1308 8000             (/home/strick/go/s):03448                  fdb   $8000      Start X co-ordinate
130A 0000             (/home/strick/go/s):03449                  fdb   $0000      Start Y co-ordinate
130C 8000             (/home/strick/go/s):03450                  fdb   $8000      End X
130E 0007             (/home/strick/go/s):03451                  fdb   $0007      End Y
1310 4A               (/home/strick/go/s):03452                  fcb   $4a        grfdrv function code
                      (/home/strick/go/s):03453         
                      (/home/strick/go/s):03454         * Print close box
1311 86C7             (/home/strick/go/s):03455         L127B    lda   #$C7
                      (/home/strick/go/s):03456         * Generic routine for calling graphics font (font $c803) & resetting to normal
1313 8D5E             (/home/strick/go/s):03457         L1271    bsr   L12C2      Go select graphics font
1315 8D08             (/home/strick/go/s):03458                  bsr   L1285      Print char on screen
1317 206F             (/home/strick/go/s):03459                  bra   L12D7      Revert to normal font, return from there.
                      (/home/strick/go/s):03460         
                      (/home/strick/go/s):03461         * Print tandy menu icon
1319 86CB             (/home/strick/go/s):03462         L127F    lda   #$CB       Tandy icon character
131B 20F6             (/home/strick/go/s):03463                  bra   L1271      Put on screen
                      (/home/strick/go/s):03464         
                      (/home/strick/go/s):03465         * Print a space
131D 8620             (/home/strick/go/s):03466         L1283    lda   #$20
                      (/home/strick/go/s):03467         
                      (/home/strick/go/s):03468         * Print a character
                      (/home/strick/go/s):03469         * Entry: A=character to print
131F 3476             (/home/strick/go/s):03470         L1285    pshs  d,x,y,u
1321 C63A             (/home/strick/go/s):03471                  ldb   #$3A       Regular alpha put
1323 17F013           (/home/strick/go/s):03472         L1289    lbsr  L0101
1326 35F6             (/home/strick/go/s):03473                  puls  d,x,y,u,pc
                      (/home/strick/go/s):03474         
                      (/home/strick/go/s):03475         * Set cursor co-ordinates
                      (/home/strick/go/s):03476         * Entry: A=X co-ordinate
                      (/home/strick/go/s):03477         *        B=Y co-ordinate
1328 8B20             (/home/strick/go/s):03478         L128E    adda  #$20       Set up for GRFDRV CurXY call
132A CB20             (/home/strick/go/s):03479                  addb  #$20
132C 3470             (/home/strick/go/s):03480                  pshs  u,y,x
132E 17F05A           (/home/strick/go/s):03481                  lbsr  L0380
1331 35F0             (/home/strick/go/s):03482                  puls  pc,u,y,x
                      (/home/strick/go/s):03483         
1333 8D07             (/home/strick/go/s):03484         L1299    bsr   L12A2      Calculate length of NUL terminated string @,X
1335 C10F             (/home/strick/go/s):03485                  cmpb  #15        >15 chars?
1337 2302             (/home/strick/go/s):03486                  bls   L12A1      No, return
1339 C60F             (/home/strick/go/s):03487                  ldb   #15        Force to 15 chars
133B 39               (/home/strick/go/s):03488         L12A1    rts   
                      (/home/strick/go/s):03489         
                      (/home/strick/go/s):03490         * Get length of a NULL terminated text string (not greater than 128)
                      (/home/strick/go/s):03491         * Entry: X=Pointer to string
                      (/home/strick/go/s):03492         * Exit : B=Length of string
133C 3402             (/home/strick/go/s):03493         L12A2    pshs  a          preserve a
133E C6FF             (/home/strick/go/s):03494                  ldb   #$ff       Init count to 0
1340 5C               (/home/strick/go/s):03495         L12A5    incb             Bump char count up
1341 A685             (/home/strick/go/s):03496                  lda   b,x        Get char
1343 26FB             (/home/strick/go/s):03497                  bne   L12A5      Not end of string yet, keep looking
1345 3582             (/home/strick/go/s):03498         L12AC    puls  a,pc       restore a & return
                      (/home/strick/go/s):03499         
                      (/home/strick/go/s):03500         * Print a string of specific length
                      (/home/strick/go/s):03501         * NOTE: ASSUMES LENGTH NEVER >128 CHARS!
                      (/home/strick/go/s):03502         * Entry: B=Length of string
                      (/home/strick/go/s):03503         *        X=Pointer to string
                      (/home/strick/go/s):03504         
1347 3476             (/home/strick/go/s):03505         L12AE    pshs  d,x,y,u    Save regs
                      (/home/strick/go/s):03506                  IFNE  H6309
                      (/home/strick/go/s):03507                  clre  
                      (/home/strick/go/s):03508                  tfr   b,f        W=String length
                      (/home/strick/go/s):03509                  ldu   #$0180     Point to buffered write buffer
                      (/home/strick/go/s):03510                  tfm   x+,u+      Copy to GRFDRV buffer
                      (/home/strick/go/s):03511                  ELSE
1349 3404             (/home/strick/go/s):03512                  pshs  b
134B CE0180           (/home/strick/go/s):03513                  ldu   #$0180
134E A680             (/home/strick/go/s):03514         L12AEb   lda   ,x+
1350 A7C0             (/home/strick/go/s):03515                  sta   ,u+
1352 5A               (/home/strick/go/s):03516                  decb
1353 26F9             (/home/strick/go/s):03517                  bne   L12AEb
1355 4F               (/home/strick/go/s):03518                  clra
1356 FD11B5           (/home/strick/go/s):03519                  std   >GrfMem+gr00B5
1359 3504             (/home/strick/go/s):03520                  puls  b
                      (/home/strick/go/s):03521                  ENDC
135B CE0180           (/home/strick/go/s):03522                  ldu   #$0180     Point to buffered write buffer for GRFDRV
135E 1F98             (/home/strick/go/s):03523                  tfr   b,a        Move size of buffer to A for GRFDRV
1360 C606             (/home/strick/go/s):03524                  ldb   #$06       Buffered Write call code for GRFDRV
1362 17EFD4           (/home/strick/go/s):03525                  lbsr  L0101      Call GRFDRV
1365 35F6             (/home/strick/go/s):03526                  puls  d,x,y,u,pc Restore regs & return
                      (/home/strick/go/s):03527         
                      (/home/strick/go/s):03528         * Erase to end of line
1367 8604             (/home/strick/go/s):03529         L12B6    lda   #$04
1369 3476             (/home/strick/go/s):03530         L12B8    pshs  u,y,x,d
136B C63C             (/home/strick/go/s):03531                  ldb   #$3C
136D 20B4             (/home/strick/go/s):03532                  bra   L1289
                      (/home/strick/go/s):03533         
                      (/home/strick/go/s):03534         * Clear screen
136F 860C             (/home/strick/go/s):03535         L12BE    lda   #$0C
1371 20F6             (/home/strick/go/s):03536                  bra   L12B8
                      (/home/strick/go/s):03537         
1373 3476             (/home/strick/go/s):03538         L12C2    pshs  u,y,x,d
1375 BE1075           (/home/strick/go/s):03539                  ldx   >WGlobal+G.GfxTbl     Get graphics table ptr
1378 308902B9         (/home/strick/go/s):03540                  leax  >$02B9,x   Offset into it???
137C A684             (/home/strick/go/s):03541                  lda   Grf.Bck,x  DOUBT THIS IS RIGHT
137E 271A             (/home/strick/go/s):03542                  beq   L12E9
1380 A72B             (/home/strick/go/s):03543         L12CF    sta   Wt.FBlk,y
1382 EC01             (/home/strick/go/s):03544                  ldd   Grf.Off,x
1384 ED2C             (/home/strick/go/s):03545                  std   Wt.FOff,y
1386 35F6             (/home/strick/go/s):03546                  puls  pc,u,y,x,d
                      (/home/strick/go/s):03547         
                      (/home/strick/go/s):03548         * Switch to text font
1388 3476             (/home/strick/go/s):03549         L12D7    pshs  u,y,x,d
138A BE1075           (/home/strick/go/s):03550                  ldx   >WGlobal+G.GfxTbl     Get graphics tables ptr
138D 308902B6         (/home/strick/go/s):03551                  leax  >$02B6,x   Offset to ???
1391 A684             (/home/strick/go/s):03552                  lda   Grf.Bck,x  Get ???
1393 26EB             (/home/strick/go/s):03553                  bne   L12CF      If non-0, copy 3 bytes back to original state
1395 CCC801           (/home/strick/go/s):03554                  ldd   #$C801     Normal 8x8 text font
1398 2003             (/home/strick/go/s):03555                  bra   L12EC      Call grfdrv to set font
                      (/home/strick/go/s):03556         
                      (/home/strick/go/s):03557         * Switch to graphic font
139A CCC803           (/home/strick/go/s):03558         L12E9    ldd   #$C803     Graphics font/buffer #
139D 3470             (/home/strick/go/s):03559         L12EC    pshs  u,y,x
139F FD1157           (/home/strick/go/s):03560                  std   >GrfMem+gr0057     Save in Grfdrv mem
13A2 C618             (/home/strick/go/s):03561                  ldb   #$18       Set font command
13A4 17EF92           (/home/strick/go/s):03562                  lbsr  L0101      Set font in grfdrv
13A7 3570             (/home/strick/go/s):03563                  puls  u,y,x
13A9 A62B             (/home/strick/go/s):03564                  lda   Wt.FBlk,y  Copy stuff back
13AB A784             (/home/strick/go/s):03565                  sta   Grf.Bck,x
13AD EC2C             (/home/strick/go/s):03566                  ldd   Wt.FOff,y
13AF ED01             (/home/strick/go/s):03567                  std   Grf.Off,x
13B1 35F6             (/home/strick/go/s):03568                  puls  pc,u,y,x,d Restore & return
                      (/home/strick/go/s):03569         
                      (/home/strick/go/s):03570         * Turn inverse on
13B3 3470             (/home/strick/go/s):03571         L1329    pshs  u,y,x
13B5 CC2040           (/home/strick/go/s):03572                  ldd   #$2040     Inverse ON
13B8 17EF7E           (/home/strick/go/s):03573         L130D    lbsr  L0101      Go execute in grfdrv
13BB 35F0             (/home/strick/go/s):03574                  puls  pc,u,y,x
                      (/home/strick/go/s):03575         
                      (/home/strick/go/s):03576         * Turn inverse off
13BD 3470             (/home/strick/go/s):03577         L1331    pshs  u,y,x
13BF CC2140           (/home/strick/go/s):03578                  ldd   #$2140     Inverse off
13C2 20F4             (/home/strick/go/s):03579                  bra   L130D
                      (/home/strick/go/s):03580         
                      (/home/strick/go/s):03581         * Set pattern
13C4 3470             (/home/strick/go/s):03582         L1337    pshs  u,y,x
                      (/home/strick/go/s):03583                  IFNE  H6309
                      (/home/strick/go/s):03584                  clrd  
                      (/home/strick/go/s):03585                  ELSE
13C6 4F               (/home/strick/go/s):03586                  clra  
13C7 5F               (/home/strick/go/s):03587                  clrb  
                      (/home/strick/go/s):03588                  ENDC
13C8 FD1157           (/home/strick/go/s):03589                  std   >GrfMem+gr0057     Save in Grfdrv Mem
13CB C612             (/home/strick/go/s):03590                  ldb   #$12
13CD 20E9             (/home/strick/go/s):03591                  bra   L130D
                      (/home/strick/go/s):03592         
                      (/home/strick/go/s):03593         * Set logic type to 0 (normal gfx)
13CF 3470             (/home/strick/go/s):03594         L1342    pshs  u,y,x
13D1 4F               (/home/strick/go/s):03595                  clra  
13D2 A72A             (/home/strick/go/s):03596                  sta   Wt.LSet,y
13D4 C61E             (/home/strick/go/s):03597                  ldb   #$1E
13D6 20E0             (/home/strick/go/s):03598                  bra   L130D
                      (/home/strick/go/s):03599         
                      (/home/strick/go/s):03600         * Setup graphics table entry
13D8 3476             (/home/strick/go/s):03601         L1358    pshs  d,x,y,u
13DA 17F2E1           (/home/strick/go/s):03602                  lbsr  L06A0      verify window table
13DD EE66             (/home/strick/go/s):03603                  ldu   6,s        get static memory pointer
13DF 17F319           (/home/strick/go/s):03604                  lbsr  L06B9      get graphics table pointer
13E2 EC26             (/home/strick/go/s):03605                  ldd   Wt.Fore,y  get current foreground/background colors
13E4 ED07             (/home/strick/go/s):03606                  std   Gt.FClr,x  save it in graphics table
13E6 17F7D7           (/home/strick/go/s):03607                  lbsr  L0B01      get mask value
13E9 ED09             (/home/strick/go/s):03608                  std   Gt.FMsk,x  save it into graphics table
                      (/home/strick/go/s):03609                  IFNE  H6309
                      (/home/strick/go/s):03610                  clrd             init pointer to window descriptor
                      (/home/strick/go/s):03611                  ELSE
13EB 4F               (/home/strick/go/s):03612                  clra
13EC 5F               (/home/strick/go/s):03613                  clrb
                      (/home/strick/go/s):03614                  ENDC
13ED ED05             (/home/strick/go/s):03615                  std   Gt.DPtr,x
13EF 35F6             (/home/strick/go/s):03616                  puls  d,x,y,u,pc
                      (/home/strick/go/s):03617         
                      (/home/strick/go/s):03618         * Copy a window descriptor from caller's process area
                      (/home/strick/go/s):03619         * Entry: None
13F1 3466             (/home/strick/go/s):03620         L1371    pshs  d,y,u      preserve regs
13F3 8D27             (/home/strick/go/s):03621                  bsr   L139E      is it the owner of the window?
13F5 2520             (/home/strick/go/s):03622                  bcs   L1397      no, return
13F7 AE05             (/home/strick/go/s):03623                  ldx   Gt.DPtr,x  get pointer to window descriptor
13F9 33C90240         (/home/strick/go/s):03624                  leau  >$0240,u   point to a work buffer
13FD 108E0022         (/home/strick/go/s):03625                  ldy   #WN.SIZ    get size of descriptor
1401 327E             (/home/strick/go/s):03626         L1381    leas  -2,s       make a buffer for current process
1403 17EDFA           (/home/strick/go/s):03627                  lbsr  L0238      switch to system process
1406 103F1B           (/home/strick/go/s):03628                  os9   F$CpyMem   copy the window descriptor from process space
1409 17EE00           (/home/strick/go/s):03629                  lbsr  L0244      switch back to current process
140C 3262             (/home/strick/go/s):03630                  leas  2,s        purge stack
140E 1F31             (/home/strick/go/s):03631                  tfr   u,x        move destination to X
1410 EC8817           (/home/strick/go/s):03632                  ldd   WN.SYNC,x  get sync bytes
1413 1083C0C0         (/home/strick/go/s):03633                  cmpd  #WINSYNC   set flags for compare
1417 35E6             (/home/strick/go/s):03634         L1397    puls  d,y,u,pc   restore & return
                      (/home/strick/go/s):03635         
                      (/home/strick/go/s):03636         * Entry:
                      (/home/strick/go/s):03637         * Exit : B=Offset to DAT image
1419 17F2DF           (/home/strick/go/s):03638         L139B    lbsr  L06B9      get pointer to graphics table entry
141C FE1075           (/home/strick/go/s):03639         L139E    ldu   >WGlobal+G.GfxTbl     get pointer to start of graphics table
141F 109E48           (/home/strick/go/s):03640                  ldy   <D.PrcDBT  get process descriptor block table pointer
1422 E60E             (/home/strick/go/s):03641                  ldb   Gt.Proc,x  get process number of owner
1424 A6A5             (/home/strick/go/s):03642                  lda   b,y        get process # of user
1426 A10F             (/home/strick/go/s):03643                  cmpa  Gt.PBlk,x  match?
1428 2605             (/home/strick/go/s):03644                  bne   L13B1      no, set carry & return
142A C640             (/home/strick/go/s):03645                  ldb   #P$DATImg  get offset to DAT image into D
142C 1CFE             (/home/strick/go/s):03646                  andcc  #^Carry    clear carry
142E 39               (/home/strick/go/s):03647         L13B0    rts              return
                      (/home/strick/go/s):03648         
142F 1A01             (/home/strick/go/s):03649         L13B1    orcc  #Carry     set carry
1431 39               (/home/strick/go/s):03650                  rts              return
                      (/home/strick/go/s):03651         
                      (/home/strick/go/s):03652         * Copy a menu descriptor from caller's process space
1432 3466             (/home/strick/go/s):03653         L13B5    pshs  u,y,d
1434 3410             (/home/strick/go/s):03654                  pshs  x
1436 8DE1             (/home/strick/go/s):03655                  bsr   L139B      Get DAT image offset to copy menu descriptor from
1438 3510             (/home/strick/go/s):03656                  puls  x
143A 25DB             (/home/strick/go/s):03657                  bcs   L1397
143C 33C90262         (/home/strick/go/s):03658                  leau  >$0262,u
1440 108E0017         (/home/strick/go/s):03659                  ldy   #MN.SIZ
1444 20BB             (/home/strick/go/s):03660                  bra   L1381      Copy the memory
                      (/home/strick/go/s):03661         
                      (/home/strick/go/s):03662         * Set the root window menu bar to active state (Called from VTIO special calls)
1446 17FD65           (/home/strick/go/s):03663         L13E9    lbsr  L116C      setup working window table
1449 3278             (/home/strick/go/s):03664                  leas  -8,s       make a buffer
144B 6F62             (/home/strick/go/s):03665                  clr   2,s        clear a flag?
144D 17FE1B           (/home/strick/go/s):03666                  lbsr  L1240      draw 3D bar
1450 200E             (/home/strick/go/s):03667                  bra   L1404      go print it
                      (/home/strick/go/s):03668         
                      (/home/strick/go/s):03669         * SS.UmBar enry point
1452 17FD59           (/home/strick/go/s):03670         L13F5    lbsr  L116C      setup working window table
                      (/home/strick/go/s):03671         
                      (/home/strick/go/s):03672         * Called from SS.WnSet
1455 17FE13           (/home/strick/go/s):03673         L13FA    lbsr  L1240      draw a 3D bar
1458 3278             (/home/strick/go/s):03674                  leas  -8,s
145A 6F62             (/home/strick/go/s):03675                  clr   2,s
145C 10BE10BB         (/home/strick/go/s):03676                  ldy   >WGlobal+g00BB     Get ptr to work window table
                      (/home/strick/go/s):03677         
                      (/home/strick/go/s):03678         * Print menu bar in active state
1460 17FF50           (/home/strick/go/s):03679         L1404    lbsr  L1329      turn inverse on
                      (/home/strick/go/s):03680                  IFNE  H6309
                      (/home/strick/go/s):03681                  aim   #^TChr,Wt.BSW,y Turn on transparency
                      (/home/strick/go/s):03682                  ELSE
1463 3402             (/home/strick/go/s):03683                  pshs  a
1465 A629             (/home/strick/go/s):03684                  lda   Wt.BSW,y
1467 847F             (/home/strick/go/s):03685                  anda  #^TChr
1469 A729             (/home/strick/go/s):03686                  sta   Wt.BSW,y
146B 3502             (/home/strick/go/s):03687                  puls  a
                      (/home/strick/go/s):03688                  ENDC
146D 17FF18           (/home/strick/go/s):03689                  lbsr  L12D7      set to text font
                      (/home/strick/go/s):03690                  IFNE  H6309
                      (/home/strick/go/s):03691                  clrd             x,y both to 0
                      (/home/strick/go/s):03692                  ELSE
1470 4F               (/home/strick/go/s):03693                  clra
1471 5F               (/home/strick/go/s):03694                  clrb
                      (/home/strick/go/s):03695                  ENDC
1472 A765             (/home/strick/go/s):03696                  sta   5,s
1474 17FEB1           (/home/strick/go/s):03697                  lbsr  L128E      Set Text cursor to 0,0
1477 E637             (/home/strick/go/s):03698                  ldb   Wt.SZX,y   get current window X size
1479 C002             (/home/strick/go/s):03699                  subb  #2         take off 2 for space on either side of text
147B E7E4             (/home/strick/go/s):03700                  stb   ,s         save it
147D C602             (/home/strick/go/s):03701                  ldb   #2         get current text size (just the spaces so far)
147F E761             (/home/strick/go/s):03702                  stb   1,s        save it in buffer
1481 17FE99           (/home/strick/go/s):03703                  lbsr  L1283      print leading space for menu
                      (/home/strick/go/s):03704                  IFNE  H6309
                      (/home/strick/go/s):03705                  aim   #^Bold,Wt.BSW,y Turn off Bold print
                      (/home/strick/go/s):03706                  ELSE
1484 3402             (/home/strick/go/s):03707                  pshs  a
1486 A629             (/home/strick/go/s):03708                  lda   Wt.BSW,y
1488 84DF             (/home/strick/go/s):03709                  anda  #^Bold
148A A729             (/home/strick/go/s):03710                  sta   Wt.BSW,y
148C 3502             (/home/strick/go/s):03711                  puls  a
                      (/home/strick/go/s):03712                  ENDC
148E 17FE80           (/home/strick/go/s):03713                  lbsr  L127B      print close box
1491 10BE1075         (/home/strick/go/s):03714                  ldy   >WGlobal+G.GfxTbl     Get graphics table ptr
1495 31A9028E         (/home/strick/go/s):03715                  leay  >$028E,y   point to handling table
1499 6FA4             (/home/strick/go/s):03716                  clr   MnuXNum,y  Menu entry number=0
149B 17FF53           (/home/strick/go/s):03717                  lbsr  L1371      get window descriptor pointer
149E 1026009B         (/home/strick/go/s):03718                  lbne  L14E3      valid?
14A2 A68814           (/home/strick/go/s):03719                  lda   WN.NMNS,x  yes, get number of menus in menu bar
14A5 10270094         (/home/strick/go/s):03720                  lbeq  L14E3      none to print, return
14A9 810A             (/home/strick/go/s):03721                  cmpa  #10        more than 10?
14AB 1022008E         (/home/strick/go/s):03722                  lbhi  L14E3      yes, return
14AF A764             (/home/strick/go/s):03723                  sta   4,s        save count
14B1 AE8820           (/home/strick/go/s):03724                  ldx   WN.BAR,x   get pointer to menu descriptor
14B4 AF66             (/home/strick/go/s):03725         L144A    stx   6,s        save menu descriptor pointer
14B6 3440             (/home/strick/go/s):03726                  pshs  u
14B8 FE10B7           (/home/strick/go/s):03727                  ldu   >WGlobal+g00B7     get pointer to static mem
                      (/home/strick/go/s):03728                  IFNE  H6309
                      (/home/strick/go/s):03729                  bsr   L13B5      get menu descriptor
                      (/home/strick/go/s):03730                  ELSE
14BB 17FF74           (/home/strick/go/s):03731                  lbsr  L13B5
                      (/home/strick/go/s):03732                  ENDC
14BE 3540             (/home/strick/go/s):03733                  puls  u
14C0 10BE10BB         (/home/strick/go/s):03734                  ldy   >WGlobal+g00BB     Get ptr to work window table
14C4 A68812           (/home/strick/go/s):03735                  lda   MN.ENBL,x  is menu enabled?
14C7 2708             (/home/strick/go/s):03736                  beq   L1466      no, skip ahead
                      (/home/strick/go/s):03737                  IFNE  H6309
                      (/home/strick/go/s):03738                  oim   #Bold,Wt.BSW,y Turn on Bold print
                      (/home/strick/go/s):03739                  ELSE
14C9 A629             (/home/strick/go/s):03740                  lda   Wt.BSW,y
14CB 8A20             (/home/strick/go/s):03741                  ora   #Bold
14CD A729             (/home/strick/go/s):03742                  sta   Wt.BSW,y
                      (/home/strick/go/s):03743                  ENDC
14CF 2006             (/home/strick/go/s):03744                  bra   L1469      skip ahead
                      (/home/strick/go/s):03745         
     14D1             (/home/strick/go/s):03746         L1466    equ   *
                      (/home/strick/go/s):03747                  IFNE  H6309
                      (/home/strick/go/s):03748                  aim   #^Bold,Wt.BSW,y Turn off Bold print
                      (/home/strick/go/s):03749                  ELSE
14D1 A629             (/home/strick/go/s):03750                  lda   Wt.BSW,y
14D3 84DF             (/home/strick/go/s):03751                  anda  #^Bold
14D5 A729             (/home/strick/go/s):03752                  sta   Wt.BSW,y
                      (/home/strick/go/s):03753                  ENDC
14D7 A60F             (/home/strick/go/s):03754         L1469    lda   MN.ID,x    get ID number
14D9 8114             (/home/strick/go/s):03755                  cmpa  #MId.Tdy   is it tandy menu?
14DB 261F             (/home/strick/go/s):03756                  bne   L148D      no, skip ahead
                      (/home/strick/go/s):03757         * Print tandy menu
14DD 10BE10BB         (/home/strick/go/s):03758                  ldy   >WGlobal+g00BB     Get ptr to work window table
14E1 17FE39           (/home/strick/go/s):03759                  lbsr  L1283      print a space
14E4 17FE32           (/home/strick/go/s):03760                  lbsr  L127F      print the tandy character
14E7 17FE33           (/home/strick/go/s):03761                  lbsr  L1283      print a space
14EA C601             (/home/strick/go/s):03762                  ldb   #1         get this menu's length
14EC E763             (/home/strick/go/s):03763                  stb   3,s        save it
14EE 3404             (/home/strick/go/s):03764                  pshs  b
14F0 8D55             (/home/strick/go/s):03765                  bsr   L14EE      add it into handling table
14F2 3261             (/home/strick/go/s):03766                  leas  1,s
14F4 E6E4             (/home/strick/go/s):03767                  ldb   ,s         get window size
14F6 C003             (/home/strick/go/s):03768                  subb  #3         take off length for tandy menu
14F8 E7E4             (/home/strick/go/s):03769                  stb   ,s         save it back
14FA 2034             (/home/strick/go/s):03770                  bra   L14C6      go to next entry
                      (/home/strick/go/s):03771         
                      (/home/strick/go/s):03772         * Print normal menu entry
14FC 3084             (/home/strick/go/s):03773         L148D    leax  MN.TTL,x   point to text
14FE 17FE32           (/home/strick/go/s):03774                  lbsr  L1299      get length of it up to maxium of 15
1501 E763             (/home/strick/go/s):03775                  stb   3,s        save it
1503 E1E4             (/home/strick/go/s):03776                  cmpb  ,s         will it fit in window?
1505 2308             (/home/strick/go/s):03777                  bls   L14A4      yes, skip ahead
1507 E6E4             (/home/strick/go/s):03778                  ldb   ,s         get window X size
1509 C001             (/home/strick/go/s):03779                  subb  #1
150B 2330             (/home/strick/go/s):03780                  bls   L14E3      no, return
150D 6C62             (/home/strick/go/s):03781                  inc   2,s        flag only 1 space
                      (/home/strick/go/s):03782         * Print menu title text
150F 3404             (/home/strick/go/s):03783         L14A4    pshs  b          save length of text
1511 10BE10BB         (/home/strick/go/s):03784                  ldy   >WGlobal+g00BB     Get ptr to work window table
1515 17FE05           (/home/strick/go/s):03785                  lbsr  L1283      print a space
1518 17FE2C           (/home/strick/go/s):03786                  lbsr  L12AE      print menu text
151B 6D63             (/home/strick/go/s):03787                  tst   3,s        was there anything to print?
151D 2603             (/home/strick/go/s):03788                  bne   L14B6      yes, skip ahead
151F 17FDFB           (/home/strick/go/s):03789                  lbsr  L1283      print a space
1522 8D23             (/home/strick/go/s):03790         L14B6    bsr   L14EE      add menu to handling table
1524 3502             (/home/strick/go/s):03791                  puls  a          get length of menu text
1526 8B02             (/home/strick/go/s):03792                  adda  #2         add 2 for space on each side
1528 E6E4             (/home/strick/go/s):03793                  ldb   ,s         get size
                      (/home/strick/go/s):03794                  IFNE  H6309
                      (/home/strick/go/s):03795                  subr  a,b        subtract width from size left
                      (/home/strick/go/s):03796                  ELSE
152A 3402             (/home/strick/go/s):03797                  pshs  a
152C E0E0             (/home/strick/go/s):03798                  subb  ,s+
                      (/home/strick/go/s):03799                  ENDC
152E E7E4             (/home/strick/go/s):03800                  stb   ,s         save size left
                      (/home/strick/go/s):03801         
                      (/home/strick/go/s):03802         * Move to next menu descriptor
1530 AE66             (/home/strick/go/s):03803         L14C6    ldx   6,s        get menu descriptor pointer
1532 308817           (/home/strick/go/s):03804                  leax  MN.SIZ,x   point to next menu descriptor
1535 6C65             (/home/strick/go/s):03805                  inc   5,s        add 1 to menu total
1537 6A64             (/home/strick/go/s):03806                  dec   4,s        done all descriptors?
1539 1026FF77         (/home/strick/go/s):03807                  lbne  L144A      no, go print next one
153D 10BE10BB         (/home/strick/go/s):03808         L14E3    ldy   >WGlobal+g00BB     Get ptr to work window table
1541 17FE79           (/home/strick/go/s):03809                  lbsr  L1331      turn inverse off
1544 3268             (/home/strick/go/s):03810                  leas  8,s        purge stack
1546 39               (/home/strick/go/s):03811                  rts              return
                      (/home/strick/go/s):03812         
                      (/home/strick/go/s):03813         * Add menu entry to internal handling table.
                      (/home/strick/go/s):03814         * Entry: Stack buffer pre loaded
                      (/home/strick/go/s):03815         * This table is 4 bytes long for each entry and consists of:
                      (/home/strick/go/s):03816         *        $00 - Menu # (starts at 1)
                      (/home/strick/go/s):03817         *        $01 - X start co-ordinate
                      (/home/strick/go/s):03818         *        $02 - X End co-ordinate
                      (/home/strick/go/s):03819         *        $03 - Reserved as far as I can tell (possibly use for menu type
                      (/home/strick/go/s):03820         *              flag: 0=normal, 1="sticky", etc.)
1547 3416             (/home/strick/go/s):03821         L14EE    pshs  d,x
1549 BE1075           (/home/strick/go/s):03822                  ldx   >WGlobal+G.GfxTbl     get pointer to special windowing table
154C 3089028E         (/home/strick/go/s):03823                  leax  >$028E,x   point to menu handling table
1550 E66C             (/home/strick/go/s):03824                  ldb   12,s       get menu number
1552 4F               (/home/strick/go/s):03825                  clra             multiply it by 4 (size of handling table entries)
                      (/home/strick/go/s):03826                  IFNE  H6309
                      (/home/strick/go/s):03827                  lsld  
                      (/home/strick/go/s):03828                  lsld  
                      (/home/strick/go/s):03829                  addr  d,x        add to handling table start
                      (/home/strick/go/s):03830                  ELSE
1553 58               (/home/strick/go/s):03831                  lslb
1554 49               (/home/strick/go/s):03832                  rola
1555 58               (/home/strick/go/s):03833                  lslb
1556 49               (/home/strick/go/s):03834                  rola
1557 308B             (/home/strick/go/s):03835                  leax  d,x
                      (/home/strick/go/s):03836                  ENDC
1559 E66C             (/home/strick/go/s):03837                  ldb   12,s       get menu number
155B 5C               (/home/strick/go/s):03838                  incb             Bump up by 1
155C E784             (/home/strick/go/s):03839                  stb   MnuXNum,x  save menu number
155E E668             (/home/strick/go/s):03840                  ldb   8,s        get X start coord
1560 E701             (/home/strick/go/s):03841                  stb   MnuXStrt,x save it
1562 EB6A             (/home/strick/go/s):03842                  addb  10,s       add length
1564 5C               (/home/strick/go/s):03843                  incb             add 1 for space
1565 E702             (/home/strick/go/s):03844                  stb   MnuXEnd,x  save end X coord
1567 5C               (/home/strick/go/s):03845                  incb  
1568 E768             (/home/strick/go/s):03846                  stb   8,s
156A 6F04             (/home/strick/go/s):03847                  clr   MnuHSiz,x  make sure next entry is clear
156C 3596             (/home/strick/go/s):03848                  puls  d,x,pc
                      (/home/strick/go/s):03849         
                      (/home/strick/go/s):03850         * SS.MnSel entry point
                      (/home/strick/go/s):03851         * Buffer breakdown:
                      (/home/strick/go/s):03852         * $00-$01,s : Static mem ptr
                      (/home/strick/go/s):03853         * $02-$17,s : ???
                      (/home/strick/go/s):03854         * $18-$19,s : Window table ptr
                      (/home/strick/go/s):03855         * $1A-$21,s : ???
                      (/home/strick/go/s):03856         * $22,s     : ??? (Flag of some sort)
                      (/home/strick/go/s):03857         * $23,s     : ???
156E 32E8DD           (/home/strick/go/s):03858         L1515    leas  <-$23,s    make a buffer
1571 EFE4             (/home/strick/go/s):03859                  stu   ,s         save static mem pointer
1573 10AFE818         (/home/strick/go/s):03860                  sty   $18,s      save window table pointer
1577 6FE822           (/home/strick/go/s):03861                  clr   $22,s      clear a flag
157A 7D100A           (/home/strick/go/s):03862                  tst   >WGlobal+G.CrDvFl     Are we the current active device?
157D 2758             (/home/strick/go/s):03863                  beq   L160A      No, return with nothing
157F 8E103C           (/home/strick/go/s):03864                  ldx   #WGlobal+G.Mouse Get ptr to mouse packet
1582 7F100E           (/home/strick/go/s):03865                  clr   >WGlobal+G.WIBusy     flag cowin free
1585 6D08             (/home/strick/go/s):03866         L1530    tst   Pt.CBSA,x  button A still down?
1587 26FC             (/home/strick/go/s):03867                  bne   L1530      yes, wait for release
1589 7C100E           (/home/strick/go/s):03868                  inc   >WGlobal+G.WIBusy     flag cowin busy
158C 17F12F           (/home/strick/go/s):03869                  lbsr  L06A0      verify window
158F 1708AB           (/home/strick/go/s):03870                  lbsr  L1D24      copy current mouse coords to work cords.
1592 308820           (/home/strick/go/s):03871                  leax  Pt.Siz,x   point to my work coords (hidden outside packet)
1595 170783           (/home/strick/go/s):03872                  lbsr  L1C19      mouse on full window?
1598 253D             (/home/strick/go/s):03873                  bcs   L160A      no, return with nothing
159A 1700CA           (/home/strick/go/s):03874                  lbsr  L161B      calculate window start & end coords in pixels
159D EC67             (/home/strick/go/s):03875                  ldd   7,s        get current mouse Y coord?
159F 10830007         (/home/strick/go/s):03876                  cmpd  #7         is it in the menu bar?
15A3 2236             (/home/strick/go/s):03877                  bhi   L158B      no, skip ahead
15A5 E6E813           (/home/strick/go/s):03878                  ldb   <$13,s     get current mouse text X coord
15A8 C101             (/home/strick/go/s):03879                  cmpb  #$01       past close box?
15AA 2E04             (/home/strick/go/s):03880                  bgt   L155E      yes, skip ahead
15AC 8602             (/home/strick/go/s):03881                  lda   #MId.Cls   No, menu id=Close box
15AE 204E             (/home/strick/go/s):03882                  bra   L160C      return menu info
                      (/home/strick/go/s):03883         
                      (/home/strick/go/s):03884         * It wasn't close box scan menu handling table
15B0 BE1075           (/home/strick/go/s):03885         L155E    ldx   >WGlobal+G.GfxTbl     get graphics table pointer
15B3 3089028E         (/home/strick/go/s):03886                  leax  >$028E,x   point to menu handling table
15B7 A684             (/home/strick/go/s):03887         L1565    lda   MnuXNum,x  last entry?
15B9 271C             (/home/strick/go/s):03888                  beq   L160A      yes, return nothing
15BB E102             (/home/strick/go/s):03889                  cmpb  MnuXEnd,x  within max X range?
15BD 2214             (/home/strick/go/s):03890                  bhi   L1587      no, point to next entry
15BF 17017F           (/home/strick/go/s):03891                  lbsr  L16E6      process menu pulldown
15C2 3442             (/home/strick/go/s):03892                  pshs  a,u        save menu ID & global mem
15C4 EE63             (/home/strick/go/s):03893                  ldu   3,s        get static mem pointer
15C6 A6E824           (/home/strick/go/s):03894                  lda   <$24,s     get mouse signal process #
15C9 A7C826           (/home/strick/go/s):03895                  sta   V.MSigID,u save it in static mem
15CC 7F10C6           (/home/strick/go/s):03896                  clr   >WGlobal+G.MsSig     Clear mouse signal flag
15CF 3542             (/home/strick/go/s):03897                  puls  a,u
15D1 202B             (/home/strick/go/s):03898                  bra   L160C      Return menu id # & entry # to caller
                      (/home/strick/go/s):03899         
15D3 3004             (/home/strick/go/s):03900         L1587    leax  MnuHSiz,x  move to next entry in handling table
15D5 20E0             (/home/strick/go/s):03901                  bra   L1565      keep looking
                      (/home/strick/go/s):03902         
                      (/home/strick/go/s):03903         * Return no menu information received
     15D7             (/home/strick/go/s):03904         L160A    equ   *
                      (/home/strick/go/s):03905                  IFNE  H6309
                      (/home/strick/go/s):03906                  clrd             Menu # & ID # =0
                      (/home/strick/go/s):03907                  ELSE
15D7 4F               (/home/strick/go/s):03908                  clra
15D8 5F               (/home/strick/go/s):03909                  clrb
                      (/home/strick/go/s):03910                  ENDC
15D9 2023             (/home/strick/go/s):03911                  bra   L160C
                      (/home/strick/go/s):03912         
                      (/home/strick/go/s):03913         * Mouse wasn't on menu bar check scroll bars
                      (/home/strick/go/s):03914         * NOTE: SHOULD ADD SO THAT IF MOUSE CLICKED BETWEEN SCROLL BARS, IT WILL
                      (/home/strick/go/s):03915         *       RETURN THE POSITION (IN TEXT CHARS) ACROSS OR UP/DOWN WITHIN SCROLL
                      (/home/strick/go/s):03916         *       BAR AREA
15DB 3470             (/home/strick/go/s):03917         L158B    pshs  u,y,x
15DD EE66             (/home/strick/go/s):03918                  ldu   6,s        get static mem pointer
15DF 17F119           (/home/strick/go/s):03919                  lbsr  L06B9      get graphics table entry pointer
15E2 A684             (/home/strick/go/s):03920                  lda   ,x         get window type
15E4 8102             (/home/strick/go/s):03921                  cmpa  #WT.FSWin  do we have scroll bars?
15E6 3570             (/home/strick/go/s):03922                  puls  u,y,x
15E8 26ED             (/home/strick/go/s):03923                  bne   L160A      no, no need to check more return nothing
                      (/home/strick/go/s):03924         * Check for left scroll bar arrow
15EA EC65             (/home/strick/go/s):03925                  ldd   5,s        get mouse X coord
15EC 10830007         (/home/strick/go/s):03926                  cmpd  #7         X in range for left scroll bar arrow?
15F0 2219             (/home/strick/go/s):03927                  bhi   L15B0      no, check up arrow
15F2 EC6F             (/home/strick/go/s):03928                  ldd   $0F,s
15F4 830007           (/home/strick/go/s):03929                  subd  #7
15F7 10A367           (/home/strick/go/s):03930                  cmpd  7,s
15FA 220F             (/home/strick/go/s):03931                  bhi   L15B0
15FC 8607             (/home/strick/go/s):03932                  lda   #MId.SLt   get menu ID for left scroll bar arrow
                      (/home/strick/go/s):03933         * Return menu ID & item to caller
                      (/home/strick/go/s):03934         * Entry: A=Menu ID
                      (/home/strick/go/s):03935         *        B=Menu item #
                      (/home/strick/go/s):03936         *        Y=Path descriptor pointer
15FE 10AEE818         (/home/strick/go/s):03937         L160C    ldy   <$18,s     get path descriptor pointer
1602 AE26             (/home/strick/go/s):03938                  ldx   PD.RGS,y   get register stack pointer
1604 ED01             (/home/strick/go/s):03939                  std   R$D,x      save menu & item #
1606 32E823           (/home/strick/go/s):03940                  leas  <$23,s     Eat stack buffer
1609 5F               (/home/strick/go/s):03941                  clrb             No error & return
160A 39               (/home/strick/go/s):03942                  rts   
                      (/home/strick/go/s):03943         
                      (/home/strick/go/s):03944         * Check for up scroll bar arrow
160B EC67             (/home/strick/go/s):03945         L15B0    ldd   7,s        get mouse Y coord
160D 1083000F         (/home/strick/go/s):03946                  cmpd  #15        in range of up arrow?
1611 220E             (/home/strick/go/s):03947                  bhi   L15C6      no, check right arrow
1613 EC6D             (/home/strick/go/s):03948                  ldd   $D,s       get window X end coord pixel
1615 830007           (/home/strick/go/s):03949                  subd  #7         subtract 7
1618 10A365           (/home/strick/go/s):03950                  cmpd  5,s        mouse X coord in range?
161B 2204             (/home/strick/go/s):03951                  bhi   L15C6      no, check right arrow
161D 8604             (/home/strick/go/s):03952                  lda   #MId.SUp   get menu ID for scroll up arrow
161F 20DD             (/home/strick/go/s):03953                  bra   L160C      return with menu ID
                      (/home/strick/go/s):03954         
                      (/home/strick/go/s):03955         * Check for right scroll bar arrow
1621 EC6F             (/home/strick/go/s):03956         L15C6    ldd   $0F,s      get window Y end co-ordinate pixel
1623 830007           (/home/strick/go/s):03957                  subd  #7         subtract 7
1626 10A367           (/home/strick/go/s):03958                  cmpd  7,s        mouse in range for Y
1629 2218             (/home/strick/go/s):03959                  bhi   L15E8      no, check down arrow
162B EC6D             (/home/strick/go/s):03960                  ldd   $0D,s      get window X end co-ordinate pixel
162D 830008           (/home/strick/go/s):03961                  subd  #8         subtract 8
1630 10A365           (/home/strick/go/s):03962                  cmpd  5,s        mouse below maximum range?
1633 250E             (/home/strick/go/s):03963                  blo   L15E8      no, check down arrow
1635 EC6D             (/home/strick/go/s):03964                  ldd   $0D,s
1637 83000F           (/home/strick/go/s):03965                  subd  #$000F
163A 10A365           (/home/strick/go/s):03966                  cmpd  5,s
163D 2204             (/home/strick/go/s):03967                  bhi   L15E8
163F 8606             (/home/strick/go/s):03968                  lda   #MId.SRt   get menu ID for right scroll arrow
1641 20BB             (/home/strick/go/s):03969                  bra   L160C
                      (/home/strick/go/s):03970         
                      (/home/strick/go/s):03971         * Check for down scroll bar arrow
1643 EC6D             (/home/strick/go/s):03972         L15E8    ldd   $0D,s
1645 830007           (/home/strick/go/s):03973                  subd  #$0007
1648 10A365           (/home/strick/go/s):03974                  cmpd  5,s
164B 228A             (/home/strick/go/s):03975                  bhi   L160A      no, not on scroll bars, so return nothing
164D EC6F             (/home/strick/go/s):03976                  ldd   $0F,s
164F 830008           (/home/strick/go/s):03977                  subd  #$0008
1652 10A367           (/home/strick/go/s):03978                  cmpd  7,s
1655 2580             (/home/strick/go/s):03979                  blo   L160A
1657 EC6F             (/home/strick/go/s):03980                  ldd   $0F,s
1659 83000F           (/home/strick/go/s):03981                  subd  #$000F
165C 10A367           (/home/strick/go/s):03982                  cmpd  7,s
165F 1022FF74         (/home/strick/go/s):03983                  lbhi  L160A
1663 8605             (/home/strick/go/s):03984                  lda   #MId.SDn   get menu ID for down scroll arrow
1665 2097             (/home/strick/go/s):03985                  bra   L160C      save it to caller & return
                      (/home/strick/go/s):03986         
                      (/home/strick/go/s):03987         * Calculate window start & end coords in pixels
     1667             (/home/strick/go/s):03988         L161B    equ   *
                      (/home/strick/go/s):03989                  IFNE  H6309
                      (/home/strick/go/s):03990                  clrd
                      (/home/strick/go/s):03991                  ELSE
1667 4F               (/home/strick/go/s):03992                  clra
1668 5F               (/home/strick/go/s):03993                  clrb
                      (/home/strick/go/s):03994                  ENDC
1669 ED6D             (/home/strick/go/s):03995                  std   $0D,s
166B 3406             (/home/strick/go/s):03996                  pshs  d
166D 8D4C             (/home/strick/go/s):03997                  bsr   L1667      calculate coords
166F 3506             (/home/strick/go/s):03998                  puls  d
1671 E6A826           (/home/strick/go/s):03999                  ldb   Wt.DfCPX,y get full window X start coord
1674 EB6D             (/home/strick/go/s):04000                  addb  $0D,s      add it to
1676 17FC4F           (/home/strick/go/s):04001                  lbsr  L1015      calculate size in pixels
                      (/home/strick/go/s):04002                  IFNE  H6309
                      (/home/strick/go/s):04003                  tfr   d,w        copy it to W
                      (/home/strick/go/s):04004                  ldd   ,x         get mouse X co-ordinate
                      (/home/strick/go/s):04005                  subr  w,d        calculate relative co-ordinate in window
                      (/home/strick/go/s):04006                  ELSE
1679 FD11B5           (/home/strick/go/s):04007                  std   >GrfMem+gr00B5
167C EC84             (/home/strick/go/s):04008                  ldd   ,x
167E B311B5           (/home/strick/go/s):04009                  subd  >GrfMem+gr00B5
                      (/home/strick/go/s):04010                  ENDC
1681 ED67             (/home/strick/go/s):04011                  std   7,s        save it on stack
1683 8D59             (/home/strick/go/s):04012                  bsr   L1027      divide it by 8
1685 E7E815           (/home/strick/go/s):04013                  stb   <$15,s     save it as mouse text X co-ordinate
1688 E6A827           (/home/strick/go/s):04014                  ldb   Wt.DfCPY,y get window default Y start co-ordinate
168B EB6E             (/home/strick/go/s):04015                  addb  $0E,s      add in size
168D 17FC38           (/home/strick/go/s):04016                  lbsr  L1015      calculate window height in pixels
                      (/home/strick/go/s):04017                  IFNE  H6309
                      (/home/strick/go/s):04018                  ldw   $02,x      get mouse Y co-ordinate
                      (/home/strick/go/s):04019                  subr  d,w        calculate relative co-ordinate within window
                      (/home/strick/go/s):04020                  stw   9,s        save it
                      (/home/strick/go/s):04021                  ELSE
1690 340E             (/home/strick/go/s):04022                  pshs  d,dp
1692 A762             (/home/strick/go/s):04023                  sta   2,s
1694 EC02             (/home/strick/go/s):04024                  ldd   2,x
1696 A3E1             (/home/strick/go/s):04025                  subd  ,s++
1698 ED6A             (/home/strick/go/s):04026                  std   10,s
169A FD11B5           (/home/strick/go/s):04027                  std   >GrfMem+gr00B5
169D 3502             (/home/strick/go/s):04028                  puls  a
                      (/home/strick/go/s):04029                  ENDC
169F E6A826           (/home/strick/go/s):04030                  ldb   Wt.DfCPX,y get window default X start co-ordinate
16A2 EB6D             (/home/strick/go/s):04031                  addb  $0D,s
16A4 EBA828           (/home/strick/go/s):04032                  addb  Wt.DfSZX,y
16A7 17FC1E           (/home/strick/go/s):04033                  lbsr  L1015      calculate size in pixels
16AA ED6F             (/home/strick/go/s):04034                  std   $0F,s
16AC E6A827           (/home/strick/go/s):04035                  ldb   Wt.DfCPY,y
16AF EB6E             (/home/strick/go/s):04036                  addb  $0E,s
16B1 EBA829           (/home/strick/go/s):04037                  addb  Wt.DfSZY,y
16B4 17FC11           (/home/strick/go/s):04038                  lbsr  L1015      calculate size in pixels
16B7 EDE811           (/home/strick/go/s):04039                  std   <$11,s
16BA 39               (/home/strick/go/s):04040                  rts   
                      (/home/strick/go/s):04041         
                      (/home/strick/go/s):04042         * Seems to hunt down root device window given overlay window?
                      (/home/strick/go/s):04043         * Entry: X=some sort of window tbl ptr
                      (/home/strick/go/s):04044         *        Y=Some sort of window tbl ptr
16BB 3430             (/home/strick/go/s):04045         L1667    pshs  y,x
16BD A632             (/home/strick/go/s):04046                  lda   Wt.BLnk,y  this a overlay window?
16BF 2B1B             (/home/strick/go/s):04047         L166B    bmi   L1688      no, return
16C1 17070B           (/home/strick/go/s):04048                  lbsr  L1CBC      point X to the window table entry
16C4 EC8826           (/home/strick/go/s):04049                  ldd   Wt.DfCPX,x get window default start co-ordinates
16C7 E3E815           (/home/strick/go/s):04050                  addd  <$15,s
16CA 10AE8824         (/home/strick/go/s):04051                  ldy   Wt.LStDf,x get window logical start address
16CE 10AC13           (/home/strick/go/s):04052                  cmpy  Wt.LStrt,x match current?
16D1 2702             (/home/strick/go/s):04053                  beq   L1681      yes, skip ahead
16D3 E315             (/home/strick/go/s):04054                  addd  Wt.CPX,x   add current start co-ordinates
16D5 EDE815           (/home/strick/go/s):04055         L1681    std   <$15,s
16D8 A612             (/home/strick/go/s):04056                  lda   Wt.Blnk,x  get back window link
16DA 20E3             (/home/strick/go/s):04057                  bra   L166B      go calculate 
16DC 35B0             (/home/strick/go/s):04058         L1688    puls  pc,y,x
                      (/home/strick/go/s):04059         
                      (/home/strick/go/s):04060         * Signed Divide by 8
                      (/home/strick/go/s):04061         * ONLY CALLED TWICE...SHOULD EMBED
     16DE             (/home/strick/go/s):04062         L1027    equ   *
                      (/home/strick/go/s):04063                  IFNE  H6309
                      (/home/strick/go/s):04064                  asrd  
                      (/home/strick/go/s):04065                  asrd  
                      (/home/strick/go/s):04066                  asrd  
                      (/home/strick/go/s):04067                  ELSE
16DE 47               (/home/strick/go/s):04068                  asra
16DF 56               (/home/strick/go/s):04069                  rorb
16E0 47               (/home/strick/go/s):04070                  asra
16E1 56               (/home/strick/go/s):04071                  rorb
16E2 47               (/home/strick/go/s):04072                  asra
16E3 56               (/home/strick/go/s):04073                  rorb
                      (/home/strick/go/s):04074                  ENDC
16E4 39               (/home/strick/go/s):04075                  rts   
                      (/home/strick/go/s):04076         
                      (/home/strick/go/s):04077         * Calculate the current mouse Y text coord within a overlay window
                      (/home/strick/go/s):04078         * used for menu pull down updates
16E5 3450             (/home/strick/go/s):04079         L168A    pshs  x,u        preserve pointer to mouse coords & global mem
16E7 A632             (/home/strick/go/s):04080                  lda   Wt.BLnk,y  get parent window # of this overlay
16E9 1706E3           (/home/strick/go/s):04081                  lbsr  L1CBC      point X to window table entry
16EC A612             (/home/strick/go/s):04082                  lda   Wt.BLnk,x  parent window a overlay?
16EE 2A08             (/home/strick/go/s):04083                  bpl   L169D      yes, skip ahead
16F0 E6A827           (/home/strick/go/s):04084                  ldb   Wt.DfCPY,y get current overlay window Y default start
16F3 EB8827           (/home/strick/go/s):04085                  addb  Wt.DfCPY,x add it to parent window default Y start
16F6 2007             (/home/strick/go/s):04086                  bra   L16A6      skip ahead
                      (/home/strick/go/s):04087         
16F8 E6A827           (/home/strick/go/s):04088         L169D    ldb   Wt.DfCPY,y get default Y co-ordinate of current window
16FB 8D1A             (/home/strick/go/s):04089                  bsr   L16BC
16FD 1F89             (/home/strick/go/s):04090                  tfr   a,b
16FF AEE4             (/home/strick/go/s):04091         L16A6    ldx   ,s         get mouse coordinate pointer
1701 17FBC4           (/home/strick/go/s):04092                  lbsr  L1015      calculate it in pixels
                      (/home/strick/go/s):04093                  IFNE  H6309
                      (/home/strick/go/s):04094                  incd             Add 1
                      (/home/strick/go/s):04095                  tfr   d,w        copy it to W
                      (/home/strick/go/s):04096                  ldd   2,x        get mouse Y co-ordinate
                      (/home/strick/go/s):04097                  subr  w,d        calculate the relative co-ordinate in window
                      (/home/strick/go/s):04098                  ELSE
1704 C30001           (/home/strick/go/s):04099                  addd  #$0001
1707 FD11B5           (/home/strick/go/s):04100                  std   >GrfMem+gr00B5
170A 3406             (/home/strick/go/s):04101                  pshs  d
170C EC02             (/home/strick/go/s):04102                  ldd   2,x
170E A3E1             (/home/strick/go/s):04103                  subd  ,s++
                      (/home/strick/go/s):04104                  ENDC
1710 8DCC             (/home/strick/go/s):04105                  bsr   L1027      divide it by 8
1712 5A               (/home/strick/go/s):04106                  decb             subtract 1
1713 1F98             (/home/strick/go/s):04107                  tfr   b,a        copy it to A
1715 35D0             (/home/strick/go/s):04108                  puls  x,u,pc     restore & return
                      (/home/strick/go/s):04109         
                      (/home/strick/go/s):04110         * Calculate the current mouse Y text co-ordinate
1717 3430             (/home/strick/go/s):04111         L16BC    pshs  x,y        preserve current & parent window table pointers
1719 5F               (/home/strick/go/s):04112                  clrb  
171A 3404             (/home/strick/go/s):04113                  pshs  b
171C 1F21             (/home/strick/go/s):04114                  tfr   y,x
171E A612             (/home/strick/go/s):04115         L16C3    lda   Wt.BLnk,x  get window # of parent window
1720 2B0C             (/home/strick/go/s):04116                  bmi   L16D3      we're at the bottom, skip ahead
1722 1706AA           (/home/strick/go/s):04117                  lbsr  L1CBC      go calculate
1725 E68827           (/home/strick/go/s):04118                  ldb   Wt.DfCPY,x get parent window default Y start
1728 EBE4             (/home/strick/go/s):04119                  addb  ,s         add it to current
172A E7E4             (/home/strick/go/s):04120                  stb   ,s         save it
172C 20F0             (/home/strick/go/s):04121                  bra   L16C3      keep going
                      (/home/strick/go/s):04122         
172E 10AE8824         (/home/strick/go/s):04123         L16D3    ldy   Wt.LStDf,x
1732 10AC13           (/home/strick/go/s):04124                  cmpy  Wt.LStrt,x
1735 2706             (/home/strick/go/s):04125                  beq   L16E2
1737 E616             (/home/strick/go/s):04126                  ldb   Wt.CPY,x
1739 EBE4             (/home/strick/go/s):04127                  addb  ,s
173B E7E4             (/home/strick/go/s):04128                  stb   ,s
173D 6CE4             (/home/strick/go/s):04129         L16E2    inc   ,s
173F 35B2             (/home/strick/go/s):04130                  puls  a,x,y,pc
                      (/home/strick/go/s):04131         
                      (/home/strick/go/s):04132         * Process a selected menu item on menu bar
                      (/home/strick/go/s):04133         * Entry: A=Menu # from menu handling table
                      (/home/strick/go/s):04134         *        X=Pointer to menu handling entry
1741 AF6B             (/home/strick/go/s):04135         L16E6    stx   $0B,s      save current menu handling entry pointer
1743 10AEE81A         (/home/strick/go/s):04136                  ldy   <$1A,s     get path descriptor pointer
1747 EE62             (/home/strick/go/s):04137                  ldu   $02,s      get static mem pointer
1749 E6C826           (/home/strick/go/s):04138                  ldb   V.MSigID,u get process ID of mouse signal reciever
174C E7E823           (/home/strick/go/s):04139                  stb   <$23,s     save it
174F 6FC826           (/home/strick/go/s):04140                  clr   V.MSigID,u clear it in device mem
1752 17033E           (/home/strick/go/s):04141                  lbsr  L1A3C      copy window table
1755 AFE81E           (/home/strick/go/s):04142                  stx   <$1E,s     save pointer to graphics table entry
1758 10AFE813         (/home/strick/go/s):04143                  sty   <$13,s     save pointer to window table
175C BE1075           (/home/strick/go/s):04144                  ldx   >WGlobal+G.GfxTbl     get graphics table pointer
175F 30890240         (/home/strick/go/s):04145                  leax  >$0240,x   point to working window descriptor
1763 AE8820           (/home/strick/go/s):04146                  ldx   WN.BAR,x   get pointer to array of menu descriptors
1766 4A               (/home/strick/go/s):04147                  deca             adjust current menu # to start at 0
1767 C617             (/home/strick/go/s):04148                  ldb   #MN.SIZ    get size of menu descriptor
1769 3D               (/home/strick/go/s):04149                  mul              calculate offset
                      (/home/strick/go/s):04150                  IFNE  H6309
                      (/home/strick/go/s):04151                  addr  d,x        add it to menu array pointer
                      (/home/strick/go/s):04152                  ELSE
176A 308B             (/home/strick/go/s):04153                  leax  d,x
                      (/home/strick/go/s):04154                  ENDC
176C EE62             (/home/strick/go/s):04155                  ldu   2,s        get static mem pointer
176E 17FCC1           (/home/strick/go/s):04156                  lbsr  L13B5      copy menu descriptor from user space
1771 AF65             (/home/strick/go/s):04157                  stx   5,s        save menu entry pointer
1773 A68812           (/home/strick/go/s):04158                  lda   MN.ENBL,x  menu enabled?
1776 2605             (/home/strick/go/s):04159                  bne   L1728      yes, process pulldown
                      (/home/strick/go/s):04160                  IFNE  H6309
                      (/home/strick/go/s):04161                  clrd             clear menu ID & item #
                      (/home/strick/go/s):04162                  ELSE
1778 4F               (/home/strick/go/s):04163                  clra
1779 5F               (/home/strick/go/s):04164                  clrb
                      (/home/strick/go/s):04165                  ENDC
177A 160208           (/home/strick/go/s):04166                  lbra  L193A      restore window table & return
                      (/home/strick/go/s):04167         
                      (/home/strick/go/s):04168         * Print selected menu text
177D EE6B             (/home/strick/go/s):04169         L1728    ldu   $0B,s      get menu handling entry pointer
177F 10AEE813         (/home/strick/go/s):04170                  ldy   <$13,s     get window table pointer
1783 A641             (/home/strick/go/s):04171                  lda   MnuXStrt,u get start X co-ordinate
1785 5F               (/home/strick/go/s):04172                  clrb             get start Y co-ordinate
1786 3430             (/home/strick/go/s):04173                  pshs  y,x        preserve regs
1788 17FBFD           (/home/strick/go/s):04174                  lbsr  L12D7      switch to text font
178B 17FB9A           (/home/strick/go/s):04175                  lbsr  L128E      set text coords
                      (/home/strick/go/s):04176                  IFNE  H6309
                      (/home/strick/go/s):04177                  oim   #Bold+TChr,Wt.BSW,y Turn Bold ON/Transparency OFF
                      (/home/strick/go/s):04178                  ELSE
178E 3402             (/home/strick/go/s):04179                  pshs  a
1790 A629             (/home/strick/go/s):04180                  lda   Wt.BSW,y
1792 8AA0             (/home/strick/go/s):04181                  ora   #Bold+TChr
1794 A729             (/home/strick/go/s):04182                  sta   Wt.BSW,y
1796 3502             (/home/strick/go/s):04183                  puls  a
                      (/home/strick/go/s):04184                  ENDC
1798 3530             (/home/strick/go/s):04185                  puls  y,x        restore regs
179A 17FB96           (/home/strick/go/s):04186                  lbsr  L1299      get length of text to a maximum of 15
179D 170345           (/home/strick/go/s):04187                  lbsr  L1A88      calculate if we can print a space after menu text
17A0 17FB7A           (/home/strick/go/s):04188                  lbsr  L1283      print a space
17A3 A60F             (/home/strick/go/s):04189                  lda   MN.ID,x    get menu ID
17A5 8114             (/home/strick/go/s):04190                  cmpa  #MId.Tdy   is it tandy menu?
17A7 2605             (/home/strick/go/s):04191                  bne   L1757      no, skip ahead
17A9 17FB6D           (/home/strick/go/s):04192                  lbsr  L127F      print tandy icon
17AC 2003             (/home/strick/go/s):04193                  bra   L175A      skip ahead
                      (/home/strick/go/s):04194         
17AE 17FB96           (/home/strick/go/s):04195         L1757    lbsr  L12AE      print menu text
17B1 6DE819           (/home/strick/go/s):04196         L175A    tst   <$19,s     can we print a space here?
17B4 2603             (/home/strick/go/s):04197                  bne   L1762      no, skip ahead
17B6 17FB64           (/home/strick/go/s):04198                  lbsr  L1283      print a space
     17B9             (/home/strick/go/s):04199         L1762    equ   *
                      (/home/strick/go/s):04200                  IFNE  H6309
                      (/home/strick/go/s):04201                  aim   #^Bold,Wt.BSW,y Turn BOLD OFF
                      (/home/strick/go/s):04202                  ELSE
17B9 A629             (/home/strick/go/s):04203                  lda   Wt.BSW,y
17BB 84DF             (/home/strick/go/s):04204                  anda  #^Bold
17BD A729             (/home/strick/go/s):04205                  sta   Wt.BSW,y
                      (/home/strick/go/s):04206                  ENDC
17BF AE65             (/home/strick/go/s):04207                  ldx   $05,s      get pointer to menu descriptor
17C1 A68811           (/home/strick/go/s):04208                  lda   MN.NITS,x  any items to print?
17C4 2606             (/home/strick/go/s):04209                  bne   L1772      yes, skip ahead
17C6 A60F             (/home/strick/go/s):04210                  lda   MN.ID,x    get menu ID
17C8 5F               (/home/strick/go/s):04211                  clrb             clear item
17C9 1601B9           (/home/strick/go/s):04212                  lbra  L193A      return with menu info
                      (/home/strick/go/s):04213         
                      (/home/strick/go/s):04214         * Calculate X start position and size of pull down
17CC A68810           (/home/strick/go/s):04215         L1772    lda   MN.XSIZ,x  get horizontal size of pull down
17CF 8B02             (/home/strick/go/s):04216                  adda  #$02       add 2 for the borders
17D1 3402             (/home/strick/go/s):04217                  pshs  a          save window width
17D3 EE6C             (/home/strick/go/s):04218                  ldu   $0C,s      get pointer to handling entry
17D5 AB41             (/home/strick/go/s):04219                  adda  MnuXStrt,u add in the start coord to get end coord
17D7 A137             (/home/strick/go/s):04220                  cmpa  Wt.SZX,y   will it fit in current window?
17D9 2404             (/home/strick/go/s):04221                  bhs   L1785      no, skip ahead
17DB A641             (/home/strick/go/s):04222                  lda   MnuXStrt,u get start coord
17DD 2004             (/home/strick/go/s):04223                  bra   L1789
                      (/home/strick/go/s):04224         
17DF A637             (/home/strick/go/s):04225         L1785    lda   Wt.SZX,y   get current window size
17E1 A0E4             (/home/strick/go/s):04226                  suba  ,s         subtract calculated width
17E3 3504             (/home/strick/go/s):04227         L1789    puls  b          restore width of pull down
17E5 EE62             (/home/strick/go/s):04228                  ldu   2,s        get static mem pointer
17E7 17EFF9           (/home/strick/go/s):04229                  lbsr  L07B0      find a new window table & link it to current
17EA 10AFE81C         (/home/strick/go/s):04230                  sty   <$1C,s     save the pointer to new window table
17EE 3420             (/home/strick/go/s):04231                  pshs  y          preserve new window table pointer
17F0 10AEE815         (/home/strick/go/s):04232                  ldy   <$15,s     get old window table pointer
17F4 6D32             (/home/strick/go/s):04233                  tst   Wt.BLnk,y  Is it an overlay window?
17F6 2B03             (/home/strick/go/s):04234                  bmi   L17A5      No, skip ahead
17F8 ABA826           (/home/strick/go/s):04235         L17A2    adda  Wt.DfCPX,y Yes, add to Default X coord start
17FB 3520             (/home/strick/go/s):04236         L17A5    puls  y          Get new window table ptr back
17FD A735             (/home/strick/go/s):04237                  sta   Wt.CPX,y   Save new current X coord start
17FF E737             (/home/strick/go/s):04238                  stb   Wt.SZX,y   Save new current X size
1801 3420             (/home/strick/go/s):04239                  pshs  y          Save new window table ptr again
1803 10AEE815         (/home/strick/go/s):04240                  ldy   <$15,s     get working window table pointer?
1807 6D32             (/home/strick/go/s):04241                  tst   Wt.BLnk,y  this a overlay window?
1809 2A04             (/home/strick/go/s):04242                  bpl   L17B9      yes, skip ahead
180B 3520             (/home/strick/go/s):04243                  puls  y
180D 2008             (/home/strick/go/s):04244                  bra   L17C1
                      (/home/strick/go/s):04245         
180F A6A827           (/home/strick/go/s):04246         L17B9    lda   Wt.DfCPY,y get full window Y start
1812 4C               (/home/strick/go/s):04247                  inca             add 1
1813 3520             (/home/strick/go/s):04248                  puls  y          restore
1815 2002             (/home/strick/go/s):04249                  bra   L17C3      skip ahead
                      (/home/strick/go/s):04250         
                      (/home/strick/go/s):04251         * Calculate Y start & size of pull down
1817 8601             (/home/strick/go/s):04252         L17C1    lda   #$01       get Y co-ordinate start
1819 A736             (/home/strick/go/s):04253         L17C3    sta   Wt.CPY,y   save it as current window Y start
181B B71159           (/home/strick/go/s):04254                  sta   >GrfMem+gr0059     save it as save switch too
181E A68811           (/home/strick/go/s):04255                  lda   MN.NITS,x  get # items in this menu
1821 8B02             (/home/strick/go/s):04256                  adda  #$02       add 2 to put a blank line on top & bottom
1823 3410             (/home/strick/go/s):04257                  pshs  x          save pointer to menu descriptor
1825 AEE815           (/home/strick/go/s):04258                  ldx   <$15,s
1828 A118             (/home/strick/go/s):04259                  cmpa  Wt.SZY,x
182A 2D0E             (/home/strick/go/s):04260                  blt   L17E5
182C A618             (/home/strick/go/s):04261                  lda   Wt.SZY,x
182E 4A               (/home/strick/go/s):04262                  deca  
182F A738             (/home/strick/go/s):04263                  sta   Wt.SZY,y
1831 8002             (/home/strick/go/s):04264                  suba  #2
1833 3510             (/home/strick/go/s):04265                  puls  x          restore menu descriptor pointer
1835 A78811           (/home/strick/go/s):04266                  sta   MN.NITS,x  save as # items in menu descriptor
1838 2004             (/home/strick/go/s):04267                  bra   L17E9
                      (/home/strick/go/s):04268         
183A 3510             (/home/strick/go/s):04269         L17E5    puls  x          restore menu descriptor pointer
183C A738             (/home/strick/go/s):04270                  sta   Wt.SZY,y   save overlay window size
                      (/home/strick/go/s):04271         * Place pull down on screen
183E AEE81E           (/home/strick/go/s):04272         L17E9    ldx   <$1E,s     get graphics table pointer
1841 EC09             (/home/strick/go/s):04273                  ldd   Gt.FMsk,x  get the foreground/background masks
1843 ED26             (/home/strick/go/s):04274                  std   Wt.Fore,y  set foreground/background masks in window table
1845 3420             (/home/strick/go/s):04275                  pshs  y          Preserve window tbl ptr
1847 C60A             (/home/strick/go/s):04276                  ldb   #$0A       get code for OWSet
1849 17EAED           (/home/strick/go/s):04277                  lbsr  L0101      do a overlay window
184C 3520             (/home/strick/go/s):04278                  puls  y          Get window tbl ptr back
184E 2430             (/home/strick/go/s):04279                  bcc   L181D      no errors on OWSet, print menu items
1850 A632             (/home/strick/go/s):04280                  lda   Wt.BLnk,y  Error, get parent window #
1852 EE62             (/home/strick/go/s):04281                  ldu   2,s        Get static mem ptr
1854 A7C835           (/home/strick/go/s):04282                  sta   V.WinNum,u   Save parent window
1857 CCFFFF           (/home/strick/go/s):04283                  ldd   #$FFFF     Mark window table as unused
185A ED30             (/home/strick/go/s):04284                  std   Wt.STbl,y
185C 1701E6           (/home/strick/go/s):04285                  lbsr  L19F1
                      (/home/strick/go/s):04286                  IFNE  H6309
                      (/home/strick/go/s):04287                  clrd
                      (/home/strick/go/s):04288                  ELSE
185F 4F               (/home/strick/go/s):04289                  clra
1860 5F               (/home/strick/go/s):04290                  clrb
                      (/home/strick/go/s):04291                  ENDC
1861 160121           (/home/strick/go/s):04292                  lbra  L193A
                      (/home/strick/go/s):04293         
                      (/home/strick/go/s):04294         * Move a menu item descriptor from caller
                      (/home/strick/go/s):04295         * Exit: X=Ptr to destination
1864 3464             (/home/strick/go/s):04296         L13C9    pshs  b,y,u      preserve regs
1866 DE50             (/home/strick/go/s):04297                  ldu   <D.Proc    get source task #
1868 A646             (/home/strick/go/s):04298                  lda   P$Task,u
186A DE4A             (/home/strick/go/s):04299                  ldu   <D.SysPrc  get system task #
186C E646             (/home/strick/go/s):04300                  ldb   P$Task,u
186E FE1075           (/home/strick/go/s):04301                  ldu   >WGlobal+G.GfxTbl     get destination pointer
1871 33C90279         (/home/strick/go/s):04302                  leau  >$0279,u
1875 108E0015         (/home/strick/go/s):04303                  ldy   #MI.SIZ    get size of item descriptor
1879 103F38           (/home/strick/go/s):04304                  os9   F$Move     move it
187C 1F31             (/home/strick/go/s):04305                  tfr   u,x        make X point to destination
187E 35E4             (/home/strick/go/s):04306                  puls  b,y,u,pc
                      (/home/strick/go/s):04307         
                      (/home/strick/go/s):04308         * Setup for printing the item text in the pull down
1880 EE62             (/home/strick/go/s):04309         L181D    ldu   $02,s      get static memory pointer
1882 17FB53           (/home/strick/go/s):04310                  lbsr  L1358      setup graphics table entry
1885 10AEE81A         (/home/strick/go/s):04311                  ldy   <$1A,s     get working window table pointer
1889 17F676           (/home/strick/go/s):04312                  lbsr  L0E68      do a shadowed window on this overlay
188C 102500F0         (/home/strick/go/s):04313                  lbcs  L1935      error, return nothing
1890 10AEE81C         (/home/strick/go/s):04314                  ldy   <$1C,s     get window table pointer
1894 3420             (/home/strick/go/s):04315                  pshs  y
1896 CC203E           (/home/strick/go/s):04316                  ldd   #$203E     turn cursor off
1899 17EA9D           (/home/strick/go/s):04317                  lbsr  L0101
189C 3520             (/home/strick/go/s):04318                  puls  y
189E AE65             (/home/strick/go/s):04319                  ldx   $05,s      get pointer to menu descriptor
18A0 E68811           (/home/strick/go/s):04320                  ldb   MN.NITS,x  get # items in menu
18A3 E7E818           (/home/strick/go/s):04321                  stb   <$18,s     save it as a counter
18A6 4F               (/home/strick/go/s):04322                  clra  
18A7 A7E817           (/home/strick/go/s):04323                  sta   <$17,s
18AA AE8815           (/home/strick/go/s):04324                  ldx   MN.ITEMS,x get pointer to item descriptor
18AD 17FAD8           (/home/strick/go/s):04325                  lbsr  L12D7      switch to text font
                      (/home/strick/go/s):04326         * Print all items in the pull down
18B0 AFE820           (/home/strick/go/s):04327         L1852    stx   <$20,s     save pointer to item descriptor
18B3 8DAF             (/home/strick/go/s):04328                  bsr   L13C9      get item descriptor from caller
18B5 6D0F             (/home/strick/go/s):04329                  tst   MI.ENBL,x  item enabled?
18B7 260C             (/home/strick/go/s):04330                  bne   L1861      yes, turn bold on
                      (/home/strick/go/s):04331                  IFNE  H6309
                      (/home/strick/go/s):04332                  aim   #^Bold,Wt.BSW,y Turn BOLD OFF
                      (/home/strick/go/s):04333                  ELSE
18B9 3402             (/home/strick/go/s):04334                  pshs  a
18BB A629             (/home/strick/go/s):04335                  lda   Wt.BSW,y
18BD 84DF             (/home/strick/go/s):04336                  anda  #^Bold
18BF A729             (/home/strick/go/s):04337                  sta   Wt.BSW,y
18C1 3502             (/home/strick/go/s):04338                  puls  a
                      (/home/strick/go/s):04339                  ENDC
18C3 2006             (/home/strick/go/s):04340                  bra   L1864      skip to printing
                      (/home/strick/go/s):04341         
     18C5             (/home/strick/go/s):04342         L1861    equ   *
                      (/home/strick/go/s):04343                  IFNE  H6309
                      (/home/strick/go/s):04344                  oim   #Bold,Wt.BSW,y Turn BOLD ON
                      (/home/strick/go/s):04345                  ELSE
18C5 A629             (/home/strick/go/s):04346                  lda   Wt.BSW,y
18C7 8A20             (/home/strick/go/s):04347                  ora   #Bold
18C9 A729             (/home/strick/go/s):04348                  sta   Wt.BSW,y
                      (/home/strick/go/s):04349                  ENDC
18CB 4F               (/home/strick/go/s):04350         L1864    clra             set X co-ordinate
18CC E6E817           (/home/strick/go/s):04351                  ldb   <$17,s     get Y co-ordinate
18CF 3410             (/home/strick/go/s):04352                  pshs  x          preserve item pointer
18D1 17FA54           (/home/strick/go/s):04353                  lbsr  L128E      set text co-ordinate
18D4 3510             (/home/strick/go/s):04354                  puls  x          restore item pointer
18D6 17FA5A           (/home/strick/go/s):04355                  lbsr  L1299      get length of text to a maximum of 15
18D9 17FA6B           (/home/strick/go/s):04356                  lbsr  L12AE      print item text
18DC AEE820           (/home/strick/go/s):04357                  ldx   <$20,s     get pointer to item descriptor
18DF 308815           (/home/strick/go/s):04358                  leax  MI.SIZ,x   move to next item
18E2 6CE817           (/home/strick/go/s):04359                  inc   <$17,s     add another item
18E5 6AE818           (/home/strick/go/s):04360                  dec   <$18,s     done all items?
18E8 26C6             (/home/strick/go/s):04361                  bne   L1852      no, keep going
                      (/home/strick/go/s):04362         * Setup some variables
18EA 86FF             (/home/strick/go/s):04363                  lda   #$FF       set current selected item state
18EC A764             (/home/strick/go/s):04364                  sta   $04,s
18EE B710BF           (/home/strick/go/s):04365                  sta   >WGlobal+g00BF
18F1 B61060           (/home/strick/go/s):04366                  lda   >WGlobal+G.MSmpRV     get current mouse scan rate
18F4 A7E822           (/home/strick/go/s):04367                  sta   <$22,s     preserve it
18F7 8602             (/home/strick/go/s):04368                  lda   #$02       set new mouse scan rate in global mem
18F9 B71060           (/home/strick/go/s):04369                  sta   >WGlobal+G.MSmpRV
18FC B7103B           (/home/strick/go/s):04370                  sta   >WGlobal+G.MSmpRt
                      (/home/strick/go/s):04371         * Main pointer processing loop for a pulldown
                      (/home/strick/go/s):04372         * waits for either a keypress or a mouse button click while updating
                      (/home/strick/go/s):04373         * item text in pull down
18FF 7F100E           (/home/strick/go/s):04374         L18A5    clr   >WGlobal+G.WIBusy     flag cowin not busy
1902 8E0001           (/home/strick/go/s):04375                  ldx   #1         let VTIO scan keyboard & update mouse pointer
1905 103F0A           (/home/strick/go/s):04376                  os9   F$Sleep
1908 7C100E           (/home/strick/go/s):04377                  inc   >WGlobal+G.WIBusy     flag cowin busy
190B B610BF           (/home/strick/go/s):04378                  lda   >WGlobal+g00BF     was a key pressed?
190E 2B09             (/home/strick/go/s):04379                  bmi   L18CB      no, skip ahead
1910 277C             (/home/strick/go/s):04380                  beq   L1943      already processed, remove pull down & return
1912 7F10BF           (/home/strick/go/s):04381                  clr   >WGlobal+g00BF     clear key press flag
1915 8608             (/home/strick/go/s):04382                  lda   #MId.Chr   get menu ID for key press
1917 2069             (/home/strick/go/s):04383                  bra   L1937      remove pull down & return
                      (/home/strick/go/s):04384         
1919 8E103C           (/home/strick/go/s):04385         L18CB    ldx   #WGlobal+G.Mouse Point to mouse packet
191C 6D08             (/home/strick/go/s):04386                  tst   Pt.CBSA,x  button A down?
191E 263C             (/home/strick/go/s):04387                  bne   L1911      yes, go check out where it is
                      (/home/strick/go/s):04388         * No mouse button, check if mouse is in window
1920 17051A           (/home/strick/go/s):04389                  lbsr  L1D24      copy mouse co-ordinates to system co-ordinates
1923 308820           (/home/strick/go/s):04390                  leax  Pt.Siz,x   point to 'em
1926 1703FE           (/home/strick/go/s):04391                  lbsr  L1C25      mouse in current working area?
1929 241C             (/home/strick/go/s):04392                  bcc   L18FC      yes, check for item update
192B 8D68             (/home/strick/go/s):04393                  bsr   L194A      print current item in non-inverse state
192D 8E105C           (/home/strick/go/s):04394                  ldx   #WGlobal+g005C Get ptr to work mouse coords
1930 1703E8           (/home/strick/go/s):04395                  lbsr  L1C19      mouse in current window?
1933 250B             (/home/strick/go/s):04396                  bcs   L18F5      no, skip ahead
1935 8601             (/home/strick/go/s):04397                  lda   #$01       set mouse in pulldown flag
1937 A7E824           (/home/strick/go/s):04398                  sta   <$24,s
193A 86FF             (/home/strick/go/s):04399                  lda   #$FF       flag no current item selected
193C A764             (/home/strick/go/s):04400                  sta   $04,s
193E 20BF             (/home/strick/go/s):04401                  bra   L18A5      go back & wait
                      (/home/strick/go/s):04402         
1940 6DE824           (/home/strick/go/s):04403         L18F5    tst   <$24,s     mouse still in pull down?
1943 263B             (/home/strick/go/s):04404                  bne   L1935      no, remove pulldown & return nothing
1945 20B8             (/home/strick/go/s):04405                  bra   L18A5      go back & wait
                      (/home/strick/go/s):04406         
                      (/home/strick/go/s):04407         * Check if we update current item text
1947 8601             (/home/strick/go/s):04408         L18FC    lda   #$01       set mouse in pull down flag
1949 A7E824           (/home/strick/go/s):04409                  sta   <$24,s
194C 17FD96           (/home/strick/go/s):04410                  lbsr  L168A      calculate text Y co-ordinate from mouse
194F A7E816           (/home/strick/go/s):04411                  sta   <$16,s     save current Y co-ordinate
1952 A164             (/home/strick/go/s):04412                  cmpa  $04,s      match current item?
1954 27A9             (/home/strick/go/s):04413                  beq   L18A5      yes, go back & wait
1956 8D3D             (/home/strick/go/s):04414                  bsr   L194A      print item text
1958 8D69             (/home/strick/go/s):04415                  bsr   L1972      print next item in inverse state
195A 20A3             (/home/strick/go/s):04416                  bra   L18A5      go back & wait
                      (/home/strick/go/s):04417         
                      (/home/strick/go/s):04418         * Mouse button down but not released, check if it's a menu item
195C 17012B           (/home/strick/go/s):04419         L1911    lbsr  L1A33      wait for button release
195F 1704DB           (/home/strick/go/s):04420                  lbsr  L1D24      get current mouse co-ordinates
1962 308820           (/home/strick/go/s):04421                  leax  Pt.Siz,x   point to 'em
1965 1703BF           (/home/strick/go/s):04422                  lbsr  L1C25      mouse still in current working area?
1968 2516             (/home/strick/go/s):04423                  bcs   L1935      no, return nothing
196A A664             (/home/strick/go/s):04424                  lda   $04,s      get current item #
196C 327E             (/home/strick/go/s):04425                  leas  -2,s
                      (/home/strick/go/s):04426         * Was BSR
196E 17008F           (/home/strick/go/s):04427                  lbsr  L19A8      get item descriptor from caller
1971 3262             (/home/strick/go/s):04428                  leas  2,s
1973 A60F             (/home/strick/go/s):04429                  lda   MI.ENBL,x  item enabled?
1975 2709             (/home/strick/go/s):04430                  beq   L1935      no, return nothing
1977 AE65             (/home/strick/go/s):04431                  ldx   $05,s      get menu descriptor pointer
1979 A60F             (/home/strick/go/s):04432                  lda   MN.ID,x    get ID
197B E664             (/home/strick/go/s):04433                  ldb   $04,s      get item #
197D 5C               (/home/strick/go/s):04434                  incb             add 1 to it (can't use zero)
197E 2002             (/home/strick/go/s):04435                  bra   L1937      return with ID & item #
                      (/home/strick/go/s):04436         
     1980             (/home/strick/go/s):04437         L1935    equ   *
                      (/home/strick/go/s):04438                  IFNE  H6309
                      (/home/strick/go/s):04439                  clrd             clear menu ID & item #
                      (/home/strick/go/s):04440                  ELSE
1980 4F               (/home/strick/go/s):04441                  clra
1981 5F               (/home/strick/go/s):04442                  clrb
                      (/home/strick/go/s):04443                  ENDC
     1982             (/home/strick/go/s):04444         L1937    equ   *
                      (/home/strick/go/s):04445                  IFNE  H6309
                      (/home/strick/go/s):04446                  bsr   L19B9      remove pulldown & redraw menu bar
                      (/home/strick/go/s):04447                  ELSE
1982 170089           (/home/strick/go/s):04448                  lbsr  L19B9
                      (/home/strick/go/s):04449                  ENDC
1985 3406             (/home/strick/go/s):04450         L193A    pshs  d          preserve menu id & item #
1987 EE64             (/home/strick/go/s):04451                  ldu   $04,s      get static mem pointer
1989 170133           (/home/strick/go/s):04452                  lbsr  L1A61      copy the window table
198C 3586             (/home/strick/go/s):04453                  puls  d,pc       restore & return
                      (/home/strick/go/s):04454         
     198E             (/home/strick/go/s):04455         L1943    equ   *
                      (/home/strick/go/s):04456                  IFNE  H6309
                      (/home/strick/go/s):04457                  clrd
                      (/home/strick/go/s):04458                  bsr   L19CA
                      (/home/strick/go/s):04459                  ELSE
198E 4F               (/home/strick/go/s):04460                  clra
198F 5F               (/home/strick/go/s):04461                  clrb
1990 17008A           (/home/strick/go/s):04462                  lbsr  L19CA
                      (/home/strick/go/s):04463                  ENDC
1993 20F0             (/home/strick/go/s):04464                  bra   L193A
                      (/home/strick/go/s):04465         
                      (/home/strick/go/s):04466         * Print non-inversed item text
1995 A666             (/home/strick/go/s):04467         L194A    lda   $06,s      get current item #
1997 2B66             (/home/strick/go/s):04468                  bmi   L1971      no item, return
1999 3402             (/home/strick/go/s):04469                  pshs  a          preserve it
199B 17FA1F           (/home/strick/go/s):04470                  lbsr  L1331      turn inverse off
199E 3502             (/home/strick/go/s):04471                  puls  a          restore item #
19A0 8D5E             (/home/strick/go/s):04472                  bsr   L19A8      get item descriptor from caller
19A2 6D0F             (/home/strick/go/s):04473                  tst   MI.ENBL,x  enabled?
19A4 2759             (/home/strick/go/s):04474                  beq   L1971      no, return
                      (/home/strick/go/s):04475                  IFNE  H6309
                      (/home/strick/go/s):04476                  oim   #Bold,Wt.BSW,y Turn BOLD ON
                      (/home/strick/go/s):04477                  ELSE
19A6 3402             (/home/strick/go/s):04478                  pshs  a
19A8 A629             (/home/strick/go/s):04479                  lda   Wt.BSW,y
19AA 8A20             (/home/strick/go/s):04480                  ora   #Bold
19AC A729             (/home/strick/go/s):04481                  sta   Wt.BSW,y
19AE 3502             (/home/strick/go/s):04482                  puls  a
                      (/home/strick/go/s):04483                  ENDC
19B0 17F980           (/home/strick/go/s):04484                  lbsr  L1299      get length of item text
19B3 3404             (/home/strick/go/s):04485                  pshs  b          save length
19B5 4F               (/home/strick/go/s):04486                  clra             get text X co-ordinate
19B6 E667             (/home/strick/go/s):04487                  ldb   $07,s      get text Y co-ordinate of item
19B8 17F96D           (/home/strick/go/s):04488                  lbsr  L128E      set them
19BB 17F9A9           (/home/strick/go/s):04489                  lbsr  L12B6      erase to end of line
19BE 3504             (/home/strick/go/s):04490                  puls  b          restore item text length
19C0 16F984           (/home/strick/go/s):04491                  lbra  L12AE      print item text & return from there
                      (/home/strick/go/s):04492         
                      (/home/strick/go/s):04493         * Print inversed item text
19C3 17F9ED           (/home/strick/go/s):04494         L1972    lbsr  L1329      turn inverse on
19C6 A6E818           (/home/strick/go/s):04495                  lda   <$18,s     get item #
19C9 8D35             (/home/strick/go/s):04496                  bsr   L19A8      get item descriptor from caller
19CB 6D0F             (/home/strick/go/s):04497                  tst   MI.ENBL,x  enabled?
19CD 272B             (/home/strick/go/s):04498                  beq   L19A2      no, return
                      (/home/strick/go/s):04499                  IFNE  H6309
                      (/home/strick/go/s):04500                  oim   #Bold,Wt.BSW,y Turn BOLD ON
                      (/home/strick/go/s):04501                  ELSE
19CF 3402             (/home/strick/go/s):04502                  pshs  a
19D1 A629             (/home/strick/go/s):04503                  lda   Wt.BSW,y
19D3 8A20             (/home/strick/go/s):04504                  ora   #Bold
19D5 A729             (/home/strick/go/s):04505                  sta   Wt.BSW,y
19D7 3502             (/home/strick/go/s):04506                  puls  a
                      (/home/strick/go/s):04507                  ENDC
19D9 17F957           (/home/strick/go/s):04508                  lbsr  L1299      calculate length
19DC 3404             (/home/strick/go/s):04509                  pshs  b          save it
19DE 4F               (/home/strick/go/s):04510                  clra             get X coord of item
19DF E6E819           (/home/strick/go/s):04511                  ldb   <$19,s     get Y coord of item
19E2 17F943           (/home/strick/go/s):04512                  lbsr  L128E      set cursor
19E5 E6E4             (/home/strick/go/s):04513                  ldb   ,s         get length
19E7 17F95D           (/home/strick/go/s):04514                  lbsr  L12AE      print item text
19EA AE68             (/home/strick/go/s):04515                  ldx   $08,s      get menu descriptor pointer
19EC E68810           (/home/strick/go/s):04516                  ldb   MN.XSIZ,x  get width of pull down
19EF E0E0             (/home/strick/go/s):04517                  subb  ,s+        subtract from text length
19F1 5A               (/home/strick/go/s):04518                  decb             take one off
19F2 5A               (/home/strick/go/s):04519         L199A    decb             done printing?
19F3 2B05             (/home/strick/go/s):04520                  bmi   L19A2      yes, return
19F5 17F925           (/home/strick/go/s):04521                  lbsr  L1283      print a space
19F8 20F8             (/home/strick/go/s):04522                  bra   L199A      keep going till done
                      (/home/strick/go/s):04523         
19FA A6E818           (/home/strick/go/s):04524         L19A2    lda   <$18,s     get new item #
19FD A766             (/home/strick/go/s):04525                  sta   6,s        save as current
19FF 39               (/home/strick/go/s):04526         L1971    rts              return
                      (/home/strick/go/s):04527         
                      (/home/strick/go/s):04528         * Get a item descriptor from caller
                      (/home/strick/go/s):04529         * Entry: A=Item #
1A00 AE69             (/home/strick/go/s):04530         L19A8    ldx   $09,s      get menu descriptor pointer
1A02 AE8815           (/home/strick/go/s):04531                  ldx   MN.ITEMS,x get pointer to item descriptor array
1A05 C615             (/home/strick/go/s):04532                  ldb   #MI.SIZ    get size of item descriptor
1A07 3D               (/home/strick/go/s):04533                  mul              calculate offset
                      (/home/strick/go/s):04534                  IFNE  H6309
                      (/home/strick/go/s):04535                  addr  d,x        add it to pointer
                      (/home/strick/go/s):04536                  ELSE
1A08 308B             (/home/strick/go/s):04537                  leax  d,x
                      (/home/strick/go/s):04538                  ENDC
1A0A 17FE57           (/home/strick/go/s):04539                  lbsr  L13C9      get item descriptor from caller
1A0D 39               (/home/strick/go/s):04540                  rts              return
                      (/home/strick/go/s):04541         
                      (/home/strick/go/s):04542         * Remove pull down menu & redraw menu bar
1A0E 3406             (/home/strick/go/s):04543         L19B9    pshs  d          preserve menu ID and item number
1A10 8D11             (/home/strick/go/s):04544                  bsr   L19D0      remove pull down overlay
1A12 A6E826           (/home/strick/go/s):04545                  lda   <$26,s     restore mouse sample rate
1A15 B71060           (/home/strick/go/s):04546                  sta   >WGlobal+G.MSmpRV     put it in global
1A18 B7103B           (/home/strick/go/s):04547                  sta   >WGlobal+G.MSmpRt
1A1B 202A             (/home/strick/go/s):04548                  bra   L19F3      redo menu text
                      (/home/strick/go/s):04549         
1A1D 3406             (/home/strick/go/s):04550         L19CA    pshs  d          preserve menu ID & item #
1A1F 8D02             (/home/strick/go/s):04551                  bsr   L19D0      remove pull down
1A21 3586             (/home/strick/go/s):04552                  puls  d,pc
                      (/home/strick/go/s):04553         
                      (/home/strick/go/s):04554         * Remove menu bar pull down
1A23 10AEE822         (/home/strick/go/s):04555         L19D0    ldy   <$22,s     get window table pointer
1A27 EE68             (/home/strick/go/s):04556                  ldu   $08,s      get static mem pointer
1A29 A632             (/home/strick/go/s):04557                  lda   Wt.BLnk,y  get window back link #
1A2B A7C835           (/home/strick/go/s):04558                  sta   V.WinNum,u   save as current window
1A2E ECA824           (/home/strick/go/s):04559                  ldd   Wt.LStDf,y get screen logical start of full window
1A31 ED33             (/home/strick/go/s):04560                  std   Wt.LStrt,y save it as current
                      (/home/strick/go/s):04561                  IFNE  H6309
                      (/home/strick/go/s):04562                  ldq   Wt.DfCPX,y get start co-ordinates & sizes
                      (/home/strick/go/s):04563                  stq   Wt.CPX,y   save 'em as current
                      (/home/strick/go/s):04564                  ELSE
1A33 ECA828           (/home/strick/go/s):04565                  ldd   Wt.DfCPX+2,y
1A36 ED37             (/home/strick/go/s):04566                  std   Wt.CPX+2,y
1A38 FD11B5           (/home/strick/go/s):04567                  std   >GrfMem+gr00B5
1A3B ECA826           (/home/strick/go/s):04568                  ldd   Wt.DfCPX,y
1A3E ED35             (/home/strick/go/s):04569                  std   Wt.CPX,y
                      (/home/strick/go/s):04570                  ENDC
1A40 C60C             (/home/strick/go/s):04571                  ldb   #$0C       get code for OWEnd
1A42 16E8F4           (/home/strick/go/s):04572                  lbra  L0101
                      (/home/strick/go/s):04573         
                      (/home/strick/go/s):04574         * Print menu descriptor text
                      (/home/strick/go/s):04575         * ENTRY: X=ptr to NUL terminated menu text
1A45 3406             (/home/strick/go/s):04576         L19F1    pshs  d          preserve menu ID & item #
1A47 EE6F             (/home/strick/go/s):04577         L19F3    ldu   $F,s       get pointer to menu handling entry
1A49 10AEE817         (/home/strick/go/s):04578                  ldy   <$17,s     get window table pointer
1A4D AE69             (/home/strick/go/s):04579                  ldx   $9,s       get menu text pointer
1A4F A641             (/home/strick/go/s):04580                  lda   MnuXStrt,u get start X coord
1A51 5F               (/home/strick/go/s):04581                  clrb             Y coord=0
1A52 17F8D3           (/home/strick/go/s):04582                  lbsr  L128E      Do CurXY (preserves u,y,x)
                      (/home/strick/go/s):04583         * Shut scaling off so it works properly (may be able to use A or B instead)
1A55 A629             (/home/strick/go/s):04584                  lda   Wt.BSW,y
                      (/home/strick/go/s):04585                  IFNE  H6309
                      (/home/strick/go/s):04586                  oim   #Bold,Wt.BSW,y BOLD ON
                      (/home/strick/go/s):04587                  aim   #^(TChr+Scale),Wt.BSW,y Transparency on / Scaling off
                      (/home/strick/go/s):04588                  ELSE
1A57 3402             (/home/strick/go/s):04589                  pshs  a
1A59 A629             (/home/strick/go/s):04590                  lda   Wt.BSW,y
1A5B 8A20             (/home/strick/go/s):04591                  ora   #Bold
1A5D 8477             (/home/strick/go/s):04592                  anda  #^(TChr+Scale)
1A5F A729             (/home/strick/go/s):04593                  sta   Wt.BSW,y
1A61 3502             (/home/strick/go/s):04594                  puls  a
                      (/home/strick/go/s):04595                  ENDC
1A63 9709             (/home/strick/go/s):04596                  sta   Wt.BSW
1A65 17F94B           (/home/strick/go/s):04597                  lbsr  L1329      turn inverse on (preserves u,y,x)
1A68 17F8C8           (/home/strick/go/s):04598                  lbsr  L1299      get length of text (up to 15) into B
                      (/home/strick/go/s):04599                  IFNE  H6309
                      (/home/strick/go/s):04600                  bsr   L1A8F      Get size that we print into A/U=menu table ptr
                      (/home/strick/go/s):04601                  ELSE
1A6B 17007E           (/home/strick/go/s):04602                  lbsr  L1A8F
                      (/home/strick/go/s):04603                  ENDC
1A6E 170476           (/home/strick/go/s):04604                  lbsr  FixMenu    Draw the graphics under current menu option
1A71 17F8A9           (/home/strick/go/s):04605                  lbsr  L1283      print a space
1A74 A60F             (/home/strick/go/s):04606                  lda   MN.ID,x    get menu ID
1A76 8114             (/home/strick/go/s):04607                  cmpa  #MId.Tdy   tandy menu?
1A78 2605             (/home/strick/go/s):04608                  bne   L1A23      no, print normal text
1A7A 17F89C           (/home/strick/go/s):04609                  lbsr  L127F      print tandy icon (no spaces)
1A7D 2003             (/home/strick/go/s):04610                  bra   L1A2E      return
                      (/home/strick/go/s):04611         
1A7F 17F8C5           (/home/strick/go/s):04612         L1A23    lbsr  L12AE      print menu text
     1A82             (/home/strick/go/s):04613         L1A2E    equ   *
                      (/home/strick/go/s):04614                  IFNE  H6309
                      (/home/strick/go/s):04615                  aim   #^Bold,Wt.BSW,y turn BOLD OFF
                      (/home/strick/go/s):04616                  ELSE
1A82 A629             (/home/strick/go/s):04617                  lda   Wt.BSW,y
1A84 84DF             (/home/strick/go/s):04618                  anda  #^Bold
1A86 A729             (/home/strick/go/s):04619                  sta   Wt.BSW,y
                      (/home/strick/go/s):04620                  ENDC
1A88 3586             (/home/strick/go/s):04621                  puls  d,pc
                      (/home/strick/go/s):04622         
                      (/home/strick/go/s):04623         * Wait for mouse button release
1A8A 6D08             (/home/strick/go/s):04624         L1A33    tst   Pt.CBSA,x  button A down?
1A8C 26FC             (/home/strick/go/s):04625                  bne   L1A33      yes, wait for release
1A8E 6F0A             (/home/strick/go/s):04626                  clr   Pt.CCtA,x  clear click count
1A90 6F0C             (/home/strick/go/s):04627                  clr   Pt.TTSA,x  clear time this state
1A92 39               (/home/strick/go/s):04628                  rts              return
                      (/home/strick/go/s):04629         
                      (/home/strick/go/s):04630         * Copy window table into a buffer for preservation while cowin is processing
                      (/home/strick/go/s):04631         * the menu bar selections. It does this for ease of restoration of window
                      (/home/strick/go/s):04632         * to do overlays & such
1A93 3406             (/home/strick/go/s):04633         L1A3C    pshs  d          preserve registers
1A95 17EC57           (/home/strick/go/s):04634                  lbsr  L06AE      get window table pointer
1A98 BE1075           (/home/strick/go/s):04635                  ldx   >WGlobal+G.GfxTbl     point to a buffer for window table
1A9B 308902CF         (/home/strick/go/s):04636                  leax  >$02CF,x   Point to buffer to preserve original window tbl
1A9F 8D2B             (/home/strick/go/s):04637                  bsr   L1A6E      copy current window table into buffer
1AA1 17EA4B           (/home/strick/go/s):04638                  lbsr  L04EA      change window to full size
1AA4 EE66             (/home/strick/go/s):04639                  ldu   6,s
1AA6 17EC52           (/home/strick/go/s):04640                  lbsr  L06B9      get graphics table pointer
1AA9 EC07             (/home/strick/go/s):04641                  ldd   Gt.FClr,x
1AAB ED26             (/home/strick/go/s):04642                  std   Wt.Fore,y  save it into window table
                      (/home/strick/go/s):04643                  IFNE  H6309
                      (/home/strick/go/s):04644                  aim   #^Prop,Wt.BSW,y Proportional OFF
                      (/home/strick/go/s):04645                  ELSE
1AAD 3402             (/home/strick/go/s):04646                  pshs  a
1AAF A629             (/home/strick/go/s):04647                  lda   Wt.BSW,y
1AB1 84EF             (/home/strick/go/s):04648                  anda  #^Prop
1AB3 A729             (/home/strick/go/s):04649                  sta   Wt.BSW,y
1AB5 3502             (/home/strick/go/s):04650                  puls  a
                      (/home/strick/go/s):04651                  ENDC
1AB7 17F90A           (/home/strick/go/s):04652                  lbsr  L1337      set draw pattern to nothing
1ABA 17F912           (/home/strick/go/s):04653                  lbsr  L1342      set logic type to nothing
1ABD 3586             (/home/strick/go/s):04654                  puls  d,pc       restore & return
                      (/home/strick/go/s):04655         
                      (/home/strick/go/s):04656         * Restore window table to original state
1ABF 17EC2D           (/home/strick/go/s):04657         L1A61    lbsr  L06AE
1AC2 1F21             (/home/strick/go/s):04658                  tfr   y,x
1AC4 10BE1075         (/home/strick/go/s):04659                  ldy   >WGlobal+G.GfxTbl
1AC8 31A902CF         (/home/strick/go/s):04660                  leay  >$02CF,y
                      (/home/strick/go/s):04661         
                      (/home/strick/go/s):04662         * Copy a window table
                      (/home/strick/go/s):04663         * Entry: Y=Source pointer
                      (/home/strick/go/s):04664         *        X=Destination pointer
                      (/home/strick/go/s):04665         
1ACC 3430             (/home/strick/go/s):04666         L1A6E    pshs  x,y
1ACE 3010             (/home/strick/go/s):04667                  leax  Wt.STbl,x
1AD0 3130             (/home/strick/go/s):04668                  leay  Wt.STbl,y
                      (/home/strick/go/s):04669                  IFNE  H6309
                      (/home/strick/go/s):04670                  ldw   #Wt.Siz
                      (/home/strick/go/s):04671                  tfm   y+,x+
                      (/home/strick/go/s):04672                  ELSE
1AD2 3406             (/home/strick/go/s):04673                  pshs  d
1AD4 C640             (/home/strick/go/s):04674                  ldb   #Wt.Siz
1AD6 A6A0             (/home/strick/go/s):04675         L1A6Eb   lda   ,y+
1AD8 A780             (/home/strick/go/s):04676                  sta   ,x+
1ADA 5A               (/home/strick/go/s):04677                  decb
1ADB 26F9             (/home/strick/go/s):04678                  bne   L1A6Eb
1ADD 4F               (/home/strick/go/s):04679                  clra
1ADE FD11B5           (/home/strick/go/s):04680                  std   >GrfMem+gr00B5
1AE1 3506             (/home/strick/go/s):04681                  puls  d
                      (/home/strick/go/s):04682                  ENDC
1AE3 35B0             (/home/strick/go/s):04683                  puls  x,y,pc
                      (/home/strick/go/s):04684         
1AE5 327E             (/home/strick/go/s):04685         L1A88    leas  -2,s       adjust stack for L1a8f routine
1AE7 8D03             (/home/strick/go/s):04686                  bsr   L1A8F      Calc End X coord for menu entry
1AE9 3262             (/home/strick/go/s):04687                  leas  2,s        restore stack & return
1AEB 39               (/home/strick/go/s):04688                  rts   
                      (/home/strick/go/s):04689         
                      (/home/strick/go/s):04690         * Calculate what size of text we will write (preferably with 1 space in
                      (/home/strick/go/s):04691         *   front & back). Set flag @ <$1d on stack as to whether spaces fit or not.
                      (/home/strick/go/s):04692         * Entry: B=Size of text entry
                      (/home/strick/go/s):04693         * Exit: <$1d,s (after puls a,pc) = 0 if fits with lead & trailing spaces
                      (/home/strick/go/s):04694         *       <$1d,s = 1 if did not fit
                      (/home/strick/go/s):04695         *       A=End X coord on menu bar of TEXT ONLY, NOT INCLUDING SPACES
                      (/home/strick/go/s):04696         *       B=Maximum size of text to write (IF CAN'T FIT WITH 2 SPACES)
                      (/home/strick/go/s):04697         *       U=menu table ptr
                      (/home/strick/go/s):04698         *       E=End X coord including spaces
                      (/home/strick/go/s):04699         * NOTE: A does calculate real end in the routine, but only to set flag on
                      (/home/strick/go/s):04700         *       stack. It destroys the result before exiting.
                      (/home/strick/go/s):04701         
1AEC EEE811           (/home/strick/go/s):04702         L1A8F    ldu   <$11,s     get menu table pointer
1AEF A641             (/home/strick/go/s):04703                  lda   MnuXStrt,u get X start co-ordinate
                      (/home/strick/go/s):04704                  IFNE  H6309
                      (/home/strick/go/s):04705                  addr  b,a        add size of text to it
                      (/home/strick/go/s):04706                  ELSE
1AF1 3404             (/home/strick/go/s):04707                  pshs  b
1AF3 ABE0             (/home/strick/go/s):04708                  adda  ,s+
                      (/home/strick/go/s):04709                  ENDC
1AF5 3402             (/home/strick/go/s):04710                  pshs  a          save result (end coord)
1AF7 4C               (/home/strick/go/s):04711                  inca             add 2 for space on either side
1AF8 4C               (/home/strick/go/s):04712                  inca  
                      (/home/strick/go/s):04713         * Changed to use E
                      (/home/strick/go/s):04714         
                      (/home/strick/go/s):04715                  IFNE  H6309
                      (/home/strick/go/s):04716                  tfr   a,e        Move to register we can preserve
                      (/home/strick/go/s):04717                  cmpe  Wt.SZX,y   still fit in window?
                      (/home/strick/go/s):04718                  bls   L1AB0      yes, skip ahead
                      (/home/strick/go/s):04719                  dece             Subtract one of the 2 spaces
                      (/home/strick/go/s):04720                  cmpe  Wt.SZX,y   fit in window now?
                      (/home/strick/go/s):04721                  ELSE
1AF9 B711B5           (/home/strick/go/s):04722                  sta   >GrfMem+gr00B5
1AFC A137             (/home/strick/go/s):04723                  cmpa  Wt.SZX,y
1AFE 2314             (/home/strick/go/s):04724                  bls   L1AB0
1B00 4A               (/home/strick/go/s):04725                  deca
1B01 B711B5           (/home/strick/go/s):04726                  sta   >GrfMem+gr00B5
1B04 A137             (/home/strick/go/s):04727                  cmpa  Wt.SZX,y
                      (/home/strick/go/s):04728                  ENDC
1B06 2308             (/home/strick/go/s):04729                  bls   L1AAC      yes, skip ahead
1B08 E637             (/home/strick/go/s):04730                  ldb   Wt.SZX,y   get window size
1B0A E041             (/home/strick/go/s):04731                  subb  MnuXStrt,u take off start coord
1B0C 5A               (/home/strick/go/s):04732                  decb             take off another for space in front
                      (/home/strick/go/s):04733                  IFNE  H6309
                      (/home/strick/go/s):04734                  tfr   b,e
                      (/home/strick/go/s):04735                  ELSE
1B0D F711B5           (/home/strick/go/s):04736                  stb   >GrfMem+gr00B5
                      (/home/strick/go/s):04737                  ENDC
1B10 8601             (/home/strick/go/s):04738         L1AAC    lda   #$01
1B12 2001             (/home/strick/go/s):04739                  bra   L1AB1
                      (/home/strick/go/s):04740         
1B14 4F               (/home/strick/go/s):04741         L1AB0    clra  
1B15 A7E820           (/home/strick/go/s):04742         L1AB1    sta   <$20,s
1B18 3582             (/home/strick/go/s):04743                  puls  a,pc       restore new X coord & return
                      (/home/strick/go/s):04744         
                      (/home/strick/go/s):04745         * SS.SBar entry point
1B1A 17F691           (/home/strick/go/s):04746         L1AB9    lbsr  L116C      setup working window table
1B1D AE26             (/home/strick/go/s):04747                  ldx   PD.RGS,y   get register stack pointer
1B1F 10BE10BB         (/home/strick/go/s):04748                  ldy   >WGlobal+g00BB     Get ptr to work window table
                      (/home/strick/go/s):04749         * Theoretically, this is where setting up a FSWIN should draw the scroll bars
1B23 3410             (/home/strick/go/s):04750         DfltBar  pshs  x          preserve register stack pointer
1B25 8602             (/home/strick/go/s):04751                  lda   #2         point to draw table to erase old markers
1B27 308C6D           (/home/strick/go/s):04752                  leax  <SBarErs,pc
1B2A 17F74D           (/home/strick/go/s):04753                  lbsr  DrawBar    erase old markers
1B2D 3510             (/home/strick/go/s):04754                  puls  x
                      (/home/strick/go/s):04755         * Draw horizontal scroll bar marker
1B2F E605             (/home/strick/go/s):04756                  ldb   R$X+1,x    get requested coord
1B31 CB05             (/home/strick/go/s):04757                  addb  #$05       Add 5 to it (min. size of horiz. scroll bar)
1B33 E137             (/home/strick/go/s):04758                  cmpb  Wt.SZX,y   Still within X size of window?
1B35 2F06             (/home/strick/go/s):04759                  ble   L1B1E      Yes, bump X pos. back by 4 & go draw it
1B37 E637             (/home/strick/go/s):04760                  ldb   Wt.SZX,y   No, get X size of Window
1B39 C003             (/home/strick/go/s):04761                  subb  #$03       Bump down by 3
1B3B 2002             (/home/strick/go/s):04762                  bra   L1B20      Go draw it
                      (/home/strick/go/s):04763         
1B3D C004             (/home/strick/go/s):04764         L1B1E    subb  #$04
1B3F 4F               (/home/strick/go/s):04765         L1B20    clra             Multiply x 8
                      (/home/strick/go/s):04766                  IFNE  H6309
                      (/home/strick/go/s):04767                  lsld  
                      (/home/strick/go/s):04768                  lsld  
                      (/home/strick/go/s):04769                  lsld  
                      (/home/strick/go/s):04770                  ELSE
1B40 58               (/home/strick/go/s):04771                  lslb  
1B41 49               (/home/strick/go/s):04772                  rola  
1B42 58               (/home/strick/go/s):04773                  lslb  
1B43 49               (/home/strick/go/s):04774                  rola  
1B44 58               (/home/strick/go/s):04775                  lslb  
1B45 49               (/home/strick/go/s):04776                  rola  
                      (/home/strick/go/s):04777                  ENDC
1B46 FD1147           (/home/strick/go/s):04778                  std   >GrfMem+gr0047     save X coord
1B49 E638             (/home/strick/go/s):04779                  ldb   Wt.SZY,y   get window Y size
1B4B 5A               (/home/strick/go/s):04780                  decb             subtract 1 to start at 0
1B4C 4F               (/home/strick/go/s):04781                  clra             Multiply x 8
                      (/home/strick/go/s):04782                  IFNE  H6309
                      (/home/strick/go/s):04783                  lsld  
                      (/home/strick/go/s):04784                  lsld  
                      (/home/strick/go/s):04785                  lsld  
                      (/home/strick/go/s):04786                  incd             Bump down for new marker size
                      (/home/strick/go/s):04787                  ELSE
1B4D 58               (/home/strick/go/s):04788                  lslb  
1B4E 49               (/home/strick/go/s):04789                  rola  
1B4F 58               (/home/strick/go/s):04790                  lslb  
1B50 49               (/home/strick/go/s):04791                  rola  
1B51 58               (/home/strick/go/s):04792                  lslb  
1B52 49               (/home/strick/go/s):04793                  rola  
1B53 C30001           (/home/strick/go/s):04794                  addd   #$0001
                      (/home/strick/go/s):04795                  ENDC
1B56 FD1149           (/home/strick/go/s):04796                  std   >GrfMem+gr0049
1B59 CCCE06           (/home/strick/go/s):04797                  ldd   #$ce06     get group/buffer
1B5C 8D2D             (/home/strick/go/s):04798                  bsr   DrawScrl   Go PutBlk on screen
                      (/home/strick/go/s):04799         * Draw vertical scroll bar marker
1B5E E637             (/home/strick/go/s):04800                  ldb   Wt.SZX,y   get window X size
1B60 5A               (/home/strick/go/s):04801                  decb             subtract 1 to start at 0
1B61 4F               (/home/strick/go/s):04802                  clra             Multiply x 8
                      (/home/strick/go/s):04803                  IFNE  H6309
                      (/home/strick/go/s):04804                  lsld  
                      (/home/strick/go/s):04805                  lsld  
                      (/home/strick/go/s):04806                  lsld
                      (/home/strick/go/s):04807                  incd            added RG
                      (/home/strick/go/s):04808                  ELSE
1B62 58               (/home/strick/go/s):04809                  lslb  
1B63 49               (/home/strick/go/s):04810                  rola  
1B64 58               (/home/strick/go/s):04811                  lslb  
1B65 49               (/home/strick/go/s):04812                  rola  
1B66 58               (/home/strick/go/s):04813                  lslb  
1B67 49               (/home/strick/go/s):04814                  rola
1B68 C30001           (/home/strick/go/s):04815                  addd  #1        added RG
                      (/home/strick/go/s):04816                  ENDC
1B6B FD1147           (/home/strick/go/s):04817                  std   >GrfMem+gr0047
1B6E E607             (/home/strick/go/s):04818                  ldb   R$Y+1,x    get requested Y position
1B70 CB06             (/home/strick/go/s):04819                  addb  #$06
1B72 E138             (/home/strick/go/s):04820                  cmpb  Wt.SZY,y   will it fit in window?
1B74 2F06             (/home/strick/go/s):04821                  ble   L1B3D
1B76 E638             (/home/strick/go/s):04822                  ldb   Wt.SZY,y
1B78 C003             (/home/strick/go/s):04823                  subb  #$03
1B7A 2002             (/home/strick/go/s):04824                  bra   L1B3F
                      (/home/strick/go/s):04825         
1B7C C004             (/home/strick/go/s):04826         L1B3D    subb  #4
1B7E 4F               (/home/strick/go/s):04827         L1B3F    clra             Multiply x 8
                      (/home/strick/go/s):04828                  IFNE  H6309
                      (/home/strick/go/s):04829                  lsld  
                      (/home/strick/go/s):04830                  lsld  
                      (/home/strick/go/s):04831                  lsld  
                      (/home/strick/go/s):04832                  ELSE
1B7F 58               (/home/strick/go/s):04833                  lslb  
1B80 49               (/home/strick/go/s):04834                  rola  
1B81 58               (/home/strick/go/s):04835                  lslb  
1B82 49               (/home/strick/go/s):04836                  rola  
1B83 58               (/home/strick/go/s):04837                  lslb  
1B84 49               (/home/strick/go/s):04838                  rola  
                      (/home/strick/go/s):04839                  ENDC
1B85 FD1149           (/home/strick/go/s):04840                  std   >GrfMem+gr0049
1B88 CCCE05           (/home/strick/go/s):04841                  ldd   #$ce05     get group/buffer
1B8B FD1157           (/home/strick/go/s):04842         DrawScrl std   >GrfMem+gr0057
1B8E C636             (/home/strick/go/s):04843                  ldb   #$36       get grfdrv funtion for putblk
1B90 3430             (/home/strick/go/s):04844                  pshs  x,y
1B92 17E7A4           (/home/strick/go/s):04845                  lbsr  L0101
1B95 35B0             (/home/strick/go/s):04846                  puls  x,y,pc
                      (/home/strick/go/s):04847         
                      (/home/strick/go/s):04848         * Draw table for erasing scroll bars
1B97 02               (/home/strick/go/s):04849         SBarErs  fcb   WColor1    Background of bar color
1B98 0009             (/home/strick/go/s):04850                  fdb   9          9,(bottom+6) to (Right-17),(Bottom -1)
1B9A FFFA             (/home/strick/go/s):04851                  fdb   -6
1B9C FFEF             (/home/strick/go/s):04852                  fdb   -17
1B9E FFFE             (/home/strick/go/s):04853                  fdb   -2
1BA0 4E               (/home/strick/go/s):04854                  fcb   $4e
                      (/home/strick/go/s):04855         
1BA1 02               (/home/strick/go/s):04856                  fcb   WColor1    Background of bar color
1BA2 FFFA             (/home/strick/go/s):04857                  fdb   -6         (Right-6),17 to (Right-1),(Bottom-17)
1BA4 0011             (/home/strick/go/s):04858                  fdb   17
1BA6 FFFF             (/home/strick/go/s):04859                  fdb   -1
1BA8 FFEF             (/home/strick/go/s):04860                  fdb   -17
1BAA 4E               (/home/strick/go/s):04861                  fcb   $4e
                      (/home/strick/go/s):04862         
                      (/home/strick/go/s):04863         * Update auto follow mouse cursor - ADD CHECK FOR MOUSE BUTTON DOWN ON AREA
                      (/home/strick/go/s):04864         *  NOT IN OUR WINDOW, DO SELECT IF IN ANOTHER WINDOW
                      (/home/strick/go/s):04865         * NOTE: THE AUTO-FOLLOW MOUSE FLAG REMAINS SET _EVEN_ IF WE END UP ON A TEXT
                      (/home/strick/go/s):04866         *    WINDOW!!!
                      (/home/strick/go/s):04867         * Theoretically, entry is:
                      (/home/strick/go/s):04868         *   U=static mem ptr for current active window
                      (/home/strick/go/s):04869         *   Y=Path descriptor (64 bytes) ptr for current active window
1BAB 327B             (/home/strick/go/s):04870         L1B4D    leas  -5,s       make a buffer for flag & current mouse coords
1BAD 6F64             (/home/strick/go/s):04871                  clr   4,s        clear a flag (for different gfx cursor required)
1BAF 8E1054           (/home/strick/go/s):04872                  ldx   #WGlobal+G.Mouse+Pt.AcX Point to mouse current coords
1BB2 FE1020           (/home/strick/go/s):04873                  ldu   >WGlobal+G.CurDev     get current device static mem pointer
1BB5 17EB06           (/home/strick/go/s):04874                  lbsr  L06A0      Go point to & verify window dsc. (preserves X)
                      (/home/strick/go/s):04875                  IFNE  H6309
                      (/home/strick/go/s):04876                  ldq   ,x         Get current X&Y Coords
                      (/home/strick/go/s):04877                  tim   #$01,[Wt.STbl,y] 320 or 640 pixel wide screen?
                      (/home/strick/go/s):04878                  ELSE
1BB8 EC02             (/home/strick/go/s):04879                  ldd   2,x
1BBA FD11B5           (/home/strick/go/s):04880                  std   >GrfMem+gr00B5
1BBD EC84             (/home/strick/go/s):04881                  ldd   ,x
1BBF 3402             (/home/strick/go/s):04882                  pshs  a
1BC1 A6B8F0           (/home/strick/go/s):04883                  lda   [Wt.STbl,y]
1BC4 8501             (/home/strick/go/s):04884                  bita  #$01
1BC6 3502             (/home/strick/go/s):04885                  puls  a
                      (/home/strick/go/s):04886                  ENDC
1BC8 2602             (/home/strick/go/s):04887                  bne   L1B72      640, skip ahead
                      (/home/strick/go/s):04888                  IFNE  H6309
                      (/home/strick/go/s):04889                  lsrd             Divide X coord by 2
1BCA                  (/home/strick/go/s):04890         L1B72    stq   ,s         Save current mouse coords
                      (/home/strick/go/s):04891                  ELSE
1BCA 44               (/home/strick/go/s):04892                  lsra             Divide X coord by 2
1BCB 56               (/home/strick/go/s):04893                  rorb
1BCC EDE4             (/home/strick/go/s):04894         L1B72    std   ,s         Save current mouse coords
1BCE FC11B5           (/home/strick/go/s):04895                  ldd   >GrfMem+gr00B5
1BD1 ED62             (/home/strick/go/s):04896                  std   2,s
1BD3 ECE4             (/home/strick/go/s):04897                  ldd   ,s
                      (/home/strick/go/s):04898                  ENDC
1BD5 30E4             (/home/strick/go/s):04899                  leax  ,s         point to coord info
                      (/home/strick/go/s):04900         *  1ST TRY - NEW ROUTINE
1BD7 170141           (/home/strick/go/s):04901                  lbsr  L1C19      Check if mouse coord in current window at all
1BDA 251C             (/home/strick/go/s):04902                  bcs   L1B8D      No, check to see if we switch windows
                      (/home/strick/go/s):04903         * Mouse cursor within current physical window
1BDC 170148           (/home/strick/go/s):04904                  lbsr  L1C25      Check if mouse coord in CWArea of current window
1BDF 102500B3         (/home/strick/go/s):04905                  lbcs  AdjstCrs   No, must be in control region, adjust gfx cursor
1BE3 FE1020           (/home/strick/go/s):04906                  ldu   >WGlobal+G.CurDev     get current device static mem
1BE6 17EB12           (/home/strick/go/s):04907                  lbsr  L06B9      get gfx table pointer for this window
1BE9 EC0C             (/home/strick/go/s):04908                  ldd   Gt.GOff,x  get offset into block of graphics cursor
1BEB 10A3A819         (/home/strick/go/s):04909                  cmpd  Wt.GOff,y  Same as ptr in window table itself?
1BEF 102700EA         (/home/strick/go/s):04910                  lbeq  L1BD8      Yes, skip ahead
1BF3 6C64             (/home/strick/go/s):04911                  inc   4,s        No, set flag & then skip ahead
1BF5 1600E5           (/home/strick/go/s):04912                  lbra  L1BD8
                      (/home/strick/go/s):04913         
                      (/home/strick/go/s):04914         * Mouse cursor not within current window's CWArea. Please note that if running
                      (/home/strick/go/s):04915         *   in a bordered window, this means it could be in the menu bar or scroll bar
                      (/home/strick/go/s):04916         *   areas (within DWSet range, but not CWArea)
                      (/home/strick/go/s):04917         * Gets here ok when cursor on different window
                      (/home/strick/go/s):04918         * REQUIRES VTIO TO SET MSEMOVE FLAG WHEN BUTTON PRESSED (DONE IN TC9IO)
                      (/home/strick/go/s):04919         * May want to change to send MsSig here in CoWin instead - then we can leave
                      (/home/strick/go/s):04920         * Tc9/CC3 IO alone.
                      (/home/strick/go/s):04921         * NOTE: WE _WILL_ HAVE TO MAKE SURE IT IS A WINDOW LINKED WITH A PROCESS IN
                      (/home/strick/go/s):04922         *   SOME WAY (AS TC9IO'S CLEAR ROUTINE DOES), AS IT WILL SELECT "GHOST"
                      (/home/strick/go/s):04923         *   WINDOWS FOR GSHELL (I THINK)
                      (/home/strick/go/s):04924         
1BF8 FC1044           (/home/strick/go/s):04925         L1B8D    ldd   >Pt.CBSA+G.Mouse+WGlobal Get both buttons
1BFB 10270097         (/home/strick/go/s):04926                  lbeq  AdjstCrs   Neither down, continue normally
                      (/home/strick/go/s):04927         * Search through window tables looking for ones on the same screen (NO overlay
1BFF EE30             (/home/strick/go/s):04928                  ldu   Wt.STbl,y  Get our screen table for comparison purposes
1C01 8E1290           (/home/strick/go/s):04929                  ldx   #WinBase   Point to start of internal window tables
1C04 CC2040           (/home/strick/go/s):04930                  ldd   #$2040     32 windows to check, $40 bytes/table entry
                      (/home/strick/go/s):04931                  IFNE  H6309
1C07                  (/home/strick/go/s):04932         SrchLoop ldw   Wt.STbl,x  Get screen tbl ptr
                      (/home/strick/go/s):04933                  cmpw  #$FFFF     unused, skip
                      (/home/strick/go/s):04934                  beq   TryNext
                      (/home/strick/go/s):04935                  cmpr  x,y        Our own ptr?
                      (/home/strick/go/s):04936                  beq   TryNext
                      (/home/strick/go/s):04937                  cmpr  w,u        On same screen?
                      (/home/strick/go/s):04938                  ELSE
1C07 3410             (/home/strick/go/s):04939         SrchLoop pshs  x
1C09 AE10             (/home/strick/go/s):04940                  ldx   Wt.STbl,x
1C0B BF11B5           (/home/strick/go/s):04941                  stx   >GrfMem+gr00B5
1C0E 8CFFFF           (/home/strick/go/s):04942                  cmpx  #-1
1C11 3510             (/home/strick/go/s):04943                  puls  x
1C13 270D             (/home/strick/go/s):04944                  beq   TryNext
1C15 3410             (/home/strick/go/s):04945                  pshs  x
1C17 10ACE1           (/home/strick/go/s):04946                  cmpy  ,s++
1C1A 2706             (/home/strick/go/s):04947                  beq   TryNext
1C1C 11B311B5         (/home/strick/go/s):04948                  cmpu   >GrfMem+gr00B5
                      (/home/strick/go/s):04949                  ENDC
1C20 2706             (/home/strick/go/s):04950                  beq   CheckScn   Yes, check if mouse clicked on it.
                      (/home/strick/go/s):04951         * inc >BordReg
1C22 3A               (/home/strick/go/s):04952         TryNext  abx              No, bump ptr up
1C23 4A               (/home/strick/go/s):04953                  deca             Dec # windows left to check
1C24 26E1             (/home/strick/go/s):04954                  bne   SrchLoop
1C26 206E             (/home/strick/go/s):04955                  bra   AdjstCrs
                      (/home/strick/go/s):04956         
                      (/home/strick/go/s):04957         
     1C28             (/home/strick/go/s):04958         CheckScn equ   *
                      (/home/strick/go/s):04959                  IFNE  H6309
                      (/home/strick/go/s):04960                  lde   Wt.BLnk,x  Is this an overlay window?
                      (/home/strick/go/s):04961                  ELSE
1C28 3402             (/home/strick/go/s):04962                  pshs  a
1C2A A612             (/home/strick/go/s):04963                  lda   Wt.Blnk,x
1C2C B711B5           (/home/strick/go/s):04964                  sta   >GrfMem+gr00B5
1C2F 3502             (/home/strick/go/s):04965                  puls  a
                      (/home/strick/go/s):04966                  ENDC
1C31 2AEF             (/home/strick/go/s):04967                  bpl   TryNext    Yes, don't bother with it (MAY BE WRONG?)
1C33 3476             (/home/strick/go/s):04968                  pshs  u,y,x,d    Preserve regs
1C35 3068             (/home/strick/go/s):04969                  leax  8,s        Point to mouse packet
                      (/home/strick/go/s):04970         *         ldx   #WGlobal+G.Mouse+Pt.AcX   Point to mouse current coords
1C37 1700E1           (/home/strick/go/s):04971                  lbsr  L1C19      See if mouse on this window
1C3A 3576             (/home/strick/go/s):04972                  puls  u,y,x,d    Restore regs
1C3C 25E4             (/home/strick/go/s):04973                  bcs   TryNext    Not on this window either, continue through table
                      (/home/strick/go/s):04974         * Found window mouse was clicked on. Now, we must find the ptr to _this_
                      (/home/strick/go/s):04975         *   windows' device mem ptr, load it into X, lbsr L0582 & bra L1C16
                      (/home/strick/go/s):04976         * See TC9IO source, but basically, get Device Table ptr, get # of devices max,
                      (/home/strick/go/s):04977         *   use that as range, Get our V$DRIV, check for match (going through Device
                      (/home/strick/go/s):04978         *   table), if match, get V$STAT for static storage. Go in there, make sure
                      (/home/strick/go/s):04979         *   $1d indicates GRFDRV/CoWin, $1e >0 (Valid window). If so, we found our
                      (/home/strick/go/s):04980         *   ptr. If not, skip to AdjstCrs. Do NOT have to go back in loop, as only
                      (/home/strick/go/s):04981         *   one window can be in same area (at this time... until movable/resizable
                      (/home/strick/go/s):04982         *   windows are implimented in 16K grfdrv)
                      (/home/strick/go/s):04983         * This routine should preserve Y (window table ptr)
                      (/home/strick/go/s):04984         * SEEMS TO WORK TO HERE NOW.
                      (/home/strick/go/s):04985         * Entry: A=32-window entry #
                      (/home/strick/go/s):04986         * NOTE: IF IT ALLOWS SELECTING THE UNDERLYING GSHELL "GHOST" WINDOW, WE ALSO
                      (/home/strick/go/s):04987         *   HAVE TO ADD CODE TO MAKE SURE A PROCESS IS ACTIVE FOR THE WINDOW... WHICH
                      (/home/strick/go/s):04988         *   MEANS RE-SEARCHING (PAST LAST FOUND POINT) THE WINDOW TABLE ITSELF
1C3E C620             (/home/strick/go/s):04989                  ldb   #$20       Invert window entry #
                      (/home/strick/go/s):04990                  IFNE  H6309
                      (/home/strick/go/s):04991                  subr  a,b
                      (/home/strick/go/s):04992                  ELSE
1C40 3402             (/home/strick/go/s):04993                  pshs  a
1C42 E0E0             (/home/strick/go/s):04994                  subb  ,s+
                      (/home/strick/go/s):04995                  ENDC
1C44 3424             (/home/strick/go/s):04996                  pshs  b,y        Preserve window entry # & Window table ptr
1C46 BE1020           (/home/strick/go/s):04997                  ldx   >WGlobal+G.CurDev     Get ptr to current device static mem
1C49 AE01             (/home/strick/go/s):04998                  ldx   V.PORT,x   Get ptr to our device table entry
                      (/home/strick/go/s):04999                  IFNE  H6309
                      (/home/strick/go/s):05000                  ldw   V$DRIV,x   Get original window's driver ptr
                      (/home/strick/go/s):05001                  ELSE
1C4B AE84             (/home/strick/go/s):05002                  ldx   V$DRIV,x
1C4D BF11B5           (/home/strick/go/s):05003                  stx   >GrfMem+gr00B5
                      (/home/strick/go/s):05004                  ENDC
1C50 C60D             (/home/strick/go/s):05005                  ldb   #DEVSIZ    Size of each device table entry
1C52 9E24             (/home/strick/go/s):05006                  ldx   <D.Init    Get ptr to INIT module
1C54 A60D             (/home/strick/go/s):05007                  lda   DevCnt,x   Get # of entries allowed in device table
1C56 9E80             (/home/strick/go/s):05008                  ldx   <D.DevTbl  Get start of device table
1C58 3D               (/home/strick/go/s):05009                  mul              Calculate offset to end of device table
1C59 318B             (/home/strick/go/s):05010                  leay  d,x        Point Y to end of Device table
1C5B C60D             (/home/strick/go/s):05011                  ldb   #DEVSIZ    Get device table entry size again
1C5D EE84             (/home/strick/go/s):05012         DevLoop  ldu   V$DRIV,x   Get driver ptr for device we are checking
                      (/home/strick/go/s):05013                  IFNE  H6309
                      (/home/strick/go/s):05014                  cmpr  u,w        Same as original window?
                      (/home/strick/go/s):05015                  ELSE
1C5F 11B311B5         (/home/strick/go/s):05016                  cmpu  >GrfMem+gr00B5
                      (/home/strick/go/s):05017                  ENDC
1C63 2628             (/home/strick/go/s):05018                  bne   NextEnt    No, skip to next entry
1C65 EE02             (/home/strick/go/s):05019                  ldu   V$STAT,x   Get static mem ptr for CC3/TC9IO device
1C67 A6C81D           (/home/strick/go/s):05020                  lda   V.WinType,u  Is this a Windint/Grfint window?
1C6A 2621             (/home/strick/go/s):05021                  bne   NextEnt    No, VDGINT so skip
1C6C A6C81E           (/home/strick/go/s):05022                  lda   V.InfVld,u   Is this static mem properly initialized?
1C6F 271C             (/home/strick/go/s):05023                  beq   NextEnt    No, skip
1C71 A6C835           (/home/strick/go/s):05024                  lda   V.WinNum,u   Get window table entry #
1C74 A1E4             (/home/strick/go/s):05025                  cmpa  ,s         Same as one we are looking for?
1C76 2615             (/home/strick/go/s):05026                  bne   NextEnt    No, wrong window
                      (/home/strick/go/s):05027         * In some cases, it DOES deactivate the original window
1C78 FC1020           (/home/strick/go/s):05028                  ldd   >WGlobal+G.CurDev Copy old static mem ptr to previous
1C7B FD1022           (/home/strick/go/s):05029                  std   >WGlobal+G.PrWMPt
1C7E FF1020           (/home/strick/go/s):05030                  stu   >WGlobal+G.CurDev Found it, save as current device
1C81 6CC823           (/home/strick/go/s):05031                  inc   V.ScrChg,u   Flag that screen update needed
1C84 7F100A           (/home/strick/go/s):05032                  clr   >WGlobal+g000A Flag that we are not active device anymore
1C87 7F10BF           (/home/strick/go/s):05033                  clr   >WGlobal+g00BF Clear Windint's key pressed flag
1C8A 3268             (/home/strick/go/s):05034                  leas  8,s        Eat temp vars
1C8C 39               (/home/strick/go/s):05035                  rts   
                      (/home/strick/go/s):05036         
1C8D 3A               (/home/strick/go/s):05037         NextEnt  abx              Point to next entry in device table
                      (/home/strick/go/s):05038                  IFNE  H6309
                      (/home/strick/go/s):05039                  cmpr  y,x        Past end of table?
                      (/home/strick/go/s):05040                  ELSE
1C8E 3420             (/home/strick/go/s):05041                  pshs  y
1C90 ACE1             (/home/strick/go/s):05042                  cmpx  ,s++
                      (/home/strick/go/s):05043                  ENDC
1C92 25C9             (/home/strick/go/s):05044                  blo   DevLoop    No, keep trying
1C94 3524             (/home/strick/go/s):05045         NoGo     puls  b,y        Yes, restore window table ptr
1C96 BE1075           (/home/strick/go/s):05046         AdjstCrs ldx   >WGlobal+G.GfxTbl     get pointer to graphics table
1C99 EC8902BC         (/home/strick/go/s):05047                  ldd   >$02BC,x   graphics cursor been initialized?
1C9D 261F             (/home/strick/go/s):05048                  bne   L1BB5      yes, skip ahead
1C9F CCCA01           (/home/strick/go/s):05049                  ldd   #$CA01     get default group/buffer for arrow
1CA2 FD1157           (/home/strick/go/s):05050                  std   >GrfMem+gr0057     Save in Grfdrv mem
1CA5 3430             (/home/strick/go/s):05051                  pshs  y,x
1CA7 C61A             (/home/strick/go/s):05052                  ldb   #$1A       get function call for GCSet
1CA9 17E68D           (/home/strick/go/s):05053                  lbsr  L0101      let grfdrv do it
1CAC 3530             (/home/strick/go/s):05054                  puls  y,x
1CAE A6A818           (/home/strick/go/s):05055                  lda   Wt.GBlk,y  get graphics cursor block #
1CB1 A78902BC         (/home/strick/go/s):05056                  sta   >$02BC,x   save it in Gfx table mem
1CB5 ECA819           (/home/strick/go/s):05057                  ldd   Wt.GOff,y  get offset in block to graphics cursor
1CB8 ED8902BD         (/home/strick/go/s):05058                  std   >$02BD,x   save it
1CBC 2018             (/home/strick/go/s):05059                  bra   L1BD1
                      (/home/strick/go/s):05060         
                      (/home/strick/go/s):05061         * Change mouse cursor if necessary
1CBE 3402             (/home/strick/go/s):05062         L1BB5    pshs  a          save gcursor block #
1CC0 ECA819           (/home/strick/go/s):05063                  ldd   Wt.GOff,y  get offset into block
1CC3 10A38902BD       (/home/strick/go/s):05064                  cmpd  >$02BD,x   match current?
1CC8 3502             (/home/strick/go/s):05065                  puls  a          restore block #
1CCA 2711             (/home/strick/go/s):05066                  beq   L1BD8      Yes, skip next bit
1CCC A7A818           (/home/strick/go/s):05067         L1BC5    sta   Wt.GBlk,y  save it into window table
1CCF EC8902BD         (/home/strick/go/s):05068                  ldd   >$02BD,x   get offset from global mem
1CD3 EDA819           (/home/strick/go/s):05069                  std   Wt.GOff,y  save it as offset in window table
1CD6 3430             (/home/strick/go/s):05070         L1BD1    pshs  y,x        Preserve regs
1CD8 17F0AE           (/home/strick/go/s):05071                  lbsr  L0CEC      Update cursors in Grfdrv
1CDB 3530             (/home/strick/go/s):05072                  puls  y,x        Restore regs
                      (/home/strick/go/s):05073         
     1CDD             (/home/strick/go/s):05074         L1BD8    equ   *
                      (/home/strick/go/s):05075                  IFNE  H6309
                      (/home/strick/go/s):05076                  ldq   ,s         get X&Y coords
                      (/home/strick/go/s):05077                  stq   >GrfMem+gr005B     save them in grfdrv mem
                      (/home/strick/go/s):05078                  ELSE
1CDD EC62             (/home/strick/go/s):05079                  ldd   2,s
1CDF FD115D           (/home/strick/go/s):05080                  std   >GrfMem+gr005B+2
1CE2 FD11B5           (/home/strick/go/s):05081                  std   >GrfMem+gr00B5
1CE5 ECE4             (/home/strick/go/s):05082                  ldd   ,s
1CE7 FD115B           (/home/strick/go/s):05083                  std   >GrfMem+gr005B 
                      (/home/strick/go/s):05084                  ENDC
1CEA C644             (/home/strick/go/s):05085                  ldb   #$44       get function call for PutGC
1CEC 3420             (/home/strick/go/s):05086                  pshs  y          Preserve regs
1CEE 17E648           (/home/strick/go/s):05087                  lbsr  L0101      Put mouse cursor on screen
1CF1 3520             (/home/strick/go/s):05088                  puls  y          Restore regs
1CF3 6D64             (/home/strick/go/s):05089                  tst   4,s        Was gfx cursor in window same as in gfx table?
1CF5 2721             (/home/strick/go/s):05090                  beq   L1C16      Yes, skip ahead
1CF7 FE1020           (/home/strick/go/s):05091                  ldu   >WGlobal+G.CurDev     No, get ptr to current device
1CFA 17E9FE           (/home/strick/go/s):05092                  lbsr  L06B9      get pointer to graphics tables for this window
1CFD A60B             (/home/strick/go/s):05093                  lda   Gt.GBlk,x  Get gfx table block # for gfx cursor
1CFF 260C             (/home/strick/go/s):05094                  bne   L1C07      There is one, make the it the same in window table
1D01 A6A818           (/home/strick/go/s):05095                  lda   Wt.GBlk,y  Isn't one, copy from window table to gfx table
1D04 A70B             (/home/strick/go/s):05096                  sta   Gt.GBlk,x
1D06 ECA819           (/home/strick/go/s):05097                  ldd   Wt.GOff,y
1D09 ED0C             (/home/strick/go/s):05098                  std   Gt.GOff,x
1D0B 2008             (/home/strick/go/s):05099                  bra   L1C11      Go update the cursors on screen
                      (/home/strick/go/s):05100         
1D0D A7A818           (/home/strick/go/s):05101         L1C07    sta   Wt.GBlk,y  set block # of graphics cursor in window table
1D10 EC0C             (/home/strick/go/s):05102                  ldd   Gt.GOff,x  get offset into block
1D12 EDA819           (/home/strick/go/s):05103                  std   Wt.GOff,y
1D15 17F071           (/home/strick/go/s):05104         L1C11    lbsr  L0CEC      Update cursors in GrfDrv
1D18 3265             (/home/strick/go/s):05105         L1C16    leas  5,s        Eat stack & return
1D1A 39               (/home/strick/go/s):05106                  rts   
                      (/home/strick/go/s):05107         
                      (/home/strick/go/s):05108         * Check if mouse is in current window (DWSet area)
                      (/home/strick/go/s):05109         * Entry: X=pointer to current mouse coordinates in mouse packet
                      (/home/strick/go/s):05110         *        Y=Pointer to window table
                      (/home/strick/go/s):05111         * Stack use: 0,s   current window table pointer
                      (/home/strick/go/s):05112         *            2,s   window start cords.
                      (/home/strick/go/s):05113         *            4,s   window size
1D1B 327A             (/home/strick/go/s):05114         L1C19    leas  -6,s       make a buffer
1D1D 10AFE4           (/home/strick/go/s):05115                  sty   ,s         save window table pointer
1D20 31A826           (/home/strick/go/s):05116                  leay  Wt.DfCPX,y point to window default co-ordinates
1D23 8D73             (/home/strick/go/s):05117                  bsr   L1C84      calculate co-ordinates
1D25 2009             (/home/strick/go/s):05118                  bra   L1C2E      go calculate it
                      (/home/strick/go/s):05119         
                      (/home/strick/go/s):05120         * Check if mouse is in current working area (CWArea)
                      (/home/strick/go/s):05121         * Entry: X=pointer to current mouse coordinates in mouse packet
                      (/home/strick/go/s):05122         *        Y=Pointer to window table
                      (/home/strick/go/s):05123         * Stack use: 0,s   current window table pointer
                      (/home/strick/go/s):05124         *            2,s   window start cords.
                      (/home/strick/go/s):05125         *            4,s   window size
                      (/home/strick/go/s):05126         * Exit: Carry clear - on current window area
                      (/home/strick/go/s):05127         *       Carry set, off of current window area
                      (/home/strick/go/s):05128         * Preserves X
1D27 327A             (/home/strick/go/s):05129         L1C25    leas  -6,s       make a buffer
1D29 10AFE4           (/home/strick/go/s):05130                  sty   ,s         save window table pointer
1D2C 3135             (/home/strick/go/s):05131                  leay  Wt.CPX,y   point to current window co-ordinates
1D2E 8D46             (/home/strick/go/s):05132                  bsr   L1C64      (preserves X)
1D30 E662             (/home/strick/go/s):05133         L1C2E    ldb   2,s        get window X co-ordinate max.
1D32 4F               (/home/strick/go/s):05134                  clra             Multiply x 8
                      (/home/strick/go/s):05135                  IFNE  H6309
                      (/home/strick/go/s):05136                  lsld  
                      (/home/strick/go/s):05137                  lsld  
                      (/home/strick/go/s):05138                  lsld  
                      (/home/strick/go/s):05139                  ELSE
1D33 58               (/home/strick/go/s):05140                  lslb  
1D34 49               (/home/strick/go/s):05141                  rola  
1D35 58               (/home/strick/go/s):05142                  lslb  
1D36 49               (/home/strick/go/s):05143                  rola  
1D37 58               (/home/strick/go/s):05144                  lslb  
1D38 49               (/home/strick/go/s):05145                  rola  
                      (/home/strick/go/s):05146                  ENDC
1D39 10A384           (/home/strick/go/s):05147                  cmpd  ,x         higher or lower than current mouse X co-ordinate
1D3C 2231             (/home/strick/go/s):05148                  bhi   L1C5D      higher not in window, return carry set
1D3E E662             (/home/strick/go/s):05149                  ldb   $02,s      get window X co-ordinate
1D40 EB64             (/home/strick/go/s):05150                  addb  $04,s      add it to size
1D42 4F               (/home/strick/go/s):05151                  clra             Multiply x 8
                      (/home/strick/go/s):05152                  IFNE  H6309
                      (/home/strick/go/s):05153                  lsld  
                      (/home/strick/go/s):05154                  lsld  
                      (/home/strick/go/s):05155                  lsld  
                      (/home/strick/go/s):05156                  ELSE
1D43 58               (/home/strick/go/s):05157                  lslb  
1D44 49               (/home/strick/go/s):05158                  rola  
1D45 58               (/home/strick/go/s):05159                  lslb  
1D46 49               (/home/strick/go/s):05160                  rola  
1D47 58               (/home/strick/go/s):05161                  lslb  
1D48 49               (/home/strick/go/s):05162                  rola  
                      (/home/strick/go/s):05163                  ENDC
1D49 10A384           (/home/strick/go/s):05164                  cmpd  ,x         within range?
1D4C 2321             (/home/strick/go/s):05165                  bls   L1C5D
                      (/home/strick/go/s):05166         * Check if mouse is within range of maximum Y co-ordinate of window
1D4E E663             (/home/strick/go/s):05167                  ldb   $03,s      get 
1D50 4F               (/home/strick/go/s):05168                  clra             Multiply x 8
                      (/home/strick/go/s):05169                  IFNE  H6309
                      (/home/strick/go/s):05170                  lsld  
                      (/home/strick/go/s):05171                  lsld  
                      (/home/strick/go/s):05172                  lsld  
                      (/home/strick/go/s):05173                  ELSE
1D51 58               (/home/strick/go/s):05174                  lslb  
1D52 49               (/home/strick/go/s):05175                  rola  
1D53 58               (/home/strick/go/s):05176                  lslb  
1D54 49               (/home/strick/go/s):05177                  rola  
1D55 58               (/home/strick/go/s):05178                  lslb  
1D56 49               (/home/strick/go/s):05179                  rola  
                      (/home/strick/go/s):05180                  ENDC
1D57 10A302           (/home/strick/go/s):05181                  cmpd  $02,x
1D5A 2213             (/home/strick/go/s):05182                  bhi   L1C5D
                      (/home/strick/go/s):05183         * Check if mouse is within Y lower range of window
1D5C E663             (/home/strick/go/s):05184                  ldb   $03,s      get Y co-ordinate of window
1D5E EB65             (/home/strick/go/s):05185                  addb  $05,s      add in the size
1D60 4F               (/home/strick/go/s):05186                  clra             Multiply x 8
                      (/home/strick/go/s):05187                  IFNE  H6309
                      (/home/strick/go/s):05188                  lsld  
                      (/home/strick/go/s):05189                  lsld  
                      (/home/strick/go/s):05190                  lsld  
                      (/home/strick/go/s):05191                  ELSE
1D61 58               (/home/strick/go/s):05192                  lslb  
1D62 49               (/home/strick/go/s):05193                  rola  
1D63 58               (/home/strick/go/s):05194                  lslb  
1D64 49               (/home/strick/go/s):05195                  rola  
1D65 58               (/home/strick/go/s):05196                  lslb  
1D66 49               (/home/strick/go/s):05197                  rola  
                      (/home/strick/go/s):05198                  ENDC
1D67 10A302           (/home/strick/go/s):05199                  cmpd  $02,x      higher or lower than current mouse Y co-ordinate
1D6A 2303             (/home/strick/go/s):05200                  bls   L1C5D      lower, return mouse off window
1D6C 4F               (/home/strick/go/s):05201                  clra             flag mouse pointer is on this window
1D6D 2001             (/home/strick/go/s):05202                  bra   L1C5E      return
                      (/home/strick/go/s):05203         
1D6F 43               (/home/strick/go/s):05204         L1C5D    coma             flag pointer is off this window
1D70 10AEE4           (/home/strick/go/s):05205         L1C5E    ldy   ,s         restore window table pointer
1D73 3266             (/home/strick/go/s):05206                  leas  6,s        purge stack
1D75 39               (/home/strick/go/s):05207                  rts              return
                      (/home/strick/go/s):05208         
1D76 3410             (/home/strick/go/s):05209         L1C64    pshs  x          preserve pointer to mouse working co-ordinates
1D78 3420             (/home/strick/go/s):05210                  pshs  y          save pointer to window X/Y start co-ordinates
1D7A 10AE66           (/home/strick/go/s):05211                  ldy   6,s        get window table pointer
1D7D EC35             (/home/strick/go/s):05212                  ldd   Wt.CPX,y   get current X & Y start co-ordinates
                      (/home/strick/go/s):05213                  IFNE  H6309
                      (/home/strick/go/s):05214                  ldw   Wt.LStDf,y get screen logical start of full window
                      (/home/strick/go/s):05215                  cmpw  Wt.LStrt,y match current working area?
                      (/home/strick/go/s):05216                  ELSE
1D7F 3410             (/home/strick/go/s):05217                  pshs  x
1D81 AEA824           (/home/strick/go/s):05218                  ldx   Wt.LStDf,y get screen logical start of full window
1D84 BF11B5           (/home/strick/go/s):05219                  stx   >GrfMem+gr00B5
1D87 AC33             (/home/strick/go/s):05220                  cmpx  Wt.LStrt,y match current working area?
1D89 3510             (/home/strick/go/s):05221                  puls  x
                      (/home/strick/go/s):05222                  ENDC
1D8B 2707             (/home/strick/go/s):05223                  beq   L1C80      yes, skip ahead
1D8D E3A826           (/home/strick/go/s):05224                  addd  Wt.DfCPX,y add current X/Y start to actual X/Y start
1D90 3520             (/home/strick/go/s):05225                  puls  y
1D92 2008             (/home/strick/go/s):05226                  bra   L1C88
                      (/home/strick/go/s):05227         
1D94 3520             (/home/strick/go/s):05228         L1C80    puls  y          restore pointer to window X/Y start coords
1D96 2002             (/home/strick/go/s):05229                  bra   L1C86      skip ahead
                      (/home/strick/go/s):05230         
1D98 3410             (/home/strick/go/s):05231         L1C84    pshs  x          preserve pointer to mouse working coords
1D9A ECA4             (/home/strick/go/s):05232         L1C86    ldd   ,y         get active window start X/Y default coords
1D9C ED66             (/home/strick/go/s):05233         L1C88    std   6,s        save 'em
1D9E EC22             (/home/strick/go/s):05234                  ldd   2,y        get active window default sizes
1DA0 ED68             (/home/strick/go/s):05235                  std   8,s        save 'em
1DA2 AE64             (/home/strick/go/s):05236                  ldx   4,s        get current window table pointer
1DA4 A612             (/home/strick/go/s):05237                  lda   Wt.BLnk,x  this a overlay window?
1DA6 2B25             (/home/strick/go/s):05238                  bmi   L1CBA      no we are the only window, return
1DA8 8D25             (/home/strick/go/s):05239         L1C94    bsr   L1CBC      get window table pointer to the parent window
1DAA A612             (/home/strick/go/s):05240                  lda   Wt.BLnk,x  we at the bottom of the pile?
1DAC 2AFA             (/home/strick/go/s):05241                  bpl   L1C94      no, keep going
1DAE EC66             (/home/strick/go/s):05242                  ldd   $06,s      get active window start coords
                      (/home/strick/go/s):05243                  IFNE  H6309
                      (/home/strick/go/s):05244                  ldw   Wt.LStDf,x get window logical start
                      (/home/strick/go/s):05245                  cmpw  Wt.LStrt,x same as current working area?
                      (/home/strick/go/s):05246                  ELSE
1DB0 3420             (/home/strick/go/s):05247                  pshs  y
1DB2 10AE8824         (/home/strick/go/s):05248                  ldy   Wt.LStDf,x get window logical start
1DB6 10BF11B5         (/home/strick/go/s):05249                  sty   >GrfMem+gr00B5
1DBA 10AC13           (/home/strick/go/s):05250                  cmpy  Wt.LStrt,x same as current working area?
1DBD 3520             (/home/strick/go/s):05251                  puls  y
                      (/home/strick/go/s):05252                  ENDC
1DBF 2605             (/home/strick/go/s):05253                  bne   L1CB1      no, skip ahead
1DC1 E38826           (/home/strick/go/s):05254                  addd  Wt.DfCPX,x add the start coord defaults of parent window
1DC4 2005             (/home/strick/go/s):05255                  bra   L1CB8      save & return
                      (/home/strick/go/s):05256         
1DC6 E38826           (/home/strick/go/s):05257         L1CB1    addd  Wt.DfCPX,x
1DC9 E315             (/home/strick/go/s):05258                  addd  Wt.CPX,x   add current window start coords. of parent window
1DCB ED66             (/home/strick/go/s):05259         L1CB8    std   $06,s      save window start coords
1DCD 3590             (/home/strick/go/s):05260         L1CBA    puls  x,pc       retsore & return
                      (/home/strick/go/s):05261         
                      (/home/strick/go/s):05262         * Get pointer to window table entry
                      (/home/strick/go/s):05263         * Entry: A=Window table entry #
                      (/home/strick/go/s):05264         * Exit : X=Pointer to window table entry
1DCF C640             (/home/strick/go/s):05265         L1CBC    ldb   #Wt.Siz    get size of entrys
1DD1 3D               (/home/strick/go/s):05266                  mul              calculate offset
1DD2 8E1290           (/home/strick/go/s):05267                  ldx   #WinBase   Point X to window table start
                      (/home/strick/go/s):05268                  IFNE  H6309
                      (/home/strick/go/s):05269                  addr  d,x        add offset
                      (/home/strick/go/s):05270                  ELSE
1DD5 308B             (/home/strick/go/s):05271                  leax  d,x
                      (/home/strick/go/s):05272                  ENDC
1DD7 39               (/home/strick/go/s):05273                  rts              return
                      (/home/strick/go/s):05274         
                      (/home/strick/go/s):05275         * Update mouse packet pointer status based on where it is (called from VTIO)
                      (/home/strick/go/s):05276         * Entry: None
1DD8 17E8E3           (/home/strick/go/s):05277         L1CC8    lbsr  L06A0      verify window (don't care about errors)
1DDB 8D60             (/home/strick/go/s):05278                  bsr   L1D24      copy current mouse coords to work area
1DDD 3410             (/home/strick/go/s):05279                  pshs  x          save pointer to mouse packet
1DDF 308820           (/home/strick/go/s):05280                  leax  Pt.Siz,x   point to working coord copies
1DE2 17FF42           (/home/strick/go/s):05281                  lbsr  L1C25      mouse in menu bar area?
1DE5 250A             (/home/strick/go/s):05282                  bcs   L1CE2      yes, clear relative coords from mouse packet
1DE7 8D1B             (/home/strick/go/s):05283                  bsr   L1CFA      update window relative mouse coords
1DE9 4F               (/home/strick/go/s):05284                  clra             get code for content region
1DEA 3510             (/home/strick/go/s):05285         L1CDD    puls  x          restore mouse packet pointer
1DEC A78816           (/home/strick/go/s):05286                  sta   Pt.Stat,x  save pointer type
1DEF 5F               (/home/strick/go/s):05287                  clrb             clear errors
1DF0 39               (/home/strick/go/s):05288                  rts   
                      (/home/strick/go/s):05289         
                      (/home/strick/go/s):05290         * Mouse is either in control region or off window, calculate which
     1DF1             (/home/strick/go/s):05291         L1CE2    equ   *
                      (/home/strick/go/s):05292                  IFNE  H6309
                      (/home/strick/go/s):05293                  clrd
                      (/home/strick/go/s):05294                  clrw  
                      (/home/strick/go/s):05295                  stq   -4,x       clear out relative coords in mouse packet
                      (/home/strick/go/s):05296                  ELSE
1DF1 4F               (/home/strick/go/s):05297                  clra
1DF2 5F               (/home/strick/go/s):05298                  clrb
1DF3 FD11B5           (/home/strick/go/s):05299                  std   >GrfMem+gr00B5
1DF6 ED1C             (/home/strick/go/s):05300                  std   -4,x
1DF8 ED1E             (/home/strick/go/s):05301                  std   -2,x
                      (/home/strick/go/s):05302                  ENDC
1DFA 17FF1E           (/home/strick/go/s):05303                  lbsr  L1C19      mouse on window?
1DFD 8601             (/home/strick/go/s):05304                  lda   #WR.Cntrl  Default to Control Region (doesn't affect carry)
1DFF 24E9             (/home/strick/go/s):05305                  bcc   L1CDD      Yes, leave flag alone
1E01 4C               (/home/strick/go/s):05306                  inca             Not on window, change flag to 2
1E02 20E6             (/home/strick/go/s):05307                  bra   L1CDD
                      (/home/strick/go/s):05308         
                      (/home/strick/go/s):05309         * Update window relative coords in mouse packet
                      (/home/strick/go/s):05310         * Entry: X=Ptr to mouse working coords
                      (/home/strick/go/s):05311         *        Y=Ptr to current window table
1E04 327A             (/home/strick/go/s):05312         L1CFA    leas  -6,s       make a buffer
1E06 10AFE4           (/home/strick/go/s):05313                  sty   ,s         save window table pointer
1E09 3135             (/home/strick/go/s):05314                  leay  Wt.CPX,y   point to current window start coords
1E0B 17FF68           (/home/strick/go/s):05315                  lbsr  L1C64      calculate window 
1E0E E662             (/home/strick/go/s):05316                  ldb   2,s        get window X size
1E10 4F               (/home/strick/go/s):05317                  clra             Multiply x 8
                      (/home/strick/go/s):05318                  IFNE  H6309
                      (/home/strick/go/s):05319                  lsld  
                      (/home/strick/go/s):05320                  lsld  
                      (/home/strick/go/s):05321                  lsld  
                      (/home/strick/go/s):05322                  ldw   ,x         get current mouse X coord
                      (/home/strick/go/s):05323                  subr  d,w        subtract it from size
                      (/home/strick/go/s):05324                  stw   -4,x       save window relative X coord in mouse packet
                      (/home/strick/go/s):05325                  ELSE
1E11 58               (/home/strick/go/s):05326                  lslb  
1E12 49               (/home/strick/go/s):05327                  rola  
1E13 58               (/home/strick/go/s):05328                  lslb  
1E14 49               (/home/strick/go/s):05329                  rola  
1E15 58               (/home/strick/go/s):05330                  lslb  
1E16 49               (/home/strick/go/s):05331                  rola  
1E17 3406             (/home/strick/go/s):05332                  pshs  d
1E19 EC84             (/home/strick/go/s):05333                  ldd   ,x
1E1B A3E4             (/home/strick/go/s):05334                  subd  ,s
1E1D ED1C             (/home/strick/go/s):05335                  std   -4,x
1E1F 3506             (/home/strick/go/s):05336                  puls  d
                      (/home/strick/go/s):05337                  ENDC
1E21 E663             (/home/strick/go/s):05338                  ldb   3,s        get window Y size
1E23 4F               (/home/strick/go/s):05339                  clra             Multiply x 8
                      (/home/strick/go/s):05340                  IFNE  H6309
                      (/home/strick/go/s):05341                  lsld  
                      (/home/strick/go/s):05342                  lsld  
                      (/home/strick/go/s):05343                  lsld  
                      (/home/strick/go/s):05344                  ldw   2,x        get current mouse Y coord
                      (/home/strick/go/s):05345                  subr  d,w        subtract it from size
                      (/home/strick/go/s):05346                  stw   -2,x       save window relative Y coord in mouse packet
                      (/home/strick/go/s):05347                  ELSE
1E24 58               (/home/strick/go/s):05348                  lslb  
1E25 49               (/home/strick/go/s):05349                  rola  
1E26 58               (/home/strick/go/s):05350                  lslb  
1E27 49               (/home/strick/go/s):05351                  rola  
1E28 58               (/home/strick/go/s):05352                  lslb  
1E29 49               (/home/strick/go/s):05353                  rola  
1E2A 3406             (/home/strick/go/s):05354                  pshs  d
1E2C EC02             (/home/strick/go/s):05355                  ldd   2,x
1E2E A3E4             (/home/strick/go/s):05356                  subd  ,s
1E30 FD11B5           (/home/strick/go/s):05357                  std   >GrfMem+gr00B5
1E33 ED1E             (/home/strick/go/s):05358                  std   -2,x
1E35 3506             (/home/strick/go/s):05359                  puls  d
                      (/home/strick/go/s):05360                  ENDC
1E37 10AEE4           (/home/strick/go/s):05361                  ldy   ,s         get window table pointer
1E3A 3266             (/home/strick/go/s):05362                  leas  6,s        purge stack
1E3C 39               (/home/strick/go/s):05363                  rts              return
                      (/home/strick/go/s):05364         
                      (/home/strick/go/s):05365         * Copy current mouse coords to working area
1E3D 8E103C           (/home/strick/go/s):05366         L1D24    ldx   #WGlobal+G.Mouse Point to mouse packet in global mem
                      (/home/strick/go/s):05367                  IFNE  H6309
                      (/home/strick/go/s):05368                  ldq   Pt.AcX,x   get current mouse coords
                      (/home/strick/go/s):05369                  tim   #$01,[Wt.STbl,y] 640 pixel wide screen?
                      (/home/strick/go/s):05370                  ELSE
1E40 EC881A           (/home/strick/go/s):05371                  ldd   Pt.AcX+2,x
1E43 FD11B5           (/home/strick/go/s):05372                  std   >GrfMem+gr00B5
1E46 EC8818           (/home/strick/go/s):05373                  ldd   Pt.AcX,x
1E49 3402             (/home/strick/go/s):05374                  pshs  a
1E4B A6B8F0           (/home/strick/go/s):05375                  lda   [Wt.STbl,y]
1E4E 8401             (/home/strick/go/s):05376                  anda  #$01
1E50 3502             (/home/strick/go/s):05377                  puls  a
                      (/home/strick/go/s):05378                  ENDC
1E52 2602             (/home/strick/go/s):05379                  bne   L1D47      yes, skip ahead
                      (/home/strick/go/s):05380                  IFNE  H6309
                      (/home/strick/go/s):05381                  lsrd             Divide X coord by 2
1E54                  (/home/strick/go/s):05382         L1D47    stq   Pt.Siz,x   Save X&Y coords in working area
                      (/home/strick/go/s):05383                  ELSE
1E54 44               (/home/strick/go/s):05384                  lsra
1E55 56               (/home/strick/go/s):05385                  rorb
1E56 3406             (/home/strick/go/s):05386         L1D47    pshs  d
1E58 FC11B5           (/home/strick/go/s):05387                  ldd   >GrfMem+gr00B5
1E5B ED8822           (/home/strick/go/s):05388                  std   Pt.Siz+2,x
1E5E 3506             (/home/strick/go/s):05389                  puls  d
1E60 ED8820           (/home/strick/go/s):05390                  std   Pt.Siz,x
                      (/home/strick/go/s):05391                  ENDC
1E63 39               (/home/strick/go/s):05392                  rts              return
                      (/home/strick/go/s):05393         
                      (/home/strick/go/s):05394                  ENDC
                      (/home/strick/go/s):05395         
                      (/home/strick/go/s):05396         
                      (/home/strick/go/s):05397         ****************************
                      (/home/strick/go/s):05398         * Scale/DWProtSw/TCharSw/BoldSw
1E64                  (/home/strick/go/s):05399         DWProtSw
1E64                  (/home/strick/go/s):05400         TCharSw
1E64                  (/home/strick/go/s):05401         BoldSw
1E64                  (/home/strick/go/s):05402         PropSw
1E64 17E857           (/home/strick/go/s):05403         ScaleSw  lbsr  L06A0      verify window table
1E67 2517             (/home/strick/go/s):05404                  bcs   NoWind     not good, return error
1E69 A684             (/home/strick/go/s):05405                  lda   ,x         Get switch
1E6B BE100C           (/home/strick/go/s):05406                  ldx   >WGlobal+G.CurDvM     Get current devices' static mem ptr
1E6E E68837           (/home/strick/go/s):05407                  ldb   V.CallCde,x  Get which switch we will be setting
1E71 C022             (/home/strick/go/s):05408                  subb  #$22       Bump down to 0-8 range
1E73 2A01             (/home/strick/go/s):05409                  bpl   doswitch   If anything but DWProtSW, skip ahead
1E75 5F               (/home/strick/go/s):05410                  clrb             0=DWProtSW
1E76 308C0A           (/home/strick/go/s):05411         doswitch leax  <SwtchTbl,pc Point to switch table
1E79 4D               (/home/strick/go/s):05412                  tsta             On or Off?
1E7A 2602             (/home/strick/go/s):05413                  bne   SwOn       On, go do
1E7C 300A             (/home/strick/go/s):05414                  leax  10,x       Off, adjust for 2nd table
1E7E 6E85             (/home/strick/go/s):05415         SwOn     jmp   b,x        Go set/reset bit flag
                      (/home/strick/go/s):05416         
1E80 C6C4             (/home/strick/go/s):05417         NoWind   ldb   #E$WUndef  Window Undefined error
1E82 39               (/home/strick/go/s):05418                  rts   
                      (/home/strick/go/s):05419         
                      (/home/strick/go/s):05420         * Table for switches
1E83 2012             (/home/strick/go/s):05421         SwtchTbl bra   DProtOn    Device window protect On
1E85 2028             (/home/strick/go/s):05422                  bra   TChrOn     Transparent chars On
1E87 202E             (/home/strick/go/s):05423                  bra   PropOn     Proportional On
1E89 203C             (/home/strick/go/s):05424                  bra   ScaleOn    Scaling On
1E8B 204A             (/home/strick/go/s):05425                  bra   BoldOn     Bold On
1E8D 2010             (/home/strick/go/s):05426                  bra   DProtOff   Device window protect Off
1E8F 2016             (/home/strick/go/s):05427                  bra   TChrOff    Transparent chars Off
1E91 202C             (/home/strick/go/s):05428                  bra   PropOff    Proportional Off
1E93 203A             (/home/strick/go/s):05429                  bra   ScaleOff   Scaling Off
1E95 2048             (/home/strick/go/s):05430                  bra   BoldOff    Bold Off
                      (/home/strick/go/s):05431         
     1E97             (/home/strick/go/s):05432         DProtOn  equ    *
                      (/home/strick/go/s):05433                  IFNE  H6309
                      (/home/strick/go/s):05434                  oim   #Protect,Wt.BSW,y Turn Device window protect on
                      (/home/strick/go/s):05435                  ELSE
1E97 E629             (/home/strick/go/s):05436                  ldb   Wt.BSW,y
1E99 CA01             (/home/strick/go/s):05437                  orb   #Protect
1E9B E729             (/home/strick/go/s):05438                  stb   Wt.BSW,y
                      (/home/strick/go/s):05439                  ENDC
1E9D 5F               (/home/strick/go/s):05440                  clrb             No error & return
1E9E 39               (/home/strick/go/s):05441                  rts   
                      (/home/strick/go/s):05442         
     1E9F             (/home/strick/go/s):05443         DProtOff equ    *
                      (/home/strick/go/s):05444                  IFNE  H6309
                      (/home/strick/go/s):05445                  aim   #^Protect,Wt.BSW,y Turn Device window protect off
                      (/home/strick/go/s):05446                  ELSE
1E9F E629             (/home/strick/go/s):05447                  ldb   Wt.BSW,y
1EA1 C4FE             (/home/strick/go/s):05448                  andb  #^Protect
1EA3 E729             (/home/strick/go/s):05449                  stb   Wt.BSW,y
                      (/home/strick/go/s):05450                  ENDC
1EA5 5F               (/home/strick/go/s):05451                  clrb             No error & return
1EA6 39               (/home/strick/go/s):05452                  rts   
                      (/home/strick/go/s):05453         
     1EA7             (/home/strick/go/s):05454         TChrOff  equ    *
                      (/home/strick/go/s):05455                  IFNE  H6309
                      (/home/strick/go/s):05456                  oim   #TChr,Wt.BSW,y Turn Transparency off
                      (/home/strick/go/s):05457                  ELSE
1EA7 E629             (/home/strick/go/s):05458                  ldb   Wt.BSW,y
1EA9 CA80             (/home/strick/go/s):05459                  orb   #TChr
1EAB E729             (/home/strick/go/s):05460                  stb   Wt.BSW,y
                      (/home/strick/go/s):05461                  ENDC
1EAD 5F               (/home/strick/go/s):05462                  clrb             No error & return
1EAE 39               (/home/strick/go/s):05463                  rts   
                      (/home/strick/go/s):05464         
     1EAF             (/home/strick/go/s):05465         TChrOn   equ    *
                      (/home/strick/go/s):05466                  IFNE  H6309
                      (/home/strick/go/s):05467                  aim   #^TChr,Wt.BSW,y Turn Transparency on
                      (/home/strick/go/s):05468                  ELSE
1EAF E629             (/home/strick/go/s):05469                  ldb   Wt.BSW,y
1EB1 C47F             (/home/strick/go/s):05470                  andb  #^TChr
1EB3 E729             (/home/strick/go/s):05471                  stb   Wt.BSW,y
                      (/home/strick/go/s):05472                  ENDC
1EB5 5F               (/home/strick/go/s):05473                  clrb             No error & return
1EB6 39               (/home/strick/go/s):05474                  rts   
                      (/home/strick/go/s):05475         
     1EB7             (/home/strick/go/s):05476         PropOn   equ    *
                      (/home/strick/go/s):05477                  IFNE  H6309
                      (/home/strick/go/s):05478                  oim   #Prop,Wt.BSW,y Turn Proportional on
                      (/home/strick/go/s):05479                  ELSE
1EB7 E629             (/home/strick/go/s):05480                  ldb   Wt.BSW,y
1EB9 CA10             (/home/strick/go/s):05481                  orb   #Prop
1EBB E729             (/home/strick/go/s):05482                  stb   Wt.BSW,y
                      (/home/strick/go/s):05483                  ENDC
1EBD 5F               (/home/strick/go/s):05484                  clrb             No error & return
1EBE 39               (/home/strick/go/s):05485                  rts   
                      (/home/strick/go/s):05486         
     1EBF             (/home/strick/go/s):05487         PropOff  equ    *
                      (/home/strick/go/s):05488                  IFNE  H6309
                      (/home/strick/go/s):05489                  aim   #^Prop,Wt.BSW,y Turn Proportional off
                      (/home/strick/go/s):05490                  ELSE
1EBF E629             (/home/strick/go/s):05491                  ldb   Wt.BSW,y
1EC1 C4EF             (/home/strick/go/s):05492                  andb  #^Prop
1EC3 E729             (/home/strick/go/s):05493                  stb   Wt.BSW,y
                      (/home/strick/go/s):05494                  ENDC
1EC5 5F               (/home/strick/go/s):05495                  clrb             No error & return
1EC6 39               (/home/strick/go/s):05496                  rts   
                      (/home/strick/go/s):05497         
     1EC7             (/home/strick/go/s):05498         ScaleOn  equ    *
                      (/home/strick/go/s):05499                  IFNE  H6309
                      (/home/strick/go/s):05500                  oim   #Scale,Wt.BSW,y Turn Scaling on
                      (/home/strick/go/s):05501                  ELSE
1EC7 E629             (/home/strick/go/s):05502                  ldb   Wt.BSW,y
1EC9 CA08             (/home/strick/go/s):05503                  orb   #Scale
1ECB E729             (/home/strick/go/s):05504                  stb   Wt.BSW,y
                      (/home/strick/go/s):05505                  ENDC
1ECD 5F               (/home/strick/go/s):05506                  clrb             No error & return
1ECE 39               (/home/strick/go/s):05507                  rts   
                      (/home/strick/go/s):05508         
     1ECF             (/home/strick/go/s):05509         ScaleOff equ    *
                      (/home/strick/go/s):05510                  IFNE  H6309
                      (/home/strick/go/s):05511                  aim   #^Scale,Wt.BSW,y Turn Scaling off
                      (/home/strick/go/s):05512                  ELSE
1ECF E629             (/home/strick/go/s):05513                  ldb   Wt.BSW,y
1ED1 C4F7             (/home/strick/go/s):05514                  andb  #^Scale
1ED3 E729             (/home/strick/go/s):05515                  stb   Wt.BSW,y
                      (/home/strick/go/s):05516                  ENDC
1ED5 5F               (/home/strick/go/s):05517                  clrb             No error & return
1ED6 39               (/home/strick/go/s):05518                  rts   
                      (/home/strick/go/s):05519         
     1ED7             (/home/strick/go/s):05520         BoldOn   equ    *
                      (/home/strick/go/s):05521                  IFNE  H6309
                      (/home/strick/go/s):05522                  oim   #Bold,Wt.BSW,y Turn Bold on
                      (/home/strick/go/s):05523                  ELSE
1ED7 E629             (/home/strick/go/s):05524                  ldb   Wt.BSW,y
1ED9 CA20             (/home/strick/go/s):05525                  orb   #Bold
1EDB E729             (/home/strick/go/s):05526                  stb   Wt.BSW,y
                      (/home/strick/go/s):05527                  ENDC
1EDD 5F               (/home/strick/go/s):05528                  clrb             No error & return
1EDE 39               (/home/strick/go/s):05529                  rts   
                      (/home/strick/go/s):05530         
     1EDF             (/home/strick/go/s):05531         BoldOff  equ    *
                      (/home/strick/go/s):05532                  IFNE  H6309
                      (/home/strick/go/s):05533                  aim   #^Bold,Wt.BSW,y Turn Bold off
                      (/home/strick/go/s):05534                  ELSE
1EDF E629             (/home/strick/go/s):05535                  ldb   Wt.BSW,y
1EE1 C4DF             (/home/strick/go/s):05536                  andb  #^Bold
1EE3 E729             (/home/strick/go/s):05537                  stb   Wt.BSW,y
                      (/home/strick/go/s):05538                  ENDC
1EE5 5F               (/home/strick/go/s):05539                  clrb             No error & return
1EE6 39               (/home/strick/go/s):05540                  rts   
                      (/home/strick/go/s):05541         
                      (/home/strick/go/s):05542                  IFNE  CoGrf-1
                      (/home/strick/go/s):05543         * FIXMENU - redos the graphics on the menu bar affected by menu pulldown
                      (/home/strick/go/s):05544         * Entry: X=Ptr to menu text (NUL terminated)
                      (/home/strick/go/s):05545         *        Y=Window table ptr
                      (/home/strick/go/s):05546         *        U=Ptr to menu handling table entry (4 byte packets)
                      (/home/strick/go/s):05547         *        B=Size of text to write (dont' need here)
                      (/home/strick/go/s):05548         *        A=End X coord of menu entry
                      (/home/strick/go/s):05549         * Exit: preserves x,y,u registers
                      (/home/strick/go/s):05550         * Stack offsets for temp stack:
     0000             (/home/strick/go/s):05551         fixcolor equ   0
     0001             (/home/strick/go/s):05552         fixstrtx equ   1
     0003             (/home/strick/go/s):05553         fixstrty equ   3
     0005             (/home/strick/go/s):05554         fixendx  equ   5
     0007             (/home/strick/go/s):05555         fixendy  equ   7
     0009             (/home/strick/go/s):05556         fixcode  equ   9
                      (/home/strick/go/s):05557         
                      (/home/strick/go/s):05558         * 1st, redo background
                      (/home/strick/go/s):05559         
1EE7 3416             (/home/strick/go/s):05560         FixMenu  pshs  d,x        Save # of chars & menu text ptr
1EE9 3276             (/home/strick/go/s):05561                  leas  -10,s      Make room on stack for graphics "chunk"
                      (/home/strick/go/s):05562                  IFNE  H6309
                      (/home/strick/go/s):05563                  tfr   e,b        Move calculated End X coord to D
                      (/home/strick/go/s):05564                  ELSE
1EEB F611B5           (/home/strick/go/s):05565                  ldb   >GrfMem+gr00B5
                      (/home/strick/go/s):05566                  ENDC
1EEE A60F             (/home/strick/go/s):05567                  lda   MN.ID,x    Get menu ID #
1EF0 8114             (/home/strick/go/s):05568                  cmpa  #MId.Tdy   Tandy menu (in which case E is fried)
1EF2 2603             (/home/strick/go/s):05569                  bne   normalmn
1EF4 E642             (/home/strick/go/s):05570                  ldb   MnuXEnd,u  Get real end coord
1EF6 5C               (/home/strick/go/s):05571                  incb             For space between it & next coord
                      (/home/strick/go/s):05572         * Draw 6 pixel high bar in middle
1EF7 4F               (/home/strick/go/s):05573         normalmn clra  
                      (/home/strick/go/s):05574                  IFNE  H6309
                      (/home/strick/go/s):05575                  lsld             D=D*8 (for graphics X coord)
                      (/home/strick/go/s):05576                  lsld  
                      (/home/strick/go/s):05577                  lsld  
                      (/home/strick/go/s):05578                  ELSE
1EF8 58               (/home/strick/go/s):05579                  lslb
1EF9 49               (/home/strick/go/s):05580                  rola
1EFA 58               (/home/strick/go/s):05581                  lslb
1EFB 49               (/home/strick/go/s):05582                  rola
1EFC 58               (/home/strick/go/s):05583                  lslb
1EFD 49               (/home/strick/go/s):05584                  rola
                      (/home/strick/go/s):05585                  ENDC
1EFE ED65             (/home/strick/go/s):05586                  std   fixendx,s  Save End X Coord
1F00 CC0002           (/home/strick/go/s):05587                  ldd   #WColor1   Color 1
1F03 E7E4             (/home/strick/go/s):05588                  stb   fixcolor,s Save it
1F05 CC0001           (/home/strick/go/s):05589                  ldd   #1         Y Pix start=1 (added since WColor now changeable)
1F08 ED63             (/home/strick/go/s):05590                  std   fixstrty,s
1F0A C606             (/home/strick/go/s):05591                  ldb   #6         Save Y pixel end
1F0C ED67             (/home/strick/go/s):05592                  std   fixendy,s
1F0E E641             (/home/strick/go/s):05593                  ldb   MnuXStrt,u Get start X coord
                      (/home/strick/go/s):05594                  IFNE  H6309
                      (/home/strick/go/s):05595                  lsld             D=X coord in pixels
                      (/home/strick/go/s):05596                  lsld  
                      (/home/strick/go/s):05597                  lsld  
                      (/home/strick/go/s):05598                  ELSE
1F10 58               (/home/strick/go/s):05599                  lslb
1F11 49               (/home/strick/go/s):05600                  rola
1F12 58               (/home/strick/go/s):05601                  lslb
1F13 49               (/home/strick/go/s):05602                  rola
1F14 58               (/home/strick/go/s):05603                  lslb
1F15 49               (/home/strick/go/s):05604                  rola
                      (/home/strick/go/s):05605                  ENDC
1F16 ED61             (/home/strick/go/s):05606                  std   fixstrtx,s Save X pixel start
1F18 CC014E           (/home/strick/go/s):05607                  ldd   #$014e     1 function & GRFDRV Bar function code
1F1B E769             (/home/strick/go/s):05608                  stb   fixcode,s
1F1D 30E4             (/home/strick/go/s):05609                  leax  ,s         Point to our "chunk"
1F1F 17F358           (/home/strick/go/s):05610                  lbsr  DrawBar    Draw the top line again
                      (/home/strick/go/s):05611         * Now redo top line
1F22 8603             (/home/strick/go/s):05612                  lda   #WColor3   Color 3
1F24 A7E4             (/home/strick/go/s):05613                  sta   fixcolor,s
                      (/home/strick/go/s):05614                  IFNE  H6309
                      (/home/strick/go/s):05615                  clrd             Y coord=0
                      (/home/strick/go/s):05616                  ELSE
1F26 4F               (/home/strick/go/s):05617                  clra
1F27 5F               (/home/strick/go/s):05618                  clrb
                      (/home/strick/go/s):05619                  ENDC
1F28 ED63             (/home/strick/go/s):05620                  std   fixstrty,s
1F2A ED67             (/home/strick/go/s):05621                  std   fixendy,s
1F2C CC014A           (/home/strick/go/s):05622                  ldd   #$014a     1 function & Draw line GRFDRV function code
1F2F E769             (/home/strick/go/s):05623                  stb   fixcode,s
1F31 30E4             (/home/strick/go/s):05624                  leax  ,s         Point to our "chunk"
1F33 17F344           (/home/strick/go/s):05625                  lbsr  DrawBar
                      (/home/strick/go/s):05626         * Now redo bottom line
1F36 8601             (/home/strick/go/s):05627                  lda   #WColor2   Color 2
1F38 A7E4             (/home/strick/go/s):05628                  sta   fixcolor,s
1F3A CC0007           (/home/strick/go/s):05629                  ldd   #7         Y coord=7
1F3D ED63             (/home/strick/go/s):05630                  std   fixstrty,s
1F3F ED67             (/home/strick/go/s):05631                  std   fixendy,s
1F41 CC014A           (/home/strick/go/s):05632                  ldd   #$014a     1 function & GRFDRV Draw Line function code
1F44 E769             (/home/strick/go/s):05633                  stb   fixcode,s
1F46 30E4             (/home/strick/go/s):05634                  leax  ,s         Point to our "chunk"
1F48 17F32F           (/home/strick/go/s):05635                  lbsr  DrawBar
1F4B 326A             (/home/strick/go/s):05636                  leas  10,s       Restore stack
1F4D 3596             (/home/strick/go/s):05637                  puls  d,x,pc     Restore regs & return
                      (/home/strick/go/s):05638                  ENDC
                      (/home/strick/go/s):05639         
1F4F A46F68           (/home/strick/go/s):05640                  emod  
     1F52             (/home/strick/go/s):05641         eom      equ   *
                      (/home/strick/go/s):05642                  end
