                      (          vfy.asm):00001         * vfy.asm, module file verification tool
                      (          vfy.asm):00002         * Copyright (C) 1993-2014  Gene Heskett
                      (          vfy.asm):00003         * License: GPLv2
                      (          vfy.asm):00004         * See vfy.doc for more licensing information
                      (          vfy.asm):00005          
                      (          vfy.asm):00006                   opt w 86
                      (          vfy.asm):00007                   nam vfy Edition 17
                      (          vfy.asm):00008                   ttl A new verify, finds, fixes modules in files
                      (          vfy.asm):00009         *************************************************
                      (          vfy.asm):00010         * This verify will search thru any file to find a
                      (          vfy.asm):00011         * valid module header in the $87CD format, get that
                      (          vfy.asm):00012         * modules size, do a header parity/crc check on it,
                      (          vfy.asm):00013         * and if the -f option is on, will update the header
                      (          vfy.asm):00014         * parity and CRC bytes in the file too. It then
                      (          vfy.asm):00015         * resumes the search of the named file for more
                      (          vfy.asm):00016         * modules and loops till <eof>. If it finds <eof>
                      (          vfy.asm):00017         * while doing the crc, the error is reported as such.
                      (          vfy.asm):00018         * 2/18/93 version 7
                      (          vfy.asm):00019         * The housekeeping was pretty well complete, so it
                      (          vfy.asm):00020         * wasn't very much trouble to add the file split
                      (          vfy.asm):00021         * ability to this, now we can even split out the
                      (          vfy.asm):00022         * kernal track modules, plus head and tail too! Ver 8
                      (          vfy.asm):00023         * 11.24.93 GH Ver 9Adding some stuffs from "fixmod" here 
                      (          vfy.asm):00024         * Now have total control over its vebosity 11/24/93 GH Ver 10
                      (          vfy.asm):00025         * 11/24/93 GH, -ua,-ur,-ut,-ul=$hexval installed
                      (          vfy.asm):00026         * 11/26-27/93 GH fine tuning the above GH Ver 11
                      (          vfy.asm):00027         * 01/25/94 GH another minor mod so it doesn't complain
                      (          vfy.asm):00028         * if the header parity is correct even if told to fix GH Ver 12
                      (          vfy.asm):00029         * 11/11/94 GH Ver 13. bug smashing, didn't update datasize
                      (          vfy.asm):00030         * if header parity was ok. Wrong branch at hdr parity check,
                      (          vfy.asm):00031         * if good it skipped the header update! Shame on me. :-(
                      (          vfy.asm):00032         * 11/14/94 GH Now it beeps and updates the header even if
                      (          vfy.asm):00033         * theres nothing wrong if the -f option is on. It doesn't
                      (          vfy.asm):00034         * hurt anything except the speed, but looking to fix
                      (          vfy.asm):00035         * it anyway. Now it does a header/datasize update
                      (          vfy.asm):00036         * independantly of the crc fixes, fixing only the
                      (          vfy.asm):00037         * header of the named file for one of the header
                      (          vfy.asm):00038         * fix variables, and the crc of that named file.
                      (          vfy.asm):00039         * If the -f option is on, it will fix the crc's
                      (          vfy.asm):00040         * and headers all thru the file. A good way to
                      (          vfy.asm):00041         * clean up after ded when working on hand patches
                      (          vfy.asm):00042         * in the kernal track.
                      (          vfy.asm):00043         * 05/04/95 GH, wasn't showing the correct info from the
                      (          vfy.asm):00044         * INIT module. Several minor changes there. Now ed #15
                      (          vfy.asm):00045         * 05/10/95 GH, adding the ability to change one module
                      (          vfy.asm):00046         * in a file via the name match, -n=modname
                      (          vfy.asm):00047         * also put verbose control in (finally), now edition 16
                      (          vfy.asm):00048         * Seeing if its possible to make it split a $62CD library
                      (          vfy.asm):00049         * after looking over the header format for an ROF file,
                      (          vfy.asm):00050         * it might be better to do a whole new "libsplit"
                      (          vfy.asm):00051                   ifp1
                      (          vfy.asm):00052                   use  os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0018                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
0018                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
0018                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
0018                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
0018                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
0018                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
                      (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0018                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0018                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
0018                  (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0024                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0024                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0034                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0034                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0034                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0034                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0034                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
0034                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
0034                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
0034                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
0034                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
0034                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
0034                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0034                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0034                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0034                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0034                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0034                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0034                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0034                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0034                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0034                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0034                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
0034                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
0034                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
0034                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
0034                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
0034                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
0034                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0034                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0034                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0034                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0034                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0034                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0034                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0034                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0034                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
0070                  (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0080                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0080                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
                      (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
00B1                  (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
00B1                  (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
00B1                  (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
00B1                  (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
00B1                  (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
00B1                  (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
00B1                  (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
00B1                  (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
00B1                  (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
00B1                  (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
00B1                  (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
00B1                  (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
00B1                  (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
00B1                  (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
00B1                  (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
00B1                  (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
00B1                  (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0024                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0026                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
002A                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
002C                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
002E                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0030                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0032                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0034                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0036                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0038                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
003A                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
003C                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
003E                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0040                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0042                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0044                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0046                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0048                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0049                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
004B                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
004D                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
004F                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0051                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
     0053             (            os9.d):00456         D.Time         EQU       .                   Time
0053                  (            os9.d):00457         D.Year         RMB       1                   $53
0054                  (            os9.d):00458         D.Month        RMB       1                   $54
0055                  (            os9.d):00459         D.Day          RMB       1                   $55
0056                  (            os9.d):00460         D.Hour         RMB       1                   $56
0057                  (            os9.d):00461         D.Min          RMB       1                   $57
0058                  (            os9.d):00462         D.Sec          RMB       1                   $58
0059                  (            os9.d):00463         D.Tick         RMB       1                   $59
005A                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
005B                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
005C                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
005E                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0060                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0062                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0064                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0066                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0068                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
006A                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
006B                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
006D                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
006F                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0071                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0081                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0083                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0084                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0086                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0088                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0089                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
008A                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0100                  (            os9.d):00494         D.XSWI3        RMB       3
0103                  (            os9.d):00495         D.XSWI2        RMB       3
0106                  (            os9.d):00496         D.XSWI         RMB       3
0109                  (            os9.d):00497         D.XNMI         RMB       3
010C                  (            os9.d):00498         D.XIRQ         RMB       3
010F                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
     0020             (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
     0002             (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
     006E             (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0112                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0112                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0112                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0112                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
0112                  (            os9.d):00513         D.Time         EQU       .                   System Time
0112                  (            os9.d):00514         D.Year         RMB       1
0112                  (            os9.d):00515         D.Month        RMB       1
0112                  (            os9.d):00516         D.Day          RMB       1
0112                  (            os9.d):00517         D.Hour         RMB       1
0112                  (            os9.d):00518         D.Min          RMB       1
0112                  (            os9.d):00519         D.Sec          RMB       1
0112                  (            os9.d):00520         D.Tick         RMB       1
0112                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0112                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0112                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0112                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0112                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0112                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0112                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0112                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0112                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
0112                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
                      (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
0112                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
0112                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
0112                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
0112                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
0112                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0112                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0112                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0112                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
0112                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
0112                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
0112                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0112                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0112                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0112                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0112                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0112                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
0112                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
0112                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
0112                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0112                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
0112                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0112                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
0112                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0112                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0112                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
                      (            os9.d):00569                        RMB       4                   reserved
0112                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
0112                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0112                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0112                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0112                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0112                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0112                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0112                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0112                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0112                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0112                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0112                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
0112                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
0112                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
0112                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
0112                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
0112                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
0112                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
0112                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
0112                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
0112                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
0112                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
0112                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
0112                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
0112                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
0112                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
0112                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
0112                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
0112                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
0112                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
0112                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
0112                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
0112                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
0112                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
0112                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
0112                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
0112                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
0112                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
0112                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
0112                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
0112                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
0112                  (            os9.d):00619         D.Clock        RMB       2
0112                  (            os9.d):00620         D.XSWI3        RMB       2
0112                  (            os9.d):00621         D.XSWI2        RMB       2
0112                  (            os9.d):00622         D.XFIRQ        RMB       2
0112                  (            os9.d):00623         D.XIRQ         RMB       2
0112                  (            os9.d):00624         D.XSWI         RMB       2
0112                  (            os9.d):00625         D.XNMI         RMB       2
0112                  (            os9.d):00626         D.ErrRst       RMB       2
0112                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
0112                  (            os9.d):00628         D.SWI3         RMB       2
0112                  (            os9.d):00629         D.SWI2         RMB       2
0112                  (            os9.d):00630         D.FIRQ         RMB       2
0112                  (            os9.d):00631         D.IRQ          RMB       2
0112                  (            os9.d):00632         D.SWI          RMB       2
0112                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
0112                  (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
0112                  (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
0112                  (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
0112                  (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
0112                  (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0000                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0000                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0002                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0004             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0025                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0025                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0025                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
     000C             (            os9.d):00820         DefIOSiz       EQU       12
     0010             (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
0000                  (            os9.d):00824         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
0007                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
0008                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
0009                  (            os9.d):00832         P$User         RMB       2                   User Index $09
000B                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
000C                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
000D                  (            os9.d):00835         P$State        RMB       1                   Status $0D
000E                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
0010                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
0011                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
0012                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
0014                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
0016                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
0018                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
001A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
0026                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
0036                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
0037                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
0039                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
003B                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
003F                  (            os9.d):00849                        RMB       $40-.               unused
     0040             (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
     0080             (            os9.d):00855         SysState       EQU       %10000000
     0040             (            os9.d):00856         TimSleep       EQU       %01000000
     0020             (            os9.d):00857         TimOut         EQU       %00100000
     0010             (            os9.d):00858         ImgChg         EQU       %00010000
     0002             (            os9.d):00859         Condem         EQU       %00000010
     0001             (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
0040                  (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
0040                  (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
0040                  (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0040                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0040                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0040                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0040                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0040                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0040                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0040                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0040                  (            os9.d):00877         P$User         RMB       2                   User Index
0040                  (            os9.d):00878         P$Prior        RMB       1                   Priority
0040                  (            os9.d):00879         P$Age          RMB       1                   Age
0040                  (            os9.d):00880         P$State        RMB       1                   Status
0040                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
0040                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0040                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0040                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0040                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0040                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0040                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0040                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
0040                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
0040                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
0040                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
                      (            os9.d):00892                        RMB       $20-.               unused
0040                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0040                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0040                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
0040                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
0040                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
0040                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
0040                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
0040                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
0040                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
0040                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
0040                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
0040                  (            os9.d):00905         P$Alarm        RMB       6
                      (            os9.d):00906                        RMB       $200-.              Local stack
0040                  (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
0040                  (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
0040                  (            os9.d):00913         SysState       EQU       %10000000
0040                  (            os9.d):00914         TimSleep       EQU       %01000000
0040                  (            os9.d):00915         TimOut         EQU       %00100000
0040                  (            os9.d):00916         ImgChg         EQU       %00010000
0040                  (            os9.d):00917         Suspend        EQU       %00001000
0040                  (            os9.d):00918         Condem         EQU       %00000010
0040                  (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
0009                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     0009             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     0009             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
0005                  (            os9.d):01040         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01041         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01044         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01045         R$X            EQU       6                   X Index register
0005                  (            os9.d):01046         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01047         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01048         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
     0003             (            os9.d):01051         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01052         R$X            EQU       4                   X Index register
     0006             (            os9.d):01053         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01054         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01055         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
     EE00             (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
     1080             (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
00FF                  (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
00FF                  (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
00FF                  (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
00FF                  (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
00FF                  (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (          vfy.asm):00053                   endc
     0011             (          vfy.asm):00054         ver       set  17
     0081             (          vfy.asm):00055         atrev     set  reent+1
                      (          vfy.asm):00056         *
0000 87CD0E79000D1181 (          vfy.asm):00057                   mod  len,name,prgrm+objct,atrev,entry,dsiz
     5F0737035C
                      (          vfy.asm):00058         
0000.                 (          vfy.asm):00059         crcacc    rmb  1 for new crc's
0001.                 (          vfy.asm):00060         crcac2    rmb  1
0002.                 (          vfy.asm):00061         crcac3    rmb  1
0003.                 (          vfy.asm):00062         filecrc1  rmb  1 for the actual crc
0004.                 (          vfy.asm):00063         filecrc2  rmb  1
0005.                 (          vfy.asm):00064         filecrc3  rmb  1
0006.                 (          vfy.asm):00065         numptr    rmb  2 ptr to src
0008.                 (          vfy.asm):00066         linptr    rmb  2 ptr to linbuff
000A.                 (          vfy.asm):00067         linbuff   rmb  8 max len for printables
                      (          vfy.asm):00068         
                      (          vfy.asm):00069         **** the modules header directly loaded ****
0012.                 (          vfy.asm):00070         modid1    rmb  1 the $87
0013.                 (          vfy.asm):00071         modid2    rmb  1 the $CD
0014.                 (          vfy.asm):00072         modlen    rmb  2 for the modules length
0016.                 (          vfy.asm):00073         modname   rmb  2 offset ptr to module name
0018.                 (          vfy.asm):00074         typelang  rmb  1
0019.                 (          vfy.asm):00075         modatrev  rmb  1
001A.                 (          vfy.asm):00076         checksum  rmb  1
001B.                 (          vfy.asm):00077         execptr1  rmb  1 the exec offset in the header
001C.                 (          vfy.asm):00078         execptr2  rmb  1 more exec address
001D.                 (          vfy.asm):00079         pdatasz1  rmb  1 the permanent data size from the header
001E.                 (          vfy.asm):00080         pdatasz2  rmb  1 more data size or IRQ Poll count
001F.                 (          vfy.asm):00081         dvtblent  rmb  1 the device table entries value for INIT
                      (          vfy.asm):00082         ***** the above loaded directly from the file ****
                      (          vfy.asm):00083         
0020.                 (          vfy.asm):00084         modhstrt  rmb  2 set by sethead at start of
0022.                 (          vfy.asm):00085         modlstrt  rmb  2 module being checked
0024.                 (          vfy.asm):00086         lmnscrc   rmb  2 length minus crc for seeks
0026.                 (          vfy.asm):00087         flenms16  rmb  2 overall file size ms16
0028.                 (          vfy.asm):00088         flenls16  rmb  2 ditto             ls16
002A.                 (          vfy.asm):00089         filesiz   rmb  2 size of individual module
002C.                 (          vfy.asm):00090         modpos    rmb  2 where in module now
002E.                 (          vfy.asm):00091         seekms16  rmb  2 for seeks
0030.                 (          vfy.asm):00092         seekls16  rmb  2 ditto
0032.                 (          vfy.asm):00093         moddone   rmb  1 flag for last read
0033.                 (          vfy.asm):00094         seperat   rmb  1 flag for seperations
0034.                 (          vfy.asm):00095         kernal    rmb  1 flag to save it all
0035.                 (          vfy.asm):00096         kbptrms   rmb  1 msb of int
0036.                 (          vfy.asm):00097         kbptr     rmb  1 ptr to krnlbuf location
0037.                 (          vfy.asm):00098         exdir     rmb  1 for defining the access attributes
0038.                 (          vfy.asm):00099         inpath    rmb  1 for pathnum
0039.                 (          vfy.asm):00100         outpath   rmb  1 flag and output paths
003A.                 (          vfy.asm):00101         kpath     rmb  1 for kernal extras path
003B.                 (          vfy.asm):00102         fixit     rmb  1 tally for fix it
003C.                 (          vfy.asm):00103         fixname   rmb  1 fix only this name
003D.                 (          vfy.asm):00104         fixty     rmb  1 tally for individual fix
003E.                 (          vfy.asm):00105         fixla     rmb  1 ditto
003F.                 (          vfy.asm):00106         fixat     rmb  1 ditto
0040.                 (          vfy.asm):00107         fixrv     rmb  1 ditto
0041.                 (          vfy.asm):00108         sizyet    rmb  1 size not displayed yet if set
0042.                 (          vfy.asm):00109         exectyp   rmb  1 is executable
0043.                 (          vfy.asm):00110         lftnbbl   rmb  1 controls left-right nibble processing
0044.                 (          vfy.asm):00111         verbose   rmb  1 do we wanta see the results
0045.                 (          vfy.asm):00112         updtrv    rmb  1 update revision nibble
0046.                 (          vfy.asm):00113         updtat    rmb  1 update the attr nibble
0047.                 (          vfy.asm):00114         updtty    rmb  1 update the modules type nibble
0048.                 (          vfy.asm):00115         updtla    rmb  1 update the modules language nibble
0049.                 (          vfy.asm):00116         updtdtsz  rmb  2 update modules memsize integer
004B.                 (          vfy.asm):00117         updthead  rmb  1 controls the re-write of the header
004C.                 (          vfy.asm):00118         cmpname   rmb  32 to hold wanted name
     006C             (          vfy.asm):00119         datsiz    equ  . memory from 0 to here gets cleared
006C.                 (          vfy.asm):00120         mdlname   rmb  32 room for name
008C.                 (          vfy.asm):00121         krnlbuf   rmb  64 enough for what I've seen
00CC.                 (          vfy.asm):00122         buffer    rmb  256 save the disk buffer
01CC.                 (          vfy.asm):00123         params    rmb  200
0294.                 (          vfy.asm):00124         stack     rmb  200
     035C             (          vfy.asm):00125         dsiz      equ  .
                      (          vfy.asm):00126         *
000D 5646D9           (          vfy.asm):00127         name      fcs  /VFY/
0010 11               (          vfy.asm):00128                   fcb  ver
0011 0D0A             (          vfy.asm):00129         helpmsg   fcb  $0D,$0A
0013 53796E7461783A20 (          vfy.asm):00130                   fcc  'Syntax: vfy [-options] [-options] /path/filename'
     766679205B2D6F70
     74696F6E735D205B
     2D6F7074696F6E73
     5D202F706174682F
     66696C656E616D65
0043 0D0A             (          vfy.asm):00131                   fcb  $0D,$0A
0045 204F7074696F6E73 (          vfy.asm):00132                   fcc  / Options -> -f  =fix (whole file) IF CRC is bad./
     202D3E202D662020
     3D66697820287768
     6F6C652066696C65
     2920494620435243
     206973206261642E
0075 0D0A             (          vfy.asm):00133                   fcb  $0D,$0A
0077 2020202020202020 (          vfy.asm):00134                   fcc  /         -> -v  =work silently./
     202D3E202D762020
     3D776F726B207369
     6C656E746C792E
0096 0D0A             (          vfy.asm):00135                   fcb  $0D,$0A
0098 2020202020202020 (          vfy.asm):00136                   fcc  /         -> -n=name fix or adjust only "name" module./
     202D3E202D6E3D6E
     616D652066697820
     6F722061646A7573
     74206F6E6C792022
     6E616D6522206D6F
     64756C652E
00CD 0D0A             (          vfy.asm):00137                   fcb  $0D,$0A
00CF 2020202020202020 (          vfy.asm):00138                   fcc  /         -> -x  =file is in EXEC dir./
     202D3E202D782020
     3D66696C65206973
     20696E2045584543
     206469722E
00F4 0D0A             (          vfy.asm):00139                   fcb  $0D,$0A
00F6 2020202020202020 (          vfy.asm):00140                   fcc  /         -> -s  =seperate MERGED file./
     202D3E202D732020
     3D73657065726174
     65204D4552474544
     2066696C652E
011C 0D0A             (          vfy.asm):00141                   fcb  $0D,$0A
011E 2020202020202020 (          vfy.asm):00142                   fcc  /         -> -sk =seperate KERNAL file./
     202D3E202D736B20
     3D73657065726174
     65204B45524E414C
     2066696C652E
0144 0D0A             (          vfy.asm):00143                   fcb  $0D,$0A
0146 2020202020202020 (          vfy.asm):00144                  fcc  /         -> -ua=$hexchar -ur=$hexchar -ut=$hexchar -ul=$hexchar/
     202D3E202D75613D
     2468657863686172
     202D75723D246865
     7863686172202D75
     743D246865786368
     6172202D756C3D24
     68657863686172
0185 0D0A             (          vfy.asm):00145                   fcb  $0D,$0A
0187 20613D617474206E (          vfy.asm):00146                  fcc  / a=att nibl, r=rev nibl, t=type nibl, l=lang nibl, "$" required/
     69626C2C20723D72
     6576206E69626C2C
     20743D7479706520
     6E69626C2C206C3D
     6C616E67206E6962
     6C2C202224222072
     65717569726564
01C6 0D0A             (          vfy.asm):00147                   fcb  $0D,$0A
01C8 2020202020202020 (          vfy.asm):00148                   fcc  /         -> -ud=$hexint to add (modulo $10000) data size./
     202D3E202D75643D
     24686578696E7420
     746F206164642028
     6D6F64756C6F2024
     3130303030292064
     6174612073697A65
     2E
0201 0D0A             (          vfy.asm):00149                   fcb  $0D,$0A
0203 2020202020202069 (          vfy.asm):00150                   fcc  /       if -u, -f is enabled for first file encountered./
     66202D752C202D66
     20697320656E6162
     6C656420666F7220
     6669727374206669
     6C6520656E636F75
     6E74657265642E
023A 0D0A             (          vfy.asm):00151                   fcb  $0D,$0A
023C 2020202020202069 (          vfy.asm):00152                   fcc  /       if -n, -f is enabled for named file encountered./
     66202D6E2C202D66
     20697320656E6162
     6C656420666F7220
     6E616D6564206669
     6C6520656E636F75
     6E74657265642E
0273 0D0A             (          vfy.asm):00153                   fcb  $0D,$0A
0275 2020564659202863 (          vfy.asm):00154         cpyrit    fcc  /  VFY (c) 1993, 1994, 1995 by Maurice E.(Gene) Heskett/
     2920313939332C20
     313939342C203139
     3935206279204D61
     757269636520452E
     2847656E65292048
     65736B657474
02AB 0D0A             (          vfy.asm):00155                   fcb  $0D,$0A
     02AD             (          vfy.asm):00156         msgsiz    equ  *
02AD 4120686561646572 (          vfy.asm):00157         advise0   fcc  /A header file called /
     2066696C65206361
     6C6C656420
02C2 4B65726E616C4865 (          vfy.asm):00158         kernal0   fcc  /KernalHead/
     6164
02CC 0D               (          vfy.asm):00159                   fcb  $0D put cr on name
     02CD             (          vfy.asm):00160         krnlhsz   equ  *
02CD 41207461696C2066 (          vfy.asm):00161         advise1   fcc  /A tail file called /
     696C652063616C6C
     656420
02E0 4B65726E616C5461 (          vfy.asm):00162         kernal1   fcc  /KernalTail/
     696C
02EA 0D               (          vfy.asm):00163                   fcb  $0D put cr on name
     02EB             (          vfy.asm):00164         krnltsz   equ  *
02EB 2077697468206120 (          vfy.asm):00165         advlen    fcc  / with a length of $/
     6C656E677468206F
     662024
02FE 2068617320626565 (          vfy.asm):00166         advend    fcc  / has been made./
     6E206D6164652E
030D 4865616465722066 (          vfy.asm):00167         hednamsg  fcc  /Header for    : /
     6F72202020203A20
031D 4865616465722070 (          vfy.asm):00168         hedckmsg  fcc  /Header parity : $/
     6172697479203A20
     24
     032E             (          vfy.asm):00169         ckbadsiz  equ  *
032E 2052657061697265 (          vfy.asm):00170         fixxmsg   fcc  / Repaired to: $/
     6420746F3A2024
033D 0D0A             (          vfy.asm):00171         newln     fcb  $0d,$0a
     033F             (          vfy.asm):00172         hdgdsiz   equ  *
033F 4D6F64756C652073 (          vfy.asm):00173         modlnmsg  fcc  /Module size   : $/
     697A652020203A20
     24
0350 4D6F64756C652043 (          vfy.asm):00174         crcmsg    fcc  /Module CRC is : $/
     5243206973203A20
     24
     0361             (          vfy.asm):00175         crcmsiz   equ  *
0361 2028676F6F6429   (          vfy.asm):00176         gdmsg     fcc  / (good)/
0368 0D0A             (          vfy.asm):00177                   fcb  $0d,$0a
     036A             (          vfy.asm):00178         gdsiz     equ  *
036A 20532F422024     (          vfy.asm):00179         shdabeen  fcc  ' S/B $'
0370 202862616429     (          vfy.asm):00180         badmsg    fcc  / (bad)/
0376 0707070707       (          vfy.asm):00181                   fcb  $07,$07,$07,$07,$07
     037B             (          vfy.asm):00182         badsiz    equ  *
037B 4D6F64756C652066 (          vfy.asm):00183         mdoffset  fcc  /Module found at offset $/
     6F756E6420617420
     6F66667365742024
0393 20696E2074686973 (          vfy.asm):00184         mdoffend  fcc  / in this file/
     2066696C65
03A0 0D0A             (          vfy.asm):00185         mdoffnln  fcb  $0d,$0a
03A2 546F70206F662066 (          vfy.asm):00186         ftopmem   fcc  /Top of free ram $/
     7265652072616D20
     24
     0011             (          vfy.asm):00187         ftopsiz   equ  *-ftopmem
03B3 2C2049525120706F (          vfy.asm):00188         ptabent   fcc  /, IRQ poll table entries $/
     6C6C207461626C65
     20656E7472696573
     2024
     001A             (          vfy.asm):00189         ptabsiz   equ  *-ptabent
03CD 2C20446576696365 (          vfy.asm):00190         dvtabent  fcc  /, Device table entries $/
     207461626C652065
     6E74726965732024
     0018             (          vfy.asm):00191         dvtabsiz  equ  *-dvtabent
03E5 4C656E677468206F (          vfy.asm):00192         flenmsg   fcc  /Length of file: $/
     662066696C653A20
     24
03F6 4279746573207265 (          vfy.asm):00193         howmany   fcc  /Bytes read    : $/
     6164202020203A20
     24
0407 457865632E206F66 (          vfy.asm):00194         execoff   fcc  /Exec. off     : $/
     6620202020203A20
     24
0418 446174612053697A (          vfy.asm):00195         datasiz   fcc  /Data Size     : $/
     6520202020203A20
     24
0429 45646974696F6E20 (          vfy.asm):00196         vertion   fcc  /Edition       : $/
     2020202020203A20
     24
043A 54792F4C61204174 (          vfy.asm):00197         tplgatrv  fcc  'Ty/La At/Rv   : $'
     2F52762020203A20
     24
                      (          vfy.asm):00198         
                      (          vfy.asm):00199         ******** The lookup table for TYPE
     044B             (          vfy.asm):00200         typelook  equ  *
044B 000C             (          vfy.asm):00201         typunksz  fdb  sstmod-unktyp zero is not defined
044D 006A             (          vfy.asm):00202         typunkst  fdb  unktyp-*
044F 000E             (          vfy.asm):00203         typprgsz  fdb  sbrutn-prgtyp 1 is program
0451 003A             (          vfy.asm):00204         typprgst  fdb  prgtyp-*
0453 000A             (          vfy.asm):00205         typsubsz  fdb  mltmod-sbrutn 2 is subroutine
0455 0044             (          vfy.asm):00206         typsubst  fdb  sbrutn-*
0457 0009             (          vfy.asm):00207         typmltsz  fdb  dtmtyp-mltmod 3 is multi-mod
0459 004A             (          vfy.asm):00208         typmltst  fdb  mltmod-* whatever that is
045B 000B             (          vfy.asm):00209         typdatsz  fdb  unktyp-dtmtyp
045D 004F             (          vfy.asm):00210         typdatst  fdb  dtmtyp-*
045F 000C             (          vfy.asm):00211         typ5siz   fdb  sstmod-unktyp
0461 0056             (          vfy.asm):00212         typ5str   fdb  unktyp-*
0463 000C             (          vfy.asm):00213         typ6siz   fdb  sstmod-unktyp
0465 0052             (          vfy.asm):00214         typ6str   fdb  unktyp-*
0467 000C             (          vfy.asm):00215         typ7siz   fdb  sstmod-unktyp
0469 004E             (          vfy.asm):00216         typ7str   fdb  unktyp-*
046B 000C             (          vfy.asm):00217         typ8siz   fdb  sstmod-unktyp
046D 004A             (          vfy.asm):00218         typ8str   fdb  unktyp-*
046F 000C             (          vfy.asm):00219         typ9siz   fdb  sstmod-unktyp
0471 0046             (          vfy.asm):00220         typ9str   fdb  unktyp-*
0473 000C             (          vfy.asm):00221         typAsiz   fdb  sstmod-unktyp
0475 0042             (          vfy.asm):00222         typAstr   fdb  unktyp-*
0477 000C             (          vfy.asm):00223         typBsiz   fdb  sstmod-unktyp
0479 003E             (          vfy.asm):00224         typBstr   fdb  unktyp-*
047B 000D             (          vfy.asm):00225         typCsiz   fdb  fmntyp-sstmod
047D 0046             (          vfy.asm):00226         typCstr   fdb  sstmod-*
047F 000C             (          vfy.asm):00227         typDsiz   fdb  ddrtyp-fmntyp
0481 004F             (          vfy.asm):00228         typDstr   fdb  fmntyp-*
0483 000D             (          vfy.asm):00229         typEsiz   fdb  ddstyp-ddrtyp
0485 0057             (          vfy.asm):00230         typEstr   fdb  ddrtyp-*
0487 0011             (          vfy.asm):00231         typFsiz   fdb  ddssiz-ddstyp
0489 0060             (          vfy.asm):00232         typFstr   fdb  ddstyp-*
                      (          vfy.asm):00233         
                      (          vfy.asm):00234         *********** The type defines ***********
     048B             (          vfy.asm):00235         typstrs   equ  *
048B 50726F6772616D20 (          vfy.asm):00236         prgtyp    fcc  /Program module/
     6D6F64756C65
0499 537562726F757469 (          vfy.asm):00237         sbrutn    fcc  /Subroutine/
     6E65
04A3 4D756C74692D4D6F (          vfy.asm):00238         mltmod    fcc  /Multi-Mod/
     64
04AC 44617461206D6F64 (          vfy.asm):00239         dtmtyp    fcc  /Data module/
     756C65
04B7 556E6B6E6F776E20 (          vfy.asm):00240         unktyp    fcc  /Unknown type/ from 5 to B
     74797065
04C3 53797374656D206D (          vfy.asm):00241         sstmod    fcc  /System module/
     6F64756C65
04D0 46696C65206D616E (          vfy.asm):00242         fmntyp    fcc  /File manager/
     61676572
04DC 4465766963652064 (          vfy.asm):00243         ddrtyp    fcc  /Device driver/
     7269766572
04E9 4465766963652064 (          vfy.asm):00244         ddstyp    fcc  /Device descriptor/
     657363726970746F
     72
     04FA             (          vfy.asm):00245         ddssiz    equ  *
                      (          vfy.asm):00246         
                      (          vfy.asm):00247         *********** The lookup table for LANG
     04FA             (          vfy.asm):00248         langlook  equ  *
04FA 0006             (          vfy.asm):00249         lan0siz   fdb  std809-sysdat 0 is data
04FC 003E             (          vfy.asm):00250         lan0str   fdb  sysdat-* 
04FE 000D             (          vfy.asm):00251         lan1siz   fdb  b09typ-std809 1 is 6809 object
0500 0040             (          vfy.asm):00252         lan1str   fdb  std809-*
0502 0010             (          vfy.asm):00253         lan2siz   fdb  pastyp-b09typ 2 is Basic09 I-code
0504 0049             (          vfy.asm):00254         lan2str   fdb  b09typ-*
0506 000F             (          vfy.asm):00255         lan3siz   fdb  ftntyp-pastyp 3 is Pascal P-code
0508 0055             (          vfy.asm):00256         lan3str   fdb  pastyp-*
050A 0010             (          vfy.asm):00257         lan4siz   fdb  ccityp-ftntyp 4 is Fortran I-code
050C 0060             (          vfy.asm):00258         lan4str   fdb  ftntyp-*
050E 000A             (          vfy.asm):00259         lan5siz   fdb  cbltyp-ccityp 5 is C I-code, in .r mods maybe
0510 006C             (          vfy.asm):00260         lan5str   fdb  ccityp-*
0512 000E             (          vfy.asm):00261         lan6siz   fdb  obj309-cbltyp 6 is Cobol I-code
0514 0072             (          vfy.asm):00262         lan6str   fdb  cbltyp-*
0516 000D             (          vfy.asm):00263         lan7siz   fdb  unklan-obj309 7 is 6309 object (NATIVE mode)
0518 007C             (          vfy.asm):00264         lan7str   fdb  obj309-*
051A 0012             (          vfy.asm):00265         lan8siz   fdb  unklsz-unklan 8 undefined
051C 0085             (          vfy.asm):00266         lan8str   fdb  unklan-*
051E 0012             (          vfy.asm):00267         lan9siz   fdb  unklsz-unklan 9 undefined
0520 0081             (          vfy.asm):00268         lan9str   fdb  unklan-*
0522 0012             (          vfy.asm):00269         lanAsiz   fdb  unklsz-unklan 10 undefined
0524 007D             (          vfy.asm):00270         lanAstr   fdb  unklan-*
0526 0012             (          vfy.asm):00271         lanBsiz   fdb  unklsz-unklan 11 undefined
0528 0079             (          vfy.asm):00272         lanBstr   fdb  unklan-*
052A 0012             (          vfy.asm):00273         lanCsiz   fdb  unklsz-unklan 12 undefined
052C 0075             (          vfy.asm):00274         lanCstr   fdb  unklan-*
052E 0012             (          vfy.asm):00275         lanDsiz   fdb  unklsz-unklan 13 undefined
0530 0071             (          vfy.asm):00276         lanDstr   fdb  unklan-*
0532 0012             (          vfy.asm):00277         lanEsiz   fdb  unklsz-unklan 14 undefined
0534 006D             (          vfy.asm):00278         lanEstr   fdb  unklan-*
0536 0012             (          vfy.asm):00279         lanFsiz   fdb  unklsz-unklan 15 undefined
0538 0069             (          vfy.asm):00280         lanFstr   fdb  unklan-*
                      (          vfy.asm):00281         
                      (          vfy.asm):00282         *********** The language defines *********
     053A             (          vfy.asm):00283         lanstrs   equ  *
053A 2C2044617461     (          vfy.asm):00284         sysdat    fcc  /, Data/
0540 2C2036383039206F (          vfy.asm):00285         std809    fcc  /, 6809 object/
     626A656374
054D 2C20426173696330 (          vfy.asm):00286         b09typ    fcc  /, Basic09 I-code/
     3920492D636F6465
055D 2C2050617363616C (          vfy.asm):00287         pastyp    fcc  /, Pascal P-code/
     20502D636F6465
056C 2C20466F72747261 (          vfy.asm):00288         ftntyp    fcc  /, Fortran I-code/
     6E20492D636F6465
057C 2C204320492D636F (          vfy.asm):00289         ccityp    fcc  /, C I-code/
     6465
0586 2C20436F626F6C20 (          vfy.asm):00290         cbltyp    fcc  /, Cobol I-code/
     492D636F6465
0594 2C2036333039206F (          vfy.asm):00291         obj309    fcc  /, 6309 object/
     626A656374
05A1 2C20556E6B6E6F77 (          vfy.asm):00292         unklan    fcc  /, Unknown language/
     6E206C616E677561
     6765
     05B3             (          vfy.asm):00293         unklsz    equ  *
                      (          vfy.asm):00294         
                      (          vfy.asm):00295         ********** The attr defines ************
05B3 2C2052652D656E74 (          vfy.asm):00296         rent1     fcc  /, Re-enterable/
     657261626C65
05C1 2C20522F4F       (          vfy.asm):00297         rdonly    fcc  ', R/O'
05C6 2C20522F57       (          vfy.asm):00298         rwattr    fcc  ', R/W'
05CB 2C204E4154495645 (          vfy.asm):00299         ntv309    fcc  /, NATIVE MODE!/
     204D4F444521
     05D9             (          vfy.asm):00300         ntvend    equ  *
                      (          vfy.asm):00301         
                      (          vfy.asm):00302         ******* Beginning of some subroutines *******
                      (          vfy.asm):00303         * SKEQDLR - skip the = and $
                      (          vfy.asm):00304         *  or detect a cmndline error
05D9 A680             (          vfy.asm):00305         skeqdlr  lda  ,x+
05DB 5A               (          vfy.asm):00306                  decb
05DC 813D             (          vfy.asm):00307                  cmpa #'=
05DE 10260799         (          vfy.asm):00308                  lbne help
05E2 A680             (          vfy.asm):00309                  lda  ,x+
05E4 5A               (          vfy.asm):00310                  decb
05E5 8124             (          vfy.asm):00311                  cmpa #'$
05E7 10260790         (          vfy.asm):00312                  lbne help
05EB A680             (          vfy.asm):00313                  lda  ,x+ get next char as value to use
05ED 5A               (          vfy.asm):00314                  decb
05EE 39               (          vfy.asm):00315                  rts  and return to sender
                      (          vfy.asm):00316         
                      (          vfy.asm):00317         ***********************************
                      (          vfy.asm):00318         * A switchable showit routine
05EF 3403             (          vfy.asm):00319         showit    pshs  a,cc
05F1 0D44             (          vfy.asm):00320                   tst  <verbose
05F3 2705             (          vfy.asm):00321                   beq  showend
05F5 8602             (          vfy.asm):00322                   lda  #$02 stderr
05F7 103F8A           (          vfy.asm):00323                   os9  I$Write
05FA 3503             (          vfy.asm):00324         showend   puls  a,cc
05FC 39               (          vfy.asm):00325                   rts
                      (          vfy.asm):00326         
                      (          vfy.asm):00327         **********************************
                      (          vfy.asm):00328         * A switchable newlnfd, exits thru showend
05FD 3403             (          vfy.asm):00329         newlnfd   pshs a,cc
05FF 0D44             (          vfy.asm):00330                   tst  <verbose
0601 27F7             (          vfy.asm):00331                   beq  showend
0603 8602             (          vfy.asm):00332                   lda  #$02
0605 103F8C           (          vfy.asm):00333                   os9  I$Writln
0608 20F0             (          vfy.asm):00334                   bra  showend
                      (          vfy.asm):00335         
                      (          vfy.asm):00336         ****** the display subroutine ******
                      (          vfy.asm):00337         * entry - offset into lookup table in B
                      (          vfy.asm):00338         * entry - address of lookup table in X
060A 4F               (          vfy.asm):00339         tylandis  clra just in case
060B 3A               (          vfy.asm):00340                   abx  1st string location in x, add only!
060C 10AE81           (          vfy.asm):00341                   ldy  ,x++ get size to print
060F EC84             (          vfy.asm):00342                   ldd  ,x get offset to object itself
0611 3410             (          vfy.asm):00343                   pshs x save pointer
0613 E3E1             (          vfy.asm):00344                   addd ,s++ add offset & puls x
0615 1F01             (          vfy.asm):00345                   tfr  d,x back to x
0617 8DD6             (          vfy.asm):00346                   bsr  showit
0619 39               (          vfy.asm):00347                   rts  thats all for now folks
                      (          vfy.asm):00348         
                      (          vfy.asm):00349         *********************************
                      (          vfy.asm):00350         * dfinemd - a subroutine to display
                      (          vfy.asm):00351         * the modules header defined data
                      (          vfy.asm):00352         *  first, set the tallies as to what it is
061A 30C842           (          vfy.asm):00353         dfinemd   leax exectyp,u
061D 4F               (          vfy.asm):00354                   clra
061E C602             (          vfy.asm):00355                   ldb  #verbose-exectyp
0620 A780             (          vfy.asm):00356         dfinclr   sta  ,x+
0622 5A               (          vfy.asm):00357                   decb
0623 26FB             (          vfy.asm):00358                   bne  dfinclr
0625 D618             (          vfy.asm):00359                   ldb  <typelang
0627 C4F0             (          vfy.asm):00360                   andb #$F0 get type define
0629 54               (          vfy.asm):00361                   lsrb b/2 
062A 54               (          vfy.asm):00362                   lsrb b/4 so increment thru list=4 bytes
062B 308DFE1C         (          vfy.asm):00363                   leax typelook,pcr top of type string list
062F 8DD9             (          vfy.asm):00364                   bsr  tylandis
0631 D618             (          vfy.asm):00365                   ldb  <typelang
0633 C40F             (          vfy.asm):00366                   andb #$0F
0635 2702             (          vfy.asm):00367                   beq  dfn1
0637 0C42             (          vfy.asm):00368                   inc  <exectyp
0639 58               (          vfy.asm):00369         dfn1      aslb b*2
063A 58               (          vfy.asm):00370                   aslb b*4 see reason above on b/4
063B 308DFEBB         (          vfy.asm):00371                   leax langlook,pcr top of language string list
063F 8DC9             (          vfy.asm):00372                   bsr  tylandis
0641 D619             (          vfy.asm):00373         att0      ldb  <modatrev
0643 C580             (          vfy.asm):00374                   bitb #$80
0645 270C             (          vfy.asm):00375                   beq  att1
0647 308DFF68         (          vfy.asm):00376                   leax rent1,pcr
064B 108E000E         (          vfy.asm):00377                   ldy  #rdonly-rent1
064F 8D9E             (          vfy.asm):00378                   bsr  showit
0651 D619             (          vfy.asm):00379                   ldb  <modatrev
0653 C540             (          vfy.asm):00380         att1      bitb #$40 gimix module write protect
0655 260E             (          vfy.asm):00381                   bne  att2
0657 308DFF66         (          vfy.asm):00382                   leax rdonly,pcr
065B 108E0005         (          vfy.asm):00383                   ldy  #rwattr-rdonly
065F 8D8E             (          vfy.asm):00384                   bsr  showit
0661 D619             (          vfy.asm):00385                   ldb  <modatrev
0663 200D             (          vfy.asm):00386                   bra  att3
0665 308DFF5D         (          vfy.asm):00387         att2      leax rwattr,pcr
0669 108E0005         (          vfy.asm):00388                   ldy  #ntv309-rwattr
066D 17FF7F           (          vfy.asm):00389                   lbsr showit
0670 D619             (          vfy.asm):00390                   ldb  <modatrev
0672 C520             (          vfy.asm):00391         att3      bitb #$20
0674 270B             (          vfy.asm):00392                   beq  dis0
0676 308DFF51         (          vfy.asm):00393                   leax ntv309,pcr
067A 108E000E         (          vfy.asm):00394                   ldy  #ntvend-ntv309
067E 17FF6E           (          vfy.asm):00395                   lbsr showit
0681 308DFCB8         (          vfy.asm):00396         dis0      leax newln,pcr
0685 108E0002         (          vfy.asm):00397                   ldy  #2
0689 17FF71           (          vfy.asm):00398                   lbsr newlnfd
068C 0D42             (          vfy.asm):00399                   tst  <exectyp
068E 273F             (          vfy.asm):00400                   beq  dis2 not executable code!
0690 D618             (          vfy.asm):00401                   ldb  <typelang testing for DESCR module
0692 C1F1             (          vfy.asm):00402                   cmpb #$F1 a device descriptor?
0694 277B             (          vfy.asm):00403                   beq  dis3 no, skip the Exec,Data reports
0696 308DFD6D         (          vfy.asm):00404                   leax execoff,pcr to msg
069A 108E0011         (          vfy.asm):00405                   ldy  #datasiz-execoff
069E 17FF4E           (          vfy.asm):00406                   lbsr showit 'Exec offset :$'
06A1 30C81B           (          vfy.asm):00407                   leax execptr1,u
06A4 9F06             (          vfy.asm):00408                   stx  <numptr
06A6 C602             (          vfy.asm):00409                   ldb  #$02
06A8 170684           (          vfy.asm):00410                   lbsr printit show num
06AB 308DFC8E         (          vfy.asm):00411                   leax newln,pcr 
06AF 108E0002         (          vfy.asm):00412                   ldy  #2
06B3 17FF47           (          vfy.asm):00413                   lbsr newlnfd
                      (          vfy.asm):00414         * numptr pointing at data size in module
06B6 308DFD5E         (          vfy.asm):00415         skdatup   leax datasiz,pcr
06BA 108E0011         (          vfy.asm):00416                   ldy  #vertion-datasiz
06BE 17FF2E           (          vfy.asm):00417                   lbsr showit 'Data size  :$'
06C1 C602             (          vfy.asm):00418                   ldb  #$02
06C3 170669           (          vfy.asm):00419                   lbsr printit perm data size
06C6 308DFC73         (          vfy.asm):00420                   leax newln,pcr 
06CA 17FF30           (          vfy.asm):00421                   lbsr newlnfd newline it
06CD 2042             (          vfy.asm):00422                   bra  dis3
06CF D618             (          vfy.asm):00423         dis2      ldb  <typelang testing for INIT module
06D1 C1C0             (          vfy.asm):00424                   cmpb #$C0 is it system+data=INIT?
06D3 263C             (          vfy.asm):00425                   bne  dis3 no, go
06D5 30C81B           (          vfy.asm):00426                   leax execptr1,u get it started at the right place
06D8 9F06             (          vfy.asm):00427                   stx  <numptr
06DA 308DFCC4         (          vfy.asm):00428                   leax ftopmem,pcr
06DE 108E0011         (          vfy.asm):00429                   ldy  #ftopsiz
06E2 17FF0A           (          vfy.asm):00430                   lbsr showit
06E5 C603             (          vfy.asm):00431                   ldb  #$03
06E7 170645           (          vfy.asm):00432                   lbsr printit
06EA 308DFCC5         (          vfy.asm):00433                   leax ptabent,pcr
06EE 108E001A         (          vfy.asm):00434                   ldy  #ptabsiz
06F2 17FEFA           (          vfy.asm):00435                   lbsr showit
06F5 C601             (          vfy.asm):00436                   ldb  #$01
06F7 170635           (          vfy.asm):00437                   lbsr printit
06FA 308DFCCF         (          vfy.asm):00438                   leax dvtabent,pcr
06FE 108E0018         (          vfy.asm):00439                   ldy  #dvtabsiz
0702 17FEEA           (          vfy.asm):00440                   lbsr showit 
0705 C601             (          vfy.asm):00441                   ldb  #$01
0707 170625           (          vfy.asm):00442                   lbsr printit
070A 308DFC2F         (          vfy.asm):00443                   leax newln,pcr
070E 17FEEC           (          vfy.asm):00444                   lbsr newlnfd 
0711 0F41             (          vfy.asm):00445         dis3      clr  <sizyet
0713 39               (          vfy.asm):00446                   rts
                      (          vfy.asm):00447         
                      (          vfy.asm):00448         *******************************
                      (          vfy.asm):00449         * A routine to make ascii->hex
                      (          vfy.asm):00450         * ENTRY:  valid data in a
                      (          vfy.asm):00451         * EXIT :  hex in a
0714 8130             (          vfy.asm):00452         ascihex   cmpa #'0
0716 10250661         (          vfy.asm):00453                   lblo help wrong!
071A 8139             (          vfy.asm):00454                   cmpa #'9
071C 230E             (          vfy.asm):00455                   bls  ascinum
                      (          vfy.asm):00456         ** no numbers get thru here **
071E 815A             (          vfy.asm):00457                   cmpa #'Z
0720 2502             (          vfy.asm):00458                   blo asciup
0722 84DF             (          vfy.asm):00459                   anda #$DF
0724 8146             (          vfy.asm):00460         asciup    cmpa #'F
0726 10220651         (          vfy.asm):00461                   lbhi help
072A 8007             (          vfy.asm):00462                   suba #$07
072C 8030             (          vfy.asm):00463         ascinum   suba #'0 ok sub the first $30
072E 0D43             (          vfy.asm):00464         shiftit   tst  <lftnbbl
0730 2704             (          vfy.asm):00465                   beq  asciret
0732 48               (          vfy.asm):00466                   lsla
0733 48               (          vfy.asm):00467                   lsla
0734 48               (          vfy.asm):00468                   lsla
0735 48               (          vfy.asm):00469                   lsla if lftnbbl shift it to left nibble
0736 39               (          vfy.asm):00470         asciret   rts should be ok, but Murphy is watching!
                      (          vfy.asm):00471         
                      (          vfy.asm):00472         ********************************
                      (          vfy.asm):00473         * The REAL start of this program!
                      (          vfy.asm):00474         * ENTRY: a command line full of data
                      (          vfy.asm):00475         * pointed to by regs.x
0737 3436             (          vfy.asm):00476         entry     pshs d,x,y save possible params
0739 30C4             (          vfy.asm):00477                   leax crcacc,u clear some memory
073B C66C             (          vfy.asm):00478                   ldb  #datsiz out for us.
073D 4F               (          vfy.asm):00479                   clra
073E A780             (          vfy.asm):00480         clrloop   sta  ,x+
0740 5A               (          vfy.asm):00481                   decb
0741 26FB             (          vfy.asm):00482                   bne  clrloop
0743 8601             (          vfy.asm):00483                   lda  #READ. setup for data dir
0745 9737             (          vfy.asm):00484                   sta  <exdir
0747 9744             (          vfy.asm):00485                   sta  <verbose to enable it unless shut off
0749 3536             (          vfy.asm):00486                   puls d,x,y
074B 5A               (          vfy.asm):00487                   decb arguments?
074C 1027062B         (          vfy.asm):00488                   lbeq help no,go
0750 5C               (          vfy.asm):00489                   incb back to right count!
                      (          vfy.asm):00490         
                      (          vfy.asm):00491         * and fall thru to setup, my command line checker with
                      (          vfy.asm):00492         * syntax relaxations, can take vfy -x -f filename,
                      (          vfy.asm):00493         * or vfy -fx (-xf) filename, also -s, -sk, -k alone illegal
                      (          vfy.asm):00494         * also -v now works to shut it up GH
0751 A680             (          vfy.asm):00495         setup     lda  ,x+ get a char from cmnd line
0753 5A               (          vfy.asm):00496                   decb track cmndline chars left
0754 10270623         (          vfy.asm):00497                   lbeq help
0758 8120             (          vfy.asm):00498         setret    cmpa #$20 a space?
075A 27F5             (          vfy.asm):00499                   beq  setup yup, go get next char
075C 812D             (          vfy.asm):00500                   cmpa #'- is "-"?
075E 2706             (          vfy.asm):00501                   beq  setup1 yup, go do the options
0760 301F             (          vfy.asm):00502                   leax -1,x not space or -, rtn ptr
0762 5C               (          vfy.asm):00503                   incb to restore count
0763 1600FE           (          vfy.asm):00504                   lbra openit godoit, our other exit from here
                      (          vfy.asm):00505         
0766 A680             (          vfy.asm):00506         setup1    lda  ,x+
0768 5A               (          vfy.asm):00507                   decb 
0769 8141             (          vfy.asm):00508                   cmpa #$41 is regs.a<#'A alpha char?
076B 2BEB             (          vfy.asm):00509                   bmi  setret wasn't, go
076D 84DF             (          vfy.asm):00510                   anda #$df else make uppercase
                      (          vfy.asm):00511         
                      (          vfy.asm):00512         ***** Edition 16 addition *****
076F 8156             (          vfy.asm):00513                   cmpa #'V
0771 2604             (          vfy.asm):00514                   bne setfix
0773 0F44             (          vfy.asm):00515                   clr  <verbose shut it up
0775 20EF             (          vfy.asm):00516                   bra  setup1
                      (          vfy.asm):00517         
0777 8146             (          vfy.asm):00518         setfix    cmpa #'F
0779 260A             (          vfy.asm):00519                   bne  setx nope, go
077B 973B             (          vfy.asm):00520                   sta  <fixit to nz it
077D 8643             (          vfy.asm):00521                   lda  #UPDAT.+SHARE. we don't wanna share
077F 9A37             (          vfy.asm):00522         setatts   ora  <exdir if we're fixing it
0781 9737             (          vfy.asm):00523                   sta  <exdir
0783 20E1             (          vfy.asm):00524                   bra  setup1
0785 8158             (          vfy.asm):00525         setx      cmpa #'X
0787 2604             (          vfy.asm):00526                   bne  setsepU 
0789 8604             (          vfy.asm):00527                   lda  #EXEC.
078B 20F2             (          vfy.asm):00528                   bra  setatts
                      (          vfy.asm):00529         
                      (          vfy.asm):00530         ************ setsepU ************
                      (          vfy.asm):00531         * added to pick up args for "fixmod"
                      (          vfy.asm):00532         * like operations 
078D 8155             (          vfy.asm):00533         setsepU   cmpa #'U
078F 1026008A         (          vfy.asm):00534                   lbne setsepS
0793 A680             (          vfy.asm):00535                   lda  ,x+ get next char to tell us what to do
0795 5A               (          vfy.asm):00536                   decb track data
0796 102705E1         (          vfy.asm):00537                   lbeq help can't be out here
079A 84DF             (          vfy.asm):00538                   anda #$DF make uppercase
079C 8141             (          vfy.asm):00539                   cmpa #'A change attr nibble?
079E 2612             (          vfy.asm):00540                   bne  setsepR
07A0 17FE36           (          vfy.asm):00541         setSepA   lbsr skeqdlr checks errs, returns good char
07A3 9743             (          vfy.asm):00542                   sta  <lftnbbl to nz it so ascihex will shift
07A5 973F             (          vfy.asm):00543                   sta  <fixat to tally new data avail
07A7 17FF6A           (          vfy.asm):00544                   lbsr ascihex go make it a hexval
07AA 9746             (          vfy.asm):00545                   sta  <updtat 
07AC 0F43             (          vfy.asm):00546                   clr  <lftnbbl cancel the order
07AE 0C4B             (          vfy.asm):00547                   inc  <updthead
07B0 209F             (          vfy.asm):00548                   bra  setup
                      (          vfy.asm):00549         
07B2 8152             (          vfy.asm):00550         setsepR   cmpa #'R change rev nibble?
07B4 260E             (          vfy.asm):00551                   bne  setsepT nope, maybe its Type
07B6 17FE20           (          vfy.asm):00552                   lbsr skeqdlr
07B9 9740             (          vfy.asm):00553                   sta  <fixrv to tally new data avail
07BB 17FF56           (          vfy.asm):00554                   lbsr ascihex
07BE 9745             (          vfy.asm):00555                   sta  <updtrv
07C0 0C4B             (          vfy.asm):00556                   inc  <updthead
07C2 208D             (          vfy.asm):00557                   bra  setup
                      (          vfy.asm):00558         
07C4 8154             (          vfy.asm):00559         setsepT   cmpa #'T
07C6 2613             (          vfy.asm):00560                   bne  setsepL maybe its Language nibble?
07C8 17FE0E           (          vfy.asm):00561                   lbsr skeqdlr
07CB 9743             (          vfy.asm):00562                   sta  <lftnbbl to nz it
07CD 973D             (          vfy.asm):00563                   sta  <fixty to tally new data avail
07CF 17FF42           (          vfy.asm):00564                   lbsr ascihex
07D2 9747             (          vfy.asm):00565                   sta  <updtty new Type value in left nibble
07D4 0F43             (          vfy.asm):00566                   clr  <lftnbbl shut down the shifter
07D6 0C4B             (          vfy.asm):00567                   inc  <updthead
07D8 16FF76           (          vfy.asm):00568                   lbra setup
                      (          vfy.asm):00569         
07DB 814C             (          vfy.asm):00570         setsepL   cmpa #'L is it change lang nibble?
07DD 260F             (          vfy.asm):00571                   bne  setsepD might be data size
07DF 17FDF7           (          vfy.asm):00572                   lbsr skeqdlr
07E2 973E             (          vfy.asm):00573                   sta  <fixla to tally new data avail
07E4 17FF2D           (          vfy.asm):00574                   lbsr ascihex
07E7 9748             (          vfy.asm):00575                   sta  <updtla
07E9 0C4B             (          vfy.asm):00576                   inc  <updthead
07EB 16FF63           (          vfy.asm):00577                   lbra setup
                      (          vfy.asm):00578         
                      (          vfy.asm):00579         *************** setsepD ***************
                      (          vfy.asm):00580         * if more than 4 valid hex digits are entered
                      (          vfy.asm):00581         * on cmnd line, it will keep on looping,
                      (          vfy.asm):00582         * keeping the last 4 in updtdtsz. You can add
                      (          vfy.asm):00583         * as little as one byte with this retriever or
                      (          vfy.asm):00584         * subtract since the addition is modulo $8000,
                      (          vfy.asm):00585         * use -ud=$FFFE to subtract one byte!
07EE 17FDE8           (          vfy.asm):00586         setsepD   lbsr skeqdlr see if right syntax used
07F1 17FF20           (          vfy.asm):00587         setdtsz   lbsr ascihex returns val in reg.a
07F4 3404             (          vfy.asm):00588                   pshs b we want this order on the stack
07F6 3402             (          vfy.asm):00589                   pshs a save the nibble on the stack
07F8 DC49             (          vfy.asm):00590                   ldd  <updtdtsz
07FA 58               (          vfy.asm):00591                   lslb
07FB 49               (          vfy.asm):00592                   rola times 2 now
07FC 58               (          vfy.asm):00593                   lslb
07FD 49               (          vfy.asm):00594                   rola times 4 now
07FE 58               (          vfy.asm):00595                   lslb
07FF 49               (          vfy.asm):00596                   rola times 8 now
0800 58               (          vfy.asm):00597                   lslb
0801 49               (          vfy.asm):00598                   rola updtdtsz now *16
0802 EAE0             (          vfy.asm):00599                   orb  ,s+ least sig nibble dummy!
0804 DD49             (          vfy.asm):00600                   std  <updtdtsz
0806 3504             (          vfy.asm):00601                   puls b thats why we wanted this order
0808 A680             (          vfy.asm):00602                   lda  ,x+
080A 5A               (          vfy.asm):00603                   decb tryin to track cmdln data used
080B 1027056C         (          vfy.asm):00604                   lbeq help better be more data here!
080F 8120             (          vfy.asm):00605                   cmpa #$20
0811 1027FF3C         (          vfy.asm):00606                   lbeq setup oops, out of data but ok
0815 102B0562         (          vfy.asm):00607                   lbmi help real probs, no filename!
0819 0C4B             (          vfy.asm):00608                   inc  <updthead
081B 20D4             (          vfy.asm):00609                   bra  setdtsz
                      (          vfy.asm):00610         
                      (          vfy.asm):00611         ************** setsepS ***************
                      (          vfy.asm):00612         * sets it up to seperate a merged file,
                      (          vfy.asm):00613         * the kernal to be specific, but works
                      (          vfy.asm):00614         * on os9boot files too.
081D 8153             (          vfy.asm):00615         setsepS   cmpa #'S
081F 2618             (          vfy.asm):00616                   bne  SetName this was to help
0821 9733             (          vfy.asm):00617                   sta  <seperat make nz to enable
0823 A680             (          vfy.asm):00618                   lda  ,x+
0825 5A               (          vfy.asm):00619                   decb obscure bug fixing
0826 84DF             (          vfy.asm):00620                   anda #$DF
0828 814B             (          vfy.asm):00621                   cmpa #'K
082A 2607             (          vfy.asm):00622                   bne setsep1
082C 8630             (          vfy.asm):00623                   lda #$30 a zero
082E 9734             (          vfy.asm):00624                   sta  <kernal to nz it and furnish number
0830 16FF33           (          vfy.asm):00625                   lbra setup1
0833 301F             (          vfy.asm):00626         setsep1   leax -1,x
0835 5C               (          vfy.asm):00627                   incb bug fixing
0836 16FF2D           (          vfy.asm):00628                   lbra setup1
                      (          vfy.asm):00629         
                      (          vfy.asm):00630         ****** Edition 16 addition ******
0839 814E             (          vfy.asm):00631         SetName   cmpa #'N
083B 1026053C         (          vfy.asm):00632                   lbne help
083F A680             (          vfy.asm):00633                   lda  ,x+
0841 813D             (          vfy.asm):00634                   cmpa #'=
0843 10260534         (          vfy.asm):00635                   lbne help
0847 3420             (          vfy.asm):00636                   pshs y we're gonna diddle it, save it
0849 31C84C           (          vfy.asm):00637                   leay cmpname,u
084C A680             (          vfy.asm):00638         NameSave  lda  ,x+
084E 8120             (          vfy.asm):00639                   cmpa #32
0850 230A             (          vfy.asm):00640                   bls  EndNmSv must be done, back out
0852 8139             (          vfy.asm):00641                   cmpa #'9
0854 2302             (          vfy.asm):00642                   bls  noupcase
0856 84DF             (          vfy.asm):00643                   anda #$DF name uppercase
                      (          vfy.asm):00644         * ok, lets see what its doing
0858 A7A0             (          vfy.asm):00645         noupcase  sta  ,y+ and save it
085A 20F0             (          vfy.asm):00646                   bra  NameSave
085C 6FA4             (          vfy.asm):00647         EndNmSv   clr  ,y zero mark end of name
085E 0C3C             (          vfy.asm):00648                   inc  <fixname
0860 3520             (          vfy.asm):00649                   puls y
0862 20CF             (          vfy.asm):00650                   bra  setsep1
                      (          vfy.asm):00651         
                      (          vfy.asm):00652         **** end of setup, openit start ****
0864 5A               (          vfy.asm):00653         openit    decb filename there yet?
0865 10270512         (          vfy.asm):00654                   lbeq help no, go squawk
0869 963F             (          vfy.asm):00655                   lda  <fixat
086B 9B40             (          vfy.asm):00656                   adda <fixrv
086D 9B3E             (          vfy.asm):00657                   adda <fixla
086F 9B3D             (          vfy.asm):00658                   adda <fixty
0871 9B3C             (          vfy.asm):00659                   adda <fixname
0873 9B4B             (          vfy.asm):00660                   adda <updthead
0875 2706             (          vfy.asm):00661                   beq  openatok
0877 8643             (          vfy.asm):00662                   lda  #UPDAT.+SHARE.
0879 9A37             (          vfy.asm):00663                   ora  <exdir
087B 9737             (          vfy.asm):00664                   sta  <exdir
                      (          vfy.asm):00665         * first, if named, get rid of updthead silliness
087D 0D3C             (          vfy.asm):00666         openatok  tst  <fixname did we name a module?
087F 2702             (          vfy.asm):00667                   beq  openit1 no, skip this
0881 0F4B             (          vfy.asm):00668                   clr  <updthead one or the other bud!
0883 9637             (          vfy.asm):00669         openit1   lda  <exdir get attributes
0885 103F84           (          vfy.asm):00670                   os9  I$Open
0888 102504EF         (          vfy.asm):00671                   lbcs help oh-oh, file not avail
088C 9738             (          vfy.asm):00672                   sta  <inpath
088E 17046A           (          vfy.asm):00673                   lbsr getsiz get overall size
0891 170415           (          vfy.asm):00674                   lbsr seekmod start at 0, old readit lbl
0894 170422           (          vfy.asm):00675         readit    lbsr readabyt opens head/tail files too
0897 A684             (          vfy.asm):00676                   lda  ,x
0899 8187             (          vfy.asm):00677         readit1   cmpa #$87 look for 1st byte
089B 26F7             (          vfy.asm):00678                   bne  readit
089D 9712             (          vfy.asm):00679                   sta  <modid1
089F 170417           (          vfy.asm):00680         readit2   lbsr readabyt updates filepos via addseek
08A2 A684             (          vfy.asm):00681                   lda  ,x
08A4 81CD             (          vfy.asm):00682                   cmpa #$CD
08A6 26F1             (          vfy.asm):00683                   bne  readit1
08A8 9713             (          vfy.asm):00684                   sta  <modid2 we found a file!
08AA 8E0002           (          vfy.asm):00685                   ldx  #$0002 we've got 2 bytes of 
08AD 9F2C             (          vfy.asm):00686                   stx  <modpos a module, record it
08AF 0A36             (          vfy.asm):00687                   dec  <kbptr cancel 2 outa non-mod buf
08B1 0A36             (          vfy.asm):00688                   dec  <kbptr
08B3 270A             (          vfy.asm):00689                   beq  readit3 no use if zero
08B5 0D34             (          vfy.asm):00690                   tst  <kernal are we saving all
08B7 2706             (          vfy.asm):00691                   beq  readit3
08B9 1704FC           (          vfy.asm):00692                   lbsr openkern makes filepath
08BC 17054C           (          vfy.asm):00693                   lbsr clskrnl writes kbptr size buffer and closes up
08BF 0F36             (          vfy.asm):00694         readit3   clr  <kbptr so's it don't accumulate
08C1 9638             (          vfy.asm):00695                   lda  <inpath get rest of header
08C3 30C814           (          vfy.asm):00696                   leax modlen,u
08C6 108E000C         (          vfy.asm):00697                   ldy  #$000C get dev table entries too
08CA 103F89           (          vfy.asm):00698                   os9  I$read get those 12 bytes
08CD 170338           (          vfy.asm):00699                   lbsr addsect those 12 bytes to total len
08D0 DC14             (          vfy.asm):00700                   ldd  <modlen
08D2 830003           (          vfy.asm):00701                   subd #$03
08D5 DD24             (          vfy.asm):00702                   std  <lmnscrc
08D7 170354           (          vfy.asm):00703                   lbsr sethead ->GETNAM->SEEKMOD
08DA 308DFA9D         (          vfy.asm):00704                   leax mdoffset,pcr
08DE 108E0018         (          vfy.asm):00705                   ldy  #mdoffend-mdoffset
08E2 17FD0A           (          vfy.asm):00706                   lbsr showit
08E5 30C820           (          vfy.asm):00707                   leax modhstrt,u
08E8 9F06             (          vfy.asm):00708                   stx  <numptr
08EA C604             (          vfy.asm):00709                   ldb  #$04
08EC 170440           (          vfy.asm):00710                   lbsr printit
08EF 308DFAA0         (          vfy.asm):00711                   leax mdoffend,pcr
08F3 108E000F         (          vfy.asm):00712                   ldy  #ftopmem-mdoffend
08F7 17FCF5           (          vfy.asm):00713                   lbsr showit
08FA 30C4             (          vfy.asm):00714         initcrc   leax crcacc,u
08FC C606             (          vfy.asm):00715                   ldb  #6
08FE 86FF             (          vfy.asm):00716                   lda  #$FF
0900 A780             (          vfy.asm):00717         psetcrc   sta  ,x+
0902 5A               (          vfy.asm):00718                   decb 
0903 26FB             (          vfy.asm):00719                   bne  psetcrc
0905 1700DB           (          vfy.asm):00720                   lbsr chkhead go check/fix ty/la at/rv, parity, pdatasz
0908 108E000E         (          vfy.asm):00721                   ldy  #$0E (was $D)Because parity fixed in mem,
090C 30C812           (          vfy.asm):00722                   leax modid1,u crc displayed is right IF
090F 103F17           (          vfy.asm):00723                   os9  F$CRC we do crc of 1st 14 bytes in mem
                      (          vfy.asm):00724         * after chkhead! It should arrive here with modpos=14
0912 0D33             (          vfy.asm):00725                   tst  <seperat
0914 2703             (          vfy.asm):00726                   beq  docrc0
0916 170476           (          vfy.asm):00727                   lbsr openout
0919 0C41             (          vfy.asm):00728         docrc0    inc  <sizyet
091B 30C900CC         (          vfy.asm):00729         docrc     leax buffer,u
091F DC24             (          vfy.asm):00730                   ldd  <lmnscrc module length-crcbytes
0921 932C             (          vfy.asm):00731                   subd <modpos
0923 10830100         (          vfy.asm):00732                   cmpd #$100
0927 2206             (          vfy.asm):00733                   bhi  getmore
0929 1F02             (          vfy.asm):00734                   tfr  d,y
092B 0C32             (          vfy.asm):00735                   inc  <moddone
092D 2004             (          vfy.asm):00736                   bra  getlast
092F 108E0100         (          vfy.asm):00737         getmore   ldy  #$100 get a sectors worth
0933 9638             (          vfy.asm):00738         getlast   lda  <inpath
0935 103F89           (          vfy.asm):00739                   os9  I$Read 
0938 1702CD           (          vfy.asm):00740                   lbsr addsect doesn't chg x,y
093B 0D41             (          vfy.asm):00741                   tst  <sizyet
093D 2707             (          vfy.asm):00742                   beq  getcont
093F 3436             (          vfy.asm):00743                   pshs d,x,y save count
0941 17FCD6           (          vfy.asm):00744                   lbsr dfinemd
0944 3536             (          vfy.asm):00745                   puls d,x,y
0946 30C900CC         (          vfy.asm):00746         getcont   leax buffer,u the data
094A 3430             (          vfy.asm):00747                   pshs x,y save the pointer and quantity
094C 103F17           (          vfy.asm):00748                   os9  F$Crc U already points at crcacc!
094F 3530             (          vfy.asm):00749                   puls x,y restore
0951 9639             (          vfy.asm):00750                   lda  <outpath
0953 2707             (          vfy.asm):00751                   beq  doneyet we're not spliting it
0955 103F8A           (          vfy.asm):00752                   os9  I$Write
0958 1025041F         (          vfy.asm):00753                   lbcs help report error and quit  
095C 0D32             (          vfy.asm):00754         doneyet   tst  <moddone
095E 27BB             (          vfy.asm):00755                   beq  docrc
0960 3420             (          vfy.asm):00756                   pshs y
0962 DC00             (          vfy.asm):00757                   ldd  <crcacc now copy crc to filecrc
0964 43               (          vfy.asm):00758                   coma and make valid
0965 53               (          vfy.asm):00759                   comb 
0966 DD03             (          vfy.asm):00760                   std  <filecrc1 in case its bad
0968 D602             (          vfy.asm):00761                   ldb  <crcac3 ditto
096A 53               (          vfy.asm):00762                   comb 
096B D705             (          vfy.asm):00763                   stb  <filecrc3 ditto
096D 2401             (          vfy.asm):00764                   bcc  donyet2
096F 53               (          vfy.asm):00765                   comb clear any carry
0970 1F10             (          vfy.asm):00766         donyet2   tfr  x,d
0972 E3E1             (          vfy.asm):00767                   addd ,s++ puls the Y
0974 1F01             (          vfy.asm):00768                   tfr  d,x x now=crc location in buffer
0976 3410             (          vfy.asm):00769                   pshs x save it
0978 9638             (          vfy.asm):00770                   lda  <inpath
097A 108E0003         (          vfy.asm):00771                   ldy  #$03 the 3 crc bytes
097E 103F89           (          vfy.asm):00772                   os9  I$Read
0981 170284           (          vfy.asm):00773                   lbsr addsect add to filepos
0984 3510             (          vfy.asm):00774                   puls x retrieve crc addr, y still=3
0986 103F17           (          vfy.asm):00775                   os9  F$CRC whole modules crc now in crcacc
0989 1701CC           (          vfy.asm):00776                   lbsr chkcrc go check, correct it
098C 9639             (          vfy.asm):00777                   lda  <outpath
098E 270E             (          vfy.asm):00778                   beq  dunyet if zero, no path
0990 3043             (          vfy.asm):00779                   leax filecrc1,u put good one out
0992 108E0003         (          vfy.asm):00780                   ldy  #3
0996 103F8A           (          vfy.asm):00781                   os9  I$Write
0999 103F8F           (          vfy.asm):00782                   os9  I$Close
099C 0F39             (          vfy.asm):00783                   clr  <outpath
099E 0F32             (          vfy.asm):00784         dunyet    clr  <moddone
09A0 16FEF1           (          vfy.asm):00785                   lbra readit see if more file
                      (          vfy.asm):00786         
                      (          vfy.asm):00787         *************************************
                      (          vfy.asm):00788         * The EOF is found, close up, go home
09A3 2401             (          vfy.asm):00789         cleanup   bcc  cleanup1
09A5 53               (          vfy.asm):00790                   comb we get here with the carry set
09A6 3450             (          vfy.asm):00791         cleanup1  pshs x,u save so's the tail is right
09A8 9638             (          vfy.asm):00792                   lda  <inpath
09AA DE28             (          vfy.asm):00793                   ldu  <flenls16 go back to real end of file
09AC 9E26             (          vfy.asm):00794                   ldx  <flenms16
09AE 103F88           (          vfy.asm):00795                   os9  I$Seek to end of file
09B1 3550             (          vfy.asm):00796                   puls x,u recover tail pointers
09B3 103F8F           (          vfy.asm):00797                   os9  I$Close and close up w/o len change
09B6 0D34             (          vfy.asm):00798                   tst  <kernal are we saveing a kernal?
09B8 2709             (          vfy.asm):00799                   beq  cleanup2 if 0, nothing to write! 
09BA 1703FB           (          vfy.asm):00800                   lbsr openkern go open a path
09BD 17044B           (          vfy.asm):00801                   lbsr clskrnl write and close it
09C0 2401             (          vfy.asm):00802                   bcc  cleanup2
09C2 53               (          vfy.asm):00803                   comb clear error flag
09C3 308DFA2F         (          vfy.asm):00804         cleanup2  leax howmany,pcr
09C7 108E0011         (          vfy.asm):00805                   ldy  #execoff-howmany
09CB 17FC21           (          vfy.asm):00806                   lbsr showit print the string
09CE 30C82E           (          vfy.asm):00807                   leax seekms16,u point at total length
09D1 9F06             (          vfy.asm):00808                   stx  numptr of file
09D3 C604             (          vfy.asm):00809                   ldb  #$04 bytes to print
09D5 170357           (          vfy.asm):00810                   lbsr printit convert to ascii and print
09D8 308DF961         (          vfy.asm):00811                   leax newln,pcr hang a newline on it
09DC 17FC1E           (          vfy.asm):00812                   lbsr newlnfd
09DF 5F               (          vfy.asm):00813         alldun    clrb
09E0 103F06           (          vfy.asm):00814                   os9  F$Exit all done folks!
                      (          vfy.asm):00815         
                      (          vfy.asm):00816         *************************************
                      (          vfy.asm):00817         * CHKHEAD - checks, fixes header checksum
                      (          vfy.asm):00818         *    entry: header in memory at modid1,u
09E3 308DF926         (          vfy.asm):00819         chkhead   leax hednamsg,pcr
09E7 108E0010         (          vfy.asm):00820                   ldy  #hedckmsg-hednamsg
09EB 17FC01           (          vfy.asm):00821                   lbsr showit 'Header for: '
09EE 30C86C           (          vfy.asm):00822                   leax mdlname,u
09F1 108E0020         (          vfy.asm):00823                   ldy  #$20 maxlength
09F5 17FC05           (          vfy.asm):00824                   lbsr newlnfd show the filename with cr
09F8 308DF921         (          vfy.asm):00825                   leax hedckmsg,pcr
09FC 108E0011         (          vfy.asm):00826                   ldy  #ckbadsiz-hedckmsg
0A00 17FBEC           (          vfy.asm):00827                   lbsr showit Header parity : $
0A03 C601             (          vfy.asm):00828                   ldb  #$01 only one byte to convert
0A05 30C81A           (          vfy.asm):00829                   leax checksum,u pass address of checksum
0A08 9F06             (          vfy.asm):00830                   stx  <numptr
0A0A 170322           (          vfy.asm):00831                   lbsr printit the parity byte
                      (          vfy.asm):00832         
                      (          vfy.asm):00833         ***********************************
                      (          vfy.asm):00834         * see if we got anything to fix
                      (          vfy.asm):00835         * check attr,rev,typ,lang,dsize
                      (          vfy.asm):00836         * and update the memory image
0A0D 964B             (          vfy.asm):00837                   lda  <updthead will be 1 if right module
0A0F 9B3B             (          vfy.asm):00838                   adda <fixit
0A11 274A             (          vfy.asm):00839                   beq  psetpar nothin to fix
0A13 0D3F             (          vfy.asm):00840                   tst  <fixat else
0A15 270A             (          vfy.asm):00841                   beq  revchk
0A17 9619             (          vfy.asm):00842         atchk     lda  <modatrev
0A19 840F             (          vfy.asm):00843                   anda #$0F clear the attrib nibble
0A1B 9A46             (          vfy.asm):00844                   ora  <updtat add in the attrib nibble
0A1D 9719             (          vfy.asm):00845                   sta  <modatrev
0A1F 0F3F             (          vfy.asm):00846                   clr  <fixat
0A21 0D40             (          vfy.asm):00847         revchk    tst  <fixrv
0A23 270A             (          vfy.asm):00848                   beq  tychk
0A25 9619             (          vfy.asm):00849                   lda  <modatrev
0A27 84F0             (          vfy.asm):00850                   anda #$F0 leave at nibble alone
0A29 9A45             (          vfy.asm):00851                   ora  <updtrv
0A2B 9719             (          vfy.asm):00852                   sta  <modatrev
0A2D 0F40             (          vfy.asm):00853                   clr  <fixrv
0A2F 0D3D             (          vfy.asm):00854         tychk     tst  <fixty
0A31 270A             (          vfy.asm):00855                   beq  langchk
0A33 9618             (          vfy.asm):00856                   lda  <typelang
0A35 840F             (          vfy.asm):00857                   anda #$0F clear out the type
0A37 9A47             (          vfy.asm):00858                   ora  <updtty
0A39 9718             (          vfy.asm):00859                   sta  <typelang
0A3B 0F3D             (          vfy.asm):00860                   clr  <fixty
0A3D 0D3E             (          vfy.asm):00861         langchk   tst  <fixla
0A3F 270A             (          vfy.asm):00862                   beq  chkdtsz
0A41 9618             (          vfy.asm):00863                   lda  <typelang
0A43 84F0             (          vfy.asm):00864                   anda #$F0 leave upper nibble alone
0A45 9A48             (          vfy.asm):00865                   ora  <updtla
0A47 9718             (          vfy.asm):00866                   sta  <typelang
0A49 0F3E             (          vfy.asm):00867                   clr  <fixla
0A4B DC49             (          vfy.asm):00868         chkdtsz   ldd  <updtdtsz
0A4D 10830000         (          vfy.asm):00869                   cmpd #$0000 anything there?
0A51 270A             (          vfy.asm):00870                   beq  psetpar
0A53 DC1D             (          vfy.asm):00871                   ldd  <pdatasz1
0A55 D349             (          vfy.asm):00872                   addd <updtdtsz we're not saveing the carry folks!
0A57 DD1D             (          vfy.asm):00873                   std  <pdatasz1
0A59 4F               (          vfy.asm):00874                   clra
0A5A 5F               (          vfy.asm):00875                   clrb
0A5B DD49             (          vfy.asm):00876                   std  <updtdtsz to make it one time only!
0A5D 86FF             (          vfy.asm):00877         psetpar   lda  #$FF pset parity accumulator
0A5F C608             (          vfy.asm):00878                   ldb  #$08
0A61 30C812           (          vfy.asm):00879                   leax modid1,u
0A64 A880             (          vfy.asm):00880         headchk   eora ,x+ and check the checksum
0A66 5A               (          vfy.asm):00881                   decb
0A67 26FB             (          vfy.asm):00882                   bne  headchk
0A69 A184             (          vfy.asm):00883                   cmpa ,x s/b equal
0A6B 2723             (          vfy.asm):00884                   beq  fxittst go see if data needs updt
0A6D 3412             (          vfy.asm):00885                   pshs a,x else save a few things
0A6F 308DF8FD         (          vfy.asm):00886                   leax badmsg,pcr show its bad
0A73 108E000B         (          vfy.asm):00887                   ldy  #badsiz-badmsg
0A77 17FB75           (          vfy.asm):00888                   lbsr showit ' (bad)'
0A7A 3512             (          vfy.asm):00889                   puls a,x a had correct parity
0A7C A784             (          vfy.asm):00890                   sta  ,x else fix in memory
0A7E 9F06             (          vfy.asm):00891                   stx  <numptr point at it
0A80 308DF8E6         (          vfy.asm):00892                   leax shdabeen,pcr
0A84 108E0006         (          vfy.asm):00893                   ldy  #badmsg-shdabeen
0A88 17FB64           (          vfy.asm):00894                   lbsr showit ' S/B $'
0A8B C601             (          vfy.asm):00895                   ldb  #$01 only one byte to convert
0A8D 17029F           (          vfy.asm):00896                   lbsr printit numptr already has src
0A90 964B             (          vfy.asm):00897         fxittst   lda  <updthead either will trigger fix
0A92 9B3B             (          vfy.asm):00898                   adda <fixit if neither one is on, go
0A94 2735             (          vfy.asm):00899                   beq  okmsg leave it alone
                      (          vfy.asm):00900         
                      (          vfy.asm):00901         *******************************************
                      (          vfy.asm):00902         * enableing the files fix, its now good in memory
0A96 3440             (          vfy.asm):00903                   pshs u
0A98 9E20             (          vfy.asm):00904                   ldx  <modhstrt
0A9A DE22             (          vfy.asm):00905                   ldu  <modlstrt 
0A9C 9638             (          vfy.asm):00906                   lda  <inpath
0A9E 103F88           (          vfy.asm):00907                   os9  I$Seek back up to $87CD bytes
0AA1 3540             (          vfy.asm):00908                   puls u
0AA3 30C812           (          vfy.asm):00909                   leax modid1,u
0AA6 108E000D         (          vfy.asm):00910                   ldy  #$0D bytes to write
0AAA 9638             (          vfy.asm):00911                   lda  <inpath
0AAC 103F8A           (          vfy.asm):00912                   os9  I$Write insert ty/la at/rv,parity,exec,pdatasz in file
0AAF 102502C8         (          vfy.asm):00913                   lbcs help
0AB3 1701F3           (          vfy.asm):00914                   lbsr seekmod to restore the file pointer
0AB6 308DF874         (          vfy.asm):00915                   leax fixxmsg,pcr
0ABA 108E000F         (          vfy.asm):00916                   ldy  #newln-fixxmsg
0ABE 17FB2E           (          vfy.asm):00917                   lbsr showit ' Repaired to $'
0AC1 30C81A           (          vfy.asm):00918                   leax checksum,u
0AC4 9F06             (          vfy.asm):00919                   stx  <numptr
0AC6 C601             (          vfy.asm):00920                   ldb  #$01 numptr already set
0AC8 170264           (          vfy.asm):00921                   lbsr printit
0ACB 308DF892         (          vfy.asm):00922         okmsg     leax gdmsg,pcr
0ACF 108E0009         (          vfy.asm):00923                   ldy  #gdsiz-gdmsg
0AD3 17FB27           (          vfy.asm):00924                   lbsr newlnfd ' (Good)\n'
0AD6 1701D0           (          vfy.asm):00925                   lbsr seekmod to reset file ptr
0AD9 308DF862         (          vfy.asm):00926         headout   leax modlnmsg,pcr
0ADD 108E0011         (          vfy.asm):00927                   ldy  #crcmsg-modlnmsg
0AE1 17FB0B           (          vfy.asm):00928                   lbsr showit 'Module size   : $'
0AE4 30C814           (          vfy.asm):00929                   leax modlen,u point to size in header
0AE7 9F06             (          vfy.asm):00930                   stx  <numptr
0AE9 C602             (          vfy.asm):00931                   ldb  #$02
0AEB 170241           (          vfy.asm):00932                   lbsr printit
0AEE 308DF84B         (          vfy.asm):00933                   leax newln,pcr
0AF2 17FB08           (          vfy.asm):00934                   lbsr newlnfd finish this up
0AF5 308DF930         (          vfy.asm):00935                   leax vertion,pcr
0AF9 108E0011         (          vfy.asm):00936                   ldy  #tplgatrv-vertion
0AFD 17FAEF           (          vfy.asm):00937                   lbsr showit 'Edition      : $'
0B00 30C86C           (          vfy.asm):00938                   leax mdlname,u
0B03 A680             (          vfy.asm):00939         fndend    lda  ,x+
0B05 810D             (          vfy.asm):00940                   cmpa #$0D
0B07 26FA             (          vfy.asm):00941                   bne  fndend
0B09 9F06             (          vfy.asm):00942                   stx  <numptr is -> at edition now
0B0B C601             (          vfy.asm):00943                   ldb  #$01 one hex byte only
0B0D 17021F           (          vfy.asm):00944                   lbsr printit show it
0B10 308DF829         (          vfy.asm):00945                   leax newln,pcr
0B14 108E0002         (          vfy.asm):00946                   ldy  #hdgdsiz-newln
0B18 17FAE2           (          vfy.asm):00947                   lbsr newlnfd 
0B1B 308DF91B         (          vfy.asm):00948                   leax tplgatrv,pcr
0B1F 108E0011         (          vfy.asm):00949                   ldy  #typelook-tplgatrv
0B23 17FAC9           (          vfy.asm):00950                   lbsr showit
0B26 30C818           (          vfy.asm):00951                   leax typelang,u
0B29 9F06             (          vfy.asm):00952                   stx  <numptr
0B2B C601             (          vfy.asm):00953                   ldb  #$01
0B2D 1701FF           (          vfy.asm):00954                   lbsr printit
0B30 9E08             (          vfy.asm):00955                   ldx  <linptr
0B32 8620             (          vfy.asm):00956                   lda  #$20 space it out for the
0B34 A780             (          vfy.asm):00957                   sta  ,x+ following atrev byte
0B36 A780             (          vfy.asm):00958                   sta  ,x+
0B38 A780             (          vfy.asm):00959                   sta  ,x+ 3 spaces
0B3A 8624             (          vfy.asm):00960                   lda  #'$ and a $ sign
0B3C A784             (          vfy.asm):00961                   sta  ,x
0B3E 9E08             (          vfy.asm):00962                   ldx  <linptr
0B40 108E0004         (          vfy.asm):00963                   ldy  #$04
0B44 17FAA8           (          vfy.asm):00964                   lbsr showit show '   $'
0B47 C601             (          vfy.asm):00965                   ldb  #$01 the prev call inc'ed numptr
0B49 1701E3           (          vfy.asm):00966                   lbsr printit to the atrv byte!
0B4C 308DF7ED         (          vfy.asm):00967                   leax newln,pcr
0B50 108E0002         (          vfy.asm):00968                   ldy  #$02
0B54 17FAA6           (          vfy.asm):00969                   lbsr newlnfd
0B57 39               (          vfy.asm):00970                   rts
                      (          vfy.asm):00971                   
                      (          vfy.asm):00972         *************************************
                      (          vfy.asm):00973         * CHKCRC of module 
                      (          vfy.asm):00974         * when called, it expects to see the $800FE3
                      (          vfy.asm):00975         * (seed polynomial) in the crc accumulator
0B58 3410             (          vfy.asm):00976         chkcrc    pshs x save ptr to modules crc
0B5A 308DF7F2         (          vfy.asm):00977                   leax crcmsg,pcr
0B5E 108E0011         (          vfy.asm):00978                   ldy  #crcmsiz-crcmsg
0B62 17FA8A           (          vfy.asm):00979                   lbsr showit Modules CRC is: $
0B65 3510             (          vfy.asm):00980                   puls x
                      (          vfy.asm):00981         * Now, x still points at the modules crc bytes!
                      (          vfy.asm):00982         * so we don't need a seperate number buffer
0B67 3410             (          vfy.asm):00983                   pshs x we need it later
0B69 9F06             (          vfy.asm):00984                   stx  <numptr
0B6B C603             (          vfy.asm):00985                   ldb  #$03 three bytes to display
0B6D 1701BF           (          vfy.asm):00986                   lbsr printit
0B70 3510             (          vfy.asm):00987                   puls x
0B72 DC00             (          vfy.asm):00988                   ldd  <crcacc now do the check
0B74 1083800F         (          vfy.asm):00989                   cmpd #$800F first two bytes
0B78 2623             (          vfy.asm):00990                   bne  badcrc
0B7A 9602             (          vfy.asm):00991                   lda  <crcac3
0B7C 81E3             (          vfy.asm):00992                   cmpa #$E3 third
0B7E 261D             (          vfy.asm):00993                   bne  badcrc
0B80 3410             (          vfy.asm):00994                   pshs x save it again
0B82 308DF7DB         (          vfy.asm):00995         crcdun    leax gdmsg,pcr
0B86 108E0009         (          vfy.asm):00996                   ldy  #gdsiz-gdmsg
0B8A 17FA62           (          vfy.asm):00997                   lbsr showit
0B8D 308DF7AC         (          vfy.asm):00998                   leax newln,pcr extra linefeed
0B91 108E0002         (          vfy.asm):00999                   ldy  #$02 to seperate reports
0B95 17FA65           (          vfy.asm):01000                   lbsr newlnfd
0B98 0F4B             (          vfy.asm):01001                   clr <updthead stop this silliness
0B9A 3510             (          vfy.asm):01002                   puls x fergot it once, major crash!
0B9C 39               (          vfy.asm):01003                   rts
                      (          vfy.asm):01004         
                      (          vfy.asm):01005         *************************************
                      (          vfy.asm):01006         * BADCRC - display results, check for
                      (          vfy.asm):01007         * fixit orders and fixit if told
0B9D 3410             (          vfy.asm):01008         badcrc    pshs x save that pointer!
0B9F 308DF7CD         (          vfy.asm):01009                   leax badmsg,pcr
0BA3 108E000B         (          vfy.asm):01010                   ldy  #badsiz-badmsg
0BA7 17FA53           (          vfy.asm):01011                   lbsr newlnfd 
0BAA 308DF7BC         (          vfy.asm):01012                   leax shdabeen,pcr
0BAE 108E0006         (          vfy.asm):01013                   ldy  #badmsg-shdabeen
0BB2 17FA3A           (          vfy.asm):01014                   lbsr showit Write ' S/B $'
0BB5 3043             (          vfy.asm):01015                   leax filecrc1,u show actual crc
0BB7 9F06             (          vfy.asm):01016                   stx  <numptr
0BB9 C603             (          vfy.asm):01017                   ldb  #$03
0BBB 170171           (          vfy.asm):01018                   lbsr printit
0BBE 963B             (          vfy.asm):01019                   lda  <fixit is valid whole file
0BC0 9B4B             (          vfy.asm):01020                   adda <updthead one module only
0BC2 27BE             (          vfy.asm):01021                   beq  crcdun wasn't told to fix it
                      (          vfy.asm):01022         
                      (          vfy.asm):01023         ********* enabling the fix **********
0BC4 30C830           (          vfy.asm):01024         fixenbl   leax seekls16,u we're gonna write
0BC7 EC84             (          vfy.asm):01025                   ldd  ,x to the file, seek to
0BC9 830003           (          vfy.asm):01026                   subd #$03 crc start again
0BCC ED84             (          vfy.asm):01027                   std  ,x
0BCE 2406             (          vfy.asm):01028                   bcc  msigok
0BD0 9E2E             (          vfy.asm):01029                   ldx  <seekms16 if borrow, dec hi int
0BD2 301F             (          vfy.asm):01030                   leax -1,x of addrress
0BD4 9F2E             (          vfy.asm):01031                   stx  <seekms16
0BD6 1700D0           (          vfy.asm):01032         msigok    lbsr seekmod
0BD9 3043             (          vfy.asm):01033                   leax filecrc1,u
0BDB 9F06             (          vfy.asm):01034                   stx  <numptr for later printout
0BDD 108E0003         (          vfy.asm):01035                   ldy  #$03
0BE1 9638             (          vfy.asm):01036                   lda  <inpath
0BE3 103F8A           (          vfy.asm):01037                   os9  I$Write and update the file!
0BE6 10250191         (          vfy.asm):01038                   lbcs help
0BEA 308DF740         (          vfy.asm):01039                   leax fixxmsg,pcr
0BEE 108E000F         (          vfy.asm):01040                   ldy  #newln-fixxmsg
0BF2 17F9FA           (          vfy.asm):01041                   lbsr showit 
0BF5 108E0003         (          vfy.asm):01042                   ldy  #$03 
0BF9 30C82E           (          vfy.asm):01043                   leax seekms16,u
0BFC 8D12             (          vfy.asm):01044                   bsr  addseek to restore file ptr
0BFE C603             (          vfy.asm):01045                   ldb  #$03 digits to print
0C00 17012C           (          vfy.asm):01046                   lbsr printit numptr already set
0C03 0F4B             (          vfy.asm):01047                   clr  <updthead to stop it at one module
0C05 16FF7A           (          vfy.asm):01048                   lbra crcdun go clean up end of crc display
                      (          vfy.asm):01049         
                      (          vfy.asm):01050         **************************************
                      (          vfy.asm):01051         * ADDSECT - add reg.Y to length of module & file
                      (          vfy.asm):01052         * ENTRY   Y bytes to add to present file size
                      (          vfy.asm):01053         *         X location of 4 byte accumulator (seekms16,u)
0C08 3420             (          vfy.asm):01054         addsect   pshs y first inc modpos
0C0A DC2C             (          vfy.asm):01055                   ldd  <modpos
0C0C E3E1             (          vfy.asm):01056                   addd ,s++
0C0E DD2C             (          vfy.asm):01057                   std  <modpos
                      (          vfy.asm):01058         
                      (          vfy.asm):01059         * and fall thru to ---- ADDSEEK
                      (          vfy.asm):01060         * ENTRY   Y bytes to add to position in file
                      (          vfy.asm):01061         * EXIT    updated seekms16-seekls16 accumulator
0C10 3410             (          vfy.asm):01062         addseek   pshs x save present buffer addr 
0C12 3420             (          vfy.asm):01063                   pshs y updt passed file/seek pos
0C14 30C82E           (          vfy.asm):01064                   leax seekms16,u
0C17 EC02             (          vfy.asm):01065                   ldd  2,x seekls16
0C19 E3E1             (          vfy.asm):01066                   addd ,s++
0C1B ED02             (          vfy.asm):01067                   std  2,x
0C1D 240C             (          vfy.asm):01068                   bcc  addout
0C1F EC84             (          vfy.asm):01069                   ldd  ,x seekms16 works but cumbersome
0C21 C900             (          vfy.asm):01070                   adcb #$00 methodology
0C23 ED84             (          vfy.asm):01071                   std  ,x seekms16
0C25 2404             (          vfy.asm):01072                   bcc  addout
0C27 8900             (          vfy.asm):01073                   adca #$00
0C29 ED84             (          vfy.asm):01074                   std  ,x seekms16
0C2B 3510             (          vfy.asm):01075         addout    puls x
0C2D 39               (          vfy.asm):01076                   rts
                      (          vfy.asm):01077         
                      (          vfy.asm):01078         ***************************************************
                      (          vfy.asm):01079         * SETHEAD - we've found an $87CD, reset modlstrt and
                      (          vfy.asm):01080         * modhstrt to offset 0000 of module for name finding
                      (          vfy.asm):01081         * also potential bugfixing. The previous usage of the
                      (          vfy.asm):01082         * leau -9,u didn't set a borrow if it occurred. 
                      (          vfy.asm):01083         * This method does. Returning just to call getname
                      (          vfy.asm):01084         * was extra code, so now it falls thru since all we
                      (          vfy.asm):01085         * were doing is giving getname an anchor point.
0C2E DC30             (          vfy.asm):01086         sethead   ldd  <seekls16
0C30 9E2E             (          vfy.asm):01087                   ldx  <seekms16
0C32 932C             (          vfy.asm):01088                   subd <modpos
0C34 DD22             (          vfy.asm):01089                   std  <modlstrt record starting pos
0C36 2402             (          vfy.asm):01090                   bcc  noborw
0C38 301F             (          vfy.asm):01091                   leax -1,x
0C3A 9F20             (          vfy.asm):01092         noborw    stx  <modhstrt so we can recover
                      (          vfy.asm):01093         * and fall thru to getname
0C3C DC22             (          vfy.asm):01094         getname   ldd  <modlstrt our reference location
0C3E 3406             (          vfy.asm):01095                   pshs d this pshs and ,s++
0C40 DC16             (          vfy.asm):01096                   ldd  <modname cancel
0C42 E3E1             (          vfy.asm):01097                   addd ,s++ each other
0C44 DD30             (          vfy.asm):01098                   std  <seekls16
0C46 2402             (          vfy.asm):01099                   bcc  nocari
0C48 3001             (          vfy.asm):01100                   leax 1,x add carry to hi int
0C4A 9F2E             (          vfy.asm):01101         nocari    stx  <seekms16
0C4C 8D5B             (          vfy.asm):01102         getit     bsr  seekmod
0C4E 30C86C           (          vfy.asm):01103                   leax mdlname,u
0C51 9638             (          vfy.asm):01104         gtbyt     lda  <inpath
0C53 108E0001         (          vfy.asm):01105                   ldy  #$01
0C57 103F89           (          vfy.asm):01106                   os9  I$Read
0C5A E680             (          vfy.asm):01107                   ldb  ,x+
0C5C 2AF3             (          vfy.asm):01108                   bpl  gtbyt
0C5E C47F             (          vfy.asm):01109                   andb #$7F cancel set msb
0C60 E71F             (          vfy.asm):01110                   stb  -1,x
0C62 C60D             (          vfy.asm):01111                   ldb  #$0d add a cr
0C64 E780             (          vfy.asm):01112                   stb  ,x+ to stop writln 
0C66 9638             (          vfy.asm):01113                   lda  <inpath and get edition byte!
0C68 108E0001         (          vfy.asm):01114                   ldy  #$01
0C6C 103F89           (          vfy.asm):01115                   os9  I$Read
                      (          vfy.asm):01116         
                      (          vfy.asm):01117         ***** Edition 16 addition ********************
                      (          vfy.asm):01118         * NAMECMP - controls middle of file
                      (          vfy.asm):01119         * fixit by name function
                      (          vfy.asm):01120         * Entry:  nz in "fixname"
                      (          vfy.asm):01121         *         module name in "cmpname"
                      (          vfy.asm):01122         * Exit:   nz in updthead, zero in fixname if match
                      (          vfy.asm):01123         * match is toupper of input name and saved name
                      (          vfy.asm):01124         * till cr matches zero of saved name
                      (          vfy.asm):01125         * by zeroing fixname, once done, don't waste
                      (          vfy.asm):01126         * more time by continuing to look at following mods
0C6F 0D3C             (          vfy.asm):01127         namecmp   tst  <fixname if a name, it won't be zero
0C71 2724             (          vfy.asm):01128                   beq  noname don't have a name to look for
0C73 3420             (          vfy.asm):01129                   pshs y save it
0C75 31C84C           (          vfy.asm):01130                   leay cmpname,u
0C78 30C86C           (          vfy.asm):01131                   leax mdlname,u
0C7B A680             (          vfy.asm):01132         namecmp1  lda  ,x+ get modules name
0C7D 810D             (          vfy.asm):01133                   cmpa #$0D till the cr we stashed
0C7F 270C             (          vfy.asm):01134                   beq  chkmatch
0C81 8139             (          vfy.asm):01135                   cmpa #'9 this might not be the right cmp!
0C83 2302             (          vfy.asm):01136                   bls  nocaseup
0C85 84DF             (          vfy.asm):01137                   anda #$DF make upcase
0C87 A1A0             (          vfy.asm):01138         nocaseup  cmpa ,y+ against upcased saved name
0C89 260A             (          vfy.asm):01139                   bne  nomatch ifne, no match found here
0C8B 20EE             (          vfy.asm):01140                   bra  namecmp1
0C8D 6DA4             (          vfy.asm):01141         chkmatch  tst  ,y ifeq, was end of saved name!
0C8F 2604             (          vfy.asm):01142                   bne  nomatch
0C91 0C4B             (          vfy.asm):01143                   inc  <updthead
0C93 0F3C             (          vfy.asm):01144                   clr  <fixname zero the snooper flag
0C95 3520             (          vfy.asm):01145         nomatch   puls y
                      (          vfy.asm):01146         
                      (          vfy.asm):01147         * continue on with the previous code
0C97 9E20             (          vfy.asm):01148         noname    ldx  <modhstrt now restore file ptr
0C99 DC22             (          vfy.asm):01149                   ldd  <modlstrt to byte after parity
0C9B 3406             (          vfy.asm):01150                   pshs d in header
0C9D DC2C             (          vfy.asm):01151                   ldd  <modpos
0C9F E3E1             (          vfy.asm):01152                   addd ,s++
0CA1 DD30             (          vfy.asm):01153                   std  <seekls16
0CA3 2402             (          vfy.asm):01154                   bcc  ncri
0CA5 3001             (          vfy.asm):01155                   leax 1,x
0CA7 9F2E             (          vfy.asm):01156         ncri      stx  <seekms16
                      (          vfy.asm):01157         * and fall through to SEEKMOD
                      (          vfy.asm):01158         
                      (          vfy.asm):01159         **************************************
                      (          vfy.asm):01160         * SEEKMOD - positions file r/w pointer
                      (          vfy.asm):01161         * Entry = valid pathnum in inpath
                      (          vfy.asm):01162         * presumes valid size in seekls16,seekms16
0CA9 9638             (          vfy.asm):01163         seekmod   lda  <inpath
0CAB 3440             (          vfy.asm):01164                   pshs u
0CAD 9E2E             (          vfy.asm):01165                   ldx  <seekms16
0CAF DE30             (          vfy.asm):01166                   ldu  <seekls16
0CB1 103F88           (          vfy.asm):01167                   os9  I$Seek
0CB4 3540             (          vfy.asm):01168                   puls u
0CB6 253A             (          vfy.asm):01169                   bcs  oops
0CB8 39               (          vfy.asm):01170                   rts
                      (          vfy.asm):01171         
                      (          vfy.asm):01172         **************************************
                      (          vfy.asm):01173         * READABYT get one byte from the file
0CB9 9638             (          vfy.asm):01174         readabyt  lda  <inpath
0CBB 108E0001         (          vfy.asm):01175                   ldy  #1
0CBF 30C900CC         (          vfy.asm):01176                   leax buffer,u
0CC3 103F89           (          vfy.asm):01177                   os9  I$Read
0CC6 252A             (          vfy.asm):01178                   bcs  oops
0CC8 3410             (          vfy.asm):01179                   pshs x
0CCA 30C82E           (          vfy.asm):01180                   leax seekms16,u
0CCD 17FF40           (          vfy.asm):01181                   lbsr addseek add y to file position
0CD0 3510             (          vfy.asm):01182         readout   puls x but not to modpos just yet!
0CD2 0D34             (          vfy.asm):01183                   tst  <kernal saving it all?
0CD4 271B             (          vfy.asm):01184                   beq  readrts no, go
0CD6 3414             (          vfy.asm):01185                   pshs b,x else save in 64 byte buffer
0CD8 30C9008C         (          vfy.asm):01186                   leax krnlbuf,u
0CDC D636             (          vfy.asm):01187                   ldb  <kbptr
0CDE 3085             (          vfy.asm):01188                   leax b,x
0CE0 A6C900CC         (          vfy.asm):01189                   lda  buffer,u
0CE4 A784             (          vfy.asm):01190                   sta  ,x
0CE6 5C               (          vfy.asm):01191                   incb
0CE7 D736             (          vfy.asm):01192                   stb  <kbptr
0CE9 C140             (          vfy.asm):01193                   cmpb #buffer-krnlbuf
0CEB 10270089         (          vfy.asm):01194                   lbeq helpnbf
0CEF 3514             (          vfy.asm):01195                   puls b,x and restore          
0CF1 39               (          vfy.asm):01196         readrts   rts
                      (          vfy.asm):01197         
0CF2 C1D3             (          vfy.asm):01198         oops      cmpb #E$EOF
0CF4 1027FCAB         (          vfy.asm):01199                   lbeq cleanup
0CF8 160080           (          vfy.asm):01200                   lbra help
                      (          vfy.asm):01201         
                      (          vfy.asm):01202         ***************************************************
                      (          vfy.asm):01203         * GETSIZ - function to get overall size of the file
                      (          vfy.asm):01204         * ENTRY valid pathum in 'inpath'
0CFB 3440             (          vfy.asm):01205         getsiz    pshs u
0CFD 9638             (          vfy.asm):01206                   lda  <inpath
0CFF C602             (          vfy.asm):01207                   ldb  #SS.Size
0D01 103F8D           (          vfy.asm):01208                   os9  I$Getstt
0D04 2575             (          vfy.asm):01209                   bcs  help
0D06 9F26             (          vfy.asm):01210                   stx  <flenms16
0D08 DF28             (          vfy.asm):01211                   stu  <flenls16
0D0A 308DF6D7         (          vfy.asm):01212                   leax flenmsg,pcr
0D0E 108E0011         (          vfy.asm):01213                   ldy  #howmany-flenmsg
0D12 17F8DA           (          vfy.asm):01214                   lbsr showit
0D15 3540             (          vfy.asm):01215         skppr20   puls u it needs U restored
0D17 30C826           (          vfy.asm):01216                   leax flenms16,u so this works
0D1A 9F06             (          vfy.asm):01217                   stx  <numptr
0D1C C604             (          vfy.asm):01218                   ldb  #$04
0D1E 8D0F             (          vfy.asm):01219                   bsr  printit
0D20 308DF619         (          vfy.asm):01220                   leax newln,pcr
0D24 108E0002         (          vfy.asm):01221                   ldy  #$02
0D28 17F8D2           (          vfy.asm):01222                   lbsr newlnfd
0D2B 17F8CF           (          vfy.asm):01223                   lbsr newlnfd
0D2E 39               (          vfy.asm):01224                   rts
                      (          vfy.asm):01225         
                      (          vfy.asm):01226         ************************************
                      (          vfy.asm):01227         * PRINTIT - a front end for hextoasc
                      (          vfy.asm):01228         * ENTRY:  address of src data in numptr
                      (          vfy.asm):01229         *         regs.B=number of bytes to convert
0D2F 3436             (          vfy.asm):01230         printit   pshs d,x,y
0D31 304A             (          vfy.asm):01231                   leax linbuff,u
0D33 3410             (          vfy.asm):01232                   pshs x
0D35 9F08             (          vfy.asm):01233                   stx  <linptr
0D37 1F98             (          vfy.asm):01234                   tfr  b,a save # to print
0D39 48               (          vfy.asm):01235                   lsla dbl it
0D3A 3402             (          vfy.asm):01236                   pshs a
0D3C 6FE2             (          vfy.asm):01237                   clr  ,-s so we can puls y later
0D3E 8D0A             (          vfy.asm):01238                   bsr  hextoasc
0D40 3520             (          vfy.asm):01239                   puls y get y back
0D42 3510             (          vfy.asm):01240                   puls x and linebuff->
0D44 17F8A8           (          vfy.asm):01241                   lbsr showit display the number
0D47 3536             (          vfy.asm):01242                   puls d,x,y
0D49 39               (          vfy.asm):01243                   rts
                      (          vfy.asm):01244         
                      (          vfy.asm):01245         *********************************************
                      (          vfy.asm):01246         * HEXTOASC - routine to print hex numbers
                      (          vfy.asm):01247         * ENTRY regs.b:#of chars to print,
                      (          vfy.asm):01248         * variable location numptr set to src of data
                      (          vfy.asm):01249         * variable location linptr someplace in linbuff
0D4A 9E06             (          vfy.asm):01250         hextoasc  ldx  <numptr defined in host routine
0D4C A680             (          vfy.asm):01251                   lda  ,x+
0D4E 9F06             (          vfy.asm):01252                   stx  <numptr save new ptr to next byte
0D50 3404             (          vfy.asm):01253                   pshs b save your counter
0D52 8D0C             (          vfy.asm):01254                   bsr  hxbtoasc
0D54 9E08             (          vfy.asm):01255                   ldx  <linptr also defined in host routine
0D56 ED81             (          vfy.asm):01256                   std  ,x++
0D58 9F08             (          vfy.asm):01257                   stx  <linptr save new pos in output buffer
0D5A 3504             (          vfy.asm):01258                   puls b
0D5C 5A               (          vfy.asm):01259                   decb
0D5D 26EB             (          vfy.asm):01260                   bne  hextoasc till hex num all converted!
0D5F 39               (          vfy.asm):01261                   rts  and go print it
                      (          vfy.asm):01262         
                      (          vfy.asm):01263         *************************************************************
                      (          vfy.asm):01264         * routine written up in the Rainbow  (11/92) by Tim Kientzle.
                      (          vfy.asm):01265         * It will convert the value passed in the A register to a
                      (          vfy.asm):01266         * pair of ascii characters in A:B which are the directly
                      (          vfy.asm):01267         * printable ASCII representations of the original contents
                      (          vfy.asm):01268         * of A. Load A with byte of src num, call, store A nd B in
                      (          vfy.asm):01269         * order in the print buffer on return.  Neat routine Tim!
                      (          vfy.asm):01270         * I shrank it by 4 lines & 6 bytes though (GH).
0D60 1F89             (          vfy.asm):01271         hxbtoasc  tfr  a,b Make copy of a
0D62 840F             (          vfy.asm):01272                   anda #$0F mask off lower digit
0D64 8D06             (          vfy.asm):01273                   bsr  nbltoasc
0D66 1E89             (          vfy.asm):01274                   exg  a,b stash in b, get a back
0D68 44               (          vfy.asm):01275                   lsra getting high nibble
0D69 44               (          vfy.asm):01276                   lsra into position to
0D6A 44               (          vfy.asm):01277                   lsra convert it
0D6B 44               (          vfy.asm):01278                   lsra
0D6C 8B90             (          vfy.asm):01279         nbltoasc  adda #$90 repeat for high nibble
0D6E 19               (          vfy.asm):01280                   daa  generate carry if a>9
0D6F 8940             (          vfy.asm):01281                   adca #$40
0D71 19               (          vfy.asm):01282                   daa
0D72 39               (          vfy.asm):01283                   rts returns a:b=two hexidecimal characters
                      (          vfy.asm):01284         
0D73 53               (          vfy.asm):01285         wphlp     comb
0D74 C6D6             (          vfy.asm):01286                   ldb  #$D6 no permission to write to it
0D76 2003             (          vfy.asm):01287                   bra  help
0D78 53               (          vfy.asm):01288         helpnbf   comb
0D79 C6BF             (          vfy.asm):01289                   ldb #$BF E$BufferToDamnSmall!
                      (          vfy.asm):01290         
                      (          vfy.asm):01291         ***********************************
                      (          vfy.asm):01292         * HELP an error exit with prompting
                      (          vfy.asm):01293         * Entry   error in B,carry set 
0D7B 3405             (          vfy.asm):01294         help      pshs b,cc save stats for exit
0D7D 0C44             (          vfy.asm):01295                   inc  <verbose make sure the msg gets out
0D7F 308DF28E         (          vfy.asm):01296                   leax helpmsg,pcr
0D83 108E029C         (          vfy.asm):01297                   ldy  #msgsiz-helpmsg
0D87 17F865           (          vfy.asm):01298                   lbsr showit 
0D8A 3505             (          vfy.asm):01299                   puls b,cc recover error
0D8C 103F06           (          vfy.asm):01300         out       os9  F$Exit and report the error
                      (          vfy.asm):01301         
                      (          vfy.asm):01302         *************************************
                      (          vfy.asm):01303         * OPENOUT - opens path for std module
                      (          vfy.asm):01304         *
0D8F 8603             (          vfy.asm):01305         openout   lda  #READ.+WRITE.
0D91 C603             (          vfy.asm):01306                   ldb  #READ.+WRITE.
0D93 30C86C           (          vfy.asm):01307                   leax mdlname,u point at name
0D96 103F83           (          vfy.asm):01308                   os9  I$Create and attempt to make it
0D99 240E             (          vfy.asm):01309                   bcc  outhead made it ok, go
0D9B C1DA             (          vfy.asm):01310                   cmpb #218 oops, what error
0D9D 26DC             (          vfy.asm):01311                   bne  help nope, not already exist, go
0D9F 8603             (          vfy.asm):01312                   lda  #READ.+WRITE.
0DA1 30C86C           (          vfy.asm):01313                   leax mdlname,u
0DA4 103F84           (          vfy.asm):01314                   os9  I$Open
0DA7 25D2             (          vfy.asm):01315                   bcs  help
0DA9 9739             (          vfy.asm):01316         outhead   sta  <outpath save pathnum
0DAB 30C812           (          vfy.asm):01317                   leax modid1,u
0DAE 108E000E         (          vfy.asm):01318                   ldy  #14 write (repaired) module header w/exec & datsiz
0DB2 103F8A           (          vfy.asm):01319                   os9  I$Write
0DB5 25C4             (          vfy.asm):01320                   bcs  help
0DB7 39               (          vfy.asm):01321                   rts thats all for now, folks
                      (          vfy.asm):01322         
                      (          vfy.asm):01323         *****************************************
                      (          vfy.asm):01324         * OPENKERN - to open extra bytes files
                      (          vfy.asm):01325         * pretty much self-contained
0DB8 3413             (          vfy.asm):01326         openkern  pshs cc,a,x
0DBA 9634             (          vfy.asm):01327                   lda  <kernal
0DBC 2732             (          vfy.asm):01328                   beq  kerrts
0DBE 8130             (          vfy.asm):01329                   cmpa #$30 head or tail?
0DC0 2631             (          vfy.asm):01330                   bne  opentail
0DC2 308DF4E7         (          vfy.asm):01331                   leax advise0,pcr
0DC6 108E001F         (          vfy.asm):01332                   ldy  #krnlhsz-advise0-1
0DCA 17F822           (          vfy.asm):01333                   lbsr showit
0DCD D636             (          vfy.asm):01334                   ldb  <kbptr
0DCF 231F             (          vfy.asm):01335                   bls  kerrts if zero or less, go
0DD1 308DF4ED         (          vfy.asm):01336                   leax kernal0,pcr
0DD5 8603             (          vfy.asm):01337         kopen     lda  #UPDAT.
0DD7 C603             (          vfy.asm):01338                   ldb  #UPDAT.
0DD9 103F83           (          vfy.asm):01339                   os9  I$Create
0DDC 240E             (          vfy.asm):01340                   bcc  kcont
0DDE C1DA             (          vfy.asm):01341                   cmpb #218 if exists, its ok
0DE0 2699             (          vfy.asm):01342                   bne  help else go yelp
0DE2 2401             (          vfy.asm):01343                   bcc  kopen1
0DE4 53               (          vfy.asm):01344                   comb to clear that damned error
0DE5 C603             (          vfy.asm):01345         kopen1    ldb  #UPDAT.
0DE7 103F84           (          vfy.asm):01346                   os9  I$Open
0DEA 258F             (          vfy.asm):01347                   bcs  help 
0DEC 973A             (          vfy.asm):01348         kcont     sta  <kpath
0DEE 0C34             (          vfy.asm):01349         krts      inc  <kernal we been here, tally it
0DF0 3513             (          vfy.asm):01350         kerrts    puls cc,a,x
0DF2 39               (          vfy.asm):01351                   rts
                      (          vfy.asm):01352         
0DF3 2401             (          vfy.asm):01353         opentail  bcc  opntail
0DF5 53               (          vfy.asm):01354                   comb carry set?
0DF6 8131             (          vfy.asm):01355         opntail   cmpa #$31 skip boot, os9p1
0DF8 26F4             (          vfy.asm):01356                   bne  krts
0DFA 308DF4CF         (          vfy.asm):01357                   leax advise1,pcr
0DFE 108E001D         (          vfy.asm):01358                   ldy  #krnltsz-advise1-1
0E02 17F7EA           (          vfy.asm):01359                   lbsr showit
0E05 308DF4D7         (          vfy.asm):01360                   leax kernal1,pcr
0E09 20CA             (          vfy.asm):01361                   bra  kopen
                      (          vfy.asm):01362         
                      (          vfy.asm):01363         ***********************************
                      (          vfy.asm):01364         * CLSKRNL - write & close extras
                      (          vfy.asm):01365         * valid size in kbptrms*256+kbptr
0E0B 3436             (          vfy.asm):01366         clskrnl   pshs d,x,y
0E0D 0D34             (          vfy.asm):01367                   tst  <kernal
0E0F 2762             (          vfy.asm):01368                   beq  clsoops shouldn't 'av come here
0E11 963A             (          vfy.asm):01369                   lda  <kpath
0E13 109E35           (          vfy.asm):01370                   ldy  <kbptrms size to write
0E16 30C9008C         (          vfy.asm):01371                   leax krnlbuf,u saved data
0E1A 103F8A           (          vfy.asm):01372                   os9  I$Write
0E1D 1025FF5A         (          vfy.asm):01373                   lbcs  help
0E21 963A             (          vfy.asm):01374                   lda  <kpath
0E23 C605             (          vfy.asm):01375                   ldb  #$05 get file pos
0E25 3450             (          vfy.asm):01376                   pshs x,u
0E27 103F8D           (          vfy.asm):01377                   os9  I$GetStt
0E2A 1025FF4D         (          vfy.asm):01378                   lbcs  help
0E2E C602             (          vfy.asm):01379                   ldb  #$02 set as new size
0E30 103F8E           (          vfy.asm):01380                   os9  I$SetStt
0E33 1025FF44         (          vfy.asm):01381                   lbcs  help
0E37 DF35             (          vfy.asm):01382                   stu  <kbptrms
0E39 3550             (          vfy.asm):01383                   puls x,u
0E3B 103F8F           (          vfy.asm):01384                   os9  I$Close
0E3E 1025FF39         (          vfy.asm):01385                   lbcs help
0E42 30C835           (          vfy.asm):01386                   leax kbptrms,u point at filesize data
0E45 9F06             (          vfy.asm):01387                   stx  <numptr save the filesize
0E47 308DF4A0         (          vfy.asm):01388                   leax advlen,pcr now point at "with a size of $"
0E4B 108E0013         (          vfy.asm):01389                   ldy  #advend-advlen get length to write
0E4F 17F79D           (          vfy.asm):01390                   lbsr showit
0E52 C602             (          vfy.asm):01391                   ldb  #$02
0E54 17FED8           (          vfy.asm):01392                   lbsr printit
0E57 308DF4A3         (          vfy.asm):01393                   leax advend,pcr
0E5B 108E000F         (          vfy.asm):01394                   ldy  #hednamsg-advend
0E5F 17F78D           (          vfy.asm):01395                   lbsr showit
0E62 308DF4D7         (          vfy.asm):01396                   leax newln,pcr
0E66 108E0002         (          vfy.asm):01397                   ldy  #2
0E6A 17F790           (          vfy.asm):01398                   lbsr newlnfd
0E6D 0F3A             (          vfy.asm):01399                   clr  <kpath kill pathnum
0E6F 0F36             (          vfy.asm):01400                   clr  <kbptr reset
0E71 0F35             (          vfy.asm):01401                   clr  <kbptrms
0E73 3536             (          vfy.asm):01402         clsoops   puls d,x,y
0E75 39               (          vfy.asm):01403                   rts
0E76 CC5B2E           (          vfy.asm):01404                   emod
     0E79             (          vfy.asm):01405         len       equ  *
                      (          vfy.asm):01406                   end
