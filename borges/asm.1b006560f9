                      (/home/strick/6809):00001         ********************************************************************
                      (/home/strick/6809):00002         * Asm - 6809/6309 Assembler
                      (/home/strick/6809):00003         *
                      (/home/strick/6809):00004         * ASM V1.6 - Microware version - 6309 instruction assembly by
                      (/home/strick/6809):00005         *  L. Curtis Boyle
                      (/home/strick/6809):00006         *
                      (/home/strick/6809):00007         * Obtained by Boisy Pitre from L. Curtis Boyle on 10/12/2002
                      (/home/strick/6809):00008         *
                      (/home/strick/6809):00009         * $Id$
                      (/home/strick/6809):00010         *
                      (/home/strick/6809):00011         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/home/strick/6809):00012         * Comment
                      (/home/strick/6809):00013         * ------------------------------------------------------------------
                      (/home/strick/6809):00014         *   6      1999/05/11  Boisy G. Pitre
                      (/home/strick/6809):00015         * Made compliant with 1900-2155.
                      (/home/strick/6809):00016         *
                      (/home/strick/6809):00017         *   7      2003/06/27  Rodney V. Hamilton
                      (/home/strick/6809):00018         * Added 6309 bitfield instructions.
                      (/home/strick/6809):00019         *
                      (/home/strick/6809):00020         *   8      2003/07/28  Rodney V. Hamilton
                      (/home/strick/6809):00021         * Enabled underscore and lowercase in symbols.
                      (/home/strick/6809):00022         *
                      (/home/strick/6809):00023         *   9      2004/03/20  Rodney V. Hamilton
                      (/home/strick/6809):00024         * Added support for LDQ immediate, TFM register modes
                      (/home/strick/6809):00025         * Copied the W indexed addressing code from ASM6309
                      (/home/strick/6809):00026         * 0-register bug fixed, TFR now accepts R16->R8 xfers
                      (/home/strick/6809):00027         * Added new IFDEF/IFNDF conditionals
                      (/home/strick/6809):00028         *
                      (/home/strick/6809):00029         *  10      2004/06/15  Rodney V. Hamilton
                      (/home/strick/6809):00030         * Arbitrary-length labels allowed. (first 8 chars must be unique)
                      (/home/strick/6809):00031         * Listing buffer overruns prevented. Opt W linewidth now 132 max.
                      (/home/strick/6809):00032         * 6309 Reg2Reg ops now allow R16->R8 xfers. (sets warning flag)
                      (/home/strick/6809):00033         * Listing fields spaced correctly, comment field auto-aligned.
                      (/home/strick/6809):00034         *
                      (/home/strick/6809):00035         *  10r1    2004/07/31  Rodney V. Hamilton
                      (/home/strick/6809):00036         * Added "@" as valid symbol char. (but no local label support)
                      (/home/strick/6809):00037         
                      (/home/strick/6809):00038                  nam   Asm
                      (/home/strick/6809):00039                  ttl   6809/6309 Assembler
                      (/home/strick/6809):00040         
                      (/home/strick/6809):00041                  ifp1
                      (/home/strick/6809):00042                  use   defsfile
                      (         defsfile):00001                   use    ../defsfile
     0003             (      ../defsfile):00001         Level    equ   3
                      (      ../defsfile):00002         
                      (      ../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
                      (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
     0080             (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
     00FE             (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0004                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
002A                  (            os9.d):00820         DefIOSiz       EQU       12
002A                  (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
002A                  (            os9.d):00824         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00832         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00835         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00849                        RMB       $40-.               unused
002A                  (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
002A                  (            os9.d):00855         SysState       EQU       %10000000
002A                  (            os9.d):00856         TimSleep       EQU       %01000000
002A                  (            os9.d):00857         TimOut         EQU       %00100000
002A                  (            os9.d):00858         ImgChg         EQU       %00010000
002A                  (            os9.d):00859         Condem         EQU       %00000010
002A                  (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
     0010             (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0000                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00877         P$User         RMB       2                   User Index
000A                  (            os9.d):00878         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00879         P$Age          RMB       1                   Age
000C                  (            os9.d):00880         P$State        RMB       1                   Status
000D                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00892                        RMB       $20-.               unused
0020                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00905         P$Alarm        RMB       6
00C9                  (            os9.d):00906                        RMB       $200-.              Local stack
     0200             (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
     0080             (            os9.d):00913         SysState       EQU       %10000000
     0040             (            os9.d):00914         TimSleep       EQU       %01000000
     0020             (            os9.d):00915         TimOut         EQU       %00100000
     0010             (            os9.d):00916         ImgChg         EQU       %00010000
     0008             (            os9.d):00917         Suspend        EQU       %00001000
     0002             (            os9.d):00918         Condem         EQU       %00000010
     0001             (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     000D             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     000B             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
     0003             (            os9.d):01040         R$E            EQU       3                   E Accumulator
     0004             (            os9.d):01041         R$F            EQU       4                   F Accumulator
     0003             (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
     0001             (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
     0005             (            os9.d):01044         R$DP           EQU       5                   Direct Page register
     0006             (            os9.d):01045         R$X            EQU       6                   X Index register
     0008             (            os9.d):01046         R$Y            EQU       8                   Y Index register
     000A             (            os9.d):01047         R$U            EQU       10                  User Stack register
     000C             (            os9.d):01048         R$PC           EQU       12                  Program Counter register
     000E             (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
0005                  (            os9.d):01051         R$DP           EQU       3                   Direct Page register
0005                  (            os9.d):01052         R$X            EQU       4                   X Index register
0005                  (            os9.d):01053         R$Y            EQU       6                   Y Index register
0005                  (            os9.d):01054         R$U            EQU       8                   User Stack register
0005                  (            os9.d):01055         R$PC           EQU       10                  Program Counter register
0005                  (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
00FF                  (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
00FF                  (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
     003B             (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
     ED00             (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
     2000             (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
     0040             (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
     0002             (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
     6000             (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
     0660             (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
     0661             (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (      ../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
                      (            scf.d):00222         
                      (            scf.d):00223         * PD.BAU definitions
                      (            scf.d):00224         *
                      (            scf.d):00225         * Baud rate
     0000             (            scf.d):00226         B110           EQU       %00000000
     0001             (            scf.d):00227         B300           EQU       %00000001
     0002             (            scf.d):00228         B600           EQU       %00000010
     0003             (            scf.d):00229         B1200          EQU       %00000011
     0004             (            scf.d):00230         B2400          EQU       %00000100
     0005             (            scf.d):00231         B4800          EQU       %00000101
     0006             (            scf.d):00232         B9600          EQU       %00000110
     0007             (            scf.d):00233         B19200         EQU       %00000111
     0008             (            scf.d):00234         B38400         EQU       %00001000
     0009             (            scf.d):00235         B57600         EQU       %00001001
     000A             (            scf.d):00236         B115200        EQU       %00001010
                      (            scf.d):00237         * Word size
     0000             (            scf.d):00238         WORD8          EQU       %00000000
     0020             (            scf.d):00239         WORD7          EQU       %00100000
                      (            scf.d):00240         * Stop bits
     0000             (            scf.d):00241         STOP1          EQU       %00000000
     0010             (            scf.d):00242         STOP2          EQU       %00010000
                      (            scf.d):00243         
                      (            scf.d):00244                        ENDC      
                      (      ../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (      ../defsfile):00006                  use   coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         *************************************************
                      (           coco.d):00148         *
                      (           coco.d):00149         * NitrOS-9 Level 1 Section
                      (           coco.d):00150         *
                      (           coco.d):00151         *************************************************
                      (           coco.d):00152         
0004                  (           coco.d):00153         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE      
                      (           coco.d):00156         
                      (           coco.d):00157         *************************************************
                      (           coco.d):00158         *
                      (           coco.d):00159         * NitrOS-9 Level 2 Section
                      (           coco.d):00160         *
                      (           coco.d):00161         *************************************************
                      (           coco.d):00162         
                      (           coco.d):00163         ****************************************
                      (           coco.d):00164         * Dynamic Address Translator Definitions
                      (           coco.d):00165         *
     0008             (           coco.d):00166         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00167         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00168         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00169         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00170         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00171         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00172         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00173         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00174         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00175         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00176         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00177         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00178         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00179         IOBlock        EQU       $3F
     003F             (           coco.d):00180         ROMBlock       EQU       $3F
     007F             (           coco.d):00181         IOAddr         EQU       $7F
     0001             (           coco.d):00182         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00183         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00184         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00185         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00186         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00187         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00188         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00189         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00190         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00191         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00192         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00193         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00194         
                      (           coco.d):00195         ***************************
                      (           coco.d):00196         * Color Computer 3 Specific
                      (           coco.d):00197         *
     0001             (           coco.d):00198         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00199         
                      (           coco.d):00200         ********************
                      (           coco.d):00201         * Hardware addresses
                      (           coco.d):00202         *
     FF00             (           coco.d):00203         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00204         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00205         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00206         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00207         
     0007             (           coco.d):00208         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00209         
                      (           coco.d):00210                        ENDC
                      (           coco.d):00211                        
                      (           coco.d):00212                        ENDC      
                      (           coco.d):00213         
                      (      ../defsfile):00007                  use   cocovtio.d
                      (       cocovtio.d):00001                        IFNE      COCOVTIO.D-1
     0001             (       cocovtio.d):00002         COCOVTIO.D     SET       1
                      (       cocovtio.d):00003         
                      (       cocovtio.d):00004                        IFEQ      Level-1
                      (       cocovtio.d):00005         
                      (       cocovtio.d):00006         ********************************************************************
                      (       cocovtio.d):00007         * VTIODefs - Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00008         *
                      (       cocovtio.d):00009         * $Id$
                      (       cocovtio.d):00010         *
                      (       cocovtio.d):00011         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00012         * Comment
                      (       cocovtio.d):00013         * ------------------------------------------------------------------
                      (       cocovtio.d):00014         *          2004/11/29  P.Harvey-Smith.
                      (       cocovtio.d):00015         * Added symbolic defines for bits in V.CoLoad.
                      (       cocovtio.d):00016         *
                      (       cocovtio.d):00017         *          2004/12/02  P.Harvey-Smith.
                      (       cocovtio.d):00018         * Moved over all variables from co51.asm
                      (       cocovtio.d):00019         *
                      (       cocovtio.d):00020         *          2005/04/09  P.Harvey-Smith.
                      (       cocovtio.d):00021         * Decoded rest of the CoHR memory locations.
                      (       cocovtio.d):00022         *
                      (       cocovtio.d):00023         *              2005/04/24  P.Harvey-Smith.
                      (       cocovtio.d):00024         * Added variables for cursor flash, currently only implemented in co51
                      (       cocovtio.d):00025         *
                      (       cocovtio.d):00026                        NAM       VTIODefs  
                      (       cocovtio.d):00027                        TTL       Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00028         
                      (       cocovtio.d):00029         ********************
                      (       cocovtio.d):00030         * VTIO Static Memory
                      (       cocovtio.d):00031         *
                      (       cocovtio.d):00032                        ORG       V.SCF
0004                  (       cocovtio.d):00033         V.ScrnA        RMB       2                   (2) screen start address in system memory
0004                  (       cocovtio.d):00034         V.ScrnE        RMB       2                   (2) address of end of screen
0004                  (       cocovtio.d):00035         V.CrsrA        RMB       1                   (2) cursor address
0004                  (       cocovtio.d):00036         V.CrsAL        RMB       1                   cursor address low
0004                  (       cocovtio.d):00037         V.CChar        RMB       1                   value of character under cursor
0004                  (       cocovtio.d):00038         V.Mode         RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0004                  (       cocovtio.d):00039         V.NGChr        RMB       1                   number of additional characters to get
0004                  (       cocovtio.d):00040         V.RTAdd        RMB       2                   (2) return address after getting characters
0004                  (       cocovtio.d):00041         V.NChar        RMB       1                   character to process
0004                  (       cocovtio.d):00042         V.NChr2        RMB       1                   and the next one
                      (       cocovtio.d):00043                        RMB       1
0004                  (       cocovtio.d):00044         V.Chr1         RMB       1                   same as under cursor character
0004                  (       cocovtio.d):00045         V.CColr        RMB       1                   cursor color
0004                  (       cocovtio.d):00046         V.Col          RMB       1                   number of columns for this screen
0004                  (       cocovtio.d):00047         V.Row          RMB       1                   number of rows
0004                  (       cocovtio.d):00048         V.Alpha        RMB       1                   0 when in alpha mode
0004                  (       cocovtio.d):00049         V.PIA1         RMB       1                   PIA1Base value
0004                  (       cocovtio.d):00050         V.Rdy          RMB       1                   device ready (see SS.DStat 0=not ready)
0004                  (       cocovtio.d):00051         V.CFlg1        RMB       1                   VDG display code values
0004                  (       cocovtio.d):00052         V.SBAdd        RMB       2                   (2) address of block screen is in
0004                  (       cocovtio.d):00053         V.GBuff        RMB       2                   allocation for graphics buffers (block#)
0004                  (       cocovtio.d):00054         V.AGBuf        RMB       4                   (2) additional graphics buffer
0004                  (       cocovtio.d):00055         V.FFMem        RMB       2                   Flood fill alloc'ed mem
0004                  (       cocovtio.d):00056         V.FFSPt        RMB       2                   Flood fill current stack pointer
0004                  (       cocovtio.d):00057         V.FFSTp        RMB       1                   Flood fill stack top
0004                  (       cocovtio.d):00058         V.FF6          RMB       1                   flood fill flag
0004                  (       cocovtio.d):00059         V.FFFlag       RMB       1                   ??
0004                  (       cocovtio.d):00060         V.MTabl        RMB       2                   (2) address of mask table for pixels in byte
0004                  (       cocovtio.d):00061         V.PixBt        RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0004                  (       cocovtio.d):00062         V.GCrsX        RMB       1                   graphics cursor X value
0004                  (       cocovtio.d):00063         V.GCrsY        RMB       1                   graphics cursor Y
0004                  (       cocovtio.d):00064         V.Msk1         RMB       1                   mask byte 1
0004                  (       cocovtio.d):00065         V.Msk2         RMB       1                   mask byte 2 (00,55,AA,FF)
0004                  (       cocovtio.d):00066         V.MCol         RMB       1                   color? (C003,8001)
0004                  (       cocovtio.d):00067         V.4A           RMB       1
0004                  (       cocovtio.d):00068         V.PMask        RMB       1                   pixel mask for colors (i.e. $55, $CC etc)
0004                  (       cocovtio.d):00069         V.4C           RMB       1
0004                  (       cocovtio.d):00070         V.4D           RMB       1
0004                  (       cocovtio.d):00071         V.4E           RMB       1
0004                  (       cocovtio.d):00072         V.4F           RMB       1
0004                  (       cocovtio.d):00073         V.Caps         RMB       1                   caps lock info: $00=lower $FF=upper
0004                  (       cocovtio.d):00074         V.ClkCnt       RMB       1                   clock count ??
0004                  (       cocovtio.d):00075         V.WrChr        RMB       1                   character to write
0004                  (       cocovtio.d):00076         V.CurCo        RMB       1                   current CO-module in use
                      (       cocovtio.d):00077         * start of CoWP-specific static memory
0004                  (       cocovtio.d):00078         V.Co80X        RMB       1                   V.54
0004                  (       cocovtio.d):00079         V.Co80Y        RMB       1                   V.55
0004                  (       cocovtio.d):00080         V.ColPtr       RMB       1                   V.56
0004                  (       cocovtio.d):00081         V.RowPtr       RMB       1                   V.57
0004                  (       cocovtio.d):00082         V.C80X         RMB       1                   CoWP X position
0004                  (       cocovtio.d):00083         V.C80Y         RMB       1                   CoWP Y position
0004                  (       cocovtio.d):00084         V.Invers       RMB       1
                      (       cocovtio.d):00085         * end of CoWP-specific static memory
0004                  (       cocovtio.d):00086         V.DspVct       RMB       2                   vector to display screen
0004                  (       cocovtio.d):00087         V.CnvVct       RMB       2                   vector to X/Y to address conversion
0004                  (       cocovtio.d):00088         V.LKeyCd       RMB       1                   last key code
0004                  (       cocovtio.d):00089         V.2Key1        RMB       1                   2nd Key 1
0004                  (       cocovtio.d):00090         V.2Key2        RMB       1                   2nd Key 2
0004                  (       cocovtio.d):00091         V.2Key3        RMB       1                   2nd Key 3
0004                  (       cocovtio.d):00092         V.Key1         RMB       1                   Key 1
0004                  (       cocovtio.d):00093         V.Key2         RMB       1                   Key 2
0004                  (       cocovtio.d):00094         V.Key3         RMB       1                   Key 3
0004                  (       cocovtio.d):00095         V.ShftDn       RMB       1                   SHIFT/CTRL state
0004                  (       cocovtio.d):00096         V.CtrlDn       RMB       1                   CTRL key down
0004                  (       cocovtio.d):00097         V.KeyFlg       RMB       1                   key flag
0004                  (       cocovtio.d):00098         V.AltDwn       RMB       1                   ALT key down
0004                  (       cocovtio.d):00099         V.KySns        RMB       1                   key sense flags
0004                  (       cocovtio.d):00100         V.KySame       RMB       1                   key same as last flag
0004                  (       cocovtio.d):00101         V.KySnsF       RMB       1                   key sense flag
0004                  (       cocovtio.d):00102         V.Spcl         RMB       1
0004                  (       cocovtio.d):00103         V.KTblLC       RMB       1                   key table entry #
0004                  (       cocovtio.d):00104         V.6F           RMB       1                   ???
0004                  (       cocovtio.d):00105         V.COLoad       RMB       1                   CO-module loaded flags
0004                  (       cocovtio.d):00106         V.CFlag        RMB       1                   true lowercase flag $10=true, $00=false
0004                  (       cocovtio.d):00107         V.GrfDrvE      RMB       2                   GrfDrv entry point
0004                  (       cocovtio.d):00108         V.CoVDGE       RMB       2                   CoVDG entry point
0004                  (       cocovtio.d):00109         V.CoWPE        RMB       2                   CoWP entry point
0004                  (       cocovtio.d):00110         V.CoHRE        RMB       2                   CoHR entry point
                      (       cocovtio.d):00111         
0004                  (       cocovtio.d):00112         V.Flash        RMB       2                   Cursor flash routine address.
0004                  (       cocovtio.d):00113         v.FlashCount   RMB       1                   Cursor flash count
0004                  (       cocovtio.d):00114         V.NoFlash      RMB       1                   When this is non-zero do not flash cursor
                      (       cocovtio.d):00115         
                      (       cocovtio.d):00116         * CoHR vars
                      (       cocovtio.d):00117         
0004                  (       cocovtio.d):00118         V.51ScrnA      RMB       2                   * Screen address.
0004                  (       cocovtio.d):00119         V.51XPos       RMB       1                   * X co-ordinate
0004                  (       cocovtio.d):00120         V.51YPos       RMB       1                   * Y co-ordinate
0004                  (       cocovtio.d):00121         V.51EscSeq     RMB       1                   * In escape sequence
0004                  (       cocovtio.d):00122         V.51ReverseFlag RMB       1                   * Reverse video flag
0004                  (       cocovtio.d):00123         V.51UnderlineFlag RMB       1                   * Underline flag
0004                  (       cocovtio.d):00124         V.51CtrlDispatch RMB       2                   * Ctrl char dispatch address, currently processing
0004                  (       cocovtio.d):00125         V.51BytePixOffset RMB       1                   * byte offset in screen line, of character X position        
0004                  (       cocovtio.d):00126         V.51OldCursorPosX RMB       1                   * Position of old cursor before update        
0004                  (       cocovtio.d):00127         V.51OldCursorPosY RMB       1
0004                  (       cocovtio.d):00128         V.51CursorChanged RMB       1                   * Has cursor position changed ? 1=yes,0=no
0004                  (       cocovtio.d):00129         V.51CursorOn   RMB       1                   * Is cursor on ? 1=yes 0=no                         
0004                  (       cocovtio.d):00130         V.51XORFlag    RMB       1                   * and data to screen (0) or Xor (1)                       
0004                  (       cocovtio.d):00131         V.51ScreenMask1 RMB       1                   * screen masks for drawing characters on screen         
0004                  (       cocovtio.d):00132         V.51ScreenMask2 RMB       1
                      (       cocovtio.d):00133         * End of CoHR vars
                      (       cocovtio.d):00134         **** Note these have to come at the end of the defs, or the keyboard ****
                      (       cocovtio.d):00135         **** code can clobber variables defined after these !                ****
0004                  (       cocovtio.d):00136         V.IBufH        RMB       1                   input buffer head
0004                  (       cocovtio.d):00137         V.IBufT        RMB       1                   input buffer tail
0004                  (       cocovtio.d):00138         V.InBuf        RMB       1                   input buffer ptr
0004                  (       cocovtio.d):00139         V.51End        RMB       1
                      (       cocovtio.d):00140                        RMB       250-.
0004                  (       cocovtio.d):00141         V.Last         EQU       .
                      (       cocovtio.d):00142         
                      (       cocovtio.d):00143         
                      (       cocovtio.d):00144         * Unknown for now
                      (       cocovtio.d):00145         *VD.FFMem rmb   2  (2) bottom of stack for flood fill
                      (       cocovtio.d):00146         *VD.FFSPt rmb   2  (2) flood fill stack pointer
                      (       cocovtio.d):00147         *VD.FFSTp rmb   2  (2) flood fill stack top pointer
                      (       cocovtio.d):00148         *VD.FF6   rmb   1   flood fill flag
                      (       cocovtio.d):00149         *VD.MCol2 rmb   1  color
                      (       cocovtio.d):00150         *VD.FF1   rmb   1  data for flood fill
                      (       cocovtio.d):00151         *VD.FF2   rmb   1  data for flood fill
                      (       cocovtio.d):00152         *VD.FFMsk rmb   1  flood fill mask
                      (       cocovtio.d):00153         *VD.FFFlg rmb   1  flood fill flag
                      (       cocovtio.d):00154         *VD.Palet rmb   16 (16) current palette values
                      (       cocovtio.d):00155         *VD.PlFlg rmb   1  initialized to $08 by L00DB, and then unused!
                      (       cocovtio.d):00156         
                      (       cocovtio.d):00157         *
                      (       cocovtio.d):00158         * Defs for V.COLoad flags.
                      (       cocovtio.d):00159         * 
                      (       cocovtio.d):00160         
0004                  (       cocovtio.d):00161         ModCoVDG       EQU       %00000010           CoVDG, Built-in VDG 32x16.
0004                  (       cocovtio.d):00162         ModCoWP        EQU       %00000100           CoWP, WordPak, 80x25
0004                  (       cocovtio.d):00163         ModCoHR        EQU       %00001000           CoHR, PMODE 4 51x25 text
                      (       cocovtio.d):00164         
                      (       cocovtio.d):00165         *
                      (       cocovtio.d):00166         * Defs for cursor flash counter
                      (       cocovtio.d):00167         *
                      (       cocovtio.d):00168         
0004                  (       cocovtio.d):00169         CFlash50hz     EQU       25                  * 50Hz flash counter
0004                  (       cocovtio.d):00170         CFlash60Hz     EQU       30                  * 60Hz flash counter
                      (       cocovtio.d):00171         
                      (       cocovtio.d):00172                        ELSE
                      (       cocovtio.d):00173                        
                      (       cocovtio.d):00174         ********************************************************************
                      (       cocovtio.d):00175         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00176         *
                      (       cocovtio.d):00177         * $Id$
                      (       cocovtio.d):00178         *
                      (       cocovtio.d):00179         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00180         * Comment
                      (       cocovtio.d):00181         * ------------------------------------------------------------------
                      (       cocovtio.d):00182         *          2004/07/18  Boisy G. Pitre
                      (       cocovtio.d):00183         * Started from systype
                      (       cocovtio.d):00184         
                      (       cocovtio.d):00185                        NAM       VTIODefs
                      (       cocovtio.d):00186                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00187         
                      (       cocovtio.d):00188         ****************
                      (       cocovtio.d):00189         * Window Devices
                      (       cocovtio.d):00190         *
                      (       cocovtio.d):00191                        ORG       $FF9F
FF9F                  (       cocovtio.d):00192         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (       cocovtio.d):00193         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (       cocovtio.d):00194         A.W1           RMB       1                   $FFA1
FFA2                  (       cocovtio.d):00195         A.W2           RMB       1                   $FFA2
FFA3                  (       cocovtio.d):00196         A.W3           RMB       1                   $FFA3
FFA4                  (       cocovtio.d):00197         A.W4           RMB       1                   $FFA4
FFA5                  (       cocovtio.d):00198         A.W5           RMB       1                   $FFA5
FFA6                  (       cocovtio.d):00199         A.W6           RMB       1                   $FFA6
FFA7                  (       cocovtio.d):00200         A.W7           RMB       1                   $FFA7
FFA8                  (       cocovtio.d):00201         A.W8           RMB       1                   $FFA8
FFA9                  (       cocovtio.d):00202         A.W9           RMB       1                   $FFA9
FFAA                  (       cocovtio.d):00203         A.W10          RMB       1                   $FFAA
FFAB                  (       cocovtio.d):00204         A.W11          RMB       1                   $FFAB
FFAC                  (       cocovtio.d):00205         A.W12          RMB       1                   $FFAC
FFAD                  (       cocovtio.d):00206         A.W13          RMB       1                   $FFAD
FFAE                  (       cocovtio.d):00207         A.W14          RMB       1                   $FFAE
FFAF                  (       cocovtio.d):00208         A.W15          RMB       1                   $FFAF
                      (       cocovtio.d):00209         
                      (       cocovtio.d):00210         **********************************
                      (       cocovtio.d):00211         * Pointer Device Packet Definition
                      (       cocovtio.d):00212         *
                      (       cocovtio.d):00213                        ORG       0
0000                  (       cocovtio.d):00214         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (       cocovtio.d):00215         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (       cocovtio.d):00216         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (       cocovtio.d):00217                        RMB       2                   reserved
0005                  (       cocovtio.d):00218         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (       cocovtio.d):00219         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (       cocovtio.d):00220         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (       cocovtio.d):00221         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (       cocovtio.d):00222         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (       cocovtio.d):00223         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (       cocovtio.d):00224         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (       cocovtio.d):00225         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (       cocovtio.d):00226         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (       cocovtio.d):00227         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (       cocovtio.d):00228                        RMB       2                   Reserved
0012                  (       cocovtio.d):00229         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (       cocovtio.d):00230         Pt.BDY         RMB       2                   Button down Y value
0016                  (       cocovtio.d):00231         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (       cocovtio.d):00232         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (       cocovtio.d):00233         Pt.AcX         RMB       2                   Actual X Value
001A                  (       cocovtio.d):00234         Pt.AcY         RMB       2                   Actual Y Value
001C                  (       cocovtio.d):00235         Pt.WRX         RMB       2                   Window Relative X
001E                  (       cocovtio.d):00236         Pt.WRY         RMB       2                   Window Relative Y
     0020             (       cocovtio.d):00237         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (       cocovtio.d):00238         
                      (       cocovtio.d):00239         **************************
                      (       cocovtio.d):00240         * window regions for mouse
                      (       cocovtio.d):00241         *
     0000             (       cocovtio.d):00242         WR.Cntnt       EQU       0                   content region
     0001             (       cocovtio.d):00243         WR.Cntrl       EQU       1                   control region
     0002             (       cocovtio.d):00244         WR.OfWin       EQU       2                   off window
                      (       cocovtio.d):00245         
                      (       cocovtio.d):00246         *************************************
                      (       cocovtio.d):00247         * Standard system get/put buffer defs
                      (       cocovtio.d):00248         *
                      (       cocovtio.d):00249         *
                      (       cocovtio.d):00250         * system group numbers
                      (       cocovtio.d):00251         *
                      (       cocovtio.d):00252                        ORG       200
00C8                  (       cocovtio.d):00253         Grp.Fnt        RMB       1                   font group
00C9                  (       cocovtio.d):00254         Grp.Clip       RMB       1                   clipboard group
00CA                  (       cocovtio.d):00255         Grp.Ptr        RMB       1                   pointer group
00CB                  (       cocovtio.d):00256         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (       cocovtio.d):00257         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (       cocovtio.d):00258         Grp.Pat6       RMB       1                   pattern group 16 color
                      (       cocovtio.d):00259         *
                      (       cocovtio.d):00260         * font buffer numbers
                      (       cocovtio.d):00261         *
                      (       cocovtio.d):00262                        ORG       1
0001                  (       cocovtio.d):00263         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (       cocovtio.d):00264         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (       cocovtio.d):00265         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (       cocovtio.d):00266         *
                      (       cocovtio.d):00267         * pattern buffer numbers
                      (       cocovtio.d):00268         *
                      (       cocovtio.d):00269                        ORG       1
0001                  (       cocovtio.d):00270         Pat.Dot        RMB       1
0002                  (       cocovtio.d):00271         Pat.Vrt        RMB       1
0003                  (       cocovtio.d):00272         Pat.Hrz        RMB       1
0004                  (       cocovtio.d):00273         Pat.XHtc       RMB       1
0005                  (       cocovtio.d):00274         Pat.LSnt       RMB       1
0006                  (       cocovtio.d):00275         Pat.RSnt       RMB       1
0007                  (       cocovtio.d):00276         Pat.SDot       RMB       1
0008                  (       cocovtio.d):00277         Pat.BDot       RMB       1
                      (       cocovtio.d):00278         *
                      (       cocovtio.d):00279         * pointer buffer numbers
                      (       cocovtio.d):00280         *
                      (       cocovtio.d):00281                        ORG       1
0001                  (       cocovtio.d):00282         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (       cocovtio.d):00283         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (       cocovtio.d):00284         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (       cocovtio.d):00285         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (       cocovtio.d):00286         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (       cocovtio.d):00287         Ptr.Txt        RMB       1                   Text pointer
0007                  (       cocovtio.d):00288         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (       cocovtio.d):00289         
                      (       cocovtio.d):00290         **********************
                      (       cocovtio.d):00291         * KeyDrv Entry Points
                      (       cocovtio.d):00292                        ORG       0
0000                  (       cocovtio.d):00293         K$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00294         K$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00295         K$FnKey        RMB       3                   get function key states
0009                  (       cocovtio.d):00296         K$RdKey        RMB       3                   get key states
                      (       cocovtio.d):00297         
                      (       cocovtio.d):00298         **********************
                      (       cocovtio.d):00299         * JoyDrv Entry Points
                      (       cocovtio.d):00300                        ORG       0
0000                  (       cocovtio.d):00301         J$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00302         J$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00303         J$MsBtn        RMB       3                   get mouse button states
0009                  (       cocovtio.d):00304         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (       cocovtio.d):00305         J$JyBtn        RMB       3                   get joystick button states
000F                  (       cocovtio.d):00306         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00307         
                      (       cocovtio.d):00308         **********************
                      (       cocovtio.d):00309         * SndDrv Entry Points
                      (       cocovtio.d):00310                        ORG       0
0000                  (       cocovtio.d):00311         S$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00312         S$GetStt       RMB       3                   joystick termination
0006                  (       cocovtio.d):00313         S$SetStt       RMB       3                   joystick termination
0009                  (       cocovtio.d):00314         S$Term         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00315         
                      (       cocovtio.d):00316         ********************************
                      (       cocovtio.d):00317         * Window/Menu Bar Data Structure
                      (       cocovtio.d):00318         *
                      (       cocovtio.d):00319         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (       cocovtio.d):00320         * for use in the high level windowing package.
                      (       cocovtio.d):00321         *
     000A             (       cocovtio.d):00322         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (       cocovtio.d):00323         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (       cocovtio.d):00324         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (       cocovtio.d):00325         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (       cocovtio.d):00326         *
                      (       cocovtio.d):00327         * Menu Item Descriptor : (MN.ITEMS)
                      (       cocovtio.d):00328         * one required for each item within the menu
                      (       cocovtio.d):00329         *
                      (       cocovtio.d):00330                        ORG       0
0000                  (       cocovtio.d):00331         MI.TTL         RMB       MXTTLEN             item name
000F                  (       cocovtio.d):00332         MI.ENBL        RMB       1                   enable flag
0010                  (       cocovtio.d):00333         MI.RES         RMB       5                   reserved bytes
     0015             (       cocovtio.d):00334         MI.SIZ         EQU       .                   size of menu item descriptor
                      (       cocovtio.d):00335         *
                      (       cocovtio.d):00336         * Menu Descriptor :
                      (       cocovtio.d):00337         * one for each menu on the manu bar
                      (       cocovtio.d):00338         * each is pointed to by MB.MPTR below
                      (       cocovtio.d):00339         *
                      (       cocovtio.d):00340                        ORG       0
0000                  (       cocovtio.d):00341         MN.TTL         RMB       MXTTLEN             menu title
000F                  (       cocovtio.d):00342         MN.ID          RMB       1                   menu id number (1-255)
0010                  (       cocovtio.d):00343         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (       cocovtio.d):00344         MN.NITS        RMB       1                   number of items in menu
0012                  (       cocovtio.d):00345         MN.ENBL        RMB       1                   enable flag
0013                  (       cocovtio.d):00346         MN.RES         RMB       2                   reserved bytes
0015                  (       cocovtio.d):00347         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (       cocovtio.d):00348         MN.SIZ         EQU       .                   size of menu descriptor
                      (       cocovtio.d):00349         *
                      (       cocovtio.d):00350         * Window Descriptor:
                      (       cocovtio.d):00351         * one required for each application in a framed window
                      (       cocovtio.d):00352         *
                      (       cocovtio.d):00353                        ORG       0
0000                  (       cocovtio.d):00354         WN.TTL         RMB       20                  title of window for title bar
0014                  (       cocovtio.d):00355         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (       cocovtio.d):00356         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (       cocovtio.d):00357         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (       cocovtio.d):00358         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (       cocovtio.d):00359         WN.RES         RMB       7                   reserved bytes
0020                  (       cocovtio.d):00360         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (       cocovtio.d):00361         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (       cocovtio.d):00362         
                      (       cocovtio.d):00363         *************************
                      (       cocovtio.d):00364         * Window Type Definitions
                      (       cocovtio.d):00365         *
                      (       cocovtio.d):00366         * To be used in setting up the border of the window in
                      (       cocovtio.d):00367         * the SS.WnSel SETSTAT
                      (       cocovtio.d):00368         *
                      (       cocovtio.d):00369                        ORG       0
0000                  (       cocovtio.d):00370         WT.NBox        RMB       1                   No Box
0001                  (       cocovtio.d):00371         WT.FWin        RMB       1                   Framed Window
0002                  (       cocovtio.d):00372         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (       cocovtio.d):00373         WT.SBox        RMB       1                   Shadowed Box
0004                  (       cocovtio.d):00374         WT.DBox        RMB       1                   Double Box
0005                  (       cocovtio.d):00375         WT.PBox        RMB       1                   Plain Box
                      (       cocovtio.d):00376         
                      (       cocovtio.d):00377         *************************************
                      (       cocovtio.d):00378         * Pre-Defined Menu IDs for the system
                      (       cocovtio.d):00379         *
                      (       cocovtio.d):00380                        ORG       1
0001                  (       cocovtio.d):00381         MId.Mov        RMB       1                   move box
0002                  (       cocovtio.d):00382         MId.Cls        RMB       1                   close box
0003                  (       cocovtio.d):00383         MId.Grw        RMB       1                   grow box
0004                  (       cocovtio.d):00384         MId.SUp        RMB       1                   scroll up
0005                  (       cocovtio.d):00385         MId.SDn        RMB       1                   scroll down
0006                  (       cocovtio.d):00386         MId.SRt        RMB       1                   scroll right
0007                  (       cocovtio.d):00387         MId.SLt        RMB       1                   scroll left
0008                  (       cocovtio.d):00388         MId.Chr        RMB       1                   character was depressed
                      (       cocovtio.d):00389                        ORG       20
0014                  (       cocovtio.d):00390         MId.Tdy        RMB       1                   Tandy menu
0015                  (       cocovtio.d):00391         MId.Fil        RMB       1                   Files Menu
0016                  (       cocovtio.d):00392         MId.Edt        RMB       1                   Edit Menu
0017                  (       cocovtio.d):00393         MId.Sty        RMB       1                   Styles menu
0018                  (       cocovtio.d):00394         MId.Fnt        RMB       1                   Font menu
                      (       cocovtio.d):00395         
                      (       cocovtio.d):00396         
                      (       cocovtio.d):00397         ******************************************************************************
                      (       cocovtio.d):00398         ******************************************************************************
                      (       cocovtio.d):00399         **                                                                          **
                      (       cocovtio.d):00400         ** NitrOS-9 Windowing system Global data definitions                        **
                      (       cocovtio.d):00401         **                                                                          **
                      (       cocovtio.d):00402         ******************************************************************************
                      (       cocovtio.d):00403         ******************************************************************************
                      (       cocovtio.d):00404         **                                                                          **
                      (       cocovtio.d):00405         ** System memory block 0 layout:                                            **
                      (       cocovtio.d):00406         **                                                                          **
                      (       cocovtio.d):00407         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (       cocovtio.d):00408         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (       cocovtio.d):00409         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (       cocovtio.d):00410         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (       cocovtio.d):00411         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (       cocovtio.d):00412         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (       cocovtio.d):00413         ** $0010-$001F : unused (User definable)                                    **
                      (       cocovtio.d):00414         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (       cocovtio.d):00415         ** $0100-$011F : Task usage table                                           **
                      (       cocovtio.d):00416         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (       cocovtio.d):00417         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (       cocovtio.d):00418         ** $0300-$03FF : system's system call dispatch table                        **
                      (       cocovtio.d):00419         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (       cocovtio.d):00420         ** $0500-$05FF : process descriptor pointer table                           **
                      (       cocovtio.d):00421         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (       cocovtio.d):00422         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (       cocovtio.d):00423         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (       cocovtio.d):00424         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (       cocovtio.d):00425         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (       cocovtio.d):00426         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (       cocovtio.d):00427         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (       cocovtio.d):00428         ** $1248-$127F : ????                                                       **
                      (       cocovtio.d):00429         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (       cocovtio.d):00430         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (       cocovtio.d):00431         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (       cocovtio.d):00432         **                                                                          **
                      (       cocovtio.d):00433         ******************************************************************************
                      (       cocovtio.d):00434         ******************************************************************************
                      (       cocovtio.d):00435         
                      (       cocovtio.d):00436         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (       cocovtio.d):00437         MaxLines       EQU       25                  Max. Y coord text value
     0000             (       cocovtio.d):00438         Meg            SET       false               "true" if 1 or 2 meg machine
                      (       cocovtio.d):00439         
     0000             (       cocovtio.d):00440         COMP           EQU       0                   composite monitor
     0001             (       cocovtio.d):00441         RGB            EQU       1                   RGB Analog monitor 
     0002             (       cocovtio.d):00442         MONO           EQU       2                   monochrome monitor
                      (       cocovtio.d):00443         
     0001             (       cocovtio.d):00444         Monitor        SET       RGB
                      (       cocovtio.d):00445         
                      (       cocovtio.d):00446         * Global definitions
     0001             (       cocovtio.d):00447         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (       cocovtio.d):00448         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (       cocovtio.d):00449         CapsLck        EQU       %00000100           Capslock enabled
     0280             (       cocovtio.d):00450         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (       cocovtio.d):00451                        IFEQ      MaxLines-25
     00C6             (       cocovtio.d):00452         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00453                        ELSE      
0019                  (       cocovtio.d):00454         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00455                        ENDC      
                      (       cocovtio.d):00456         
                      (       cocovtio.d):00457         *****************************************************************************
                      (       cocovtio.d):00458         * Static memory area for each window (VTIO/TC9IO)
                      (       cocovtio.d):00459         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (       cocovtio.d):00460         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (       cocovtio.d):00461         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (       cocovtio.d):00462         * May have to have smaller limit for text to gfx screens, as it will run much
                      (       cocovtio.d):00463         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (       cocovtio.d):00464         *
                      (       cocovtio.d):00465         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (       cocovtio.d):00466         * V.SCF is to be resolved properly in pass 1!!
                      (       cocovtio.d):00467                        ORG       V.SCF
001D                  (       cocovtio.d):00468         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (       cocovtio.d):00469         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (       cocovtio.d):00470         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (       cocovtio.d):00471         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (       cocovtio.d):00472         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (       cocovtio.d):00473         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (       cocovtio.d):00474         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (       cocovtio.d):00475         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (       cocovtio.d):00476         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (       cocovtio.d):00477         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (       cocovtio.d):00478         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (       cocovtio.d):00479         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (       cocovtio.d):00480                        RMB       1                   unused                                       $2A
002B                  (       cocovtio.d):00481         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (       cocovtio.d):00482         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (       cocovtio.d):00483         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (       cocovtio.d):00484         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (       cocovtio.d):00485         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (       cocovtio.d):00486         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (       cocovtio.d):00487         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (       cocovtio.d):00488         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (       cocovtio.d):00489         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (       cocovtio.d):00490         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (       cocovtio.d):00491         CC3Parm        RMB       128-.               global parameter area
0080                  (       cocovtio.d):00492         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (       cocovtio.d):00493         CC3DSiz        EQU       .
                      (       cocovtio.d):00494         
                      (       cocovtio.d):00495         *****************************************************************************
                      (       cocovtio.d):00496         * GrfInt/WindInt global memory area
                      (       cocovtio.d):00497         * This area sits in system block 0 from $1000 to $10ff
     1000             (       cocovtio.d):00498         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (       cocovtio.d):00499                        ORG       0
0000                  (       cocovtio.d):00500         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (       cocovtio.d):00501         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (       cocovtio.d):00502         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (       cocovtio.d):00503         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (       cocovtio.d):00504         *g0003    rmb   2          NEW: UNUSED
0005                  (       cocovtio.d):00505         g0005          RMB       2                   Temp save in Windint RG
0007                  (       cocovtio.d):00506         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (       cocovtio.d):00507         G.MonTyp       RMB       1                   monitor type
     000A             (       cocovtio.d):00508         g000A          EQU       .                   Old label for compatibility
000A                  (       cocovtio.d):00509         G.CrDvFl       RMB       1  Are we current device flag (only set when all
                      (       cocovtio.d):00510         *                           Parms have been moved to Dev Mem)
                      (       cocovtio.d):00511         *                           0=We are not on our device
                      (       cocovtio.d):00512         *                           1=We are the current device
                      (       cocovtio.d):00513         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (       cocovtio.d):00514         *                           whether or not to update GIME regs themselves
                      (       cocovtio.d):00515         *                           If not current device, they don't.)
000B                  (       cocovtio.d):00516         G.WinType      RMB       1                   current device's V.TYPE
000C                  (       cocovtio.d):00517         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (       cocovtio.d):00518         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (       cocovtio.d):00519         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (       cocovtio.d):00520         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (       cocovtio.d):00521         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (       cocovtio.d):00522         G.BelVec       RMB       2                   BELL routine vector
0019                  (       cocovtio.d):00523         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (       cocovtio.d):00524         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (       cocovtio.d):00525         G.BelTnF       RMB       1                   BELL tone flag
001D                  (       cocovtio.d):00526         g001D          RMB       3
0020                  (       cocovtio.d):00527         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (       cocovtio.d):00528         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (       cocovtio.d):00529         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (       cocovtio.d):00530         *                           00000010 : VDGInt found
                      (       cocovtio.d):00531         *                           10000000 : GrfDrv found
0025                  (       cocovtio.d):00532         g0025          RMB       1
0026                  (       cocovtio.d):00533         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (       cocovtio.d):00534         *         IFEQ  TC9-true
                      (       cocovtio.d):00535         *CurLght  rmb   1          current keyboard light settings
                      (       cocovtio.d):00536         *         ELSE  
0027                  (       cocovtio.d):00537         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (       cocovtio.d):00538         *         ENDC  
0028                  (       cocovtio.d):00539         G.LKeyCd       RMB       1                   last keyboard code
0029                  (       cocovtio.d):00540         G.KyRept       RMB       1                   key repeat counter
                      (       cocovtio.d):00541         * A secondary 3 key table (same format as g002D below)
002A                  (       cocovtio.d):00542         G.2Key1        RMB       1                   $2A
002B                  (       cocovtio.d):00543         G.2Key2        RMB       1                   $2B
002C                  (       cocovtio.d):00544         G.2Key3        RMB       1
                      (       cocovtio.d):00545         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (       cocovtio.d):00546         * than 3 are hit, the last key is overwritten with the very last key down that
                      (       cocovtio.d):00547         * was checked. Format for all three is the same as the PIA column/row byte @
                      (       cocovtio.d):00548         * KeyFlag below.
002D                  (       cocovtio.d):00549         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (       cocovtio.d):00550         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (       cocovtio.d):00551         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (       cocovtio.d):00552         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (       cocovtio.d):00553         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (       cocovtio.d):00554         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (       cocovtio.d):00555         *                           %00000111-Column # (Output, 0-7)
                      (       cocovtio.d):00556         *                           %00111000-Row # (Input, 0-6)
0033                  (       cocovtio.d):00557         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (       cocovtio.d):00558         G.KySns        RMB       1                   key sense byte
0035                  (       cocovtio.d):00559         G.KySame       RMB       1                   same key flag
0036                  (       cocovtio.d):00560         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (       cocovtio.d):00561                        RMB       1
0038                  (       cocovtio.d):00562         g0038          RMB       1                   grfdrv initialized flag
0039                  (       cocovtio.d):00563                        RMB       2
003B                  (       cocovtio.d):00564         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (       cocovtio.d):00565         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (       cocovtio.d):00566         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (       cocovtio.d):00567         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (       cocovtio.d):00568         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (       cocovtio.d):00569         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (       cocovtio.d):00570         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (       cocovtio.d):00571         *         IFEQ  TC9-true
                      (       cocovtio.d):00572         *KeyParm  rmb   1          keyboard command parameter byte
                      (       cocovtio.d):00573         *         ELSE  
0063                  (       cocovtio.d):00574         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (       cocovtio.d):00575         *         ENDC  
0064                  (       cocovtio.d):00576         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (       cocovtio.d):00577         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (       cocovtio.d):00578         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (       cocovtio.d):00579         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (       cocovtio.d):00580         G.CoTble       RMB       6                   co-module table ($68)
006E                  (       cocovtio.d):00581         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (       cocovtio.d):00582         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (       cocovtio.d):00583         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (       cocovtio.d):00584         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (       cocovtio.d):00585         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (       cocovtio.d):00586         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (       cocovtio.d):00587         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (       cocovtio.d):00588         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (       cocovtio.d):00589         g00BD          RMB       1                   Current screen type for work window table
00BE                  (       cocovtio.d):00590         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (       cocovtio.d):00591         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (       cocovtio.d):00592         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (       cocovtio.d):00593         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (       cocovtio.d):00594         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (       cocovtio.d):00595         G.MsSig        RMB       1                   mouse signal flag
00C7                  (       cocovtio.d):00596         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (       cocovtio.d):00597         g00D7          RMB       9
00E0                  (       cocovtio.d):00598         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (       cocovtio.d):00599         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (       cocovtio.d):00600         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (       cocovtio.d):00601         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (       cocovtio.d):00602         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (       cocovtio.d):00603         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (       cocovtio.d):00604         
                      (       cocovtio.d):00605         *****************************************************************************
                      (       cocovtio.d):00606         * GrfDrv global memory data definitions
                      (       cocovtio.d):00607         * This area sits in system block 0 from $1100 to $119E
     1100             (       cocovtio.d):00608         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (       cocovtio.d):00609                        ORG       0
0000                  (       cocovtio.d):00610         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (       cocovtio.d):00611         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (       cocovtio.d):00612         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (       cocovtio.d):00613         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (       cocovtio.d):00614         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (       cocovtio.d):00615         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (       cocovtio.d):00616         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (       cocovtio.d):00617         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (       cocovtio.d):00618         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (       cocovtio.d):00619         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (       cocovtio.d):00620         *                             overlay width has been copied
000B                  (       cocovtio.d):00621         gr000B         RMB       1
000C                  (       cocovtio.d):00622         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (       cocovtio.d):00623         gr000E         RMB       1
000F                  (       cocovtio.d):00624         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (       cocovtio.d):00625         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (       cocovtio.d):00626         gr0012         RMB       6
0018                  (       cocovtio.d):00627         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (       cocovtio.d):00628         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (       cocovtio.d):00629         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (       cocovtio.d):00630         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (       cocovtio.d):00631         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (       cocovtio.d):00632         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (       cocovtio.d):00633         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (       cocovtio.d):00634         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (       cocovtio.d):00635         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (       cocovtio.d):00636         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (       cocovtio.d):00637         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (       cocovtio.d):00638         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (       cocovtio.d):00639         gr002C         RMB       2
002E                  (       cocovtio.d):00640         gr002E         RMB       2                   current window table entry
0030                  (       cocovtio.d):00641         gr0030         RMB       2                   current screen table ptr
0032                  (       cocovtio.d):00642         gr0032         RMB       1                   Last block # we used for buffers
0033                  (       cocovtio.d):00643         gr0033         RMB       2                   Last offset we used for buffers
0035                  (       cocovtio.d):00644         gr0035         RMB       1                   group
0036                  (       cocovtio.d):00645         gr0036         RMB       2                   offset
0038                  (       cocovtio.d):00646         gr0038         RMB       1                   group returned (new)
0039                  (       cocovtio.d):00647         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (       cocovtio.d):00648         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (       cocovtio.d):00649         gr003B         RMB       2                   end of vars ptr?
003D                  (       cocovtio.d):00650         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (       cocovtio.d):00651         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (       cocovtio.d):00652         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (       cocovtio.d):00653         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (       cocovtio.d):00654         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (       cocovtio.d):00655         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (       cocovtio.d):00656         gr0047         RMB       2                   'Working' X coordinate
0049                  (       cocovtio.d):00657         gr0049         RMB       2                   'Working' Y coordinate
004B                  (       cocovtio.d):00658         gr004B         RMB       2                   current X
004D                  (       cocovtio.d):00659         gr004D         RMB       2                   current Y
004F                  (       cocovtio.d):00660         gr004F         RMB       2                   X Size (in bytes)
0051                  (       cocovtio.d):00661         gr0051         RMB       2                   Y Size (in bytes)
0053                  (       cocovtio.d):00662         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (       cocovtio.d):00663         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (       cocovtio.d):00664         gr0057         RMB       1                   group
0058                  (       cocovtio.d):00665         gr0058         RMB       1                   buffer #
0059                  (       cocovtio.d):00666         gr0059         RMB       1                   save switch for overlay
005A                  (       cocovtio.d):00667         gr005A         RMB       1                   PRN
005B                  (       cocovtio.d):00668         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (       cocovtio.d):00669         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (       cocovtio.d):00670         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (       cocovtio.d):00671         Gr.STYMk       RMB       1                   STY marker
0061                  (       cocovtio.d):00672         gr0061         RMB       1                   foreground RGB data
0062                  (       cocovtio.d):00673         gr0062         RMB       1                   background RGB data
0063                  (       cocovtio.d):00674         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (       cocovtio.d):00675         gr0064         RMB       2                   PSet vector
0066                  (       cocovtio.d):00676         gr0066         RMB       2                   pset offset
0068                  (       cocovtio.d):00677         gr0068         RMB       2                   LSet vector
006A                  (       cocovtio.d):00678         gr006A         RMB       2                   max X co-ordinate
006C                  (       cocovtio.d):00679         gr006C         RMB       2                   max Y co-ordinate
006E                  (       cocovtio.d):00680         gr006E         RMB       2                   X pixel count
0070                  (       cocovtio.d):00681         gr0070         RMB       2                   Y pixel count
0072                  (       cocovtio.d):00682         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (       cocovtio.d):00683         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (       cocovtio.d):00684         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (       cocovtio.d):00685         gr0077         RMB       2                   Vector for right direction FFill
0079                  (       cocovtio.d):00686         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (       cocovtio.d):00687         gr007A         RMB       2                   Vector for left direction FFill
007C                  (       cocovtio.d):00688         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (       cocovtio.d):00689         gr007D         RMB       1                   buffer block #
007E                  (       cocovtio.d):00690         gr007E         RMB       2                   buffer offset #
0080                  (       cocovtio.d):00691         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (       cocovtio.d):00692         gr0082         RMB       3                   3 byte extended screen address
0085                  (       cocovtio.d):00693         gr0085         RMB       2                   temp
0087                  (       cocovtio.d):00694         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (       cocovtio.d):00695         gr0097         RMB       1                   temp
0098                  (       cocovtio.d):00696         gr0098         RMB       1                   temp
                      (       cocovtio.d):00697         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (       cocovtio.d):00698         gr0099         RMB       2                   temp
                      (       cocovtio.d):00699         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (       cocovtio.d):00700         gr009B         RMB       1                   counter temp
009C                  (       cocovtio.d):00701         gr009C         RMB       1
009D                  (       cocovtio.d):00702         gr009D         RMB       2                   offset to buffer in block
009F                  (       cocovtio.d):00703         gr009F         RMB       1
00A0                  (       cocovtio.d):00704         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (       cocovtio.d):00705         gr00A1         RMB       2                   vector routine for (changes lots)
                      (       cocovtio.d):00706         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (       cocovtio.d):00707         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (       cocovtio.d):00708         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (       cocovtio.d):00709         gr00A7         RMB       2
00A9                  (       cocovtio.d):00710         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (       cocovtio.d):00711         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (       cocovtio.d):00712         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (       cocovtio.d):00713         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (       cocovtio.d):00714         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (       cocovtio.d):00715         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (       cocovtio.d):00716         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (       cocovtio.d):00717         gr00B3         RMB       1                   temp veriable grfdrv
00B4                  (       cocovtio.d):00718         gr00B4         RMB       1                   temp veriable grfdrv
00B5                  (       cocovtio.d):00719         gr00B5         RMB       1                   regW for grfdrv
00B6                  (       cocovtio.d):00720         gr00B6         RMB       1
00B7                  (       cocovtio.d):00721         gr00B7         RMB       2
00B9                  (       cocovtio.d):00722         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (       cocovtio.d):00723         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (       cocovtio.d):00724         gr00BD         RMB       2                   previously used in grfdrv at $B6
00BF                  (       cocovtio.d):00725         gr00BF         RMB       256-.
                      (       cocovtio.d):00726         * GPLoad buffer - $1200 in system block 0
0100                  (       cocovtio.d):00727         GPBuf          RMB       72                  common move buffer for gpload/get/put
     0048             (       cocovtio.d):00728         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (       cocovtio.d):00729         
                      (       cocovtio.d):00730         *****************************************************************************
                      (       cocovtio.d):00731         * Window table entry structure
                      (       cocovtio.d):00732         * These tables sit in system block 0 and there is 1 for every window init'd
                      (       cocovtio.d):00733         * including any overlay windows.
     0020             (       cocovtio.d):00734         MaxWind        EQU       32                  maximum allowable window tables
     1290             (       cocovtio.d):00735         WinBase        EQU       $1290               base address to start of window tables
                      (       cocovtio.d):00736                        ORG       -$10
FFF0                  (       cocovtio.d):00737         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (       cocovtio.d):00738         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (       cocovtio.d):00739         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (       cocovtio.d):00740         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (       cocovtio.d):00741         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (       cocovtio.d):00742         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (       cocovtio.d):00743         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (       cocovtio.d):00744         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (       cocovtio.d):00745         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (       cocovtio.d):00746         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (       cocovtio.d):00747         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (       cocovtio.d):00748         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (       cocovtio.d):00749         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (       cocovtio.d):00750         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (       cocovtio.d):00751         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (       cocovtio.d):00752         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (       cocovtio.d):00753         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (       cocovtio.d):00754         Wt.Back        RMB       1                   background palette #                         $07
0008                  (       cocovtio.d):00755         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (       cocovtio.d):00756         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (       cocovtio.d):00757         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (       cocovtio.d):00758         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (       cocovtio.d):00759         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (       cocovtio.d):00760         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (       cocovtio.d):00761         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (       cocovtio.d):00762         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (       cocovtio.d):00763         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (       cocovtio.d):00764         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (       cocovtio.d):00765         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (       cocovtio.d):00766         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (       cocovtio.d):00767         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (       cocovtio.d):00768         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (       cocovtio.d):00769         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24,0-191)                 $1D
001F                  (       cocovtio.d):00770         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (       cocovtio.d):00771         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (       cocovtio.d):00772         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (       cocovtio.d):00773         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (       cocovtio.d):00774         * NOTE: The following default settings are what the window was initialized
                      (       cocovtio.d):00775         *       with, and thus are the MAXIMUM start/size the window can handle
                      (       cocovtio.d):00776         *       until it is restarted (DWEnd & DWSet)
                      (       cocovtio.d):00777         *       They also appear to be used in WindInt to determine the coords &
                      (       cocovtio.d):00778         *       sizes for control+content regions
0026                  (       cocovtio.d):00779         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (       cocovtio.d):00780         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (       cocovtio.d):00781         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (       cocovtio.d):00782         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (       cocovtio.d):00783         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (       cocovtio.d):00784         Wt.Siz         EQU       .+$10
                      (       cocovtio.d):00785         
                      (       cocovtio.d):00786         *****************************************************************************
                      (       cocovtio.d):00787         * Screen table entrys
                      (       cocovtio.d):00788         * These tables sit in system block 0 base=$1A80
                      (       cocovtio.d):00789         
     0010             (       cocovtio.d):00790         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (       cocovtio.d):00791         STblBse        EQU       $1A80               base address of screen tables
                      (       cocovtio.d):00792                        ORG       0
0000                  (       cocovtio.d):00793         St.Sty         RMB       1                   Screen type                         $00
0001                  (       cocovtio.d):00794         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (       cocovtio.d):00795         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (       cocovtio.d):00796         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (       cocovtio.d):00797         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (       cocovtio.d):00798         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (       cocovtio.d):00799         St.Back        RMB       1                   Background palette register #       $07
0008                  (       cocovtio.d):00800         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (       cocovtio.d):00801         St.Res         RMB       7                   UNUSED???                           $09
                      (       cocovtio.d):00802         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (       cocovtio.d):00803         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (       cocovtio.d):00804         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (       cocovtio.d):00805         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
0010                  (       cocovtio.d):00806         St.Pals        RMB       16                  Palette register contents           $10
     0020             (       cocovtio.d):00807         St.Siz         EQU       .
                      (       cocovtio.d):00808         
                      (       cocovtio.d):00809         *****************************************************************************
                      (       cocovtio.d):00810         * Graphics buffer tables
                      (       cocovtio.d):00811         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (       cocovtio.d):00812         * data.
                      (       cocovtio.d):00813                        ORG       0
0000                  (       cocovtio.d):00814         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (       cocovtio.d):00815         Grf.Off        RMB       2                   back block header offset            $01
0003                  (       cocovtio.d):00816         Grf.Grp        RMB       1                   group #                             $03
0004                  (       cocovtio.d):00817         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (       cocovtio.d):00818         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (       cocovtio.d):00819         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (       cocovtio.d):00820         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (       cocovtio.d):00821         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (       cocovtio.d):00822         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (       cocovtio.d):00823         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (       cocovtio.d):00824         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (       cocovtio.d):00825         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (       cocovtio.d):00826         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (       cocovtio.d):00827         Grf.Siz        EQU       .                   $20
                      (       cocovtio.d):00828         
                      (       cocovtio.d):00829         *****************************************************************************
                      (       cocovtio.d):00830         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (       cocovtio.d):00831         * $1075-$0176
                      (       cocovtio.d):00832         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (       cocovtio.d):00833                        ORG       0
0000                  (       cocovtio.d):00834         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (       cocovtio.d):00835         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (       cocovtio.d):00836         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (       cocovtio.d):00837         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (       cocovtio.d):00838         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (       cocovtio.d):00839         Gt.BClr        RMB       1                   Background color                               $08
0009                  (       cocovtio.d):00840         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (       cocovtio.d):00841         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (       cocovtio.d):00842         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (       cocovtio.d):00843         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (       cocovtio.d):00844         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (       cocovtio.d):00845         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (       cocovtio.d):00846         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (       cocovtio.d):00847         GTabSz         EQU       .
                      (       cocovtio.d):00848         
                      (       cocovtio.d):00849         *****************************************************************************
                      (       cocovtio.d):00850         * This table is located in the graphics table memory and is offset from
                      (       cocovtio.d):00851         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (       cocovtio.d):00852         * WindInt.
                      (       cocovtio.d):00853         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (       cocovtio.d):00854         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (       cocovtio.d):00855         *  COMBINATION EVERY TIME
                      (       cocovtio.d):00856                        ORG       $0240
0240                  (       cocovtio.d):00857                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (       cocovtio.d):00858                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (       cocovtio.d):00859                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (       cocovtio.d):00860                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (       cocovtio.d):00861         
                      (       cocovtio.d):00862         *****************************************************************************
                      (       cocovtio.d):00863         * WindInt menu handling table entry definition
                      (       cocovtio.d):00864                        ORG       0
0000                  (       cocovtio.d):00865         MnuXNum        RMB       1                   menu #
0001                  (       cocovtio.d):00866         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (       cocovtio.d):00867         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (       cocovtio.d):00868                        RMB       1                   unused?
     0004             (       cocovtio.d):00869         MnuHSiz        EQU       .
                      (       cocovtio.d):00870         
                      (       cocovtio.d):00871         *****************************************************************************
                      (       cocovtio.d):00872         * Character binary switches
     0080             (       cocovtio.d):00873         TChr           EQU       %10000000           transparent characters
     0040             (       cocovtio.d):00874         Under          EQU       %01000000           underline characters
     0020             (       cocovtio.d):00875         Bold           EQU       %00100000           bold characters
     0010             (       cocovtio.d):00876         Prop           EQU       %00010000           proportional spacing of characters
     0008             (       cocovtio.d):00877         Scale          EQU       %00001000           automatic window scaling
     0004             (       cocovtio.d):00878         Invers         EQU       %00000100           inverse characters
     0002             (       cocovtio.d):00879         NoCurs         EQU       %00000010           no cursor display
     0001             (       cocovtio.d):00880         Protect        EQU       %00000001           device window protection
                      (       cocovtio.d):00881         
                      (       cocovtio.d):00882         *****************************************************************************
                      (       cocovtio.d):00883         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (       cocovtio.d):00884         Current        EQU       $ff                 Current screen
                      (       cocovtio.d):00885         *         equ   1          640x200x2
                      (       cocovtio.d):00886         *         equ   2          320x200x4
                      (       cocovtio.d):00887         *         equ   3          640x200x4
                      (       cocovtio.d):00888         *         equ   4          320x200x16
                      (       cocovtio.d):00889         *         equ   $85        80 column text
                      (       cocovtio.d):00890         *         equ   $86        40 column text
                      (       cocovtio.d):00891         
                      (       cocovtio.d):00892         *************************************
                      (       cocovtio.d):00893         * Window default palette color codes
                      (       cocovtio.d):00894         *
                      (       cocovtio.d):00895                        ORG       0
0000                  (       cocovtio.d):00896         White.         RMB       1
0001                  (       cocovtio.d):00897         Blue.          RMB       1
0002                  (       cocovtio.d):00898         Black.         RMB       1
0003                  (       cocovtio.d):00899         Green.         RMB       1
0004                  (       cocovtio.d):00900         Red.           RMB       1
0005                  (       cocovtio.d):00901         Yellow.        RMB       1
0006                  (       cocovtio.d):00902         Magenta.       RMB       1
0007                  (       cocovtio.d):00903         Cyan.          RMB       1
                      (       cocovtio.d):00904         
                      (       cocovtio.d):00905                        ENDC      
                      (       cocovtio.d):00906                        ENDC      
                      (/home/strick/6809):00043                  endc
                      (/home/strick/6809):00044         
     0011             (/home/strick/6809):00045         tylg     set   Prgrm+Objct
     0081             (/home/strick/6809):00046         atrv     set   ReEnt+rev
     0001             (/home/strick/6809):00047         rev      set   $01
     000A             (/home/strick/6809):00048         edition  set   10
     0001             (/home/strick/6809):00049         DOCASE   equ   1                enable case-sensitive symbols
     0001             (/home/strick/6809):00050         NEWDEF   equ   1                enable IFDEF/IFNDF conditionals
0000 87CD1B00000D1181 (/home/strick/6809):00051                  mod   eom,name,tylg,atrv,asm,size
     3300111000
                      (/home/strick/6809):00052         
                      (/home/strick/6809):00053         * u002B Bit flag meanings: (Default=00110101)
     0080             (/home/strick/6809):00054         LitLine  equ   %10000000      Literal line to print
     0040             (/home/strick/6809):00055         Comment  equ   %01000000      Comment field present in source line
     0020             (/home/strick/6809):00056         Operand  equ   %00100000      Operand field present in source line
     0010             (/home/strick/6809):00057         Command  equ   %00010000      Mnemonic command present in source line
     0008             (/home/strick/6809):00058         Label    equ   %00001000      Label field present in source line
     0004             (/home/strick/6809):00059         NoObjct  equ   %00000100      No object code to print
     0001             (/home/strick/6809):00060         PrintPC  equ   %00000001      Print PC flag
     0000             (/home/strick/6809):00061         DoNothng equ   %00000000      Do nothing (no flags set)
                      (/home/strick/6809):00062         
                      (/home/strick/6809):00063                 IFNE  NEWDEF
     00A2             (/home/strick/6809):00064         Numop    equ   162            # of opcodes in table (including pseudo-ops)
                      (/home/strick/6809):00065                 ELSE
000D                  (/home/strick/6809):00066         Numop    equ   160            # of opcodes in table (including pseudo-ops)
                      (/home/strick/6809):00067                 ENDC  NEWDEF
                      (/home/strick/6809):00068         
0000.                 (/home/strick/6809):00069         u0000    rmb   2                Ptr to source line input buffer (80 + CR)
0002.                 (/home/strick/6809):00070         u0002    rmb   2                Ptr to header output buffer    (132 + CR)
0004.                 (/home/strick/6809):00071         u0004    rmb   2                Ptr to listing output buffer   (132 + CR)
0006.                 (/home/strick/6809):00072         u0006    rmb   2                Ptr to open file path stack    (13, Ustk)
0008.                 (/home/strick/6809):00073         u0008    rmb   2                Ptr to Title buffer (TTL, 79 chars + nul)
000A.                 (/home/strick/6809):00074         u000A    rmb   2                Ptr to Name buffer  (NAM, 39 chars + nul)
000C.                 (/home/strick/6809):00075         u000C    rmb   1                temp postbyte storage for 6309 bit ops
                      (/home/strick/6809):00076                 IFNE  DOCASE
000D.                 (/home/strick/6809):00077         u000D    rmb   1                symbol case mask (was unused)
                      (/home/strick/6809):00078                 ELSE
000D                  (/home/strick/6809):00079         u000D    rmb   1                unused
                      (/home/strick/6809):00080                 ENDC  DOCASE
000E.                 (/home/strick/6809):00081         u000E    rmb   2                Ptr to object code buffer (256 bytes)
0010.                 (/home/strick/6809):00082         u0010    rmb   2                Ptr to symbol first letter index table
0012.                 (/home/strick/6809):00083         u0012    rmb   2                Ptr to end of symbol table
0014.                 (/home/strick/6809):00084         u0014    rmb   2                Ptr to end of listing buffer
0016.                 (/home/strick/6809):00085         u0016    rmb   2                Ptr to symbol name buffer (8 chars + nul)
0018.                 (/home/strick/6809):00086         u0018    rmb   1                Path number of current source file
0019.                 (/home/strick/6809):00087         u0019    rmb   1                Path number of object file, O flag
001A.                 (/home/strick/6809):00088         u001A    rmb   1                Path number of output listing (stdout)
001B.                 (/home/strick/6809):00089         u001B    rmb   2                Ptr into object code buffer
001D.                 (/home/strick/6809):00090         u001D    rmb   2                Ptr to next empty symbol table slot
001F.                 (/home/strick/6809):00091         u001F    rmb   2                Open file path stack ptr
0021.                 (/home/strick/6809):00092         u0021    rmb   1                Error count for current line
0022.                 (/home/strick/6809):00093         u0022    rmb   2                Total warnings
0024.                 (/home/strick/6809):00094         u0024    rmb   2                Total program bytes generated
0026.                 (/home/strick/6809):00095         u0026    rmb   2                Total data bytes allocated
0028.                 (/home/strick/6809):00096         u0028    rmb   2                Total errors
002A.                 (/home/strick/6809):00097         u002A    rmb   1
002B.                 (/home/strick/6809):00098         u002B    rmb   1                Listing Print Control Bit flags
002C.                 (/home/strick/6809):00099         u002C    rmb   1                Data space ops in current line
002D.                 (/home/strick/6809):00100         u002D    rmb   2                Ptr to last symbol found/added (scratch)
002F.                 (/home/strick/6809):00101         u002F    rmb   2                Ptr to start of current mnemonic
0031.                 (/home/strick/6809):00102         u0031    rmb   2                Ptr to next field (or operand start)
0033.                 (/home/strick/6809):00103         u0033    rmb   2
0035.                 (/home/strick/6809):00104         u0035    rmb   1                # lines to end of page
0036.                 (/home/strick/6809):00105         u0036    rmb   1                Page height (default=66), D flag
0037.                 (/home/strick/6809):00106         u0037    rmb   1                Page width (default=80), W flag
0038.                 (/home/strick/6809):00107         u0038    rmb   2                line counter
003A.                 (/home/strick/6809):00108         u003A    rmb   2                page number
003C.                 (/home/strick/6809):00109         u003C    rmb   1
003D.                 (/home/strick/6809):00110         u003D    rmb   1
003E.                 (/home/strick/6809):00111         u003E    rmb   1                Pass counter
003F.                 (/home/strick/6809):00112         u003F    rmb   1
0040.                 (/home/strick/6809):00113         u0040    rmb   2                Current code address ('*')
0042.                 (/home/strick/6809):00114         u0042    rmb   2                Current data address ('.')
0044.                 (/home/strick/6809):00115         u0044    rmb   2
0046.                 (/home/strick/6809):00116         u0046    rmb   1                # bytes in current instruction
0047.                 (/home/strick/6809):00117         u0047    rmb   1                Current instructions flags/index handler byte
0048.                 (/home/strick/6809):00118         u0048    rmb   1
0049.                 (/home/strick/6809):00119         u0049    rmb   1
004A.                 (/home/strick/6809):00120         u004A    rmb   1                MSB of 16 bit # (for addresses & offsets)
004B.                 (/home/strick/6809):00121         u004B    rmb   1                LSB of 16 bit #
004C.                 (/home/strick/6809):00122         u004C    rmb   1                Flag for DP($ff), Extended($01) or other($00) modes
004D.                 (/home/strick/6809):00123         u004D    rmb   1                Indirect mode flag (0=no, >0=Yes)
004E.                 (/home/strick/6809):00124         u004E    rmb   1                Indexed mode calc completed flag (0=no)
004F.                 (/home/strick/6809):00125         u004F    rmb   1                Warning count for current line
0050.                 (/home/strick/6809):00126         u0050    rmb   1                Header parity byte
0051.                 (/home/strick/6809):00127         u0051    rmb   3                CRC buffer
0054.                 (/home/strick/6809):00128         u0054    rmb   1                Inactive (non-coding) nested IF depth
0055.                 (/home/strick/6809):00129         u0055    rmb   1                Active (code enabled) nested IF depth
0056.                 (/home/strick/6809):00130         u0056    rmb   1
0057.                 (/home/strick/6809):00131         u0057    rmb   1
0058.                 (/home/strick/6809):00132         u0058    rmb   1                O opt flag
0059.                 (/home/strick/6809):00133         u0059    rmb   1                F opt flag
005A.                 (/home/strick/6809):00134         u005A    rmb   1                M opt flag
005B.                 (/home/strick/6809):00135         u005B    rmb   1                G opt flag
005C.                 (/home/strick/6809):00136         u005C    rmb   1                E opt flag
005D.                 (/home/strick/6809):00137         u005D    rmb   1                I opt flag
005E.                 (/home/strick/6809):00138         u005E    rmb   1                S opt flag
005F.                 (/home/strick/6809):00139         u005F    rmb   1                C opt flag
0060.                 (/home/strick/6809):00140         u0060    rmb   1                N opt flag
                      (/home/strick/6809):00141         * The currently assembled instruction goes here
0061.                 (/home/strick/6809):00142         u0061    rmb   1              Current instruction's pre-byte (see u0046)
0062.                 (/home/strick/6809):00143         u0062    rmb   1              Current instruction's opcode
0063.                 (/home/strick/6809):00144         u0063    rmb   1              More bytes as needed by instruction
0064.                 (/home/strick/6809):00145         u0064    rmb   1
0065.                 (/home/strick/6809):00146         u0065    rmb   2
0067.                 (/home/strick/6809):00147                  rmb   4096-.         Main buffer area
     1000             (/home/strick/6809):00148         size     equ   .
     000D             (/home/strick/6809):00149         name     equ   *
000D 4173ED           (/home/strick/6809):00150                  fcs   /Asm/
0010 0A               (/home/strick/6809):00151                  fcb   edition
0011 1F30             (/home/strick/6809):00152         asm      tfr   u,d
0013 C301C0           (/home/strick/6809):00153                  addd  #$01C0           allocate local stack
0016 1F04             (/home/strick/6809):00154                  tfr   d,s
0018 DD16             (/home/strick/6809):00155                  std   <u0016
001A C30009           (/home/strick/6809):00156                  addd  #9               symbol name buffer (8 char+null)
001D DD00             (/home/strick/6809):00157                  std   <u0000         Start of current line in source ($1C9)
001F C30051           (/home/strick/6809):00158                  addd  #81              source buffer (120 char+CR, overlaps hdr buf)
0022 DD02             (/home/strick/6809):00159                  std   <u0002
0024 C30085           (/home/strick/6809):00160                  addd  #133             header buffer (132 char+CR)
0027 DD04             (/home/strick/6809):00161                  std   <u0004         Start of listing buffer
0029 C30084           (/home/strick/6809):00162                  addd  #133-1           point to end of listbuf (132 char+CR)
002C DD14             (/home/strick/6809):00163                  std   <u0014           to detect buffer overruns
002E C3000E           (/home/strick/6809):00164                  addd  #13+1            allocate open path stack (+CR for listbuf)
0031 DD06             (/home/strick/6809):00165                  std   <u0006
0033 DD1F             (/home/strick/6809):00166                  std   <u001F
0035 DD08             (/home/strick/6809):00167                  std   <u0008
0037 C30050           (/home/strick/6809):00168                  addd  #80              TITLE buffer (79 char+null)
003A DD0A             (/home/strick/6809):00169                  std   <u000A
003C C30028           (/home/strick/6809):00170                  addd  #40              NAME buffer (39 char+null)
003F DD0E             (/home/strick/6809):00171                  std   <u000E
0041 8B01             (/home/strick/6809):00172                  adda  #1               allocate 256-byte code buffer
0043 DD10             (/home/strick/6809):00173                  std   <u0010
                      (/home/strick/6809):00174                 IFNE  DOCASE
0045 C30068           (/home/strick/6809):00175                  addd  #52*2            52 symbol vectors, A-Za-z
                      (/home/strick/6809):00176                 ELSE
                      (/home/strick/6809):00177                  addd  #26*2            26 symbol vectors, A-Z
                      (/home/strick/6809):00178                 ENDC  DOCASE
0048 DD1D             (/home/strick/6809):00179                  std   <u001D           start of symbol table
004A 333F             (/home/strick/6809):00180                  leau  -$01,y
004C DF12             (/home/strick/6809):00181                  stu   <u0012           end of symbol table
004E 4F               (/home/strick/6809):00182                  clra
004F C601             (/home/strick/6809):00183                  ldb   #$01
0051 9759             (/home/strick/6809):00184                  sta   <u0059           F opt=0
0053 975B             (/home/strick/6809):00185                  sta   <u005B           G opt=0
0055 975E             (/home/strick/6809):00186                  sta   <u005E           S opt=0
0057 975D             (/home/strick/6809):00187                  sta   <u005D           I opt=0
0059 D75C             (/home/strick/6809):00188                  stb   <u005C           E opt=1
005B 9758             (/home/strick/6809):00189                  sta   <u0058           O opt=0
005D 975A             (/home/strick/6809):00190                  sta   <u005A           M opt=0
005F D75F             (/home/strick/6809):00191                  stb   <u005F           C opt=1
0061 9760             (/home/strick/6809):00192                  sta   <u0060           N opt=0
0063 973E             (/home/strick/6809):00193                  sta   <u003E
0065 9718             (/home/strick/6809):00194                  sta   <u0018
0067 9719             (/home/strick/6809):00195                  sta   <u0019
0069 D71A             (/home/strick/6809):00196                  stb   <u001A
006B C6FF             (/home/strick/6809):00197                  ldb   #$FF
006D D756             (/home/strick/6809):00198                  stb   <u0056
006F 9757             (/home/strick/6809):00199                  sta   <u0057
0071 C642             (/home/strick/6809):00200                  ldb   #66            Default page height
0073 D736             (/home/strick/6809):00201                  stb   <u0036
0075 C64F             (/home/strick/6809):00202                  ldb   #79            Default page width
0077 D737             (/home/strick/6809):00203                  stb   <u0037
                      (/home/strick/6809):00204                 IFNE  DOCASE
0079 C67F             (/home/strick/6809):00205                  ldb   #$7F             Default symbol case mask
007B D70D             (/home/strick/6809):00206                  stb   <u000D
                      (/home/strick/6809):00207                 ENDC  DOCASE
007D 171A31           (/home/strick/6809):00208                  lbsr  L1696
0080 9656             (/home/strick/6809):00209                  lda   <u0056
0082 2B02             (/home/strick/6809):00210                  bmi   L0081
0084 0C57             (/home/strick/6809):00211                  inc   <u0057
0086 9E08             (/home/strick/6809):00212         L0081    ldx   <u0008
0088 6F84             (/home/strick/6809):00213                  clr   ,x
008A 9E0A             (/home/strick/6809):00214                  ldx   <u000A
008C 6F84             (/home/strick/6809):00215                  clr   ,x
008E 9E10             (/home/strick/6809):00216                  ldx   <u0010
0090 6F80             (/home/strick/6809):00217         L008B    clr   ,x+              clear symbol table
0092 9C12             (/home/strick/6809):00218                  cmpx  <u0012
0094 23FA             (/home/strick/6809):00219                  bls   L008B
0096 D65D             (/home/strick/6809):00220                  ldb   <u005D
0098 2704             (/home/strick/6809):00221                  beq   L0099
009A 0A3E             (/home/strick/6809):00222                  dec   <u003E
009C 2007             (/home/strick/6809):00223                  bra   L00A0
009E 8D0A             (/home/strick/6809):00224         L0099    bsr   L00A5
00A0 17197F           (/home/strick/6809):00225                  lbsr  L1607            seek to start of source file
00A3 0C3E             (/home/strick/6809):00226                  inc   <u003E
00A5 8D03             (/home/strick/6809):00227         L00A0    bsr   L00A5
00A7 161915           (/home/strick/6809):00228                  lbra  L159F
00AA 8D0A             (/home/strick/6809):00229         L00A5    bsr   L00B1
00AC 17183A           (/home/strick/6809):00230         L00A7    lbsr  L1537
00AF 2401             (/home/strick/6809):00231                  bcc   L00AD
00B1 39               (/home/strick/6809):00232                  rts
00B2 8D26             (/home/strick/6809):00233         L00AD    bsr   L00D5
00B4 20F6             (/home/strick/6809):00234                  bra   L00A7
00B6 4F               (/home/strick/6809):00235         L00B1    clra
00B7 5F               (/home/strick/6809):00236                  clrb
00B8 DD28             (/home/strick/6809):00237                  std   <u0028
00BA DD22             (/home/strick/6809):00238                  std   <u0022
00BC DD26             (/home/strick/6809):00239                  std   <u0026
00BE DD24             (/home/strick/6809):00240                  std   <u0024
00C0 DD40             (/home/strick/6809):00241                  std   <u0040
00C2 DD42             (/home/strick/6809):00242                  std   <u0042
00C4 D73F             (/home/strick/6809):00243                  stb   <u003F
00C6 D755             (/home/strick/6809):00244                  stb   <u0055
00C8 D754             (/home/strick/6809):00245                  stb   <u0054
00CA 5C               (/home/strick/6809):00246                  incb
00CB DD3A             (/home/strick/6809):00247                  std   <u003A
00CD DD38             (/home/strick/6809):00248                  std   <u0038
00CF DC0E             (/home/strick/6809):00249                  ldd   <u000E
00D1 DD1B             (/home/strick/6809):00250                  std   <u001B
00D3 171680           (/home/strick/6809):00251                  lbsr  L1360            Initialize CRC buffer
00D6 171753           (/home/strick/6809):00252                  lbsr  L141A
00D9 39               (/home/strick/6809):00253                  rts
00DA 4F               (/home/strick/6809):00254         L00D5    clra
00DB 5F               (/home/strick/6809):00255                  clrb
00DC DD4A             (/home/strick/6809):00256                  std   <u004A
00DE DD61             (/home/strick/6809):00257                  std   <u0061         Clear prefix opcode & opcode bytes
00E0 DD63             (/home/strick/6809):00258                  std   <u0063
00E2 DD65             (/home/strick/6809):00259                  std   <u0065
00E4 9746             (/home/strick/6809):00260                  sta   <u0046         Clear # bytes for current instruction
00E6 972A             (/home/strick/6809):00261                  sta   <u002A
00E8 9721             (/home/strick/6809):00262                  sta   <u0021
00EA 974C             (/home/strick/6809):00263                  sta   <u004C         Default memory addressing mode to indexed
00EC 972C             (/home/strick/6809):00264                  sta   <u002C
00EE 974F             (/home/strick/6809):00265                  sta   <u004F
00F0 974E             (/home/strick/6809):00266                  sta   <u004E
00F2 974D             (/home/strick/6809):00267                  sta   <u004D
00F4 8635             (/home/strick/6809):00268                  lda   #Operand+Command+NoObjct+PrintPC
00F6 972B             (/home/strick/6809):00269                  sta   <u002B         Initialize flags
00F8 DC40             (/home/strick/6809):00270                  ldd   <u0040
00FA DD44             (/home/strick/6809):00271                  std   <u0044
                      (/home/strick/6809):00272         * Parse for label field
00FC 9E00             (/home/strick/6809):00273                  ldx   <u0000         Get ptr to start of line
00FE A684             (/home/strick/6809):00274                  lda   ,x             Get char
0100 810D             (/home/strick/6809):00275                  cmpa  #$0D           Blank line?
0102 2737             (/home/strick/6809):00276                  beq   L0136          Yes, go ahead
0104 812A             (/home/strick/6809):00277                  cmpa  #'*            Comment line?
0106 2733             (/home/strick/6809):00278                  beq   L0136          Ditto
0108 8120             (/home/strick/6809):00279                  cmpa  #$20           Space? (No label field)
010A 271E             (/home/strick/6809):00280                  beq   L0125          Yes, go somewhere else
                      (/home/strick/6809):00281         * Label field found
010C D62B             (/home/strick/6809):00282                  ldb   <u002B         Set Label Present flag
010E CA08             (/home/strick/6809):00283                  orb   #Label
0110 D72B             (/home/strick/6809):00284                  stb   <u002B
0112 170239           (/home/strick/6809):00285                  lbsr  L0368            copy label to symbol name buffer
0115 2407             (/home/strick/6809):00286                  bcc   L0119
0117 C601             (/home/strick/6809):00287                  ldb   #01              'bad label' error
0119 1701D8           (/home/strick/6809):00288                  lbsr  L02FA
011C 200C             (/home/strick/6809):00289                  bra   L0125
011E 0D54             (/home/strick/6809):00290         L0119    tst   <u0054
0120 2608             (/home/strick/6809):00291                  bne   L0125
0122 17123D           (/home/strick/6809):00292                  lbsr  L0F4A            add label to symbol table
0125 2403             (/home/strick/6809):00293                  bcc   L0125
0127 1701CA           (/home/strick/6809):00294                  lbsr  L02FA            if add failed, report error
                      (/home/strick/6809):00295         * Check for mnemonic field
012A 171439           (/home/strick/6809):00296         L0125    lbsr  L1164          Find start of next field & get first char
012D 810D             (/home/strick/6809):00297                  cmpa  #$0D           End of line yet?
012F 2615             (/home/strick/6809):00298                  bne   L0141          No, have ptr to mnemonic field
0131 962B             (/home/strick/6809):00299                  lda   <u002B         Get flags
0133 8508             (/home/strick/6809):00300                  bita  #Label         Was a label present?
0135 2704             (/home/strick/6809):00301                  beq   L0136          No, print whole source line as literal comment
0137 8609             (/home/strick/6809):00302                  lda   #Label+PrintPC Set Label & Print PC flags (label on line by
0139 2002             (/home/strick/6809):00303                  bra   L0138            itself)
                      (/home/strick/6809):00304         
013B 8680             (/home/strick/6809):00305         L0136    lda   #LitLine       Whole line is comment flag
013D 972B             (/home/strick/6809):00306         L0138    sta   <u002B         Save flags
013F 9654             (/home/strick/6809):00307                  lda   <u0054
0141 2650             (/home/strick/6809):00308                  bne   L018E
0143 1600B1           (/home/strick/6809):00309                  lbra  L01F2
                      (/home/strick/6809):00310         * Process mnemonic field
0146 9F2F             (/home/strick/6809):00311         L0141    stx   <u002F         Save ptr to start of current mnemonic
0148 A680             (/home/strick/6809):00312         L0143    lda   ,x+            Get char
014A 810D             (/home/strick/6809):00313                  cmpa  #$0D           CR?
014C 2707             (/home/strick/6809):00314                  beq   L0150          Yes, done line
014E 8120             (/home/strick/6809):00315                  cmpa  #$20           Space?
0150 26F6             (/home/strick/6809):00316                  bne   L0143          No, continue getting chars
0152 171411           (/home/strick/6809):00317                  lbsr  L1164          Find start of next field
0155 9F31             (/home/strick/6809):00318         L0150    stx   <u0031         Save ptr to possible operand field
0157 9E2F             (/home/strick/6809):00319                  ldx   <u002F         Pointer to start of current op. in source code
0159 C6A2             (/home/strick/6809):00320                  ldb   #Numop         # of instructions in main table
015B 318D023C         (/home/strick/6809):00321                  leay  >L03B8,pc      Point to main opcode/pseudo-op table
015F 1701C8           (/home/strick/6809):00322                  lbsr  L0344          Go point to it's opcode/flag bytes
0162 2413             (/home/strick/6809):00323                  bcc   L0172          Legal opcode, go process
                      (/home/strick/6809):00324         * Unknown mnemonic
0164 C602             (/home/strick/6809):00325         L015F    ldb   #02              'bad instr' error
0166 17018B           (/home/strick/6809):00326                  lbsr  L02FA          Print error message
0169 C603             (/home/strick/6809):00327                  ldb   #$03           Set # bytes of current instruction to 3???
016B D746             (/home/strick/6809):00328                  stb   <u0046
016D 962B             (/home/strick/6809):00329                  lda   <u002B
016F 84DF             (/home/strick/6809):00330                  anda  #^Operand      Shut off operand present flag
0171 972B             (/home/strick/6809):00331                  sta   <u002B
0173 9E31             (/home/strick/6809):00332                  ldx   <u0031         Get ptr to next field & skip ahead
0175 2052             (/home/strick/6809):00333                  bra   L01C4
                      (/home/strick/6809):00334         * Found mnemonic
                      (/home/strick/6809):00335         * Entry: Y=Ptr to opcode/flag bytes
0177 9654             (/home/strick/6809):00336         L0172    lda   <u0054         # of nested IF constructs???
0179 271F             (/home/strick/6809):00337                  beq   L0195          If none, skip ahead???
017B E621             (/home/strick/6809):00338                  ldb   $01,y          Get flag bytes
017D C40F             (/home/strick/6809):00339                  andb  #%00001111     Only want index handler #
017F C10D             (/home/strick/6809):00340                  cmpb  #$0D           Pseudo op IFxx?
0181 2603             (/home/strick/6809):00341                  bne   L0181          No, check next
0183 4C               (/home/strick/6809):00342                  inca                 Inc nested conditional counter?
0184 200B             (/home/strick/6809):00343                  bra   L018C          Go save it & continue
0186 C10E             (/home/strick/6809):00344         L0181    cmpb  #$0E           Pseudo Op ELSE/ENDC?
0188 2609             (/home/strick/6809):00345                  bne   L018E          No, check next
018A 4A               (/home/strick/6809):00346                  deca                 Dec nested loop counter?
018B 270D             (/home/strick/6809):00347                  beq   L0195          If down to zero, skip ahead
018D E6A4             (/home/strick/6809):00348                  ldb   ,y             Get opcode byte
018F 2602             (/home/strick/6809):00349                  bne   L018E          If ELSE, skip ahead
0191 9754             (/home/strick/6809):00350         L018C    sta   <u0054         Save updated nested loop counter?
0193 0C39             (/home/strick/6809):00351         L018E    inc   <u0038+1         lsb
0195 2602             (/home/strick/6809):00352                  bne   L0194
0197 0C38             (/home/strick/6809):00353                  inc   <u0038           msb
0199 39               (/home/strick/6809):00354         L0194    rts
                      (/home/strick/6809):00355         
                      (/home/strick/6809):00356         * Calculate pre-bytes if needed (or known yet in 6309's case)
019A ECA4             (/home/strick/6809):00357         L0195    ldd   ,y             Get opcode/flag bytes
019C 9762             (/home/strick/6809):00358                  sta   <u0062         Save opcode
019E D747             (/home/strick/6809):00359                  stb   <u0047         Save flags/index handler nibbles
01A0 8610             (/home/strick/6809):00360                  lda   #$10           Preload $10 prefix
01A2 C510             (/home/strick/6809):00361                  bitb  #$10           Does this opcode require it?
01A4 2606             (/home/strick/6809):00362                  bne   L01A7          Yes, go store before normal opcode byte
01A6 8611             (/home/strick/6809):00363                  lda   #$11           Preload $11 prefix
01A8 C520             (/home/strick/6809):00364                  bitb  #$20           Does this opcode require it?
01AA 2704             (/home/strick/6809):00365                  beq   L01AB          No prefix needed, skip ahead
01AC 9761             (/home/strick/6809):00366         L01A7    sta   <u0061         Save prebyte
01AE 0C46             (/home/strick/6809):00367                  inc   <u0046         Increase byte count of current instruction
                      (/home/strick/6809):00368         
                      (/home/strick/6809):00369         * Call proper index handler
01B0 318D06BF         (/home/strick/6809):00370         L01AB    leay  >L0780,pc      Point to 'opcode type' index
01B4 C40F             (/home/strick/6809):00371                  andb  #%00001111     Mask out non-index information
01B6 58               (/home/strick/6809):00372                  lslb                 adjust for 2 bytes per offset entry
01B7 ECA5             (/home/strick/6809):00373                  ldd   b,y            Get offset
01B9 ADAB             (/home/strick/6809):00374                  jsr   d,y            Execute routine
01BB 962B             (/home/strick/6809):00375                  lda   <u002B         Operand present flag set?
01BD 8520             (/home/strick/6809):00376                  bita  #Operand
01BF 2708             (/home/strick/6809):00377                  beq   L01C4          No, skip ahead
01C1 A684             (/home/strick/6809):00378                  lda   ,x             Get next char in source code
01C3 6F80             (/home/strick/6809):00379                  clr   ,x+            Clear that char in source line
01C5 810D             (/home/strick/6809):00380                  cmpa  #$0D           Was it a CR?
01C7 270F             (/home/strick/6809):00381                  beq   L01D3          Yes, skip ahead
01C9 17139A           (/home/strick/6809):00382         L01C4    lbsr  L1164          Find next field
01CC 810D             (/home/strick/6809):00383                  cmpa  #$0D           End of line?
01CE 2708             (/home/strick/6809):00384                  beq   L01D3          Yes, skip ahead
01D0 D62B             (/home/strick/6809):00385                  ldb   <u002B         Get flags
01D2 2704             (/home/strick/6809):00386                  beq   L01D3          If do nothing, skip ahead
01D4 CA40             (/home/strick/6809):00387                  orb   #Comment       Set Comment field present flag
01D6 D72B             (/home/strick/6809):00388                  stb   <u002B
01D8 D65D             (/home/strick/6809):00389         L01D3    ldb   <u005D         Interactive command line option set?
01DA 2704             (/home/strick/6809):00390                  beq   L01DB            No
01DC D621             (/home/strick/6809):00391                  ldb   <u0021
01DE 2617             (/home/strick/6809):00392                  bne   L01F2
01E0 DC40             (/home/strick/6809):00393         L01DB    ldd   <u0040
01E2 DB46             (/home/strick/6809):00394                  addb  <u0046
01E4 8900             (/home/strick/6809):00395                  adca  #$00
01E6 DD40             (/home/strick/6809):00396                  std   <u0040
01E8 200D             (/home/strick/6809):00397                  bra   L01F2
                      (/home/strick/6809):00398         * Pre-fill listing buffer with spaces
01EA CC2084           (/home/strick/6809):00399         L01E5    ldd   #$2084           A=space, B=132 (listing buffer width)
01ED 9E04             (/home/strick/6809):00400                  ldx   <u0004
01EF A780             (/home/strick/6809):00401         L01EA    sta   ,x+
01F1 5A               (/home/strick/6809):00402                  decb
01F2 26FB             (/home/strick/6809):00403                  bne   L01EA
01F4 9E04             (/home/strick/6809):00404         L01EF    ldx   <u0004
01F6 39               (/home/strick/6809):00405                  rts
                      (/home/strick/6809):00406         
01F7 D63E             (/home/strick/6809):00407         L01F2    ldb   <u003E
01F9 27F9             (/home/strick/6809):00408                  beq   L01EF
01FB D62B             (/home/strick/6809):00409                  ldb   <u002B           Any flags set?
01FD 27F5             (/home/strick/6809):00410                  beq   L01EF            No
01FF 8DE9             (/home/strick/6809):00411                  bsr   L01E5
0201 0D60             (/home/strick/6809):00412                  tst   <u0060
0203 2605             (/home/strick/6809):00413                  bne   L0205
0205 DC38             (/home/strick/6809):00414                  ldd   <u0038
0207 17128E           (/home/strick/6809):00415                  lbsr  L1084
020A D62B             (/home/strick/6809):00416         L0205    ldb   <u002B           Literal line flag set?
020C C580             (/home/strick/6809):00417                  bitb  #LitLine
020E 2708             (/home/strick/6809):00418                  beq   L0213
0210 C60D             (/home/strick/6809):00419                  ldb   #13              Yes, set to column 13
0212 109E00           (/home/strick/6809):00420                  ldy   <u0000           Point to source buffer
0215 160094           (/home/strick/6809):00421                  lbra  L02AB            copy entire line to list buf
0218 C501             (/home/strick/6809):00422         L0213    bitb  #PrintPC
021A 2729             (/home/strick/6809):00423                  beq   L0240
021C 8645             (/home/strick/6809):00424                  lda   #'E
021E D621             (/home/strick/6809):00425                  ldb   <u0021           Any errors this line?
0220 2612             (/home/strick/6809):00426                  bne   L022F
0222 8644             (/home/strick/6809):00427                  lda   #'D
0224 D62C             (/home/strick/6809):00428                  ldb   <u002C           Any Data space ops this line?
0226 260C             (/home/strick/6809):00429                  bne   L022F
0228 8657             (/home/strick/6809):00430                  lda   #'W
022A D64F             (/home/strick/6809):00431                  ldb   <u004F           Any warnings this line?
022C 270D             (/home/strick/6809):00432                  beq   L0236
022E 0C23             (/home/strick/6809):00433                  inc   <u0022+1         lsb
0230 2602             (/home/strick/6809):00434                  bne   L022F
0232 0C22             (/home/strick/6809):00435                  inc   <u0022           msb
0234 C606             (/home/strick/6809):00436         L022F    ldb   #$06
0236 1700A5           (/home/strick/6809):00437                  lbsr  L02E2
0239 A784             (/home/strick/6809):00438                  sta   ,x
023B C608             (/home/strick/6809):00439         L0236    ldb   #$08
023D 17009E           (/home/strick/6809):00440                  lbsr  L02E2
0240 DC44             (/home/strick/6809):00441                  ldd   <u0044
0242 171226           (/home/strick/6809):00442                  lbsr  L1057            call OUT4HS (print Address)
0245 D62B             (/home/strick/6809):00443         L0240    ldb   <u002B
0247 C504             (/home/strick/6809):00444                  bitb  #NoObjct         Object bytes to print?
0249 272C             (/home/strick/6809):00445                  beq   L0272
024B D646             (/home/strick/6809):00446                  ldb   <u0046           check # bytes in current instruction
024D 2728             (/home/strick/6809):00447                  beq   L0272
024F C661             (/home/strick/6809):00448                  ldb   #u0061           DP addr of instruction buffer
0251 1FB8             (/home/strick/6809):00449                  tfr   dp,a
0253 1F03             (/home/strick/6809):00450                  tfr   d,u              U=ptr to instruction buffer
0255 E6C0             (/home/strick/6809):00451                  ldb   ,u+              Is there a prebyte?
0257 2602             (/home/strick/6809):00452                  bne   L0256            Yes, start there
0259 E6C0             (/home/strick/6809):00453         L0254    ldb   ,u+
025B 3404             (/home/strick/6809):00454         L0256    pshs  b
025D 17121F           (/home/strick/6809):00455                  lbsr  L106B
0260 3502             (/home/strick/6809):00456                  puls  a
0262 D65D             (/home/strick/6809):00457                  ldb   <u005D
0264 2704             (/home/strick/6809):00458                  beq   L0265
0266 D621             (/home/strick/6809):00459                  ldb   <u0021
0268 2609             (/home/strick/6809):00460                  bne   L026E
026A 171496           (/home/strick/6809):00461         L0265    lbsr  L130D            add byte to the code buffer
026D 0C25             (/home/strick/6809):00462                  inc   <u0024+1         update generated bytecount lsb
026F 2602             (/home/strick/6809):00463                  bne   L026E
0271 0C24             (/home/strick/6809):00464                  inc   <u0024           and msb
0273 0A46             (/home/strick/6809):00465         L026E    dec   <u0046
0275 26E2             (/home/strick/6809):00466                  bne   L0254
0277 109E00           (/home/strick/6809):00467         L0272    ldy   <u0000
027A D62B             (/home/strick/6809):00468                  ldb   <u002B
027C C508             (/home/strick/6809):00469                  bitb  #Label           Label field to print?
027E 2706             (/home/strick/6809):00470                  beq   L0281
0280 C618             (/home/strick/6809):00471                  ldb   #24              Yes, set to column 24
0282 8D5A             (/home/strick/6809):00472                  bsr   L02E2            Update listing ptr
0284 8D3F             (/home/strick/6809):00473                  bsr   L02C9
0286 D62B             (/home/strick/6809):00474         L0281    ldb   <u002B
0288 C510             (/home/strick/6809):00475                  bitb  #Command         Mnemonic field to print?
028A 2708             (/home/strick/6809):00476                  beq   L028F
028C C621             (/home/strick/6809):00477                  ldb   #33              Yes, set to column 33
028E 8D4E             (/home/strick/6809):00478                  bsr   L02E2            Update listing ptr
0290 8D33             (/home/strick/6809):00479                  bsr   L02C9
0292 3121             (/home/strick/6809):00480                  leay  $01,y
0294 D62B             (/home/strick/6809):00481         L028F    ldb   <u002B
0296 C520             (/home/strick/6809):00482                  bitb  #Operand         Operand field to print?
0298 270A             (/home/strick/6809):00483                  beq   L02A3
029A C627             (/home/strick/6809):00484                  ldb   #39              Yes, set to column 39
029C 8D40             (/home/strick/6809):00485                  bsr   L02E2            Update listing ptr
029E 109E31           (/home/strick/6809):00486                  ldy   <u0031
02A1 17156D           (/home/strick/6809):00487                  lbsr  L11BD
02A4 D62B             (/home/strick/6809):00488         L02A3    ldb   <u002B
02A6 C540             (/home/strick/6809):00489                  bitb  #Comment         Comment field to print?
02A8 270B             (/home/strick/6809):00490                  beq   L02B9
02AA C632             (/home/strick/6809):00491                  ldb   #50              Yes, set to column 50
                      (/home/strick/6809):00492         * Copy comment field to listing buffer
02AC 8D30             (/home/strick/6809):00493         L02AB    bsr   L02E2            Update listing ptr
02AE 8D15             (/home/strick/6809):00494                  bsr   L02C9            skip leading spaces, copy first word
02B0 17155E           (/home/strick/6809):00495                  lbsr  L11BD            copy rest of comment
02B3 D62B             (/home/strick/6809):00496         L02B7    ldb   <u002B
02B5 C4BF             (/home/strick/6809):00497         L02B9    andb  #^Comment
02B7 C104             (/home/strick/6809):00498                  cmpb  #NoObjct
02B9 2709             (/home/strick/6809):00499                  beq   L02C8
02BB 1714A8           (/home/strick/6809):00500                  lbsr  L1370
02BE 0C39             (/home/strick/6809):00501                  inc   <u0038+1         lsb
02C0 2602             (/home/strick/6809):00502                  bne   L02C8
02C2 0C38             (/home/strick/6809):00503                  inc   <u0038           msb
02C4 39               (/home/strick/6809):00504         L02C8    rts
                      (/home/strick/6809):00505         
                      (/home/strick/6809):00506         * copy whitespace-delimited text to print buffer
02C5 A6A0             (/home/strick/6809):00507         L02C9    lda   ,y+
02C7 8120             (/home/strick/6809):00508                  cmpa  #C$SPAC          skip leading spaces
02C9 27FA             (/home/strick/6809):00509                  beq   L02C9
02CB 810D             (/home/strick/6809):00510         L02CF    cmpa  #C$CR
02CD 270C             (/home/strick/6809):00511                  beq   L02DF
02CF 9C14             (/home/strick/6809):00512                  cmpx  <u0014           end of buffer?
02D1 2402             (/home/strick/6809):00513                  bhs   L02D9            yes, stop copying
02D3 A780             (/home/strick/6809):00514                  sta   ,x+
02D5 A6A0             (/home/strick/6809):00515         L02D9    lda   ,y+
02D7 8120             (/home/strick/6809):00516                  cmpa  #C$SPAC
02D9 26F0             (/home/strick/6809):00517                  bne   L02CF
02DB 313F             (/home/strick/6809):00518         L02DF    leay  -$01,y           rewind to terminating char
02DD 39               (/home/strick/6809):00519                  rts
                      (/home/strick/6809):00520         
                      (/home/strick/6809):00521         * Move listing buffer ptr to column [B], ignore if already past
02DE 3440             (/home/strick/6809):00522         L02E2    pshs  u
02E0 3001             (/home/strick/6809):00523                  leax  $01,x            Force at least ONE space
02E2 0D60             (/home/strick/6809):00524                  tst   <u0060           Narrow listing?
02E4 260C             (/home/strick/6809):00525                  bne   L02F8            Yes, single space only
02E6 DE04             (/home/strick/6809):00526         L02EC    ldu   <u0004           Point to start of listing buffer
02E8 33C5             (/home/strick/6809):00527                  leau  b,u              Offset to column [B] (0-based)
02EA 3440             (/home/strick/6809):00528                  pshs  u                Compare new offset
02EC ACE1             (/home/strick/6809):00529                  cmpx  ,s++             With current offset
02EE 2402             (/home/strick/6809):00530                  bhs   L02F8            Already past, ignore
02F0 1F31             (/home/strick/6809):00531                  tfr   u,x              Update listing ptr
02F2 35C0             (/home/strick/6809):00532         L02F8    puls  pc,u
                      (/home/strick/6809):00533         
                      (/home/strick/6809):00534         * Error printing routine
                      (/home/strick/6809):00535         * Entry: B=Internal error # (table entry #)
02F4 3476             (/home/strick/6809):00536         L02FA    pshs  u,y,x,d        Preserve regs
02F6 0D5C             (/home/strick/6809):00537                  tst   <u005C
02F8 2726             (/home/strick/6809):00538                  beq   L0325
02FA 318D0412         (/home/strick/6809):00539                  leay  >L061C,pc      Point to '***** Error' string
02FE 9E04             (/home/strick/6809):00540                  ldx   <u0004
0300 17150E           (/home/strick/6809):00541                  lbsr  L11BD          Go print it
0303 4F               (/home/strick/6809):00542                  clra                 Table offset is B-1
0304 5A               (/home/strick/6809):00543                  decb
0305 58               (/home/strick/6809):00544                  lslb                 Adjust for 2 byte entries
0306 318D0414         (/home/strick/6809):00545                  leay  >L062A,pc      Point to some table
030A ECAB             (/home/strick/6809):00546                  ldd   d,y            Get 2 bytes @ offset D
030C 31AB             (/home/strick/6809):00547                  leay  d,y            Point to Y to offset
030E 171500           (/home/strick/6809):00548                  lbsr  L11BD          Go print actual error message
0311 E661             (/home/strick/6809):00549                  ldb   $01,s
0313 C118             (/home/strick/6809):00550                  cmpb  #$18
0315 2606             (/home/strick/6809):00551                  bne   L0322
0317 10AE62           (/home/strick/6809):00552                  ldy   $02,s
031A 1714F4           (/home/strick/6809):00553                  lbsr  L11BD
031D 17143E           (/home/strick/6809):00554         L0322    lbsr  L1368
0320 0C21             (/home/strick/6809):00555         L0325    inc   <u0021
0322 0C29             (/home/strick/6809):00556                  inc   <u0028+1         lsb
0324 2602             (/home/strick/6809):00557                  bne   L032D
0326 0C28             (/home/strick/6809):00558                  inc   <u0028           msb
0328 35F6             (/home/strick/6809):00559         L032D    puls  pc,u,y,x,d     Restore regs & return
                      (/home/strick/6809):00560         * unreferenced/dead code, commented out -RVH
                      (/home/strick/6809):00561         **         lbsr  L01E5
                      (/home/strick/6809):00562         **         ldb   #$18
                      (/home/strick/6809):00563         **         bsr   L02E2
                      (/home/strick/6809):00564         **         ldy   <u0000
                      (/home/strick/6809):00565         **         bra   L033D
                      (/home/strick/6809):00566         
                      (/home/strick/6809):00567         * L033D CR copy loop merged into L11BD code -RVH
                      (/home/strick/6809):00568         
                      (/home/strick/6809):00569         * Find opcode match
                      (/home/strick/6809):00570         * Entry: Y=Table ptr to look in for match
                      (/home/strick/6809):00571         *        X=Ptr to part of source we are currently checking
                      (/home/strick/6809):00572         *        B=# opcodes in current table
                      (/home/strick/6809):00573         * Exit: Carry set if no matching mnemonic found
                      (/home/strick/6809):00574         *       Carry clear & Y is ptr to opcode & flag bytes if match IS found
032A 3414             (/home/strick/6809):00575         L0344    pshs  x,b            Preserve source code ptr & # opcodes in table
032C A6A0             (/home/strick/6809):00576         L0346    lda   ,y+            Get byte from table
032E 2B14             (/home/strick/6809):00577                  bmi   L035E          If high bit set, skip ahead
0330 A880             (/home/strick/6809):00578                  eora  ,x+            Do characters match?
0332 84DF             (/home/strick/6809):00579                  anda  #$DF           Ignore case mismatch
0334 27F6             (/home/strick/6809):00580                  beq   L0346          If matches, keep doing until last character
0336 A6A0             (/home/strick/6809):00581         L0350    lda   ,y+            Doesn't match, search for end of current entry
0338 2AFC             (/home/strick/6809):00582                  bpl   L0350
033A 3122             (/home/strick/6809):00583         L0354    leay  $02,y          Skip opcode & flag bytes too
033C AE61             (/home/strick/6809):00584                  ldx   $01,s          Reset source code ptr to start of instruction
033E 5A               (/home/strick/6809):00585                  decb                 Dec # opcodes counter
033F 26EB             (/home/strick/6809):00586                  bne   L0346          Check until all are done
0341 53               (/home/strick/6809):00587                  comb                 All done, illegal opcode
0342 3594             (/home/strick/6809):00588                  puls  pc,x,b         Exit with error flag set
                      (/home/strick/6809):00589         * Matches so far, on last byte of text mnemonic
0344 A880             (/home/strick/6809):00590         L035E    eora  ,x+            Do last characters match?
0346 845F             (/home/strick/6809):00591                  anda  #$5F           Ignore case and high bit mismatch
0348 26F0             (/home/strick/6809):00592                  bne   L0354          Doesn't match, check next
034A 3263             (/home/strick/6809):00593                  leas  $03,s          Eat stack
034C 5F               (/home/strick/6809):00594                  clrb                 No error & return
034D 39               (/home/strick/6809):00595                  rts
                      (/home/strick/6809):00596         
                      (/home/strick/6809):00597         * Copy label field into symbol name buffer
                      (/home/strick/6809):00598         * First 8 characters of label MUST be unique
034E 171215           (/home/strick/6809):00599         L0368    lbsr  L1164
0351 8D33             (/home/strick/6809):00600                  bsr   L03A0            first char MUST be alphabetic
0353 2545             (/home/strick/6809):00601                  bcs   L03B7
0355 3460             (/home/strick/6809):00602                  pshs  u,y
0357 DE16             (/home/strick/6809):00603                  ldu   <u0016           symbol name buffer
0359 C608             (/home/strick/6809):00604                  ldb   #$08           Max # chars in label
035B 3001             (/home/strick/6809):00605                  leax  1,x            advance to 2nd char
                      (/home/strick/6809):00606         * A=letter, number, period, dollar sign or underscore
035D 5A               (/home/strick/6809):00607         L0393    decb                 Copy the first 8 chars
035E 2B02             (/home/strick/6809):00608                  bmi   L0379          But check them all
0360 A7C0             (/home/strick/6809):00609                  sta   ,u+            Store character in label buffer
                      (/home/strick/6809):00610         * Copy rest of label into buffer
0362 A680             (/home/strick/6809):00611         L0379    lda   ,x+            Get char
0364 8D20             (/home/strick/6809):00612                  bsr   L03A0          Check text chars
0366 24F5             (/home/strick/6809):00613                  bcc   L0393          Found one, skip special parsing
0368 815F             (/home/strick/6809):00614                  cmpa  #'_            Is it an underscore?
036A 27F1             (/home/strick/6809):00615                  beq   L0393          Yes, go process
036C 8140             (/home/strick/6809):00616                  cmpa  #'@            Is it an at sign?
036E 27ED             (/home/strick/6809):00617                  beq   L0393          Yes, go process
0370 8139             (/home/strick/6809):00618                  cmpa  #'9            Higher than a 9?
0372 220C             (/home/strick/6809):00619                  bhi   L039A          Yes, skip ahead
0374 8130             (/home/strick/6809):00620                  cmpa  #'0            Is it a number?
0376 24E5             (/home/strick/6809):00621                  bhs   L0393          Yes, go process
0378 812E             (/home/strick/6809):00622                  cmpa  #'.            Is it a period?
037A 27E1             (/home/strick/6809):00623                  beq   L0393          Yes, go process
037C 8124             (/home/strick/6809):00624                  cmpa  #'$            Is it a dollar sign?
037E 27DD             (/home/strick/6809):00625                  beq   L0393          Yes, go process
0380 301F             (/home/strick/6809):00626         L039A    leax  -1,x           No, rewind to non-label char
0382 6FC0             (/home/strick/6809):00627                  clr   ,u+            Append a NUL to symbol buf
0384 35E0             (/home/strick/6809):00628                  puls  pc,u,y         Restore regs & return
                      (/home/strick/6809):00629         
                      (/home/strick/6809):00630         * Test for alphabetic [A-Za-z] set carry if not (shorter & faster RVH)
0386 815A             (/home/strick/6809):00631         L03A0    cmpa  #'Z            Uppercase or less?
0388 2203             (/home/strick/6809):00632                  bhi   L03A7          No, check for lowercase
038A 8141             (/home/strick/6809):00633                  cmpa  #'A            Uppercase letter?
038C 39               (/home/strick/6809):00634                  rts                  return carry set if not A-Z
                      (/home/strick/6809):00635         
038D 817A             (/home/strick/6809):00636         L03A7    cmpa  #'z            Lowercase or less?
038F 2207             (/home/strick/6809):00637                  bhi   L03B5          No, above 'z'
0391 8161             (/home/strick/6809):00638                  cmpa  #'a            lowercase letter?
0393 2505             (/home/strick/6809):00639                  blo   L03B7          No, between 'Z' & 'a'
                      (/home/strick/6809):00640                 IFNE  DOCASE
0395 940D             (/home/strick/6809):00641                  anda  <u000D         Apply case mask
                      (/home/strick/6809):00642                 ELSE
                      (/home/strick/6809):00643                  anda  #$5F           Force to uppercase
                      (/home/strick/6809):00644                 ENDC  DOCASE
0397 39               (/home/strick/6809):00645                  rts
                      (/home/strick/6809):00646         
0398 1A01             (/home/strick/6809):00647         L03B5    orcc  #$01           Non-alphabetic, set carry & return
039A 39               (/home/strick/6809):00648         L03B7    rts
                      (/home/strick/6809):00649         
                      (/home/strick/6809):00650         * Opcode & Pseudo Opcode Table
                      (/home/strick/6809):00651         * Mnemonic words are high bit terminated
                      (/home/strick/6809):00652         * First numeric byte is the base opcode (before addressing modes considered)
                      (/home/strick/6809):00653         * 2nd is flags:
                      (/home/strick/6809):00654         * Least significiant 4 bits = index into handler table
                      (/home/strick/6809):00655         * 0= LBRA & LBSR (non comparitive long branches/no pre-byte)
                      (/home/strick/6809):00656         * 1= Immediate (no register options) ex. ORCC
                      (/home/strick/6809):00657         * 2= 16 bit register commands
                      (/home/strick/6809):00658         * 3= 8 bit register commands
                      (/home/strick/6809):00659         * 4= CLR, etc. Inherent (A,B,D,E,F,W all supported)
                      (/home/strick/6809):00660         * 5= 'Fixed' (register not negotiable) inherent commands
                      (/home/strick/6809):00661         * 6= LEAx - Indexed only
                      (/home/strick/6809):00662         * 7= Register to register (TFR,EXG) (now patched for dual size 0 register)
                      (/home/strick/6809):00663         * 8= Stack push/pull (except for W - it's done as type 5)
                      (/home/strick/6809):00664         * 9= 16 bit Relative comparitive branches setup flag
                      (/home/strick/6809):00665         * A= 8 bit Relative comparitive branches
                      (/home/strick/6809):00666         * B= Pseudo op
                      (/home/strick/6809):00667         * C= Pseudo op (label not allowed)
                      (/home/strick/6809):00668         * D= Pseudo op conditionals (IFxx)
                      (/home/strick/6809):00669         * E= Pseudo op (ELSE & ENDC)
                      (/home/strick/6809):00670         * F= 6309 bit ops (OIM,BAND,etc) (was UNUSED)
                      (/home/strick/6809):00671         * Most significiant 4 bits
                      (/home/strick/6809):00672         * %00010000 : $10 prefix byte always needed
                      (/home/strick/6809):00673         * %00100000 : $11 prefix byte always needed
                      (/home/strick/6809):00674         * %01000000 : Immediate mode illegal
                      (/home/strick/6809):00675         * %10000000 : Default to extended mode - not used??? RVH
                      (/home/strick/6809):00676         
039B 4F52C7           (/home/strick/6809):00677         L03B8    fcs   "ORG"
039E 000C             (/home/strick/6809):00678                  fcb   $00,$0C
03A0 454E44C3         (/home/strick/6809):00679                  fcs   "ENDC"
03A4 000E             (/home/strick/6809):00680                  fcb   $00,$0E
                      (/home/strick/6809):00681         * Long branches without prebyte
03A6 4C4252C1         (/home/strick/6809):00682                  fcs   "LBRA"
03AA 1600             (/home/strick/6809):00683                  fcb   $16,$00
03AC 4C4253D2         (/home/strick/6809):00684                  fcs   "LBSR"
03B0 1700             (/home/strick/6809):00685                  fcb   $17,$00
                      (/home/strick/6809):00686         * Immediate with no options for register names
03B2 4F5243C3         (/home/strick/6809):00687                  fcs   "ORCC"
03B6 1A01             (/home/strick/6809):00688                  fcb   $1A,$01
03B8 414E4443C3       (/home/strick/6809):00689                  fcs   "ANDCC"
03BD 1C01             (/home/strick/6809):00690                  fcb   $1C,$01
03BF 435741C9         (/home/strick/6809):00691                  fcs   "CWAI"
03C3 3C01             (/home/strick/6809):00692                  fcb   $3C,$01
03C5 4C444DC4         (/home/strick/6809):00693                  fcs   "LDMD"
03C9 3D21             (/home/strick/6809):00694                  fcb   $3d,$21
03CB 4249544DC4       (/home/strick/6809):00695                  fcs   "BITMD"
03D0 3C21             (/home/strick/6809):00696                  fcb   $3c,$21
                      (/home/strick/6809):00697         * Register to register commands (must be here since ADD would match too early)
03D2 414444D2         (/home/strick/6809):00698                  fcs   "ADDR"
03D6 3017             (/home/strick/6809):00699                  fcb   $30,$17
03D8 414443D2         (/home/strick/6809):00700                  fcs   "ADCR"
03DC 3117             (/home/strick/6809):00701                  fcb   $31,$17
03DE 535542D2         (/home/strick/6809):00702                  fcs   "SUBR"
03E2 3217             (/home/strick/6809):00703                  fcb   $32,$17
03E4 534243D2         (/home/strick/6809):00704                  fcs   "SBCR"
03E8 3317             (/home/strick/6809):00705                  fcb   $33,$17
03EA 414E44D2         (/home/strick/6809):00706                  fcs   "ANDR"
03EE 3417             (/home/strick/6809):00707                  fcb   $34,$17
03F0 4F52D2           (/home/strick/6809):00708                  fcs   "ORR"
03F3 3517             (/home/strick/6809):00709                  fcb   $35,$17
03F5 454F52D2         (/home/strick/6809):00710                  fcs   "EORR"
03F9 3617             (/home/strick/6809):00711                  fcb   $36,$17
03FB 434D50D2         (/home/strick/6809):00712                  fcs   "CMPR"
03FF 3717             (/home/strick/6809):00713                  fcb   $37,$17
                      (/home/strick/6809):00714         
                      (/home/strick/6809):00715         * 16 bit register commands
0401 414444C4         (/home/strick/6809):00716                  fcs   "ADDD"
0405 C302             (/home/strick/6809):00717                  fcb   $C3,$02
0407 535542C4         (/home/strick/6809):00718                  fcs   "SUBD"
040B 8302             (/home/strick/6809):00719                  fcb   $83,$02
040D 4C44C4           (/home/strick/6809):00720                  fcs   "LDD"
0410 CC02             (/home/strick/6809):00721                  fcb   $CC,$02
0412 4C44D8           (/home/strick/6809):00722                  fcs   "LDX"
0415 8E02             (/home/strick/6809):00723                  fcb   $8E,$02
0417 4C44D5           (/home/strick/6809):00724                  fcs   "LDU"
041A CE02             (/home/strick/6809):00725                  fcb   $CE,$02
041C 434D50D8         (/home/strick/6809):00726                  fcs   "CMPX"
0420 8C02             (/home/strick/6809):00727                  fcb   $8C,$02
0422 4A53D2           (/home/strick/6809):00728                  fcs   "JSR"
0425 8D42             (/home/strick/6809):00729                  fcb   $8D,$42        Immediate mode not allowed
0427 5354C4           (/home/strick/6809):00730                  fcs   "STD"
042A CD42             (/home/strick/6809):00731                  fcb   $CD,$42
042C 5354D8           (/home/strick/6809):00732                  fcs   "STX"
042F 8F42             (/home/strick/6809):00733                  fcb   $8F,$42
0431 5354D5           (/home/strick/6809):00734                  fcs   "STU"
0434 CF42             (/home/strick/6809):00735                  fcb   $CF,$42
0436 434D50D5         (/home/strick/6809):00736                  fcs   "CMPU"
043A 8322             (/home/strick/6809):00737                  fcb   $83,$22
043C 434D50D3         (/home/strick/6809):00738                  fcs   "CMPS"
0440 8C22             (/home/strick/6809):00739                  fcb   $8C,$22
0442 434D50C4         (/home/strick/6809):00740                  fcs   "CMPD"
0446 8312             (/home/strick/6809):00741                  fcb   $83,$12
0448 434D50D9         (/home/strick/6809):00742                  fcs   "CMPY"
044C 8C12             (/home/strick/6809):00743                  fcb   $8C,$12
044E 4C44D9           (/home/strick/6809):00744                  fcs   "LDY"
0451 8E12             (/home/strick/6809):00745                  fcb   $8E,$12
0453 4C44D3           (/home/strick/6809):00746                  fcs   "LDS"
0456 CE12             (/home/strick/6809):00747                  fcb   $CE,$12
0458 5354D9           (/home/strick/6809):00748                  fcs   "STY"
045B 8F52             (/home/strick/6809):00749                  fcb   $8F,$52
045D 5354D3           (/home/strick/6809):00750                  fcs   "STS"
0460 CF52             (/home/strick/6809):00751                  fcb   $CF,$52
                      (/home/strick/6809):00752         * 6309 additions here
0462 535542D7         (/home/strick/6809):00753                  fcs   "SUBW"
0466 8012             (/home/strick/6809):00754                  fcb   $80,$12
0468 434D50D7         (/home/strick/6809):00755                  fcs   "CMPW"
046C 8112             (/home/strick/6809):00756                  fcb   $81,$12
046E 534243C4         (/home/strick/6809):00757                  fcs   "SBCD"
0472 8212             (/home/strick/6809):00758                  fcb   $82,$12
0474 414E44C4         (/home/strick/6809):00759                  fcs   "ANDD"
0478 8412             (/home/strick/6809):00760                  fcb   $84,$12
047A 424954C4         (/home/strick/6809):00761                  fcs   "BITD"
047E 8512             (/home/strick/6809):00762                  fcb   $85,$12
0480 4C44D7           (/home/strick/6809):00763                  fcs   "LDW"
0483 8612             (/home/strick/6809):00764                  fcb   $86,$12
0485 5354D7           (/home/strick/6809):00765                  fcs   "STW"
0488 8752             (/home/strick/6809):00766                  fcb   $87,$52        Immediate mode illegal
048A 454F52C4         (/home/strick/6809):00767                  fcs   "EORD"
048E 8812             (/home/strick/6809):00768                  fcb   $88,$12
0490 414443C4         (/home/strick/6809):00769                  fcs   "ADCD"
0494 8912             (/home/strick/6809):00770                  fcb   $89,$12
0496 4F52C4           (/home/strick/6809):00771                  fcs   "ORD"
0499 8A12             (/home/strick/6809):00772                  fcb   $8A,$12
049B 414444D7         (/home/strick/6809):00773                  fcs   "ADDW"
049F 8B12             (/home/strick/6809):00774                  fcb   $8B,$12
04A1 444956D1         (/home/strick/6809):00775                  fcs   "DIVQ"
04A5 8E22             (/home/strick/6809):00776                  fcb   $8E,$22
04A7 4D554CC4         (/home/strick/6809):00777                  fcs   "MULD"
04AB 8F22             (/home/strick/6809):00778                  fcb   $8F,$22
04AD 5354D1           (/home/strick/6809):00779                  fcs   "STQ"
04B0 CD52             (/home/strick/6809):00780                  fcb   $CD,$52        Immediate mode illegal
04B2 4C44D1           (/home/strick/6809):00781                  fcs   "LDQ"
04B5 CC12             (/home/strick/6809):00782                  fcb   $CC,$12        Immediate has new routine
                      (/home/strick/6809):00783         * 6309 "In Memory" Bit Masking commands - no prebyte
                      (/home/strick/6809):00784         * Immediate mode is illegal for these
04B7 4F49CD           (/home/strick/6809):00785                  fcs   "OIM"
04BA 014F             (/home/strick/6809):00786                  fcb   $01,$4F
04BC 4149CD           (/home/strick/6809):00787                  fcs   "AIM"
04BF 024F             (/home/strick/6809):00788                  fcb   $02,$4F
04C1 4549CD           (/home/strick/6809):00789                  fcs   "EIM"
04C4 054F             (/home/strick/6809):00790                  fcb   $05,$4F
04C6 5449CD           (/home/strick/6809):00791                  fcs   "TIM"
04C9 0B4F             (/home/strick/6809):00792                  fcb   $0B,$4F
                      (/home/strick/6809):00793         * 6309 "In Memory" Bit Manipulation commands - prebyte of $11
                      (/home/strick/6809):00794         * address mode is direct page ONLY
04CB 42414EC4         (/home/strick/6809):00795                  fcs   "BAND"
04CF 306F             (/home/strick/6809):00796                  fcb   $30,$6F
04D1 4249414EC4       (/home/strick/6809):00797                  fcs   "BIAND"
04D6 316F             (/home/strick/6809):00798                  fcb   $31,$6F
04D8 424FD2           (/home/strick/6809):00799                  fcs   "BOR"
04DB 326F             (/home/strick/6809):00800                  fcb   $32,$6F
04DD 42494FD2         (/home/strick/6809):00801                  fcs   "BIOR"
04E1 336F             (/home/strick/6809):00802                  fcb   $33,$6F
04E3 42454FD2         (/home/strick/6809):00803                  fcs   "BEOR"
04E7 346F             (/home/strick/6809):00804                  fcb   $34,$6F
04E9 4249454FD2       (/home/strick/6809):00805                  fcs   "BIEOR"
04EE 356F             (/home/strick/6809):00806                  fcb   $35,$6F
                      (/home/strick/6809):00807         * these two MUST precede the generic LD and ST
04F0 4C4442D4         (/home/strick/6809):00808                  fcs   "LDBT"
04F4 366F             (/home/strick/6809):00809                  fcb   $36,$6F
04F6 535442D4         (/home/strick/6809):00810                  fcs   "STBT"
04FA 376F             (/home/strick/6809):00811                  fcb   $37,$6F
                      (/home/strick/6809):00812         * 8 bit register commands (handles A,B,E,F)
04FC 4144C4           (/home/strick/6809):00813                  fcs   "ADD"
04FF 8B03             (/home/strick/6809):00814                  fcb   $8B,$03
0501 434DD0           (/home/strick/6809):00815                  fcs   "CMP"
0504 8103             (/home/strick/6809):00816                  fcb   $81,$03
0506 5355C2           (/home/strick/6809):00817                  fcs   "SUB"
0509 8003             (/home/strick/6809):00818                  fcb   $80,$03
050B 5342C3           (/home/strick/6809):00819                  fcs   "SBC"
050E 8203             (/home/strick/6809):00820                  fcb   $82,$03
0510 414EC4           (/home/strick/6809):00821                  fcs   "AND"
0513 8403             (/home/strick/6809):00822                  fcb   $84,$03
0515 4249D4           (/home/strick/6809):00823                  fcs   "BIT"
0518 8503             (/home/strick/6809):00824                  fcb   $85,$03
051A 4CC4             (/home/strick/6809):00825                  fcs   "LD"
051C 8603             (/home/strick/6809):00826                  fcb   $86,$03
051E 53D4             (/home/strick/6809):00827                  fcs   "ST"
0520 8743             (/home/strick/6809):00828                  fcb   $87,$43        Immediate mode not allowed
0522 454FD2           (/home/strick/6809):00829                  fcs   "EOR"
0525 8803             (/home/strick/6809):00830                  fcb   $88,$03
0527 4144C3           (/home/strick/6809):00831                  fcs   "ADC"
052A 8903             (/home/strick/6809):00832                  fcb   $89,$03
052C 4FD2             (/home/strick/6809):00833                  fcs   "OR"
052E 8A03             (/home/strick/6809):00834                  fcb   $8A,$03
0530 444956C4         (/home/strick/6809):00835                  fcs   "DIVD"
0534 8D23             (/home/strick/6809):00836                  fcb   $8D,$23
                      (/home/strick/6809):00837         * Inherent register commands (now handles A,B,E,F,D & W)
0536 4E45C7           (/home/strick/6809):00838                  fcs   "NEG"
0539 0004             (/home/strick/6809):00839                  fcb   $00,$04
053B 434FCD           (/home/strick/6809):00840                  fcs   "COM"
053E 0304             (/home/strick/6809):00841                  fcb   $03,$04
0540 4C53D2           (/home/strick/6809):00842                  fcs   "LSR"
0543 0404             (/home/strick/6809):00843                  fcb   $04,$04
0545 524FD2           (/home/strick/6809):00844                  fcs   "ROR"
0548 0604             (/home/strick/6809):00845                  fcb   $06,$04
054A 4153D2           (/home/strick/6809):00846                  fcs   "ASR"
054D 0704             (/home/strick/6809):00847                  fcb   $07,$04
054F 4C53CC           (/home/strick/6809):00848                  fcs   "LSL"
0552 0804             (/home/strick/6809):00849                  fcb   $08,$04
0554 4153CC           (/home/strick/6809):00850                  fcs   "ASL"
0557 0804             (/home/strick/6809):00851                  fcb   $08,$04
0559 524FCC           (/home/strick/6809):00852                  fcs   "ROL"
055C 0904             (/home/strick/6809):00853                  fcb   $09,$04
055E 4445C3           (/home/strick/6809):00854                  fcs   "DEC"
0561 0A04             (/home/strick/6809):00855                  fcb   $0A,$04
0563 494EC3           (/home/strick/6809):00856                  fcs   "INC"
0566 0C04             (/home/strick/6809):00857                  fcb   $0C,$04
0568 5453D4           (/home/strick/6809):00858                  fcs   "TST"
056B 0D04             (/home/strick/6809):00859                  fcb   $0D,$04
056D 4A4DD0           (/home/strick/6809):00860                  fcs   "JMP"
0570 0E44             (/home/strick/6809):00861                  fcb   $0E,$44
0572 434CD2           (/home/strick/6809):00862                  fcs   "CLR"
0575 0F04             (/home/strick/6809):00863                  fcb   $0F,$04
                      (/home/strick/6809):00864         * "Fixed" inherent commands (no options for register names)
                      (/home/strick/6809):00865         * Single, unique opcode
0577 5254D3           (/home/strick/6809):00866                  fcs   "RTS"
057A 3905             (/home/strick/6809):00867                  fcb   $39,$05
057C 4D55CC           (/home/strick/6809):00868                  fcs   "MUL"
057F 3D05             (/home/strick/6809):00869                  fcb   $3D,$05
0581 4E4FD0           (/home/strick/6809):00870                  fcs   "NOP"
0584 1205             (/home/strick/6809):00871                  fcb   $12,$05
0586 53594EC3         (/home/strick/6809):00872                  fcs   "SYNC"
058A 1305             (/home/strick/6809):00873                  fcb   $13,$05
058C 4441C1           (/home/strick/6809):00874                  fcs   "DAA"
058F 1905             (/home/strick/6809):00875                  fcb   $19,$05
0591 534558D7         (/home/strick/6809):00876                  fcs   "SEXW"
0595 1405             (/home/strick/6809):00877                  fcb   $14,$05
0597 5345D8           (/home/strick/6809):00878                  fcs   "SEX"
059A 1D05             (/home/strick/6809):00879                  fcb   $1D,$05
059C 4142D8           (/home/strick/6809):00880                  fcs   "ABX"
059F 3A05             (/home/strick/6809):00881                  fcb   $3A,$05
05A1 5254C9           (/home/strick/6809):00882                  fcs   "RTI"
05A4 3B05             (/home/strick/6809):00883                  fcb   $3B,$05
05A6 535749B2         (/home/strick/6809):00884                  fcs   "SWI2"
05AA 3F15             (/home/strick/6809):00885                  fcb   $3F,$15
05AC 535749B3         (/home/strick/6809):00886                  fcs   "SWI3"
05B0 3F25             (/home/strick/6809):00887                  fcb   $3F,$25
05B2 5357C9           (/home/strick/6809):00888                  fcs   "SWI"
05B5 3F05             (/home/strick/6809):00889                  fcb   $3F,$05
05B7 50534853D7       (/home/strick/6809):00890                  fcs   "PSHSW"
05BC 3815             (/home/strick/6809):00891                  fcb   $38,$15
05BE 50554C53D7       (/home/strick/6809):00892                  fcs   "PULSW"
05C3 3915             (/home/strick/6809):00893                  fcb   $39,$15
05C5 50534855D7       (/home/strick/6809):00894                  fcs   "PSHUW"
05CA 3A15             (/home/strick/6809):00895                  fcb   $3A,$15
05CC 50554C55D7       (/home/strick/6809):00896                  fcs   "PULUW"
05D1 3B15             (/home/strick/6809):00897                  fcb   $3B,$15
                      (/home/strick/6809):00898         * Load effective address: Indexing mode ONLY
05D3 4C4541D8         (/home/strick/6809):00899                  fcs   "LEAX"
05D7 3006             (/home/strick/6809):00900                  fcb   $30,$06
05D9 4C4541D9         (/home/strick/6809):00901                  fcs   "LEAY"
05DD 3106             (/home/strick/6809):00902                  fcb   $31,$06
05DF 4C4541D3         (/home/strick/6809):00903                  fcs   "LEAS"
05E3 3206             (/home/strick/6809):00904                  fcb   $32,$06
05E5 4C4541D5         (/home/strick/6809):00905                  fcs   "LEAU"
05E9 3306             (/home/strick/6809):00906                  fcb   $33,$06
                      (/home/strick/6809):00907         * Register to register
05EB 5446D2           (/home/strick/6809):00908                  fcs   "TFR"
05EE 1F07             (/home/strick/6809):00909                  fcb   $1F,$07
05F0 4558C7           (/home/strick/6809):00910                  fcs   "EXG"
05F3 1E07             (/home/strick/6809):00911                  fcb   $1E,$07
05F5 5446CD           (/home/strick/6809):00912                  fcs   "TFM"
05F8 3B27             (/home/strick/6809):00913                  fcb   $3B,$27        Prebyte of $11
                      (/home/strick/6809):00914         * Stack push/pull
05FA 505348D3         (/home/strick/6809):00915                  fcs   "PSHS"
05FE 3408             (/home/strick/6809):00916                  fcb   $34,$08
0600 50554CD3         (/home/strick/6809):00917                  fcs   "PULS"
0604 3508             (/home/strick/6809):00918                  fcb   $35,$08
0606 505348D5         (/home/strick/6809):00919                  fcs   "PSHU"
060A 3608             (/home/strick/6809):00920                  fcb   $36,$08
060C 50554CD5         (/home/strick/6809):00921                  fcs   "PULU"
0610 3708             (/home/strick/6809):00922                  fcb   $37,$08
                      (/home/strick/6809):00923         * Normal long branches (except LBRA & LBSR) - probably sets flag & then
                      (/home/strick/6809):00924         * carries on through short branch table below
0612 4CC2             (/home/strick/6809):00925                  fcs   "LB"            for long branches?
0614 0019             (/home/strick/6809):00926                  fcb   $00,$19
                      (/home/strick/6809):00927         
                      (/home/strick/6809):00928         * Short branches
0616 4253D2           (/home/strick/6809):00929         L0530    fcs   "BSR"
0619 8D0A             (/home/strick/6809):00930                  fcb   $8D,$0A
061B 4252C1           (/home/strick/6809):00931                  fcs   "BRA"
061E 200A             (/home/strick/6809):00932                  fcb   $20,$0A
0620 4252CE           (/home/strick/6809):00933                  fcs   "BRN"
0623 210A             (/home/strick/6809):00934                  fcb   $21,$0A
0625 4248C9           (/home/strick/6809):00935                  fcs   "BHI"
0628 220A             (/home/strick/6809):00936                  fcb   $22,$0A
062A 424CD3           (/home/strick/6809):00937                  fcs   "BLS"
062D 230A             (/home/strick/6809):00938                  fcb   $23,$0A
062F 4248D3           (/home/strick/6809):00939                  fcs   "BHS"
0632 240A             (/home/strick/6809):00940                  fcb   $24,$0A
0634 4243C3           (/home/strick/6809):00941                  fcs   "BCC"
0637 240A             (/home/strick/6809):00942                  fcb   $24,$0A
0639 424CCF           (/home/strick/6809):00943                  fcs   "BLO"
063C 250A             (/home/strick/6809):00944                  fcb   $25,$0A
063E 4243D3           (/home/strick/6809):00945                  fcs   "BCS"
0641 250A             (/home/strick/6809):00946                  fcb   $25,$0A
0643 424EC5           (/home/strick/6809):00947                  fcs   "BNE"
0646 260A             (/home/strick/6809):00948                  fcb   $26,$0A
0648 4245D1           (/home/strick/6809):00949                  fcs   "BEQ"
064B 270A             (/home/strick/6809):00950                  fcb   $27,$0A
064D 4256C3           (/home/strick/6809):00951                  fcs   "BVC"
0650 280A             (/home/strick/6809):00952                  fcb   $28,$0A
0652 4256D3           (/home/strick/6809):00953                  fcs   "BVS"
0655 290A             (/home/strick/6809):00954                  fcb   $29,$0A
0657 4250CC           (/home/strick/6809):00955                  fcs   "BPL"
065A 2A0A             (/home/strick/6809):00956                  fcb   $2A,$0A
065C 424DC9           (/home/strick/6809):00957                  fcs   "BMI"
065F 2B0A             (/home/strick/6809):00958                  fcb   $2B,$0A
0661 4247C5           (/home/strick/6809):00959                  fcs   "BGE"
0664 2C0A             (/home/strick/6809):00960                  fcb   $2C,$0A
0666 424CD4           (/home/strick/6809):00961                  fcs   "BLT"
0669 2D0A             (/home/strick/6809):00962                  fcb   $2D,$0A
066B 4247D4           (/home/strick/6809):00963                  fcs   "BGT"
066E 2E0A             (/home/strick/6809):00964                  fcb   $2E,$0A
0670 424CC5           (/home/strick/6809):00965                  fcs   "BLE"
0673 2F0A             (/home/strick/6809):00966                  fcb   $2F,$0A
                      (/home/strick/6809):00967         
                      (/home/strick/6809):00968         * Pseudo ops
0675 524DC2           (/home/strick/6809):00969                  fcs   "RMB"
0678 000B             (/home/strick/6809):00970                  fcb   $00,$0B
067A 4643C3           (/home/strick/6809):00971                  fcs   "FCC"
067D 010B             (/home/strick/6809):00972                  fcb   $01,$0B
067F 4644C2           (/home/strick/6809):00973                  fcs   "FDB"
0682 020B             (/home/strick/6809):00974                  fcb   $02,$0B
0684 4643D3           (/home/strick/6809):00975                  fcs   "FCS"
0687 030B             (/home/strick/6809):00976                  fcb   $03,$0B
0689 4643C2           (/home/strick/6809):00977                  fcs   "FCB"
068C 040B             (/home/strick/6809):00978                  fcb   $04,$0B
068E 4551D5           (/home/strick/6809):00979                  fcs   "EQU"
0691 050B             (/home/strick/6809):00980                  fcb   $05,$0B
0693 4D4FC4           (/home/strick/6809):00981                  fcs   "MOD"
0696 060B             (/home/strick/6809):00982                  fcb   $06,$0B
0698 454D4FC4         (/home/strick/6809):00983                  fcs   "EMOD"
069C 070B             (/home/strick/6809):00984                  fcb   $07,$0B
069E 53455444D0       (/home/strick/6809):00985                  fcs   "SETDP"
06A3 070C             (/home/strick/6809):00986                  fcb   $07,$0C
06A5 5345D4           (/home/strick/6809):00987                  fcs   "SET"
06A8 080B             (/home/strick/6809):00988                  fcb   $08,$0B
06AA 4F53B9           (/home/strick/6809):00989                  fcs   "OS9"
06AD 090B             (/home/strick/6809):00990                  fcb   $09,$0B
06AF 454EC4           (/home/strick/6809):00991                  fcs   "END"
06B2 010C             (/home/strick/6809):00992                  fcb   $01,$0C
06B4 4E41CD           (/home/strick/6809):00993                  fcs   "NAM"
06B7 020C             (/home/strick/6809):00994                  fcb   $02,$0C
06B9 4F50D4           (/home/strick/6809):00995                  fcs   "OPT"
06BC 030C             (/home/strick/6809):00996                  fcb   $03,$0C
06BE 5454CC           (/home/strick/6809):00997                  fcs   "TTL"
06C1 040C             (/home/strick/6809):00998                  fcb   $04,$0C
06C3 5041C7           (/home/strick/6809):00999                  fcs   "PAG"
06C6 050C             (/home/strick/6809):01000                  fcb   $05,$0C
06C8 5350C3           (/home/strick/6809):01001                  fcs   "SPC"
06CB 060C             (/home/strick/6809):01002                  fcb   $06,$0C
06CD 5553C5           (/home/strick/6809):01003                  fcs   "USE"
06D0 080C             (/home/strick/6809):01004                  fcb   $08,$0C
                      (/home/strick/6809):01005         * Conditional assembly switches
06D2 494645D1         (/home/strick/6809):01006                  fcs   "IFEQ"
06D6 000D             (/home/strick/6809):01007                  fcb   $00,$0D
06D8 49464EC5         (/home/strick/6809):01008                  fcs   "IFNE"
06DC 010D             (/home/strick/6809):01009                  fcb   $01,$0D
06DE 49464CD4         (/home/strick/6809):01010                  fcs   "IFLT"
06E2 020D             (/home/strick/6809):01011                  fcb   $02,$0D
06E4 49464CC5         (/home/strick/6809):01012                  fcs   "IFLE"
06E8 030D             (/home/strick/6809):01013                  fcb   $03,$0D
06EA 494647C5         (/home/strick/6809):01014                  fcs   "IFGE"
06EE 040D             (/home/strick/6809):01015                  fcb   $04,$0D
06F0 494647D4         (/home/strick/6809):01016                  fcs   "IFGT"
06F4 050D             (/home/strick/6809):01017                  fcb   $05,$0D
06F6 494650B1         (/home/strick/6809):01018                  fcs   "IFP1"
06FA 060D             (/home/strick/6809):01019                  fcb   $06,$0D
                      (/home/strick/6809):01020                 IFNE  NEWDEF
06FC 49464445C6       (/home/strick/6809):01021                  fcs   "IFDEF"  =ifdef
0701 070D             (/home/strick/6809):01022                  fcb   $07,$0D
0703 49464E44C6       (/home/strick/6809):01023                  fcs   "IFNDF"  =ifndef
0708 080D             (/home/strick/6809):01024                  fcb   $08,$0D
                      (/home/strick/6809):01025                 ENDC  NEWDEF
070A 454C53C5         (/home/strick/6809):01026                  fcs   "ELSE"
070E 010E             (/home/strick/6809):01027                  fcb   $01,$0E
                      (/home/strick/6809):01028         
0710 2A2A2A2A2A204572 (/home/strick/6809):01029         L061C    fcc   '***** Error: '
     726F723A20
071D 00               (/home/strick/6809):01030                  fcb   $00
                      (/home/strick/6809):01031         
                      (/home/strick/6809):01032         * Pointers to error messages table
071E 0034             (/home/strick/6809):01033         L062A    fdb   L065F-L062A    Point to 'bad label'
0720 003E             (/home/strick/6809):01034                  fdb   L0669-L062A    Point to 'bad instr'
0722 0048             (/home/strick/6809):01035                  fdb   L0673-L062A    Point to 'in number'
0724 0052             (/home/strick/6809):01036                  fdb   L067D-L062A    Point to 'div by 0'
0726 005B             (/home/strick/6809):01037                  fdb   L0686-L062A    Point to ' '
0728 005D             (/home/strick/6809):01038                  fdb   L0688-L062A    Point to 'expr syntax'
072A 0069             (/home/strick/6809):01039                  fdb   L0694-L062A    Point to 'parens'
072C 0070             (/home/strick/6809):01040                  fdb   L069B-L062A    Point to 'redefined name'
072E 007F             (/home/strick/6809):01041                  fdb   L06AA-L062A    Point to 'undefined name'
0730 008E             (/home/strick/6809):01042                  fdb   L06B9-L062A    Point to 'phasing'
0732 0096             (/home/strick/6809):01043                  fdb   L06C1-L062A    Point to 'symbol table full'
0734 00A8             (/home/strick/6809):01044                  fdb   L06D3-L062A    Point to 'address mode'
0736 00B5             (/home/strick/6809):01045                  fdb   L06E0-L062A    Point to 'out of range'
0738 00C2             (/home/strick/6809):01046                  fdb   L06ED-L062A    Point to 'result>255'
073A 00CD             (/home/strick/6809):01047                  fdb   L06F8-L062A    Point to 'reg name'
073C 00D6             (/home/strick/6809):01048                  fdb   L0701-L062A    Point to 'reg sizes'
073E 00E0             (/home/strick/6809):01049                  fdb   L070B-L062A    Point to 'input path'
0740 00EB             (/home/strick/6809):01050                  fdb   L0716-L062A    Point to 'object path'
0742 00F7             (/home/strick/6809):01051                  fdb   L0722-L062A    Point to 'index reg'
0744 0101             (/home/strick/6809):01052                  fdb   L072C-L062A    Point to '] missing'
0746 010B             (/home/strick/6809):01053                  fdb   L0736-L062A    Point to 'needs label'
0748 0117             (/home/strick/6809):01054                  fdb   L0742-L062A    Point to 'opt list'
074A 0120             (/home/strick/6809):01055                  fdb   L074B-L062A    Point to 'const def'
074C 012A             (/home/strick/6809):01056                  fdb   L0755-L062A    Point to 'can't open'
074E 0136             (/home/strick/6809):01057                  fdb   L0761-L062A    Point to 'label not allowed'
0750 0148             (/home/strick/6809):01058                  fdb   L0773-L062A    Point to 'cond nesting'
                      (/home/strick/6809):01059         
0752 626164206C616265 (/home/strick/6809):01060         L065F    fcc   'bad label'
     6C
075B 00               (/home/strick/6809):01061                  fcb   $00
075C 62616420696E7374 (/home/strick/6809):01062         L0669    fcc   'bad instr'
     72
0765 00               (/home/strick/6809):01063                  fcb   $00
0766 696E206E756D6265 (/home/strick/6809):01064         L0673    fcc   'in number'
     72
076F 00               (/home/strick/6809):01065                  fcb   $00
0770 6469762062792030 (/home/strick/6809):01066         L067D    fcc   'div by 0'
0778 00               (/home/strick/6809):01067                  fcb   $00
0779 20               (/home/strick/6809):01068         L0686    fcc   ' '
077A 00               (/home/strick/6809):01069                  fcb   $00
077B 657870722073796E (/home/strick/6809):01070         L0688    fcc   'expr syntax'
     746178
0786 00               (/home/strick/6809):01071                  fcb   $00
0787 706172656E73     (/home/strick/6809):01072         L0694    fcc   'parens'
078D 00               (/home/strick/6809):01073                  fcb   $00
078E 7265646566696E65 (/home/strick/6809):01074         L069B    fcc   'redefined name'
     64206E616D65
079C 00               (/home/strick/6809):01075                  fcb   $00
079D 756E646566696E65 (/home/strick/6809):01076         L06AA    fcc   'undefined name'
     64206E616D65
07AB 00               (/home/strick/6809):01077                  fcb   $00
07AC 70686173696E67   (/home/strick/6809):01078         L06B9    fcc   'phasing'
07B3 00               (/home/strick/6809):01079                  fcb   $00
07B4 73796D626F6C2074 (/home/strick/6809):01080         L06C1    fcc   'symbol table full'
     61626C652066756C
     6C
07C5 00               (/home/strick/6809):01081                  fcb   $00
07C6 6164647265737320 (/home/strick/6809):01082         L06D3    fcc   'address mode'
     6D6F6465
07D2 00               (/home/strick/6809):01083                  fcb   $00
07D3 6F7574206F662072 (/home/strick/6809):01084         L06E0    fcc   'out of range'
     616E6765
07DF 00               (/home/strick/6809):01085                  fcb   $00
07E0 726573756C743E32 (/home/strick/6809):01086         L06ED    fcc   'result>255'
     3535
07EA 00               (/home/strick/6809):01087                  fcb   $00
07EB 726567206E616D65 (/home/strick/6809):01088         L06F8    fcc   'reg name'
07F3 00               (/home/strick/6809):01089                  fcb   $00
07F4 7265672073697A65 (/home/strick/6809):01090         L0701    fcc   'reg sizes'
     73
07FD 00               (/home/strick/6809):01091                  fcb   $00
07FE 696E707574207061 (/home/strick/6809):01092         L070B    fcc   'input path'
     7468
0808 00               (/home/strick/6809):01093                  fcb   $00
0809 6F626A6563742070 (/home/strick/6809):01094         L0716    fcc   'object path'
     617468
0814 00               (/home/strick/6809):01095                  fcb   $00
0815 696E646578207265 (/home/strick/6809):01096         L0722    fcc   'index reg'
     67
081E 00               (/home/strick/6809):01097                  fcb   $00
081F 5D206D697373696E (/home/strick/6809):01098         L072C    fcc   '] missing'
     67
0828 00               (/home/strick/6809):01099                  fcb   $00
0829 6E65656473206C61 (/home/strick/6809):01100         L0736    fcc   'needs label'
     62656C
0834 00               (/home/strick/6809):01101                  fcb   $00
0835 6F7074206C697374 (/home/strick/6809):01102         L0742    fcc   'opt list'
083D 00               (/home/strick/6809):01103                  fcb   $00
083E 636F6E7374206465 (/home/strick/6809):01104         L074B    fcc   'const def'
     66
0847 00               (/home/strick/6809):01105                  fcb   $00
0848 63616E2774206F70 (/home/strick/6809):01106         L0755    fcc   /can't open /
     656E20
0853 00               (/home/strick/6809):01107                  fcb   $00
0854 6C6162656C206E6F (/home/strick/6809):01108         L0761    fcc   'label not allowed'
     7420616C6C6F7765
     64
0865 00               (/home/strick/6809):01109                  fcb   $00
0866 636F6E64206E6573 (/home/strick/6809):01110         L0773    fcc   'cond nesting'
     74696E67
0872 00               (/home/strick/6809):01111                  fcb   $00
                      (/home/strick/6809):01112         
                      (/home/strick/6809):01113         * Index by opcode-type jump table
0873 0020             (/home/strick/6809):01114         L0780    fdb   L079E-L0780    $001E  type 0 (LBRA/LBSR)
0875 0027             (/home/strick/6809):01115                  fdb   L07A5-L0780    $0025  type 1 (orcc/andcc/cwai)
0877 0045             (/home/strick/6809):01116                  fdb   L07B9-L0780    $0039  type 2 (16 bit reg ADDD,etc.)
0879 014B             (/home/strick/6809):01117                  fdb   L07CE-L0780    $004E  type 3 (8 bit reg ADDA, etc.)
087B 01A7             (/home/strick/6809):01118                  fdb   L07F3-L0780    $0073  type 4 (CLR,etc. inherent)
087D 028F             (/home/strick/6809):01119                  fdb   L0826-L0780    $00A6  type 5 (Fixed inherent (RTS,etc)
087F 0298             (/home/strick/6809):01120                  fdb   L082F-L0780    $00AF  type 6 (LEAx)
0881 02AF             (/home/strick/6809):01121                  fdb   L0846-L0780    $00C6  type 7 (Register to register)
0883 034D             (/home/strick/6809):01122                  fdb   L0884-L0780    $0104  type 8 (Stack PSH/PUL except W)
0885 0368             (/home/strick/6809):01123                  fdb   L089D-L0780    $011D  type 9 (Long branches)
0887 0385             (/home/strick/6809):01124                  fdb   L08BA-L0780    $013A  type A (Short branches)
0889 03A7             (/home/strick/6809):01125                  fdb   L08DC-L0780    $015C  type B (Pseudo op - data and rmb)
088B 03AC             (/home/strick/6809):01126                  fdb   L08E1-L0780    $0161  type C (Pseudo op - set values)
088D 03C4             (/home/strick/6809):01127                  fdb   L08F9-L0780    $0179  type D (Pseudo op - conditionals)
088F 0ACE             (/home/strick/6809):01128                  fdb   L0F29-L0780    $07A9  type E (Pseudo op - ELSE/ENDC)
0891 0215             (/home/strick/6809):01129                  fdb   TypeF-L0780    $????  type F (bitfield ops OIM,BAND,etc)
                      (/home/strick/6809):01130         
                      (/home/strick/6809):01131         * type 0 - LBRA/LBSR
0893 8603             (/home/strick/6809):01132         L079E    lda   #$03           # bytes require for instruction
0895 9746             (/home/strick/6809):01133                  sta   <u0046         Save it
0897 1603F9           (/home/strick/6809):01134                  lbra  L0951
                      (/home/strick/6809):01135         
                      (/home/strick/6809):01136         * type 1 - orcc/andcc/cwai 2 byte immediate mode only, forced register name
089A 1703D7           (/home/strick/6809):01137         L07A5    lbsr  L0932          Go find '# for immediate mode
089D 2405             (/home/strick/6809):01138                  bcc   twobyte        Found it, skip ahead
089F C60C             (/home/strick/6809):01139                  ldb   #12              'address mode' error
08A1 17FA50           (/home/strick/6809):01140                  lbsr  L02FA
                      (/home/strick/6809):01141         * Legal 8 bit immediate mode goes here
08A4 8601             (/home/strick/6809):01142         twobyte  lda   #$01           Force # bytes of instruction to 1
08A6 9746             (/home/strick/6809):01143                  sta   <u0046
08A8 9647             (/home/strick/6809):01144                  lda   <u0047         Get flag/index option byte
08AA 8520             (/home/strick/6809):01145                  bita  #$20           Pre-byte 11 bit flag on?
08AC 2702             (/home/strick/6809):01146                  beq   L07AF          No, 2 byte instruction
08AE 0C46             (/home/strick/6809):01147                  inc   <u0046         Add 1 to # bytes to compensate for $11
08B0 170E3A           (/home/strick/6809):01148         L07AF    lbsr  L12F7          Immediate mode parser
08B3 D763             (/home/strick/6809):01149                  stb   <u0063         Store immediate value following opcode
08B5 0C46             (/home/strick/6809):01150                  inc   <u0046         Add 1 to # of bytes for immediate value
08B7 39               (/home/strick/6809):01151                  rts
                      (/home/strick/6809):01152         
                      (/home/strick/6809):01153         * type 2 - ADDD, LDX, STU etc. (16 bit register commands) (all modes)
08B8 0C46             (/home/strick/6809):01154         L07B9    inc   <u0046         Add 1 to # bytes needed for instruction
08BA 1703B7           (/home/strick/6809):01155                  lbsr  L0932          Check if immediate mode requested
08BD 10250452         (/home/strick/6809):01156                  lbcs  L09C6          No, go check memory-based modes
08C1 DC61             (/home/strick/6809):01157                  ldd   <u0061         Get prebyte & opcode
08C3 108310CC         (/home/strick/6809):01158                  cmpd  #$10CC         LDQ?
08C7 270C             (/home/strick/6809):01159                  beq   ldqimm         Yes, do LDQ immediate
08C9 170E1B           (/home/strick/6809):01160                  lbsr  L12F1          Calculate normal immediate mode #'s
08CC DD63             (/home/strick/6809):01161                  std   <u0063         Save 16 bit result after opcode
08CE 0C46             (/home/strick/6809):01162                  inc   <u0046         Add 2 to # bytes needed for instruction
08D0 0C46             (/home/strick/6809):01163                  inc   <u0046
08D2 1603AE           (/home/strick/6809):01164                  lbra  L0941          Make sure immediate mode is legal & exit
                      (/home/strick/6809):01165         
                      (/home/strick/6809):01166         * process LDQ immediate - 32 bit data
08D5 4F               (/home/strick/6809):01167         ldqimm   clra                   LDQ immediate has no prebyte
08D6 5C               (/home/strick/6809):01168                  incb                   LDQ immediate opcode is $CD
08D7 DD61             (/home/strick/6809):01169                  std   <u0061           Save it over old prebyte/opcode
08D9 8605             (/home/strick/6809):01170                  lda   #$5            # of bytes for LDQ immediate
08DB 9746             (/home/strick/6809):01171                  sta   <u0046
08DD 8D19             (/home/strick/6809):01172                  bsr   rut32
08DF 2410             (/home/strick/6809):01173                  bcc   finldq
08E1 2604             (/home/strick/6809):01174         badnum   bne   outrng
08E3 C603             (/home/strick/6809):01175                  ldb   #3               'in number' error
08E5 2002             (/home/strick/6809):01176                  bra   outrng+2
08E7 C60D             (/home/strick/6809):01177         outrng   ldb   #13              'out of range' error
08E9 17FA08           (/home/strick/6809):01178                  lbsr  L02FA
08EC CCFFFF           (/home/strick/6809):01179                  ldd   #$FFFF
08EF DD4A             (/home/strick/6809):01180                  std   <u004A
08F1 DD65             (/home/strick/6809):01181         finldq   std   <u0065
08F3 DC4A             (/home/strick/6809):01182                  ldd   <u004A
08F5 DD63             (/home/strick/6809):01183                  std   <u0063
08F7 39               (/home/strick/6809):01184                  rts
                      (/home/strick/6809):01185         
                      (/home/strick/6809):01186         * === 32-bit numeric string conversions for LDQ# ===
                      (/home/strick/6809):01187         * === returns MSWord in [u004A], LSWord in D.reg ===
                      (/home/strick/6809):01188         * === (should be merged into L10B4 numeric code) ===
08F8 3278             (/home/strick/6809):01189         rut32    leas  -8,s             reserve a working area
08FA 4F               (/home/strick/6809):01190                  clra                   and clear it to all 00
08FB 5F               (/home/strick/6809):01191                  clrb
08FC EDE4             (/home/strick/6809):01192                  std   ,s
08FE ED62             (/home/strick/6809):01193                  std   2,s
0900 ED64             (/home/strick/6809):01194                  std   4,s
0902 170C61           (/home/strick/6809):01195                  lbsr  L1164          skip spaces; get next char in reg.a
0905 3001             (/home/strick/6809):01196                  leax  1,x
0907 8125             (/home/strick/6809):01197                  cmpa  #'%              binary?
0909 1027009E         (/home/strick/6809):01198                  lbeq  dobin32
090D 8124             (/home/strick/6809):01199                  cmpa  #'$              hexadecimal?
090F 275F             (/home/strick/6809):01200                  beq   dohex32
0911 301F             (/home/strick/6809):01201                  leax  -1,x             assume decimal, point to 1st digit
                      (/home/strick/6809):01202         * 32 bit decimal string conversion
0913 170C2B           (/home/strick/6809):01203         dodec32  lbsr  L113B          convert from ascii
0916 2541             (/home/strick/6809):01204                  bcs   notnum         not 0-9
0918 E7E4             (/home/strick/6809):01205                  stb   ,s             save temp
091A 8D34             (/home/strick/6809):01206                  bsr   mul2           x2
091C EC62             (/home/strick/6809):01207                  ldd   2,s            save partial
091E ED66             (/home/strick/6809):01208                  std   6,s
0920 EC64             (/home/strick/6809):01209                  ldd   4,s            in 67dd
0922 8D2C             (/home/strick/6809):01210                  bsr   mul2           x4
0924 8D2A             (/home/strick/6809):01211                  bsr   mul2           x8
0926 2541             (/home/strick/6809):01212                  bcs   ovflow
0928 E364             (/home/strick/6809):01213                  addd  4,s            add #*2 +#*8= #*10
092A ED64             (/home/strick/6809):01214                  std   4,s
092C EC62             (/home/strick/6809):01215                  ldd   2,s
092E C900             (/home/strick/6809):01216                  adcb  #0
0930 8900             (/home/strick/6809):01217                  adca  #0
0932 2535             (/home/strick/6809):01218                  bcs   ovflow
0934 E366             (/home/strick/6809):01219                  addd  6,s
0936 2531             (/home/strick/6809):01220                  bcs   ovflow
0938 ED62             (/home/strick/6809):01221                  std   2,s
093A EC64             (/home/strick/6809):01222                  ldd   4,s
093C EBE4             (/home/strick/6809):01223                  addb  ,s               add in new digit
093E 8900             (/home/strick/6809):01224                  adca  #0
0940 ED64             (/home/strick/6809):01225                  std   4,s
0942 EC62             (/home/strick/6809):01226                  ldd   2,s
0944 C900             (/home/strick/6809):01227                  adcb  #0
0946 8900             (/home/strick/6809):01228                  adca  #0
0948 251F             (/home/strick/6809):01229                  bcs   ovflow
094A ED62             (/home/strick/6809):01230                  std   2,s
094C 6C61             (/home/strick/6809):01231                  inc   1,s
094E 20C3             (/home/strick/6809):01232                  bra   dodec32
                      (/home/strick/6809):01233         
                      (/home/strick/6809):01234         * multiply caller's number by 2 (preserves D)
                      (/home/strick/6809):01235         * stack map:  [0,1]rts [2,3]temps [4,5,6,7]number
0950 6867             (/home/strick/6809):01236         mul2     lsl   7,s
0952 6966             (/home/strick/6809):01237         mul2b    rol   6,s              bin32 rol completion
0954 6965             (/home/strick/6809):01238                  rol   5,s
0956 6964             (/home/strick/6809):01239                  rol   4,s
0958 39               (/home/strick/6809):01240                  rts
                      (/home/strick/6809):01241         
                      (/home/strick/6809):01242         * conversion done. return MSW in [004A], LSW in D.reg
0959 301F             (/home/strick/6809):01243         notnum   leax  -1,x
095B 6D61             (/home/strick/6809):01244                  tst   1,s              if no digits converted,
095D 270C             (/home/strick/6809):01245                  beq   setc32           not a number, exit with Z & C set
095F EC62             (/home/strick/6809):01246                  ldd   2,s              return upper 16 bits in [u004A]
0961 DD4A             (/home/strick/6809):01247                  std   <u004A
0963 EC64             (/home/strick/6809):01248                  ldd   4,s              return lower 16 bits in D reg
0965 1CFE             (/home/strick/6809):01249                  andcc #^1
0967 2004             (/home/strick/6809):01250                  bra   gotnum
                      (/home/strick/6809):01251         
                      (/home/strick/6809):01252         * 32-bit overflow error, clear Z to flag as out of range
0969 1CFB             (/home/strick/6809):01253         ovflow   andcc #^4              clear zero (flag out of range)
096B 1A01             (/home/strick/6809):01254         setc32   orcc  #1               set carry (flag error)
096D 3268             (/home/strick/6809):01255         gotnum   leas  8,s              free work area
096F 39               (/home/strick/6809):01256                  rts                    and return values
                      (/home/strick/6809):01257         
                      (/home/strick/6809):01258         * 32 bit hexadecimal string conversion
0970 170BCE           (/home/strick/6809):01259         dohex32  lbsr  L113B
0973 2410             (/home/strick/6809):01260                  bcc   notAF
0975 C161             (/home/strick/6809):01261                  cmpb  #'a
0977 2502             (/home/strick/6809):01262                  blo   nxtlt
0979 C020             (/home/strick/6809):01263                  subb  #'a-'A
097B C141             (/home/strick/6809):01264         nxtlt    cmpb  #'A
097D 25DA             (/home/strick/6809):01265                  blo   notnum
097F C146             (/home/strick/6809):01266                  cmpb  #'F
0981 22D6             (/home/strick/6809):01267                  bhi   notnum
0983 C037             (/home/strick/6809):01268                  subb  #'A-10
0985 E7E4             (/home/strick/6809):01269         notAF    stb   ,s
0987 A662             (/home/strick/6809):01270                  lda   2,s
0989 85F0             (/home/strick/6809):01271                  bita  #$F0
098B 26DC             (/home/strick/6809):01272                  bne   ovflow
098D 8DC1             (/home/strick/6809):01273                  bsr   mul2
098F 8DBF             (/home/strick/6809):01274                  bsr   mul2
0991 8DBD             (/home/strick/6809):01275                  bsr   mul2
0993 8DBB             (/home/strick/6809):01276                  bsr   mul2
0995 EC64             (/home/strick/6809):01277                  ldd   4,s
0997 E9E4             (/home/strick/6809):01278                  adcb  ,s
0999 8900             (/home/strick/6809):01279                  adca  #0
099B ED64             (/home/strick/6809):01280                  std   4,s
099D EC62             (/home/strick/6809):01281                  ldd   2,s
099F C900             (/home/strick/6809):01282                  adcb  #0
09A1 8900             (/home/strick/6809):01283                  adca  #0
09A3 25C4             (/home/strick/6809):01284                  bcs   ovflow
09A5 ED62             (/home/strick/6809):01285                  std   2,s
09A7 6C61             (/home/strick/6809):01286                  inc   1,s
09A9 20C5             (/home/strick/6809):01287                  bra   dohex32
                      (/home/strick/6809):01288         
                      (/home/strick/6809):01289         * 32 bit binary string conversion
09AB E680             (/home/strick/6809):01290         dobin32  ldb   ,x+
09AD C030             (/home/strick/6809):01291                  subb  #'0
09AF 25A8             (/home/strick/6809):01292                  bcs   notnum
09B1 54               (/home/strick/6809):01293                  lsrb
09B2 26A5             (/home/strick/6809):01294                  bne   notnum
09B4 6965             (/home/strick/6809):01295                  rol   5,s
09B6 8D9A             (/home/strick/6809):01296                  bsr   mul2b            rotate bytes 4,3,2
09B8 25AF             (/home/strick/6809):01297                  bcs   ovflow
09BA 6C61             (/home/strick/6809):01298                  inc   1,s
09BC 20ED             (/home/strick/6809):01299                  bra   dobin32
                      (/home/strick/6809):01300         * === end of 32-bit numeric conversions for LDQ# ===
                      (/home/strick/6809):01301         
                      (/home/strick/6809):01302         * type 3 - 8 bit A & B based instructions (ADD, SUB, CMP, etc.)
09BE 0C46             (/home/strick/6809):01303         L07CE    inc   <u0046         Add 1 to # bytes needed for instruction
09C0 DC61             (/home/strick/6809):01304                  ldd   <u0061         Get pre-byte & opcode
09C2 1083118D         (/home/strick/6809):01305                  cmpd  #$118d         DIVD instruction?
09C6 2745             (/home/strick/6809):01306                  beq   L07E7          Yes, skip register name parser
09C8 A680             (/home/strick/6809):01307                  lda   ,x+            Get next byte from source
09CA 845F             (/home/strick/6809):01308                  anda  #$5F           Force to uppercase
09CC 8141             (/home/strick/6809):01309                  cmpa  #'A            Is it an A?
09CE 273D             (/home/strick/6809):01310                  beq   L07E7          Yes, go process instruction
09D0 8145             (/home/strick/6809):01311                  cmpa  #'E            Is it an E?
09D2 2704             (/home/strick/6809):01312                  beq   newreg         Yes, process
09D4 8146             (/home/strick/6809):01313                  cmpa  #'F            Is it an F?
09D6 2622             (/home/strick/6809):01314                  bne   notnew         No, try B
                      (/home/strick/6809):01315         * E or F register
09D8 3402             (/home/strick/6809):01316         newreg   pshs  a              Preserve register name a moment
09DA 9662             (/home/strick/6809):01317                  lda   <u0062         Get base opcode
09DC 8182             (/home/strick/6809):01318                  cmpa  #$82
09DE 250C             (/home/strick/6809):01319                  blo   legalcmd       SUB or CMP are ok
09E0 8186             (/home/strick/6809):01320                  cmpa  #$86
09E2 251C             (/home/strick/6809):01321                  blo   illegal3       SBC,AND & BIT are not ok
09E4 8188             (/home/strick/6809):01322                  cmpa  #$88
09E6 2504             (/home/strick/6809):01323                  blo   legalcmd       Load & store are ok
09E8 818B             (/home/strick/6809):01324                  cmpa  #$8b
09EA 2514             (/home/strick/6809):01325                  blo   illegal3       EOR, ADC & OR are not ok (ADD falls through ok)
                      (/home/strick/6809):01326         * Legal E/F command, setup
09EC 8611             (/home/strick/6809):01327         legalcmd lda   #$11           Pre-byte for E/F based commands
09EE 9761             (/home/strick/6809):01328                  sta   <u0061         Place before opcode
09F0 0C46             (/home/strick/6809):01329                  inc   <u0046         Add 1 to # bytes needed for instruction
09F2 3502             (/home/strick/6809):01330                  puls  a              Get back register name
09F4 8146             (/home/strick/6809):01331                  cmpa  #'F            Is it F?
09F6 270F             (/home/strick/6809):01332                  beq   L07E1          Yes, add mask for F
09F8 2013             (/home/strick/6809):01333                  bra   L07E7          Go process various modes
09FA 8142             (/home/strick/6809):01334         notnew   cmpa  #'B            Is it a B?
09FC 2709             (/home/strick/6809):01335                  beq   L07E1          Yes, add B mask & process instruction
09FE 2002             (/home/strick/6809):01336                  bra   illegal2       Illegal register name
                      (/home/strick/6809):01337         
                      (/home/strick/6809):01338         * Illegal register (or illegal command for E or F)
0A00 3261             (/home/strick/6809):01339         illegal3 leas  1,s            Eat E/F identifier byte
0A02 3262             (/home/strick/6809):01340         illegal2 leas  2,s            Eat JSR return address
0A04 16F75D           (/home/strick/6809):01341                  lbra  L015F          Exit with 'bad instr' error
                      (/home/strick/6809):01342         
                      (/home/strick/6809):01343         * Mask for B or F commands
0A07 C640             (/home/strick/6809):01344         L07E1    ldb   #$40           Add offset for B register to base opcode
0A09 DA62             (/home/strick/6809):01345                  orb   <u0062
0A0B D762             (/home/strick/6809):01346                  stb   <u0062
                      (/home/strick/6809):01347         * Process various modes (Extended, DP, Indexed, Immediate)
0A0D 170264           (/home/strick/6809):01348         L07E7    lbsr  L0932          Check for immediate mode
0A10 102502FF         (/home/strick/6809):01349                  lbcs  L09C6          Not immediate, try memory modes
0A14 17026C           (/home/strick/6809):01350                  lbsr  L0941          Is this command allowed immediate mode?
0A17 16FE96           (/home/strick/6809):01351                  lbra  L07AF          Go do immediate mode (8 bit)
                      (/home/strick/6809):01352         
                      (/home/strick/6809):01353         * type 4 - CLR/LSL,etc.
0A1A 0C46             (/home/strick/6809):01354         L07F3    inc   <u0046         Inc # bytes in current instruction
0A1C 9662             (/home/strick/6809):01355                  lda   <u0062         Get base opcode
0A1E 810E             (/home/strick/6809):01356                  cmpa  #$0E           Is it JMP?
0A20 274B             (/home/strick/6809):01357                  beq   L080B          Yes, special case (no inherent)
                      (/home/strick/6809):01358         * Inherent register name commands
0A22 A684             (/home/strick/6809):01359                  lda   ,x             Get next char from source line
0A24 845F             (/home/strick/6809):01360                  anda  #$5F           Uppercase only
                      (/home/strick/6809):01361         * $xx40 commands here
0A26 C640             (/home/strick/6809):01362                  ldb   #$40           Mask to opcode base for 'xxxA'
0A28 8141             (/home/strick/6809):01363                  cmpa  #'A            Is char an A?
0A2A 274F             (/home/strick/6809):01364                  beq   L0819          Yes, adjust opcode accordingly
0A2C 8144             (/home/strick/6809):01365                  cmpa  #'D            Is char a D?
0A2E 2608             (/home/strick/6809):01366                  bne   notD           No, check next
0A30 8610             (/home/strick/6809):01367         Legal10  lda   #$10           Pre-byte for 'D' commands
0A32 9761             (/home/strick/6809):01368         Legal11  sta   <u0061         Put it before the opcode
0A34 0C46             (/home/strick/6809):01369                  inc   <u0046         Add 1 to # bytes for this instruction
0A36 2043             (/home/strick/6809):01370                  bra   L0819          Go append the main opcode
0A38 8145             (/home/strick/6809):01371         notD     cmpa  #'E            Is char an E?
0A3A 2610             (/home/strick/6809):01372                  bne   notE           No, check next
0A3C 9662             (/home/strick/6809):01373         chkEF    lda   <u0062         Get base opcode
0A3E 2722             (/home/strick/6809):01374                  beq   illegal        NEGE/NEGF not allowed
0A40 8103             (/home/strick/6809):01375                  cmpa  #$03           COMx?
0A42 2704             (/home/strick/6809):01376                  beq   goodE          Yes, legal
0A44 810A             (/home/strick/6809):01377                  cmpa  #$0A           LSR/ROR/ASR/LSL/ASL/ROL?
0A46 251A             (/home/strick/6809):01378                  blo   illegal        Not allowed
0A48 8611             (/home/strick/6809):01379         goodE    lda   #$11           Rest are allowed, set pre-byte to $11
0A4A 20E6             (/home/strick/6809):01380                  bra   Legal11
                      (/home/strick/6809):01381         
                      (/home/strick/6809):01382         * $xx50 commands here
0A4C C650             (/home/strick/6809):01383         notE     ldb   #$50           Mask to opcode base for 'xxxB'
0A4E 8142             (/home/strick/6809):01384                  cmpa  #'B            Is char a B?
0A50 2729             (/home/strick/6809):01385                  beq   L0819          Yes, adjust opcode accordingly
0A52 8157             (/home/strick/6809):01386                  cmpa  #'W            Is char a W?
0A54 2611             (/home/strick/6809):01387                  bne   notW           No, check next
0A56 9662             (/home/strick/6809):01388                  lda   <u0062         Get base opcode
0A58 2708             (/home/strick/6809):01389                  beq   illegal        There is no NEGW?
0A5A 8107             (/home/strick/6809):01390                  cmpa  #$7            ASRW?
0A5C 2704             (/home/strick/6809):01391                  beq   illegal        Yes, there isn't one
0A5E 8108             (/home/strick/6809):01392                  cmpa  #$8            LSL/ASLW?
0A60 26CE             (/home/strick/6809):01393                  bne   Legal10        Rest are legal, prefix a $10 & append opcode
                      (/home/strick/6809):01394         
                      (/home/strick/6809):01395         * Illegal instructions go here
0A62 3262             (/home/strick/6809):01396         illegal  leas  $02,s          Eat JSR return address
0A64 16F6FD           (/home/strick/6809):01397                  lbra  L015F          Exit with illegal opcode error
0A67 8146             (/home/strick/6809):01398         notW     cmpa  #'F            is it an F?
0A69 2602             (/home/strick/6809):01399                  bne   L080B          Definately not a register, try memory modes
0A6B 20CF             (/home/strick/6809):01400                  bra   chkEF          Go to generic E/F handler
                      (/home/strick/6809):01401         
0A6D 1702A3           (/home/strick/6809):01402         L080B    lbsr  L09C6          Generic indexed/extended/direct handler???
0A70 D662             (/home/strick/6809):01403                  ldb   <u0062         Get base opcode
0A72 C5F0             (/home/strick/6809):01404                  bitb  #%11110000     Any of the 4 bits of high nibble set?
0A74 2711             (/home/strick/6809):01405                  beq   L0825          No, return
0A76 CA40             (/home/strick/6809):01406                  orb   #%01000000     Yes, force bit on & return
0A78 D762             (/home/strick/6809):01407                  stb   <u0062
0A7A 39               (/home/strick/6809):01408                  rts
                      (/home/strick/6809):01409         * Mask in adjustment for register inherent
0A7B DA62             (/home/strick/6809):01410         L0819    orb   <u0062         Merge Mask for new inherent mode into opcode
0A7D D762             (/home/strick/6809):01411                  stb   <u0062         Save new opcode
0A7F 3001             (/home/strick/6809):01412                  leax  1,x            Bump source code ptr up to next char
0A81 C6DF             (/home/strick/6809):01413                  ldb   #%11011111     Shut off 'operand field in src line' flag
0A83 D42B             (/home/strick/6809):01414                  andb  <u002B         And save new flag byte
0A85 D72B             (/home/strick/6809):01415                  stb   <u002B
0A87 39               (/home/strick/6809):01416         L0825    rts
                      (/home/strick/6809):01417         
                      (/home/strick/6809):01418         * RVH - adding 6309 bitfield ops (OIM,etc/BAND,etc) as new type F
                      (/home/strick/6809):01419         * these instructions need special handling for the bitmode postbyte
                      (/home/strick/6809):01420         * use comma delimiters since ASM uses '.' in symbols and as data ptr
0A88                  (/home/strick/6809):01421         TypeF
0A88 9647             (/home/strick/6809):01422                  lda   <u0047   Get flag/index option byte
0A8A 8520             (/home/strick/6809):01423                  bita  #$20     Pre-byte 11 bit flag on?
0A8C 2616             (/home/strick/6809):01424                  bne   TypeF2   Yes, must be a bitfield op (BAND,etc)
                      (/home/strick/6809):01425         * OIM/AIM/EIM/TIM - format is op #bitmask,addr(direct,extended,indexed)
                      (/home/strick/6809):01426         * OIM group uses regular type 4 opcode mods for addressing modes
0A8E 17FE09           (/home/strick/6809):01427                  lbsr  L07A5    Go process immediate mode (bitmask)
0A91 D70C             (/home/strick/6809):01428                  stb   <u000C   temp storage - addr handler overwrites postbyte
0A93 0F63             (/home/strick/6809):01429                  clr   <u0063   which *MUST* be clean for address processing
0A95 8D4F             (/home/strick/6809):01430                  bsr   synchk   check for comma delimiter
0A97 8DD4             (/home/strick/6809):01431                  bsr   L080B    The Type 4 address handler also adjusts the opcode
                      (/home/strick/6809):01432         * move the address bytes up by one to open a hole for the bitmask
0A99 DC64             (/home/strick/6809):01433         fixpost3 ldd   <u0065-1 enter here to move 3 bytes (OIM group)
0A9B DD65             (/home/strick/6809):01434                  std   <u0065
0A9D D663             (/home/strick/6809):01435         fixpost1 ldb   <u0063   enter here to move 1 byte (BAND group)
0A9F 960C             (/home/strick/6809):01436                  lda   <u000C   grab the postbyte
0AA1 DD63             (/home/strick/6809):01437                  std   <u0063   fill the hole
0AA3 39               (/home/strick/6809):01438                  rts
                      (/home/strick/6809):01439         
                      (/home/strick/6809):01440         * BAND-STBT - format is op rr,sss,ddd,addr (direct only) (prebyte is $11)
                      (/home/strick/6809):01441         *       arg fields 1,2,3 form the postbyte (rr ddd sss)
                      (/home/strick/6809):01442         *       where rr=CC/A/B/E, sss & ddd are src & dest bit number (0-7)
0AA4 170ABF           (/home/strick/6809):01443         TypeF2   lbsr  L1164    Find next text field
0AA7 318C4C           (/home/strick/6809):01444                  leay  <BTable,pc Load BAND group register table
0AAA C604             (/home/strick/6809):01445                  ldb   #4       only 4 table entries
0AAC D746             (/home/strick/6809):01446                  stb   <u0046   also preset instruction length to 4
0AAE 170201           (/home/strick/6809):01447                  lbsr  L0971    Use the TRF/EXG scan routine
0AB1 10250086         (/home/strick/6809):01448                  lbcs   L0852   If no match, report "reg name" error
0AB5 970C             (/home/strick/6809):01449                  sta   <u000C   found register, save bitmask
0AB7 8D2D             (/home/strick/6809):01450                  bsr   synchk   check for comma
0AB9 8D1E             (/home/strick/6809):01451                  bsr   getbit   get src bit number
0ABB DA0C             (/home/strick/6809):01452                  orb   <u000C   update postbyte cc000xxx
0ABD D70C             (/home/strick/6809):01453                  stb   <u000C
0ABF 8D25             (/home/strick/6809):01454                  bsr   synchk   check for comma
0AC1 8D16             (/home/strick/6809):01455                  bsr   getbit   get dest bit number
0AC3 58               (/home/strick/6809):01456                  lslb           shift to 00xxx000
0AC4 58               (/home/strick/6809):01457                  lslb
0AC5 58               (/home/strick/6809):01458                  lslb
0AC6 DA0C             (/home/strick/6809):01459                  orb   <u000C   update postbyte ccdddsss
0AC8 D70C             (/home/strick/6809):01460                  stb   <u000C
0ACA 8D1A             (/home/strick/6809):01461                  bsr   synchk   check for comma
0ACC 170244           (/home/strick/6809):01462                  lbsr  L09C6    Go process address
0ACF 8604             (/home/strick/6809):01463                  lda   #$04     Force # bytes of instruction to 4
0AD1 9746             (/home/strick/6809):01464                  sta   <u0046   to undo address mode increments
0AD3 964C             (/home/strick/6809):01465                  lda   <u004C   Get address mode flag
0AD5 2F46             (/home/strick/6809):01466                  ble   L0841    If not direct, "address mode" error
0AD7 20C4             (/home/strick/6809):01467                  bra   fixpost1 move postbyte into position, done!
                      (/home/strick/6809):01468         
                      (/home/strick/6809):01469         * get bit number - must be 0-7, else "out of range" error
0AD9 170C11           (/home/strick/6809):01470         getbit   lbsr  L12F7    get bit number
0ADC 10830007         (/home/strick/6809):01471                  cmpd  #7
0AE0 230A             (/home/strick/6809):01472                  bls   TypeF5   bit number valid
0AE2 C60D             (/home/strick/6809):01473                  ldb   #13              'out of range' error
0AE4 2009             (/home/strick/6809):01474                  bra   TypeFx   fix stack and exit
                      (/home/strick/6809):01475         * do syntax check for comma, "expr syntax" error if not
0AE6 A680             (/home/strick/6809):01476         synchk   lda   ,x+      check for delimiter
0AE8 812C             (/home/strick/6809):01477                  cmpa  #',      is it a comma?
0AEA 2601             (/home/strick/6809):01478                  bne   TypeF6   No, syntax error
0AEC 39               (/home/strick/6809):01479         TypeF5   rts
0AED C606             (/home/strick/6809):01480         TypeF6   ldb   #06              'expr syntax' error
0AEF 3262             (/home/strick/6809):01481         TypeFx   leas  2,s      eat return addr
0AF1 301F             (/home/strick/6809):01482                  leax  -1,x     roll ptr back to offending char
0AF3 16F7FE           (/home/strick/6809):01483                  lbra  L02FA    exit, report error
                      (/home/strick/6809):01484         
                      (/home/strick/6809):01485         * BAND register table: 2 bytes for reg name, 1 byte for postbyte bitfield
0AF6 4500C0           (/home/strick/6809):01486         BTable   fcb   'E,00,$C0
0AF9 410080           (/home/strick/6809):01487                  fcb   'A,00,$80
0AFC 420040           (/home/strick/6809):01488                  fcb   'B,00,$40
0AFF 434300           (/home/strick/6809):01489                  fcb   'C,'C,$00
                      (/home/strick/6809):01490         * Type F end
                      (/home/strick/6809):01491         
                      (/home/strick/6809):01492         * type 5 - 'fixed' inherent commands (no options for registers, etc.)
0B02 0C46             (/home/strick/6809):01493         L0826    inc   <u0046         Add 1 to # bytes this instruction
0B04 D62B             (/home/strick/6809):01494                  ldb   <u002B
0B06 C4DF             (/home/strick/6809):01495                  andb  #%11011111     Shut off 'operand present' flag
0B08 D72B             (/home/strick/6809):01496                  stb   <u002B
0B0A 39               (/home/strick/6809):01497         L082E    rts
                      (/home/strick/6809):01498         
                      (/home/strick/6809):01499         * type 6 - LEA* (indexed mode ONLY)
0B0B 0C46             (/home/strick/6809):01500         L082F    inc   <u0046         Add 1 to # bytes this instruction
0B0D 170203           (/home/strick/6809):01501                  lbsr  L09C6          Go set up indexed mode
0B10 964E             (/home/strick/6809):01502                  lda   <u004E         Get indexed mode flag
0B12 26F6             (/home/strick/6809):01503                  bne   L082E          Is indexed mode, everything went fine, exit
0B14 CC1212           (/home/strick/6809):01504                  ldd   #$1212         Otherwise, 2 NOP codes
0B17 DD62             (/home/strick/6809):01505                  std   <u0062         Save as opcodes
0B19 C602             (/home/strick/6809):01506                  ldb   #$02           Force # bytes this instruction to 2
0B1B D746             (/home/strick/6809):01507                  stb   <u0046
0B1D C60C             (/home/strick/6809):01508         L0841    ldb   #12              'address mode' error
0B1F 16F7D2           (/home/strick/6809):01509                  lbra  L02FA
                      (/home/strick/6809):01510         
                      (/home/strick/6809):01511         * type 7 - TFR/EXG & Register to register
0B22 0C46             (/home/strick/6809):01512         L0846    inc   <u0046         at least 2 bytes in this instruction
0B24 0C46             (/home/strick/6809):01513                  inc   <u0046
0B26 170A3D           (/home/strick/6809):01514                  lbsr  L1164          Find next text field
0B29 170181           (/home/strick/6809):01515                  lbsr  L096B          Get 1st register name
0B2C 250D             (/home/strick/6809):01516                  bcs   L0852            Illegal register name, exit
0B2E 9662             (/home/strick/6809):01517                  lda   <u0062           check the opcode
0B30 8038             (/home/strick/6809):01518                  suba  #$38             Is this a TFM? (38-3B)
0B32 970C             (/home/strick/6809):01519                  sta   <u000C           save result for later TST
0B34 2B18             (/home/strick/6809):01520                  bmi   L0857            No, continue normally
0B36 C104             (/home/strick/6809):01521                  cmpb  #4               Legal TFM register?
0B38 2306             (/home/strick/6809):01522                  bls   r0mode           Yes, check for mode flag
0B3A 53               (/home/strick/6809):01523         L0851    comb                   No, set carry
0B3B C60F             (/home/strick/6809):01524         L0852    ldb   #15              else 'reg name' error
0B3D 16F7B4           (/home/strick/6809):01525         L0854    lbra  L02FA
                      (/home/strick/6809):01526         
                      (/home/strick/6809):01527         * legal TFM reg0: check for R0 auto inc/dec mode
0B40 A680             (/home/strick/6809):01528         r0mode   lda   ,x+              Get next char from source
0B42 812B             (/home/strick/6809):01529                  cmpa  #'+              Incrementing source counter?
0B44 2706             (/home/strick/6809):01530                  beq   tfmdec1          Yes, assume r+,r (op=$3A)
0B46 812D             (/home/strick/6809):01531                  cmpa  #'-              decrementing source counter?
0B48 2606             (/home/strick/6809):01532                  bne   ckcomma          No + or -, assume r,r+ (op=$3B)
                      (/home/strick/6809):01533         * initial tfm opcode from table is 3B
0B4A 0A62             (/home/strick/6809):01534         tfmdec2  dec   <u0062           Sets TFM op to $39 for r-,r-
0B4C 0A62             (/home/strick/6809):01535         tfmdec1  dec   <u0062           Sets TFM op to $3A for r+,r
                      (/home/strick/6809):01536         
                      (/home/strick/6809):01537         * make sure a comma follows
0B4E A680             (/home/strick/6809):01538         L0857    lda   ,x+            Get next char
0B50 812C             (/home/strick/6809):01539         ckcomma  cmpa  #',            comma?
0B52 26E6             (/home/strick/6809):01540                  bne   L0851          No, exit with 'reg name' error
0B54 D764             (/home/strick/6809):01541                  stb   <u0064         save R0 for later
0B56 170A0D           (/home/strick/6809):01542                  lbsr  L1164            Find next text field
0B59 170151           (/home/strick/6809):01543                  lbsr  L096B          Get 2nd register name
0B5C 25DD             (/home/strick/6809):01544                  bcs   L0852          If 2nd name illegal, exit with error
0B5E 0D0C             (/home/strick/6809):01545                  tst   <u000C           Is this a TFM? (38-3B)
0B60 2B30             (/home/strick/6809):01546                  bmi   chkspc           No, continue normally
0B62 C104             (/home/strick/6809):01547                  cmpb  #4               Legal TFM register?
0B64 22D4             (/home/strick/6809):01548                  bhi   L0851            No, 'reg name' error
                      (/home/strick/6809):01549         * legal TFM reg1: check for R1 auto inc/dec
0B66 A680             (/home/strick/6809):01550                  lda   ,x+              Get next char from source
0B68 812D             (/home/strick/6809):01551         tfm39    cmpa  #'-              decrementing source counter?
0B6A 2604             (/home/strick/6809):01552                  bne   tfm38            No, try R1+
0B6C 8639             (/home/strick/6809):01553                  lda   #$39             expect op=39 (R-,R-)
0B6E 2011             (/home/strick/6809):01554                  bra   verify           check if valid R-,R-
0B70 812B             (/home/strick/6809):01555         tfm38    cmpa  #'+              incrementing dest counter?
0B72 2616             (/home/strick/6809):01556                  bne   tfm3a
0B74 863A             (/home/strick/6809):01557                  lda   #$3A
0B76 9162             (/home/strick/6809):01558                  cmpa  <u0062           was it R0+,R1+
0B78 2606             (/home/strick/6809):01559                  bne   tfm3b
0B7A 8638             (/home/strick/6809):01560                  lda   #$38             Yes, make op=38 (R+,R+)
0B7C 9762             (/home/strick/6809):01561                  sta   <u0062
0B7E 2012             (/home/strick/6809):01562                  bra   chkspc           and verify whitespace follows
0B80 4C               (/home/strick/6809):01563         tfm3b    inca                   check for op=3b (R,R+)
0B81 9162             (/home/strick/6809):01564         verify   cmpa  <u0062           is it the expected op?
0B83 270D             (/home/strick/6809):01565                  beq   chkspc           Yes, valid TFM, check for EOL/spc
0B85 53               (/home/strick/6809):01566         tfmerr   comb                   No, illegal TFM format:
0B86 C60C             (/home/strick/6809):01567                  ldb   #12              flag 'reg name' error
0B88 20B3             (/home/strick/6809):01568                  bra   L0854            and exit
0B8A 863A             (/home/strick/6809):01569         tfm3a    lda   #$3A             expect op=3a (R+,R)
0B8C 9162             (/home/strick/6809):01570                  cmpa  <u0062           was it R0+,R1
0B8E 26F5             (/home/strick/6809):01571                  bne   tfmerr           illegal R1 form, 'reg name' error
0B90 301F             (/home/strick/6809):01572                  leax  -1,x             rewind to current char
0B92 1702FE           (/home/strick/6809):01573         chkspc   lbsr  L0B08            look for space or CR, addr mode error
                      (/home/strick/6809):01574         
                      (/home/strick/6809):01575         * Normal EXG/TFR/Reg to Reg, just have to check sizes
0B95 9664             (/home/strick/6809):01576         chksz    lda   <u0064         Get source register back
0B97 3406             (/home/strick/6809):01577                  pshs  d              Preserve both
0B99 810C             (/home/strick/6809):01578                  cmpa  #12            Is source register the 0 register?
0B9B 2718             (/home/strick/6809):01579                  beq   L0879          Yes, destination size doesn't matter
0B9D A861             (/home/strick/6809):01580                  eora  1,s            Compare register sizes
0B9F 8408             (/home/strick/6809):01581                  anda  #%00001000     Check if they are same size
0BA1 2712             (/home/strick/6809):01582                  beq   L0879          Yes, continue
0BA3 A4E4             (/home/strick/6809):01583                  anda  ,s               if not, check if R0=16bit
0BA5 2606             (/home/strick/6809):01584                  bne   sizerr           No, 8->16 always bad
0BA7 9662             (/home/strick/6809):01585                  lda   <u0062           but 16->8 is OK
0BA9 811E             (/home/strick/6809):01586                  cmpa  #$1E             unless op=EXG
0BAB 2606             (/home/strick/6809):01587                  bne   sizewarn         if not, issue a mismatch warning
0BAD C610             (/home/strick/6809):01588         sizerr   ldb   #16              Otherwise, 'reg sizes' error
0BAF 3262             (/home/strick/6809):01589                  leas  $02,s            Eat copies of regs
0BB1 208A             (/home/strick/6809):01590                  bra   L0854            and exit
0BB3 0C4F             (/home/strick/6809):01591         sizewarn inc   <u004F           warning flag: reg size mismatch
                      (/home/strick/6809):01592         
                      (/home/strick/6809):01593         * Create operand byte
                      (/home/strick/6809):01594         * Entry: Stack contains Source & Destination register masks
0BB5 3502             (/home/strick/6809):01595         L0879    puls  a              Get back source register
0BB7 48               (/home/strick/6809):01596                  lsla                 Move into most significiant nibble
0BB8 48               (/home/strick/6809):01597                  lsla
0BB9 48               (/home/strick/6809):01598                  lsla
0BBA 48               (/home/strick/6809):01599                  lsla
0BBB AAE0             (/home/strick/6809):01600                  ora   ,s+            Merge with destination register
0BBD 9763             (/home/strick/6809):01601                  sta   <u0063         Save after opcode & return
0BBF 39               (/home/strick/6809):01602                  rts
                      (/home/strick/6809):01603         
                      (/home/strick/6809):01604         * type 8 (Stack push/pull)
0BC0 C602             (/home/strick/6809):01605         L0884    ldb   #$02           Force # bytes for instruction to 2
0BC2 D746             (/home/strick/6809):01606                  stb   <u0046
0BC4 17099F           (/home/strick/6809):01607                  lbsr  L1164          Parse to next field
0BC7 1700E3           (/home/strick/6809):01608         L088B    lbsr  L096B          Get register mask
0BCA 1025FF6D         (/home/strick/6809):01609                  lbcs   L0852          Illegal one, exit with 'register name' error
0BCE 9A63             (/home/strick/6809):01610                  ora   <u0063         Mask in bit for new reg into byte after opcode
0BD0 9763             (/home/strick/6809):01611                  sta   <u0063
0BD2 A680             (/home/strick/6809):01612                  lda   ,x+            Get next char from source
0BD4 812C             (/home/strick/6809):01613                  cmpa  #',            Comma?
0BD6 27EF             (/home/strick/6809):01614                  beq   L088B          Yes, more register masks to get
0BD8 301F             (/home/strick/6809):01615                  leax  -1,x           Bump src code ptr back 1 & return
0BDA 39               (/home/strick/6809):01616                  rts
                      (/home/strick/6809):01617         
                      (/home/strick/6809):01618         * type 9 (long branches except LBRA/LBSR)
0BDB 8604             (/home/strick/6809):01619         L089D    lda   #$04           Force # of bytes of instruction to 4
0BDD 9746             (/home/strick/6809):01620                  sta   <u0046
0BDF 301F             (/home/strick/6809):01621                  leax  -$01,x         Bump ptr back to start of mnemonic
0BE1 C613             (/home/strick/6809):01622                  ldb   #19            # opcodes to check in table
0BE3 318DFA2F         (/home/strick/6809):01623                  leay  >L0530,pc      Point to branch opcode tables
0BE7 17F740           (/home/strick/6809):01624                  lbsr  L0344          Go find & verify it
0BEA 2405             (/home/strick/6809):01625                  bcc   L08B3          Found it, continue
0BEC 3262             (/home/strick/6809):01626                  leas  $02,s          Eat stack
0BEE 16F573           (/home/strick/6809):01627                  lbra  L015F          Exit with error
                      (/home/strick/6809):01628         
0BF1 A6A4             (/home/strick/6809):01629         L08B3    lda   ,y
0BF3 9762             (/home/strick/6809):01630                  sta   <u0062
0BF5 16009B           (/home/strick/6809):01631                  lbra  L0951
                      (/home/strick/6809):01632         
                      (/home/strick/6809):01633         * type 10 (short branches)
0BF8 8602             (/home/strick/6809):01634         L08BA    lda   #$02           Force # of bytes of instruction to 2
0BFA 9746             (/home/strick/6809):01635                  sta   <u0046
0BFC 170AE8           (/home/strick/6809):01636                  lbsr  L12F1
0BFF 9340             (/home/strick/6809):01637                  subd  <u0040
0C01 830002           (/home/strick/6809):01638                  subd  #$0002
0C04 1083007F         (/home/strick/6809):01639                  cmpd  #$007F
0C08 2E06             (/home/strick/6809):01640                  bgt   L08D2
0C0A 1083FF80         (/home/strick/6809):01641                  cmpd  #$FF80
0C0E 2C07             (/home/strick/6809):01642                  bge   L08D9
0C10 C60D             (/home/strick/6809):01643         L08D2    ldb   #13              'out of range' error
0C12 17F6DF           (/home/strick/6809):01644                  lbsr  L02FA
0C15 C6FE             (/home/strick/6809):01645                  ldb   #$FE
0C17 D763             (/home/strick/6809):01646         L08D9    stb   <u0063
0C19 39               (/home/strick/6809):01647                  rts
                      (/home/strick/6809):01648         
                      (/home/strick/6809):01649         * type $B (Pseudo ops)
0C1A 338C1F           (/home/strick/6809):01650         L08DC    leau  <L08FE,pc      Point to table
0C1D 200E             (/home/strick/6809):01651                  bra   L08EF
                      (/home/strick/6809):01652         
                      (/home/strick/6809):01653         * Type $C
0C1F D62B             (/home/strick/6809):01654         L08E1    ldb   <u002B
0C21 C508             (/home/strick/6809):01655                  bitb  #$08
0C23 2705             (/home/strick/6809):01656                  beq   L08EC
0C25 C619             (/home/strick/6809):01657                  ldb   #25              'label not allowed' error
0C27 17F6CA           (/home/strick/6809):01658                  lbsr  L02FA
0C2A 338C23           (/home/strick/6809):01659         L08EC    leau  <L0912,pc      Point to table
0C2D 170936           (/home/strick/6809):01660         L08EF    lbsr  L1164          Hunt down next field in source string
0C30 D662             (/home/strick/6809):01661                  ldb   <u0062
0C32 58               (/home/strick/6809):01662                  lslb                 2 byte entries
0C33 ECC5             (/home/strick/6809):01663                  ldd   b,u
0C35 6ECB             (/home/strick/6809):01664                  jmp   d,u
                      (/home/strick/6809):01665         
                      (/home/strick/6809):01666         * Type $D
0C37 338C28           (/home/strick/6809):01667         L08F9    leau  <L0924,pc      Point to table
0C3A 20F1             (/home/strick/6809):01668                  bra   L08EF
                      (/home/strick/6809):01669         
                      (/home/strick/6809):01670         * 2 byte jump table (type B)
0C3C 034C             (/home/strick/6809):01671         L08FE    fdb   L0BA6-L08FE      RMB
0C3E 03ED             (/home/strick/6809):01672                  fdb   L0C47-L08FE      FCC
0C40 0465             (/home/strick/6809):01673                  fdb   L0CBF-L08FE      FDB
0C42 0411             (/home/strick/6809):01674                  fdb   L0C6B-L08FE      FCS
0C44 0453             (/home/strick/6809):01675                  fdb   L0CAD-L08FE      FCB
0C46 03CD             (/home/strick/6809):01676                  fdb   L0C27-L08FE      EQU
0C48 0506             (/home/strick/6809):01677                  fdb   L0D60-L08FE      MOD
0C4A 04E6             (/home/strick/6809):01678                  fdb   L0D40-L08FE      EMOD
0C4C 03D1             (/home/strick/6809):01679                  fdb   L0C2B-L08FE      SET
0C4E 04F7             (/home/strick/6809):01680                  fdb   L0D51-L08FE      OS9
                      (/home/strick/6809):01681         
                      (/home/strick/6809):01682         * Another 2 byte jump table (type C)
0C50 054B             (/home/strick/6809):01683         L0912    fdb   L0DB9-L0912      ORG
0C52 0553             (/home/strick/6809):01684                  fdb   L0DC1-L0912      END
0C54 0566             (/home/strick/6809):01685                  fdb   L0DD4-L0912      NAM
0C56 05BE             (/home/strick/6809):01686                  fdb   L0E2C-L0912      OPT
0C58 058F             (/home/strick/6809):01687                  fdb   L0DFD-L0912      TTL
0C5A 0595             (/home/strick/6809):01688                  fdb   L0E03-L0912      PAG
0C5C 059B             (/home/strick/6809):01689                  fdb   L0E09-L0912      SPC
0C5E 065A             (/home/strick/6809):01690                  fdb   L0EB3-L0912      SETDP
0C60 066B             (/home/strick/6809):01691                  fdb   L0EC4-L0912      USE
                      (/home/strick/6809):01692         
                      (/home/strick/6809):01693         * Another 2 byte jump table (type D)
0C62 0678             (/home/strick/6809):01694         L0924    fdb   L0EE3-L0924      IFEQ
0C64 067D             (/home/strick/6809):01695                  fdb   L0EE8-L0924      IFNE
0C66 0682             (/home/strick/6809):01696                  fdb   L0EED-L0924      IFLT
0C68 0687             (/home/strick/6809):01697                  fdb   L0EF2-L0924      IFLE
0C6A 068C             (/home/strick/6809):01698                  fdb   L0EF7-L0924      IFGE
0C6C 0691             (/home/strick/6809):01699                  fdb   L0EFC-L0924      IFGT
0C6E 0696             (/home/strick/6809):01700                  fdb   L0F01-L0924      IFP1
                      (/home/strick/6809):01701                 IFNE  NEWDEF
0C70 06BE             (/home/strick/6809):01702                  fdb   Lidef-L0924      IFDEF
0C72 06C3             (/home/strick/6809):01703                  fdb   Lndef-L0924      IFNDF
                      (/home/strick/6809):01704                 ENDC  NEWDEF
                      (/home/strick/6809):01705         
0C74 1708EF           (/home/strick/6809):01706         L0932    lbsr  L1164          Parse for start of next field
0C77 8123             (/home/strick/6809):01707                  cmpa  #'#            Immediate mode specifier?
0C79 2605             (/home/strick/6809):01708                  bne   L093E          No, exit with carry set
0C7B 3001             (/home/strick/6809):01709                  leax  1,x            Bump source ptr up by 1, clear carry & return
0C7D 1CFE             (/home/strick/6809):01710                  andcc #$FE
0C7F 39               (/home/strick/6809):01711                  rts
                      (/home/strick/6809):01712         
0C80 1A01             (/home/strick/6809):01713         L093E    orcc  #$01
0C82 39               (/home/strick/6809):01714                  rts
                      (/home/strick/6809):01715         
                      (/home/strick/6809):01716         * Immediate mode check
0C83 D647             (/home/strick/6809):01717         L0941    ldb   <u0047         Get current opcode's flag byte
0C85 C540             (/home/strick/6809):01718                  bitb  #%01000000     Immediate mode legal?
0C87 2601             (/home/strick/6809):01719                  bne   L0948          No, do something
0C89 39               (/home/strick/6809):01720                  rts                  Yes, return
                      (/home/strick/6809):01721         
0C8A C603             (/home/strick/6809):01722         L0948    ldb   #$03           Set size of illegal instruction to 3 bytes
0C8C D746             (/home/strick/6809):01723                  stb   <u0046
0C8E C60C             (/home/strick/6809):01724                  ldb   #12              'address mode' error
0C90 16F661           (/home/strick/6809):01725                  lbra  L02FA
                      (/home/strick/6809):01726         
                      (/home/strick/6809):01727         * Long Relative address calculation for LBRA/LBSR, etc
0C93 170A51           (/home/strick/6809):01728         L0951    lbsr  L12F1
0C96 9340             (/home/strick/6809):01729                  subd  <u0040
0C98 D046             (/home/strick/6809):01730                  subb  <u0046
0C9A 8200             (/home/strick/6809):01731                  sbca  #$00
0C9C DD63             (/home/strick/6809):01732                  std   <u0063
0C9E 1083007F         (/home/strick/6809):01733                  cmpd  #$007F
0CA2 2E08             (/home/strick/6809):01734                  bgt   L096A
0CA4 1083FF80         (/home/strick/6809):01735                  cmpd  #$FF80
0CA8 2D02             (/home/strick/6809):01736                  blt   L096A
0CAA 0C4F             (/home/strick/6809):01737                  inc   <u004F           warning flag: we could use short rel here
0CAC 39               (/home/strick/6809):01738         L096A    rts
                      (/home/strick/6809):01739         
                      (/home/strick/6809):01740         * Entry: X=ptr to start of reg name from source
                      (/home/strick/6809):01741         * Exit:  A=Bit mask for PSH/PUL
                      (/home/strick/6809):01742         *        B=Bit mask for EXG/TFR
0CAD 318C33           (/home/strick/6809):01743         L096B    leay  <L09A2,pc      Point to register names
0CB0 C610             (/home/strick/6809):01744                  ldb   #16            # of register names to check
                      (/home/strick/6809):01745         * Alternate entry for BAND regname search
0CB2 3410             (/home/strick/6809):01746         L0971    pshs  x              Save start of current register we are checking
0CB4 A6A4             (/home/strick/6809):01747         L0973    lda   ,y             Get byte from reg. name
0CB6 2718             (/home/strick/6809):01748                  beq   L098F          If NUL (empty entry), skip this entry
0CB8 A180             (/home/strick/6809):01749                  cmpa  ,x+            Compare with source
0CBA 2706             (/home/strick/6809):01750                  beq   L0981          Equal, skip ahead
0CBC 8820             (/home/strick/6809):01751                  eora  #$20           Toggle lowercase (also fixes 0 register bug)
0CBE A11F             (/home/strick/6809):01752                  cmpa  -$01,x         Compare with source
0CC0 260E             (/home/strick/6809):01753                  bne   L098F          Not equal, skip ahead
                      (/home/strick/6809):01754         * Found reg name we want
0CC2 A621             (/home/strick/6809):01755         L0981    lda   $01,y          Get 2nd char of reg name
0CC4 2715             (/home/strick/6809):01756                  beq   L099A          NUL, only 1 char, so we match
0CC6 A180             (/home/strick/6809):01757                  cmpa  ,x+            2nd char match too?
0CC8 2711             (/home/strick/6809):01758                  beq   L099A          Yes, found reg
0CCA 8B20             (/home/strick/6809):01759                  adda  #$20           Convert to lowercase
0CCC A11F             (/home/strick/6809):01760                  cmpa  -$01,x         Does that match?
0CCE 270B             (/home/strick/6809):01761                  beq   L099A          Yes, found it
                      (/home/strick/6809):01762         * Not the register name we want, try next one
0CD0 AEE4             (/home/strick/6809):01763         L098F    ldx   ,s             Get ptr to start of current register
0CD2 3123             (/home/strick/6809):01764                  leay  $03,y          Bump to next one
0CD4 5A               (/home/strick/6809):01765                  decb                 Dec # registers left to check counter
0CD5 26DD             (/home/strick/6809):01766                  bne   L0973          Keep doing till done
0CD7 1A01             (/home/strick/6809):01767                  orcc  #$01           Set carry flag (illegal register name)
0CD9 3590             (/home/strick/6809):01768                  puls  pc,x           Restore X & return
                      (/home/strick/6809):01769         * Found register name we wanted
0CDB 5A               (/home/strick/6809):01770         L099A    decb                 Adjust B (EXG/TFR mask)
0CDC 3262             (/home/strick/6809):01771                  leas  $02,s          Eat X off the stack
0CDE A622             (/home/strick/6809):01772                  lda   $02,y          Get PSH/PUL bit mask
0CE0 1CFE             (/home/strick/6809):01773                  andcc #$FE           No error & return
0CE2 39               (/home/strick/6809):01774                  rts
                      (/home/strick/6809):01775         * Stack table: 2 bytes for reg. name, 1 byte for bit mask for PSH/PUL
                      (/home/strick/6809):01776         * Positions (done in reverse from highest to lowest) indicates the bit
                      (/home/strick/6809):01777         * mask for register to register operations (ex. TFR)
0CE3 460000           (/home/strick/6809):01778         L09A2    fcb   'F,00,$00        %1111 F
0CE6 450000           (/home/strick/6809):01779                  fcb   'E,00,$00        %1110 E
0CE9 000000           (/home/strick/6809):01780                  fcb   00,00,$00        %1101 (2nd zero register won't be used)
0CEC 300000           (/home/strick/6809):01781                  fcb   '0,00,$00        %1100 Zero register
0CEF 445008           (/home/strick/6809):01782                  fcb   'D,'P,$08        %1011 DP
0CF2 434301           (/home/strick/6809):01783                  fcb   'C,'C,$01        %1010 CC
0CF5 420004           (/home/strick/6809):01784                  fcb   'B,00,$04        %1001 B
0CF8 410002           (/home/strick/6809):01785                  fcb   'A,00,$02        %1000 A
0CFB 560000           (/home/strick/6809):01786                  fcb   'V,00,$00        %0111 V
0CFE 570000           (/home/strick/6809):01787                  fcb   'W,00,$00        %0110 W
0D01 504380           (/home/strick/6809):01788                  fcb   'P,'C,$80        %0101 PC
0D04 530040           (/home/strick/6809):01789                  fcb   'S,00,$40        %0100 S
0D07 550040           (/home/strick/6809):01790                  fcb   'U,00,$40        %0011 U
0D0A 590020           (/home/strick/6809):01791                  fcb   'Y,00,$20        %0010 Y
0D0D 580010           (/home/strick/6809):01792                  fcb   'X,00,$10        %0001 X
0D10 440006           (/home/strick/6809):01793                  fcb   'D,00,$06        %0000 D (A & B combined)
                      (/home/strick/6809):01794         
                      (/home/strick/6809):01795         * Generic memory mode addressing handler: Indexed, Extended, Direct Page
0D13 170850           (/home/strick/6809):01796         L09C6    lbsr  L1164          Parse for next field in source
0D16 8D55             (/home/strick/6809):01797                  bsr   L0A14          Check for '<' (DP) & '>' (Extended) modes
0D18 815B             (/home/strick/6809):01798                  cmpa  #'[            Next char indicate indirect mode?
0D1A 2608             (/home/strick/6809):01799                  bne   L09D7          No, try next
0D1C 0C4D             (/home/strick/6809):01800                  inc   <u004D         Set flag for indirect mode
0D1E 3001             (/home/strick/6809):01801                  leax  1,x            Bump src code ptr up by 1
0D20 A684             (/home/strick/6809):01802                  lda   ,x             Get next byte
0D22 8D49             (/home/strick/6809):01803                  bsr   L0A14          Check for '<' or '>' & set flag
0D24 812C             (/home/strick/6809):01804         L09D7    cmpa  #',            Comma?
0D26 102700A3         (/home/strick/6809):01805                  lbeq  L0A64          Yes, skip ahead for ,R/,R auto inc/dec
                      (/home/strick/6809):01806         * comma is not first char
0D2A E601             (/home/strick/6809):01807                  ldb   1,x            No, get next char into B
0D2C C12C             (/home/strick/6809):01808                  cmpb  #',            Is it a comma? (ie 1st was register name?)
0D2E 261A             (/home/strick/6809):01809                  bne   L09F1          No, try label/number routine ???
0D30 84DF             (/home/strick/6809):01810                  anda  #$DF           Force to uppercase
0D32 8141             (/home/strick/6809):01811                  cmpa  #'A            Is it an A?
0D34 274A             (/home/strick/6809):01812                  beq   L0A27          Yes, go process
0D36 8142             (/home/strick/6809):01813                  cmpa  #'B            Is it a B?
0D38 274A             (/home/strick/6809):01814                  beq   L0A2B          Yes, go process
0D3A 8144             (/home/strick/6809):01815                  cmpa  #'D            Is it a D?
0D3C 274A             (/home/strick/6809):01816                  beq   L0A2F          Yes, go process
0D3E 8145             (/home/strick/6809):01817                  cmpa  #'E            Is it an E?
0D40 274A             (/home/strick/6809):01818                  beq   MaskE
0D42 8146             (/home/strick/6809):01819                  cmpa  #'F            Is it an F?
0D44 274A             (/home/strick/6809):01820                  beq   MaskF
0D46 8157             (/home/strick/6809):01821                  cmpa  #'W            Is it a W?
0D48 274A             (/home/strick/6809):01822                  beq   MaskW
                      (/home/strick/6809):01823         * Not a R0,xx... try for numeric or label
0D4A 17099A           (/home/strick/6809):01824         L09F1    lbsr  L12F1          Parse for numeric (returns 16 bit # in D)
0D4D 2402             (/home/strick/6809):01825                  bcc   L09F8          Found one, preserve it
0D4F 4F               (/home/strick/6809):01826                  clra                 Otherwise, default to 0
0D50 5F               (/home/strick/6809):01827                  clrb
0D51 DD4A             (/home/strick/6809):01828         L09F8    std   <u004A         Save 16 bit address
0D53 A684             (/home/strick/6809):01829                  lda   ,x             Get char from src code
0D55 812C             (/home/strick/6809):01830                  cmpa  #',            Comma?
0D57 10270148         (/home/strick/6809):01831                  lbeq  L0B18          Yes, skip way ahead
0D5B D64D             (/home/strick/6809):01832                  ldb   <u004D         Get indirect mode flag
0D5D 263B             (/home/strick/6809):01833                  bne   L0A35          If on, skip ahead
0D5F D64C             (/home/strick/6809):01834                  ldb   <u004C         Get Extended/DP/Indexed mode flag
0D61 2B37             (/home/strick/6809):01835                  bmi   L0A35          If Extended, go do it
0D63 2653             (/home/strick/6809):01836                  bne   L0A53          If Direct Page, go somewhere else
0D65 964A             (/home/strick/6809):01837                  lda   <u004A
0D67 913F             (/home/strick/6809):01838                  cmpa  <u003F
0D69 274D             (/home/strick/6809):01839                  beq   L0A53
0D6B 202D             (/home/strick/6809):01840                  bra   L0A35
                      (/home/strick/6809):01841         
                      (/home/strick/6809):01842         * Check for '>' or '<' (Extended or Direct Page addressing)
                      (/home/strick/6809):01843         * Set flag @ <u004C to $FF for >, $01 for <
0D6D C6FF             (/home/strick/6809):01844         L0A14    ldb   #$FF           16 bit addressing flag
0D6F 813E             (/home/strick/6809):01845                  cmpa  #'>            16 bit addressing?
0D71 2706             (/home/strick/6809):01846                  beq   L0A20          Yes, set flag
0D73 813C             (/home/strick/6809):01847                  cmpa  #'<            8 bit addressing?
0D75 2608             (/home/strick/6809):01848                  bne   L0A26          No, return
0D77 C601             (/home/strick/6809):01849                  ldb   #$01           8 bit addressing flag
0D79 D74C             (/home/strick/6809):01850         L0A20    stb   <u004C         Save bit size addressing flag
0D7B 3001             (/home/strick/6809):01851                  leax  1,x            Bump source ptr
0D7D A684             (/home/strick/6809):01852                  lda   ,x             Get next char & return
0D7F 39               (/home/strick/6809):01853         L0A26    rts
                      (/home/strick/6809):01854         
                      (/home/strick/6809):01855         * A,R comes here
0D80 C686             (/home/strick/6809):01856         L0A27    ldb   #%10000110
0D82 2012             (/home/strick/6809):01857                  bra   L0A31
                      (/home/strick/6809):01858         
                      (/home/strick/6809):01859         * B,R comes here
0D84 C685             (/home/strick/6809):01860         L0A2B    ldb   #%10000101
0D86 200E             (/home/strick/6809):01861                  bra   L0A31
                      (/home/strick/6809):01862         
                      (/home/strick/6809):01863         * D,R comes here
0D88 C68B             (/home/strick/6809):01864         L0A2F    ldb   #%10001011
0D8A 200A             (/home/strick/6809):01865                  bra   L0A31
                      (/home/strick/6809):01866         * E,R comes here
0D8C C687             (/home/strick/6809):01867         MaskE    ldb   #%10000111
0D8E 2006             (/home/strick/6809):01868                  bra   L0A31
                      (/home/strick/6809):01869         * F,R comes here
0D90 C68A             (/home/strick/6809):01870         MaskF    ldb   #%10001010
0D92 2002             (/home/strick/6809):01871                  bra   L0A31
                      (/home/strick/6809):01872         * W,R comes here
0D94 C68E             (/home/strick/6809):01873         MaskW    ldb   #%10001110
0D96 3001             (/home/strick/6809):01874         L0A31    leax  1,x            Bump src ptr up by 1
0D98 2066             (/home/strick/6809):01875                  bra   L0A97          Skip ahead
                      (/home/strick/6809):01876         
                      (/home/strick/6809):01877         * Extended Indirect indexed or Extended modes go here
0D9A DC4A             (/home/strick/6809):01878         L0A35    ldd   <u004A         Get 16 bit address
0D9C 0C46             (/home/strick/6809):01879                  inc   <u0046         Add 2 to # bytes for instruction
0D9E 0C46             (/home/strick/6809):01880                  inc   <u0046
0DA0 0C4F             (/home/strick/6809):01881                  inc   <u004F         warning flag: extended addressing mode
0DA2 0D4D             (/home/strick/6809):01882                  tst   <u004D         Indirect mode on?
0DA4 2609             (/home/strick/6809):01883                  bne   L0A4A          Yes, Need to add $9F postbyte first
0DA6 DD63             (/home/strick/6809):01884                  std   <u0063         Save extended address
0DA8 C630             (/home/strick/6809):01885                  ldb   #%00110000     Mask in bit flags for extended mode & return
0DAA DA62             (/home/strick/6809):01886                  orb   <u0062
0DAC D762             (/home/strick/6809):01887                  stb   <u0062
0DAE 39               (/home/strick/6809):01888                  rts
                      (/home/strick/6809):01889         
                      (/home/strick/6809):01890         * Extended indirect (ex. JMP [<$2000])
0DAF DD64             (/home/strick/6809):01891         L0A4A    std   <u0064         Store 16 bit address after post-byte
0DB1 C69F             (/home/strick/6809):01892                  ldb   #%10011111     Append $9f post-byte for Extended Indirect
0DB3 D763             (/home/strick/6809):01893                  stb   <u0063
0DB5 1600BD           (/home/strick/6809):01894                  lbra  L0AEA
                      (/home/strick/6809):01895         
                      (/home/strick/6809):01896         * Direct page mode
0DB8 0C46             (/home/strick/6809):01897         L0A53    inc   <u0046         Add 1 to # bytes this instruction
0DBA C601             (/home/strick/6809):01898                  ldb   #$01             Set direct mode flag
0DBC D74C             (/home/strick/6809):01899                  stb   <u004C           (used by Type F BAND ops)
0DBE D64B             (/home/strick/6809):01900                  ldb   <u004B         Get 8 bit # (LSB of D from L12F1)
0DC0 D763             (/home/strick/6809):01901                  stb   <u0063         Save it as DP address
0DC2 D662             (/home/strick/6809):01902                  ldb   <u0062         get opcode
0DC4 C5F0             (/home/strick/6809):01903                  bitb  #%11110000     Is it a $0-$F Direct page command?
0DC6 2704             (/home/strick/6809):01904                  beq   L0A63          Yes, opcode is fine
0DC8 CA10             (/home/strick/6809):01905                  orb   #%00010000     No, force DP mode bit on in opcode
0DCA D762             (/home/strick/6809):01906                  stb   <u0062
0DCC 39               (/home/strick/6809):01907         L0A63    rts
                      (/home/strick/6809):01908         
                      (/home/strick/6809):01909         * Comes here if first char is ',' (after parsing '[' if needed)
0DCD 3001             (/home/strick/6809):01910         L0A64    leax  1,x            Bump source ptr up by 1
0DCF 0F4A             (/home/strick/6809):01911                  clr   <u004A         Clear 16 bit offset address
0DD1 0F4B             (/home/strick/6809):01912                  clr   <u004B
0DD3 EC84             (/home/strick/6809):01913                  ldd   ,x             Get 2 chars from source
0DD5 10832D2D         (/home/strick/6809):01914                  cmpd  #$2D2D         '--' ?
0DD9 271B             (/home/strick/6809):01915                  beq   L0A8D          Yes, go merge mask for --
0DDB 812D             (/home/strick/6809):01916                  cmpa  #'-            '-' ?
0DDD 271D             (/home/strick/6809):01917                  beq   L0A93          Yes, go merge mask for -
0DDF 8D71             (/home/strick/6809):01918                  bsr   L0AC7          Otherwise, Go find base index register (X,Y,U,S)
0DE1 1025010E         (/home/strick/6809):01919                  lbcs  L0B68          Couldn't find one, check for 'PC' offset
                      (/home/strick/6809):01920         * Found base register
0DE5 D763             (/home/strick/6809):01921                  stb   <u0063         Save base register bit mask in postbyte
0DE7 EC84             (/home/strick/6809):01922                  ldd   ,x             Get next 2 chars from src (after base reg. name)
0DE9 10832B2B         (/home/strick/6809):01923                  cmpd  #$2B2B      '++' ?
0DED 2747             (/home/strick/6809):01924                  beq   L0AAB          Yes, go process
0DEF 812B             (/home/strick/6809):01925                  cmpa  #'+            '+' ?
0DF1 2749             (/home/strick/6809):01926                  beq   L0AB1          Yes, go process
0DF3 1600B7           (/home/strick/6809):01927                  lbra  L0B22
                      (/home/strick/6809):01928         
                      (/home/strick/6809):01929         * Mask for double dec. mode
0DF6 3001             (/home/strick/6809):01930         L0A8D    leax  1,x            Bump src ptr up by 1
0DF8 C683             (/home/strick/6809):01931                  ldb   #%10000011     Mask for -- mode
0DFA 2004             (/home/strick/6809):01932                  bra   L0A97          Merge into post byte
                      (/home/strick/6809):01933         * Mask for single dec. mode
0DFC 8D4A             (/home/strick/6809):01934         L0A93    bsr   L0ABD          Make sure we aren't indirect-it's illegal
0DFE C682             (/home/strick/6809):01935                  ldb   #%10000010     Mask for - mode
0E00 D763             (/home/strick/6809):01936         L0A97    stb   <u0063         Save mask in postbyte
0E02 3001             (/home/strick/6809):01937                  leax  1,x            Bump src ptr up 1 byte
0E04 8D4C             (/home/strick/6809):01938                  bsr   L0AC7          Go get base register (X,Y,U,S)
0E06 2428             (/home/strick/6809):01939                  bcc   L0AA5          Found it, merge in base register mask
                      (/home/strick/6809):01940         *
                      (/home/strick/6809):01941         * W CHECK SHOULD GO HERE (but --/-/ or A/B/D/E/F/W,R all come here)
                      (/home/strick/6809):01942         *
0E08 A684             (/home/strick/6809):01943                  lda   ,x             Get base reg name again
0E0A 845F             (/home/strick/6809):01944                  anda  #$5F           Force to upper case
0E0C 8157             (/home/strick/6809):01945                  cmpa  #'W            Is it a W?
0E0E 2618             (/home/strick/6809):01946                  bne   Noway          No, completely illegal
0E10 D663             (/home/strick/6809):01947                  ldb   <u0063         Get current post byte mask
0E12 C183             (/home/strick/6809):01948                  cmpb  #%10000011     Is it a '--'?
0E14 2612             (/home/strick/6809):01949                  bne   Noway          No, that is the only legal '-' type for W
0E16 3001             (/home/strick/6809):01950                  leax  1,x            Bump ptr past 'W'
0E18 0D4D             (/home/strick/6809):01951                  tst   <u004D         Indirect?
0E1A 2706             (/home/strick/6809):01952                  beq   NormWMn        No, use normal ,--W mask
0E1C C6E0             (/home/strick/6809):01953                  ldb   #%11100000     Bit mask for [,--W] except for Indirect bit
0E1E D763             (/home/strick/6809):01954                  stb   <u0063         Save in post byte
0E20 2053             (/home/strick/6809):01955                  bra   L0AEA          Finish processing
0E22 C6EF             (/home/strick/6809):01956         NormWMn  ldb   #%11101111     Bit mask for ,--W
0E24 D763             (/home/strick/6809):01957                  stb   <u0063         Save in post byte
0E26 204D             (/home/strick/6809):01958                  bra   L0AEA          Finish processing
0E28 1A01             (/home/strick/6809):01959         Noway    orcc  #$01           Set error flag
                      (/home/strick/6809):01960         *++ end of W check
                      (/home/strick/6809):01961         
0E2A C613             (/home/strick/6809):01962         L0A9F    ldb   #19              illegal 'index reg' error
0E2C 17F4C5           (/home/strick/6809):01963                  lbsr  L02FA
0E2F 5F               (/home/strick/6809):01964                  clrb                 So clear postbyte to 0
0E30 DA63             (/home/strick/6809):01965         L0AA5    orb   <u0063         Merge in mask into postbyte
0E32 D763             (/home/strick/6809):01966                  stb   <u0063
0E34 203F             (/home/strick/6809):01967                  bra   L0AEA
                      (/home/strick/6809):01968         * Mask for double inc. mode
0E36 C681             (/home/strick/6809):01969         L0AAB    ldb   #%10000001     Mask for ++ mode
0E38 3001             (/home/strick/6809):01970                  leax  1,x            Bump up src ptr by 1
0E3A 2004             (/home/strick/6809):01971                  bra   L0AB5          Merge into postbyte
                      (/home/strick/6809):01972         * Mask for single inc. mode
0E3C 8D0A             (/home/strick/6809):01973         L0AB1    bsr   L0ABD          Make sure we aren't indirect-it's illegal
0E3E C680             (/home/strick/6809):01974                  ldb   #%10000000     Mask for + mode
                      (/home/strick/6809):01975         
0E40 3001             (/home/strick/6809):01976         L0AB5    leax  1,x            Bump up src ptr by 1
0E42 DA63             (/home/strick/6809):01977                  orb   <u0063         Merge in auto inc. modes
0E44 D763             (/home/strick/6809):01978                  stb   <u0063
0E46 202D             (/home/strick/6809):01979                  bra   L0AEA
                      (/home/strick/6809):01980         
                      (/home/strick/6809):01981         * Check ,-R or ,R+: illegal if INDIRECT mode
0E48 0D4D             (/home/strick/6809):01982         L0ABD    tst   <u004D         Check indirect mode flag
0E4A 2705             (/home/strick/6809):01983                  beq   L0AC6          Normal, exit
0E4C C60C             (/home/strick/6809):01984                  ldb   #12              Indirect ,-R is illegal, 'address mode' error
0E4E 17F4A3           (/home/strick/6809):01985                  lbsr  L02FA
0E51 39               (/home/strick/6809):01986         L0AC6    rts
                      (/home/strick/6809):01987         
                      (/home/strick/6809):01988         * Exit: B=bit mask for proper index register (X,Y,U,S)
                      (/home/strick/6809):01989         *       carry set=not legal register
0E52 A680             (/home/strick/6809):01990         L0AC7    lda   ,x+            Get next char from source
0E54 845F             (/home/strick/6809):01991                  anda  #$5F           Force to uppercase
0E56 5F               (/home/strick/6809):01992                  clrb                 X register mask
0E57 8158             (/home/strick/6809):01993                  cmpa  #'X            X register?
0E59 2712             (/home/strick/6809):01994                  beq   L0AE2          Yes, acceptable
0E5B C620             (/home/strick/6809):01995                  ldb   #%00100000     Y register mask
0E5D 8159             (/home/strick/6809):01996                  cmpa  #'Y            Y register
0E5F 270C             (/home/strick/6809):01997                  beq   L0AE2
0E61 C640             (/home/strick/6809):01998                  ldb   #%01000000     U register mask
0E63 8155             (/home/strick/6809):01999                  cmpa  #'U            U register?
0E65 2706             (/home/strick/6809):02000                  beq   L0AE2
0E67 C660             (/home/strick/6809):02001                  ldb   #%01100000     S register mask
0E69 8153             (/home/strick/6809):02002                  cmpa  #'S            S register?
0E6B 2603             (/home/strick/6809):02003                  bne   L0AE5          No, not a 'x,R' or 'R+/++' situation
0E6D 1CFE             (/home/strick/6809):02004         L0AE2    andcc #$FE           No error & return
0E6F 39               (/home/strick/6809):02005                  rts
                      (/home/strick/6809):02006         
0E70 301F             (/home/strick/6809):02007         L0AE5    leax  -1,x           Bump source ptr back
0E72 1A01             (/home/strick/6809):02008                  orcc  #$01           Set carry (couldn't find index register) & return
0E74 39               (/home/strick/6809):02009                  rts
                      (/home/strick/6809):02010         * Part of indexed mode handler
                      (/home/strick/6809):02011         * This part sets the INDEXED mode bit in the opcode itself, and also sets
                      (/home/strick/6809):02012         * the INDIRECT bit in the postbyte. Both of these are compatible with the new
                      (/home/strick/6809):02013         * W modes (with W being the base register), so this routine does not have to
                      (/home/strick/6809):02014         * be changed.
0E75 C620             (/home/strick/6809):02015         L0AEA    ldb   #%00100000     Mask bit for indexed instruction opcodes
0E77 DA62             (/home/strick/6809):02016                  orb   <u0062         Force instruction to indexed mode
0E79 D762             (/home/strick/6809):02017                  stb   <u0062
0E7B 0C46             (/home/strick/6809):02018                  inc   <u0046         Add 1 to size of instruction
0E7D 0C4E             (/home/strick/6809):02019                  inc   <u004E         ???
0E7F 0D4D             (/home/strick/6809):02020                  tst   <u004D         Indirect mode active?
0E81 2710             (/home/strick/6809):02021                  beq   L0B08          No, skip ahead
0E83 C610             (/home/strick/6809):02022                  ldb   #%00010000     Indirect mode bit mask
0E85 DA63             (/home/strick/6809):02023                  orb   <u0063         Mask into Postbyte
0E87 D763             (/home/strick/6809):02024                  stb   <u0063
0E89 A680             (/home/strick/6809):02025                  lda   ,x+            Get next char from source
0E8B 815D             (/home/strick/6809):02026                  cmpa  #']            End of indirect mode?
0E8D 2704             (/home/strick/6809):02027                  beq   L0B08          Yes, go check for end of line
0E8F C614             (/home/strick/6809):02028                  ldb   #20              '] missing' error
0E91 200C             (/home/strick/6809):02029                  bra   L0B14
                      (/home/strick/6809):02030         
0E93 A684             (/home/strick/6809):02031         L0B08    lda   ,x             Get char from source
0E95 8120             (/home/strick/6809):02032                  cmpa  #$20           Space?
0E97 2709             (/home/strick/6809):02033                  beq   L0B17          Yes, exit
0E99 810D             (/home/strick/6809):02034                  cmpa  #$0D           CR?
0E9B 2705             (/home/strick/6809):02035                  beq   L0B17          Yes, exit
0E9D C60C             (/home/strick/6809):02036         L0B12    ldb   #12              'address mode' error
0E9F 17F452           (/home/strick/6809):02037         L0B14    lbsr  L02FA
0EA2 39               (/home/strick/6809):02038         L0B17    rts                  No error & return
                      (/home/strick/6809):02039         
0EA3 3001             (/home/strick/6809):02040         L0B18    leax  1,x            Bump src ptr up by 1
0EA5 8DAB             (/home/strick/6809):02041                  bsr   L0AC7
0EA7 254A             (/home/strick/6809):02042                  bcs   L0B68
0EA9 DA63             (/home/strick/6809):02043                  orb   <u0063
0EAB D763             (/home/strick/6809):02044                  stb   <u0063
0EAD DC4A             (/home/strick/6809):02045         L0B22    ldd   <u004A
0EAF 0D4C             (/home/strick/6809):02046                  tst   <u004C
0EB1 2B32             (/home/strick/6809):02047                  bmi   L0B5A
0EB3 2628             (/home/strick/6809):02048                  bne   L0B52
0EB5 DC4A             (/home/strick/6809):02049                  ldd   <u004A
0EB7 2604             (/home/strick/6809):02050                  bne   L0B32
0EB9 C684             (/home/strick/6809):02051                  ldb   #$84
0EBB 2030             (/home/strick/6809):02052                  bra   L0B62
0EBD 0D4D             (/home/strick/6809):02053         L0B32    tst   <u004D
0EBF 2610             (/home/strick/6809):02054                  bne   L0B46
0EC1 1083000F         (/home/strick/6809):02055                  cmpd  #$000F
0EC5 2E0A             (/home/strick/6809):02056                  bgt   L0B46
0EC7 1083FFF0         (/home/strick/6809):02057                  cmpd  #$FFF0
0ECB 2D04             (/home/strick/6809):02058                  blt   L0B46
0ECD C41F             (/home/strick/6809):02059                  andb  #$1F
0ECF 201C             (/home/strick/6809):02060                  bra   L0B62
0ED1 1083007F         (/home/strick/6809):02061         L0B46    cmpd  #$007F
0ED5 2E0E             (/home/strick/6809):02062                  bgt   L0B5A
0ED7 1083FF80         (/home/strick/6809):02063                  cmpd  #$FF80
0EDB 2D08             (/home/strick/6809):02064                  blt   L0B5A
0EDD D764             (/home/strick/6809):02065         L0B52    stb   <u0064
0EDF 0C46             (/home/strick/6809):02066                  inc   <u0046
0EE1 C688             (/home/strick/6809):02067                  ldb   #$88
0EE3 2008             (/home/strick/6809):02068                  bra   L0B62
0EE5 DD64             (/home/strick/6809):02069         L0B5A    std   <u0064
0EE7 0C46             (/home/strick/6809):02070                  inc   <u0046
0EE9 0C46             (/home/strick/6809):02071                  inc   <u0046
0EEB C689             (/home/strick/6809):02072                  ldb   #$89
0EED DA63             (/home/strick/6809):02073         L0B62    orb   <u0063
0EEF D763             (/home/strick/6809):02074                  stb   <u0063
0EF1 2082             (/home/strick/6809):02075                  bra   L0AEA
0EF3 EC84             (/home/strick/6809):02076         L0B68    ldd   ,x
0EF5 845F             (/home/strick/6809):02077                  anda  #$5F
0EF7 C45F             (/home/strick/6809):02078                  andb  #$5F
0EF9 10835043         (/home/strick/6809):02079                  cmpd  #$5043           'PC' reg?
0EFD 2757             (/home/strick/6809):02080                  beq   GotPC          Yes, do PC addressing
0EFF 8157             (/home/strick/6809):02081                  cmpa  #'W            Is it 'W'?
0F01 1026FF25         (/home/strick/6809):02082                  lbne  L0A9F          No, return with 'illegal reg' error
0F05 3001             (/home/strick/6809):02083                  leax  1,x            Bump ptr past 'W'
0F07 DC4A             (/home/strick/6809):02084                  ldd   <u004A         Get offset calculated (if any)
0F09 2712             (/home/strick/6809):02085                  beq   TryWplus       None, try W+
0F0B DD64             (/home/strick/6809):02086                  std   <u0064         Save offset for mmmm,W
0F0D 0C46             (/home/strick/6809):02087                  inc   <u0046         Add 2 to opcode byte count
0F0F 0C46             (/home/strick/6809):02088                  inc   <u0046
0F11 0D4D             (/home/strick/6809):02089                  tst   <u004D         Indirect mode on?
0F13 2604             (/home/strick/6809):02090                  bne   DoInd2         Yes, do that mask
0F15 C6AF             (/home/strick/6809):02091                  ldb   #%10101111     mmmm,W
0F17 2026             (/home/strick/6809):02092                  bra   SaveMsk        Finish things up
0F19 C6B0             (/home/strick/6809):02093         DoInd2   ldb   #%10110000     [mmmm,W]
0F1B 2022             (/home/strick/6809):02094                  bra   SaveMsk        Finish things up
0F1D EC84             (/home/strick/6809):02095         TryWplus ldd   ,x             Get next 2 bytes
0F1F 10832B2B         (/home/strick/6809):02096                  cmpd  #$2B2B         Is it '++'?
0F23 2723             (/home/strick/6809):02097                  beq   DoWplus        Yes, go do that
0F25 812B             (/home/strick/6809):02098                  cmpa  #'+            Is it '+'?
0F27 1027FF72         (/home/strick/6809):02099                  lbeq  L0B12          Yes, 'Address mode' error
0F2B 8120             (/home/strick/6809):02100                  cmpa  #$20           Next char a space?
0F2D 270A             (/home/strick/6809):02101                  beq   JustW          Yes, just ,W
0F2F 810D             (/home/strick/6809):02102                  cmpa  #$0D           CR?
0F31 2706             (/home/strick/6809):02103                  beq   JustW          Yes, just ,W
0F33 815D             (/home/strick/6809):02104                  cmpa  #']            Close (for indirect)?
0F35 1026FF64         (/home/strick/6809):02105                  lbne  L0B12          No, 'Address mode' error
0F39 0D4D             (/home/strick/6809):02106         JustW    tst   <u004D         Indirect mode on?
0F3B 2607             (/home/strick/6809):02107                  bne   DoInd          Yes, make appropriate mask
0F3D C68F             (/home/strick/6809):02108                  ldb   #%10001111     Normal ,W mask
0F3F D763             (/home/strick/6809):02109         SaveMsk  stb   <u0063         Save it
0F41 16FF31           (/home/strick/6809):02110                  lbra  L0AEA          Go finish things up
0F44 C690             (/home/strick/6809):02111         DoInd    ldb   #%10010000     [,W] mask
0F46 20F7             (/home/strick/6809):02112                  bra   SaveMsk        Finish it up
0F48 3002             (/home/strick/6809):02113         DoWplus  leax  2,x            Bump ptr past '++'
0F4A 0D4D             (/home/strick/6809):02114                  tst   <u004D         Indirect mode on?
0F4C 2604             (/home/strick/6809):02115                  bne   Indplus        Yes, go make mask
0F4E C6CF             (/home/strick/6809):02116                  ldb   #%11001111     ,W++
0F50 20ED             (/home/strick/6809):02117                  bra   SaveMsk
0F52 C6D0             (/home/strick/6809):02118         Indplus  ldb   #%11010000     [,W++]
0F54 20E9             (/home/strick/6809):02119                  bra   SaveMsk
0F56 3002             (/home/strick/6809):02120         GotPC    leax  2,x            Bump source ptr past PC
0F58 A684             (/home/strick/6809):02121                  lda   ,x
0F5A 845F             (/home/strick/6809):02122                  anda  #$5F
0F5C 8152             (/home/strick/6809):02123                  cmpa  #'R              'pcR'?
0F5E 2602             (/home/strick/6809):02124                  bne   L0B82
0F60 3001             (/home/strick/6809):02125                  leax  $01,x
0F62 0C46             (/home/strick/6809):02126         L0B82    inc   <u0046
0F64 DC4A             (/home/strick/6809):02127                  ldd   <u004A
0F66 9340             (/home/strick/6809):02128                  subd  <u0040
0F68 D046             (/home/strick/6809):02129                  subb  <u0046
0F6A 8200             (/home/strick/6809):02130                  sbca  #$00
0F6C 830001           (/home/strick/6809):02131                  subd  #$0001
0F6F 0D4C             (/home/strick/6809):02132                  tst   <u004C
0F71 2B09             (/home/strick/6809):02133                  bmi   L0B9B
0F73 2707             (/home/strick/6809):02134                  beq   L0B9B
0F75 D764             (/home/strick/6809):02135                  stb   <u0064
0F77 C68C             (/home/strick/6809):02136                  ldb   #$8C
0F79 16FF71           (/home/strick/6809):02137                  lbra   L0B62
0F7C 830001           (/home/strick/6809):02138         L0B9B    subd  #$0001
0F7F 0C46             (/home/strick/6809):02139                  inc   <u0046
0F81 DD64             (/home/strick/6809):02140                  std   <u0064
0F83 C68D             (/home/strick/6809):02141                  ldb   #$8D
0F85 16FF65           (/home/strick/6809):02142                  lbra   L0B62
                      (/home/strick/6809):02143         
                      (/home/strick/6809):02144         ** RMB pseudo op
0F88 8D3C             (/home/strick/6809):02145         L0BA6    bsr   L0BE4
0F8A 3406             (/home/strick/6809):02146                  pshs  d
0F8C D326             (/home/strick/6809):02147                  addd  <u0026
0F8E DD26             (/home/strick/6809):02148                  std   <u0026
0F90 8D3F             (/home/strick/6809):02149                  bsr   L0BEF
0F92 2704             (/home/strick/6809):02150                  beq   L0BB6
0F94 8604             (/home/strick/6809):02151                  lda   #$04
0F96 8D41             (/home/strick/6809):02152                  bsr   L0BF7
0F98 8D20             (/home/strick/6809):02153         L0BB6    bsr   L0BD8
0F9A 8D35             (/home/strick/6809):02154                  bsr   L0BEF
0F9C 2702             (/home/strick/6809):02155                  beq   L0BBE
0F9E 8D4C             (/home/strick/6809):02156                  bsr   L0C0A
0FA0 E3E1             (/home/strick/6809):02157         L0BBE    addd  ,s++
0FA2 3402             (/home/strick/6809):02158         L0BC0    pshs  a
0FA4 962B             (/home/strick/6809):02159                  lda   <u002B
0FA6 8408             (/home/strick/6809):02160                  anda  #Label
0FA8 8A31             (/home/strick/6809):02161                  ora   #Operand+Command+PrintPC
0FAA 972B             (/home/strick/6809):02162                  sta   <u002B
0FAC 3502             (/home/strick/6809):02163                  puls  a
0FAE 0D5A             (/home/strick/6809):02164                  tst   <u005A
0FB0 2703             (/home/strick/6809):02165                  beq   L0BD3
0FB2 DD40             (/home/strick/6809):02166                  std   <u0040
0FB4 39               (/home/strick/6809):02167                  rts
0FB5 DD42             (/home/strick/6809):02168         L0BD3    std   <u0042
0FB7 0C2C             (/home/strick/6809):02169                  inc   <u002C
0FB9 39               (/home/strick/6809):02170                  rts
0FBA 0D5A             (/home/strick/6809):02171         L0BD8    tst   <u005A
0FBC 2703             (/home/strick/6809):02172                  beq   L0BDF
0FBE DC40             (/home/strick/6809):02173                  ldd   <u0040
0FC0 39               (/home/strick/6809):02174                  rts
0FC1 DC42             (/home/strick/6809):02175         L0BDF    ldd   <u0042
0FC3 DD44             (/home/strick/6809):02176                  std   <u0044
0FC5 39               (/home/strick/6809):02177                  rts
0FC6 1705F4           (/home/strick/6809):02178         L0BE4    lbsr  L11C2
0FC9 2405             (/home/strick/6809):02179                  bcc   L0BEE
0FCB 17F326           (/home/strick/6809):02180                  lbsr  L02FA
0FCE 4F               (/home/strick/6809):02181                  clra
0FCF 5F               (/home/strick/6809):02182                  clrb
0FD0 39               (/home/strick/6809):02183         L0BEE    rts
0FD1 3402             (/home/strick/6809):02184         L0BEF    pshs  a
0FD3 962B             (/home/strick/6809):02185                  lda   <u002B
0FD5 8508             (/home/strick/6809):02186                  bita  #Label
0FD7 3582             (/home/strick/6809):02187                  puls  pc,a
0FD9 DE2D             (/home/strick/6809):02188         L0BF7    ldu   <u002D
0FDB E648             (/home/strick/6809):02189                  ldb   $08,u
0FDD 2B0C             (/home/strick/6809):02190                  bmi   L0C09
0FDF C102             (/home/strick/6809):02191                  cmpb  #$02
0FE1 2606             (/home/strick/6809):02192                  bne   L0C07
0FE3 8102             (/home/strick/6809):02193                  cmpa  #$02
0FE5 2702             (/home/strick/6809):02194                  beq   L0C07
0FE7 8A80             (/home/strick/6809):02195                  ora   #$80
0FE9 A748             (/home/strick/6809):02196         L0C07    sta   $08,u
0FEB 39               (/home/strick/6809):02197         L0C09    rts
0FEC 0D3E             (/home/strick/6809):02198         L0C0A    tst   <u003E
0FEE 2F16             (/home/strick/6809):02199                  ble   L0C24
0FF0 10A349           (/home/strick/6809):02200                  cmpd  $09,u
0FF3 2713             (/home/strick/6809):02201                  beq   L0C26
0FF5 3406             (/home/strick/6809):02202                  pshs  b,a
0FF7 A648             (/home/strick/6809):02203                  lda   $08,u
0FF9 2B09             (/home/strick/6809):02204                  bmi   L0C22
0FFB 8102             (/home/strick/6809):02205                  cmpa  #$02
0FFD 2705             (/home/strick/6809):02206                  beq   L0C22
0FFF C60A             (/home/strick/6809):02207                  ldb   #10              'phasing' error
1001 17F2F0           (/home/strick/6809):02208                  lbsr  L02FA
1004 3506             (/home/strick/6809):02209         L0C22    puls  b,a
1006 ED49             (/home/strick/6809):02210         L0C24    std   $09,u
1008 39               (/home/strick/6809):02211         L0C26    rts
                      (/home/strick/6809):02212         ** EQU pseudo op
1009 8603             (/home/strick/6809):02213         L0C27    lda   #$03
100B 2002             (/home/strick/6809):02214                  bra   L0C2D
                      (/home/strick/6809):02215         ** SET pseudo op
100D 8602             (/home/strick/6809):02216         L0C2B    lda   #$02
100F 8DC0             (/home/strick/6809):02217         L0C2D    bsr   L0BEF
1011 2607             (/home/strick/6809):02218                  bne   L0C38
1013 C615             (/home/strick/6809):02219                  ldb   #21              'needs label' error
1015 17F2DC           (/home/strick/6809):02220                  lbsr  L02FA
1018 200E             (/home/strick/6809):02221                  bra   L0C46
101A 8DBD             (/home/strick/6809):02222         L0C38    bsr   L0BF7
101C 8DA8             (/home/strick/6809):02223                  bsr   L0BE4
101E DE2D             (/home/strick/6809):02224                  ldu   <u002D
1020 8DCA             (/home/strick/6809):02225                  bsr   L0C0A
1022 DD44             (/home/strick/6809):02226                  std   <u0044
1024 C639             (/home/strick/6809):02227                  ldb   #Operand+Command+Label+PrintPC
1026 D72B             (/home/strick/6809):02228                  stb   <u002B
1028 39               (/home/strick/6809):02229         L0C46    rts
                      (/home/strick/6809):02230         ** FCC pseudo op
1029 A680             (/home/strick/6809):02231         L0C47    lda   ,x+
102B 3402             (/home/strick/6809):02232                  pshs  a
102D 810D             (/home/strick/6809):02233                  cmpa  #$0D
102F 2715             (/home/strick/6809):02234                  beq   L0C64
1031 812F             (/home/strick/6809):02235                  cmpa  #$2F
1033 2211             (/home/strick/6809):02236                  bhi   L0C64
1035 8D38             (/home/strick/6809):02237                  bsr   L0C8D
1037 A680             (/home/strick/6809):02238         L0C55    lda   ,x+
1039 A1E4             (/home/strick/6809):02239                  cmpa  ,s
103B 270E             (/home/strick/6809):02240                  beq   L0C69
103D 810D             (/home/strick/6809):02241                  cmpa  #$0D
103F 2705             (/home/strick/6809):02242                  beq   L0C64
1041 17008A           (/home/strick/6809):02243                  lbsr  L0CEC
1044 20F1             (/home/strick/6809):02244                  bra   L0C55
1046 C617             (/home/strick/6809):02245         L0C64    ldb   #23              'const def' error
1048 17F2A9           (/home/strick/6809):02246                  lbsr  L02FA
104B 3582             (/home/strick/6809):02247         L0C69    puls  pc,a
                      (/home/strick/6809):02248         ** FCS pseudo op
104D A680             (/home/strick/6809):02249         L0C6B    lda   ,x+
104F 3402             (/home/strick/6809):02250                  pshs  a
1051 810D             (/home/strick/6809):02251                  cmpa  #$0D
1053 27F1             (/home/strick/6809):02252                  beq   L0C64
1055 812F             (/home/strick/6809):02253                  cmpa  #$2F
1057 22ED             (/home/strick/6809):02254                  bhi   L0C64
1059 8D14             (/home/strick/6809):02255                  bsr   L0C8D
105B EC80             (/home/strick/6809):02256         L0C79    ldd   ,x+
105D 810D             (/home/strick/6809):02257                  cmpa  #$0D
105F 27E5             (/home/strick/6809):02258                  beq   L0C64
1061 A1E4             (/home/strick/6809):02259                  cmpa  ,s
1063 27E6             (/home/strick/6809):02260                  beq   L0C69
1065 E1E4             (/home/strick/6809):02261                  cmpb  ,s
1067 2602             (/home/strick/6809):02262                  bne   L0C89
1069 8A80             (/home/strick/6809):02263                  ora   #$80
106B 8D61             (/home/strick/6809):02264         L0C89    bsr   L0CEC
106D 20EC             (/home/strick/6809):02265                  bra   L0C79
106F 3412             (/home/strick/6809):02266         L0C8D    pshs  x,a
1071 301F             (/home/strick/6809):02267                  leax  -$01,x
1073 3001             (/home/strick/6809):02268         L0C91    leax  $01,x
1075 A684             (/home/strick/6809):02269                  lda   ,x
1077 810D             (/home/strick/6809):02270                  cmpa  #$0D
1079 2708             (/home/strick/6809):02271                  beq   L0CA1
107B A1E4             (/home/strick/6809):02272                  cmpa  ,s
107D 26F4             (/home/strick/6809):02273                  bne   L0C91
107F 3001             (/home/strick/6809):02274                  leax  $01,x
1081 A684             (/home/strick/6809):02275                  lda   ,x
1083 6F80             (/home/strick/6809):02276         L0CA1    clr   ,x+
1085 9F33             (/home/strick/6809):02277                  stx   <u0033
1087 810D             (/home/strick/6809):02278                  cmpa  #$0D
1089 2602             (/home/strick/6809):02279                  bne   L0CAB
108B A784             (/home/strick/6809):02280                  sta   ,x
108D 3592             (/home/strick/6809):02281         L0CAB    puls  pc,x,a
                      (/home/strick/6809):02282         ** FCB pseudo op
108F 8D26             (/home/strick/6809):02283         L0CAD    bsr   L0CD5
1091 170659           (/home/strick/6809):02284         L0CAF    lbsr  L12F7
1094 1F98             (/home/strick/6809):02285                  tfr   b,a
1096 8D36             (/home/strick/6809):02286                  bsr   L0CEC
1098 A680             (/home/strick/6809):02287                  lda   ,x+
109A 812C             (/home/strick/6809):02288                  cmpa  #$2C             comma?
109C 27F3             (/home/strick/6809):02289                  beq   L0CAF
109E 301F             (/home/strick/6809):02290                  leax  -$01,x
10A0 39               (/home/strick/6809):02291                  rts
                      (/home/strick/6809):02292         ** FDB pseudo op
10A1 8D14             (/home/strick/6809):02293         L0CBF    bsr   L0CD5
10A3 170641           (/home/strick/6809):02294         L0CC1    lbsr  L12F1
10A6 3404             (/home/strick/6809):02295                  pshs  b
10A8 8D24             (/home/strick/6809):02296                  bsr   L0CEC
10AA 3502             (/home/strick/6809):02297                  puls  a
10AC 8D20             (/home/strick/6809):02298                  bsr   L0CEC
10AE A680             (/home/strick/6809):02299                  lda   ,x+
10B0 812C             (/home/strick/6809):02300                  cmpa  #$2C             comma?
10B2 27EF             (/home/strick/6809):02301                  beq   L0CC1
10B4 301F             (/home/strick/6809):02302                  leax  -$01,x
10B6 39               (/home/strick/6809):02303                  rts
10B7 3410             (/home/strick/6809):02304         L0CD5    pshs  x
10B9 17062B           (/home/strick/6809):02305         L0CD7    lbsr  L12F1
10BC A680             (/home/strick/6809):02306                  lda   ,x+
10BE 812C             (/home/strick/6809):02307                  cmpa  #$2C             comma?
10C0 27F7             (/home/strick/6809):02308                  beq   L0CD7
10C2 6F1F             (/home/strick/6809):02309                  clr   -$01,x
10C4 9F33             (/home/strick/6809):02310                  stx   <u0033
10C6 810D             (/home/strick/6809):02311                  cmpa  #$0D
10C8 2602             (/home/strick/6809):02312                  bne   L0CEA
10CA A784             (/home/strick/6809):02313                  sta   ,x
10CC 3590             (/home/strick/6809):02314         L0CEA    puls  pc,x
10CE D646             (/home/strick/6809):02315         L0CEC    ldb   <u0046
10D0 C104             (/home/strick/6809):02316                  cmpb  #$04
10D2 2502             (/home/strick/6809):02317                  blo   L0CF4
10D4 8D0F             (/home/strick/6809):02318                  bsr   L0D03
10D6 3406             (/home/strick/6809):02319         L0CF4    pshs  b,a
10D8 1FB8             (/home/strick/6809):02320                  tfr   dp,a
10DA C662             (/home/strick/6809):02321                  ldb   #u0062
10DC 1F03             (/home/strick/6809):02322                  tfr   d,u
10DE 3506             (/home/strick/6809):02323                  puls  b,a
10E0 A7C5             (/home/strick/6809):02324                  sta   b,u
10E2 0C46             (/home/strick/6809):02325                  inc   <u0046
10E4 39               (/home/strick/6809):02326                  rts
10E5 3416             (/home/strick/6809):02327         L0D03    pshs  x,b,a
10E7 D62A             (/home/strick/6809):02328                  ldb   <u002A
10E9 260B             (/home/strick/6809):02329                  bne   L0D14
10EB 9E33             (/home/strick/6809):02330                  ldx   <u0033
10ED 17F0D9           (/home/strick/6809):02331                  lbsr  L01C4
10F0 0D5B             (/home/strick/6809):02332                  tst   <u005B
10F2 2715             (/home/strick/6809):02333                  beq   L0D27
10F4 201C             (/home/strick/6809):02334                  bra   L0D30
10F6 0D5B             (/home/strick/6809):02335         L0D14    tst   <u005B
10F8 2615             (/home/strick/6809):02336                  bne   L0D2D
10FA 9656             (/home/strick/6809):02337                  lda   <u0056
10FC 3402             (/home/strick/6809):02338                  pshs  a
10FE 0F56             (/home/strick/6809):02339                  clr   <u0056
1100 0356             (/home/strick/6809):02340                  com   <u0056
1102 17F0D3           (/home/strick/6809):02341                  lbsr  L01D3
1105 3502             (/home/strick/6809):02342                  puls  a
1107 9756             (/home/strick/6809):02343                  sta   <u0056
1109 C604             (/home/strick/6809):02344         L0D27    ldb   #NoObjct
110B D72B             (/home/strick/6809):02345                  stb   <u002B
110D 2007             (/home/strick/6809):02346                  bra   L0D34
110F 17F0C6           (/home/strick/6809):02347         L0D2D    lbsr  L01D3
1112 C605             (/home/strick/6809):02348         L0D30    ldb   #NoObjct+PrintPC
1114 D72B             (/home/strick/6809):02349                  stb   <u002B
1116 DC40             (/home/strick/6809):02350         L0D34    ldd   <u0040
1118 DD44             (/home/strick/6809):02351                  std   <u0044
111A 0F46             (/home/strick/6809):02352                  clr   <u0046
111C 0C2A             (/home/strick/6809):02353                  inc   <u002A
111E 6F61             (/home/strick/6809):02354                  clr   $01,s
1120 3596             (/home/strick/6809):02355                  puls  pc,x,b,a
                      (/home/strick/6809):02356         ** EMOD pseudo op
1122 DC51             (/home/strick/6809):02357         L0D40    ldd   <u0051           load CRC value
1124 43               (/home/strick/6809):02358                  coma                   complement it
1125 53               (/home/strick/6809):02359                  comb
1126 DD62             (/home/strick/6809):02360                  std   <u0062           copy to instruction buffer
1128 D653             (/home/strick/6809):02361                  ldb   <u0051+2         third byte too
112A 53               (/home/strick/6809):02362                  comb
112B 962B             (/home/strick/6809):02363                  lda   <u002B           clear "Operand field" bit
112D 84DF             (/home/strick/6809):02364                  anda  #^Operand
112F 972B             (/home/strick/6809):02365                  sta   <u002B
1131 2008             (/home/strick/6809):02366                  bra   L0D59
                      (/home/strick/6809):02367         ** OS9 pseudo op
1133 CC103F           (/home/strick/6809):02368         L0D51    ldd   #$103F           opcode for SWI2
1136 DD62             (/home/strick/6809):02369                  std   <u0062
1138 1705B2           (/home/strick/6809):02370                  lbsr  L12F7            process byte operand
113B D764             (/home/strick/6809):02371         L0D59    stb   <u0064
113D C603             (/home/strick/6809):02372                  ldb   #$03             three bytes, to go
113F D746             (/home/strick/6809):02373                  stb   <u0046
1141 39               (/home/strick/6809):02374                  rts
                      (/home/strick/6809):02375         ** MOD pseudo op
1142 4F               (/home/strick/6809):02376         L0D60    clra
1143 5F               (/home/strick/6809):02377                  clrb
1144 D750             (/home/strick/6809):02378                  stb   <u0050
1146 DD40             (/home/strick/6809):02379                  std   <u0040
1148 DD44             (/home/strick/6809):02380                  std   <u0044
114A DD42             (/home/strick/6809):02381                  std   <u0042
114C 170607           (/home/strick/6809):02382                  lbsr  L1360            Init CRC value
114F 17FF65           (/home/strick/6809):02383                  lbsr  L0CD5
1152 CC87CD           (/home/strick/6809):02384                  ldd   #$87CD           Module ID bytes
1155 8D1E             (/home/strick/6809):02385                  bsr   L0D93
1157 8D19             (/home/strick/6809):02386                  bsr   L0D90
1159 8D15             (/home/strick/6809):02387                  bsr   L0D8E
115B 8D2E             (/home/strick/6809):02388                  bsr   L0DA9
115D 8D27             (/home/strick/6809):02389                  bsr   L0DA4
115F 8D2A             (/home/strick/6809):02390                  bsr   L0DA9
1161 8D23             (/home/strick/6809):02391                  bsr   L0DA4
1163 9650             (/home/strick/6809):02392                  lda   <u0050
1165 43               (/home/strick/6809):02393                  coma
1166 8D1B             (/home/strick/6809):02394                  bsr   L0DA1
1168 A684             (/home/strick/6809):02395                  lda   ,x
116A 812C             (/home/strick/6809):02396                  cmpa  #$2C             comma?
116C 262C             (/home/strick/6809):02397                  bne   L0DB8
116E 8D00             (/home/strick/6809):02398                  bsr   L0D8E
1170 8D19             (/home/strick/6809):02399         L0D8E    bsr   L0DA9
1172 170572           (/home/strick/6809):02400         L0D90    lbsr  L12F1
1175 3404             (/home/strick/6809):02401         L0D93    pshs  b
1177 1F89             (/home/strick/6809):02402                  tfr   a,b
1179 8D02             (/home/strick/6809):02403                  bsr   L0D9B
117B 3504             (/home/strick/6809):02404                  puls  b
117D 1F98             (/home/strick/6809):02405         L0D9B    tfr   b,a
117F D850             (/home/strick/6809):02406                  eorb  <u0050
1181 D750             (/home/strick/6809):02407                  stb   <u0050
1183 16FF48           (/home/strick/6809):02408         L0DA1    lbra  L0CEC
1186 170564           (/home/strick/6809):02409         L0DA4    lbsr  L12F7
1189 20F2             (/home/strick/6809):02410                  bra   L0D9B
118B A680             (/home/strick/6809):02411         L0DA9    lda   ,x+
118D 812C             (/home/strick/6809):02412                  cmpa  #$2C             comma?
118F 2709             (/home/strick/6809):02413                  beq   L0DB8
1191 301F             (/home/strick/6809):02414                  leax  -$01,x
1193 C617             (/home/strick/6809):02415                  ldb   #23              'const def' error
1195 17F15C           (/home/strick/6809):02416                  lbsr  L02FA
1198 3262             (/home/strick/6809):02417                  leas  $02,s
119A 39               (/home/strick/6809):02418         L0DB8    rts
                      (/home/strick/6809):02419         ** ORG pseudo op
119B 17FE28           (/home/strick/6809):02420         L0DB9    lbsr  L0BE4
119E DD44             (/home/strick/6809):02421                  std   <u0044
11A0 16FDFF           (/home/strick/6809):02422                  lbra  L0BC0
                      (/home/strick/6809):02423         ** END pseudo op
11A3 D62B             (/home/strick/6809):02424         L0DC1    ldb   <u002B
11A5 C408             (/home/strick/6809):02425                  andb  #Label $08
11A7 CA10             (/home/strick/6809):02426                  orb   #Command $10
11A9 D72B             (/home/strick/6809):02427                  stb   <u002B
11AB 17F049           (/home/strick/6809):02428                  lbsr  L01F2
11AE 17076D           (/home/strick/6809):02429                  lbsr  L156C
11B1 2402             (/home/strick/6809):02430                  bcc   L0DD3
11B3 3264             (/home/strick/6809):02431                  leas  $04,s
11B5 39               (/home/strick/6809):02432         L0DD3    rts
                      (/home/strick/6809):02433         ** NAM pseudo op
11B6 C627             (/home/strick/6809):02434         L0DD4    ldb   #39              max name length
11B8 DE0A             (/home/strick/6809):02435                  ldu   <u000A           name buffer
11BA 1703A9           (/home/strick/6809):02436         L0DD8    lbsr  L1164
11BD 963E             (/home/strick/6809):02437                  lda   <u003E
11BF 2604             (/home/strick/6809):02438                  bne   L0DE3
11C1 A6C4             (/home/strick/6809):02439                  lda   ,u
11C3 2619             (/home/strick/6809):02440                  bne   L0DFC
11C5 A680             (/home/strick/6809):02441         L0DE3    lda   ,x+              copy text to buffer
11C7 810D             (/home/strick/6809):02442                  cmpa  #$0D
11C9 270B             (/home/strick/6809):02443                  beq   L0DF4            until end of line
11CB A7C0             (/home/strick/6809):02444                  sta   ,u+
11CD 5A               (/home/strick/6809):02445                  decb
11CE 26F5             (/home/strick/6809):02446                  bne   L0DE3            or max length
11D0 860D             (/home/strick/6809):02447                  lda   #$0D
11D2 A180             (/home/strick/6809):02448         L0DF0    cmpa  ,x+              eat rest of line
11D4 26FC             (/home/strick/6809):02449                  bne   L0DF0
11D6 6FC4             (/home/strick/6809):02450         L0DF4    clr   ,u               null terminate buffer
11D8 301F             (/home/strick/6809):02451                  leax  -$01,x
11DA C630             (/home/strick/6809):02452                  ldb   #Operand+Command
11DC D72B             (/home/strick/6809):02453                  stb   <u002B
11DE 39               (/home/strick/6809):02454         L0DFC    rts
                      (/home/strick/6809):02455         ** TTL pseudo op
11DF C64F             (/home/strick/6809):02456         L0DFD    ldb   #79              max title length
11E1 DE08             (/home/strick/6809):02457                  ldu   <u0008           title buffer
11E3 20D5             (/home/strick/6809):02458                  bra   L0DD8
                      (/home/strick/6809):02459         ** PAG pseudo op
11E5 170632           (/home/strick/6809):02460         L0E03    lbsr  L1408
11E8 3262             (/home/strick/6809):02461         L0E06    leas  $02,s
11EA 39               (/home/strick/6809):02462                  rts
                      (/home/strick/6809):02463         ** SPC pseudo op
11EB 8D16             (/home/strick/6809):02464         L0E09    bsr   L0E21
11ED 2405             (/home/strick/6809):02465                  bcc   L0E12
11EF C630             (/home/strick/6809):02466                  ldb   #Operand+Command
11F1 D72B             (/home/strick/6809):02467                  stb   <u002B
11F3 39               (/home/strick/6809):02468                  rts
11F4 E7E2             (/home/strick/6809):02469         L0E12    stb   ,-s
11F6 2707             (/home/strick/6809):02470                  beq   L0E1D
11F8 1706AE           (/home/strick/6809):02471         L0E16    lbsr  L149A
11FB 6AE4             (/home/strick/6809):02472                  dec   ,s
11FD 26F9             (/home/strick/6809):02473                  bne   L0E16
11FF 3261             (/home/strick/6809):02474         L0E1D    leas  $01,s
1201 20E5             (/home/strick/6809):02475                  bra   L0E06
1203 1702C1           (/home/strick/6809):02476         L0E21    lbsr  L10B4
1206 2405             (/home/strick/6809):02477                  bcc   L0E2B
1208 17F0E9           (/home/strick/6809):02478                  lbsr  L02FA
120B 1A01             (/home/strick/6809):02479                  orcc  #$01
120D 39               (/home/strick/6809):02480         L0E2B    rts
                      (/home/strick/6809):02481         ** OPT arg processing
120E C630             (/home/strick/6809):02482         L0E2C    ldb   #Operand+Command
1210 D72B             (/home/strick/6809):02483                  stb   <u002B
1212 170351           (/home/strick/6809):02484                  lbsr  L1164
1215 6FE2             (/home/strick/6809):02485         L0E33    clr   ,-s            Flag "Set"
1217 A680             (/home/strick/6809):02486                  lda   ,x+            Get char
1219 812D             (/home/strick/6809):02487                  cmpa  #'-            Dash?
121B 2604             (/home/strick/6809):02488                  bne   L0E3F          No, leave flag set
121D 63E4             (/home/strick/6809):02489                  com   ,s             Yes, flag "Clear"
121F A680             (/home/strick/6809):02490                  lda   ,x+            Get next char
1221 338C76           (/home/strick/6809):02491         L0E3F    leau  <L0EA3,pc      Point to table
1224 C608             (/home/strick/6809):02492                  ldb   #08            # of entries
1226 8161             (/home/strick/6809):02493                  cmpa  #'a            Is char lowercase?
1228 2502             (/home/strick/6809):02494                  blo   L0E4A          No, no conversion needed
122A 8020             (/home/strick/6809):02495                  suba  #'a-'A         Bump down to uppercase
122C A1C1             (/home/strick/6809):02496         L0E4A    cmpa  ,u++           Same as first 1/2 of table entry?
122E 2729             (/home/strick/6809):02497                  beq   L0E68          Yes, skip ahead
1230 5A               (/home/strick/6809):02498                  decb                 No, decrement # entries left
1231 26F9             (/home/strick/6809):02499                  bne   L0E4A          Keep checking all 8
1233 3504             (/home/strick/6809):02500                  puls  b
1235 8144             (/home/strick/6809):02501                  cmpa  #'D
1237 2746             (/home/strick/6809):02502                  beq   L0E88
1239 8157             (/home/strick/6809):02503                  cmpa  #'W
123B 2734             (/home/strick/6809):02504                  beq   L0E80
123D 814C             (/home/strick/6809):02505                  cmpa  #'L
123F 2746             (/home/strick/6809):02506                  beq   L0E90
1241 814E             (/home/strick/6809):02507                  cmpa  #'N
1243 274D             (/home/strick/6809):02508                  beq   L0E9B
                      (/home/strick/6809):02509                 IFNE  DOCASE
                      (/home/strick/6809):02510         * NEW! Symbol case control flag "U"
1245 8155             (/home/strick/6809):02511                  cmpa  #'U
1247 260B             (/home/strick/6809):02512                  bne   L0E63
1249 865F             (/home/strick/6809):02513                  lda   #$5F             uppercase-only mask
124B 5D               (/home/strick/6809):02514                  tstb   
124C 2702             (/home/strick/6809):02515                  beq   u.opt            "U" flag, force uppercase
124E 867F             (/home/strick/6809):02516                  lda   #$7F             "-U" flag, upper+lower OK
1250 970D             (/home/strick/6809):02517         u.opt    sta   <u000D           store new symbol case mask
1252 2010             (/home/strick/6809):02518                  bra   L0E73
                      (/home/strick/6809):02519                 ENDC  DOCASE
                      (/home/strick/6809):02520         * unknown command line flag
1254 C616             (/home/strick/6809):02521         L0E63    ldb   #22              'opt list' error
1256 16F09B           (/home/strick/6809):02522                  lbra  L02FA
1259 E65F             (/home/strick/6809):02523         L0E68    ldb   -1,u
125B 1FB8             (/home/strick/6809):02524                  tfr   dp,a
125D 1F03             (/home/strick/6809):02525                  tfr   d,u
125F 3502             (/home/strick/6809):02526                  puls  a
1261 43               (/home/strick/6809):02527                  coma
1262 A7C4             (/home/strick/6809):02528                  sta   ,u
1264 A680             (/home/strick/6809):02529         L0E73    lda   ,x+
1266 812C             (/home/strick/6809):02530                  cmpa  #',              Comma?
1268 27AB             (/home/strick/6809):02531                  beq   L0E33
126A 8120             (/home/strick/6809):02532                  cmpa  #C$SPAC          Space?
126C 27A0             (/home/strick/6809):02533                  beq   L0E2C
126E 301F             (/home/strick/6809):02534                  leax  -$01,x
1270 39               (/home/strick/6809):02535                  rts
                      (/home/strick/6809):02536         * 'W' (line width) option
1271 8D90             (/home/strick/6809):02537         L0E80    bsr   L0E21            process linewidth arg
1273 25DF             (/home/strick/6809):02538                  bcs   L0E63            'opt list' error if bad arg
1275 C184             (/home/strick/6809):02539                  cmpb  #132             bugfix: to avoid a
1277 2302             (/home/strick/6809):02540                  bls   L0E84            :printbuf overrun, set
1279 C684             (/home/strick/6809):02541                  ldb   #132             :max line width to 132
127B D737             (/home/strick/6809):02542         L0E84    stb   <u0037           set new line width (chars/line)
127D 20E5             (/home/strick/6809):02543                  bra   L0E73
                      (/home/strick/6809):02544         * 'D' (page depth) option
127F 8D82             (/home/strick/6809):02545         L0E88    bsr   L0E21            process pagedepth arg
1281 25D1             (/home/strick/6809):02546                  bcs   L0E63            'opt list' error if bad arg
1283 D736             (/home/strick/6809):02547                  stb   <u0036           set new page depth (lines/page)
1285 20DD             (/home/strick/6809):02548                  bra   L0E73
                      (/home/strick/6809):02549         * 'L' (listing) option
1287 5D               (/home/strick/6809):02550         L0E90    tstb                   '-L' ?
1288 2704             (/home/strick/6809):02551                  beq   L0E97            no, just 'L'
128A 0A56             (/home/strick/6809):02552                  dec   <u0056           yes, unset(?) List flag
128C 20D6             (/home/strick/6809):02553                  bra   L0E73
128E 0C56             (/home/strick/6809):02554         L0E97    inc   <u0056           set List flag
1290 20D2             (/home/strick/6809):02555                  bra   L0E73
                      (/home/strick/6809):02556         * 'N' (narrow) option
1292 0C60             (/home/strick/6809):02557         L0E9B    inc   <u0060           set Narrow flag
1294 861F             (/home/strick/6809):02558                  lda   #31
1296 9737             (/home/strick/6809):02559                  sta   <u0037           set page width to 31
1298 20F4             (/home/strick/6809):02560                  bra   L0E97            also set List flag
                      (/home/strick/6809):02561         
                      (/home/strick/6809):02562         * Option Flag Table: byte1=flag char, byte2=DP storage loc
129A 435F             (/home/strick/6809):02563         L0EA3    fcb   'C,u005F
129C 4659             (/home/strick/6809):02564                  fcb   'F,u0059
129E 4D5A             (/home/strick/6809):02565                  fcb   'M,u005A
12A0 475B             (/home/strick/6809):02566                  fcb   'G,u005B
12A2 455C             (/home/strick/6809):02567                  fcb   'E,u005C
12A4 535E             (/home/strick/6809):02568                  fcb   'S,u005E
12A6 495D             (/home/strick/6809):02569                  fcb   'I,u005D
12A8 4F58             (/home/strick/6809):02570                  fcb   'O,u0058
                      (/home/strick/6809):02571         
                      (/home/strick/6809):02572         ** SETDP pseudo op
12AA 170440           (/home/strick/6809):02573         L0EB3    lbsr  L12F7
12AD 2502             (/home/strick/6809):02574                  bcs   L0EBA
12AF D73F             (/home/strick/6809):02575                  stb   <u003F
12B1 4F               (/home/strick/6809):02576         L0EBA    clra
12B2 DD44             (/home/strick/6809):02577                  std   <u0044
12B4 C631             (/home/strick/6809):02578                  ldb   #Operand+Command+PrintPC
12B6 D72B             (/home/strick/6809):02579                  stb   <u002B
12B8 0C2C             (/home/strick/6809):02580                  inc   <u002C
12BA 39               (/home/strick/6809):02581                  rts
                      (/home/strick/6809):02582         ** USE pseudo op
12BB 1702A8           (/home/strick/6809):02583         L0EC4    lbsr  L1164
12BE 170755           (/home/strick/6809):02584                  lbsr  L15FB
12C1 2002             (/home/strick/6809):02585                  bra   L0ECE
12C3 301F             (/home/strick/6809):02586         L0ECC    leax  -$01,x
12C5 E61F             (/home/strick/6809):02587         L0ECE    ldb   -$01,x
12C7 C120             (/home/strick/6809):02588                  cmpb  #$20
12C9 27F8             (/home/strick/6809):02589                  beq   L0ECC
12CB DE1F             (/home/strick/6809):02590                  ldu   <u001F
12CD D618             (/home/strick/6809):02591                  ldb   <u0018
12CF 3604             (/home/strick/6809):02592                  pshu  b
12D1 DF1F             (/home/strick/6809):02593                  stu   <u001F
12D3 9718             (/home/strick/6809):02594                  sta   <u0018
12D5 C630             (/home/strick/6809):02595                  ldb   #Operand+Command
12D7 D72B             (/home/strick/6809):02596                  stb   <u002B
12D9 39               (/home/strick/6809):02597                  rts
12DA 8D2A             (/home/strick/6809):02598         L0EE3    bsr   L0F0F            IFEQ
12DC 2625             (/home/strick/6809):02599                  bne   L0F0C
12DE 39               (/home/strick/6809):02600                  rts
12DF 8D25             (/home/strick/6809):02601         L0EE8    bsr   L0F0F            IFNE
12E1 2720             (/home/strick/6809):02602                  beq   L0F0C
12E3 39               (/home/strick/6809):02603                  rts
12E4 8D20             (/home/strick/6809):02604         L0EED    bsr   L0F0F            IFLT
12E6 2C1B             (/home/strick/6809):02605                  bge   L0F0C
12E8 39               (/home/strick/6809):02606                  rts
12E9 8D1B             (/home/strick/6809):02607         L0EF2    bsr   L0F0F            IFLE
12EB 2E16             (/home/strick/6809):02608                  bgt   L0F0C
12ED 39               (/home/strick/6809):02609                  rts
12EE 8D16             (/home/strick/6809):02610         L0EF7    bsr   L0F0F            IFGE
12F0 2D11             (/home/strick/6809):02611                  blt   L0F0C
12F2 39               (/home/strick/6809):02612                  rts
12F3 8D11             (/home/strick/6809):02613         L0EFC    bsr   L0F0F            IFGT
12F5 2F0C             (/home/strick/6809):02614                  ble   L0F0C
12F7 39               (/home/strick/6809):02615                  rts
12F8 0C55             (/home/strick/6809):02616         L0F01    inc   <u0055           IFP1
12FA C610             (/home/strick/6809):02617                  ldb   #Command
12FC 8D1A             (/home/strick/6809):02618                  bsr   L0F21            update listing flags
12FE 963E             (/home/strick/6809):02619                  lda   <u003E
1300 2601             (/home/strick/6809):02620                  bne   L0F0C
1302 39               (/home/strick/6809):02621                  rts
1303 0C54             (/home/strick/6809):02622         L0F0C    inc   <u0054
1305 39               (/home/strick/6809):02623                  rts
1306 0C55             (/home/strick/6809):02624         L0F0F    inc   <u0055
1308 C630             (/home/strick/6809):02625                  ldb   #Operand+Command
130A 8D0C             (/home/strick/6809):02626                  bsr   L0F21            update listing flags
130C 1703D8           (/home/strick/6809):02627                  lbsr  L12F1
130F 2402             (/home/strick/6809):02628                  bcc   L0F1C
1311 3586             (/home/strick/6809):02629                  puls  pc,d
1313 10830000         (/home/strick/6809):02630         L0F1C    cmpd  #$0000
1317 39               (/home/strick/6809):02631                  rts
                      (/home/strick/6809):02632         
1318 0D5F             (/home/strick/6809):02633         L0F21    tst   <u005F           'C'onditional flag on?
131A 2601             (/home/strick/6809):02634                  bne   L0F26            Yes, update flags
131C 5F               (/home/strick/6809):02635                  clrb                   DoNothng (all flags off)
131D D72B             (/home/strick/6809):02636         L0F26    stb   <u002B           Update list control flags
131F 39               (/home/strick/6809):02637                  rts
                      (/home/strick/6809):02638         
                      (/home/strick/6809):02639                 IFNE  NEWDEF
1320 8D08             (/home/strick/6809):02640         Lidef    bsr   chkdef           IFDEF (ifdef label)
1322 23DF             (/home/strick/6809):02641                  bls   L0F0C            label NOT defined, set FALSE
1324 39               (/home/strick/6809):02642                  rts
1325 8D03             (/home/strick/6809):02643         Lndef    bsr   chkdef           IFNDF (ifndef label)
1327 22DA             (/home/strick/6809):02644                  bhi   L0F0C            label IS defined, set FALSE
1329 39               (/home/strick/6809):02645                  rts
132A 0C55             (/home/strick/6809):02646         chkdef   inc   <u0055           update IF count
132C 17F01F           (/home/strick/6809):02647                  lbsr  L0368            parse label name
132F 250B             (/home/strick/6809):02648                  bcs   bad.sym          not a valid label
1331 C630             (/home/strick/6809):02649                  ldb   #Operand+Command
1333 8DE3             (/home/strick/6809):02650                  bsr   L0F21            update listing flags
1335 3470             (/home/strick/6809):02651                  pshs  u,y,x
1337 17009D           (/home/strick/6809):02652                  lbsr  L0FC3            search symbol table
                      (/home/strick/6809):02653         * returns carry set if not found, zero set if undefined
133A 35F0             (/home/strick/6809):02654                  puls  x,y,u,pc         return (C OR Z) set if not found or undefined
133C C601             (/home/strick/6809):02655         bad.sym  ldb   #01              'bad label' error
133E 1603B9           (/home/strick/6809):02656                  lbra  L1304            report error and return carry set
                      (/home/strick/6809):02657                 ENDC  NEWDEF
                      (/home/strick/6809):02658         ** ENDC/ELSE pseudo ops
1341 C610             (/home/strick/6809):02659         L0F29    ldb   #Command
1343 8DD3             (/home/strick/6809):02660                  bsr   L0F21
1345 9655             (/home/strick/6809):02661                  lda   <u0055
1347 2711             (/home/strick/6809):02662                  beq   L0F42
1349 9662             (/home/strick/6809):02663                  lda   <u0062   ELSE op?
134B 2606             (/home/strick/6809):02664                  bne   L0F3B    yes, skip ahead
134D 0A55             (/home/strick/6809):02665                  dec   <u0055   ENDC, decrement IF count
134F 9654             (/home/strick/6809):02666                  lda   <u0054
1351 2706             (/home/strick/6809):02667                  beq   L0F41
1353 9654             (/home/strick/6809):02668         L0F3B    lda   <u0054
1355 27AC             (/home/strick/6809):02669                  beq   L0F0C
1357 0A54             (/home/strick/6809):02670                  dec   <u0054
1359 39               (/home/strick/6809):02671         L0F41    rts
135A C61A             (/home/strick/6809):02672         L0F42    ldb   #26              'cond nesting' error
135C 17EF95           (/home/strick/6809):02673                  lbsr  L02FA
135F 0F54             (/home/strick/6809):02674                  clr   <u0054
1361 39               (/home/strick/6809):02675                  rts
                      (/home/strick/6809):02676         * add label to symbol table
1362 3470             (/home/strick/6809):02677         L0F4A    pshs  u,y,x
1364 8D71             (/home/strick/6809):02678                  bsr   L0FC3
1366 9F2D             (/home/strick/6809):02679                  stx   <u002D
1368 D63E             (/home/strick/6809):02680                  ldb   <u003E
136A 2E29             (/home/strick/6809):02681                  bgt   L0F7D
136C 240D             (/home/strick/6809):02682                  bcc   L0F63
136E 8601             (/home/strick/6809):02683                  lda   #$01
1370 DE40             (/home/strick/6809):02684                  ldu   <u0040
1372 1700AA           (/home/strick/6809):02685                  lbsr  L100B
1375 9F2D             (/home/strick/6809):02686                  stx   <u002D
1377 243D             (/home/strick/6809):02687                  bcc   L0F9E
1379 2037             (/home/strick/6809):02688                  bra   L0F9A
137B 8100             (/home/strick/6809):02689         L0F63    cmpa  #$00
137D 260A             (/home/strick/6809):02690                  bne   L0F71
137F 8601             (/home/strick/6809):02691                  lda   #$01
1381 DE40             (/home/strick/6809):02692                  ldu   <u0040
1383 A708             (/home/strick/6809):02693                  sta   $08,x
1385 EF09             (/home/strick/6809):02694                  stu   $09,x
1387 202D             (/home/strick/6809):02695                  bra   L0F9E
1389 8102             (/home/strick/6809):02696         L0F71    cmpa  #$02             "set" symbol?
138B 2729             (/home/strick/6809):02697                  beq   L0F9E
138D 8A80             (/home/strick/6809):02698                  ora   #$80
138F A708             (/home/strick/6809):02699                  sta   $08,x
1391 C608             (/home/strick/6809):02700         L0F79    ldb   #08              "redefined name" error
1393 201D             (/home/strick/6809):02701                  bra   L0F9A
1395 2404             (/home/strick/6809):02702         L0F7D    bcc   L0F83
1397 C609             (/home/strick/6809):02703         L0F7F    ldb   #09              "undefined name" error
1399 2017             (/home/strick/6809):02704                  bra   L0F9A
139B 8100             (/home/strick/6809):02705         L0F83    cmpa  #$00
139D 27F8             (/home/strick/6809):02706                  beq   L0F7F
139F 8580             (/home/strick/6809):02707                  bita  #$80
13A1 26EE             (/home/strick/6809):02708                  bne   L0F79
13A3 8101             (/home/strick/6809):02709                  cmpa  #$01
13A5 260F             (/home/strick/6809):02710                  bne   L0F9E
13A7 DC40             (/home/strick/6809):02711                  ldd   <u0040
13A9 10A309           (/home/strick/6809):02712                  cmpd  $09,x
13AC 2708             (/home/strick/6809):02713                  beq   L0F9E
13AE ED09             (/home/strick/6809):02714                  std   $09,x
13B0 C60A             (/home/strick/6809):02715                  ldb   #10              "phasing" error
13B2 1A01             (/home/strick/6809):02716         L0F9A    orcc  #$01
13B4 35F0             (/home/strick/6809):02717                  puls  pc,u,y,x
13B6 1CFE             (/home/strick/6809):02718         L0F9E    andcc #$FE
13B8 35F0             (/home/strick/6809):02719                  puls  pc,u,y,x
13BA 3470             (/home/strick/6809):02720         L0FA2    pshs  u,y,x
13BC 8D19             (/home/strick/6809):02721                  bsr   L0FC3            search symbol table for label
13BE D63E             (/home/strick/6809):02722                  ldb   <u003E           pass 1?
13C0 260D             (/home/strick/6809):02723                  bne   L0FB7            no, check for undefined symbol
13C2 240F             (/home/strick/6809):02724                  bcc   L0FBB            symbol found, return value
13C4 8600             (/home/strick/6809):02725                  lda   #$00             not found, set type to "undefined"
13C6 CE0000           (/home/strick/6809):02726                  ldu   #$0000           and default value to 0
13C9 8D54             (/home/strick/6809):02727                  bsr   L100B            add to symbol table
13CB 25E5             (/home/strick/6809):02728                  bcs   L0F9A            no room, report symbol table full error
13CD 20E7             (/home/strick/6809):02729                  bra   L0F9E
13CF A608             (/home/strick/6809):02730         L0FB7    lda   $08,x            check symbol type
13D1 27C4             (/home/strick/6809):02731                  beq   L0F7F            type=0, report undefined sym
13D3 EC09             (/home/strick/6809):02732         L0FBB    ldd   $09,x            get symbol's value
13D5 20DF             (/home/strick/6809):02733                  bra   L0F9E            and return
                      (/home/strick/6809):02734         
                      (/home/strick/6809):02735         * scan symbol table for a match. set carry if no match
13D7 8D35             (/home/strick/6809):02736         L0FC3    bsr   L0FFA            point to 1st letter's list vector
13D9 AE84             (/home/strick/6809):02737                  ldx   ,x               do any symbols start with this letter?
13DB 2604             (/home/strick/6809):02738                  bne   L0FCD            yes, search the list for a match
13DD 3184             (/home/strick/6809):02739                  leay  ,x               no, clear Y reg (2 bytes, 4 cyc)
13DF 202A             (/home/strick/6809):02740                  bra   L0FF7            and report symbol not in list
13E1 3410             (/home/strick/6809):02741         L0FCD    pshs  x
13E3 109E16           (/home/strick/6809):02742                  ldy   <u0016           point to "new" symbol name buffer
13E6 C608             (/home/strick/6809):02743                  ldb   #$08             max symbol length
13E8 A6A0             (/home/strick/6809):02744         L0FD4    lda   ,y+              fetch char from "new" symbol
13EA 270D             (/home/strick/6809):02745                  beq   L0FE5            end found if null
13EC A180             (/home/strick/6809):02746                  cmpa  ,x+              compare with list symbol char
13EE 260D             (/home/strick/6809):02747                  bne   L0FE9            not same, no match
13F0 5A               (/home/strick/6809):02748                  decb                   done all 8 yet?
13F1 26F5             (/home/strick/6809):02749                  bne   L0FD4
13F3 3510             (/home/strick/6809):02750         L0FDF    puls  x                yes, found matching symbol name
13F5 5F               (/home/strick/6809):02751                  clrb                   clear carry (symbol is in list)
13F6 A608             (/home/strick/6809):02752                  lda   $08,x            and return symbol type in A
13F8 39               (/home/strick/6809):02753                  rts
13F9 A180             (/home/strick/6809):02754         L0FE5    cmpa  ,x+              is list symbol same length?
13FB 27F6             (/home/strick/6809):02755                  beq   L0FDF            yes, a match!
13FD 3520             (/home/strick/6809):02756         L0FE9    puls  y                symbol names didn't match
13FF 2206             (/home/strick/6809):02757                  bhi   L0FF3            "greater" alphabetically?
1401 AE2B             (/home/strick/6809):02758                  ldx   11,y             no, try "lesser" symbol
1403 26DC             (/home/strick/6809):02759                  bne   L0FCD
1405 2004             (/home/strick/6809):02760                  bra   L0FF7            none lesser, not in list
1407 AE2D             (/home/strick/6809):02761         L0FF3    ldx   13,y             yes, try "greater" symbol
1409 26D6             (/home/strick/6809):02762                  bne   L0FCD
140B 1A01             (/home/strick/6809):02763         L0FF7    orcc  #$01             symbol not in list (carry set)
140D 39               (/home/strick/6809):02764                  rts
                      (/home/strick/6809):02765         * use 1st char of symbol as index into array of linked list vectors
                      (/home/strick/6809):02766         * returns X=address of list vector for this symbol
140E 9E16             (/home/strick/6809):02767         L0FFA    ldx   <u0016
1410 E684             (/home/strick/6809):02768                  ldb   ,x
1412 9E10             (/home/strick/6809):02769                  ldx   <u0010           address of linked list vector table
1414 C041             (/home/strick/6809):02770                  subb  #'A              map A-Z to 0-25
                      (/home/strick/6809):02771         * support code for lowercase symbols
1416 C120             (/home/strick/6809):02772                  cmpb  #'a-'A           lowercase symbol?
1418 2502             (/home/strick/6809):02773                  blo   L1008
141A C006             (/home/strick/6809):02774                  subb  #'a-'Z-1         map a-z to 26-51
141C 58               (/home/strick/6809):02775         L1008    lslb                   convert index into table offset
141D 3A               (/home/strick/6809):02776                  abx                    point x to list vector for 1st letter of symbol
141E 39               (/home/strick/6809):02777                  rts
                      (/home/strick/6809):02778         
                      (/home/strick/6809):02779         * add new symbol to table if there's room
141F 9E1D             (/home/strick/6809):02780         L100B    ldx   <u001D           get addr of next empty slot
1421 3412             (/home/strick/6809):02781                  pshs  x,a
1423 300F             (/home/strick/6809):02782                  leax  $0F,x            is there room for one more?
1425 9C12             (/home/strick/6809):02783                  cmpx  <u0012
1427 250E             (/home/strick/6809):02784                  blo   L1023            yes!
1429 C60B             (/home/strick/6809):02785                  ldb   #11              "symbol table full" error
142B 0F56             (/home/strick/6809):02786         L1017    clr   <u0056
142D 8601             (/home/strick/6809):02787                  lda   #$01
142F 973E             (/home/strick/6809):02788                  sta   <u003E
1431 17EEC0           (/home/strick/6809):02789                  lbsr  L02FA
1434 1605CD           (/home/strick/6809):02790                  lbra  L15E9            Close I/O paths and exit.
1437 9F1D             (/home/strick/6809):02791         L1023    stx   <u001D
1439 10AFE3           (/home/strick/6809):02792                  sty   ,--s
143C 2608             (/home/strick/6809):02793                  bne   L1032
                      (/home/strick/6809):02794         * start new linked list, add first symbol
143E 3262             (/home/strick/6809):02795                  leas  $02,s
1440 8DCC             (/home/strick/6809):02796                  bsr   L0FFA
1442 3115             (/home/strick/6809):02797                  leay  -$0B,x
1444 200E             (/home/strick/6809):02798                  bra   L1040
                      (/home/strick/6809):02799         * append new symbol to existing linked list
1446 9E16             (/home/strick/6809):02800         L1032    ldx   <u0016
1448 A680             (/home/strick/6809):02801         L1034    lda   ,x+
144A A1A0             (/home/strick/6809):02802                  cmpa  ,y+
144C 27FA             (/home/strick/6809):02803                  beq   L1034
144E 3520             (/home/strick/6809):02804                  puls  y
1450 2502             (/home/strick/6809):02805                  bcs   L1040
1452 3122             (/home/strick/6809):02806                  leay  $02,y
1454 AE61             (/home/strick/6809):02807         L1040    ldx   $01,s
1456 AF2B             (/home/strick/6809):02808                  stx   $0B,y
1458 109E16           (/home/strick/6809):02809                  ldy   <u0016
145B A6A0             (/home/strick/6809):02810                  lda   ,y+
145D A780             (/home/strick/6809):02811         L1049    sta   ,x+
145F A6A0             (/home/strick/6809):02812                  lda   ,y+
1461 26FA             (/home/strick/6809):02813                  bne   L1049
1463 3512             (/home/strick/6809):02814                  puls  x,a
1465 A708             (/home/strick/6809):02815                  sta   $08,x
1467 EF09             (/home/strick/6809):02816                  stu   $09,x
1469 5F               (/home/strick/6809):02817                  clrb
146A 39               (/home/strick/6809):02818                  rts
                      (/home/strick/6809):02819         * OUT4HS
146B 8D0C             (/home/strick/6809):02820         L1057    bsr   L1065
146D 2002             (/home/strick/6809):02821                  bra   L105D
                      (/home/strick/6809):02822         * OUT2HS - not used
146F 8D0E             (/home/strick/6809):02823                  bsr   L106B
                      (/home/strick/6809):02824         * write a space to X buffer
1471 3402             (/home/strick/6809):02825         L105D    pshs  a
1473 8620             (/home/strick/6809):02826                  lda   #$20
1475 A780             (/home/strick/6809):02827                  sta   ,x+
1477 3582             (/home/strick/6809):02828                  puls  pc,a
                      (/home/strick/6809):02829         * write D reg to X buffer as 4 hex digits
1479 1E89             (/home/strick/6809):02830         L1065    exg   a,b
147B 8D02             (/home/strick/6809):02831                  bsr   L106B
147D 1F89             (/home/strick/6809):02832                  tfr   a,b
                      (/home/strick/6809):02833         * write B reg to X buffer as 2 hex digits
147F 3404             (/home/strick/6809):02834         L106B    pshs  b
1481 C4F0             (/home/strick/6809):02835                  andb  #$F0
1483 54               (/home/strick/6809):02836                  lsrb
1484 54               (/home/strick/6809):02837                  lsrb
1485 54               (/home/strick/6809):02838                  lsrb
1486 54               (/home/strick/6809):02839                  lsrb
1487 8D04             (/home/strick/6809):02840                  bsr   L1079
1489 3504             (/home/strick/6809):02841                  puls  b
148B C40F             (/home/strick/6809):02842                  andb  #$0F
148D C109             (/home/strick/6809):02843         L1079    cmpb  #$09
148F 2302             (/home/strick/6809):02844                  bls   L107F
1491 CB07             (/home/strick/6809):02845                  addb  #$07
1493 CB30             (/home/strick/6809):02846         L107F    addb  #'0
1495 E780             (/home/strick/6809):02847                  stb   ,x+
1497 39               (/home/strick/6809):02848                  rts
                      (/home/strick/6809):02849         * Take number in D and convert to 5 digit ASCII string (stored at X)
1498 3464             (/home/strick/6809):02850         L1084    pshs  u,y,b
149A 338C20           (/home/strick/6809):02851                  leau  <L10AA,pc      Point to powers of 10 table
149D 108E0005         (/home/strick/6809):02852                  ldy   #$0005         5 entries (1-10000)
14A1 6FE4             (/home/strick/6809):02853         L108E    clr   ,s             Clear flag
14A3 A3C4             (/home/strick/6809):02854         L1090    subd  ,u             Repeated subtract
14A5 2504             (/home/strick/6809):02855                  blo   L1098
14A7 6CE4             (/home/strick/6809):02856                  inc   ,s             Set flag to 1
14A9 20F8             (/home/strick/6809):02857                  bra   L1090
14AB E3C1             (/home/strick/6809):02858         L1098    addd  ,u++
14AD 3404             (/home/strick/6809):02859                  pshs  b
14AF E661             (/home/strick/6809):02860                  ldb   $01,s
14B1 CB30             (/home/strick/6809):02861                  addb  #$30           Make into ASCII #
14B3 E780             (/home/strick/6809):02862                  stb   ,x+
14B5 3504             (/home/strick/6809):02863                  puls  b
14B7 313F             (/home/strick/6809):02864                  leay  -$01,y
14B9 26E6             (/home/strick/6809):02865                  bne   L108E
14BB 35E4             (/home/strick/6809):02866                  puls  pc,u,y,b
                      (/home/strick/6809):02867         * Subtraction table for ASCII conversion
14BD 2710             (/home/strick/6809):02868         L10AA    fdb   10000
14BF 03E8             (/home/strick/6809):02869                  fdb   1000
14C1 0064             (/home/strick/6809):02870                  fdb   100
14C3 000A             (/home/strick/6809):02871                  fdb   10
14C5 0001             (/home/strick/6809):02872                  fdb   1
                      (/home/strick/6809):02873         
                      (/home/strick/6809):02874         * numeric string evaluator
14C7 327C             (/home/strick/6809):02875         L10B4    leas  -$04,s           reserve a workspace on stack
                      (/home/strick/6809):02876         **         bsr   L1134          and clear it - now inlined
14C9 4F               (/home/strick/6809):02877                  clra
14CA 5F               (/home/strick/6809):02878                  clrb
14CB EDE4             (/home/strick/6809):02879                  std   ,s
14CD ED62             (/home/strick/6809):02880                  std   2,s
14CF 170094           (/home/strick/6809):02881                  lbsr  L1164
14D2 3001             (/home/strick/6809):02882                  leax  $01,x
14D4 8125             (/home/strick/6809):02883                  cmpa  #'%              binary?
14D6 2756             (/home/strick/6809):02884                  beq   L1121
14D8 8124             (/home/strick/6809):02885                  cmpa  #'$              hex?
14DA 262E             (/home/strick/6809):02886                  bne   L10F7            no flag, assume decimal
                      (/home/strick/6809):02887         * hex string conversion
14DC 8D63             (/home/strick/6809):02888         L10C9    bsr   L113B
14DE 2410             (/home/strick/6809):02889                  bcc   L10DD
14E0 C161             (/home/strick/6809):02890                  cmpb  #'a              lowercase?
14E2 2502             (/home/strick/6809):02891                  blo   L10D3
14E4 C020             (/home/strick/6809):02892                  subb  #'a-'A           yes, make uppercase
14E6 C141             (/home/strick/6809):02893         L10D3    cmpb  #'A              valid ASCII hex?
14E8 2569             (/home/strick/6809):02894                  blo   L114D
14EA C146             (/home/strick/6809):02895                  cmpb  #'F
14EC 2265             (/home/strick/6809):02896                  bhi   L114D
14EE C037             (/home/strick/6809):02897                  subb  #'A-10           yes, convert to hex digit
14F0 E7E4             (/home/strick/6809):02898         L10DD    stb   ,s
14F2 EC62             (/home/strick/6809):02899                  ldd   $02,s
14F4 85F0             (/home/strick/6809):02900                  bita  #$F0
14F6 2667             (/home/strick/6809):02901                  bne   L1160
14F8 58               (/home/strick/6809):02902                  lslb
14F9 49               (/home/strick/6809):02903                  rola
14FA 58               (/home/strick/6809):02904                  lslb
14FB 49               (/home/strick/6809):02905                  rola
14FC 58               (/home/strick/6809):02906                  lslb
14FD 49               (/home/strick/6809):02907                  rola
14FE 58               (/home/strick/6809):02908                  lslb
14FF 49               (/home/strick/6809):02909                  rola
1500 EBE4             (/home/strick/6809):02910                  addb  ,s
1502 8900             (/home/strick/6809):02911                  adca  #$00
1504 ED62             (/home/strick/6809):02912                  std   $02,s
1506 6C61             (/home/strick/6809):02913                  inc   $01,s
1508 20D2             (/home/strick/6809):02914                  bra   L10C9
                      (/home/strick/6809):02915         * decimal string conversion
150A 301F             (/home/strick/6809):02916         L10F7    leax  -$01,x           no type flag, point to 1st digit
150C 8D33             (/home/strick/6809):02917         L10FB    bsr   L113B
150E 2543             (/home/strick/6809):02918                  bcs   L114D
1510 E7E4             (/home/strick/6809):02919                  stb   ,s
1512 EC62             (/home/strick/6809):02920                  ldd   $02,s
1514 58               (/home/strick/6809):02921                  lslb
1515 49               (/home/strick/6809):02922                  rola
1516 ED62             (/home/strick/6809):02923                  std   $02,s
1518 58               (/home/strick/6809):02924                  lslb
1519 49               (/home/strick/6809):02925                  rola
151A 58               (/home/strick/6809):02926                  lslb
151B 49               (/home/strick/6809):02927                  rola
151C 2541             (/home/strick/6809):02928                  bcs   L1160
151E E362             (/home/strick/6809):02929                  addd  $02,s
1520 253D             (/home/strick/6809):02930                  bcs   L1160
1522 EBE4             (/home/strick/6809):02931                  addb  ,s
1524 8900             (/home/strick/6809):02932                  adca  #$00
1526 2537             (/home/strick/6809):02933                  bcs   L1160
1528 ED62             (/home/strick/6809):02934                  std   $02,s
152A 6C61             (/home/strick/6809):02935                  inc   $01,s
152C 20DE             (/home/strick/6809):02936                  bra   L10FB
                      (/home/strick/6809):02937         * binary string conversion
152E E680             (/home/strick/6809):02938         L1121    ldb   ,x+
1530 C030             (/home/strick/6809):02939                  subb  #'0
1532 251F             (/home/strick/6809):02940                  bcs   L114D
1534 54               (/home/strick/6809):02941                  lsrb
1535 261C             (/home/strick/6809):02942                  bne   L114D
1537 6963             (/home/strick/6809):02943                  rol   $03,s
1539 6962             (/home/strick/6809):02944                  rol   $02,s
153B 2522             (/home/strick/6809):02945                  bcs   L1160
153D 6C61             (/home/strick/6809):02946                  inc   $01,s
153F 20ED             (/home/strick/6809):02947                  bra   L1121
                      (/home/strick/6809):02948         
                      (/home/strick/6809):02949         ** clear work area - moved to L10B4 and inlined
                      (/home/strick/6809):02950         **L1134    clra
                      (/home/strick/6809):02951         **         clrb
                      (/home/strick/6809):02952         **         std   $02,s
                      (/home/strick/6809):02953         **         std   $04,s
                      (/home/strick/6809):02954         **         rts
                      (/home/strick/6809):02955         
1541 E680             (/home/strick/6809):02956         L113B    ldb   ,x+
1543 C130             (/home/strick/6809):02957                  cmpb  #'0
1545 2504             (/home/strick/6809):02958                  blo   L1145
1547 C139             (/home/strick/6809):02959                  cmpb  #'9
1549 2303             (/home/strick/6809):02960                  bls   L1148
154B 1A01             (/home/strick/6809):02961         L1145    orcc  #$01
154D 39               (/home/strick/6809):02962                  rts
154E C030             (/home/strick/6809):02963         L1148    subb  #'0
1550 1CFE             (/home/strick/6809):02964                  andcc #$FE
1552 39               (/home/strick/6809):02965                  rts
1553 301F             (/home/strick/6809):02966         L114D    leax  -$01,x
1555 6D61             (/home/strick/6809):02967                  tst   $01,s            if no digits converted,
1557 2708             (/home/strick/6809):02968                  beq   L115B            not a number - exit with Z & C set
1559 EC62             (/home/strick/6809):02969                  ldd   $02,s
155B 1CFE             (/home/strick/6809):02970                  andcc #^$01            good conversion, clear carry
155D 2004             (/home/strick/6809):02971                  bra   L115D            and exit
                      (/home/strick/6809):02972         
                      (/home/strick/6809):02973         **L1159    orcc  #$04           not a number, set zero flag
155F 1CFB             (/home/strick/6809):02974         L1160    andcc #^$04            overflow, clear zero flag
1561 1A01             (/home/strick/6809):02975         L115B    orcc  #$01             conversion error, set carry
1563 3264             (/home/strick/6809):02976         L115D    leas  $04,s            release work area and exit
1565 39               (/home/strick/6809):02977                  rts
                      (/home/strick/6809):02978         **L1160    andcc #^$04          overflow, clear zero flag
                      (/home/strick/6809):02979         **         bra   L115B          and exit with carry set
                      (/home/strick/6809):02980         
                      (/home/strick/6809):02981         * Find next text field
                      (/home/strick/6809):02982         * Entry: X=Ptr to current location in source line
                      (/home/strick/6809):02983         * Exit:  X=Ptr to start of next field in source line
                      (/home/strick/6809):02984         *        A=First char in new field
1566 A680             (/home/strick/6809):02985         L1164    lda   ,x+            Get char.
1568 8120             (/home/strick/6809):02986                  cmpa  #$20           Space?
156A 27FA             (/home/strick/6809):02987                  beq   L1164          Yes, eat it
156C 301F             (/home/strick/6809):02988                  leax  -$01,x         Found next field; point to it & return
156E 39               (/home/strick/6809):02989                  rts
                      (/home/strick/6809):02990         
                      (/home/strick/6809):02991         * Binary 16-bit multiply:  returns D=D*X, X=0
156F 3416             (/home/strick/6809):02992         L116D    pshs  x,d
1571 A663             (/home/strick/6809):02993                  lda   $03,s
1573 3D               (/home/strick/6809):02994                  mul
1574 3406             (/home/strick/6809):02995                  pshs  b,a
1576 A662             (/home/strick/6809):02996                  lda   $02,s
1578 E665             (/home/strick/6809):02997                  ldb   $05,s
157A 3D               (/home/strick/6809):02998                  mul
157B EBE4             (/home/strick/6809):02999                  addb  ,s
157D E7E4             (/home/strick/6809):03000                  stb   ,s
157F A663             (/home/strick/6809):03001                  lda   $03,s
1581 E664             (/home/strick/6809):03002                  ldb   $04,s
1583 3D               (/home/strick/6809):03003                  mul
1584 EBE4             (/home/strick/6809):03004                  addb  ,s
1586 E7E4             (/home/strick/6809):03005                  stb   ,s
1588 ECE4             (/home/strick/6809):03006                  ldd   ,s
158A 8E0000           (/home/strick/6809):03007                  ldx   #$0000
158D 3266             (/home/strick/6809):03008                  leas  $06,s
158F 39               (/home/strick/6809):03009                  rts
                      (/home/strick/6809):03010         
                      (/home/strick/6809):03011         * Binary 16-bit Divide:  returns X/D (D=quotient, X=remainder)
1590 3436             (/home/strick/6809):03012         L118E    pshs  y,x,b,a
1592 ECE4             (/home/strick/6809):03013                  ldd   ,s
1594 2604             (/home/strick/6809):03014                  bne   L1198
1596 1A01             (/home/strick/6809):03015                  orcc  #$01
1598 2020             (/home/strick/6809):03016                  bra   L11B8
159A CC0010           (/home/strick/6809):03017         L1198    ldd   #$0010
159D E764             (/home/strick/6809):03018                  stb   $04,s
159F 5F               (/home/strick/6809):03019                  clrb
15A0 6863             (/home/strick/6809):03020         L119E    lsl   $03,s
15A2 6962             (/home/strick/6809):03021                  rol   $02,s
15A4 59               (/home/strick/6809):03022                  rolb
15A5 49               (/home/strick/6809):03023                  rola
15A6 A3E4             (/home/strick/6809):03024                  subd  ,s
15A8 2B04             (/home/strick/6809):03025                  bmi   L11AC
15AA 6C63             (/home/strick/6809):03026                  inc   $03,s
15AC 2002             (/home/strick/6809):03027                  bra   L11AE
15AE E3E4             (/home/strick/6809):03028         L11AC    addd  ,s
15B0 6A64             (/home/strick/6809):03029         L11AE    dec   $04,s
15B2 26EC             (/home/strick/6809):03030                  bne   L119E
15B4 1F01             (/home/strick/6809):03031                  tfr   d,x
15B6 EC62             (/home/strick/6809):03032                  ldd   $02,s
15B8 1CFE             (/home/strick/6809):03033                  andcc #$FE
15BA 3266             (/home/strick/6809):03034         L11B8    leas  $06,s
15BC 39               (/home/strick/6809):03035                  rts
                      (/home/strick/6809):03036         
                      (/home/strick/6809):03037         * L11BD copy loop moved to L1408 area -RVH
                      (/home/strick/6809):03038         
                      (/home/strick/6809):03039         * expression evaluator
15BD 3460             (/home/strick/6809):03040         L11C2    pshs  u,y            Preserve regs
15BF 33E4             (/home/strick/6809):03041                  leau  ,s             Point U to copy of Y on stack
15C1 8DA3             (/home/strick/6809):03042                  bsr   L1164          Parse for next field
15C3 8D06             (/home/strick/6809):03043                  bsr   L11D0          Check for special chars
15C5 1CFE             (/home/strick/6809):03044                  andcc #$FE           Error flag off
15C7 35E0             (/home/strick/6809):03045                  puls  pc,u,y         Restore regs & return
                      (/home/strick/6809):03046         
15C9 3001             (/home/strick/6809):03047         L11CE    leax  1,x
15CB 8D3F             (/home/strick/6809):03048         L11D0    bsr   L1211
15CD 3406             (/home/strick/6809):03049                  pshs  d
15CF A684             (/home/strick/6809):03050         L11D4    lda   ,x
15D1 812D             (/home/strick/6809):03051                  cmpa  #'-      Minus?
15D3 2608             (/home/strick/6809):03052                  bne   L11E2
15D5 8D33             (/home/strick/6809):03053                  bsr   L120F
15D7 40               (/home/strick/6809):03054                  nega
15D8 50               (/home/strick/6809):03055                  negb
15D9 8200             (/home/strick/6809):03056                  sbca  #$00
15DB 2006             (/home/strick/6809):03057                  bra   L11E8
15DD 812B             (/home/strick/6809):03058         L11E2    cmpa  #$2B     Plus?
15DF 2608             (/home/strick/6809):03059                  bne   L11EE
15E1 8D27             (/home/strick/6809):03060                  bsr   L120F
15E3 E3E4             (/home/strick/6809):03061         L11E8    addd  ,s
15E5 EDE4             (/home/strick/6809):03062                  std   ,s
15E7 20E6             (/home/strick/6809):03063                  bra   L11D4
15E9 4D               (/home/strick/6809):03064         L11EE    tsta           Null?
15EA 271C             (/home/strick/6809):03065                  beq   L120D
15EC 810D             (/home/strick/6809):03066                  cmpa  #$0D     CR?
15EE 2718             (/home/strick/6809):03067                  beq   L120D
15F0 8120             (/home/strick/6809):03068                  cmpa  #$20     Space?
15F2 2714             (/home/strick/6809):03069                  beq   L120D
15F4 812C             (/home/strick/6809):03070                  cmpa  #',      Comma?
15F6 2710             (/home/strick/6809):03071                  beq   L120D
15F8 8129             (/home/strick/6809):03072                  cmpa  #')      Rt paren?
15FA 270C             (/home/strick/6809):03073                  beq   L120D
15FC 815D             (/home/strick/6809):03074                  cmpa  #']      Rt bracket?
15FE 2708             (/home/strick/6809):03075                  beq   L120D
1600 C606             (/home/strick/6809):03076         L1205    ldb   #06              'expr syntax' error
1602 32C4             (/home/strick/6809):03077         L1207    leas  ,u
1604 1A01             (/home/strick/6809):03078                  orcc  #$01
1606 35E0             (/home/strick/6809):03079                  puls  pc,u,y
1608 3586             (/home/strick/6809):03080         L120D    puls  pc,d
160A 3001             (/home/strick/6809):03081         L120F    leax  1,x
                      (/home/strick/6809):03082         
160C 8D2C             (/home/strick/6809):03083         L1211    bsr   L123F
160E 3406             (/home/strick/6809):03084                  pshs  d
                      (/home/strick/6809):03085         
1610 A684             (/home/strick/6809):03086         L1215    lda   ,x
1612 812F             (/home/strick/6809):03087                  cmpa  #'/              Divide?
1614 260F             (/home/strick/6809):03088                  bne   L122A
1616 8D20             (/home/strick/6809):03089                  bsr   L123D
1618 3410             (/home/strick/6809):03090                  pshs  x
161A AE62             (/home/strick/6809):03091                  ldx   $02,s
161C 17FF71           (/home/strick/6809):03092                  lbsr  L118E
161F 2411             (/home/strick/6809):03093                  bcc   L1237
1621 C604             (/home/strick/6809):03094                  ldb   #04              'div by 0' error
1623 20DD             (/home/strick/6809):03095                  bra   L1207
1625 812A             (/home/strick/6809):03096         L122A    cmpa  #'*              Multiply?
1627 26DF             (/home/strick/6809):03097                  bne   L120D
1629 8D0D             (/home/strick/6809):03098                  bsr   L123D
162B 3410             (/home/strick/6809):03099                  pshs  x
162D AE62             (/home/strick/6809):03100                  ldx   $02,s
162F 17FF3D           (/home/strick/6809):03101                  lbsr  L116D
1632 3510             (/home/strick/6809):03102         L1237    puls  x
1634 EDE4             (/home/strick/6809):03103                  std   ,s
1636 20D8             (/home/strick/6809):03104                  bra   L1215
1638 3001             (/home/strick/6809):03105         L123D    leax  $01,x
                      (/home/strick/6809):03106         
163A 8D2C             (/home/strick/6809):03107         L123F    bsr   L126D
163C 3406             (/home/strick/6809):03108                  pshs  d
163E A684             (/home/strick/6809):03109         L1243    lda   ,x
1640 8126             (/home/strick/6809):03110                  cmpa  #'&            Logical AND?
1642 2608             (/home/strick/6809):03111                  bne   L1251          No, check next
1644 8D20             (/home/strick/6809):03112                  bsr   L126B
1646 E461             (/home/strick/6809):03113                  andb  $01,s
1648 A4E4             (/home/strick/6809):03114                  anda  ,s
164A 2016             (/home/strick/6809):03115                  bra   L1267
164C 8121             (/home/strick/6809):03116         L1251    cmpa  #'!            Logical OR?
164E 2608             (/home/strick/6809):03117                  bne   L125D          No, check next
1650 8D14             (/home/strick/6809):03118                  bsr   L126B
1652 EA61             (/home/strick/6809):03119                  orb   $01,s
1654 AAE4             (/home/strick/6809):03120                  ora   ,s
1656 200A             (/home/strick/6809):03121                  bra   L1267
1658 813F             (/home/strick/6809):03122         L125D    cmpa  #'?              Logical EOR?
165A 26AC             (/home/strick/6809):03123                  bne   L120D            No, return
165C 8D08             (/home/strick/6809):03124                  bsr   L126B
165E E861             (/home/strick/6809):03125                  eorb  $01,s
1660 A8E4             (/home/strick/6809):03126                  eora  ,s
1662 EDE4             (/home/strick/6809):03127         L1267    std   ,s
1664 20D8             (/home/strick/6809):03128                  bra   L1243
1666 3001             (/home/strick/6809):03129         L126B    leax  1,x            Bump src code ptr up by 1
1668 A684             (/home/strick/6809):03130         L126D    lda   ,x             Get char from source code
166A 815E             (/home/strick/6809):03131                  cmpa  #'^            Is it a NOT?
166C 2606             (/home/strick/6809):03132                  bne   L1279          No, check next
166E 8D0F             (/home/strick/6809):03133                  bsr   L1284
1670 53               (/home/strick/6809):03134                  comb
1671 43               (/home/strick/6809):03135                  coma
1672 200A             (/home/strick/6809):03136                  bra   L1283
1674 812D             (/home/strick/6809):03137         L1279    cmpa  #'-            Is it negative?
1676 260B             (/home/strick/6809):03138                  bne   L1288          No, check next
1678 8D05             (/home/strick/6809):03139                  bsr   L1284
167A 40               (/home/strick/6809):03140                  nega
167B 50               (/home/strick/6809):03141                  negb
167C 8200             (/home/strick/6809):03142                  sbca  #$00
167E 39               (/home/strick/6809):03143         L1283    rts
167F 3001             (/home/strick/6809):03144         L1284    leax  1,x
1681 A684             (/home/strick/6809):03145         L1286    lda   ,x             Get character from source code
1683 8128             (/home/strick/6809):03146         L1288    cmpa  #'(            Math grouping start symbol?
1685 2614             (/home/strick/6809):03147                  bne   L12A2          No, check next
1687 17FF3F           (/home/strick/6809):03148                  lbsr  L11CE
168A 3406             (/home/strick/6809):03149                  pshs  d
168C A684             (/home/strick/6809):03150                  lda   ,x
168E 8129             (/home/strick/6809):03151                  cmpa  #')            Math grouping end symbol?
1690 3506             (/home/strick/6809):03152                  puls  d
1692 271B             (/home/strick/6809):03153                  beq   L12B6
1694 C607             (/home/strick/6809):03154                  ldb   #07              'parens' error
                      (/home/strick/6809):03155         *         bra   L129D   ??
1696 3262             (/home/strick/6809):03156         L129D    leas  $02,s
1698 16FF67           (/home/strick/6809):03157         L129F    lbra  L1207
169B 812A             (/home/strick/6809):03158         L12A2    cmpa  #'*            Asterisk? (current code address)
169D 2604             (/home/strick/6809):03159                  bne   L12AA          No, check next
169F DC40             (/home/strick/6809):03160                  ldd   <u0040
16A1 200C             (/home/strick/6809):03161                  bra   L12B6
16A3 0D5A             (/home/strick/6809):03162         L12AA    tst   <u005A         If MOTOROLA flag is set, check next
16A5 260B             (/home/strick/6809):03163                  bne   L12B9
16A7 812E             (/home/strick/6809):03164                  cmpa  #'.            Period? (current data address)
16A9 2607             (/home/strick/6809):03165                  bne   L12B9          No, check next
16AB DC42             (/home/strick/6809):03166                  ldd   <u0042
16AD 0C2C             (/home/strick/6809):03167                  inc   <u002C
16AF 3001             (/home/strick/6809):03168         L12B6    leax  1,x            Bump src code ptr up & return
16B1 39               (/home/strick/6809):03169                  rts
16B2 8127             (/home/strick/6809):03170         L12B9    cmpa  #''            Single Quote? (1-character literal)
16B4 2605             (/home/strick/6809):03171                  bne   L12C5          No, check next
16B6 EC81             (/home/strick/6809):03172                  ldd   ,x++             load quote+following char
16B8 4F               (/home/strick/6809):03173                  clra                   eat the quote
16B9 200C             (/home/strick/6809):03174                  bra   L12D1            test for CR
16BB 8122             (/home/strick/6809):03175         L12C5    cmpa  #'"            Double Quote? (2-character literal)
16BD 2610             (/home/strick/6809):03176                  bne   L12D9            No, must be number or label
16BF 3001             (/home/strick/6809):03177                  leax  1,x              skip the quote
16C1 EC81             (/home/strick/6809):03178                  ldd   ,x++             and load the next 2 chars
16C3 810D             (/home/strick/6809):03179                  cmpa  #C$CR            first = CR?
16C5 2705             (/home/strick/6809):03180                  beq   L12D6
16C7 C10D             (/home/strick/6809):03181         L12D1    cmpb  #C$CR            second = CR?
16C9 2701             (/home/strick/6809):03182                  beq   L12D6
16CB 39               (/home/strick/6809):03183                  rts
16CC 16FF31           (/home/strick/6809):03184         L12D6    lbra  L1205            'expr syntax'
                      (/home/strick/6809):03185         * labels and numbers come here
16CF 17FDF5           (/home/strick/6809):03186         L12D9    lbsr  L10B4            process as numeric string
16D2 2410             (/home/strick/6809):03187                  bcc   L12EE
16D4 2704             (/home/strick/6809):03188                  beq   L12E4            not a number, try label
16D6 C603             (/home/strick/6809):03189                  ldb   #03              'in number' error
16D8 20BE             (/home/strick/6809):03190                  bra   L129F
16DA 17EC71           (/home/strick/6809):03191         L12E4    lbsr  L0368            process label type operand
16DD 25ED             (/home/strick/6809):03192                  bcs   L12D6            invalid label, syntax error
16DF 17FCD8           (/home/strick/6809):03193                  lbsr  L0FA2            good label, search in symbol table
16E2 25B4             (/home/strick/6809):03194                  bcs   L129F
16E4 1CFE             (/home/strick/6809):03195         L12EE    andcc #$FE
16E6 39               (/home/strick/6809):03196                  rts
                      (/home/strick/6809):03197         * Called by index mode handler
16E7 17FED3           (/home/strick/6809):03198         L12F1    lbsr  L11C2
16EA 250E             (/home/strick/6809):03199                  bcs   L1304
16EC 39               (/home/strick/6809):03200         L12F6    rts
                      (/home/strick/6809):03201         * Immediate mode parser - byte operand
16ED 17FECD           (/home/strick/6809):03202         L12F7    lbsr  L11C2
16F0 2508             (/home/strick/6809):03203                  bcs   L1304
16F2 4D               (/home/strick/6809):03204                  tsta
16F3 27F7             (/home/strick/6809):03205                  beq   L12F6
16F5 4C               (/home/strick/6809):03206                  inca
16F6 27F4             (/home/strick/6809):03207                  beq   L12F6
16F8 C60E             (/home/strick/6809):03208                  ldb   #14              'result>255' error
16FA 17EBF7           (/home/strick/6809):03209         L1304    lbsr  L02FA
16FD CCFFFF           (/home/strick/6809):03210                  ldd   #$FFFF
1700 1A01             (/home/strick/6809):03211                  orcc  #$01
1702 39               (/home/strick/6809):03212                  rts
                      (/home/strick/6809):03213         * write a byte to code buffer
1703 8D3E             (/home/strick/6809):03214         L130D    bsr   L134D            Update CRC
1705 3416             (/home/strick/6809):03215                  pshs  x,d
1707 9E1B             (/home/strick/6809):03216                  ldx   <u001B           current loc
1709 A780             (/home/strick/6809):03217                  sta   ,x+              write new byte
170B 9F1B             (/home/strick/6809):03218                  stx   <u001B           update ptr
170D 9C10             (/home/strick/6809):03219                  cmpx  <u0010           buffer full?
170F 2506             (/home/strick/6809):03220                  blo   L1321            no, return
1711 8D06             (/home/strick/6809):03221                  bsr   L1323            yes, write it out
1713 9E0E             (/home/strick/6809):03222                  ldx   <u000E
1715 9F1B             (/home/strick/6809):03223                  stx   <u001B           and reset ptr to start
1717 3596             (/home/strick/6809):03224         L1321    puls  pc,x,d
                      (/home/strick/6809):03225         * flush code buffer contents
1719 3436             (/home/strick/6809):03226         L1323    pshs  y,x,d
171B 9658             (/home/strick/6809):03227                  lda   <u0058           O flag?
171D 2717             (/home/strick/6809):03228                  beq   L1340            no, exit (no outfile)
171F 963E             (/home/strick/6809):03229                  lda   <u003E           code generation (second) pass?
1721 2713             (/home/strick/6809):03230                  beq   L1340            no, exit
1723 DC1B             (/home/strick/6809):03231                  ldd   <u001B           is code ptr
1725 930E             (/home/strick/6809):03232                  subd  <u000E           still at start of buffer?
1727 270D             (/home/strick/6809):03233                  beq   L1340            yes, exit (it's empty)
1729 1F02             (/home/strick/6809):03234                  tfr   d,y              Y=byte count
172B 9E0E             (/home/strick/6809):03235                  ldx   <u000E           X=buffer addr
172D 9619             (/home/strick/6809):03236                  lda   <u0019           A=outfile path #
172F 2705             (/home/strick/6809):03237                  beq   L1340            if path=0, no outfile, exit
1731 103F8A           (/home/strick/6809):03238                  os9   I$Write          write the buffer
1734 2502             (/home/strick/6809):03239                  bcs   L1342            errors?
1736 35B6             (/home/strick/6809):03240         L1340    puls  pc,y,x,d
1738 103F0F           (/home/strick/6809):03241         L1342    os9   F$PErr           yes, print OS9 error message
173B C612             (/home/strick/6809):03242                  ldb   #18              'object path' error
173D 17EBB4           (/home/strick/6809):03243                  lbsr  L02FA            then print ASM error message
1740 16027F           (/home/strick/6809):03244                  lbra  L15A2            and exit
                      (/home/strick/6809):03245         * update running CRC value
1743 3476             (/home/strick/6809):03246         L134D    pshs  u,y,x,d
1745 30E4             (/home/strick/6809):03247                  leax  ,s               X = addr of new code byte
1747 108E0001         (/home/strick/6809):03248                  ldy   #$0001           just one byte
174B 1FB8             (/home/strick/6809):03249                  tfr   dp,a             MSB of CRC buf
174D C651             (/home/strick/6809):03250                  ldb   #u0051           LSB of CRC buf
174F 1F03             (/home/strick/6809):03251                  tfr   d,u              U = addr of CRC buffer
1751 103F17           (/home/strick/6809):03252                  os9   F$CRC            Update CRC
1754 35F6             (/home/strick/6809):03253                  puls  pc,u,y,x,d
                      (/home/strick/6809):03254         * initialize CRC to $FFFFFF
1756 CCFFFF           (/home/strick/6809):03255         L1360    ldd   #$FFFF
1759 DD51             (/home/strick/6809):03256                  std   <u0051
175B D753             (/home/strick/6809):03257                  stb   <u0051+2
175D 39               (/home/strick/6809):03258                  rts
                      (/home/strick/6809):03259         *
175E 9657             (/home/strick/6809):03260         L1368    lda   <u0057
1760 272E             (/home/strick/6809):03261                  beq   L139A
1762 9656             (/home/strick/6809):03262                  lda   <u0056
1764 2B2A             (/home/strick/6809):03263                  bmi   L139A
1766 9635             (/home/strick/6809):03264         L1370    lda   <u0035
1768 2607             (/home/strick/6809):03265                  bne   L137B
176A 3410             (/home/strick/6809):03266                  pshs  x
176C 1700AB           (/home/strick/6809):03267                  lbsr  L1408
176F 3510             (/home/strick/6809):03268                  puls  x
1771 8D0D             (/home/strick/6809):03269         L137B    bsr   L138A
1773 963E             (/home/strick/6809):03270                  lda   <u003E
1775 2706             (/home/strick/6809):03271                  beq   L1387
1777 9656             (/home/strick/6809):03272                  lda   <u0056
1779 2B02             (/home/strick/6809):03273                  bmi   L1387
177B 0A35             (/home/strick/6809):03274                  dec   <u0035
177D 9E04             (/home/strick/6809):03275         L1387    ldx   <u0004
177F 39               (/home/strick/6809):03276                  rts
1780 9657             (/home/strick/6809):03277         L138A    lda   <u0057
1782 2704             (/home/strick/6809):03278                  beq   L1392
1784 9656             (/home/strick/6809):03279                  lda   <u0056
1786 2A08             (/home/strick/6809):03280                  bpl   L139A
1788 965C             (/home/strick/6809):03281         L1392    lda   <u005C
178A 27F1             (/home/strick/6809):03282                  beq   L1387
178C 9621             (/home/strick/6809):03283                  lda   <u0021
178E 27ED             (/home/strick/6809):03284                  beq   L1387
1790 963E             (/home/strick/6809):03285         L139A    lda   <u003E
1792 27E9             (/home/strick/6809):03286                  beq   L1387
1794 3422             (/home/strick/6809):03287                  pshs  y,a
1796 8D16             (/home/strick/6809):03288                  bsr   L13B8
1798 4F               (/home/strick/6809):03289                  clra
1799 D637             (/home/strick/6809):03290                  ldb   <u0037
179B 9E04             (/home/strick/6809):03291                  ldx   <u0004
179D 308B             (/home/strick/6809):03292                  leax  d,x
179F 8D0D             (/home/strick/6809):03293                  bsr   L13B8
17A1 9E04             (/home/strick/6809):03294                  ldx   <u0004
17A3 108E0085         (/home/strick/6809):03295                  ldy   #133             listing buffer width=132 chars+CR
17A7 961A             (/home/strick/6809):03296                  lda   <u001A
17A9 103F8C           (/home/strick/6809):03297                  os9   I$WritLn
17AC 35A2             (/home/strick/6809):03298                  puls  pc,y,a
                      (/home/strick/6809):03299         * append a CR to end of string
17AE 860D             (/home/strick/6809):03300         L13B8    lda   #C$CR            CR
17B0 A780             (/home/strick/6809):03301                  sta   ,x+              Append to end of buffer & return
17B2 39               (/home/strick/6809):03302                  rts
                      (/home/strick/6809):03303         * print Date & Time as MM/DD/YYYY hh:mm:ss
17B3 327A             (/home/strick/6809):03304         L13BD    leas  -$06,s           allocate a date buffer on stack
17B5 3410             (/home/strick/6809):03305                  pshs  x
17B7 3062             (/home/strick/6809):03306                  leax  $02,s            X=addr of date buffer
17B9 103F15           (/home/strick/6809):03307                  os9   F$Time           get Date/Time packet
17BC 3510             (/home/strick/6809):03308                  puls  x
17BE 2533             (/home/strick/6809):03309                  bcs   L13F0            exit on error
17C0 A661             (/home/strick/6809):03310                  lda   $01,s            get month byte
17C2 8D36             (/home/strick/6809):03311                  bsr   L13F7            write 2-digit month
17C4 C62F             (/home/strick/6809):03312                  ldb   #'/
17C6 E780             (/home/strick/6809):03313                  stb   ,x+              and a slash
17C8 A662             (/home/strick/6809):03314                  lda   $02,s            get day byte
17CA 8D2E             (/home/strick/6809):03315                  bsr   L13F7            write 2-digit day
17CC E780             (/home/strick/6809):03316                  stb   ,x+              and another slash
                      (/home/strick/6809):03317         * shorter 1900-2155 fix
                      (/home/strick/6809):03318         * ++START++
17CE E6E4             (/home/strick/6809):03319                  ldb   ,s               system years in B (0-255)
17D0 8612             (/home/strick/6809):03320                  lda   #19-1            century in A
17D2 4C               (/home/strick/6809):03321         c.loop   inca                   add a century
17D3 C064             (/home/strick/6809):03322                  subb  #100             subtract 100 yrs
17D5 24FB             (/home/strick/6809):03323                  bhs   c.loop           until yr<0
17D7 CB64             (/home/strick/6809):03324                  addb  #100             restore year to 00-99 range
17D9 8D1F             (/home/strick/6809):03325                  bsr   L13F7            write 2-digit century
17DB 1F98             (/home/strick/6809):03326                  tfr   b,a              retrieve adjusted year
                      (/home/strick/6809):03327         * ++END++
17DD 8D1B             (/home/strick/6809):03328                  bsr   L13F7            write 2-digit year
17DF 8D14             (/home/strick/6809):03329                  bsr   L13F2            and a space
17E1 A663             (/home/strick/6809):03330                  lda   $03,s            get hours byte
17E3 8D15             (/home/strick/6809):03331                  bsr   L13F7            write 2-digit hours
17E5 C63A             (/home/strick/6809):03332                  ldb   #':
17E7 E780             (/home/strick/6809):03333                  stb   ,x+              and a colon     
17E9 A664             (/home/strick/6809):03334                  lda   $04,s            get minutes byte
17EB 8D0D             (/home/strick/6809):03335                  bsr   L13F7            write 2-digit minutes
17ED E780             (/home/strick/6809):03336                  stb   ,x+              and another colon
17EF A665             (/home/strick/6809):03337                  lda   $05,s            get seconds byte
17F1 8D07             (/home/strick/6809):03338                  bsr   L13F7            write 2-digit seconds
17F3 3266             (/home/strick/6809):03339         L13F0    leas  $06,s            release date buffer
17F5 8620             (/home/strick/6809):03340         L13F2    lda   #C$SPAC
17F7 A780             (/home/strick/6809):03341                  sta   ,x+              and write another space
17F9 39               (/home/strick/6809):03342                  rts
                      (/home/strick/6809):03343         * write Reg.A to buffer as 2-digit decimal ASCII
17FA 3404             (/home/strick/6809):03344         L13F7    pshs  b
17FC C62F             (/home/strick/6809):03345                  ldb   #'0-1
17FE 5C               (/home/strick/6809):03346         L13FB    incb
17FF 800A             (/home/strick/6809):03347                  suba  #10
1801 24FB             (/home/strick/6809):03348                  bhs   L13FB
1803 E780             (/home/strick/6809):03349                  stb   ,x+
1805 8B3A             (/home/strick/6809):03350                  adda  #'0+10
1807 A780             (/home/strick/6809):03351                  sta   ,x+
1809 3584             (/home/strick/6809):03352                  puls  pc,b
                      (/home/strick/6809):03353         
                      (/home/strick/6809):03354         * Copy a string from Y-buf (src) to X-buf (listing buffer)
                      (/home/strick/6809):03355         * until Null or EOL terminator or end of buffer.
180B 9C14             (/home/strick/6809):03356         L11BB    cmpx  <u0014           reached end of listbuf?
180D 2402             (/home/strick/6809):03357                  bhs   L11BD            yes, stop copying
180F A780             (/home/strick/6809):03358                  sta   ,x+
1811 A6A0             (/home/strick/6809):03359         L11BD    lda   ,y+              Enter here:
1813 2704             (/home/strick/6809):03360                  beq   L11C1            exit if Null
1815 810D             (/home/strick/6809):03361                  cmpa  #C$CR            ..or EOL
1817 26F2             (/home/strick/6809):03362                  bne   L11BB            else copy
1819 39               (/home/strick/6809):03363         L11C1    rts
                      (/home/strick/6809):03364         *
181A 9656             (/home/strick/6809):03365         L1408    lda   <u0056
181C 2B67             (/home/strick/6809):03366                  bmi   L1476
181E 9659             (/home/strick/6809):03367                  lda   <u0059
1820 2704             (/home/strick/6809):03368                  beq   L1414
1822 8D68             (/home/strick/6809):03369                  bsr   L147D
1824 2006             (/home/strick/6809):03370                  bra   L141A
1826 D635             (/home/strick/6809):03371         L1414    ldb   <u0035
1828 CB03             (/home/strick/6809):03372                  addb  #$03
182A 8D54             (/home/strick/6809):03373                  bsr   L1471
182C 9E04             (/home/strick/6809):03374         L141A    ldx   <u0004
182E 3410             (/home/strick/6809):03375                  pshs  x
1830 9E02             (/home/strick/6809):03376                  ldx   <u0002
1832 9F04             (/home/strick/6809):03377                  stx   <u0004
1834 D636             (/home/strick/6809):03378                  ldb   <u0036
1836 C004             (/home/strick/6809):03379                  subb  #$04
1838 D735             (/home/strick/6809):03380                  stb   <u0035
183A 17E9AD           (/home/strick/6809):03381                  lbsr  L01E5
183D 318C74           (/home/strick/6809):03382                  leay  <L14A5,pc      Point to 'Microware OS-9 Assembler' etc.
1840 8DCF             (/home/strick/6809):03383                  bsr   L11BD
1842 17FF6E           (/home/strick/6809):03384                  lbsr  L13BD
1845 9E04             (/home/strick/6809):03385                  ldx   <u0004
1847 4F               (/home/strick/6809):03386                  clra
1848 D637             (/home/strick/6809):03387                  ldb   <u0037
184A C006             (/home/strick/6809):03388                  subb  #$06
184C 308B             (/home/strick/6809):03389                  leax  d,x
184E DC3A             (/home/strick/6809):03390                  ldd   <u003A
1850 17FC45           (/home/strick/6809):03391                  lbsr  L1084
1853 0C3B             (/home/strick/6809):03392                  inc   <u003A+1         lsb
1855 2602             (/home/strick/6809):03393                  bne   L1447
1857 0C3A             (/home/strick/6809):03394                  inc   <u003A           msb
1859 3018             (/home/strick/6809):03395         L1447    leax  -$08,x
185B 318C50           (/home/strick/6809):03396                  leay  <L149F,pc      Point to 'Page'
185E 8DB1             (/home/strick/6809):03397                  bsr   L11BD
1860 3003             (/home/strick/6809):03398                  leax  $03,x
1862 17FF01           (/home/strick/6809):03399                  lbsr  L1370
1865 109E0A           (/home/strick/6809):03400                  ldy   <u000A           print NAM field
1868 8DA7             (/home/strick/6809):03401                  bsr   L11BD
186A 8D89             (/home/strick/6809):03402                  bsr   L13F2            print " - "
186C 862D             (/home/strick/6809):03403                  lda   #'-
186E A780             (/home/strick/6809):03404                  sta   ,x+
1870 8D83             (/home/strick/6809):03405                  bsr   L13F2
1872 109E08           (/home/strick/6809):03406                  ldy   <u0008           print TTL field
1875 8D9A             (/home/strick/6809):03407                  bsr   L11BD
1877 17FEEC           (/home/strick/6809):03408                  lbsr  L1370
187A 3510             (/home/strick/6809):03409                  puls  x
187C 9F04             (/home/strick/6809):03410                  stx   <u0004
187E C601             (/home/strick/6809):03411                  ldb   #$01
1880 8D06             (/home/strick/6809):03412         L1471    bsr   L1479
1882 5A               (/home/strick/6809):03413                  decb
1883 26FB             (/home/strick/6809):03414                  bne   L1471
1885 9E04             (/home/strick/6809):03415         L1476    ldx   <u0004
1887 39               (/home/strick/6809):03416                  rts
1888 860D             (/home/strick/6809):03417         L1479    lda   #$0D             do CRs
188A 2002             (/home/strick/6809):03418                  bra   L147F
188C 860C             (/home/strick/6809):03419         L147D    lda   #$0C             or form feed
188E 3436             (/home/strick/6809):03420         L147F    pshs  y,x,d
1890 963E             (/home/strick/6809):03421                  lda   <u003E
1892 2713             (/home/strick/6809):03422                  beq   L1498
1894 9657             (/home/strick/6809):03423                  lda   <u0057
1896 270F             (/home/strick/6809):03424                  beq   L1498
1898 9656             (/home/strick/6809):03425                  lda   <u0056
189A 2B0B             (/home/strick/6809):03426                  bmi   L1498
189C 961A             (/home/strick/6809):03427                  lda   <u001A
189E 1F41             (/home/strick/6809):03428                  tfr   s,x
18A0 108E0001         (/home/strick/6809):03429                  ldy   #$0001
18A4 103F8C           (/home/strick/6809):03430                  os9   I$WritLn
18A7 35B6             (/home/strick/6809):03431         L1498    puls  pc,y,x,d
18A9 9E04             (/home/strick/6809):03432         L149A    ldx   <u0004
18AB 16FEB8           (/home/strick/6809):03433                  lbra  L1370
                      (/home/strick/6809):03434         
18AE 5061676520       (/home/strick/6809):03435         L149F    fcc   'Page '
18B3 00               (/home/strick/6809):03436                  fcb   $00
18B4 4D6963726F776172 (/home/strick/6809):03437         L14A5    fcc   'Microware OS-9 Assembler RS Version 01.00.00    '
     65204F532D392041
     7373656D626C6572
     2052532056657273
     696F6E2030312E30
     302E303020202020
18E4 00               (/home/strick/6809):03438                  fcb   $00
18E5 41534D3A         (/home/strick/6809):03439         L1533    fcc   'ASM:'
                      (/home/strick/6809):03440         
18E9 3476             (/home/strick/6809):03441         L1537    pshs  u,y,x,d
18EB 965D             (/home/strick/6809):03442                  lda   <u005D           Interactive mode?
18ED 270C             (/home/strick/6809):03443                  beq   L1549            No, skip user prompt
18EF 308CF3           (/home/strick/6809):03444                  leax  <L1533,pc      Point to 'ASM:'
18F2 108E0004         (/home/strick/6809):03445                  ldy   #$0004         Size of text
18F6 961A             (/home/strick/6809):03446                  lda   <u001A         Get output path #
18F8 103F8A           (/home/strick/6809):03447                  os9   I$Write        Write it out
18FB 9E00             (/home/strick/6809):03448         L1549    ldx   <u0000           input buffer
18FD 108E0078         (/home/strick/6809):03449                  ldy   #$0078           read 120 max
1901 9618             (/home/strick/6809):03450                  lda   <u0018           input path number
1903 103F8B           (/home/strick/6809):03451         L1551    os9   I$ReadLn
1906 2431             (/home/strick/6809):03452                  bcc   TabFix           was->L156A
1908 C1D3             (/home/strick/6809):03453                  cmpb  #E$EOF           EOF?
190A 2606             (/home/strick/6809):03454                  bne   L1560
190C 8D10             (/home/strick/6809):03455                  bsr   L156C
190E 24EB             (/home/strick/6809):03456                  bcc   L1549
1910 200A             (/home/strick/6809):03457         L155E    bra   L156A
1912 103F0F           (/home/strick/6809):03458         L1560    os9   F$PErr
1915 C611             (/home/strick/6809):03459                  ldb   #17              'input path' error
1917 17E9DA           (/home/strick/6809):03460                  lbsr  L02FA
191A 8D02             (/home/strick/6809):03461                  bsr   L156C
191C 35F6             (/home/strick/6809):03462         L156A    puls  pc,u,y,x,d
191E DE1F             (/home/strick/6809):03463         L156C    ldu   <u001F
1920 119306           (/home/strick/6809):03464         L156E    cmpu  <u0006
1923 2603             (/home/strick/6809):03465                  bne   L1576
1925 1A01             (/home/strick/6809):03466                  orcc  #$01
1927 39               (/home/strick/6809):03467                  rts
1928 9618             (/home/strick/6809):03468         L1576    lda   <u0018
192A 3704             (/home/strick/6809):03469                  pulu  b
192C DF1F             (/home/strick/6809):03470                  stu   <u001F
192E D718             (/home/strick/6809):03471                  stb   <u0018
1930 103F8F           (/home/strick/6809):03472                  os9   I$Close
1933 2403             (/home/strick/6809):03473                  bcc   L1586
1935 103F0F           (/home/strick/6809):03474                  os9   F$PErr
1938 39               (/home/strick/6809):03475         L1586    rts
                      (/home/strick/6809):03476         * RVH add-on: accept tabs in source text by
                      (/home/strick/6809):03477         * converting them to spaces. X=inbuf,Y=count
1939 CC0920           (/home/strick/6809):03478         TabFix   ldd   #$0920           A=tab, B=space
193C A180             (/home/strick/6809):03479         t.loop   cmpa  ,x+              is it a tab?
193E 2602             (/home/strick/6809):03480                  bne   t.next
1940 E71F             (/home/strick/6809):03481                  stb   -1,x             yes, change to space
1942 313F             (/home/strick/6809):03482         t.next   leay  -1,y
1944 26F6             (/home/strick/6809):03483                  bne   t.loop           scan to end of input
1946 1CFE             (/home/strick/6809):03484                  andcc #$FE             error flag off
1948 20D2             (/home/strick/6809):03485                  bra   L156A            and return
                      (/home/strick/6809):03486         
194A 206572726F722873 (/home/strick/6809):03487         L14D6    fcc   ' error(s)'
     29
1953 00               (/home/strick/6809):03488                  fcb   $00
1954 207761726E696E67 (/home/strick/6809):03489         L14E0    fcc   ' warning(s)'
     287329
195F 00               (/home/strick/6809):03490                  fcb   $00
1960 2070726F6772616D (/home/strick/6809):03491         L14EC    fcc   ' program bytes generated'
     2062797465732067
     656E657261746564
1978 00               (/home/strick/6809):03492                  fcb   $00
1979 2064617461206279 (/home/strick/6809):03493         L1505    fcc   ' data bytes allocated'
     74657320616C6C6F
     6361746564
198E 00               (/home/strick/6809):03494                  fcb   $00
198F 2062797465732075 (/home/strick/6809):03495         L151B    fcc   ' bytes used for symbols'
     73656420666F7220
     73796D626F6C73
19A6 00               (/home/strick/6809):03496                  fcb   $00
                      (/home/strick/6809):03497         
19A7 3406             (/home/strick/6809):03498         L1587    pshs  b,a
19A9 8624             (/home/strick/6809):03499                  lda   #'$
19AB A780             (/home/strick/6809):03500                  sta   ,x+
19AD ECE4             (/home/strick/6809):03501                  ldd   ,s
19AF 17FAB9           (/home/strick/6809):03502                  lbsr  L1057            call OUT4HS
19B2 3506             (/home/strick/6809):03503                  puls  b,a
19B4 17FAE1           (/home/strick/6809):03504         L1594    lbsr  L1084
19B7 1F32             (/home/strick/6809):03505                  tfr   u,y
19B9 17FE55           (/home/strick/6809):03506                  lbsr  L11BD
19BC 16FD9F           (/home/strick/6809):03507                  lbra  L1368
19BF 17FD57           (/home/strick/6809):03508         L159F    lbsr  L1323
19C2 17FEE4           (/home/strick/6809):03509         L15A2    lbsr  L149A
19C5 DC28             (/home/strick/6809):03510                  ldd   <u0028
19C7 338C80           (/home/strick/6809):03511                  leau  <L14D6,pc
19CA 8DE8             (/home/strick/6809):03512                  bsr   L1594
19CC DC22             (/home/strick/6809):03513                  ldd   <u0022
19CE 338C83           (/home/strick/6809):03514                  leau  <L14E0,pc
19D1 8DE1             (/home/strick/6809):03515                  bsr   L1594
19D3 DC24             (/home/strick/6809):03516                  ldd   <u0024
19D5 338C88           (/home/strick/6809):03517                  leau  <L14EC,pc
19D8 8DCD             (/home/strick/6809):03518                  bsr   L1587
19DA DC26             (/home/strick/6809):03519                  ldd   <u0026
19DC 338C9A           (/home/strick/6809):03520                  leau  <L1505,pc
19DF 8DC6             (/home/strick/6809):03521                  bsr   L1587
19E1 DC1D             (/home/strick/6809):03522                  ldd   <u001D
19E3 9310             (/home/strick/6809):03523                  subd  <u0010
19E5 338CA7           (/home/strick/6809):03524                  leau  <L151B,pc
19E8 8DBD             (/home/strick/6809):03525                  bsr   L1587
19EA 965E             (/home/strick/6809):03526                  lda   <u005E           'S' flag?
19EC 2702             (/home/strick/6809):03527                  beq   L15D5
19EE 8D3D             (/home/strick/6809):03528                  bsr   L1612            yes, print symbol table
19F0 965D             (/home/strick/6809):03529         L15D5    lda   <u005D           'I' flag?
19F2 2610             (/home/strick/6809):03530                  bne   L15E9
19F4 9659             (/home/strick/6809):03531                  lda   <u0059           'F' flag?
19F6 2705             (/home/strick/6809):03532                  beq   L15E2
19F8 17FE91           (/home/strick/6809):03533                  lbsr  L147D            yes, do a formfeed
19FB 2007             (/home/strick/6809):03534                  bra   L15E9
19FD D635             (/home/strick/6809):03535         L15E2    ldb   <u0035           no, get remaining page length
19FF CB03             (/home/strick/6809):03536                  addb  #$03             and footer?
1A01 17FE7C           (/home/strick/6809):03537                  lbsr  L1471            do a bunch of CRs
1A04 DE1F             (/home/strick/6809):03538         L15E9    ldu   <u001F
1A06 119306           (/home/strick/6809):03539         L15EB    cmpu  <u0006
1A09 2707             (/home/strick/6809):03540                  beq   L15F7
1A0B 3702             (/home/strick/6809):03541                  pulu  a
1A0D 103F8F           (/home/strick/6809):03542                  os9   I$Close
1A10 20F4             (/home/strick/6809):03543                  bra   L15EB
1A12 5F               (/home/strick/6809):03544         L15F7    clrb
1A13 103F06           (/home/strick/6809):03545                  os9   F$Exit
1A16 8601             (/home/strick/6809):03546         L15FB    lda   #READ.           open in READ mode
1A18 103F84           (/home/strick/6809):03547                  os9   I$Open
1A1B C618             (/home/strick/6809):03548                  ldb   #24              'can't open' error
1A1D 1025FA0A         (/home/strick/6809):03549                  lbcs  L1017            if open fails
1A21 39               (/home/strick/6809):03550                  rts
                      (/home/strick/6809):03551         * seek to beginning of input file
1A22 9618             (/home/strick/6809):03552         L1607    lda   <u0018           source file path number
1A24 CE0000           (/home/strick/6809):03553                  ldu   #$0000
1A27 1F31             (/home/strick/6809):03554                  tfr   u,x
1A29 103F88           (/home/strick/6809):03555                  os9   I$Seek
1A2C 39               (/home/strick/6809):03556                  rts
1A2D D637             (/home/strick/6809):03557         L1612    ldb   <u0037
1A2F 4F               (/home/strick/6809):03558                  clra
1A30 1F01             (/home/strick/6809):03559                  tfr   d,x              X=width of page (W option)
1A32 C610             (/home/strick/6809):03560                  ldb   #16              D=width of printed symbol entry
1A34 17FB59           (/home/strick/6809):03561                  lbsr  L118E            call div16. returns [X/D] in D
1A37 D73D             (/home/strick/6809):03562                  stb   <u003D
1A39 D73C             (/home/strick/6809):03563                  stb   <u003C
1A3B 17FE6B           (/home/strick/6809):03564                  lbsr  L149A
1A3E DE10             (/home/strick/6809):03565                  ldu   <u0010
                      (/home/strick/6809):03566                 IFNE  DOCASE
1A40 C634             (/home/strick/6809):03567                  ldb   #52              number of vectors in "first letter" table
                      (/home/strick/6809):03568                 ELSE
                      (/home/strick/6809):03569                  ldb   #26              number of vectors in "first letter" table
                      (/home/strick/6809):03570                 ENDC  DOCASE
1A42 3404             (/home/strick/6809):03571                  pshs  b
1A44 10AEC1           (/home/strick/6809):03572         L1629    ldy   ,u++             fetch link to chain for next letter
1A47 2728             (/home/strick/6809):03573                  beq   L1656            if null, no symbol starts with this letter
1A49 3460             (/home/strick/6809):03574         L162E    pshs  u,y
1A4B 2012             (/home/strick/6809):03575                  bra   L1644
1A4D 33A4             (/home/strick/6809):03576         L1632    leau  ,y
1A4F 1F02             (/home/strick/6809):03577                  tfr   d,y
1A51 EC2B             (/home/strick/6809):03578         L1636    ldd   $0B,y
1A53 26F8             (/home/strick/6809):03579                  bne   L1632
1A55 8D23             (/home/strick/6809):03580                  bsr   L165F
1A57 10AE2D           (/home/strick/6809):03581                  ldy   $0D,y
1A5A 10AF4B           (/home/strick/6809):03582                  sty   $0B,u
1A5D 26F2             (/home/strick/6809):03583                  bne   L1636
1A5F EEE4             (/home/strick/6809):03584         L1644    ldu   ,s
1A61 10AE4B           (/home/strick/6809):03585                  ldy   $0B,u
1A64 26EB             (/home/strick/6809):03586                  bne   L1636
1A66 31C4             (/home/strick/6809):03587                  leay  ,u
1A68 8D10             (/home/strick/6809):03588                  bsr   L165F
1A6A 3560             (/home/strick/6809):03589                  puls  u,y
1A6C 10AE2D           (/home/strick/6809):03590                  ldy   $0D,y
1A6F 26D8             (/home/strick/6809):03591                  bne   L162E
1A71 6AE4             (/home/strick/6809):03592         L1656    dec   ,s               if not done,
1A73 26CF             (/home/strick/6809):03593                  bne   L1629            do next letter
1A75 3261             (/home/strick/6809):03594                  leas  $01,s
1A77 16FCEC           (/home/strick/6809):03595                  lbra  L1370
                      (/home/strick/6809):03596         * print a symbol table entry
1A7A 3460             (/home/strick/6809):03597         L165F    pshs  u,y
1A7C EC29             (/home/strick/6809):03598                  ldd   $09,y            get symbol value
1A7E 17F9EA           (/home/strick/6809):03599                  lbsr  L1057            call OUT4HS
1A81 A628             (/home/strick/6809):03600                  lda   $08,y            get symbol type
1A83 338C26           (/home/strick/6809):03601                  leau  <L1691,pc      Point to table
1A86 A6C6             (/home/strick/6809):03602                  lda   a,u            Get table entry
1A88 C620             (/home/strick/6809):03603                  ldb   #C$SPAC        2nd char is a space
1A8A ED81             (/home/strick/6809):03604                  std   ,x++           Store both of them
1A8C C608             (/home/strick/6809):03605                  ldb   #$08             max symbol length
1A8E A6A0             (/home/strick/6809):03606         L1673    lda   ,y+              print symbol name
1A90 2602             (/home/strick/6809):03607                  bne   L1679
1A92 8620             (/home/strick/6809):03608                  lda   #C$SPAC          space padded
1A94 A780             (/home/strick/6809):03609         L1679    sta   ,x+
1A96 5A               (/home/strick/6809):03610                  decb
1A97 26F5             (/home/strick/6809):03611                  bne   L1673
1A99 0A3C             (/home/strick/6809):03612                  dec   <u003C
1A9B 2706             (/home/strick/6809):03613                  beq   L1688
1A9D 8620             (/home/strick/6809):03614                  lda   #C$SPAC
1A9F A780             (/home/strick/6809):03615                  sta   ,x+
1AA1 2007             (/home/strick/6809):03616                  bra   L168F
1AA3 17FCC0           (/home/strick/6809):03617         L1688    lbsr  L1370
1AA6 D63D             (/home/strick/6809):03618                  ldb   <u003D
1AA8 D73C             (/home/strick/6809):03619                  stb   <u003C
1AAA 35E0             (/home/strick/6809):03620         L168F    puls  pc,u,y
                      (/home/strick/6809):03621         
                      (/home/strick/6809):03622         * Symbol types table
1AAC 55               (/home/strick/6809):03623         L1691    fcb   'U       0:Undefined
1AAD 4C               (/home/strick/6809):03624                  fcb   'L       1:Label
1AAE 53               (/home/strick/6809):03625                  fcb   'S       2:Set
1AAF 45               (/home/strick/6809):03626                  fcb   'E       3:Equ
1AB0 44               (/home/strick/6809):03627                  fcb   'D       4:Data
                      (/home/strick/6809):03628         
                      (/home/strick/6809):03629         * parse command line args
1AB1 3430             (/home/strick/6809):03630         L1696    pshs  y,x
1AB3 17FF60           (/home/strick/6809):03631                  lbsr  L15FB            go open source file for read
1AB6 9718             (/home/strick/6809):03632                  sta   <u0018           store source path number
1AB8 17FAAB           (/home/strick/6809):03633         L169D    lbsr  L1164            find next text field
1ABB 810D             (/home/strick/6809):03634                  cmpa  #C$CR            EOL?
1ABD 272B             (/home/strick/6809):03635                  beq   L16CF            we're done
1ABF 17F753           (/home/strick/6809):03636                  lbsr  L0E33            go process option flags
1AC2 9658             (/home/strick/6809):03637                  lda   <u0058           was there an 'O' flag?
1AC4 2724             (/home/strick/6809):03638                  beq   L16CF
1AC6 A61F             (/home/strick/6809):03639                  lda   -$01,x           yes
1AC8 845F             (/home/strick/6809):03640                  anda  #$5F
1ACA 810D             (/home/strick/6809):03641                  cmpa  #C$CR
1ACC 2714             (/home/strick/6809):03642                  beq   L16C7            no name given, use default
1ACE E684             (/home/strick/6809):03643                  ldb   ,x
1AD0 10834F3D         (/home/strick/6809):03644                  cmpd  #$4F3D           "O=" object filepath option?
1AD4 260C             (/home/strick/6809):03645                  bne   L16C7
1AD6 C616             (/home/strick/6809):03646                  ldb   #22              'opt list' error
1AD8 9619             (/home/strick/6809):03647                  lda   <u0019           if object file
1ADA 2610             (/home/strick/6809):03648                  bne   L16D1            is already open
1ADC 3001             (/home/strick/6809):03649                  leax  $01,x            else get pathname
1ADE 8D0F             (/home/strick/6809):03650                  bsr   L16D4            and open it
1AE0 20D6             (/home/strick/6809):03651                  bra   L169D            resume option processing
                      (/home/strick/6809):03652         
1AE2 9619             (/home/strick/6809):03653         L16C7    lda   <u0019           if object file not yet open,
1AE4 2604             (/home/strick/6809):03654                  bne   L16CF
1AE6 AEE4             (/home/strick/6809):03655                  ldx   ,s               use default name (=source name)
1AE8 8D05             (/home/strick/6809):03656                  bsr   L16D4
1AEA 35B0             (/home/strick/6809):03657         L16CF    puls  pc,y,x
                      (/home/strick/6809):03658         
1AEC 16F93C           (/home/strick/6809):03659         L16D1    lbra  L1017
                      (/home/strick/6809):03660         * open object file
1AEF 8606             (/home/strick/6809):03661         L16D4    lda   #$06             mode=write+exec
1AF1 C62F             (/home/strick/6809):03662                  ldb   #$2F             permissions=pe pr e w r
1AF3 103F83           (/home/strick/6809):03663                  os9   I$Create
1AF6 C618             (/home/strick/6809):03664                  ldb   #24              'can't open' error
1AF8 25F2             (/home/strick/6809):03665                  bcs   L16D1            if create fails
1AFA 9719             (/home/strick/6809):03666                  sta   <u0019           store object path number
1AFC 39               (/home/strick/6809):03667                  rts
1AFD 6560F9           (/home/strick/6809):03668                  emod
     1B00             (/home/strick/6809):03669         eom      equ   *
                      (/home/strick/6809):03670                  end
