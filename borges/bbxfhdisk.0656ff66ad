                      (    bbxfhdisk.asm):00001         *******************************************
                      (    bbxfhdisk.asm):00002         ***                                     ***
                      (    bbxfhdisk.asm):00003         ***     COPYRIGHT 1988 BURKE & BURKE    ***
                      (    bbxfhdisk.asm):00004         ***     ALL RIGHTS RESERVED             ***
                      (    bbxfhdisk.asm):00005         ***                                     ***
                      (    bbxfhdisk.asm):00006         *******************************************
                      (    bbxfhdisk.asm):00007         
                      (    bbxfhdisk.asm):00008                 nam     BBXFHDISK
                      (    bbxfhdisk.asm):00009         
                      (    bbxfhdisk.asm):00010         *
                      (    bbxfhdisk.asm):00011         *   CoCo XT Hard Disk Driver  07/26/87
                      (    bbxfhdisk.asm):00012         *   (with formatting capability)
                      (    bbxfhdisk.asm):00013         *
                      (    bbxfhdisk.asm):00014         *
                      (    bbxfhdisk.asm):00015         *   For Western Digital WD1002-WX2 (or WX1) Controller.
                      (    bbxfhdisk.asm):00016         *
                      (    bbxfhdisk.asm):00017         *   This is a general purpose driver.  It can handle
                      (    bbxfhdisk.asm):00018         *   1-2 hard drives, the parameters of which are described
                      (    bbxfhdisk.asm):00019         *   in the device descriptors.  The drives may be of different
                      (    bbxfhdisk.asm):00020         *   sizes.  This version is optimized for the CoCo 2 under
                      (    bbxfhdisk.asm):00021         *   level 1, version 1 OS9.  It does not mess with the clock 
                      (    bbxfhdisk.asm):00022         *   speed -- the native speed is used.  It also verifies disk 
                      (    bbxfhdisk.asm):00023         *   writes, and uses read caching.
                      (    bbxfhdisk.asm):00024         *
                      (    bbxfhdisk.asm):00025         *   THIS VERSION CAN FORMAT THE HARD DISK!  IT ALSO
                      (    bbxfhdisk.asm):00026         *   SUPPORTS WRITE PROTECTION.
                      (    bbxfhdisk.asm):00027         *
                      (    bbxfhdisk.asm):00028         *   Chris Burke  Schaumburg, IL  07/26/87
                      (    bbxfhdisk.asm):00029         *
                      (    bbxfhdisk.asm):00030         
                      (    bbxfhdisk.asm):00031          page
                      (    bbxfhdisk.asm):00032         *
                      (    bbxfhdisk.asm):00033         *  Conditional assembly control
                      (    bbxfhdisk.asm):00034         *
                      (    bbxfhdisk.asm):00035         
     0002             (    bbxfhdisk.asm):00036         Drives  equ     2           ;Number of drives supported
                      (    bbxfhdisk.asm):00037         
     0001             (    bbxfhdisk.asm):00038         irqflg  equ     1           ;non-zero to mask interrupts during HD access
     0000             (    bbxfhdisk.asm):00039         trsflg  equ     0           ;non-zero if optimized for 4x40 disk
     0001             (    bbxfhdisk.asm):00040         cchflg  equ     1           ;non-zero if read cache supported
     0001             (    bbxfhdisk.asm):00041         vrfflg  equ     1           ;non-zero if write verification supported
     0000             (    bbxfhdisk.asm):00042         tboflg  equ     0           ;non-zero if jump to 2 MHz for block moves
     0001             (    bbxfhdisk.asm):00043         fstflg  equ     1           ;non-zero if fast transfers supported
     0001             (    bbxfhdisk.asm):00044         sysram  equ     1           ;non-zero to use system RAM for verf buffer
     0001             (    bbxfhdisk.asm):00045         sizflg  equ     1           ;non-zero to allow drives of different sizes
                      (    bbxfhdisk.asm):00046         
     0001             (    bbxfhdisk.asm):00047         fmtflg  equ     1           ;non-zero if hard formatting supported
     0000             (    bbxfhdisk.asm):00048         errflg  equ     0           ;non-zero for good error messages
     0000             (    bbxfhdisk.asm):00049         icdflg  equ     0           ;non-zero to ignore C/D status bit
     0000             (    bbxfhdisk.asm):00050         timflg  equ     0           ;non-zero to support access timer
                      (    bbxfhdisk.asm):00051         
     0001             (    bbxfhdisk.asm):00052         XLEVEL  equ     1           ;Bogus level 2 flag
                      (    bbxfhdisk.asm):00053         
     0000             (    bbxfhdisk.asm):00054         testing equ     0           ;non-zero to call driver "XD", not "HD"
                      (    bbxfhdisk.asm):00055         
                      (    bbxfhdisk.asm):00056         *
                      (    bbxfhdisk.asm):00057         *   Include the main line
                      (    bbxfhdisk.asm):00058         *
                      (    bbxfhdisk.asm):00059         
                      (    bbxfhdisk.asm):00060                 use     xtos9.src
                      (        xtos9.src):00001         *******************************************
                      (        xtos9.src):00002         ***                                     ***
                      (        xtos9.src):00003         ***     COPYRIGHT 1990 BURKE & BURKE    ***
                      (        xtos9.src):00004         ***     ALL RIGHTS RESERVED             ***
                      (        xtos9.src):00005         ***                                     ***
                      (        xtos9.src):00006         ***     COPYRIGHT 1992 BURKE & BURKE    ***
                      (        xtos9.src):00007         ***     ALL RIGHTS RESERVED             ***
                      (        xtos9.src):00008         ***                                     ***
                      (        xtos9.src):00009         *******************************************
                      (        xtos9.src):00010         
                      (        xtos9.src):00011         *
                      (        xtos9.src):00012         *  CoCo XT Hard Disk Driver  Version 2.0
                      (        xtos9.src):00013         *
                      (        xtos9.src):00014         *  For Western Digital WD1002-WX1 (or 27X) Controller.
                      (        xtos9.src):00015         *
                      (        xtos9.src):00016         *  The controller can only handle 512 bytes per sector,
                      (        xtos9.src):00017         *  so these routines must synthesize 2 logical 256 byte
                      (        xtos9.src):00018         *  sectors from each physical 512 byte sector.  This
                      (        xtos9.src):00019         *  increases the time it takes to read or write a sector.
                      (        xtos9.src):00020         *
                      (        xtos9.src):00021         *  To counteract this, the 2nd half of each "even" sector
                      (        xtos9.src):00022         *  is retained during a read.  If the next read accesses the
                      (        xtos9.src):00023         *  "odd" half, the sector contents is read from the "verify"
                      (        xtos9.src):00024         *  buffer instead of the hard disk.
                      (        xtos9.src):00025         *
                      (        xtos9.src):00026         *  This version can be optimized for a single ST-225 hard disk,
                      (        xtos9.src):00027         *  via conditional assembly.  Several other parameters can also
                      (        xtos9.src):00028         *  be controlled by conditional assembly.
                      (        xtos9.src):00029         *
                      (        xtos9.src):00030         *  Conditional assembly control:
                      (        xtos9.src):00031         *
                      (        xtos9.src):00032         *   Drives              ;Number of drives supported (1-2)
                      (        xtos9.src):00033         *
                      (        xtos9.src):00034         *   irqflg              ;non-zero to mask IRQ during disk access.
                      (        xtos9.src):00035         *   fmtflg              ;non-zero if hard formatting supported
                      (        xtos9.src):00036         *   fstflg              ;non-zero if fast transfers supported
                      (        xtos9.src):00037         *   cchflg              ;non-zero if read cache supported
                      (        xtos9.src):00038         *   vrfflg              ;non-zero if write verification supported
                      (        xtos9.src):00039         *   tboflg              ;non-zero if jump to 2 MHz for block moves
                      (        xtos9.src):00040         *   errflg              ;non-zero for good error messages
                      (        xtos9.src):00041         *   icdflg              ;non-zero to ignore C/D status bit
                      (        xtos9.src):00042         *   trsflg              ;non-zero if optimized for 32 SPT, 4 hd disks
                      (        xtos9.src):00043         *   sysram              ;non-zero to use system RAM for verf buffer
                      (        xtos9.src):00044         *   sizflg              ;non-zero if drives may be different sizes
                      (        xtos9.src):00045         *
                      (        xtos9.src):00046         *   XLEVEL              ;Special level 2 flag -- to use L1 assembler
                      (        xtos9.src):00047         *
                      (        xtos9.src):00048         *  Chris Burke  Schaumburg, IL  10/14/87
                      (        xtos9.src):00049         *
                      (        xtos9.src):00050         *   Modification History
                      (        xtos9.src):00051         *   --------------------
                      (        xtos9.src):00052         *
                      (        xtos9.src):00053         *   Date        Who     Description
                      (        xtos9.src):00054         *   --------    ---     -------------------------------------
                      (        xtos9.src):00055         *   11/20/87    CJB     Fixed bug in PARK.
                      (        xtos9.src):00056         *   12/23/87    CJB     Corrected table size and location
                      (        xtos9.src):00057         *                       equates for L2 compatibility.  
                      (        xtos9.src):00058         *                       Deleted support for Level 1, Version 
                      (        xtos9.src):00059         *                       1.X OS9.
                      (        xtos9.src):00060         *   12/27/87    CJB     Added code to grab parameters from
                      (        xtos9.src):00061         *                       device descriptor if not obtained
                      (        xtos9.src):00062         *                       by INIT.
                      (        xtos9.src):00063         *   01/28/88    CJB     Added support for any slot.
                      (        xtos9.src):00064         *   02/07/88    CJB     Changed FORMAT to reset drive parameters
                      (        xtos9.src):00065         *                       Added speedy read cache algorithm.
                      (        xtos9.src):00066         *                       Eliminated DIVA, DIVY, etc.
                      (        xtos9.src):00067         *   02/23/88    CJB     Recoded for TRSFLG
                      (        xtos9.src):00068         *   03/03/88    CJB     Changed module names to BBhdisk etc.
                      (        xtos9.src):00069         *   04/17/88    cjb     Modified INIT to call WaitIdl before
                      (        xtos9.src):00070         *                        shutting off controller interrupts & DMA
                      (        xtos9.src):00071         *                       Fixed bugs in INIT which confused path
                      (        xtos9.src):00072         *                        descriptor and device descriptor pointers
                      (        xtos9.src):00073         *   04/21/88    cjb     Added code to disable I/O retries after
                      (        xtos9.src):00074         *                        formatting hard drive.
                      (        xtos9.src):00075         *   06/12/88    cjb     Changed to call WaitId2 instead of WaitIdl
                      (        xtos9.src):00076         *   07/01/88    cjb     Changed revision from 2 to 3
                      (        xtos9.src):00077         *   10/10/88    cjb     Modified for format error recovery
                      (        xtos9.src):00078         *   05/18/90    cjb     Modified copyright
                      (        xtos9.src):00079         *                       Added support for up to 4 drives
                      (        xtos9.src):00080         *   07/07/91    cjb     Rev 2.5 (allow disabling of recalibration)
                      (        xtos9.src):00081         *   04/15/92    cjb     Rev 2.6 (speed-ups, bug fix for DBLRDD)
                      (        xtos9.src):00082         *
                      (        xtos9.src):00083         
                      (        xtos9.src):00084          page
                      (        xtos9.src):00085         *
                      (        xtos9.src):00086         *  Equates
                      (        xtos9.src):00087         *
                      (        xtos9.src):00088         
                      (        xtos9.src):00089          ifp1
                      (        xtos9.src):00090                 use     defsfile
     0002             (         defsfile):00001         Level   equ     2
                      (         defsfile):00002                 use     os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
     0080             (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
     00FE             (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0004                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
002A                  (            os9.d):00820         DefIOSiz       EQU       12
002A                  (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
002A                  (            os9.d):00824         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00832         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00835         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00849                        RMB       $40-.               unused
002A                  (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
002A                  (            os9.d):00855         SysState       EQU       %10000000
002A                  (            os9.d):00856         TimSleep       EQU       %01000000
002A                  (            os9.d):00857         TimOut         EQU       %00100000
002A                  (            os9.d):00858         ImgChg         EQU       %00010000
002A                  (            os9.d):00859         Condem         EQU       %00000010
002A                  (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
     0010             (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0000                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00877         P$User         RMB       2                   User Index
000A                  (            os9.d):00878         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00879         P$Age          RMB       1                   Age
000C                  (            os9.d):00880         P$State        RMB       1                   Status
000D                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00892                        RMB       $20-.               unused
0020                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00905         P$Alarm        RMB       6
00C9                  (            os9.d):00906                        RMB       $200-.              Local stack
     0200             (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
     0080             (            os9.d):00913         SysState       EQU       %10000000
     0040             (            os9.d):00914         TimSleep       EQU       %01000000
     0020             (            os9.d):00915         TimOut         EQU       %00100000
     0010             (            os9.d):00916         ImgChg         EQU       %00010000
     0008             (            os9.d):00917         Suspend        EQU       %00001000
     0002             (            os9.d):00918         Condem         EQU       %00000010
     0001             (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     000D             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     000B             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
0005                  (            os9.d):01040         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01041         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01044         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01045         R$X            EQU       6                   X Index register
0005                  (            os9.d):01046         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01047         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01048         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
     0003             (            os9.d):01051         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01052         R$X            EQU       4                   X Index register
     0006             (            os9.d):01053         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01054         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01055         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
00FF                  (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
00FF                  (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
     003B             (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
     ED00             (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
00FF                  (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (         defsfile):00003                 use     rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (        xtos9.src):00091                 use     wx2.equ
                      (          wx2.equ):00001             opt -l
                      (          wx2.equ):00002         *
                      (          wx2.equ):00003         *   Hardware equates for Western Digital WX1 and WX2 controllers
                      (          wx2.equ):00004         *
                      (          wx2.equ):00005         *   Revised 4/21/88
                      (          wx2.equ):00006         *
                      (          wx2.equ):00007         
                      (          wx2.equ):00008         *  Disk Controller Addresses
     FF50             (          wx2.equ):00009         HDDATA equ $FF50    ;read or write data here
     FF51             (          wx2.equ):00010         HDSTAT equ $FF51    ;read status here
     FF52             (          wx2.equ):00011         HDCONF equ $FF52    ;read parallel input lines here
                      (          wx2.equ):00012         
     FF51             (          wx2.equ):00013         HDRSET equ $FF51    ;write here to reset controller
     FF52             (          wx2.equ):00014         HDATTN equ $FF52    ;write here to get controller's attention
     FF53             (          wx2.equ):00015         HDMASK equ $FF53    ;write here to control DMA and IRQ (both off)
                      (          wx2.equ):00016         
                      (          wx2.equ):00017         *  Command op-codes
     0000             (          wx2.equ):00018         WX$TST  equ     0       ;Test drive ready
     0001             (          wx2.equ):00019         WX$TK0  equ     1       ;Recalibrate to track 0
     0003             (          wx2.equ):00020         WX$STS  equ     3       ;Status of last operation
     0004             (          wx2.equ):00021         WX$FMT  equ     4       ;Format drive
     0005             (          wx2.equ):00022         WX$VFY  equ     5       ;Verify sectors
     0006             (          wx2.equ):00023         WX$FTK  equ     6       ;Format track
     0007             (          wx2.equ):00024         WX$FBT  equ     7       ;Format bad track
     0008             (          wx2.equ):00025         WX$RDD  equ     8       ;Read sector(s)
     000A             (          wx2.equ):00026         WX$WRT  equ     $0A     ;Write sector(s)
     000B             (          wx2.equ):00027         WX$SIK  equ     $0B     ;Seek
     000C             (          wx2.equ):00028         WX$INI  equ     $0C     ;Initialize drive parameters
     000D             (          wx2.equ):00029         WX$ECC  equ     $0D     ;Read ECC burst length
     000E             (          wx2.equ):00030         WX$RBF  equ     $0E     ;Read sector buffer
     000F             (          wx2.equ):00031         WX$WBF  equ     $0F     ;Write sector buffer
                      (          wx2.equ):00032         
     00E0             (          wx2.equ):00033         WX$SBD  equ     $E0     ;Sector buffer diagnostic
     00E3             (          wx2.equ):00034         WX$DRD  equ     $E3     ;Drive diagnostic
     00E4             (          wx2.equ):00035         WX$CTD  equ     $E4     ;Controller diagnostic
                      (          wx2.equ):00036         
     00E5             (          wx2.equ):00037         WX$RDL  equ     $E5     ;Read long
     00E6             (          wx2.equ):00038         WX$WRL  equ     $E6     ;Write long
                      (          wx2.equ):00039         
                      (          wx2.equ):00040         *   Bogus "special init" command
                      (          wx2.equ):00041         
     00FF             (          wx2.equ):00042         WX$XIN  equ     $FF     ;Init w/ special parameters
                      (          wx2.equ):00043         
                      (          wx2.equ):00044         *   Error codes
     0000             (          wx2.equ):00045         WE$AOK  equ     $00     ;No error
     0002             (          wx2.equ):00046         WE$NSC  equ     $02     ;"Seek complete" not received
     0003             (          wx2.equ):00047         WE$WRF  equ     $03     ;Write fault
     0004             (          wx2.equ):00048         WE$NRD  equ     $04     ;Drive not ready
     0006             (          wx2.equ):00049         WE$NT0  equ     $06     ;Track 0 not found
     0008             (          wx2.equ):00050         WE$DSS  equ     $08     ;Drive still seeking
     0011             (          wx2.equ):00051         WE$UER  equ     $11     ;Uncorrectable data error
     0012             (          wx2.equ):00052         WE$DAM  equ     $12     ;Data address mark not found
     0015             (          wx2.equ):00053         WE$SIK  equ     $15     ;Seek error
     0018             (          wx2.equ):00054         WE$CER  equ     $18     ;Correctable data error occured
     0019             (          wx2.equ):00055         WE$BTK  equ     $19     ;Track is flagged as bad
     0020             (          wx2.equ):00056         WE$CMD  equ     $20     ;Invalid command
     0021             (          wx2.equ):00057         WE$ISA  equ     $21     ;Illegal sector address
     0030             (          wx2.equ):00058         WE$SBF  equ     $30     ;Sector buffer diagnostic failed
     0031             (          wx2.equ):00059         WE$ROM  equ     $31     ;Controller ROM checksum error
     0032             (          wx2.equ):00060         WE$ECC  equ     $32     ;ECC polynomial hardware failure
                      (          wx2.equ):00061         
                      (          wx2.equ):00062             opt l
                      (          wx2.equ):00063         
                      (        xtos9.src):00092          endc
                      (        xtos9.src):00093         
                      (        xtos9.src):00094         *  Index into device descriptor (using PD.XXX)
                      (        xtos9.src):00095         
     FFF2             (        xtos9.src):00096         DD.BASE equ M$DTYP-PD.OPT
     0025             (        xtos9.src):00097         DD.HDSK equ $25              ;Start of extra hard disk stuff
                      (        xtos9.src):00098         
                      (        xtos9.src):00099         *  Multi-PAK Addresses
     FF7F             (        xtos9.src):00100         MPAK equ $FF7F
                      (        xtos9.src):00101         
                      (        xtos9.src):00102         *
                      (        xtos9.src):00103         *   Bogus equates for Level 2
                      (        xtos9.src):00104         *
                      (        xtos9.src):00105         
     008A             (        xtos9.src):00106         D.DMARq2    equ     $008A       ;Bogus Level 2 D.DMAReq
     0050             (        xtos9.src):00107         D.PROC2     equ     $0050       ;Bogus Level 2 D.PROC
     0026             (        xtos9.src):00108         DRVMEM2     equ     $26         ;Level 2 drive table size
     000F             (        xtos9.src):00109         DRVBEG2     equ     $0F         ;Level 2 start of drive tables
                      (        xtos9.src):00110         
                      (        xtos9.src):00111         *
                      (        xtos9.src):00112         *   Bogus equates for Level 1
                      (        xtos9.src):00113         *
                      (        xtos9.src):00114         
     006A             (        xtos9.src):00115         D.DMARq1    equ     $006A       ;Bogus Level 1 D.DMAReq
     004B             (        xtos9.src):00116         D.PROC1     equ     $004B       ;Bogus Level 1 D.PROC
     0018             (        xtos9.src):00117         DRVMEM1     equ     $18         ;Level 1 drive table size
     0007             (        xtos9.src):00118         DRVBEG1     equ     $07         ;Level 1 start of drive tables
                      (        xtos9.src):00119         
                      (        xtos9.src):00120             ifne    XLEVEL-1
0026                  (        xtos9.src):00121         DMASEM  set     D.DMARq2        ;Level 2 DMA stuff (multi-pak)
0026                  (        xtos9.src):00122         DPROC   set     D.PROC2         ;Level 2 process control stuff
0026                  (        xtos9.src):00123         XDrvBeg set     DRVBEG2
0026                  (        xtos9.src):00124         XDrvMen set     DRVMEM2
                      (        xtos9.src):00125         
                      (        xtos9.src):00126             else
     006A             (        xtos9.src):00127         DMASEM  set     D.DMARq1        ;Level 1 DMA stuff (multi-pak)
     004B             (        xtos9.src):00128         DPROC   set     D.PROC1         ;Level 1 process control stuff
     0007             (        xtos9.src):00129         XDrvBeg set     DRVBEG1
     0018             (        xtos9.src):00130         XDrvMen set     DRVMEM1
                      (        xtos9.src):00131             endc
                      (        xtos9.src):00132         
                      (        xtos9.src):00133          page
                      (        xtos9.src):00134         *
                      (        xtos9.src):00135         *   Module Header
                      (        xtos9.src):00136         *
     0002             (        xtos9.src):00137         verson  equ     2
0000 87CD0656000EE182 (        xtos9.src):00138                 mod     cchend,cchnam,drivr+objct,reent+verson,JmpTbl,endmem
     88003001D6
000D FF               (        xtos9.src):00139                 fcb     DIR.+SHARE.+PEXEC.+PREAD.+PWRIT.+EXEC.+READ.+WRITE.
                      (        xtos9.src):00140         
                      (        xtos9.src):00141         *  Dynamic module name generation
                      (        xtos9.src):00142         
     000E             (        xtos9.src):00143         cchnam  equ     *
                      (        xtos9.src):00144         
                      (        xtos9.src):00145             ifeq  testing
000E 4242             (        xtos9.src):00146                 fcc     "BB"        ; (normal name)
                      (        xtos9.src):00147             else
                      (        xtos9.src):00148                 fcc     "BK"        ; (special name)
                      (        xtos9.src):00149             endc
                      (        xtos9.src):00150         
                      (        xtos9.src):00151             ifeq    (XLEVEL-1)      ;If level 1,
                      (        xtos9.src):00152                 ifne    irqflg      ;If Level 1, Version 1 OS9
0010 58               (        xtos9.src):00153                     fcc /X/
                      (        xtos9.src):00154                 else                ;If Level 1, Version 2 OS9
                      (        xtos9.src):00155                     fcc /1/
                      (        xtos9.src):00156                 endc
                      (        xtos9.src):00157             endc
                      (        xtos9.src):00158         
                      (        xtos9.src):00159             ifne    fmtflg          ;If this driver can format hard disk,
0011 46               (        xtos9.src):00160                 fcc     /F/
                      (        xtos9.src):00161             endc
                      (        xtos9.src):00162         
                      (        xtos9.src):00163             ifne    tboflg          ;If 2MHz transfers supported,
                      (        xtos9.src):00164                 fcc     /T/
                      (        xtos9.src):00165             endc
                      (        xtos9.src):00166         
                      (        xtos9.src):00167             ifne    trsflg          ;If "terse" version
                      (        xtos9.src):00168                 fcs     /hd/        ;NOTE -- set MSB of last byte
                      (        xtos9.src):00169             else                    ;If "normal" version
0012 68646973EB       (        xtos9.src):00170                 fcs     /hdisk/     ;NOTE -- set MSB of last byte
                      (        xtos9.src):00171             endc
                      (        xtos9.src):00172         
0017 06               (        xtos9.src):00173                 fcb     $06         ;revision - 2.6
                      (        xtos9.src):00174         
                      (        xtos9.src):00175         *   Copyright notice
                      (        xtos9.src):00176         
0018 434F50522E203139 (        xtos9.src):00177                 fcc     /COPR. 1992 BURKE & BURKE/
     3932204255524B45
     2026204255524B45
                      (        xtos9.src):00178         
                      (        xtos9.src):00179          page
                      (        xtos9.src):00180         *
                      (        xtos9.src):00181         *  Static Storage
                      (        xtos9.src):00182         *
                      (        xtos9.src):00183         
                      (        xtos9.src):00184             use     hdvars.src
                      (       hdvars.src):00001         *  COPYRIGHT 1987 BURKE & BURKE
                      (       hdvars.src):00002         *  COPYRIGHT 1992 BURKE & BURKE
                      (       hdvars.src):00003         *  ALL RIGHTS RESERVED
                      (       hdvars.src):00004         *
                      (       hdvars.src):00005         *  Variables for all CoCo XT hard disk drivers.
                      (       hdvars.src):00006         *
                      (       hdvars.src):00007         *  Chris Burke  Schaumburg, IL
                      (       hdvars.src):00008         *
                      (       hdvars.src):00009         *   Modification History
                      (       hdvars.src):00010         *   --------------------
                      (       hdvars.src):00011         *
                      (       hdvars.src):00012         *   Date        Who     Description
                      (       hdvars.src):00013         *   --------    ---     ---------------------------------------
                      (       hdvars.src):00014         *   10/01/87    CJB     Added PCCYL variable.
                      (       hdvars.src):00015         *                       Added unique drive parameters for each drive
                      (       hdvars.src):00016         *   12/20/87    CJB     Added park track copied from DD for each drive
                      (       hdvars.src):00017         *   12/23/87    CJB     Added level-dependent equates for use w/ 2 drives.
                      (       hdvars.src):00018         *   01/28/88    CJB     Added area to preserve active slot 100%
                      (       hdvars.src):00019         *   02/08/88    CJB     Eliminated DIVA, DIVY; changed read cache
                      (       hdvars.src):00020         *   04/15/92    CJB     Added RETRYEN (should have been there already!?)
                      (       hdvars.src):00021         *
                      (       hdvars.src):00022         
                      (       hdvars.src):00023         *
                      (       hdvars.src):00024         *  Static Storage
                      (       hdvars.src):00025         *
                      (       hdvars.src):00026             org     XDrvBeg             ;(level dependent)
                      (       hdvars.src):00027         
                      (       hdvars.src):00028         *   The controller handles up to 2 drives.
                      (       hdvars.src):00029         *   The size of the drive table differs between 
                      (       hdvars.src):00030         *   level 1 and level 2.
                      (       hdvars.src):00031         
0007.                 (       hdvars.src):00032         DRVTBL  rmb     XDrvMen*Drives
                      (       hdvars.src):00033         
                      (       hdvars.src):00034             ifne    (Drives-1)          ;If 2 drives,
0037.                 (       hdvars.src):00035         ACTDRV  rmb     2
0039.                 (       hdvars.src):00036         PRVDRV  rmb     1               ;Previous drive #
                      (       hdvars.src):00037             endc
                      (       hdvars.src):00038         
003A.                 (       hdvars.src):00039         DRVSEM  rmb     1               ;New drive semaphore
                      (       hdvars.src):00040         
                      (       hdvars.src):00041         *  Register image for disk controller
                      (       hdvars.src):00042         *
                      (       hdvars.src):00043         *  SDHREG  00D0HHHH
                      (       hdvars.src):00044         *  HICYL   MM0SSSSS
                      (       hdvars.src):00045         *  LOWCYL  LLLLLLLL
                      (       hdvars.src):00046         *  SECCNT  NNNNNNNN
                      (       hdvars.src):00047         *
                      (       hdvars.src):00048         *  D = drive #
                      (       hdvars.src):00049         *  H = head #
                      (       hdvars.src):00050         *  M = MSB's of cylinder #
                      (       hdvars.src):00051         *  S = sector # on cylinder
                      (       hdvars.src):00052         *  L = LSB's of cylinder #
                      (       hdvars.src):00053         *  N = sector count or interleave
                      (       hdvars.src):00054         
     003B             (       hdvars.src):00055         IMAGE equ .
                      (       hdvars.src):00056         
003B.                 (       hdvars.src):00057         SDHREG  RMB     1       ;Drive and head number
003C.                 (       hdvars.src):00058         HICYL   RMB     1       ;High cylinder # and sector number
003D.                 (       hdvars.src):00059         LOWCYL  RMB     1       ;Low cylinder number
003E.                 (       hdvars.src):00060         SECCNT  RMB     1       ;Sector count (interleave factor for format)
003F.                 (       hdvars.src):00061         OPTION  RMB     1       ;Options / step rate
                      (       hdvars.src):00062         
                      (       hdvars.src):00063             ifne    cchflg      ;If read cache supported,
                      (       hdvars.src):00064         
                      (       hdvars.src):00065         *  Sector number for pre-read
                      (       hdvars.src):00066         
0040.                 (       hdvars.src):00067         OLDLSN  rmb     3       ;Old LSN -- this + 1 in buffer if BFRFLG
0043.                 (       hdvars.src):00068         BFRFLG  rmb     1       ;$FF = pre-read sector is in verify buffer
                      (       hdvars.src):00069         
                      (       hdvars.src):00070             endc
                      (       hdvars.src):00071         
                      (       hdvars.src):00072         *  Miscellaneous flags
                      (       hdvars.src):00073         
0044.                 (       hdvars.src):00074         Temp    rmb     2    ;Scratch variable
0046.                 (       hdvars.src):00075         SECNUM  rmb     1    ;Used for sector splitting
0047.                 (       hdvars.src):00076         PSECNM  rmb     1    ;Previous sector number (used for pre-read feature)
0048.                 (       hdvars.src):00077         OLDSLT  rmb     1       ;Old MPAK slot # (to leave it as we found it)
                      (       hdvars.src):00078         
                      (       hdvars.src):00079         *   Variables for park track location and pre-comp.
                      (       hdvars.src):00080         
     0049             (       hdvars.src):00081         OBSTART equ     .   ;Base of option variables
                      (       hdvars.src):00082         
                      (       hdvars.src):00083         *   Drive #0 variables
                      (       hdvars.src):00084         
0049.                 (       hdvars.src):00085         PCCYL   rmb     1   ;precomp cylinder / 4
004A.                 (       hdvars.src):00086         PRKLSN  rmb     3   ;Park LSN -- sector 0, head 0 of park track
                      (       hdvars.src):00087         
     0004             (       hdvars.src):00088         OBSIZE  equ     (.-OBSTART)
                      (       hdvars.src):00089         
                      (       hdvars.src):00090              ifne    (Drives-1)
                      (       hdvars.src):00091         
                      (       hdvars.src):00092         *   Drive #1 variables
                      (       hdvars.src):00093         
004D.                 (       hdvars.src):00094         PCCYL1  rmb     1   ;precomp cylinder / 4
004E.                 (       hdvars.src):00095         PRKLSN1 rmb     3
                      (       hdvars.src):00096         
                      (       hdvars.src):00097              endc
                      (       hdvars.src):00098         
                      (       hdvars.src):00099         *   Value of stack pointer, in case we have to recover from an
                      (       hdvars.src):00100         *   error.  This is used by CMEXEC and it's subroutines.
                      (       hdvars.src):00101         
0051.                 (       hdvars.src):00102         AbtStk  rmb     2   ;Saved stack pointer
0053.                 (       hdvars.src):00103         RetryEn rmb     1   ;non-zero if hard disk hardware retries are enabled
0054.                 (       hdvars.src):00104         ErrHCyl rmb     2   ;store clyinder number of formatting error here
                      (       hdvars.src):00105         
                      (       hdvars.src):00106         *   Sector buffer for read caching, write verification,
                      (       hdvars.src):00107         *   and pre-reading of adjacent "write" sectors.
                      (       hdvars.src):00108         *
                      (       hdvars.src):00109         *   Note that this buffer is shared between both drives, so
                      (       hdvars.src):00110         *   the read cache is invalidated by switching drives.
                      (       hdvars.src):00111         
0056.                 (       hdvars.src):00112         VRFBUF  rmb     256
     0156             (       hdvars.src):00113         VB.END  equ     .
                      (       hdvars.src):00114         
                      (       hdvars.src):00115         *   Reserve some room for the stack
                      (       hdvars.src):00116         
0156.                 (       hdvars.src):00117                 rmb     128         ;Stack
                      (       hdvars.src):00118         
     01D6             (       hdvars.src):00119         endmem equ .
                      (       hdvars.src):00120         
                      (        xtos9.src):00185         
                      (        xtos9.src):00186          page
                      (        xtos9.src):00187         *
                      (        xtos9.src):00188         *  Jump table
                      (        xtos9.src):00189         *
0030 16002C           (        xtos9.src):00190         JmpTbl  lbra    INIT
0033 1600BB           (        xtos9.src):00191                 lbra    READ
0036 160143           (        xtos9.src):00192                 lbra    WRITE
0039 1600B1           (        xtos9.src):00193                 lbra    GETSTA
003C 1601C2           (        xtos9.src):00194                 lbra    SETSTA
003F 1600A6           (        xtos9.src):00195                 lbra    TERM
                      (        xtos9.src):00196         
                      (        xtos9.src):00197             ifne    sizflg              ;If drives may be different sizes,
                      (        xtos9.src):00198             page
                      (        xtos9.src):00199         *
                      (        xtos9.src):00200         *   Post-initialization for drives.
                      (        xtos9.src):00201         *
                      (        xtos9.src):00202         *   If we ever call a driver routine (other than INIT)
                      (        xtos9.src):00203         *   with PARK LSN = 0, we know this drive has not been
                      (        xtos9.src):00204         *   initialized.
                      (        xtos9.src):00205         *
                      (        xtos9.src):00206         *   Enter w/ Reg-Y = path descriptor pointer,
                      (        xtos9.src):00207         *            Reg-U = static storage
                      (        xtos9.src):00208         *
                      (        xtos9.src):00209         *   Must save A and B:X as well as Y, U.
                      (        xtos9.src):00210         *
                      (        xtos9.src):00211         *   Returns carry set if error initializing drive
                      (        xtos9.src):00212         *
0042 3436             (        xtos9.src):00213         PostIni pshs    Y,X,D
                      (        xtos9.src):00214         
0044 E6A821           (        xtos9.src):00215                 ldb     PD.DRV,Y
0047 170591           (        xtos9.src):00216                 lbsr    GOBPtr              ;Point Y to extra variables
004A 5F               (        xtos9.src):00217                 clrb                        ;Force no carry (success)
004B E621             (        xtos9.src):00218                 ldb     (PRKLSN-OBSTART+0),Y
004D EA22             (        xtos9.src):00219                 orb     (PRKLSN-OBSTART+1),Y
004F 260C             (        xtos9.src):00220                  bne    PSTI0               ; (branch if OK)
                      (        xtos9.src):00221         
                      (        xtos9.src):00222         *   Perform drive info and controller intialization
                      (        xtos9.src):00223         
0051 10AE64           (        xtos9.src):00224                 ldy     4,S                 ;Get path pointer
0054 10AE23           (        xtos9.src):00225                 ldy     PD.DEV,Y            ; get device table pointer
0057 10AE24           (        xtos9.src):00226                 ldy     V$DESC,Y            ;  get device descriptor pointer
005A 170065           (        xtos9.src):00227                 lbsr    CtlInit             ;Call routine to init. controller
                      (        xtos9.src):00228         
                      (        xtos9.src):00229         *   Done initiailizing this drive.
                      (        xtos9.src):00230         
005D 35B6             (        xtos9.src):00231         PSTI0   puls  D,X,Y,PC
                      (        xtos9.src):00232         
                      (        xtos9.src):00233             endc
                      (        xtos9.src):00234         
                      (        xtos9.src):00235          page
                      (        xtos9.src):00236         *
                      (        xtos9.src):00237         *   Initialize driver routines
                      (        xtos9.src):00238         *
                      (        xtos9.src):00239         *   Reg-Y points to device descriptor
                      (        xtos9.src):00240         *
005F 3420             (        xtos9.src):00241         INIT    pshs    y
                      (        xtos9.src):00242         
                      (        xtos9.src):00243         *   This section calls routines that expect a *PATH* descriptor
                      (        xtos9.src):00244         *   pointer in Reg-Y
                      (        xtos9.src):00245         
0061 3132             (        xtos9.src):00246                 leay    DD.BASE,Y   ;Make Y look like path descriptor to get slot
                      (        xtos9.src):00247         
0063 1705AB           (        xtos9.src):00248                 lbsr    Semfor      ;Wait, then select HD controller.
0066 B7FF51           (        xtos9.src):00249                 sta     >HDRSET     ;Reset controller
0069 170287           (        xtos9.src):00250                 lbsr    WaitId2     ;Sleep -- wait for controller to reset
                      (        xtos9.src):00251         *** Extra call to give WD1004 time to reset
006C 170284           (        xtos9.src):00252                 lbsr    WaitId2     ;Sleep -- wait for controller to reset
                      (        xtos9.src):00253         *** ENDK
006F 10AEE4           (        xtos9.src):00254                 ldy     ,S          ;Restore y -> device descriptor
                      (        xtos9.src):00255         
                      (        xtos9.src):00256         *   Set up controller for non-interrupt, non-DMA operation
                      (        xtos9.src):00257         
0072 7FFF53           (        xtos9.src):00258                 clr     >HDMASK     ;Turn off controller interrupts and DMA
                      (        xtos9.src):00259         
                      (        xtos9.src):00260         *   Set # of drives we can handle
                      (        xtos9.src):00261         
0075 8602             (        xtos9.src):00262                 lda     #Drives
0077 A746             (        xtos9.src):00263                 sta     V.NDRV,U
                      (        xtos9.src):00264         
                      (        xtos9.src):00265         *   Set up drive switching info
                      (        xtos9.src):00266         
                      (        xtos9.src):00267             ifne    (Drives-1)
0079 CCFFFF           (        xtos9.src):00268                 ldd     #$FFFF
007C EDC839           (        xtos9.src):00269                 std     prvdrv,u    ; (set PRVDRV unknown, DRVSEM for new drive)
007F EDC837           (        xtos9.src):00270                 std     actdrv,u    ;Pointer to active drive table
                      (        xtos9.src):00271             else
                      (        xtos9.src):00272                 lda     #$FF
                      (        xtos9.src):00273                 sta     DRVSEM,U
                      (        xtos9.src):00274             endc
                      (        xtos9.src):00275         
                      (        xtos9.src):00276         *   Enable hardware I/O retries.  These will be disabled by a FORMAT
                      (        xtos9.src):00277         *   setstat, and will be re-enabled by an INIT call or a reboot.
                      (        xtos9.src):00278         *   The main use of this is to disable retries during disk formatting.
                      (        xtos9.src):00279         
0082 6FC853           (        xtos9.src):00280                 clr     RetryEn,U   ;Enable hardware retries
                      (        xtos9.src):00281         
                      (        xtos9.src):00282         *   Program controller w/ drive parameters.  
                      (        xtos9.src):00283         *   Y points to device descriptor.
                      (        xtos9.src):00284         
0085 8D3B             (        xtos9.src):00285                 bsr     CtlInit     ; (also clears BFRFLG,U and changes Y)
0087 2510             (        xtos9.src):00286                  bcs    INIT9       ; (abort if error)
                      (        xtos9.src):00287         
                      (        xtos9.src):00288         *  Initialize the drive tables for all drives
                      (        xtos9.src):00289         
0089 CCFFFF           (        xtos9.src):00290                 ldd     #(-1)               ;Current track is unknown
008C E7C81C           (        xtos9.src):00291                 stb     XDrvBeg+V.TRAK,U
008F ED47             (        xtos9.src):00292                 std     XDrvBeg+DD.TOT,U    ;Set total sectors non-zero to allow LSN0
                      (        xtos9.src):00293             ifne    (Drives-1)
0091 E7C834           (        xtos9.src):00294                 stb     XDrvBeg+XDrvMen*1+V.TRAK,U    ; (do all drives)
0094 EDC81F           (        xtos9.src):00295                 std     XDrvBeg+XDrvMen*1+DD.TOT,U
                      (        xtos9.src):00296               ifge  (Drives-3)
                      (        xtos9.src):00297                 stb     XDrvBeg+XDrvMen*2+V.TRAK,U    ; (do all drives)
                      (        xtos9.src):00298                 std     XDrvBeg+XDrvMen*2+DD.TOT,U
                      (        xtos9.src):00299               endc
                      (        xtos9.src):00300               ifge  (Drives-4)
                      (        xtos9.src):00301                 stb     XDrvBeg+XDrvMen*3+V.TRAK,U    ; (do all drives)
                      (        xtos9.src):00302                 std     XDrvBeg+XDrvMen*3+DD.TOT,U
                      (        xtos9.src):00303               endc
                      (        xtos9.src):00304             endc
                      (        xtos9.src):00305         
                      (        xtos9.src):00306         *   Reg-Y points to bogus path descriptor (courtesy of CtlInit).
                      (        xtos9.src):00307         *   Wait for drive to be ready.  
                      (        xtos9.src):00308         *
                      (        xtos9.src):00309         *   Note that WaiDrv returns Reg-B=0 and carry clear to OK, 
                      (        xtos9.src):00310         *   else reg-B = E$NotRdy and carry set.
                      (        xtos9.src):00311         
0097 8D09             (        xtos9.src):00312                 bsr     WaiDrv          ;Note:  WaiDrv requires *PATH* descriptor
                      (        xtos9.src):00313         
                      (        xtos9.src):00314         *  Error hook
0099 3520             (        xtos9.src):00315         INIT9   puls    Y               ;restore saved Y register (DD pointer)
009B 2001             (        xtos9.src):00316                 bra     HDXIT
                      (        xtos9.src):00317         
                      (        xtos9.src):00318         *  Generic error-free exit
009D 5F               (        xtos9.src):00319         OKXIT   clrb 
                      (        xtos9.src):00320         
                      (        xtos9.src):00321         *
                      (        xtos9.src):00322         *  Generic exit.  Restore MULTI-PAK to
                      (        xtos9.src):00323         *  slot #4 so floppy disk works, and release semaphore
                      (        xtos9.src):00324         *
                      (        xtos9.src):00325         *   Preserves CC and B
                      (        xtos9.src):00326         *
                      (        xtos9.src):00327         *   RELEASE also clears the V.WAKE flag.
                      (        xtos9.src):00328         *
009E 17055A           (        xtos9.src):00329         HDXIT   lbsr    Release
00A1 39               (        xtos9.src):00330                 rts 
                      (        xtos9.src):00331         
                      (        xtos9.src):00332         *
                      (        xtos9.src):00333         *   Wait for drive ready
                      (        xtos9.src):00334         *   Assumes reg-Y points to real or bogus path
                      (        xtos9.src):00335         *   descriptor (for drive # and step rate)
                      (        xtos9.src):00336         *
00A2 3436             (        xtos9.src):00337         WaiDrv  pshs    y,x,a,b
                      (        xtos9.src):00338         
00A4 6FE2             (        xtos9.src):00339                 clr     ,-s                 ;Time out
                      (        xtos9.src):00340         
00A6 8600             (        xtos9.src):00341         WaiDr2  lda     #WX$TST     ;Test drive ready
                      (        xtos9.src):00342         
                      (        xtos9.src):00343             ifne    (Drives-1)              ;If more than 1 drive
00A8 E6A821           (        xtos9.src):00344                 ldb     PD.DRV,Y            ;get drive #
                      (        xtos9.src):00345             endc
                      (        xtos9.src):00346         
00AB 1701EB           (        xtos9.src):00347                 lbsr    DrvCmd
00AE 240E             (        xtos9.src):00348                  bcc    WaiDr3              ; (branch if drive ready)
                      (        xtos9.src):00349         
00B0 6AE4             (        xtos9.src):00350                 dec     ,s                  ;Decrement timeout
00B2 2705             (        xtos9.src):00351                  beq    WaiDr4              ; (branch if timeout)
                      (        xtos9.src):00352         
00B4 17056A           (        xtos9.src):00353                 lbsr    Snooze              ;Give drive some time
00B7 20ED             (        xtos9.src):00354                 bra     WaiDr2              ; then retry.
                      (        xtos9.src):00355         
                      (        xtos9.src):00356         *   Timeout
                      (        xtos9.src):00357         
00B9 53               (        xtos9.src):00358         WaiDr4  comb
00BA C6F6             (        xtos9.src):00359                 ldb     #E$NotRdy           ;Drive not ready
00BC E762             (        xtos9.src):00360                 stb     1+1,S
                      (        xtos9.src):00361         
                      (        xtos9.src):00362         *   Carry clear if ready, else carry set
                      (        xtos9.src):00363         
00BE 3261             (        xtos9.src):00364         WaiDr3  leas    1,S                 ;Discard counter
00C0 35B6             (        xtos9.src):00365                 puls    a,b,x,y,pc
                      (        xtos9.src):00366         
                      (        xtos9.src):00367         *
                      (        xtos9.src):00368         *   Get extra bytes from this drive's descriptor.
                      (        xtos9.src):00369         *   Send them to the controller.  
                      (        xtos9.src):00370         *
                      (        xtos9.src):00371         *   Enter w/ 
                      (        xtos9.src):00372         *   Reg-Y = Dev Desc pointer, and 
                      (        xtos9.src):00373         *   Reg-U = static storage pointer.
                      (        xtos9.src):00374         *
                      (        xtos9.src):00375         *   Note that if there is a 2nd drive with different
                      (        xtos9.src):00376         *   parameters, they must be obtained in a different
                      (        xtos9.src):00377         *   manner.
                      (        xtos9.src):00378         *
                      (        xtos9.src):00379         *   Modifies Reg-Y to make it look like a bogus *PATH*
                      (        xtos9.src):00380         *   descriptor
                      (        xtos9.src):00381         *
                      (        xtos9.src):00382         
     00C2             (        xtos9.src):00383         CtlInit equ     *
                      (        xtos9.src):00384         
                      (        xtos9.src):00385             ifne    cchflg              ;If read cache,
00C2 6FC843           (        xtos9.src):00386                 clr     BFRFLG,U            ;Buffer contents invalid
                      (        xtos9.src):00387             endc
                      (        xtos9.src):00388         
00C5 8D0B             (        xtos9.src):00389                 bsr     GetXtra             ;Call subroutine DDPTR in Y.
                      (        xtos9.src):00390         
                      (        xtos9.src):00391         *   Send drive parameters to controller.  Reg-Y points to device
                      (        xtos9.src):00392         *   descriptor, but we adjust it to look like a path descriptor.
                      (        xtos9.src):00393         
00C7 3132             (        xtos9.src):00394                 leay    DD.BASE,Y           ;Make Y look like path descriptor
                      (        xtos9.src):00395         
00C9 860C             (        xtos9.src):00396                 lda     #WX$INI             ;Command to send drive parameters
                      (        xtos9.src):00397         
                      (        xtos9.src):00398             ifne    (Drives-1)              ;If more than 1 drive
00CB E6A821           (        xtos9.src):00399                 ldb     PD.DRV,Y            ;get drive #
                      (        xtos9.src):00400             endc
                      (        xtos9.src):00401         
00CE 1701C8           (        xtos9.src):00402                 lbsr    DrvCmd              ;Set up drive parameters
00D1 39               (        xtos9.src):00403                 rts
                      (        xtos9.src):00404         
                      (        xtos9.src):00405             page
                      (        xtos9.src):00406         *
                      (        xtos9.src):00407         *   Copy precomp cylinder and park LSN from descriptor 
                      (        xtos9.src):00408         *   (also gives max. tracks!)
                      (        xtos9.src):00409         *
                      (        xtos9.src):00410         
00D2 ECA825           (        xtos9.src):00411         GetXtra ldd     DD.HDSK+(PCCYL-OBSTART),Y       ;get prec, MSB of park LSN
00D5 AEA827           (        xtos9.src):00412                 ldx     DD.HDSK+(PRKLSN+1-OBSTART),Y    ;get rest of park LSN
                      (        xtos9.src):00413              ifne   (Drives-1)          ; If 2 drives,
                      (        xtos9.src):00414               ifne  sizflg              ;  of different sizes,
00D8 3436             (        xtos9.src):00415                 pshs    Y,X,D
00DA E6A813           (        xtos9.src):00416                 ldb     DD.BASE+PD.DRV,Y    ;get drive #
00DD 1704FB           (        xtos9.src):00417                 lbsr    GOBPtr              ;get dest. pointer to Y
00E0 3516             (        xtos9.src):00418                 puls    D,X
00E2 EDA4             (        xtos9.src):00419                 std     (PCCYL-OBSTART),Y
00E4 AF22             (        xtos9.src):00420                 stx     (PRKLSN+1-OBSTART),Y
00E6 35A0             (        xtos9.src):00421                 puls    Y,PC                ;Recover DD ptr and exit
                      (        xtos9.src):00422               else                      ;  of same size,
                      (        xtos9.src):00423                 std     PCCYL,U
                      (        xtos9.src):00424                 stx     (PRKLSN+1),U        ;set up both tables at once
                      (        xtos9.src):00425                 std     (PCCYL+OBSIZE),U
                      (        xtos9.src):00426                 stx     (PRKLSN+1+OBSIZE),U
                      (        xtos9.src):00427                 rts
                      (        xtos9.src):00428               endc
                      (        xtos9.src):00429              else                       ; If 1 drive,
                      (        xtos9.src):00430                 std     PCCYL,U
                      (        xtos9.src):00431                 stx     (PRKLSN+1),U
                      (        xtos9.src):00432                 rts
                      (        xtos9.src):00433              endc
                      (        xtos9.src):00434         
                      (        xtos9.src):00435             page
                      (        xtos9.src):00436         *
                      (        xtos9.src):00437         *   Terminate hard disk processing
                      (        xtos9.src):00438         *
00E8 170526           (        xtos9.src):00439         TERM    lbsr    Semfor      ;Wait on semaphore, select controller
00EB 20B0             (        xtos9.src):00440                 bra     OKXIT       ;Clear semaphore and successful exit
                      (        xtos9.src):00441         
                      (        xtos9.src):00442         *
                      (        xtos9.src):00443         *  Dummy routine for GETSTA
                      (        xtos9.src):00444         *
00ED 53               (        xtos9.src):00445         GETSTA  comb                ;Set carry
00EE C6D0             (        xtos9.src):00446                 ldb     #E$UnkSVC
00F0 39               (        xtos9.src):00447                 rts 
                      (        xtos9.src):00448         
                      (        xtos9.src):00449          page
                      (        xtos9.src):00450         *
                      (        xtos9.src):00451         *   Read a sector from disk
                      (        xtos9.src):00452         *
                      (        xtos9.src):00453         *   LSN in B:X.  If it is 1+OLDLSN,
                      (        xtos9.src):00454         *   and the drive # is right, and the
                      (        xtos9.src):00455         *   read cache is full, don't even bother
                      (        xtos9.src):00456         *   doing address computations
                      (        xtos9.src):00457         *
                      (        xtos9.src):00458         *   There are always an even number of sectors
                      (        xtos9.src):00459         *   per track, so if the new LSN is the old LSN
                      (        xtos9.src):00460         *   with MSB set, we have a winner!  We always
                      (        xtos9.src):00461         *   store the old LSN with MSB set.
                      (        xtos9.src):00462         *
                      (        xtos9.src):00463         
     00F1             (        xtos9.src):00464         READ    equ     *
                      (        xtos9.src):00465         
                      (        xtos9.src):00466             ifne    cchflg      ;If read cache,
                      (        xtos9.src):00467         
00F1 3414             (        xtos9.src):00468                 pshs    X,B         ;Save LSN
00F3 1704FE           (        xtos9.src):00469                 lbsr    SavSlt      ;Save old slot #, but don't change yet
                      (        xtos9.src):00470         
00F6 6DC843           (        xtos9.src):00471                 tst     BFRFLG,U    ;Is buffer valid?
00F9 2728             (        xtos9.src):00472                  beq    READXX      ; (branch if no luck)
                      (        xtos9.src):00473              ifne   (Drives-1)
00FB A6A821           (        xtos9.src):00474                 lda     PD.DRV,Y
00FE A1C839           (        xtos9.src):00475                 cmpa    PRVDRV,U
0101 2620             (        xtos9.src):00476                  bne    READXX      ; (branch if drive different)
                      (        xtos9.src):00477              endc
0103 3514             (        xtos9.src):00478                 puls    B,X
0105 ACC841           (        xtos9.src):00479                 cmpx    OLDLSN+1,U
0108 261B             (        xtos9.src):00480                  bne    READXY
010A E1C840           (        xtos9.src):00481                 cmpb    OLDLSN+0,U
010D 2616             (        xtos9.src):00482                  bne    READXY
                      (        xtos9.src):00483         
                      (        xtos9.src):00484         *   Use verify buffer for sector data -- no read necessary!
                      (        xtos9.src):00485         *   The OLDLSN and PRVDRV variables are already set right.
                      (        xtos9.src):00486         
010F 3470             (        xtos9.src):00487                 pshs    u,y,x
                      (        xtos9.src):00488         
0111 C680             (        xtos9.src):00489                 ldb     #128
0113 AE28             (        xtos9.src):00490                 ldx     PD.BUF,Y        ;Get destination pointer
0115 31C856           (        xtos9.src):00491                 leay    vrfbuf,U        ;Get source pointer
                      (        xtos9.src):00492         
0118 EEA1             (        xtos9.src):00493         DR0     ldu     ,y++
011A EF81             (        xtos9.src):00494                 stu     ,x++
011C 5A               (        xtos9.src):00495                 decb
011D 26F9             (        xtos9.src):00496                  bne    DR0
                      (        xtos9.src):00497         
011F 3570             (        xtos9.src):00498                 puls    x,y,u
0121 2049             (        xtos9.src):00499                 bra     OKXIT3          ;Successful exit
                      (        xtos9.src):00500         
                      (        xtos9.src):00501         *   Not a cache read.  Restore LSN
                      (        xtos9.src):00502         
0123 3514             (        xtos9.src):00503         READXX  puls    B,X
                      (        xtos9.src):00504         
                      (        xtos9.src):00505         *   Save LSN in case we can do a cache read next time.
                      (        xtos9.src):00506         *   We always set the LSB of the saved LSN; the BFRFLG
                      (        xtos9.src):00507         *   will be set only if the actual LSB is 0!
                      (        xtos9.src):00508         
0125 6FC843           (        xtos9.src):00509         READXY  clr     BFRFLG,U        ;Assume future cache read invalid
0128 E7C840           (        xtos9.src):00510                 stb     OLDLSN+0,U      ;Save LSN for next time
                      (        xtos9.src):00511         
012B 3404             (        xtos9.src):00512                 pshs    B
012D 1F10             (        xtos9.src):00513                 tfr     X,D
012F C501             (        xtos9.src):00514                 bitb    #%00000001      ;If LSB is 0, cache read valid next time
0131 2603             (        xtos9.src):00515                  bne    READXZ
                      (        xtos9.src):00516         
0133 63C843           (        xtos9.src):00517                 com     BFRFLG,U        ; (cache read next time)
                      (        xtos9.src):00518         
0136 CA01             (        xtos9.src):00519         READXZ  orb     #%00000001      ; (always set LSB in possible match)
0138 EDC841           (        xtos9.src):00520                 std     OLDLSN+1,U
013B 3504             (        xtos9.src):00521                 puls    B
                      (        xtos9.src):00522         
                      (        xtos9.src):00523             endc
                      (        xtos9.src):00524         
                      (        xtos9.src):00525         *   Perform normal read -- LSN in B:X
                      (        xtos9.src):00526         
013D 1704D1           (        xtos9.src):00527                 lbsr    Semfor      ;Wait, select hard disk controller slot
                      (        xtos9.src):00528         
                      (        xtos9.src):00529             ifne    sizflg      ;If drives can be different sizes,
0140 17FEFF           (        xtos9.src):00530                 lbsr    PostIni
0143 2523             (        xtos9.src):00531                  bcs    HDXIT3
                      (        xtos9.src):00532             endc
                      (        xtos9.src):00533         
                      (        xtos9.src):00534         *   Check for LSN0
                      (        xtos9.src):00535         
0145 8C0000           (        xtos9.src):00536                 cmpx    #0          ;Check for LSN 0 -- SPECIAL
0148 261C             (        xtos9.src):00537                  bne    NotLS0
014A 5D               (        xtos9.src):00538                 tstb 
014B 2619             (        xtos9.src):00539                  bne    NotLS0
                      (        xtos9.src):00540         
                      (        xtos9.src):00541         **   Wants to read LSN 0.
                      (        xtos9.src):00542         **   See if LSN 0 has already been read once.
                      (        xtos9.src):00543         **
                      (        xtos9.src):00544         **   We must use PD.DTB,Y instead of ACTDRV,U because
                      (        xtos9.src):00545         **   SELDRV has not been called yet.
                      (        xtos9.src):00546         **
                      (        xtos9.src):00547         **   Actually, we still read -- we just don't update
                      (        xtos9.src):00548         **   the drive table
                      (        xtos9.src):00549         *
                      (        xtos9.src):00550         *        pshs    X,B         ;Save LSN
                      (        xtos9.src):00551         *    ifne    (Drives-1)          ;If 2 drives,
                      (        xtos9.src):00552         *        ldx     PD.DTB,Y    ;Point to drive table
                      (        xtos9.src):00553         *    else
                      (        xtos9.src):00554         *        leax    DRVTBL,U    ;Point to drive table
                      (        xtos9.src):00555         *    endc
                      (        xtos9.src):00556         *        ldd     DD.TOT,x    ;Get total sectors
                      (        xtos9.src):00557         *        cmpd    #-1         ; -1 is a special value set by INIT routine
                      (        xtos9.src):00558         *        puls    B,X         ;Restore LSN (always $000000)
                      (        xtos9.src):00559         *         bne    NotLS0      ;If not -1, LSN 0 already read; no special stuff
                      (        xtos9.src):00560         
                      (        xtos9.src):00561         *   Special treatment for LSN0 -- refresh drive table when done
                      (        xtos9.src):00562         
014D 8D20             (        xtos9.src):00563                 bsr     DoRead
014F 2517             (        xtos9.src):00564                  bcs    HDXIT3
                      (        xtos9.src):00565         
0151 AE28             (        xtos9.src):00566                 ldx     PD.BUF,y    ;Get buffer address
0153 3430             (        xtos9.src):00567                 pshs    Y,X         ;Save old buffer and device descriptor ptrs
                      (        xtos9.src):00568         
                      (        xtos9.src):00569         *   Note that the SELDRV routine, called by DOREAD, sets up
                      (        xtos9.src):00570         *   the drive table pointer in actdrv,U if there are 2 drives.
                      (        xtos9.src):00571         
                      (        xtos9.src):00572             ifne    (Drives-1)          ;If 2 drives,
0155 10AEC837         (        xtos9.src):00573                 ldy     actdrv,u
                      (        xtos9.src):00574             else
                      (        xtos9.src):00575                 leay    DRVTBL,U
                      (        xtos9.src):00576             endc
                      (        xtos9.src):00577         
0159 C614             (        xtos9.src):00578                 ldb     #DD.SIZ-1
                      (        xtos9.src):00579         
                      (        xtos9.src):00580         *  Update drive table from buffer
                      (        xtos9.src):00581         
015B A685             (        xtos9.src):00582         RCPY1   lda     b,x
015D A7A5             (        xtos9.src):00583                 sta     b,y
015F 5A               (        xtos9.src):00584                 decb 
0160 2AF9             (        xtos9.src):00585                  bpl    RCPY1
                      (        xtos9.src):00586         
0162 3530             (        xtos9.src):00587                 puls    y,x
0164 2006             (        xtos9.src):00588                 bra     OKXIT3
                      (        xtos9.src):00589         
                      (        xtos9.src):00590         *  Read (not LSN0)
                      (        xtos9.src):00591         
0166 8D07             (        xtos9.src):00592         NotLS0  bsr     DoRead
0168 1025FF32         (        xtos9.src):00593         HDXIT3   lbcs   HDXIT
                      (        xtos9.src):00594         
016C 16FF2E           (        xtos9.src):00595         OKXIT3  lbra    OKXIT
                      (        xtos9.src):00596         
                      (        xtos9.src):00597          page
                      (        xtos9.src):00598         *
                      (        xtos9.src):00599         *  Utility to read a sector
                      (        xtos9.src):00600         *
016F 17032D           (        xtos9.src):00601         DoRead  lbsr    SETUP
0172 2507             (        xtos9.src):00602                  bcs    DORXIT
                      (        xtos9.src):00603         
                      (        xtos9.src):00604         *  Entry point for VERIFY
0174 AE28             (        xtos9.src):00605         VrfRdd  ldx     PD.BUF,Y    ;Get buffer address
                      (        xtos9.src):00606         
                      (        xtos9.src):00607         *  General read sector
0176 8608             (        xtos9.src):00608         GetSec  lda     #WX$RDD        ;Create "READ SINGLE SECTOR" command
0178 17017E           (        xtos9.src):00609                 lbsr    CMEXEC
017B 39               (        xtos9.src):00610         DORXIT  rts 
                      (        xtos9.src):00611         
                      (        xtos9.src):00612          page
                      (        xtos9.src):00613         *
                      (        xtos9.src):00614         *  Write a sector to disk.
                      (        xtos9.src):00615         *
                      (        xtos9.src):00616         *  This routine must pre-read the sector in order to
                      (        xtos9.src):00617         *  pack 2 logical sectors into 1 physical sector.
                      (        xtos9.src):00618         *  This invalidates any data that might have been pre-read
                      (        xtos9.src):00619         *  into the verify buffer.
                      (        xtos9.src):00620         *
017C 170492           (        xtos9.src):00621         WRITE   lbsr    Semfor      ;Wait, then select HD controller
                      (        xtos9.src):00622         
                      (        xtos9.src):00623             ifne    sizflg      ;If drives can be different sizes,
017F 17FEC0           (        xtos9.src):00624                 lbsr    PostIni
0182 25E4             (        xtos9.src):00625                  bcs    HDXIT3
                      (        xtos9.src):00626             endc
                      (        xtos9.src):00627         
                      (        xtos9.src):00628         *  Pre-read the "other" half of the sector to the verify buffer
                      (        xtos9.src):00629         
0184 3414             (        xtos9.src):00630                 pshs    X,B        ;Save LSN
0186 170316           (        xtos9.src):00631                 lbsr    SETUP      ;Set up head, track, sector #'s
0189 8D23             (        xtos9.src):00632                 bsr     flphlf      ;flip LSB of SECNUM
                      (        xtos9.src):00633         
                      (        xtos9.src):00634             ifne    cchflg      ;If read cache supported
018B 6FC843           (        xtos9.src):00635                 clr     BFRFLG,u    ;2nd half of sector should not be saved
                      (        xtos9.src):00636             endc
                      (        xtos9.src):00637         
018E 30C856           (        xtos9.src):00638                 leax    vrfbuf,U    ;Use verify buffer
0191 8DE3             (        xtos9.src):00639                 bsr     GetSec      ; (re-use code)
                      (        xtos9.src):00640         
0193 3514             (        xtos9.src):00641                 puls    X,B
0195 25D1             (        xtos9.src):00642                  bcs    HDXIT3      ; branch to abort if pre-read fails
                      (        xtos9.src):00643         
0197 8D15             (        xtos9.src):00644                 bsr     flphlf       ;fix up sector #
                      (        xtos9.src):00645         
                      (        xtos9.src):00646         *  Perform the write.  The "other" half of the physical sector
                      (        xtos9.src):00647         *  has been pre-read into the verify buffer.
                      (        xtos9.src):00648         
0199 3414             (        xtos9.src):00649                 pshs    x,b       ;save LSN
019B 8D1A             (        xtos9.src):00650                 bsr     DoWrit
019D 3514             (        xtos9.src):00651                 puls    x,b
019F 25C7             (        xtos9.src):00652                  bcs    HDXIT3
                      (        xtos9.src):00653         
                      (        xtos9.src):00654             ifne    vrfflg              ;If verify enabled,
                      (        xtos9.src):00655         
01A1 6DA828           (        xtos9.src):00656                 tst     PD.VFY,Y   ;Verify writes?
01A4 26C6             (        xtos9.src):00657                  bne    OKXIT3
                      (        xtos9.src):00658         
                      (        xtos9.src):00659         *  Verify the write
01A6 8D1C             (        xtos9.src):00660                 bsr     VERIFY
01A8 24C2             (        xtos9.src):00661                  bcc    OKXIT3
                      (        xtos9.src):00662         
                      (        xtos9.src):00663         *  Verify failed; carry set
01AA C6F5             (        xtos9.src):00664                 ldb     #E$Write
01AC 20BA             (        xtos9.src):00665                 bra     HDXIT3
                      (        xtos9.src):00666         
                      (        xtos9.src):00667             else
                      (        xtos9.src):00668         
                      (        xtos9.src):00669                 bra    OKXIT3
                      (        xtos9.src):00670         
                      (        xtos9.src):00671             endc
                      (        xtos9.src):00672         
                      (        xtos9.src):00673         *
                      (        xtos9.src):00674         *  Flip LSB of SECNUM.  This is used to pre-read the half of the sector
                      (        xtos9.src):00675         *  that should not be changed by a write.
                      (        xtos9.src):00676         *
01AE A6C846           (        xtos9.src):00677         flphlf  lda     secnum,u
01B1 8801             (        xtos9.src):00678                 EORA    #1
01B3 A7C846           (        xtos9.src):00679                 sta     secnum,u
01B6 39               (        xtos9.src):00680                 rts
                      (        xtos9.src):00681         
                      (        xtos9.src):00682          page
                      (        xtos9.src):00683         *
                      (        xtos9.src):00684         *  Utility to write a sector
                      (        xtos9.src):00685         *
01B7 1702E5           (        xtos9.src):00686         DoWRIT  lbsr    SETUP
01BA 2507             (        xtos9.src):00687                  bcs    DOWXIT
                      (        xtos9.src):00688         
01BC AE28             (        xtos9.src):00689                 ldx     PD.BUF,Y        ;Get buffer pointer
01BE 860A             (        xtos9.src):00690                 lda     #WX$WRT         ;Create "WRITE SINGLE SECTOR" command
01C0 170136           (        xtos9.src):00691                 lbsr    CMEXEC
                      (        xtos9.src):00692         
01C3 39               (        xtos9.src):00693         DOWXIT  rts 
                      (        xtos9.src):00694         
                      (        xtos9.src):00695             ifne    vrfflg          ;If verify supported,
                      (        xtos9.src):00696         
                      (        xtos9.src):00697         *
                      (        xtos9.src):00698         *  Verify last sector written
                      (        xtos9.src):00699         *
                      (        xtos9.src):00700         *  Don't copy unused part of sector to verify buffer
                      (        xtos9.src):00701         *
01C4 3416             (        xtos9.src):00702         VERIFY  pshs    x,b,a
                      (        xtos9.src):00703         
01C6 AE28             (        xtos9.src):00704                 ldx     PD.BUF,y    ;Save buffer pointer
01C8 3410             (        xtos9.src):00705                 pshs    x
                      (        xtos9.src):00706         
01CA 30C856           (        xtos9.src):00707                 leax    vrfbuf,U
01CD AF28             (        xtos9.src):00708                 stx     PD.BUF,y    ;Force dummy buffer pointer
01CF AE64             (        xtos9.src):00709                 ldx     4,s         ;Recover LSN
                      (        xtos9.src):00710         
01D1 1702CB           (        xtos9.src):00711                 lbsr    setup
01D4 2506             (        xtos9.src):00712                  bcs    VF1
                      (        xtos9.src):00713         
                      (        xtos9.src):00714             ifne    cchflg          ;If read cache supported,
01D6 6FC843           (        xtos9.src):00715                 clr     BFRFLG,u    ;Mark don't save 2nd half of sector
                      (        xtos9.src):00716             endc
                      (        xtos9.src):00717         
01D9 17FF98           (        xtos9.src):00718                 lbsr    VrfRdd     ;Actual read done here
                      (        xtos9.src):00719         
01DC 3510             (        xtos9.src):00720         VF1     puls    x
01DE AF28             (        xtos9.src):00721                 stx     PD.BUF,y    ;Restore buffer pointer
01E0 251D             (        xtos9.src):00722                  bcs    VRFXIT
                      (        xtos9.src):00723         
                      (        xtos9.src):00724         *  Look only at every 8th byte to speed up the verify
01E2 8620             (        xtos9.src):00725                 lda     #(256/8)    ;Iteration count
01E4 3462             (        xtos9.src):00726                 pshs    u,y,a
                      (        xtos9.src):00727         
01E6 31C856           (        xtos9.src):00728                 leay    vrfbuf,U    ;Point at sector buffer
01E9 1F13             (        xtos9.src):00729                 tfr     x,u
                      (        xtos9.src):00730         
                      (        xtos9.src):00731         *  Compare the data read back to the data written
01EB AEC4             (        xtos9.src):00732         VRF1    ldx     ,u
01ED ACA4             (        xtos9.src):00733                 cmpx    ,y
01EF 260A             (        xtos9.src):00734                  bne    VRFERR
                      (        xtos9.src):00735         
01F1 3348             (        xtos9.src):00736                 leau    8,u         ;next byte
01F3 3128             (        xtos9.src):00737                 leay    8,y
01F5 6AE4             (        xtos9.src):00738                 dec     ,s
01F7 26F2             (        xtos9.src):00739                  bne    VRF1
                      (        xtos9.src):00740         
01F9 2002             (        xtos9.src):00741                 bra     VRFOK
                      (        xtos9.src):00742         
                      (        xtos9.src):00743         *  Error exit
01FB 1A01             (        xtos9.src):00744         VRFERR  orcc    #$01
                      (        xtos9.src):00745         
                      (        xtos9.src):00746         *  Deallocate temporaries
01FD 3562             (        xtos9.src):00747         VRFOK   puls    u,y,a
                      (        xtos9.src):00748         
                      (        xtos9.src):00749         *  Generic verify exit
01FF 3596             (        xtos9.src):00750         VRFXIT  puls    a,b,x,PC
                      (        xtos9.src):00751         
                      (        xtos9.src):00752             endc
                      (        xtos9.src):00753         
                      (        xtos9.src):00754          page
                      (        xtos9.src):00755         *
                      (        xtos9.src):00756         *   Set Status.
                      (        xtos9.src):00757         *
                      (        xtos9.src):00758         *   Reg-Y has path descriptor, and Reg-A has status code.
                      (        xtos9.src):00759         *
0201 17040D           (        xtos9.src):00760         SETSTA  lbsr    Semfor      ;Wait, then select HD controller
                      (        xtos9.src):00761         
                      (        xtos9.src):00762             ifne    sizflg      ;If drives can be different sizes,
0204 17FE3B           (        xtos9.src):00763                 lbsr    PostIni
0207 1025FE93         (        xtos9.src):00764                  lbcs   HDXIT
                      (        xtos9.src):00765             endc
                      (        xtos9.src):00766         
020B 17038E           (        xtos9.src):00767                 lbsr    SELDRV
                      (        xtos9.src):00768         
020E AE26             (        xtos9.src):00769                 ldx     PD.RGS,y    ;Point at register stack
0210 E602             (        xtos9.src):00770                 ldb     R$B,x       ;Recover service code
                      (        xtos9.src):00771         
0212 C103             (        xtos9.src):00772                 cmpb    #SS.Reset
0214 2605             (        xtos9.src):00773                  bne    SS1
                      (        xtos9.src):00774         
0216 170422           (        xtos9.src):00775                 lbsr    SEEKT0
0219 2013             (        xtos9.src):00776                 bra     SSXIT
                      (        xtos9.src):00777         
     021B             (        xtos9.src):00778         SS1     equ     *
                      (        xtos9.src):00779         
                      (        xtos9.src):00780             ifne    fmtflg              ;If hard formatting supported,
021B C104             (        xtos9.src):00781                 cmpb    #SS.WTrk
021D 2604             (        xtos9.src):00782                  bne    SS2
                      (        xtos9.src):00783         
021F 8D1E             (        xtos9.src):00784                 bsr     FmtTrk
0221 200B             (        xtos9.src):00785                 bra     SSXIT
                      (        xtos9.src):00786             endc
                      (        xtos9.src):00787         
0223 C10C             (        xtos9.src):00788         SS2     cmpb    #SS.SQD
0225 2604             (        xtos9.src):00789                  bne    SS9
                      (        xtos9.src):00790         
0227 8D0C             (        xtos9.src):00791                 bsr     PwrDwn
0229 2003             (        xtos9.src):00792                 bra     SSXIT
                      (        xtos9.src):00793         
                      (        xtos9.src):00794         *  Error - unrecognized SETSTA code
                      (        xtos9.src):00795         
022B 53               (        xtos9.src):00796         SS9     comb 
022C C6D0             (        xtos9.src):00797                 ldb     #E$UnkSvc
                      (        xtos9.src):00798         
                      (        xtos9.src):00799         *  Generic exit.  Return error if carry set.
                      (        xtos9.src):00800         
022E 1025FE6C         (        xtos9.src):00801         SSXIT   lbcs    HDXIT
0232 16FE68           (        xtos9.src):00802                 lbra    OKXIT
                      (        xtos9.src):00803         
                      (        xtos9.src):00804          page
                      (        xtos9.src):00805         *
                      (        xtos9.src):00806         *  Power-down (park) disk
                      (        xtos9.src):00807         *
     0235             (        xtos9.src):00808         PwrDwn  equ     *
                      (        xtos9.src):00809         
                      (        xtos9.src):00810         *   Get park LSN to B:X
                      (        xtos9.src):00811         
                      (        xtos9.src):00812             ifne    (Drives-1)      ;If 2 drives,
0235 170259           (        xtos9.src):00813                 lbsr    GtPkLSN         ;Call routine to get park LSN to B:X
                      (        xtos9.src):00814             else
                      (        xtos9.src):00815                 ldb     PRKLSN+0,U
                      (        xtos9.src):00816                 ldx     PRKLSN+1,U
                      (        xtos9.src):00817             endc
                      (        xtos9.src):00818         
                      (        xtos9.src):00819         *   Seek to this LSN
                      (        xtos9.src):00820         
0238 170264           (        xtos9.src):00821         PwrDn2  lbsr    SETUP
023B 1703F7           (        xtos9.src):00822                 lbsr    SEEK            ;Park head at last track
023E 39               (        xtos9.src):00823                 rts 
                      (        xtos9.src):00824         
                      (        xtos9.src):00825             ifne    fmtflg          ;If hard format supported
                      (        xtos9.src):00826         
                      (        xtos9.src):00827         *
                      (        xtos9.src):00828         *   Format a track.
                      (        xtos9.src):00829         *
                      (        xtos9.src):00830         *   Now we format one track at a time.
                      (        xtos9.src):00831         *
                      (        xtos9.src):00832         *   At entry Reg-X points to the register packet,
                      (        xtos9.src):00833         *   and Reg-Y points to the path descriptor
                      (        xtos9.src):00834         *
023F 8680             (        xtos9.src):00835         FmtTrk  lda     #$80            ;Disable hardware retries
0241 A7C853           (        xtos9.src):00836                 sta     RetryEn,U
                      (        xtos9.src):00837         
0244 EC08             (        xtos9.src):00838                 ldd     R$U,x           ;Get track number -- must be zero.
0246 10830000         (        xtos9.src):00839                 cmpd    #0
024A 2606             (        xtos9.src):00840                  bne    FMTXIT
                      (        xtos9.src):00841         
024C EC06             (        xtos9.src):00842                 ldd     R$Y,x           ;Check side/density -- MSB must be zero
024E 8100             (        xtos9.src):00843                 cmpa    #0
0250 2702             (        xtos9.src):00844                  beq    FMT1
                      (        xtos9.src):00845         
                      (        xtos9.src):00846         *  Ignore repeated calls, returning success
0252 5F               (        xtos9.src):00847         FMTXIT  clrb 
0253 39               (        xtos9.src):00848                 rts 
                      (        xtos9.src):00849         
                      (        xtos9.src):00850         *  Perform the format if not write protected
0254 3470             (        xtos9.src):00851         FMT1    pshs    u,y,x
                      (        xtos9.src):00852         
                      (        xtos9.src):00853         *  Proceed, disk not write protected
     0256             (        xtos9.src):00854         FMT11   equ     *
                      (        xtos9.src):00855         
                      (        xtos9.src):00856         *   Set up reduced drive characteristics (only legal tracks)
                      (        xtos9.src):00857         
0256 86FF             (        xtos9.src):00858                 lda     #WX$XIN     ;Bogus command to init. special parameters
0258 17009E           (        xtos9.src):00859                 lbsr    CmExec
025B 2531             (        xtos9.src):00860                  bcs    FMTERR
                      (        xtos9.src):00861         
                      (        xtos9.src):00862         *  Initialize sector buffer
                      (        xtos9.src):00863         
025D 860F             (        xtos9.src):00864                 lda     #WX$WBF
025F 170097           (        xtos9.src):00865                 lbsr    CmExec
0262 252A             (        xtos9.src):00866                  bcs    FMTERR
                      (        xtos9.src):00867         
                      (        xtos9.src):00868         *   Begin formatting at track 0
                      (        xtos9.src):00869         
0264 CCC0FF           (        xtos9.src):00870                 ldd     #$C0FF          ;Set initial cylinder to (-1)
0267 EDC854           (        xtos9.src):00871                 std     ERRHCYL,u
                      (        xtos9.src):00872         
                      (        xtos9.src):00873         *  Set up starting track for format
                      (        xtos9.src):00874         
026A ECC854           (        xtos9.src):00875         FMT2    ldd     ERRHCYL,u       ;Use last good cylinder
026D 84C0             (        xtos9.src):00876                 anda    #%11000000
026F 5C               (        xtos9.src):00877                 incb
0270 2602             (        xtos9.src):00878                  bne    FMT3
0272 8B40             (        xtos9.src):00879                 adda    #%01000000
0274 EDC83C           (        xtos9.src):00880         FMT3    std     hicyl,U         ; (set track number, sector 0)
                      (        xtos9.src):00881         
                      (        xtos9.src):00882         *        clr     lowcyl,u        ;Clear LOWCYL
                      (        xtos9.src):00883         *        clr     hicyl,u         ;Clear HICYL (and sector #)
                      (        xtos9.src):00884         
                      (        xtos9.src):00885             ifne    (Drives-1)          ;If multiple drives,
0277 A6A821           (        xtos9.src):00886                 lda     PD.DRV,Y        ;Set up drive #
027A C620             (        xtos9.src):00887                 ldb     #32
027C 3D               (        xtos9.src):00888                 mul
027D E7C83B           (        xtos9.src):00889                 stb     sdhreg,u        ;Select correct drive, clear head number
                      (        xtos9.src):00890             else
                      (        xtos9.src):00891                 clr     sdhreg,u
                      (        xtos9.src):00892             endc
                      (        xtos9.src):00893         
0280 A6A82D           (        xtos9.src):00894                 lda     PD.ILV,Y        ;Set interleave factor
0283 44               (        xtos9.src):00895                 lsra                    ; / 2 since physical sectors are 2X
0284 A7C83E           (        xtos9.src):00896                 sta     seccnt,u
                      (        xtos9.src):00897         
0287 8604             (        xtos9.src):00898                 lda     #WX$FMT         ;Command to FORMAT ENTIRE DRIVE
                      (        xtos9.src):00899         *        lda     #WX$FTK         ;Command to FORMAT TRACK
0289 17006D           (        xtos9.src):00900                 lbsr    CmExec
028C 25DC             (        xtos9.src):00901                  bcs    FMT2            ;Try next track if error
                      (        xtos9.src):00902         
                      (        xtos9.src):00903         *   Return error code in B, C set or no error, C clear
                      (        xtos9.src):00904         
028E 3405             (        xtos9.src):00905         FMTERR  pshs    b,cc            ;Stack error status
                      (        xtos9.src):00906         
                      (        xtos9.src):00907         *   Set up correct drive characteristics (park track allowed)
                      (        xtos9.src):00908         
0290 860C             (        xtos9.src):00909                 lda     #WX$INI     ;Init. original parameters
0292 170064           (        xtos9.src):00910                 lbsr    CmExec
                      (        xtos9.src):00911         
                      (        xtos9.src):00912         *   Get back error status
                      (        xtos9.src):00913         
0295 3505             (        xtos9.src):00914                 puls    cc,b
                      (        xtos9.src):00915         
                      (        xtos9.src):00916         *  End of format routine
                      (        xtos9.src):00917         
0297 35F0             (        xtos9.src):00918         FMTEND  puls    x,y,u,PC
                      (        xtos9.src):00919         
                      (        xtos9.src):00920             endc
                      (        xtos9.src):00921         
                      (        xtos9.src):00922         *
                      (        xtos9.src):00923         *   End of main line of XTOS9.SRC.
                      (        xtos9.src):00924         *   "USE" files follow.
                      (        xtos9.src):00925         *
                      (        xtos9.src):00926         
                      (        xtos9.src):00927          page
                      (        xtos9.src):00928         *
                      (        xtos9.src):00929         *   Include routines to issue command to controller
                      (        xtos9.src):00930         *   and return completion status.
                      (        xtos9.src):00931         *
                      (        xtos9.src):00932         
                      (        xtos9.src):00933                 use     hdcmd.src
                      (        hdcmd.src):00001         *******************************************
                      (        hdcmd.src):00002         ***                                     ***
                      (        hdcmd.src):00003         ***     HDCMD.SRC                       ***
                      (        hdcmd.src):00004         ***                                     ***
                      (        hdcmd.src):00005         ***     COPYRIGHT BURKE & BURKE 1987    ***
                      (        hdcmd.src):00006         ***     ALL RIGHTS RESERVED             ***
                      (        hdcmd.src):00007         ***                                     ***
                      (        hdcmd.src):00008         ***     COPYRIGHT BURKE & BURKE 1992    ***
                      (        hdcmd.src):00009         ***     ALL RIGHTS RESERVED             ***
                      (        hdcmd.src):00010         ***                                     ***
                      (        hdcmd.src):00011         *******************************************
                      (        hdcmd.src):00012         
                      (        hdcmd.src):00013         *
                      (        hdcmd.src):00014         *   This is the routine that executes controller commands, and
                      (        hdcmd.src):00015         *   its support routines.
                      (        hdcmd.src):00016         *
                      (        hdcmd.src):00017         *   Modification History
                      (        hdcmd.src):00018         *   --------------------
                      (        hdcmd.src):00019         *
                      (        hdcmd.src):00020         *   Date        Who     Description
                      (        hdcmd.src):00021         *   --------    ---     ------------------------------------
                      (        hdcmd.src):00022         *   12/20/87    CJB     Modified GetDat and PutDat to call
                      (        hdcmd.src):00023         *                        SNOOZE routine if not ready for data.
                      (        hdcmd.src):00024         *                        This causes the driver to sleep 
                      (        hdcmd.src):00025         *                        during disk seeks.
                      (        hdcmd.src):00026         *                       Modified s25flg stuff for generic
                      (        hdcmd.src):00027         *                        32x4x?? drives.
                      (        hdcmd.src):00028         *   02/07/88    CJB     Added CMEXIN to process special drive
                      (        hdcmd.src):00029         *                        parameters during formatting
                      (        hdcmd.src):00030         *
                      (        hdcmd.src):00031         *   04/17/88    cjb     Added WaitIdl, which waits for controller
                      (        hdcmd.src):00032         *                        ready to receive a command.
                      (        hdcmd.src):00033         *                       Added call to Snooze in WaitIdl.
                      (        hdcmd.src):00034         *   04/21/88    cjb     Added code to OR RetryEn into step rate
                      (        hdcmd.src):00035         *                        byte.  This allows retries to be disabled
                      (        hdcmd.src):00036         *                        by RetryEn = $80.
                      (        hdcmd.src):00037         *   05/18/88    cjb     Checked all paths for proper handling of
                      (        hdcmd.src):00038         *                        premature command termination
                      (        hdcmd.src):00039         *   06/12/88    cjb     Added WaitId2 to assure sleep for at least
                      (        hdcmd.src):00040         *                        one tick.
                      (        hdcmd.src):00041         *                       Fixed DrvCmd to check for WX$XIN opcode
                      (        hdcmd.src):00042         *                        if formatting enabled.
                      (        hdcmd.src):00043         *   07/01/88    cjb     Fixed bug in CMESTS -- changed "<" to ">"
                      (        hdcmd.src):00044         *   10/10/88    cjb     Modified to save error track if format enabled
                      (        hdcmd.src):00045         *   02/01/89    cjb     Fixed bug in error routine -- now dumps
                      (        hdcmd.src):00046         *                        cache on any uncorrectable error
                      (        hdcmd.src):00047         *                       Fixed bug in error routine to save
                      (        hdcmd.src):00048         *                        error track # correctly
                      (        hdcmd.src):00049         *   05/05/90    cjb     Added kludge for ST11R in WAIRDY
                      (        hdcmd.src):00050         *                       Added support for drives in multiple slots
                      (        hdcmd.src):00051         *   04/15/92    cjb     Fixed bug in location of DBLRDD - caused
                      (        hdcmd.src):00052         *                       driver to hang up on an error message.
                      (        hdcmd.src):00053         *                       Lenghtened a bit for speed, and to allow
                      (        hdcmd.src):00054         *                       easy 6309E overlays.
                      (        hdcmd.src):00055         *
                      (        hdcmd.src):00056         
                      (        hdcmd.src):00057          page
                      (        hdcmd.src):00058         *
                      (        hdcmd.src):00059         *   Byte saver.
                      (        hdcmd.src):00060         *
                      (        hdcmd.src):00061         *   Call here to send command in Reg-A to drive in Reg-B,
                      (        hdcmd.src):00062         *   with 0's as the rest of the command.  
                      (        hdcmd.src):00063         *
                      (        hdcmd.src):00064         *   Note that this command sets the step rate to 3 ms!
                      (        hdcmd.src):00065         *
0299 3432             (        hdcmd.src):00066         DrvCmd  pshs    y,x,a           ;Save registers same as CmExec
029B 10EFC851         (        hdcmd.src):00067                 sts     AbtStk,U        ;Save stack pointer for error recovery
                      (        hdcmd.src):00068         
                      (        hdcmd.src):00069         *   Enter here to send WX$STS -- stack etc. already set up
                      (        hdcmd.src):00070         
029F 8D43             (        hdcmd.src):00071         DrvCm2  bsr     WAIRDY          ;Wait for ready for command -- preserves B
02A1 A6E4             (        hdcmd.src):00072                 lda     ,S              ; recover reg-A
                      (        hdcmd.src):00073         
                      (        hdcmd.src):00074             ifne    fmtflg
02A3 8D38             (        hdcmd.src):00075                 bsr     ChkCmd          ; translate cmd. if necessary
                      (        hdcmd.src):00076             endc
                      (        hdcmd.src):00077         
                      (        hdcmd.src):00078             ifne    (Drives-1)          ;If multiple drives,
02A5 C401             (        hdcmd.src):00079                 andb    #$01            ; 2 drives per controller, different slots
02A7 58               (        hdcmd.src):00080                 aslb
02A8 58               (        hdcmd.src):00081                 aslb
02A9 58               (        hdcmd.src):00082                 aslb                    ;convert drive # to controller's format
02AA 58               (        hdcmd.src):00083                 aslb
02AB 58               (        hdcmd.src):00084                 aslb
                      (        hdcmd.src):00085             else
                      (        hdcmd.src):00086                 clrb                    ;drive # is always 0
                      (        hdcmd.src):00087             endc
                      (        hdcmd.src):00088         
02AC 8D08             (        hdcmd.src):00089                 bsr     PutCm2          ;Send command & drive #
                      (        hdcmd.src):00090         
                      (        hdcmd.src):00091         *  Send the rest of the command as 0's (including step rate . . . 3ms)
                      (        hdcmd.src):00092         *  Note that RetryEn is ignored here.
                      (        hdcmd.src):00093         
02AE 4F               (        hdcmd.src):00094                 clra
02AF 5F               (        hdcmd.src):00095                 clrb
02B0 8D04             (        hdcmd.src):00096                 bsr     PutCm2
02B2 8D02             (        hdcmd.src):00097                 bsr     PutCm2          ;Send 4 zeros for rest of command
                      (        hdcmd.src):00098         
                      (        hdcmd.src):00099         *  Pass control to dispatch routine, and wait for end when done
                      (        hdcmd.src):00100         
02B4 2064             (        hdcmd.src):00101                 bra     CmDisp
                      (        hdcmd.src):00102         
                      (        hdcmd.src):00103             page
                      (        hdcmd.src):00104         *
                      (        hdcmd.src):00105         *   Put Reg-D to controller as command bytes
                      (        hdcmd.src):00106         *
                      (        hdcmd.src):00107         *   Assumes AbtStk is valid.
                      (        hdcmd.src):00108         *
                      (        hdcmd.src):00109             ifne    icdflg              ;If ignoring C/D status bit
                      (        hdcmd.src):00110         
02B6                  (        hdcmd.src):00111         PutCm2  lbra    PutDt2
                      (        hdcmd.src):00112         
                      (        hdcmd.src):00113             else
                      (        hdcmd.src):00114         
02B6 8D02             (        hdcmd.src):00115         PutCm2  bsr     PutCmd
02B8 1F98             (        hdcmd.src):00116                 tfr     B,A             ;Fall through to PutCm2
                      (        hdcmd.src):00117         
                      (        hdcmd.src):00118             endc
                      (        hdcmd.src):00119         
                      (        hdcmd.src):00120         *
                      (        hdcmd.src):00121         *   Wait for controller to indicate it is ready to receive
                      (        hdcmd.src):00122         *   a command byte, then send it from Reg-A.
                      (        hdcmd.src):00123         *
                      (        hdcmd.src):00124         *   Assumes AbtStk,U has been set to the error recovery
                      (        hdcmd.src):00125         *   stack pointer.
                      (        hdcmd.src):00126         *   If the command aborts, the stack is cleaned and control
                      (        hdcmd.src):00127         *   passed to CmdDun.
                      (        hdcmd.src):00128         *
                      (        hdcmd.src):00129             ifne    icdflg              ;If ignoring C/D status bit
                      (        hdcmd.src):00130         
02BA                  (        hdcmd.src):00131         PutCmd  lbra    PutDat
                      (        hdcmd.src):00132         
                      (        hdcmd.src):00133             else
                      (        hdcmd.src):00134         
02BA 3402             (        hdcmd.src):00135         PutCmd  pshs    A
                      (        hdcmd.src):00136         
02BC 8D0A             (        hdcmd.src):00137         PCM0    bsr     ChkAbt              ;Get status, check for abort
02BE 810D             (        hdcmd.src):00138                 cmpa    #%00001101          ;Check for command request
02C0 26FA             (        hdcmd.src):00139                  bne    PCM0
                      (        hdcmd.src):00140         
                      (        hdcmd.src):00141         *  Ready.  Put the data
                      (        hdcmd.src):00142         
02C2 3502             (        hdcmd.src):00143                 puls    A
02C4 B7FF50           (        hdcmd.src):00144                 sta     >HDDATA
02C7 39               (        hdcmd.src):00145                 rts
                      (        hdcmd.src):00146         
                      (        hdcmd.src):00147             endc
                      (        hdcmd.src):00148         
                      (        hdcmd.src):00149         *
                      (        hdcmd.src):00150         *   Get status of hard disk controller, and abort command in
                      (        hdcmd.src):00151         *   progress if controller says so.
                      (        hdcmd.src):00152         *
                      (        hdcmd.src):00153         *   Assumes AbtStk,U has been set to the error recovery
                      (        hdcmd.src):00154         *   stack pointer.
                      (        hdcmd.src):00155         *   If the command aborts, the stack is cleaned and control
                      (        hdcmd.src):00156         *   passed to CmdDun.
                      (        hdcmd.src):00157         *
02C8 B6FF51           (        hdcmd.src):00158         ChkAbt  lda     >HDSTAT
02CB B1FF51           (        hdcmd.src):00159                 cmpa    >HDSTAT             ;Data must be stable
02CE 26F8             (        hdcmd.src):00160                  bne    ChkAbt
                      (        hdcmd.src):00161         
02D0 840F             (        hdcmd.src):00162                 anda    #%00001111
02D2 810F             (        hdcmd.src):00163                 cmpa    #%00001111          ;Check for abort
02D4 2606             (        hdcmd.src):00164                  bne    CKA9
                      (        hdcmd.src):00165         
                      (        hdcmd.src):00166         *  Well, the command is complete.  This normally means it
                      (        hdcmd.src):00167         *  aborted.  Pass control to CmdDun
                      (        hdcmd.src):00168         
02D6 10EEC851         (        hdcmd.src):00169                 lds     AbtStk,U            ;Clean stack
02DA 2064             (        hdcmd.src):00170                 bra     CmdDun
                      (        hdcmd.src):00171         
                      (        hdcmd.src):00172         *  Not done yet.  Return current status to caller
                      (        hdcmd.src):00173         
02DC 39               (        hdcmd.src):00174         CKA9    rts
                      (        hdcmd.src):00175         
                      (        hdcmd.src):00176             ifne    fmtflg          ;If formatting allowed,
                      (        hdcmd.src):00177         *
                      (        hdcmd.src):00178         *   Convert command op-code before transmission to controller
                      (        hdcmd.src):00179         *   if necessary.
                      (        hdcmd.src):00180         *
                      (        hdcmd.src):00181         *   The special initialization code WX$XIN is not a real controller
                      (        hdcmd.src):00182         *   op-code.
                      (        hdcmd.src):00183         *
02DD 81FF             (        hdcmd.src):00184         ChkCmd  cmpa    #WX$XIN         ;Check for bogus INITIALIZE PARAMETERS
02DF 2602             (        hdcmd.src):00185                  bne    CCM9
02E1 860C             (        hdcmd.src):00186                 lda     #WX$INI         ; convert to real INITIALIZE PARAMETERS
02E3 39               (        hdcmd.src):00187         CCM9    rts
                      (        hdcmd.src):00188             endc
                      (        hdcmd.src):00189         
                      (        hdcmd.src):00190         *
                      (        hdcmd.src):00191         *   Wait for controller ready to receive a command, then
                      (        hdcmd.src):00192         *   get its attention.  Blows away Reg-A.  
                      (        hdcmd.src):00193         *
                      (        hdcmd.src):00194         *   Does not time out.
                      (        hdcmd.src):00195         *
02E4 8D04             (        hdcmd.src):00196         WAIRDY  bsr     WaitIdl         ;Wait for controller idle
02E6 7FFF52           (        hdcmd.src):00197                 clr     >HDATTN         ;Get attention of controller
02E9 39               (        hdcmd.src):00198                 rts
                      (        hdcmd.src):00199         
                      (        hdcmd.src):00200         *   Wait for controller ready to receive a command
                      (        hdcmd.src):00201         
02EA B6FF51           (        hdcmd.src):00202         WaitIdl lda     >HDSTAT
                      (        hdcmd.src):00203         *        anda    #%00001111
02ED 8409             (        hdcmd.src):00204                 anda    #%00001001      ;Special mask works for ST11R, too
02EF 8100             (        hdcmd.src):00205                 cmpa    #%00000000      ; (all bits must be clear if ready)
02F1 2705             (        hdcmd.src):00206                  beq    WaitId9
                      (        hdcmd.src):00207         
                      (        hdcmd.src):00208         *   Enter here to sleep for at least one tick.
                      (        hdcmd.src):00209         *   Waste time while waiting for HD.
                      (        hdcmd.src):00210         
02F3 17032B           (        hdcmd.src):00211         WaitId2 lbsr    Snooze          ;Give up slot, sleep.
02F6 20F2             (        hdcmd.src):00212                 bra     WaitIdl
                      (        hdcmd.src):00213         
02F8 39               (        hdcmd.src):00214         WaitId9 rts
                      (        hdcmd.src):00215         
                      (        hdcmd.src):00216          page
                      (        hdcmd.src):00217         *
                      (        hdcmd.src):00218         *   Command execution module for CoCo XT.
                      (        hdcmd.src):00219         *
                      (        hdcmd.src):00220         *   Enter with:
                      (        hdcmd.src):00221         *
                      (        hdcmd.src):00222         *   Command op-code in Reg-A
                      (        hdcmd.src):00223         *   Buffer pointer in Reg-X (points to buffer for data part of cmd)
                      (        hdcmd.src):00224         *   Command image set up at IMAGE,U
                      (        hdcmd.src):00225         *   Reg-Y points to real or bogus path descriptor (for drive # and
                      (        hdcmd.src):00226         *   step rate).
                      (        hdcmd.src):00227         *   Slot 3 is assumed to be selected, with interrupts disabled.
                      (        hdcmd.src):00228         *
                      (        hdcmd.src):00229         *   Exits w/ carry clear if success, otherwise carry set and
                      (        hdcmd.src):00230         *   error code in Reg-B.
                      (        hdcmd.src):00231         *
02F9 3432             (        hdcmd.src):00232         CMEXEC  pshs    y,x,a           ;Save caller's registers
02FB 10EFC851         (        hdcmd.src):00233                 sts     AbtStk,U        ;Save stack pointer for error recovery
                      (        hdcmd.src):00234         
                      (        hdcmd.src):00235         *   Wait for drive ready to accept a command
                      (        hdcmd.src):00236         
02FF 8DE3             (        hdcmd.src):00237                 bsr     WaiRdy
                      (        hdcmd.src):00238         
                      (        hdcmd.src):00239         *   Point to the command block
                      (        hdcmd.src):00240         
0301 30C83B           (        hdcmd.src):00241                 leax    IMAGE,U
                      (        hdcmd.src):00242         
                      (        hdcmd.src):00243         *   Issue the command . . . op-code 1st
                      (        hdcmd.src):00244         *   PutCmd and PutCm2 will automatically abort the command
                      (        hdcmd.src):00245         *   if the controller indicates that this is necessary.
                      (        hdcmd.src):00246         
0304 A6E4             (        hdcmd.src):00247                 lda     0,S             ;Recover command op-code
                      (        hdcmd.src):00248         
                      (        hdcmd.src):00249             ifne    fmtflg
0306 8DD5             (        hdcmd.src):00250                 bsr     ChkCmd          ;Translate command op-code if needed
                      (        hdcmd.src):00251             endc
                      (        hdcmd.src):00252         
0308 8DB0             (        hdcmd.src):00253         CMX1    bsr     PutCmd
                      (        hdcmd.src):00254         
030A EC81             (        hdcmd.src):00255                 ldd     ,X++            ; (send head & sector)
030C 8DA8             (        hdcmd.src):00256                 bsr     PutCm2
                      (        hdcmd.src):00257         
030E EC81             (        hdcmd.src):00258                 ldd     ,X++            ; (send cylinder & block count)
0310 8DA4             (        hdcmd.src):00259                 bsr     PutCm2
                      (        hdcmd.src):00260         
0312 A6A822           (        hdcmd.src):00261                 lda     PD.STP,Y        ; (send step rate)
0315 AAC853           (        hdcmd.src):00262                 ora     RetryEn,U       ; (and send retry flag)
0318 8DA0             (        hdcmd.src):00263                 bsr     PutCmd
                      (        hdcmd.src):00264         
                      (        hdcmd.src):00265         *   Now dispatch the command based on it's op-code.  If a command
                      (        hdcmd.src):00266         *   isn't explicitly checked for in this loop, it is assumed that
                      (        hdcmd.src):00267         *   the command has no data arguments and is now executing.
                      (        hdcmd.src):00268         
     031A             (        hdcmd.src):00269         CmDisp  equ     *
                      (        hdcmd.src):00270         
                      (        hdcmd.src):00271         *   Command in progress.  Dispatch to service routine.
                      (        hdcmd.src):00272         *   Note that the service routine must check for premature
                      (        hdcmd.src):00273         *   command termination via CHKABT.
                      (        hdcmd.src):00274         
031A AE61             (        hdcmd.src):00275                 ldx     1,S             ;Recover possible data pointer
031C A6E4             (        hdcmd.src):00276                 lda     0,S             ;Recover op-code
                      (        hdcmd.src):00277         
031E 8108             (        hdcmd.src):00278                 cmpa    #WX$RDD         ;READ SECTOR
0320 274E             (        hdcmd.src):00279                  beq    CMERDD
                      (        hdcmd.src):00280         
0322 810A             (        hdcmd.src):00281                 cmpa    #WX$WRT         ;WRITE SECTOR
0324 2769             (        hdcmd.src):00282                  beq    CMEWRT
                      (        hdcmd.src):00283         
0326 810C             (        hdcmd.src):00284                 cmpa    #WX$INI         ;SET DRIVE PARAMETERS
0328 10270134         (        hdcmd.src):00285                  lbeq   CMEINI
                      (        hdcmd.src):00286         
                      (        hdcmd.src):00287             ifne    fmtflg
032C 810F             (        hdcmd.src):00288                 cmpa    #WX$WBF         ;WRITE SECTOR BUFFER (for format)
032E 10270070         (        hdcmd.src):00289                  lbeq   CMEWBF
                      (        hdcmd.src):00290         
0332 81FF             (        hdcmd.src):00291                 cmpa    #WX$XIN         ;Bogus SET DRIVE PARAMETERS
0334 10270123         (        hdcmd.src):00292                  lbeq   CMEXIN
                      (        hdcmd.src):00293             endc
                      (        hdcmd.src):00294         
0338 8103             (        hdcmd.src):00295                 cmpa    #WX$STS         ;DETAILED STATUS REQUEST
033A 102700E5         (        hdcmd.src):00296                  lbeq   CMESTS
                      (        hdcmd.src):00297         
                      (        hdcmd.src):00298         *   Wait for end of command execution.  Then get completion status
                      (        hdcmd.src):00299         *   byte and decode any errors encountered.
                      (        hdcmd.src):00300         
033E 8D21             (        hdcmd.src):00301         WaiEnd  bsr     ewait           ;Wait for command done
                      (        hdcmd.src):00302         
                      (        hdcmd.src):00303         *   Get completion status byte
                      (        hdcmd.src):00304         *   Stack pointer and ABTSTK,U match
                      (        hdcmd.src):00305         
0340 5F               (        hdcmd.src):00306         CmdDun  clrb                    ;Clear carry, assume no error
                      (        hdcmd.src):00307         
0341 B6FF50           (        hdcmd.src):00308                 lda     >HDDATA
0344 8502             (        hdcmd.src):00309                 bita    #%00000010
0346 2709             (        hdcmd.src):00310                  beq    NoErr
                      (        hdcmd.src):00311         
                      (        hdcmd.src):00312         *   Error bit is set -- note this could still be a "null" error
                      (        hdcmd.src):00313         *   or a correctable error, so we have to get the status packet.
                      (        hdcmd.src):00314         
0348 A6E4             (        hdcmd.src):00315                 lda     0,S             ;Check op-code
034A 8103             (        hdcmd.src):00316                 cmpa    #WX$STS         ;Was it an error status request?
034C 2605             (        hdcmd.src):00317                  bne    GetErr
                      (        hdcmd.src):00318         
                      (        hdcmd.src):00319         *   Unknown error, or error while trying to determine error.
                      (        hdcmd.src):00320         
034E 53               (        hdcmd.src):00321         NotRdy  comb
034F C6F4             (        hdcmd.src):00322                 ldb     #E$Read         ;Report it as a "read" error
                      (        hdcmd.src):00323         
                      (        hdcmd.src):00324         *   Generic exit
                      (        hdcmd.src):00325         
     0351             (        hdcmd.src):00326         NoErr   equ     *
0351 35B2             (        hdcmd.src):00327         CMEXIT  puls    a,x,y,pc
                      (        hdcmd.src):00328         
                      (        hdcmd.src):00329         *   Issue command to read error from controller.  This command
                      (        hdcmd.src):00330         *   will return the error code in Reg-B w/ carry set.
                      (        hdcmd.src):00331         
0353 8603             (        hdcmd.src):00332         GetErr  lda     #WX$STS         ;Recurse to get detailed status (implicit bfr)
                      (        hdcmd.src):00333         
                      (        hdcmd.src):00334             ifne    Drives-1            ;If more than 1 drive,
0355 E6A821           (        hdcmd.src):00335                 ldb     PD.DRV,Y
                      (        hdcmd.src):00336             endc
                      (        hdcmd.src):00337         
0358 10EEC851         (        hdcmd.src):00338                 lds     AbtStk,U        ;Recover stack pointer
035C A7E4             (        hdcmd.src):00339                 sta     0,S             ;Put command on stack
035E 16FF3E           (        hdcmd.src):00340                 lbra    DrvCm2          ;Go try again.
                      (        hdcmd.src):00341         
                      (        hdcmd.src):00342         *   Wait for command to terminate
                      (        hdcmd.src):00343         
0361 B6FF51           (        hdcmd.src):00344         ewait   lda     >HDSTAT
0364 8407             (        hdcmd.src):00345                 anda    #%00000111      ;NOTE:  IGNORE BUSY BIT
0366 8107             (        hdcmd.src):00346                 cmpa    #%00000111      ; (all bits set for command completion byte)
0368 2705             (        hdcmd.src):00347                  beq    ewx
                      (        hdcmd.src):00348         
                      (        hdcmd.src):00349         *  Not done.  Sleep for the rest of this tick, then try again.
                      (        hdcmd.src):00350         
036A 1702B4           (        hdcmd.src):00351                 lbsr    Snooze          ;Give up slot, sleep, get back slot
036D 20F2             (        hdcmd.src):00352                 bra     ewait
                      (        hdcmd.src):00353         
                      (        hdcmd.src):00354         *   Exit
                      (        hdcmd.src):00355         
036F 39               (        hdcmd.src):00356         ewx     rts
                      (        hdcmd.src):00357         
                      (        hdcmd.src):00358          page
                      (        hdcmd.src):00359         *
                      (        hdcmd.src):00360         *   Handle tail end of sector read.
                      (        hdcmd.src):00361         *   Get the data to the caller's buffer.
                      (        hdcmd.src):00362         *
0370 A6C846           (        hdcmd.src):00363         CMERDD  lda     secnum,u
0373 8501             (        hdcmd.src):00364                 bita    #1
0375 2612             (        hdcmd.src):00365                  bne    CMRODD
                      (        hdcmd.src):00366         
                      (        hdcmd.src):00367         *  Read even logical sector on track -- 1st half of physical sector
                      (        hdcmd.src):00368         *  Save 2nd half if necessary.
                      (        hdcmd.src):00369         
0377 8D39             (        hdcmd.src):00370                 bsr keep256
                      (        hdcmd.src):00371         
                      (        hdcmd.src):00372             ifne    cchflg          ;If read cache supported,
                      (        hdcmd.src):00373         
0379 6DC843           (        hdcmd.src):00374                 tst BFRFLG,U
037C 2707             (        hdcmd.src):00375                  beq CMRE1
                      (        hdcmd.src):00376         
                      (        hdcmd.src):00377         *  Copy 2nd half of sector to verify buffer (possible cache)
037E 30C856           (        hdcmd.src):00378                 leax    vrfbuf,U
0381 8D2F             (        hdcmd.src):00379                 bsr     keep256
0383 20B9             (        hdcmd.src):00380                 bra     WaiEnd
                      (        hdcmd.src):00381         
                      (        hdcmd.src):00382             endc
                      (        hdcmd.src):00383         
                      (        hdcmd.src):00384         *  Discard 2nd half of sector
0385 8D45             (        hdcmd.src):00385         CMRE1   bsr     dump256
0387 20B5             (        hdcmd.src):00386                 bra     WAIEND
                      (        hdcmd.src):00387         
                      (        hdcmd.src):00388         *  Read odd logical sector on track -- 2nd half of physical sector
                      (        hdcmd.src):00389         *  Throw away the 1st half
0389 8D41             (        hdcmd.src):00390         CMRODD  bsr     dump256
038B 8D25             (        hdcmd.src):00391                 bsr     keep256
038D 20AF             (        hdcmd.src):00392                 bra     WAIEND
                      (        hdcmd.src):00393         
                      (        hdcmd.src):00394          page
                      (        hdcmd.src):00395         *
                      (        hdcmd.src):00396         *   Handle tail end of sector write.
                      (        hdcmd.src):00397         *   Get the data from the caller's buffer.
                      (        hdcmd.src):00398         *
038F A6C846           (        hdcmd.src):00399         CMEWRT  lda     secnum,u
0392 8501             (        hdcmd.src):00400                 bita    #1
0394 2606             (        hdcmd.src):00401                  bne    CMWODD
                      (        hdcmd.src):00402         
                      (        hdcmd.src):00403         *  Write even lsn on track -- uses 1st half, get 2nd half from verify bfr
0396 8D54             (        hdcmd.src):00404                 bsr     writ256
0398 8D68             (        hdcmd.src):00405                 bsr     copy256
039A 20A2             (        hdcmd.src):00406                 bra     WAIEND
                      (        hdcmd.src):00407         
                      (        hdcmd.src):00408         *  Write odd lsn on track -- uses 2nd half, get 1st half from verify bfr
039C 8D64             (        hdcmd.src):00409         CMWODD  bsr     copy256
039E 8D4C             (        hdcmd.src):00410                 bsr     writ256
03A0 209C             (        hdcmd.src):00411                 bra     WAIEND
                      (        hdcmd.src):00412         
                      (        hdcmd.src):00413             ifne    fmtflg          ;If hard formatting enabled,
                      (        hdcmd.src):00414         
                      (        hdcmd.src):00415          page
                      (        hdcmd.src):00416         *
                      (        hdcmd.src):00417         *  Process command to fill sector buffer with (A).
                      (        hdcmd.src):00418         *
                      (        hdcmd.src):00419         *  This is only used at the beginning of a FORMAT command.
                      (        hdcmd.src):00420         *
03A2 CCE600           (        hdcmd.src):00421         CMEWBF  ldd     #$E600      ; ($00 -> 256 iterations)
03A5 8D05             (        hdcmd.src):00422                 bsr     CMF0
03A7 8D03             (        hdcmd.src):00423                 bsr     CMF0        ; Reg-B is still 0 from previous iteration
03A9 16FF92           (        hdcmd.src):00424                 lbra    WAIEND
                      (        hdcmd.src):00425         
03AC 8D61             (        hdcmd.src):00426         CMF0    bsr     PutDat      ;Fill 256 bytes of sector buffer with (A)
03AE 5A               (        hdcmd.src):00427                 decb
03AF 26FB             (        hdcmd.src):00428                 bne     CMF0
                      (        hdcmd.src):00429         
03B1 39               (        hdcmd.src):00430                 rts
                      (        hdcmd.src):00431         
                      (        hdcmd.src):00432             endc
                      (        hdcmd.src):00433         
                      (        hdcmd.src):00434          page
                      (        hdcmd.src):00435         *
                      (        hdcmd.src):00436         *  Copy 256 bytes from sector buffer to (X)
                      (        hdcmd.src):00437         *
                      (        hdcmd.src):00438         
                      (        hdcmd.src):00439             ifne    fstflg              ;If fast transfers,
                      (        hdcmd.src):00440         
03B2 8D28             (        hdcmd.src):00441         Keep256 bsr     GetDat          ;Full handshake on 1st byte
03B4 A780             (        hdcmd.src):00442                 sta     ,X+
                      (        hdcmd.src):00443             ifne    tboflg              ;If 2 MHz for transfers,
                      (        hdcmd.src):00444                 clr     >$FFD9
                      (        hdcmd.src):00445             endc
03B6 8D24             (        hdcmd.src):00446                 bsr     GetDat          ;Get 2nd (quick move goes in pairs)
03B8 A780             (        hdcmd.src):00447                 sta     ,X+
03BA C67F             (        hdcmd.src):00448                 ldb     #$7F            ;pair count
03BC 3404             (        hdcmd.src):00449                 pshs    B
                      (        hdcmd.src):00450         
03BE B6FF50           (        hdcmd.src):00451         RDD1    lda     >HDDATA         ;Read the rest of the block w/o handshake
03C1 F6FF50           (        hdcmd.src):00452                 ldb     >HDDATA
03C4 ED81             (        hdcmd.src):00453                 std     ,X++
03C6 6AE4             (        hdcmd.src):00454                 dec     ,S
03C8 26F4             (        hdcmd.src):00455                  bne    RDD1
                      (        hdcmd.src):00456         
                      (        hdcmd.src):00457             ifne    tboflg              ;If 2 MHz for transfers,
                      (        hdcmd.src):00458                 clr     >$FFD8
                      (        hdcmd.src):00459             endc
                      (        hdcmd.src):00460         
03CA 3582             (        hdcmd.src):00461                 puls    A,PC            ;Flush counter
                      (        hdcmd.src):00462         
                      (        hdcmd.src):00463             else                        ;If slow transfers,
                      (        hdcmd.src):00464         
03CC                  (        hdcmd.src):00465         Keep256 clrb                    ;Copy 256 bytes
                      (        hdcmd.src):00466             ifne    tboflg              ;If 2 MHz for transfers,
                      (        hdcmd.src):00467                 clr     >$FFD9
                      (        hdcmd.src):00468             endc
                      (        hdcmd.src):00469         
03CC                  (        hdcmd.src):00470         RDD1    bsr     GetDat          ;Full handshake on every byte
                      (        hdcmd.src):00471                 sta     ,X+
                      (        hdcmd.src):00472                 decb
                      (        hdcmd.src):00473                  bne    RDD1
                      (        hdcmd.src):00474         
                      (        hdcmd.src):00475             ifne    tboflg              ;If 2 MHz for transfers,
                      (        hdcmd.src):00476                 clr     >$FFD8
                      (        hdcmd.src):00477             endc
                      (        hdcmd.src):00478         
                      (        hdcmd.src):00479                 rts
                      (        hdcmd.src):00480         
                      (        hdcmd.src):00481             endc
                      (        hdcmd.src):00482         
                      (        hdcmd.src):00483         *
                      (        hdcmd.src):00484         *  Copy 256 bytes from sector buffer to bit bucket
                      (        hdcmd.src):00485         *
                      (        hdcmd.src):00486         
                      (        hdcmd.src):00487             ifne    fstflg              ;If fast transfers,
                      (        hdcmd.src):00488         
03CC 8D0E             (        hdcmd.src):00489         Dump256 bsr     GetDat          ;Full handshake on 1st byte
                      (        hdcmd.src):00490             ifne    tboflg              ;If 2 MHz for transfers,
                      (        hdcmd.src):00491                 clr     >$FFD9
                      (        hdcmd.src):00492             endc
03CE 8D0C             (        hdcmd.src):00493                 bsr     GetDat          ;Quick dump goes in pairs
03D0 C67F             (        hdcmd.src):00494                 ldb     #$7F
                      (        hdcmd.src):00495         
03D2 B6FF50           (        hdcmd.src):00496         RDD2    lda     >HDDATA         ;Read the rest of the block w/o handshake
03D5 B6FF50           (        hdcmd.src):00497                 lda     >HDDATA
03D8 5A               (        hdcmd.src):00498                 decb
03D9 26F7             (        hdcmd.src):00499                  bne    RDD2
                      (        hdcmd.src):00500         
                      (        hdcmd.src):00501             ifne    tboflg              ;If 2 MHz for transfers,
                      (        hdcmd.src):00502                 clr     >$FFD8
                      (        hdcmd.src):00503             endc
03DB 39               (        hdcmd.src):00504                 rts
                      (        hdcmd.src):00505         
                      (        hdcmd.src):00506             else                        ;If slow transfers,
                      (        hdcmd.src):00507         
03DC                  (        hdcmd.src):00508         Dump256  clrb                   ;Copy 256 bytes
                      (        hdcmd.src):00509             ifne    tboflg              ;If 2 MHz for transfers,
                      (        hdcmd.src):00510                 clr     >$FFD9
                      (        hdcmd.src):00511             endc
                      (        hdcmd.src):00512         
03DC                  (        hdcmd.src):00513         RDD2    bsr     GetDat          ;Full handshake on every byte
                      (        hdcmd.src):00514                 decb
                      (        hdcmd.src):00515                  bne    RDD2
                      (        hdcmd.src):00516         
                      (        hdcmd.src):00517             ifne    tboflg              ;If 2 MHz for transfers,
                      (        hdcmd.src):00518                 clr     >$FFD8
                      (        hdcmd.src):00519             endc
                      (        hdcmd.src):00520                 rts
                      (        hdcmd.src):00521         
                      (        hdcmd.src):00522             endc
                      (        hdcmd.src):00523         
                      (        hdcmd.src):00524         *
                      (        hdcmd.src):00525         *   Wait for controller to indicate it is ready to transmit
                      (        hdcmd.src):00526         *   a data byte, then get it to Reg-A.
                      (        hdcmd.src):00527         *
                      (        hdcmd.src):00528         *   Assumes AbtStk,U has been set to the error recovery
                      (        hdcmd.src):00529         *   stack pointer.
                      (        hdcmd.src):00530         *   If the command aborts, the stack is cleaned and control
                      (        hdcmd.src):00531         *   passed to CmdDun.
                      (        hdcmd.src):00532         *
     03DC             (        hdcmd.src):00533         GetDat  equ     *
                      (        hdcmd.src):00534         
03DC 17FEE9           (        hdcmd.src):00535         GDT0    lbsr    ChkAbt              ;Get status, check for abort
                      (        hdcmd.src):00536             ifne    icdflg                  ;If ignoring C/D bit,
                      (        hdcmd.src):00537                 anda    #%00001011
                      (        hdcmd.src):00538             endc
03DF 810B             (        hdcmd.src):00539                 cmpa    #%00001011          ;Check for data request
03E1 2705             (        hdcmd.src):00540                  beq    GDT1                ; (branch if request present)
                      (        hdcmd.src):00541         
                      (        hdcmd.src):00542         *   New -- sleep if controller not ready (D.DMAReq only)
                      (        hdcmd.src):00543         
03E3 17023B           (        hdcmd.src):00544                 lbsr    Snooze
03E6 20F4             (        hdcmd.src):00545                 bra     GDT0
                      (        hdcmd.src):00546         
                      (        hdcmd.src):00547         *  Ready.  Get the data
                      (        hdcmd.src):00548         
03E8 B6FF50           (        hdcmd.src):00549         GDT1    lda     >HDDATA
03EB 39               (        hdcmd.src):00550                 rts
                      (        hdcmd.src):00551         
                      (        hdcmd.src):00552          page
                      (        hdcmd.src):00553         *
                      (        hdcmd.src):00554         *  Copy 256 bytes from (X) to sector buffer
                      (        hdcmd.src):00555         *
                      (        hdcmd.src):00556         
                      (        hdcmd.src):00557             ifne    fstflg              ;If fast transfers,
                      (        hdcmd.src):00558         
03EC EC81             (        hdcmd.src):00559         Writ256 ldd     ,X++
03EE 8D1B             (        hdcmd.src):00560                 bsr     PutDt2          ;Full handshake on 1st byte pair
                      (        hdcmd.src):00561             ifne    tboflg              ;If 2 MHz for transfers,
                      (        hdcmd.src):00562                 clr     >$FFD9
                      (        hdcmd.src):00563             endc
03F0 C67F             (        hdcmd.src):00564                 ldb     #$7F
03F2 3404             (        hdcmd.src):00565                 pshs    B
                      (        hdcmd.src):00566         
03F4 EC81             (        hdcmd.src):00567         WRT1    ldd     ,X++
03F6 B7FF50           (        hdcmd.src):00568                 sta     >HDDATA         ;Write the rest of the block w/o handshake
03F9 F7FF50           (        hdcmd.src):00569                 stb     >HDDATA
03FC 6AE4             (        hdcmd.src):00570                 dec     ,S
03FE 26F4             (        hdcmd.src):00571                  bne    WRT1
                      (        hdcmd.src):00572         
                      (        hdcmd.src):00573             ifne    tboflg              ;If 2 MHz for transfers,
                      (        hdcmd.src):00574                 clr     >$FFD8
                      (        hdcmd.src):00575             endc
0400 3582             (        hdcmd.src):00576                 puls    A,PC            ;clean up counter
                      (        hdcmd.src):00577         
                      (        hdcmd.src):00578             else                        ;If slow transfers,
                      (        hdcmd.src):00579         
0402                  (        hdcmd.src):00580         Writ256  clrb                    ;Copy 256 bytes
                      (        hdcmd.src):00581             ifne    tboflg              ;If 2 MHz for transfers,
                      (        hdcmd.src):00582                 clr     >$FFD9
                      (        hdcmd.src):00583             endc
                      (        hdcmd.src):00584         
0402                  (        hdcmd.src):00585         WRT1    lda     ,X+
                      (        hdcmd.src):00586                 bsr     PutDat          ;Full handshake on every byte
                      (        hdcmd.src):00587                 decb
                      (        hdcmd.src):00588                  bne    WRT1
                      (        hdcmd.src):00589         
                      (        hdcmd.src):00590             ifne    tboflg              ;If 2 MHz for transfers,
                      (        hdcmd.src):00591                 clr     >$FFD8
                      (        hdcmd.src):00592             endc
                      (        hdcmd.src):00593                 rts
                      (        hdcmd.src):00594         
                      (        hdcmd.src):00595             endc
                      (        hdcmd.src):00596         
                      (        hdcmd.src):00597         *
                      (        hdcmd.src):00598         *  Copy 256 bytes from verify buffer to sector buffer
                      (        hdcmd.src):00599         *
                      (        hdcmd.src):00600         
0402 3410             (        hdcmd.src):00601         copy256 pshs    X
                      (        hdcmd.src):00602         
0404 30C856           (        hdcmd.src):00603                 leax    vrfbuf,u        ;Get verify buffer pointer
0407 8DE3             (        hdcmd.src):00604                 bsr     writ256
                      (        hdcmd.src):00605         
0409 3590             (        hdcmd.src):00606                 puls    X,PC
                      (        hdcmd.src):00607         
                      (        hdcmd.src):00608         *
                      (        hdcmd.src):00609         *   Put Reg-D to controller as data bytes
                      (        hdcmd.src):00610         *
                      (        hdcmd.src):00611         *   Assumes AbtStk is valid.
                      (        hdcmd.src):00612         *
040B 8D02             (        hdcmd.src):00613         PutDt2  bsr     PutDat
040D 1F98             (        hdcmd.src):00614                 tfr     B,A             ;Fall through to PutCm2
                      (        hdcmd.src):00615         
                      (        hdcmd.src):00616         *
                      (        hdcmd.src):00617         *   Wait for controller to indicate it is ready to receive
                      (        hdcmd.src):00618         *   a data byte, then send it from Reg-A.
                      (        hdcmd.src):00619         *
                      (        hdcmd.src):00620         *   Assumes AbtStk,U has been set to the error recovery
                      (        hdcmd.src):00621         *   stack pointer.
                      (        hdcmd.src):00622         *   If the command aborts, the stack is cleaned and control
                      (        hdcmd.src):00623         *   passed to CmdDun.
                      (        hdcmd.src):00624         *
040F 3402             (        hdcmd.src):00625         PutDat  pshs    A
                      (        hdcmd.src):00626         
0411 17FEB4           (        hdcmd.src):00627         PDT0    lbsr    ChkAbt              ;Get status, check for abort
                      (        hdcmd.src):00628             ifne    icdflg                  ;If ignoring C/D bit,
                      (        hdcmd.src):00629                 anda    #%00001011
                      (        hdcmd.src):00630             endc
0414 8109             (        hdcmd.src):00631                 cmpa    #%00001001          ;Check for data request
0416 2705             (        hdcmd.src):00632                  beq    PDT1                ; (branch if request present)
                      (        hdcmd.src):00633         
                      (        hdcmd.src):00634         *   New -- sleep if controller not ready (D.DMAReq only)
                      (        hdcmd.src):00635         
0418 170206           (        hdcmd.src):00636                 lbsr    Snooze
041B 20F4             (        hdcmd.src):00637                 bra     PDT0
                      (        hdcmd.src):00638         
                      (        hdcmd.src):00639         *  Ready.  Put the data
                      (        hdcmd.src):00640         
041D 3502             (        hdcmd.src):00641         PDT1    puls    A
041F B7FF50           (        hdcmd.src):00642                 sta     >HDDATA
0422 39               (        hdcmd.src):00643                 rts
                      (        hdcmd.src):00644         
                      (        hdcmd.src):00645          page
                      (        hdcmd.src):00646         *
                      (        hdcmd.src):00647         *   Process detailed status request command.
                      (        hdcmd.src):00648         *   This routine performs the status request, then
                      (        hdcmd.src):00649         *   translates the controller's error code and returns
                      (        hdcmd.src):00650         *   it as the error status of the operation w/ C-bit set.
                      (        hdcmd.src):00651         *   "Null" and correctable errors do not cause C-bit set.
                      (        hdcmd.src):00652         *
     0423             (        hdcmd.src):00653         CMESTS  equ     *
                      (        hdcmd.src):00654         
                      (        hdcmd.src):00655         *  Recover error status from controller
                      (        hdcmd.src):00656         
0423 8DB7             (        hdcmd.src):00657                 bsr     GetDat      ;Read result of last disk command
0425 3402             (        hdcmd.src):00658                 pshs    a           ; (save)
                      (        hdcmd.src):00659         
                      (        hdcmd.src):00660             ifne    FMTFLG
0427 8DB3             (        hdcmd.src):00661                 bsr     GetDat      ; (dump head #)
0429 8DB1             (        hdcmd.src):00662                 bsr     GetDat      ;Get shifted cyl # MS byte
042B 1F89             (        hdcmd.src):00663                 tfr     A,B
042D 8DAD             (        hdcmd.src):00664                 bsr     GetDat      ;Get shifted cyl # LS byte
042F 1E89             (        hdcmd.src):00665                 exg     A,B
0431 EDC854           (        hdcmd.src):00666                 std     ERRHCYL,U   ;Save cylinder # of error for FORMAT
                      (        hdcmd.src):00667             else
                      (        hdcmd.src):00668                 bsr     DBLRDD      ;Dump last 3 response bytes
                      (        hdcmd.src):00669                 bsr     GetDat      ; (dump last response byte)
                      (        hdcmd.src):00670             endc
                      (        hdcmd.src):00671         
0434 17FF2A           (        hdcmd.src):00672                 lbsr    ewait       ; Wait for command complete
0437 B6FF50           (        hdcmd.src):00673                 lda     >HDDATA     ;  and dump completion byte
                      (        hdcmd.src):00674         
043A 3502             (        hdcmd.src):00675                 puls    a           ; (recover error code)
                      (        hdcmd.src):00676         
                      (        hdcmd.src):00677         *  Look up error code in Reg-A -> Reg-B
                      (        hdcmd.src):00678         
043C 843F             (        hdcmd.src):00679                 anda    #$3F        ;Keep only error bits
043E 2711             (        hdcmd.src):00680                  beq    NULERR
                      (        hdcmd.src):00681         
0440 8118             (        hdcmd.src):00682                 cmpa    #WE$CER     ;Correctable error
0442 2605             (        hdcmd.src):00683                  bne    EL0
                      (        hdcmd.src):00684         
                      (        hdcmd.src):00685         *   Special processing for correctable errors.
                      (        hdcmd.src):00686         *   If formatting (RetryEn,U != 0), report these
                      (        hdcmd.src):00687         *   as READ ERRORS
                      (        hdcmd.src):00688         
0444 6DC853           (        hdcmd.src):00689                 tst     RetryEn,U       ;If retries disabled, error out.
0447 2708             (        hdcmd.src):00690                  beq    NULERR          ; (retries enabled -- ignore error)
                      (        hdcmd.src):00691         
     0449             (        hdcmd.src):00692         EL0     equ     *
                      (        hdcmd.src):00693         
                      (        hdcmd.src):00694             ifne    cchflg          ;If read cache supported,
0449 6FC843           (        hdcmd.src):00695                 clr     BFRFLG,U        ;Dump cache on any error
                      (        hdcmd.src):00696             endc
                      (        hdcmd.src):00697             ifne    errflg      ;If good error messages enabled,
                      (        hdcmd.src):00698         
                      (        hdcmd.src):00699                 leax    ERRTBL,PCR     ;Point to lookup table
                      (        hdcmd.src):00700         
                      (        hdcmd.src):00701         *  Search error list.  Error code is in Reg-A
                      (        hdcmd.src):00702         
044C                  (        hdcmd.src):00703         EL1     tst     ,X
                      (        hdcmd.src):00704                  bmi    XXXERR
                      (        hdcmd.src):00705                 cmpa    ,X++
                      (        hdcmd.src):00706                  bne    EL1
                      (        hdcmd.src):00707         
                      (        hdcmd.src):00708         *  Found error code
                      (        hdcmd.src):00709                 comb                ;Set carry
                      (        hdcmd.src):00710                 ldb     -1,X            ;Fetch error code
                      (        hdcmd.src):00711                 bra     XCMXIT
                      (        hdcmd.src):00712         
                      (        hdcmd.src):00713             endc
                      (        hdcmd.src):00714         
                      (        hdcmd.src):00715         *  Didn't find error code.  Note that errors that translate
                      (        hdcmd.src):00716         *  to E$Read are not in the table -- we just let them default
                      (        hdcmd.src):00717         *  to here.
                      (        hdcmd.src):00718         
044C 53               (        hdcmd.src):00719         XXXERR  comb
044D C6F4             (        hdcmd.src):00720                 ldb     #E$Read
044F 2001             (        hdcmd.src):00721                 bra     XCMXIT          ;Return status to caller
                      (        hdcmd.src):00722         
0451 5F               (        hdcmd.src):00723         NULERR  clrb                    ;Force carry clear
0452 16FEFC           (        hdcmd.src):00724         XCMXIT  lbra    CMEXIT          ;Return status to caller
                      (        hdcmd.src):00725         
                      (        hdcmd.src):00726         *  Byte saver
                      (        hdcmd.src):00727         
0455 17FF84           (        hdcmd.src):00728         DBLRDD  lbsr    GetDat          ;Read 1 byte
0458 16FF81           (        hdcmd.src):00729                 lbra    GetDat
                      (        hdcmd.src):00730         
                      (        hdcmd.src):00731          page
                      (        hdcmd.src):00732             ifne    fmtflg      ;If formatting allowed,
                      (        hdcmd.src):00733         *
                      (        hdcmd.src):00734         *   Process special drive parameters command.
                      (        hdcmd.src):00735         *
                      (        hdcmd.src):00736         *   This command sends the legal track count rather
                      (        hdcmd.src):00737         *   than the park track count.
                      (        hdcmd.src):00738         *
045B ECA825           (        hdcmd.src):00739         CMEXIN  ldd     PD.CYL,Y        ;get track count
045E 2007             (        hdcmd.src):00740                 bra     CMIN01
                      (        hdcmd.src):00741             endc
                      (        hdcmd.src):00742         
                      (        hdcmd.src):00743         *
                      (        hdcmd.src):00744         *   Process command to send drive parameters to controller.
                      (        hdcmd.src):00745         *   Assumes Reg-Y points to real or bogus *PATH* descriptor.
                      (        hdcmd.src):00746         *
                      (        hdcmd.src):00747         *   This routine fetches the drive parameters from the descriptor,
                      (        hdcmd.src):00748         *   and sends them to the controller.
                      (        hdcmd.src):00749         *
     0460             (        hdcmd.src):00750         CMEINI  equ     *
                      (        hdcmd.src):00751         
                      (        hdcmd.src):00752         *   Send # of cylinders.  We send the park track, since it
                      (        hdcmd.src):00753         *   is the largest track # that will be used.
                      (        hdcmd.src):00754         
                      (        hdcmd.src):00755             ifne    (Drives-1)      ;if 2 drives,
                      (        hdcmd.src):00756              ifne   trsflg          ; if optimized for 32 SPT, 4 heads,
                      (        hdcmd.src):00757                 bsr     GtPkLSN         ;Get park LSN to B:X
                      (        hdcmd.src):00758                 pshs    X,B
                      (        hdcmd.src):00759                 ldd     ,S
                      (        hdcmd.src):00760                 addd    ,S
                      (        hdcmd.src):00761                 leas    3,S             ;Convert to track by dividing by 128
                      (        hdcmd.src):00762              else
0460 8D2F             (        hdcmd.src):00763                 bsr     GtPkLSN         ;Get park LSN to B:X
0462 1700A8           (        hdcmd.src):00764                 lbsr    LSNDIV
0465 1F10             (        hdcmd.src):00765                 tfr     X,D             ;Calculate track and get to D
                      (        hdcmd.src):00766              endc
                      (        hdcmd.src):00767             else                    ;if 1 drive,
                      (        hdcmd.src):00768              ifne   trsflg          ; if optimized for 32 SPT, 4 heads,
                      (        hdcmd.src):00769                 ldd     PRKLSN,U
                      (        hdcmd.src):00770                 addd    PRKLSN,U        ;park track = park LSN/128
                      (        hdcmd.src):00771              else
                      (        hdcmd.src):00772                 ldb     (PRKLSN+0),U
                      (        hdcmd.src):00773                 ldx     (PRKLSN+1),U    ;get park LSN
                      (        hdcmd.src):00774                 lbsr    LSNDIV
                      (        hdcmd.src):00775                 tfr     X,D             ;Calculate track and get to D
                      (        hdcmd.src):00776              endc
                      (        hdcmd.src):00777             endc
                      (        hdcmd.src):00778         
                      (        hdcmd.src):00779         *   Enter here w/ track count in Reg-D
                      (        hdcmd.src):00780         
0467 C30001           (        hdcmd.src):00781         CMIN01  addd    #1              ; (advance track count by 1)
046A 8D9F             (        hdcmd.src):00782                 bsr     PutDt2          ;Send last legal track to controller
                      (        hdcmd.src):00783         
                      (        hdcmd.src):00784         *  Send # of heads
                      (        hdcmd.src):00785         
046C A6A827           (        hdcmd.src):00786                 lda     PD.SID,Y
046F 8D9E             (        hdcmd.src):00787                 bsr     PutDat
                      (        hdcmd.src):00788         
                      (        hdcmd.src):00789         *  Send (bogus) reduced write current cylinder
                      (        hdcmd.src):00790         
0471 ECA825           (        hdcmd.src):00791                 ldd     PD.CYL,Y
0474 17FF94           (        hdcmd.src):00792                 lbsr    PutDt2
                      (        hdcmd.src):00793         
                      (        hdcmd.src):00794         *  Send write pre-comp cylinder (DD had wpc/4)
                      (        hdcmd.src):00795         
                      (        hdcmd.src):00796             ifne    (Drives-1)         ;if 2 drives,
0477 3420             (        hdcmd.src):00797                 pshs    Y
0479 E6A821           (        hdcmd.src):00798                 ldb     PD.DRV,Y        ;Get drive #
047C 17015C           (        hdcmd.src):00799                 lbsr    GOBPtr          ;Get option pointer for this drive
047F E6A4             (        hdcmd.src):00800                 ldb     (PCCYL-OBSTART),Y
0481 3520             (        hdcmd.src):00801                 puls    Y
                      (        hdcmd.src):00802             else
                      (        hdcmd.src):00803                 ldb     PCCYL,U         ;Get precomp cylinder / 4
                      (        hdcmd.src):00804             endc
0483 8604             (        hdcmd.src):00805                 lda     #4
0485 3D               (        hdcmd.src):00806                 mul                     ;Convert to real cyl # in D
0486 17FF82           (        hdcmd.src):00807                 lbsr    PutDt2
                      (        hdcmd.src):00808         
                      (        hdcmd.src):00809         *   Send maximum error correction burst length (WD recommends 4)
                      (        hdcmd.src):00810         
0489 8604             (        hdcmd.src):00811                 lda     #4
048B 17FF81           (        hdcmd.src):00812                 lbsr    PutDat
                      (        hdcmd.src):00813         
                      (        hdcmd.src):00814         *   Wait for end of command, etc.
                      (        hdcmd.src):00815         
048E 16FEAD           (        hdcmd.src):00816                 lbra    WaiEnd
                      (        hdcmd.src):00817         
                      (        hdcmd.src):00818             ifne    (Drives-1)
                      (        hdcmd.src):00819             page
                      (        hdcmd.src):00820         *
                      (        hdcmd.src):00821         *   Utility to get park lsn to B:X for systems with 2 drives.
                      (        hdcmd.src):00822         *
0491 3420             (        hdcmd.src):00823         GtPkLSN pshs    Y
0493 E6A821           (        hdcmd.src):00824                 ldb     PD.DRV,Y        ;Get drive #
0496 170142           (        hdcmd.src):00825                 lbsr    GOBPtr          ;Get option pointer for this drive
0499 E621             (        hdcmd.src):00826                 ldb     (PRKLSN+0-OBSTART),Y
049B AE22             (        hdcmd.src):00827                 ldx     (PRKLSN+1-OBSTART),Y
049D 35A0             (        hdcmd.src):00828                 puls    Y,PC
                      (        hdcmd.src):00829             endc
                      (        hdcmd.src):00830         
                      (        hdcmd.src):00831             ifne    errflg      ;If good errors enabled,
                      (        hdcmd.src):00832             page
                      (        hdcmd.src):00833         *
                      (        hdcmd.src):00834         *   Table of error code followed by OS9 error code
                      (        hdcmd.src):00835         *   This translation is somewhat arbitrary.
                      (        hdcmd.src):00836         *   Remember, E$Read errors are not in the table.
                      (        hdcmd.src):00837         *
                      (        hdcmd.src):00838         
049F                  (        hdcmd.src):00839         ERRTBL  fcb     WE$NSC,E$Seek,WE$WRF,E$Write,WE$NRD,E$NotRdy,WE$NT0,E$Seek
                      (        hdcmd.src):00840                 fcb     WE$DSS,E$Seek,WE$SIK,E$Seek,WE$BTK,E$Read,WE$CMD,E$Unit
                      (        hdcmd.src):00841                 fcb     WE$ISA,E$Sect
                      (        hdcmd.src):00842                 fcb     -1
                      (        hdcmd.src):00843         
                      (        hdcmd.src):00844             endc
                      (        hdcmd.src):00845         
                      (        hdcmd.src):00846         *
                      (        hdcmd.src):00847         *   End of hdcmd.src
                      (        hdcmd.src):00848         *
                      (        hdcmd.src):00849         
                      (        xtos9.src):00934         
                      (        xtos9.src):00935          page
                      (        xtos9.src):00936         *
                      (        xtos9.src):00937         *   Include routines to translate LSN & drive #
                      (        xtos9.src):00938         *   to a controller task file.
                      (        xtos9.src):00939         *
                      (        xtos9.src):00940         
                      (        xtos9.src):00941                 use     hdmath.src
                      (       hdmath.src):00001         *   COPYRIGHT BURKE & BURKE 1990
                      (       hdmath.src):00002         *   ALL RIGHTS RESERVED
                      (       hdmath.src):00003         *
                      (       hdmath.src):00004         *   COCO XT LSN / DRIVE -> TASK FILE CONVERSION
                      (       hdmath.src):00005         *
                      (       hdmath.src):00006         *   Version 2.0
                      (       hdmath.src):00007         *
                      (       hdmath.src):00008         *   Date        Who     Description
                      (       hdmath.src):00009         *   --------    ---     --------------------------
                      (       hdmath.src):00010         *   01-08-88    CJB     Coded from version 1.0
                      (       hdmath.src):00011         *                       Added GOBPtr routine and support for 2
                      (       hdmath.src):00012         *                        drives with different characteristics.
                      (       hdmath.src):00013         *                       Changed ST-225 support to work with any
                      (       hdmath.src):00014         *                        drive having 32 SPT and 4 heads (e.g.
                      (       hdmath.src):00015         *                        ST-238 w/ RLL & W9 in).
                      (       hdmath.src):00016         *   01/28/88    CJB     Changed LSN bounds check in XSETUP --
                      (       hdmath.src):00017         *                        compare to park LSN!
                      (       hdmath.src):00018         *   02/06/88    CJB     Fixed bug that caused loss of LSN MSbyte
                      (       hdmath.src):00019         *                        when supporting 2 drives.
                      (       hdmath.src):00020         *                       Eliminated need for DIVA and DIVY parameters
                      (       hdmath.src):00021         *   05/18/88            Added CNV99 to check for seek errors
                      (       hdmath.src):00022         *   12/12/88    cjb     Fixed bug in 1-drive XSETUP for park track
                      (       hdmath.src):00023         *   05/18/90    cjb     Added support for drives in multiple slots
                      (       hdmath.src):00024         *
                      (       hdmath.src):00025         
                      (       hdmath.src):00026         *
                      (       hdmath.src):00027         *  Get ready to read or write a sector
                      (       hdmath.src):00028         *
049F 1700FA           (       hdmath.src):00029         SETUP   lbsr    SELDRV
04A2 2502             (       hdmath.src):00030                  bcs    SETXIT
                      (       hdmath.src):00031         
04A4 8D01             (       hdmath.src):00032                 bsr     XSETUP
                      (       hdmath.src):00033         
04A6 39               (       hdmath.src):00034         SETXIT  rts 
                      (       hdmath.src):00035         
                      (       hdmath.src):00036             ifeq    trsflg              ;If not optimized for 4 heads, 32 SPT
                      (       hdmath.src):00037         
                      (       hdmath.src):00038         *
                      (       hdmath.src):00039         *  General setup for read or write.
                      (       hdmath.src):00040         *  Drive is already selected.
                      (       hdmath.src):00041         *
04A7 3434             (       hdmath.src):00042         XSETUP  pshs    y,x,b
                      (       hdmath.src):00043         
                      (       hdmath.src):00044             ifne    (Drives-1)
04A9 E6A821           (       hdmath.src):00045                 ldb     PD.DRV,Y
04AC 17012C           (       hdmath.src):00046                 lbsr    GOBPTR          ;Point Y to park LSN area
                      (       hdmath.src):00047         
04AF E6E4             (       hdmath.src):00048                 ldb     ,S              ;Recover MSByte of LSN
04B1 E121             (       hdmath.src):00049                 cmpb    (PRKLSN-OBSTART+0),Y
04B3 1022004F         (       hdmath.src):00050                  lbhi   BADSEC
04B7 2506             (       hdmath.src):00051                  bcs    XSET2           ;Branch if OK
                      (       hdmath.src):00052         
04B9 AC22             (       hdmath.src):00053                 cmpx    (PRKLSN-OBSTART+1),Y
04BB 10220047         (       hdmath.src):00054                  lbhi   BADSEC
                      (       hdmath.src):00055         
                      (       hdmath.src):00056         *  LSN is OK.  Still in B:X
                      (       hdmath.src):00057         
04BF 10AE63           (       hdmath.src):00058         XSET2   ldy     3,S     ;Recover PD pointer
                      (       hdmath.src):00059         
                      (       hdmath.src):00060             else
                      (       hdmath.src):00061                 cmpb    PRKLSN+0,U
                      (       hdmath.src):00062                  lbhi   BADSEC
                      (       hdmath.src):00063                  bcs    XSET2
                      (       hdmath.src):00064         
                      (       hdmath.src):00065                 cmpx    PRKLSN+1,U
                      (       hdmath.src):00066                  lbhi   BADSEC
                      (       hdmath.src):00067         
                      (       hdmath.src):00068         *  LSN is OK.  Still in B:X
                      (       hdmath.src):00069         
04C2                  (       hdmath.src):00070         XSET2   equ     *
                      (       hdmath.src):00071         
                      (       hdmath.src):00072             endc
                      (       hdmath.src):00073         
                      (       hdmath.src):00074         *
                      (       hdmath.src):00075         *   Convert LSN to cylinder, sector, head #'s
                      (       hdmath.src):00076         *   Save head.sector in TEMP
                      (       hdmath.src):00077         *
     04C2             (       hdmath.src):00078         CNVLSN  equ     *
                      (       hdmath.src):00079         
04C2 8D49             (       hdmath.src):00080                 bsr LSNDIV          ;track -> X, Head -> A, sector ->B
04C4 EDC844           (       hdmath.src):00081                 std temp,u          ;save head & sector for later
                      (       hdmath.src):00082         
04C7 5F               (       hdmath.src):00083                 clrb                ; (clear carry for ROR)
04C8 1F10             (       hdmath.src):00084                 tfr x,d             ;Cylinder number
04CA 46               (       hdmath.src):00085                 RORA
04CB 46               (       hdmath.src):00086                 RORA                ;get cylinder MSB's to top of byte
04CC 46               (       hdmath.src):00087                 RORA
04CD EDC83C           (       hdmath.src):00088                 std hicyl,u
                      (       hdmath.src):00089         
04D0 E6C845           (       hdmath.src):00090                 ldb     temp+1,U    ;Process sector #
04D3 C43F             (       hdmath.src):00091                 andb    #%00111111  ; (0-31 normal, 0-47 RLL)
04D5 E7C846           (       hdmath.src):00092                 stb     secnum,u    ;Save logical sector number
04D8 54               (       hdmath.src):00093                 lsrb                ; / 2 to get physical sector #
04D9 EAC83C           (       hdmath.src):00094                 orb     hicyl,U     ; OR in the physical sector number
04DC E7C83C           (       hdmath.src):00095                 stb     hicyl,U
                      (       hdmath.src):00096         
04DF A6C83B           (       hdmath.src):00097                 lda     sdhreg,U    ;save drive #; OR in head
04E2 8420             (       hdmath.src):00098                 anda    #%00100000
04E4 AAC844           (       hdmath.src):00099                 ora     temp+0,U
04E7 A7C83B           (       hdmath.src):00100                 sta     sdhreg,U
                      (       hdmath.src):00101         
04EA 8601             (       hdmath.src):00102                 lda     #1          ;read only 1 sector
04EC A7C83E           (       hdmath.src):00103                 sta     seccnt,U
                      (       hdmath.src):00104         
04EF 6DC83A           (       hdmath.src):00105                 tst    drvsem,u    ;is drive ready?
04F2 270B             (       hdmath.src):00106                  beq   CNVOK
                      (       hdmath.src):00107         
                      (       hdmath.src):00108         *
                      (       hdmath.src):00109         *   Drive is not ready.
                      (       hdmath.src):00110         *
04F4 6FC83A           (       hdmath.src):00111         CNV7    clr     drvsem,U
                      (       hdmath.src):00112         
                      (       hdmath.src):00113             ifne    (Drives-1)      ;If multiple drives,
                      (       hdmath.src):00114         *        ldy     actdrv,u
                      (       hdmath.src):00115         *        lda     V.TRAK,y
04F7 10AE63           (       hdmath.src):00116                 ldy     3,s         ;Restore PD pointer
                      (       hdmath.src):00117         *        cmpa    #$FF
                      (       hdmath.src):00118         *         bne    CNVOK       ;Implicit seek if current track known
04FA 170138           (       hdmath.src):00119                 lbsr    Seek        ;Explicit seek
                      (       hdmath.src):00120             else
                      (       hdmath.src):00121                 lda     DRVTBL+V.TRAK,U
                      (       hdmath.src):00122                 cmpa    #$FF
                      (       hdmath.src):00123                  bne    CNVOK       ;Implicit seek if current track known
                      (       hdmath.src):00124                 lbsr    SEEKT0      ;Else seek to track 0
                      (       hdmath.src):00125             endc
04FD 2503             (       hdmath.src):00126                  bcs    CNV99       ; report error if any encountered
                      (       hdmath.src):00127         
                      (       hdmath.src):00128         *  Generic exit w/o error from conversion
                      (       hdmath.src):00129         
04FF 5F               (       hdmath.src):00130         CNVOK   clrb
                      (       hdmath.src):00131         
0500 2402             (       hdmath.src):00132         CNV9    bcc     CNVXIT
                      (       hdmath.src):00133         
0502 E7E4             (       hdmath.src):00134         CNV99   stb     ,s          ;Set error code
                      (       hdmath.src):00135         
0504 35B4             (       hdmath.src):00136         CNVXIT  puls    b,x,y,PC
                      (       hdmath.src):00137         
                      (       hdmath.src):00138         *  Return bad sector error
                      (       hdmath.src):00139         
0506 3504             (       hdmath.src):00140         BADSEC  puls    b
0508 53               (       hdmath.src):00141                 comb 
0509 C6F1             (       hdmath.src):00142                 ldb     #E$Sect
050B 35B0             (       hdmath.src):00143                 puls    x,y,PC
                      (       hdmath.src):00144         
                      (       hdmath.src):00145          page
                      (       hdmath.src):00146         *
                      (       hdmath.src):00147         *   Convert LSN in B:X to track # in X
                      (       hdmath.src):00148         *   and head.sector (remainder) in D.  Enter with
                      (       hdmath.src):00149         *   Reg-U -> static storage and Reg-Y -> path descriptor.
                      (       hdmath.src):00150         *
                      (       hdmath.src):00151         *   Routine assumes that MSB of LSN is 0, and that
                      (       hdmath.src):00152         *   MSB of H*S is 0.
                      (       hdmath.src):00153         *
                      (       hdmath.src):00154         *   Start by dividing LSN by SPT*heads.  The quotient
                      (       hdmath.src):00155         *   is the track number.  Then divide the remainder by
                      (       hdmath.src):00156         *   SPT; the quotient is the head, and the remainder
                      (       hdmath.src):00157         *   is the sector.
                      (       hdmath.src):00158         *
050D 3434             (       hdmath.src):00159         LSNDIV  pshs    Y,X,B               ;Save Y, stack LSN for division
                      (       hdmath.src):00160         
                      (       hdmath.src):00161         *   Calculate SPT * heads
                      (       hdmath.src):00162         
050F A6A827           (       hdmath.src):00163                 lda     PD.SID,Y            ;Get sides
0512 E6A82A           (       hdmath.src):00164                 ldb     (PD.SCT+1),Y        ;Get reg-B = SPT
0515 3D               (       hdmath.src):00165                 mul
                      (       hdmath.src):00166         
0516 3406             (       hdmath.src):00167                 pshs    D
0518 6FE2             (       hdmath.src):00168                 clr     ,-S                 ;Now stack = heads*spt
                      (       hdmath.src):00169         
                      (       hdmath.src):00170         *   Calculate track # to X
                      (       hdmath.src):00171         
051A 8D16             (       hdmath.src):00172                 bsr     div24               ;divide, X=quotient, D=remainder
051C 3266             (       hdmath.src):00173                 leas    6,S                 ; discard temps
                      (       hdmath.src):00174         
051E 3410             (       hdmath.src):00175                 pshs    X                   ;Save track to return
                      (       hdmath.src):00176         
                      (       hdmath.src):00177         *   Now divide heads*SPT by SPT -- quickly
                      (       hdmath.src):00178         
0520 6FE2             (       hdmath.src):00179                 clr     ,-s
0522 63E4             (       hdmath.src):00180                 com     ,s
                      (       hdmath.src):00181         
0524 6CE4             (       hdmath.src):00182         LDV000  inc     ,s
0526 E0A82A           (       hdmath.src):00183                 subb    (PD.SCT+1),Y
0529 8200             (       hdmath.src):00184                 sbca    #0
052B 24F7             (       hdmath.src):00185                  bhs    LDV000
                      (       hdmath.src):00186         
052D EBA82A           (       hdmath.src):00187                 addb    (PD.SCT+1),Y        ;Get sector # to B
                      (       hdmath.src):00188         
0530 35B2             (       hdmath.src):00189                 puls    A,X,Y,PC            ;Get head to A, sector to B, track X
                      (       hdmath.src):00190         
                      (       hdmath.src):00191         *
                      (       hdmath.src):00192         *   Divide 24 bit 'M' by 24 bit 'N'.  Return 16 bit quotient
                      (       hdmath.src):00193         *   in Reg-X, 16 bit remainder in Reg-D.  Destroys M, N; leaves
                      (       hdmath.src):00194         *   carcasses on stack.  Preserves U, Y.
                      (       hdmath.src):00195         *
                      (       hdmath.src):00196         *   Entry:
                      (       hdmath.src):00197         *       M.l
                      (       hdmath.src):00198         *       M.m
                      (       hdmath.src):00199         *       M.h
                      (       hdmath.src):00200         *       N.l
                      (       hdmath.src):00201         *       N.m
                      (       hdmath.src):00202         *       N.h
                      (       hdmath.src):00203         *       P.l
                      (       hdmath.src):00204         *   SP->P.h
                      (       hdmath.src):00205         *
                      (       hdmath.src):00206         
0532 3420             (       hdmath.src):00207         div24   pshs    Y
                      (       hdmath.src):00208         
                      (       hdmath.src):00209         *   Push special division guys
                      (       hdmath.src):00210         
0534 CC0001           (       hdmath.src):00211                 ldd     #1
0537 3406             (       hdmath.src):00212                 pshs    D
0539 3402             (       hdmath.src):00213                 pshs    A                   ;24 bit "1" flag
                      (       hdmath.src):00214         
053B 5F               (       hdmath.src):00215                 clrb
053C 3406             (       hdmath.src):00216                 pshs    D
053E 3402             (       hdmath.src):00217                 pshs    A                   ;24 bits of 0's (result)
                      (       hdmath.src):00218         
                      (       hdmath.src):00219         *   Lotsa good stuff on stack.  Find biggest multiple of heads*spt
                      (       hdmath.src):00220         *   smaller than or = LSN
                      (       hdmath.src):00221         
0540 EC6D             (       hdmath.src):00222         LDV001  ldd     (8+2+3+0),S
0542 10A36A           (       hdmath.src):00223                 cmpd    (8+2+0+0),S
0545 2604             (       hdmath.src):00224                  bne    LDV002              ;carry set w/ which is more
                      (       hdmath.src):00225         
0547 A66F             (       hdmath.src):00226                 lda     (8+2+3+2),S
0549 A16C             (       hdmath.src):00227                 cmpa    (8+2+0+2),S
                      (       hdmath.src):00228         
                      (       hdmath.src):00229         *   Now CC set for LSN-HS
054B 250E             (       hdmath.src):00230         LDV002  bcs     LDV005              ;branch if HS > LSN
                      (       hdmath.src):00231         
                      (       hdmath.src):00232         *   Get to multiply HS etc by 2
                      (       hdmath.src):00233         
054D 6865             (       hdmath.src):00234                 asl     (3+2),S             ;bit flag * 2
054F 6964             (       hdmath.src):00235                 rol     (3+1),S
0551 6963             (       hdmath.src):00236                 rol     (3+0),S
                      (       hdmath.src):00237         
0553 686C             (       hdmath.src):00238                 asl     (8+2+0+2),S         ;HS * 2
0555 696B             (       hdmath.src):00239                 rol     (8+2+0+1),S
0557 696A             (       hdmath.src):00240                 rol     (8+2+0+0),S
                      (       hdmath.src):00241         
0559 20E5             (       hdmath.src):00242                 bra     LDV001
                      (       hdmath.src):00243         
                      (       hdmath.src):00244         *   Now HS is bigger than LSN.  Start dividing.
                      (       hdmath.src):00245         
055B 646A             (       hdmath.src):00246         LDV005  lsr     (8+2+0+0),S         ;HS / 2
055D 666B             (       hdmath.src):00247                 ror     (8+2+0+1),S
055F 666C             (       hdmath.src):00248                 ror     (8+2+0+2),S
                      (       hdmath.src):00249         
0561 6463             (       hdmath.src):00250                 lsr     (3+0),S             ;bit flag / 2
0563 6664             (       hdmath.src):00251                 ror     (3+1),S
0565 6665             (       hdmath.src):00252                 ror     (3+2),S
0567 251E             (       hdmath.src):00253                  bcs    LDV008              ; (branch if ready for remainder)
                      (       hdmath.src):00254         
0569 EC6E             (       hdmath.src):00255                 ldd     (8+2+3+1),S         ;LSN - HS.scaled
056B A36B             (       hdmath.src):00256                 subd    (8+2+0+1),S
056D ED6E             (       hdmath.src):00257                 std     (8+2+3+1),S
056F A66D             (       hdmath.src):00258                 lda     (8+2+3+0),S
0571 A26A             (       hdmath.src):00259                 sbca    (8+2+0+0),S
0573 A76D             (       hdmath.src):00260                 sta     (8+2+3+0),S
                      (       hdmath.src):00261         
0575 2408             (       hdmath.src):00262                  bcc    LDV007
                      (       hdmath.src):00263         
                      (       hdmath.src):00264         *   No good.  Restore LSN
                      (       hdmath.src):00265         
0577 316D             (       hdmath.src):00266                 leay    (8+2+3),S
0579 306A             (       hdmath.src):00267                 leax    (8+2+0),S
057B 8D12             (       hdmath.src):00268                 bsr     addxtoy             ;LSN + HS.scaled
057D 20DC             (       hdmath.src):00269                  bra    LDV005
                      (       hdmath.src):00270         
                      (       hdmath.src):00271         *   Good.  Add bit to result
                      (       hdmath.src):00272         
057F 31E4             (       hdmath.src):00273         LDV007  leay    0,S                 ;Quotient + bit
0581 3063             (       hdmath.src):00274                 leax    3,S
0583 8D0A             (       hdmath.src):00275                 bsr     addxtoy
0585 20D4             (       hdmath.src):00276                  bra    LDV005
                      (       hdmath.src):00277         
                      (       hdmath.src):00278         *   Now we've checked for all multiples of HS.
                      (       hdmath.src):00279         *   Quotient is at 0-2,S; remainder is where dividend was.
                      (       hdmath.src):00280         *   Quotient and remainder are known to be < 65536
                      (       hdmath.src):00281         
0587 AE61             (       hdmath.src):00282         LDV008  ldx     (0+1),S             ;get 16 bit quotient
0589 3266             (       hdmath.src):00283                 leas    6,S                 ;Deallocate quotient & temps
058B EC68             (       hdmath.src):00284                 ldd     (4+3+1),S           ;get 16 bit remainder
                      (       hdmath.src):00285         
058D 35A0             (       hdmath.src):00286                 puls    Y,PC
                      (       hdmath.src):00287         
                      (       hdmath.src):00288         *
                      (       hdmath.src):00289         *   Add 24 bits @X to 24 bits @Y
                      (       hdmath.src):00290         *
058F EC21             (       hdmath.src):00291         addxtoy ldd     1,Y
0591 E301             (       hdmath.src):00292                 addd    1,X
0593 ED21             (       hdmath.src):00293                 std     1,Y
0595 A6A4             (       hdmath.src):00294                 lda     0,Y
0597 A984             (       hdmath.src):00295                 adca    0,X
0599 A7A4             (       hdmath.src):00296                 sta     0,Y
059B 39               (       hdmath.src):00297                 rts
                      (       hdmath.src):00298         
                      (       hdmath.src):00299             else
                      (       hdmath.src):00300         
                      (       hdmath.src):00301         *
                      (       hdmath.src):00302         *   General setup for read or write.
                      (       hdmath.src):00303         *   Drive is already selected.
                      (       hdmath.src):00304         *
                      (       hdmath.src):00305         *   Optimized for drives such as ST-225, with
                      (       hdmath.src):00306         *   32 double-sectors / track.  This version
                      (       hdmath.src):00307         *   works only with 4 heads.
                      (       hdmath.src):00308         *
                      (       hdmath.src):00309         *  Reg-Y points to path descriptor.
                      (       hdmath.src):00310         *  Drive # already set up in SDHREG,U
                      (       hdmath.src):00311         *
059C                  (       hdmath.src):00312         XSETUP  pshs    y,x,b
                      (       hdmath.src):00313         
                      (       hdmath.src):00314             ifne    (Drives-1)
                      (       hdmath.src):00315                 ldy     actdrv,u    ;Verify legal LSN (fetch drive table pointer)
                      (       hdmath.src):00316         
                      (       hdmath.src):00317                 cmpb    DD.TOT,y
                      (       hdmath.src):00318                  lbhi   BADSEC
                      (       hdmath.src):00319                  bcs    XSET2      ;Branch if OK
                      (       hdmath.src):00320         
                      (       hdmath.src):00321                 cmpx    DD.TOT+1,y
                      (       hdmath.src):00322                  lbcc   BADSEC
                      (       hdmath.src):00323         
                      (       hdmath.src):00324         *  LSN is OK.  Still in B:X
                      (       hdmath.src):00325         
059C                  (       hdmath.src):00326         XSET2   ldy     3,S     ;Recover PD pointer
                      (       hdmath.src):00327         
                      (       hdmath.src):00328             else
                      (       hdmath.src):00329                 cmpb    DRVTBL+DD.TOT,U
                      (       hdmath.src):00330                  lbhi   BADSEC
                      (       hdmath.src):00331                  bcs    XSET2
                      (       hdmath.src):00332         
                      (       hdmath.src):00333                 cmpx    DRVTBL+DD.TOT+1,U
                      (       hdmath.src):00334                  lbcc   BADSEC
                      (       hdmath.src):00335         
                      (       hdmath.src):00336         *  LSN is OK.  Still in B:X
                      (       hdmath.src):00337         
059C                  (       hdmath.src):00338         XSET2   equ     *
                      (       hdmath.src):00339         
                      (       hdmath.src):00340             endc
                      (       hdmath.src):00341         
                      (       hdmath.src):00342         *
                      (       hdmath.src):00343         *   These drives have 4 heads, 32 sectors / track.
                      (       hdmath.src):00344         *   The LSN is known to be in range.
                      (       hdmath.src):00345         *
                      (       hdmath.src):00346         
                      (       hdmath.src):00347                 pshs    x,b     ;Calculate track = LSN / (32*4); format for controller
                      (       hdmath.src):00348                 ldd     ,s
                      (       hdmath.src):00349                 addd    ,s          ;double MS word of LSN; /128 is like *2 / 256.
                      (       hdmath.src):00350                 tst     2,s         ; (there's never a carry from ADDD)
                      (       hdmath.src):00351                  bpl    XSET3
                      (       hdmath.src):00352         
                      (       hdmath.src):00353                 incb                ;add in MSB of LS byte if needed -- never a carry
                      (       hdmath.src):00354         
                      (       hdmath.src):00355         *  NOTE -- carry must be clear here.
                      (       hdmath.src):00356         
059C                  (       hdmath.src):00357         XSET3   rora            ;Controller likes 2 MS bits of cylinder in MS bits of A
                      (       hdmath.src):00358                 rora
                      (       hdmath.src):00359                 rora
                      (       hdmath.src):00360                 std     hicyl,U     ; (don't need to format Reg-B)
                      (       hdmath.src):00361         
                      (       hdmath.src):00362                 ldb     2,s         ;Calculate logical sector and physical sector
                      (       hdmath.src):00363                 andb    #%00011111  ; (0-31 ALWAYS -- W9 in for RLL)
                      (       hdmath.src):00364                 stb     secnum,u
                      (       hdmath.src):00365                 lsrb                ; (physical sector is 1/2 logical -- 0-15)
                      (       hdmath.src):00366                 orb     hicyl,u
                      (       hdmath.src):00367                 stb     hicyl,u     ;format correctly
                      (       hdmath.src):00368         
                      (       hdmath.src):00369                 ldb     2,s         ;Calculate head number = LSN / 32
                      (       hdmath.src):00370                 lda     #8
                      (       hdmath.src):00371                 mul                 ; now head number is in Reg-A
                      (       hdmath.src):00372                 anda    #%00000011
                      (       hdmath.src):00373                 pshs    a
                      (       hdmath.src):00374                 lda     sdhreg,u
                      (       hdmath.src):00375                 anda    #%00100000  ; (save only the drive # from SELDRV)
                      (       hdmath.src):00376                 ora     ,s+
                      (       hdmath.src):00377                 sta     sdhreg,u    ; format for controller and save
                      (       hdmath.src):00378         
                      (       hdmath.src):00379                 lda     #1          ;Set up sector count
                      (       hdmath.src):00380                 sta     seccnt,u
                      (       hdmath.src):00381         
                      (       hdmath.src):00382                 leas    3,s         ;Discard stack stuff
                      (       hdmath.src):00383         
                      (       hdmath.src):00384         *  Done with task file.
                      (       hdmath.src):00385                 tst     drvsem,u    ;Is drive ready?
                      (       hdmath.src):00386                  beq    CNVOK
                      (       hdmath.src):00387         
                      (       hdmath.src):00388         *  Drive not ready; perform seek
059C                  (       hdmath.src):00389         CNV7    clr     drvsem,u
                      (       hdmath.src):00390         
                      (       hdmath.src):00391             ifne    (Drives-1)      ;If multiple drives,
                      (       hdmath.src):00392         *        ldy     actdrv,u
                      (       hdmath.src):00393         *        lda     V.TRAK,y
                      (       hdmath.src):00394                 ldy     3,s         ;Restore PD pointer
                      (       hdmath.src):00395         *        cmpa    #$FF
                      (       hdmath.src):00396         *         bne    CNVOK       ;Implicit seek if current track known
                      (       hdmath.src):00397                 lbsr    Seek        ;Explicit seek
                      (       hdmath.src):00398             else
                      (       hdmath.src):00399                 lda     DRVTBL+V.TRAK,U
                      (       hdmath.src):00400                 cmpa    #$FF
                      (       hdmath.src):00401                  bne    CNVOK       ;Implicit seek if current track known
                      (       hdmath.src):00402                 lbsr    SEEKT0      ;Else seek to track 0
                      (       hdmath.src):00403             endc
                      (       hdmath.src):00404                  bcs    CNV99
                      (       hdmath.src):00405         
                      (       hdmath.src):00406         *  Generic conversion exit with no error
059C                  (       hdmath.src):00407         CNVOK   clrb 
                      (       hdmath.src):00408         
059C                  (       hdmath.src):00409         CNV9    bcc     CNVXIT
                      (       hdmath.src):00410         
059C                  (       hdmath.src):00411         CNV99   stb     ,s
                      (       hdmath.src):00412         
059C                  (       hdmath.src):00413         CNVXIT  puls    b,x,y,PC
                      (       hdmath.src):00414         
                      (       hdmath.src):00415         *  Return bad sector error
059C                  (       hdmath.src):00416         BADSEC  puls    b
                      (       hdmath.src):00417                 comb 
                      (       hdmath.src):00418                 ldb     #E$Sect
                      (       hdmath.src):00419                 puls    x,y,PC
                      (       hdmath.src):00420         
                      (       hdmath.src):00421             endc
                      (       hdmath.src):00422         
                      (       hdmath.src):00423         *
                      (       hdmath.src):00424         *   Perform drive selection calculations
                      (       hdmath.src):00425         *
     059C             (       hdmath.src):00426         SELDRV  equ     *
                      (       hdmath.src):00427         
                      (       hdmath.src):00428             ifne    (Drives-1)          ;If multiple drives supported,
                      (       hdmath.src):00429         
059C A6A821           (       hdmath.src):00430                 lda     PD.DRV,Y
059F 8102             (       hdmath.src):00431                 cmpa    #Drives         ;Is drive # OK?
05A1 2504             (       hdmath.src):00432                  bcs    SD0
                      (       hdmath.src):00433         
                      (       hdmath.src):00434         *  Illegal drive error
05A3 53               (       hdmath.src):00435                 comb
05A4 C6F0             (       hdmath.src):00436                 ldb     #E$Unit
                      (       hdmath.src):00437         
05A6 39               (       hdmath.src):00438         SD.XIT  rts
                      (       hdmath.src):00439         
                      (       hdmath.src):00440         *   Drive # in A is OK.  Set semaphore based on 
                      (       hdmath.src):00441         *   current and prev. drive;
                      (       hdmath.src):00442         
05A7 6FC83A           (       hdmath.src):00443         SD0     clr     drvsem,U        ;Assume same drive.
05AA A1C839           (       hdmath.src):00444                 cmpa    prvdrv,U        ;Same as previous?
05AD 270E             (       hdmath.src):00445                  beq    SD1             ; (if so, we're already set up)
                      (       hdmath.src):00446         
                      (       hdmath.src):00447         *  Set flag to indicate new drive, and wait for drive ready
                      (       hdmath.src):00448         
05AF A7C839           (       hdmath.src):00449                 sta     prvdrv,U
05B2 6AC83A           (       hdmath.src):00450                 dec     drvsem,U
05B5 17FAEA           (       hdmath.src):00451                 lbsr    WaiDrv          ;Wait -- preserve D,X,Y,U
05B8 25EC             (       hdmath.src):00452                  bcs    SD.XIT          ; (abort if drive not ready)
                      (       hdmath.src):00453             ifne    cchflg          ;If cache supported,
05BA 6FC843           (       hdmath.src):00454                 clr     BfrFlg,U        ;Mark cache data invalid
                      (       hdmath.src):00455             endc
                      (       hdmath.src):00456         
                      (       hdmath.src):00457         *  Convert drive # to controller's format
                      (       hdmath.src):00458         
05BD 8401             (       hdmath.src):00459         SD1     anda    #$01            ;2 drives / controller, but allow slots
05BF 48               (       hdmath.src):00460                 asla
05C0 48               (       hdmath.src):00461                 asla
05C1 48               (       hdmath.src):00462                 asla
05C2 48               (       hdmath.src):00463                 asla
05C3 48               (       hdmath.src):00464                 asla
05C4 3402             (       hdmath.src):00465                 pshs    a
05C6 A6C83B           (       hdmath.src):00466                 lda     sdhreg,U        ;get old value
05C9 840F             (       hdmath.src):00467                 anda    #%00001111      ; (save head #)
05CB AAE0             (       hdmath.src):00468                 ora     ,s+
05CD A7C83B           (       hdmath.src):00469                 sta     sdhreg,U
                      (       hdmath.src):00470         
05D0 3410             (       hdmath.src):00471                 pshs    x
05D2 AEA81E           (       hdmath.src):00472                 ldx     PD.DTB,Y        ;get pointer to drive table
05D5 AFC837           (       hdmath.src):00473                 stx     ACTDRV,U
05D8 3510             (       hdmath.src):00474                 puls    x
                      (       hdmath.src):00475         
                      (       hdmath.src):00476             else
                      (       hdmath.src):00477         
                      (       hdmath.src):00478                 lda     sdhreg,U        ;get old value
                      (       hdmath.src):00479                 anda    #%00001111      ; save head #, force drive # to 0
                      (       hdmath.src):00480                 sta     sdhreg,U
                      (       hdmath.src):00481         
                      (       hdmath.src):00482             endc
                      (       hdmath.src):00483         
                      (       hdmath.src):00484         *  Carry clear unless error
05DA 39               (       hdmath.src):00485         SDXIT   rts
                      (       hdmath.src):00486         
                      (       hdmath.src):00487             ifne    (Drives-1)          ;For 2 drive systems,
                      (       hdmath.src):00488         
                      (       hdmath.src):00489             page
                      (       hdmath.src):00490         *
                      (       hdmath.src):00491         *   Calculate pointer to drive PCCYL, DIVA, DIVY, and PRKTRK
                      (       hdmath.src):00492         *   parameters, based on drive # in Reg-B.  Return ptr in Y.
                      (       hdmath.src):00493         *
                      (       hdmath.src):00494         *   Assumes U->static storage
                      (       hdmath.src):00495         *
05DB 3406             (       hdmath.src):00496         GOBPtr  pshs    D
05DD 8604             (       hdmath.src):00497                 lda     #OBSIZE         ;(size of option packet for each drive)
05DF 3D               (       hdmath.src):00498                 mul
05E0 31C849           (       hdmath.src):00499                 leay    OBSTART,U
05E3 31AB             (       hdmath.src):00500                 leay    D,Y             ;Point to options for correct drive
05E5 3586             (       hdmath.src):00501                 puls    D,PC
                      (       hdmath.src):00502         
                      (       hdmath.src):00503             endc
                      (       hdmath.src):00504         
                      (       hdmath.src):00505         *
                      (       hdmath.src):00506         *   end of hdmath.src
                      (       hdmath.src):00507         *
                      (       hdmath.src):00508         
                      (        xtos9.src):00942         
                      (        xtos9.src):00943          page
                      (        xtos9.src):00944         *
                      (        xtos9.src):00945         *   Include utility routines.
                      (        xtos9.src):00946         *
                      (        xtos9.src):00947         
                      (        xtos9.src):00948                 use     hdutil3.src
                      (      hdutil3.src):00001         *   COPYRIGHT BURKE & BURKE 1987
                      (      hdutil3.src):00002         *   ALL RIGHTS RESERVED
                      (      hdutil3.src):00003         *
                      (      hdutil3.src):00004         *   COCO XT UTILITY ROUTINES
                      (      hdutil3.src):00005         *
                      (      hdutil3.src):00006         *   Date        Who     Description
                      (      hdutil3.src):00007         *   --------    ---     ---------------------------------
                      (      hdutil3.src):00008         *   08-14-87    CJB     Added modification history.
                      (      hdutil3.src):00009         *                       Added assembly switch for controller
                      (      hdutil3.src):00010         *                        in slot 1.
                      (      hdutil3.src):00011         *
                      (      hdutil3.src):00012         *   10-26-87    CJB     Added conditional assembly to leave
                      (      hdutil3.src):00013         *                       interrupts enabled if IRQFLG zero.
                      (      hdutil3.src):00014         *
                      (      hdutil3.src):00015         *   11-20-87    CJB     Fixed IRQ DISABLE bug (uses switch IRQFLG)
                      (      hdutil3.src):00016         *                       Added work-around for F$SLEEP bug (GRFDRV ONLY)
                      (      hdutil3.src):00017         *
                      (      hdutil3.src):00018         *   12-20-87    CJB     Added routine to sleep or delay while waiting
                      (      hdutil3.src):00019         *                       for disk seeks (SNOOZE)
                      (      hdutil3.src):00020         *
                      (      hdutil3.src):00021         *   01/28/88    CJB     Added improved slot switching and slot
                      (      hdutil3.src):00022         *                       independence.  Slot # in PD.DNS
                      (      hdutil3.src):00023         *
                      (      hdutil3.src):00024         *   02/08/88    CJB     Added SAVSLT for improved read cache performance
                      (      hdutil3.src):00025         *   05/18/88    cjb     Added CLR V.WAKE,U in SLOT4 routine
                      (      hdutil3.src):00026         *   07/14/91    cjb     Rev. 2.5 added support for fast recalibration
                      (      hdutil3.src):00027         *
                      (      hdutil3.src):00028         
                      (      hdutil3.src):00029          page
                      (      hdutil3.src):00030         *
                      (      hdutil3.src):00031         *   Select HD controller slot SPARESEL in multi-Pak.
                      (      hdutil3.src):00032         *
                      (      hdutil3.src):00033         *   Enter w/ Reg-U -> static storage,
                      (      hdutil3.src):00034         *   Reg-Y -> path descriptor
                      (      hdutil3.src):00035         *
                      (      hdutil3.src):00036         *   The active ROM/CART slot is preserved.
                      (      hdutil3.src):00037         *
                      (      hdutil3.src):00038         *   This routine is normally called with interrupts enabled.
                      (      hdutil3.src):00039         *   It disables them if IRQFLG is 1, for use on L1, V1
                      (      hdutil3.src):00040         *   systems.
                      (      hdutil3.src):00041         *
                      (      hdutil3.src):00042         *   Note that this routine does *NOT* set the DMA semaphore.
                      (      hdutil3.src):00043         *   This is only done once, at the very beginning of each command.
                      (      hdutil3.src):00044         *
     05E7             (      hdutil3.src):00045         SLOT3   equ     *
                      (      hdutil3.src):00046         
                      (      hdutil3.src):00047             ifeq    IRQFLG              ;If level 2, or version 2 of level 1
                      (      hdutil3.src):00048                 pshs    CC              ;Save entry CC
                      (      hdutil3.src):00049             endc
                      (      hdutil3.src):00050         
05E7 1A50             (      hdutil3.src):00051                 orcc    #$50        ;No interrupts during MPAK update
                      (      hdutil3.src):00052         
05E9 8D09             (      hdutil3.src):00053                 bsr     SavSlt          ;Save old slot #, get to A
05EB 84F0             (      hdutil3.src):00054                 anda    #%11110000
05ED AAA824           (      hdutil3.src):00055                 ora     PD.DNS,Y        ;Use device's slot #
05F0 B7FF7F           (      hdutil3.src):00056                 sta     >MPAK
                      (      hdutil3.src):00057         
                      (      hdutil3.src):00058             ifeq    IRQFLG              ;If level 2, or version 2 of level 1
                      (      hdutil3.src):00059                 puls    CC,PC           ; restore entry CC
                      (      hdutil3.src):00060             else
05F3 39               (      hdutil3.src):00061                 rts                     ; exit with interrupts disabled
                      (      hdutil3.src):00062             endc
                      (      hdutil3.src):00063         
                      (      hdutil3.src):00064         *   Utility to save old slot
                      (      hdutil3.src):00065         *   Preserves B:X
                      (      hdutil3.src):00066         
05F4 B6FF7F           (      hdutil3.src):00067         SavSlt  lda     >MPAK
05F7 A7C848           (      hdutil3.src):00068                 sta     OldSlt,U
05FA 39               (      hdutil3.src):00069                 rts
                      (      hdutil3.src):00070         
                      (      hdutil3.src):00071         *
                      (      hdutil3.src):00072         *   Restore original slot SPARESEL in multi-PAK.
                      (      hdutil3.src):00073         *
                      (      hdutil3.src):00074         *   Enter w/ Reg-U -> static storage
                      (      hdutil3.src):00075         *
                      (      hdutil3.src):00076         *   This routine preserves carry and B, since it is called
                      (      hdutil3.src):00077         *   before returning an error code.
                      (      hdutil3.src):00078         *
                      (      hdutil3.src):00079         *   The active ROM slot and CART interrupt is also preserved.
                      (      hdutil3.src):00080         *
                      (      hdutil3.src):00081         *   This routine is always called with interrupts disabled.
                      (      hdutil3.src):00082         *   (or with interrupts enabled and SLOT4 selected already)
                      (      hdutil3.src):00083         *   It always enables interrupts.
                      (      hdutil3.src):00084         *
                      (      hdutil3.src):00085         *   Note that this routine does *NOT* clear the DMA semaphore
                      (      hdutil3.src):00086         *   unless entered at Release.  This is only done once, at 
                      (      hdutil3.src):00087         *   the very end of each command.
                      (      hdutil3.src):00088         *
05FB 1A50             (      hdutil3.src):00089         Release orcc    #$50            ;Force no interrupts during updates
                      (      hdutil3.src):00090         
05FD 8600             (      hdutil3.src):00091                 lda     #0              ;preserve carry
                      (      hdutil3.src):00092         *        sta     >D.DMAReq       ;clear "DMA in use" semaphore
05FF B7006A           (      hdutil3.src):00093                 sta     >DMASEM         ;Zero OS9 level-dependent semaphore
                      (      hdutil3.src):00094         
0602 1A50             (      hdutil3.src):00095         SLOT4   orcc    #$50            ;Force no interrupts during update
                      (      hdutil3.src):00096         
0604 A6C848           (      hdutil3.src):00097                 lda     OLDSLT,U        ;Recover old slot
0607 B7FF7F           (      hdutil3.src):00098                 sta     >MPAK
060A 8600             (      hdutil3.src):00099                 lda     #0              ;Preserve carry
060C A745             (      hdutil3.src):00100                 sta     V.WAKE,U        ;Free anyone waiting on us.
                      (      hdutil3.src):00101         
060E 1CAF             (      hdutil3.src):00102                 andcc   #$AF            ;Enable interrupts
0610 39               (      hdutil3.src):00103                 rts
                      (      hdutil3.src):00104         
                      (      hdutil3.src):00105         *
                      (      hdutil3.src):00106         *   Wait for end of other processes disk I/O.  This is
                      (      hdutil3.src):00107         *   indicated by semaphore $6A = 0.  Grab semaphore
                      (      hdutil3.src):00108         *   as soon as it frees up.
                      (      hdutil3.src):00109         *
                      (      hdutil3.src):00110         *   Assumes slot 3 is selected at entry, and interrupts
                      (      hdutil3.src):00111         *   are enabled.
                      (      hdutil3.src):00112         *
                      (      hdutil3.src):00113         *   Always exits with slot 3 selected and interrupts disabled.
                      (      hdutil3.src):00114         *
0611 3477             (      hdutil3.src):00115         Semfor  pshs    U,X,Y,B,A,CC
                      (      hdutil3.src):00116         
                      (      hdutil3.src):00117         *  Wait for semaphore loop . . .
0613 1A50             (      hdutil3.src):00118         Sem0    orcc    #$50            ;No interrupts!
                      (      hdutil3.src):00119         
0615 7D006A           (      hdutil3.src):00120                 tst     >DMASEM         ;Check OS9 level-dependent semaphore
                      (      hdutil3.src):00121         *        tst     >D.DMAReq       ;Check semaphore
0618 260B             (      hdutil3.src):00122                  bne    W6.SLP
                      (      hdutil3.src):00123         
                      (      hdutil3.src):00124         *  Semaphore is free.  Grab it.
                      (      hdutil3.src):00125         
061A 7A006A           (      hdutil3.src):00126                 dec     >DMASEM         ;Grab OS9 level-dependent semaphore
                      (      hdutil3.src):00127         *        dec     >D.DMAReq       ;Grab semaphore!
061D 3577             (      hdutil3.src):00128                 puls    CC,A,B,Y,X,U    ;restore interrupts, etc
061F 20C6             (      hdutil3.src):00129                 bra     Slot3           ; and select hard disk controller
                      (      hdutil3.src):00130         
                      (      hdutil3.src):00131         *
                      (      hdutil3.src):00132         *   Routine to waste time during disk seeks, etc.
                      (      hdutil3.src):00133         *
                      (      hdutil3.src):00134         *   On systems that support D.DMAReq, we set the slot to 4 and
                      (      hdutil3.src):00135         *   give up the processor.  Otherwise, we return immediately.
                      (      hdutil3.src):00136         *
0621 3476             (      hdutil3.src):00137         Snooze  pshs    U,Y,X,D
                      (      hdutil3.src):00138         
                      (      hdutil3.src):00139             ifeq    IRQFLG              ;If D.DMAReq,
                      (      hdutil3.src):00140                 bsr     TikNap          ; surrender slot and processor
                      (      hdutil3.src):00141                 bsr     Slot3           ; map controller in again
                      (      hdutil3.src):00142             endc
                      (      hdutil3.src):00143         
0623 35F6             (      hdutil3.src):00144                 puls    D,X,Y,U,PC
                      (      hdutil3.src):00145         
                      (      hdutil3.src):00146         *  Semaphore is busy.  Sleep a bit.
0625 8D02             (      hdutil3.src):00147         W6.SLP  bsr     TikNap          ;Surrender the processor
0627 20EA             (      hdutil3.src):00148                 bra     Sem0
                      (      hdutil3.src):00149         
                      (      hdutil3.src):00150         *
                      (      hdutil3.src):00151         *   Force slot 4, enable interrupts,
                      (      hdutil3.src):00152         *   Sleep for the rest of this tick.
                      (      hdutil3.src):00153         *
0629 3410             (      hdutil3.src):00154         TikNap  pshs    X               ;Save entry X
062B 8DD5             (      hdutil3.src):00155                 bsr     Slot4           ;Select slot 4, enable interrupts
                      (      hdutil3.src):00156         
                      (      hdutil3.src):00157             ifne    (XLEVEL-1)      ;If Level 2,
                      (      hdutil3.src):00158                 ldx     <D.SYSPRC
                      (      hdutil3.src):00159                 cmpx    <DPROC
                      (      hdutil3.src):00160                  beq    TikXit          ;WORKAROUND -- IF LOADING GRFDRV, NO SLEEP!
                      (      hdutil3.src):00161             endc
                      (      hdutil3.src):00162         
062D 8E0001           (      hdutil3.src):00163                 ldx     #1
0630 103F0A           (      hdutil3.src):00164                 OS9     F$Sleep         ;Give up the rest of this tick
                      (      hdutil3.src):00165         
0633 3590             (      hdutil3.src):00166         TikXit  puls    X,PC
                      (      hdutil3.src):00167         
                      (      hdutil3.src):00168          page
                      (      hdutil3.src):00169         *
                      (      hdutil3.src):00170         *  Perform a SEEK command
                      (      hdutil3.src):00171         *
0635 860B             (      hdutil3.src):00172         SEEK    lda     #WX$SIK    ;Construct "SEEK" command
0637 17FCBF           (      hdutil3.src):00173                 lbsr    CmExec
063A 39               (      hdutil3.src):00174                 rts 
                      (      hdutil3.src):00175         
                      (      hdutil3.src):00176         *
                      (      hdutil3.src):00177         *  Seek to track 0
                      (      hdutil3.src):00178         *
063B 6DA822           (      hdutil3.src):00179         SEEKT0  tst     PD.STP,Y
063E 2A02             (      hdutil3.src):00180                  bpl    ST0A
                      (      hdutil3.src):00181         
                      (      hdutil3.src):00182         *   Here for drives that don't need recalibration
                      (      hdutil3.src):00183         *   Just return immediately.
                      (      hdutil3.src):00184         
0640 5F               (      hdutil3.src):00185                 clrb
0641 39               (      hdutil3.src):00186                 rts
                      (      hdutil3.src):00187         
                      (      hdutil3.src):00188         *   Here for drives that need it
                      (      hdutil3.src):00189         
0642 8601             (      hdutil3.src):00190         ST0A    lda     #WX$TK0      ;Create "RECALIBRATE" command
0644 17FCB2           (      hdutil3.src):00191                 lbsr    CmExec
0647 2509             (      hdutil3.src):00192                  bcs ST0XIT
                      (      hdutil3.src):00193         
                      (      hdutil3.src):00194             ifne    (Drives-1)
0649 AEC837           (      hdutil3.src):00195                 ldx     actdrv,u   ;Clear track number in active drive table
064C 6F8815           (      hdutil3.src):00196                 clr     V.TRAK,x
064F 6F8816           (      hdutil3.src):00197                 clr     V.TRAK+1,x
                      (      hdutil3.src):00198             else
                      (      hdutil3.src):00199                 clr     DRVTBL+V.TRAK,U
                      (      hdutil3.src):00200                 clr     DRVTBL+V.TRAK+1,U
                      (      hdutil3.src):00201             endc
                      (      hdutil3.src):00202         
0652 39               (      hdutil3.src):00203         ST0XIT  rts
                      (      hdutil3.src):00204         
                      (      hdutil3.src):00205         *
                      (      hdutil3.src):00206         *   end of hdutil3.src
                      (      hdutil3.src):00207         *
                      (        xtos9.src):00949         
0653 FF66AD           (        xtos9.src):00950          emod
     0656             (        xtos9.src):00951         cchend equ *
                      (        xtos9.src):00952         
                      (        xtos9.src):00953          end
