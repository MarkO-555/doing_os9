                      (/home/strick/6809):00001         ********************************************************************
                      (/home/strick/6809):00002         * DDisk - Dragon Floppy driver
                      (/home/strick/6809):00003         *
                      (/home/strick/6809):00004         * $Id$
                      (/home/strick/6809):00005         *
                      (/home/strick/6809):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/home/strick/6809):00007         * Comment
                      (/home/strick/6809):00008         * ------------------------------------------------------------------
                      (/home/strick/6809):00009         *   -      ????/??/??
                      (/home/strick/6809):00010         * Original Dragon Data distribution version
                      (/home/strick/6809):00011         *
                      (/home/strick/6809):00012         * Added Defines for IO ports.
                      (/home/strick/6809):00013         *                  2004/11/09, P.Harvey-Smith
                      (/home/strick/6809):00014         *       
                      (/home/strick/6809):00015         * Dragon Alpha code, 2004-11-09, P.Harvey-Smith.
                      (/home/strick/6809):00016         *       I am not sure of how to disable NMI on the Alpha, it is
                      (/home/strick/6809):00017         *       simulated in software using the NMIFlag.
                      (/home/strick/6809):00018         *
                      (/home/strick/6809):00019         *       The Dragon Alpha/Professional uses the same FDC chip as 
                      (/home/strick/6809):00020         *       DragonDos, however it is mapped between FF2C and FF2F,
                      (/home/strick/6809):00021         *       also the register order is REVERSED, so command/status is at
                      (/home/strick/6809):00022         *       FF2F.
                      (/home/strick/6809):00023         *
                      (/home/strick/6809):00024         *       Drive Selects, motor and write precompensation is controled
                      (/home/strick/6809):00025         *       through the IO port of an AY-8912, which itself is connected
                      (/home/strick/6809):00026         *       to a 3rd PIA mapped at FF24 to FF27, this PIA also has it's
                      (/home/strick/6809):00027         *       inturrupt lines connected to the CPU's FIRQ.
                      (/home/strick/6809):00028         *
                      (/home/strick/6809):00029         * 2004-11-15, P.Harvey-Smith.
                      (/home/strick/6809):00030         *       Fixed bug in inturrupt handling code that was making the 
                      (/home/strick/6809):00031         *       Dragon Alpha crash if a disk was accessed with no disk 
                      (/home/strick/6809):00032         *       in the drive. As the Alpha is using a simulated NMI disable
                      (/home/strick/6809):00033         *       we have to ensure that the NMI enabling routine has completed
                      (/home/strick/6809):00034         *       BEFORE isuing a command to the disk controler, or if the 
                      (/home/strick/6809):00035         *       inturrupt happens in the middle of the enable routine it 
                      (/home/strick/6809):00036         *       causes the machine to crash !
                      (/home/strick/6809):00037         *
                      (/home/strick/6809):00038         * 2004-11-24, P.Harvey-Smith.
                      (/home/strick/6809):00039         *       Fixed up so that double sided disks now work, origional 
                      (/home/strick/6809):00040         *       double sided code taken from Jon Bird's pages at :
                      (/home/strick/6809):00041         *       http://www.onastick.clara.net/dragon.html and modified 
                      (/home/strick/6809):00042         *       for NitrOS9.
                      (/home/strick/6809):00043         * 
                      (/home/strick/6809):00044         * 2004-11-27, P.Harvey-Smith.
                      (/home/strick/6809):00045         *       Reformatted with tab=8.
                      (/home/strick/6809):00046         *
                      (/home/strick/6809):00047         * 2005-04-22, P.Harvey-Smith.
                      (/home/strick/6809):00048         *       Hopefully fixed a bug that was causing the Dragon 64 target to
                      (/home/strick/6809):00049         *       crash and burn when reading disks, this made a successfull boot 
                      (/home/strick/6809):00050         *       almost imposible ! Fixed by writing disk command before writing
                      (/home/strick/6809):00051         *       disc control register, the Alpha target needs them the other way 
                      (/home/strick/6809):00052         *       around. Still has a problem doing lots of retries.
                      (/home/strick/6809):00053         *
                      (/home/strick/6809):00054         * 2005-04-24, P.Harvey-Smith.
                      (/home/strick/6809):00055         *       Fixed constant lost data errors reading disks, again by slightly 
                      (/home/strick/6809):00056         *       re-ordering the instructions in the read data loop.
                      (/home/strick/6809):00057         *       
                      (/home/strick/6809):00058         * 2005-04-24, P.Harvey-Smith.
                      (/home/strick/6809):00059         *       Removed debugging code/messages.
                      (/home/strick/6809):00060         *
                      (/home/strick/6809):00061         * 2005-05-31, P.Harvey-Smith.
                      (/home/strick/6809):00062         *       Added ability to read, write and format standard OS-9 format disks 
                      (/home/strick/6809):00063         *       including single denity, and disks with track 0 single denisity, but
                      (/home/strick/6809):00064         *       all other tracks double density.
                      (/home/strick/6809):00065         *       
                      (/home/strick/6809):00066         *       Added code to make step rates work as on the rb1773 driver, they where
                      (/home/strick/6809):00067         *       previously working back to front.
                      (/home/strick/6809):00068         *
                      (/home/strick/6809):00069         * 2005-06-06, P.Harvey-Smith.
                      (/home/strick/6809):00070         *       Verified as working on a real Alpha, by Richard Harding.
                      (/home/strick/6809):00071         *
                      (/home/strick/6809):00072         * 2005-06-16, P.Harvey-Smith.
                      (/home/strick/6809):00073         *       Added NMI enable/disable code, as I know know how to enable/disable
                      (/home/strick/6809):00074         *       NMI on the Alpha, having disasembled the Alpha's OS9's ddisk.
                      (/home/strick/6809):00075         *
                      (/home/strick/6809):00076         * 2005-06-17, P.Harvey-Smith.
                      (/home/strick/6809):00077         *       Ok, this'll teach me to submit code before testing on the real hardware !
                      (/home/strick/6809):00078         *       Seperated NMI disable/drive select code on alpha, as above patches
                      (/home/strick/6809):00079         *       worked fine on Mess, but not on real hardware (timing problems).
                      (/home/strick/6809):00080         *
                      (/home/strick/6809):00081         * 2006-01-08, P.Harvey-Smith.
                      (/home/strick/6809):00082         *       Added support for Dragon 32, that has had a memory upgraded to 64K,
                      (/home/strick/6809):00083         *       this is treated like the Dragon 64 EXCEPT that the code to manipulate
                      (/home/strick/6809):00084         *       the ACIA is not included. This is required due to the incomplete 
                      (/home/strick/6809):00085         *       address decoding, writes to the non-existant ACIA would hit the PIA 
                      (/home/strick/6809):00086         *       at FF00, and cause a crash.
                      (/home/strick/6809):00087         *
                      (/home/strick/6809):00088         * 2006-01-08, P.Harvey-Smith.
                      (/home/strick/6809):00089         *       Since I now have a genuine Dragon 5.25" drive, found that nitros format
                      (/home/strick/6809):00090         *       fell over accessing it, this was due to the step rate not being set 
                      (/home/strick/6809):00091         *       correctly in the drive recalibrate routine, I ahve corrected this to
                      (/home/strick/6809):00092         *       use the value in the descriptor.
                      (/home/strick/6809):00093         *
                      (/home/strick/6809):00094         
                      (/home/strick/6809):00095                  nam   DDisk
                      (/home/strick/6809):00096                  ttl   Dragon Floppy driver
                      (/home/strick/6809):00097         
                      (/home/strick/6809):00098         * Disassembled 02/04/21 22:37:46 by Disasm v1.6 (C) 1988 by RML
                      (/home/strick/6809):00099         
                      (/home/strick/6809):00100                  ifp1
                      (/home/strick/6809):00101                  use   defsfile
                      (         defsfile):00001                  use   ../defsfile
     0001             (      ../defsfile):00001         Level    equ   1
                      (      ../defsfile):00002         
                      (      ../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0018                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
0018                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
0018                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
0018                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
0018                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
0018                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
                      (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0018                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0018                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
0018                  (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0024                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0024                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0034                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0034                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0034                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0034                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0034                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
0034                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
0034                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
0034                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
0034                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
0034                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
0034                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0034                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0034                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0034                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0034                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0034                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0034                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0034                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0034                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0034                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0034                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
0034                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
0034                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
0034                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
0034                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
0034                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
0034                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0034                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0034                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0034                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0034                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0034                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0034                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0034                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0034                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
0070                  (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0080                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0080                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
                      (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
00B1                  (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
00B1                  (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
00B1                  (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
00B1                  (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
00B1                  (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
00B1                  (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
00B1                  (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
00B1                  (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
00B1                  (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
00B1                  (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
00B1                  (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
00B1                  (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
00B1                  (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
00B1                  (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
00B1                  (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
00B1                  (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
00B1                  (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0024                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0026                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
002A                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
002C                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
002E                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0030                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0032                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0034                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0036                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0038                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
003A                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
003C                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
003E                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0040                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0042                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0044                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0046                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0048                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0049                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
004B                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
004D                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
004F                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0051                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
     0053             (            os9.d):00456         D.Time         EQU       .                   Time
0053                  (            os9.d):00457         D.Year         RMB       1                   $53
0054                  (            os9.d):00458         D.Month        RMB       1                   $54
0055                  (            os9.d):00459         D.Day          RMB       1                   $55
0056                  (            os9.d):00460         D.Hour         RMB       1                   $56
0057                  (            os9.d):00461         D.Min          RMB       1                   $57
0058                  (            os9.d):00462         D.Sec          RMB       1                   $58
0059                  (            os9.d):00463         D.Tick         RMB       1                   $59
005A                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
005B                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
005C                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
005E                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0060                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0062                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0064                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0066                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0068                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
006A                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
006B                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
006D                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
006F                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0071                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0081                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0083                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0084                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0086                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0088                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0089                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
008A                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0100                  (            os9.d):00494         D.XSWI3        RMB       3
0103                  (            os9.d):00495         D.XSWI2        RMB       3
0106                  (            os9.d):00496         D.XSWI         RMB       3
0109                  (            os9.d):00497         D.XNMI         RMB       3
010C                  (            os9.d):00498         D.XIRQ         RMB       3
010F                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
     0020             (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
     0002             (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
     006E             (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0112                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0112                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0112                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0112                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
0112                  (            os9.d):00513         D.Time         EQU       .                   System Time
0112                  (            os9.d):00514         D.Year         RMB       1
0112                  (            os9.d):00515         D.Month        RMB       1
0112                  (            os9.d):00516         D.Day          RMB       1
0112                  (            os9.d):00517         D.Hour         RMB       1
0112                  (            os9.d):00518         D.Min          RMB       1
0112                  (            os9.d):00519         D.Sec          RMB       1
0112                  (            os9.d):00520         D.Tick         RMB       1
0112                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0112                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0112                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0112                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0112                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0112                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0112                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0112                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0112                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
0112                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
                      (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
0112                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
0112                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
0112                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
0112                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
0112                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0112                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0112                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0112                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
0112                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
0112                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
0112                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0112                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0112                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0112                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0112                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0112                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
0112                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
0112                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
0112                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0112                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
0112                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0112                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
0112                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0112                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0112                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
                      (            os9.d):00569                        RMB       4                   reserved
0112                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
0112                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0112                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0112                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0112                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0112                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0112                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0112                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0112                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0112                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0112                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0112                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
0112                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
0112                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
0112                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
0112                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
0112                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
0112                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
0112                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
0112                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
0112                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
0112                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
0112                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
0112                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
0112                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
0112                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
0112                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
0112                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
0112                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
0112                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
0112                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
0112                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
0112                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
0112                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
0112                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
0112                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
0112                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
0112                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
0112                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
0112                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
0112                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
0112                  (            os9.d):00619         D.Clock        RMB       2
0112                  (            os9.d):00620         D.XSWI3        RMB       2
0112                  (            os9.d):00621         D.XSWI2        RMB       2
0112                  (            os9.d):00622         D.XFIRQ        RMB       2
0112                  (            os9.d):00623         D.XIRQ         RMB       2
0112                  (            os9.d):00624         D.XSWI         RMB       2
0112                  (            os9.d):00625         D.XNMI         RMB       2
0112                  (            os9.d):00626         D.ErrRst       RMB       2
0112                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
0112                  (            os9.d):00628         D.SWI3         RMB       2
0112                  (            os9.d):00629         D.SWI2         RMB       2
0112                  (            os9.d):00630         D.FIRQ         RMB       2
0112                  (            os9.d):00631         D.IRQ          RMB       2
0112                  (            os9.d):00632         D.SWI          RMB       2
0112                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
0112                  (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
0112                  (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
0112                  (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
0112                  (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
0112                  (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0000                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0000                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0002                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0004             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0025                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0025                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0025                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
     000C             (            os9.d):00820         DefIOSiz       EQU       12
     0010             (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
0000                  (            os9.d):00824         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
0007                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
0008                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
0009                  (            os9.d):00832         P$User         RMB       2                   User Index $09
000B                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
000C                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
000D                  (            os9.d):00835         P$State        RMB       1                   Status $0D
000E                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
0010                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
0011                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
0012                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
0014                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
0016                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
0018                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
001A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
0026                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
0036                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
0037                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
0039                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
003B                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
003F                  (            os9.d):00849                        RMB       $40-.               unused
     0040             (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
     0080             (            os9.d):00855         SysState       EQU       %10000000
     0040             (            os9.d):00856         TimSleep       EQU       %01000000
     0020             (            os9.d):00857         TimOut         EQU       %00100000
     0010             (            os9.d):00858         ImgChg         EQU       %00010000
     0002             (            os9.d):00859         Condem         EQU       %00000010
     0001             (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
0040                  (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
0040                  (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
0040                  (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0040                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0040                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0040                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0040                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0040                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0040                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0040                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0040                  (            os9.d):00877         P$User         RMB       2                   User Index
0040                  (            os9.d):00878         P$Prior        RMB       1                   Priority
0040                  (            os9.d):00879         P$Age          RMB       1                   Age
0040                  (            os9.d):00880         P$State        RMB       1                   Status
0040                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
0040                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0040                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0040                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0040                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0040                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0040                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0040                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
0040                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
0040                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
0040                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
                      (            os9.d):00892                        RMB       $20-.               unused
0040                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0040                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0040                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
0040                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
0040                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
0040                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
0040                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
0040                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
0040                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
0040                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
0040                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
0040                  (            os9.d):00905         P$Alarm        RMB       6
                      (            os9.d):00906                        RMB       $200-.              Local stack
0040                  (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
0040                  (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
0040                  (            os9.d):00913         SysState       EQU       %10000000
0040                  (            os9.d):00914         TimSleep       EQU       %01000000
0040                  (            os9.d):00915         TimOut         EQU       %00100000
0040                  (            os9.d):00916         ImgChg         EQU       %00010000
0040                  (            os9.d):00917         Suspend        EQU       %00001000
0040                  (            os9.d):00918         Condem         EQU       %00000010
0040                  (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
0009                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     0009             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     0009             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
0005                  (            os9.d):01040         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01041         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01044         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01045         R$X            EQU       6                   X Index register
0005                  (            os9.d):01046         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01047         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01048         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
     0003             (            os9.d):01051         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01052         R$X            EQU       4                   X Index register
     0006             (            os9.d):01053         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01054         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01055         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
     EE00             (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
     1080             (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
00FF                  (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
00FF                  (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
00FF                  (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
00FF                  (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
00FF                  (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (      ../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002F                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
002F                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
002F                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
002F                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
002F                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
002F                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
002F                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
                      (            scf.d):00222         
                      (            scf.d):00223         * PD.BAU definitions
                      (            scf.d):00224         *
                      (            scf.d):00225         * Baud rate
     0000             (            scf.d):00226         B110           EQU       %00000000
     0001             (            scf.d):00227         B300           EQU       %00000001
     0002             (            scf.d):00228         B600           EQU       %00000010
     0003             (            scf.d):00229         B1200          EQU       %00000011
     0004             (            scf.d):00230         B2400          EQU       %00000100
     0005             (            scf.d):00231         B4800          EQU       %00000101
     0006             (            scf.d):00232         B9600          EQU       %00000110
     0007             (            scf.d):00233         B19200         EQU       %00000111
     0008             (            scf.d):00234         B38400         EQU       %00001000
     0009             (            scf.d):00235         B57600         EQU       %00001001
     000A             (            scf.d):00236         B115200        EQU       %00001010
                      (            scf.d):00237         * Word size
     0000             (            scf.d):00238         WORD8          EQU       %00000000
     0020             (            scf.d):00239         WORD7          EQU       %00100000
                      (            scf.d):00240         * Stop bits
     0000             (            scf.d):00241         STOP1          EQU       %00000000
     0010             (            scf.d):00242         STOP2          EQU       %00010000
                      (            scf.d):00243         
                      (            scf.d):00244                        ENDC      
                      (      ../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0040                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0040                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0040                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0040                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0040                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0040                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
0040                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0040                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0040                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0040                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0040                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0040                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0040                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0040                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
                      (            rbf.d):00239                        RMB       32-.                Reserved
0040                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
0040                  (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
0040                  (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
0040                  (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
0040                  (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (      ../defsfile):00006                  use   dragon.d
                      (         dragon.d):00001                  IFNE   DRAGON.D-1
     0001             (         dragon.d):00002         DRAGON.D set   1         
                      (         dragon.d):00003                                  
                      (         dragon.d):00004         ********************************************************************
                      (         dragon.d):00005         * DgnDefs - Dragon I/O Definitions
                      (         dragon.d):00006         *
                      (         dragon.d):00007         * $Id$
                      (         dragon.d):00008         *
                      (         dragon.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (         dragon.d):00010         * Comment
                      (         dragon.d):00011         * ------------------------------------------------------------------
                      (         dragon.d):00012         *          2004/11/16  P.Harvey-Smith.
                      (         dragon.d):00013         * Fixed the stupid error I made in the defines below that made all the
                      (         dragon.d):00014         * non DPxxxxx defines equal to FF00 !!!
                      (         dragon.d):00015         *
                      (         dragon.d):00016         *          2005/04/14  P.Harvey-Smith
                      (         dragon.d):00017         * Added non DP defines for ACIA on Dragon 64/Alpha
                      (         dragon.d):00018         *
                      (         dragon.d):00019         *          2005/04/21  P.Harvey-Smith
                      (         dragon.d):00020         * Fixed errors in defines for WD2797 non-DP registers.
                      (         dragon.d):00021         *
                      (         dragon.d):00022         
                      (         dragon.d):00023                  nam   DgnDefs  
                      (         dragon.d):00024                  ttl   Dragon I/O Definitions
                      (         dragon.d):00025                                  
                      (         dragon.d):00026         *************************************************
                      (         dragon.d):00027         *
                      (         dragon.d):00028         * NitrOS-9 Level 1 Section
                      (         dragon.d):00029         *
                      (         dragon.d):00030         *************************************************
                      (         dragon.d):00031         
     00FF             (         dragon.d):00032         HW.Page        SET       $FF                 Device descriptor hardware page
                      (         dragon.d):00033         
                      (         dragon.d):00034         **********************************
                      (         dragon.d):00035         * Power Line Frequency Definitions
                      (         dragon.d):00036         *
     0001             (         dragon.d):00037         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (         dragon.d):00038         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (         dragon.d):00039                        IFNDEF    PwrLnFrq
     0002             (         dragon.d):00040         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (         dragon.d):00041                        ENDC
                      (         dragon.d):00042         
                      (         dragon.d):00043         
                      (         dragon.d):00044         **********************************
                      (         dragon.d):00045         * Ticks per second
                      (         dragon.d):00046         *
                      (         dragon.d):00047                        IFNDEF    TkPerSec
                      (         dragon.d):00048                        IFEQ      PwrLnFrq-Hz50
0026                  (         dragon.d):00049         TkPerSec       SET       50
                      (         dragon.d):00050                        ELSE      
     003C             (         dragon.d):00051         TkPerSec       SET       60
                      (         dragon.d):00052                        ENDC      
                      (         dragon.d):00053                        ENDC
                      (         dragon.d):00054         
                      (         dragon.d):00055         
                      (         dragon.d):00056         ****************************************
                      (         dragon.d):00057         * Special character Bit position equates
                      (         dragon.d):00058         *
     0001             (         dragon.d):00059         SHIFTBIT       EQU       %00000001
     0002             (         dragon.d):00060         CNTRLBIT       EQU       %00000010
     0004             (         dragon.d):00061         ALTERBIT       EQU       %00000100
     0008             (         dragon.d):00062         UPBIT          EQU       %00001000
     0010             (         dragon.d):00063         DOWNBIT        EQU       %00010000
     0020             (         dragon.d):00064         LEFTBIT        EQU       %00100000
     0040             (         dragon.d):00065         RIGHTBIT       EQU       %01000000
     0080             (         dragon.d):00066         SPACEBIT       EQU       %10000000
                      (         dragon.d):00067         
                      (         dragon.d):00068         ******************
                      (         dragon.d):00069         * VDG Devices
                      (         dragon.d):00070         *
     FFC0             (         dragon.d):00071         A.TermV        SET       $FFC0               VDG Term
     FFC1             (         dragon.d):00072         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (         dragon.d):00073         A.V2           SET       $FFC2
     FFC3             (         dragon.d):00074         A.V3           SET       $FFC3
     FFC4             (         dragon.d):00075         A.V4           SET       $FFC4
     FFC5             (         dragon.d):00076         A.V5           SET       $FFC5
     FFC6             (         dragon.d):00077         A.V6           SET       $FFC6
     FFC7             (         dragon.d):00078         A.V7           SET       $FFC7
                      (         dragon.d):00079         
                      (         dragon.d):00080         ********************
                      (         dragon.d):00081         * VTIO Static Memory
                      (         dragon.d):00082         *
                      (         dragon.d):00083         * Definitions for ports on Dragon 32/64/Alpha.
                      (         dragon.d):00084         *
                      (         dragon.d):00085         *
     FF00             (         dragon.d):00086         IO              equ             $ff00           IO page on Dragon
                      (         dragon.d):00087         
                      (         dragon.d):00088         *
                      (         dragon.d):00089         * Most of these symbols will be defined twice, as some 
                      (         dragon.d):00090         * of the Dragon code, sets DP=$FF, and uses direct page
                      (         dragon.d):00091         * addressing to access the io ports, whilst some of it
                      (         dragon.d):00092         * uses absolute addressing.
                      (         dragon.d):00093         * The versions starting DP must be used with DP=$FF.
                      (         dragon.d):00094         *
                      (         dragon.d):00095         
                      (         dragon.d):00096         * PIA 0 and 1 standard on all Dragons.
     0000             (         dragon.d):00097         DPPIA0DA        EQU             $00             Side A Data/DDR
     FF00             (         dragon.d):00098         PIA0Base  EQU       DPPIA0DA+IO
     0001             (         dragon.d):00099         DPPIA0CRA       EQU             $01             Side A Control.
     0002             (         dragon.d):00100         DPPIA0DB        EQU             $02             Side B Data/DDR
     0003             (         dragon.d):00101         DPPIA0CRB       EQU             $03             Side B Control.
                      (         dragon.d):00102         
     FF00             (         dragon.d):00103         PIA0DA          EQU             DPPIA0DA+IO     Side A Data/DDR
     FF01             (         dragon.d):00104         PIA0CRA         EQU             DPPIA0CRA+IO    Side A Control.
     FF02             (         dragon.d):00105         PIA0DB          EQU             DPPIA0DB+IO     Side A Data/DDR
     FF03             (         dragon.d):00106         PIA0CRB         EQU             DPPIA0CRB+IO    Side A Control.
                      (         dragon.d):00107         
     0020             (         dragon.d):00108         DPPIA1DA        EQU             $20             Side A Data/DDR
     FF20             (         dragon.d):00109         PIA1Base  EQU       DPPIA1DA+IO
     0021             (         dragon.d):00110         DPPIA1CRA       EQU             $21             Side A Control.
     0022             (         dragon.d):00111         DPPIA1DB        EQU             $22             Side B Data/DDR
     0023             (         dragon.d):00112         DPPIA1CRB       EQU             $23             Side B Control.
                      (         dragon.d):00113         
     FF20             (         dragon.d):00114         PIA1DA          EQU             DPPIA1DA+IO     Side A Data/DDR
     FF21             (         dragon.d):00115         PIA1CRA         EQU             DPPIA1CRA+IO    Side A Control.
     FF22             (         dragon.d):00116         PIA1DB          EQU             DPPIA1DB+IO     Side A Data/DDR
     FF23             (         dragon.d):00117         PIA1CRB         EQU             DPPIA1CRB+IO    Side A Control.
                      (         dragon.d):00118         
                      (         dragon.d):00119         * Dragon Alpha has a third PIA at $FF24.
     0024             (         dragon.d):00120         DPPIA2DA        EQU             $24             Side A Data/DDR
     0025             (         dragon.d):00121         DPPIA2CRA       EQU             $25             Side A Control.
     0026             (         dragon.d):00122         DPPIA2DB        EQU             $26             Side B Data/DDR
     0027             (         dragon.d):00123         DPPIA2CRB       EQU             $27             Side B Control.
                      (         dragon.d):00124         
     FF24             (         dragon.d):00125         PIA2DA          EQU             DPPIA2DA+IO     Side A Data/DDR
     FF25             (         dragon.d):00126         PIA2CRA         EQU             DPPIA2CRA+IO    Side A Control.
     FF26             (         dragon.d):00127         PIA2DB          EQU             DPPIA2DB+IO     Side A Data/DDR
     FF27             (         dragon.d):00128         PIA2CRB         EQU             DPPIA2CRB+IO    Side A Control.
                      (         dragon.d):00129         
                      (         dragon.d):00130         * WD2797 Floppy disk controler, used in Alpha Note registers in reverse order !
     002F             (         dragon.d):00131         DPCmdRegA       EQU             $2F             command/status                  
     002E             (         dragon.d):00132         DPTrkRegA       EQU             $2E             Track register
     002D             (         dragon.d):00133         DPSecRegA       EQU             $2D             Sector register
     002C             (         dragon.d):00134         DPDataRegA      EQU             $2C             Data register
                      (         dragon.d):00135         
     FF2F             (         dragon.d):00136         CmdRegA         EQU             DPCMDREGA+IO    command/status                  
     FF2E             (         dragon.d):00137         TrkRegA         EQU             DPTRKREGA+IO    Track register
     FF2D             (         dragon.d):00138         SecRegA         EQU             DPSECREGA+IO    Sector register
     FF2C             (         dragon.d):00139         DataRegA        EQU             DPDATAREGA+IO   Data register
                      (         dragon.d):00140         
     FF2C             (         dragon.d):00141         DPort          SET       DataRegA               Disk controller base address
                      (         dragon.d):00142         
                      (         dragon.d):00143         * Constants for Alpha AY-8912 sound chip, which is used to control
                      (         dragon.d):00144         * Drive select and motor on the Alpha
     000E             (         dragon.d):00145         AYIOREG         EQU             $0E             AY-8912, IO Register number.
     0000             (         dragon.d):00146         AYIdle          EQU             $00             Make AY Idle.
     0001             (         dragon.d):00147         AYWriteReg      EQU             $01             Write AY Register
     0002             (         dragon.d):00148         AYReadReg       EQU             $02             Read AY Register
     0003             (         dragon.d):00149         AYREGLatch      EQU             $03             Latch register into AY
                      (         dragon.d):00150         
     0003             (         dragon.d):00151         DSMask          EQU             $03             Drive select mask.
     0004             (         dragon.d):00152         MotorMask       EQU             $04             Motor enable mask
     0008             (         dragon.d):00153         DDENMask        EQU             $08             DDEN Mask
     0010             (         dragon.d):00154         ENPMask         EQU             $10             Enable Precomp mask
     0020             (         dragon.d):00155         NMIMask         EQU             $20             NMI enable Mask
                      (         dragon.d):00156         
                      (         dragon.d):00157         * Dragon 64/Alpha Serial port.
     0004             (         dragon.d):00158         DPAciaData      EQU             $04             ACIA Rx/Tx Register
     0005             (         dragon.d):00159         DPAciaStat      EQU             $05             ACIA status register
     0006             (         dragon.d):00160         DPAciaCmd       EQU             $06             ACIA command register
     0007             (         dragon.d):00161         DPAciaCtrl      EQU             $07             ACIA control register
                      (         dragon.d):00162         
     FF04             (         dragon.d):00163         AciaData        EQU             DPAciaData+IO   ACIA Rx/Tx Register
     FF05             (         dragon.d):00164         AciaStat        EQU             DPAciaStat+IO   ACIA status register
     FF06             (         dragon.d):00165         AciaCmd         EQU             DPAciaCmd+IO    ACIA command register
     FF07             (         dragon.d):00166         AciaCtrl        EQU             DPAciaCtrl+IO   ACIA control register
                      (         dragon.d):00167         
                      (         dragon.d):00168         * DragonDos Cartrage IO for WD2797
                      (         dragon.d):00169         * WD2797 Floppy disk controler, used in DragonDos.
     0040             (         dragon.d):00170         DPCmdRegD       EQU             $40             command/status                  
     0041             (         dragon.d):00171         DPTrkRegD       EQU             $41             Track register
     0042             (         dragon.d):00172         DPSecRegD       EQU             $42             Sector register
     0043             (         dragon.d):00173         DPDataRegD      EQU             $43             Data register
                      (         dragon.d):00174         
     FF40             (         dragon.d):00175         CmdRegD         EQU             DPCMDREGD+IO    command/status                  
     FF41             (         dragon.d):00176         TrkRegD         EQU             DPTRKREGD+IO    Track register
     FF42             (         dragon.d):00177         SecRegD         EQU             DPSECREGD+IO    Sector register
     FF43             (         dragon.d):00178         DataRegD        EQU             DPDATAREGD+IO   Data register
                      (         dragon.d):00179         
     0048             (         dragon.d):00180         DPDSKCTL        EQU             $48             Disk DS/motor control reg
     FF48             (         dragon.d):00181         DSKCTL          EQU             DPDSKCTL+IO             
                      (         dragon.d):00182         
                      (         dragon.d):00183         * Disk IO bitmasks (DragonDos).
     0020             (         dragon.d):00184         NMIEnD          EQU             %00100000 
     0010             (         dragon.d):00185         WPCEnD          EQU             %00010000 
     0008             (         dragon.d):00186         SDensEnD        EQU             %00001000 
     0004             (         dragon.d):00187         MotorOnD        EQU             %00000100 
     0000             (         dragon.d):00188         Drive0D         EQU             %00000000
     0001             (         dragon.d):00189         Drive1D         EQU             %00000001
     0002             (         dragon.d):00190         Drive2D         EQU             %00000010
     0003             (         dragon.d):00191         Drive3D         EQU             %00000011
     0003             (         dragon.d):00192         DDosDriveMask   EQU             %00000011       Mask out all non drive select bits
     00FC             (         dragon.d):00193         DDosCtrlMask    EQU             %11111100       Mask in all non drive select bits
                      (         dragon.d):00194         
                      (         dragon.d):00195         
                      (         dragon.d):00196         * Disk IO bitmasks (Dragon Alpha).
     0008             (         dragon.d):00197         PIANMIEnA       EQU             %00001000       PIA2, CA2, used to enable/disable NMI 
     00F7             (         dragon.d):00198         PIANMIDisA      EQU             %11110111       Bitmask to force CA2 off, and disable NMI
                      (         dragon.d):00199         
     0080             (         dragon.d):00200         NMIEnA          EQU             %10000000       Flag to enable disable NMI, passed to AlphaDskCtl
     0040             (         dragon.d):00201         WPCEnA          EQU             %01000000       According to circuit trace by R.Harding.
     0020             (         dragon.d):00202         SDensEnA        EQU             %00100000       DDen, from circuit trace on R.Harding's machine.
     0010             (         dragon.d):00203         MotorOnA        EQU             %00010000       
     0001             (         dragon.d):00204         Drive0A         EQU             %00000001
     0002             (         dragon.d):00205         Drive1A         EQU             %00000010
     0004             (         dragon.d):00206         Drive2A         EQU             %00000100
     0008             (         dragon.d):00207         Drive3A         EQU             %00001000
     000F             (         dragon.d):00208         AlphaDrvMask    EQU             %00001111       Mask out all non drive select bits
     00F0             (         dragon.d):00209         AlphaCtrlMask   EQU             %11110000       Mask in all non drive select bits
                      (         dragon.d):00210         
     007F             (         dragon.d):00211         Mask58          EQU             %01111111       And mask to make sure 5.25" clock selected by WD2797
                      (         dragon.d):00212         
     003C             (         dragon.d):00213         NMICA2En        EQU             $3C             Value for PIA CRA to enable NMI
     0034             (         dragon.d):00214         NMICA2Dis       EQU             $34             Value for PIA CRA to disable NMI
                      (         dragon.d):00215         
                      (         dragon.d):00216         * Disk Commands
     00D0             (         dragon.d):00217         FrcInt          EQU     %11010000 
     0088             (         dragon.d):00218         ReadCmnd        EQU     %10001000 
     0000             (         dragon.d):00219         RestCmnd        EQU     %00000000 
     0010             (         dragon.d):00220         SeekCmnd        EQU     %00010000 
     0040             (         dragon.d):00221         StpICmnd        EQU     %01000000 
     00A8             (         dragon.d):00222         WritCmnd        EQU     %10101000 
     00F0             (         dragon.d):00223         WtTkCmnd        EQU     %11110000 
     0002             (         dragon.d):00224         Sid2Sel         EQU     %00000010 
                      (         dragon.d):00225         
                      (         dragon.d):00226         * Disk Status Bits
     0001             (         dragon.d):00227         BusyMask        EQU     %00000001 
     0004             (         dragon.d):00228         LostMask        EQU     %00000100 
     00F8             (         dragon.d):00229         ErrMask         EQU     %11111000 
     0008             (         dragon.d):00230         CRCMask         EQU     %00001000 
     0010             (         dragon.d):00231         RNFMask         EQU     %00010000 
     0020             (         dragon.d):00232         RTypMask        EQU     %00100000 
     0040             (         dragon.d):00233         WPMask          EQU     %01000000 
     0080             (         dragon.d):00234         NotRMask        EQU     %10000000 
                      (         dragon.d):00235         
     0001             (         dragon.d):00236         DensMask        EQU     %00000001 
     0002             (         dragon.d):00237         T80Mask         EQU     %00000010 
                      (         dragon.d):00238         
                      (         dragon.d):00239                         ENDC
                      (/home/strick/6809):00102                  endc
                      (/home/strick/6809):00103         
                      (/home/strick/6809):00104                         IFNE    dalpha
                      (/home/strick/6809):00105         
                      (/home/strick/6809):00106         * Dragon Alpha has a third PIA at FF24, this is used for
                      (/home/strick/6809):00107         * Drive select / motor control, and provides FIRQ from the
                      (/home/strick/6809):00108         * disk controler.
                      (/home/strick/6809):00109         
     0024             (/home/strick/6809):00110         DPPIADA         EQU     DPPIA2DA
     0025             (/home/strick/6809):00111         DPPIACRA        EQU     DPPIA2CRA               
     0026             (/home/strick/6809):00112         DPPIADB         EQU     DPPIA2DB                
     0027             (/home/strick/6809):00113         DPPIACRB        EQU     DPPIA2CRB
                      (/home/strick/6809):00114         
     FF24             (/home/strick/6809):00115         PIADA           EQU     DPPIADA+IO      ; Side A Data/DDR
     FF25             (/home/strick/6809):00116         PIACRA          EQU     DPPIACRA+IO     ; Side A Control.
     FF26             (/home/strick/6809):00117         PIADB           EQU     DPPIADB+IO      ; Side A Data/DDR
     FF27             (/home/strick/6809):00118         PIACRB          EQU     DPPIACRB+IO     ; Side A Control.
                      (/home/strick/6809):00119         
                      (/home/strick/6809):00120         ;WD2797 Floppy disk controler, used in Alpha Note registers in reverse order !
     002F             (/home/strick/6809):00121         DPCMDREG        EQU     DPCmdRegA       ; command/status                        
     002E             (/home/strick/6809):00122         DPTRKREG        EQU     DPTrkRegA       ; Track register
     002D             (/home/strick/6809):00123         DPSECREG        EQU     DPSecRegA       ; Sector register
     002C             (/home/strick/6809):00124         DPDATAREG       EQU     DPDataRegA      ; Data register
                      (/home/strick/6809):00125         
     FF2F             (/home/strick/6809):00126         CMDREG          EQU     DPCMDREG+IO     ; command/status                        
     FF2E             (/home/strick/6809):00127         TRKREG          EQU     DPTRKREG+IO     ; Track register
     FF2D             (/home/strick/6809):00128         SECREG          EQU     DPSECREG+IO     ; Sector register
     FF2C             (/home/strick/6809):00129         DATAREG         EQU     DPDATAREG+IO    ; Data register
                      (/home/strick/6809):00130         
                      (/home/strick/6809):00131         ; Disk IO bitmasks
                      (/home/strick/6809):00132         
     0080             (/home/strick/6809):00133         NMIEn           EQU     NMIEnA
     0040             (/home/strick/6809):00134         WPCEn           EQU     WPCEnA
     0020             (/home/strick/6809):00135         SDensEn         EQU     SDensEnA
     0010             (/home/strick/6809):00136         MotorOn         EQU     MotorOnA 
                      (/home/strick/6809):00137         
                      (/home/strick/6809):00138         ; These are the bits that we know the function of on the Alpha interface
     007F             (/home/strick/6809):00139         KnownBits       EQU     Drive0A+Drive1A+Drive2A+Drive3A+MotorOnA+SDensEnA+WPCEnA
                      (/home/strick/6809):00140         
                      (/home/strick/6809):00141                         ELSE
                      (/home/strick/6809):00142                         
0026                  (/home/strick/6809):00143         DPPIADA         EQU     DPPIA1DA
0026                  (/home/strick/6809):00144         DPPIACRA        EQU     DPPIA1CRA               
0026                  (/home/strick/6809):00145         DPPIADB         EQU     DPPIA1DB                
0026                  (/home/strick/6809):00146         DPPIACRB        EQU     DPPIA1CRB
                      (/home/strick/6809):00147         
0026                  (/home/strick/6809):00148         PIADA           EQU     DPPIADA+IO      ; Side A Data/DDR
0026                  (/home/strick/6809):00149         PIACRA          EQU     DPPIACRA+IO     ; Side A Control.
0026                  (/home/strick/6809):00150         PIADB           EQU     DPPIADB+IO      ; Side A Data/DDR
0026                  (/home/strick/6809):00151         PIACRB          EQU     DPPIACRB+IO     ; Side A Control.
                      (/home/strick/6809):00152         
                      (/home/strick/6809):00153         ;WD2797 Floppy disk controler, used in DragonDos.
0026                  (/home/strick/6809):00154         DPCMDREG        EQU     DPCmdRegD       ; command/status                        
0026                  (/home/strick/6809):00155         DPTRKREG        EQU     DPTrkRegD       ; Track register
0026                  (/home/strick/6809):00156         DPSECREG        EQU     DPSecRegD       ; Sector register
0026                  (/home/strick/6809):00157         DPDATAREG       EQU     DPDataRegD      ; Data register
                      (/home/strick/6809):00158         
0026                  (/home/strick/6809):00159         CMDREG          EQU     DPCMDREG+IO     ; command/status                        
0026                  (/home/strick/6809):00160         TRKREG          EQU     DPTRKREG+IO     ; Track register
0026                  (/home/strick/6809):00161         SECREG          EQU     DPSECREG+IO     ; Sector register
0026                  (/home/strick/6809):00162         DATAREG         EQU     DPDATAREG+IO    ; Data register
                      (/home/strick/6809):00163         
                      (/home/strick/6809):00164         ; Disk IO bitmasks
                      (/home/strick/6809):00165         
0026                  (/home/strick/6809):00166         NMIEn           EQU     NMIEnD
0026                  (/home/strick/6809):00167         WPCEn           EQU     WPCEnD
0026                  (/home/strick/6809):00168         SDensEn         EQU     SDensEnD
0026                  (/home/strick/6809):00169         MotorOn         EQU     MotorOnD
                      (/home/strick/6809):00170         
                      (/home/strick/6809):00171                         ENDC
                      (/home/strick/6809):00172         
     00E1             (/home/strick/6809):00173         tylg    set     Drivr+Objct   
     0080             (/home/strick/6809):00174         atrv    set     ReEnt+rev
     0000             (/home/strick/6809):00175         rev     set     $00
     0003             (/home/strick/6809):00176         edition set     3
                      (/home/strick/6809):00177         
     0004             (/home/strick/6809):00178         MaxDrv   set   4
                      (/home/strick/6809):00179         
0000 87CD0486000EE180 (/home/strick/6809):00180                  mod   eom,name,tylg,atrv,start,size
     58001600B8
                      (/home/strick/6809):00181                         
                      (/home/strick/6809):00182                         org     DrvBeg
000F.                 (/home/strick/6809):00183         DrvTab          RMB     MaxDrv*DrvMem   ; Drive tables, 1 per drive 
00A7.                 (/home/strick/6809):00184         CDrvTab         rmb     2       ; Pointer to current drive table entry above
00A9.                 (/home/strick/6809):00185         DrivSel         rmb     1       ; Saved drive mask
00AA.                 (/home/strick/6809):00186         Settle          rmb     1       ; Head settle time
00AB.                 (/home/strick/6809):00187         SavePIA0CRB     rmb     1       ; Saved copy of PIA0 control reg b
00AC.                 (/home/strick/6809):00188         SaveACIACmd     rmb     1       ; Saved copy of ACIA command reg
00AD.                 (/home/strick/6809):00189         BuffPtr         rmb     2       ; Buffer pointer
00AF.                 (/home/strick/6809):00190         SideSel         rmb     1       ; Side select.
00B0.                 (/home/strick/6809):00191         Density         rmb     1       ; Density 0=double, %00001000=single D64, %00100000=single Alpha
                      (/home/strick/6809):00192         
00B1.                 (/home/strick/6809):00193         DskError        rmb     1       ; hardware disk error   
                      (/home/strick/6809):00194         
00B2.                 (/home/strick/6809):00195         VIRQPak         rmb     2       ; Vi.Cnt word for VIRQ
00B4.                 (/home/strick/6809):00196         u00B3           rmb     2       ; Vi.Rst word for VIRQ
00B6.                 (/home/strick/6809):00197         u00B5           rmb     1       ; Vi.Stat byte for VIRQ (drive motor timeout)
                      (/home/strick/6809):00198         
00B7.                 (/home/strick/6809):00199         VIRQInstalled   rmb     1       ; Is VIRQ Installed yet ?
     00B8             (/home/strick/6809):00200         size            equ     .
                      (/home/strick/6809):00201         
000D FF               (/home/strick/6809):00202                 fcb     $FF 
     000E             (/home/strick/6809):00203         name    equ     *
000E 44446973EB       (/home/strick/6809):00204                 fcs     /DDisk/
0013 03               (/home/strick/6809):00205                 fcb     edition
                      (/home/strick/6809):00206         
0014 00F0             (/home/strick/6809):00207         VIRQCnt fdb     TkPerSec*4     Initial count for VIRQ (4 seconds)
                      (/home/strick/6809):00208         
0016 160018           (/home/strick/6809):00209         start   lbra    Init            ; Initialise Driver
0019 160079           (/home/strick/6809):00210                 lbra    Read            ; Read sector
001C 160142           (/home/strick/6809):00211                 lbra    Write           ; Write sector
001F 160071           (/home/strick/6809):00212                 lbra    GetStat         ; Get status
0022 16036B           (/home/strick/6809):00213                 lbra    SetStat         ; Set status
0025 16006B           (/home/strick/6809):00214                 lbra    Term            ; Terminate device
                      (/home/strick/6809):00215         
0028 00               (/home/strick/6809):00216         IRQPkt   fcb    $00             ; Normal bits (flip byte)
0029 01               (/home/strick/6809):00217                  fcb    $01             ; Bit 1 is interrupt request flag (Mask byte)
002A 0A               (/home/strick/6809):00218                  fcb    10              ; Priority byte
                      (/home/strick/6809):00219         
                      (/home/strick/6809):00220         
002B 12               (/home/strick/6809):00221                 nop
002C 12               (/home/strick/6809):00222                 nop
002D 12               (/home/strick/6809):00223                 nop
002E 170391           (/home/strick/6809):00224                 lbsr    ResetTrack0
                      (/home/strick/6809):00225         * Init
                      (/home/strick/6809):00226         *
                      (/home/strick/6809):00227         * Entry:
                      (/home/strick/6809):00228         *    Y  = address of device descriptor
                      (/home/strick/6809):00229         *    U  = address of device memory area
                      (/home/strick/6809):00230         *
                      (/home/strick/6809):00231         * Exit:
                      (/home/strick/6809):00232         *    CC = carry set on error
                      (/home/strick/6809):00233         *    B  = error code
                      (/home/strick/6809):00234         *
     0000             (/home/strick/6809):00235         DragonDebug     EQU     0
0031                  (/home/strick/6809):00236         Init    
                      (/home/strick/6809):00237                 IFNE    DragonDebug
                      (/home/strick/6809):00238                 pshs    y               ; This is here so I can find disk driver in mess
                      (/home/strick/6809):00239                 ldy     #$AA55          ; by setting register breakpoint to y=$AA55 !
                      (/home/strick/6809):00240                 sty     $8000
                      (/home/strick/6809):00241                 puls    y
                      (/home/strick/6809):00242                 ENDC
                      (/home/strick/6809):00243         
0031 4F               (/home/strick/6809):00244                 clra
0032 B7006F           (/home/strick/6809):00245                 sta     >D.DskTmr       ; Zero motor timer
                      (/home/strick/6809):00246                 
                      (/home/strick/6809):00247                 IFNE    dalpha  ; Turn off all drives
0035 170410           (/home/strick/6809):00248                 lbsr    AlphaDskCtl
                      (/home/strick/6809):00249         
0038 8634             (/home/strick/6809):00250                 lda     #NMICA2Dis      ; Set PIA2 CA2 as output & disable NMI
003A B7FF25           (/home/strick/6809):00251                 sta     PIA2CRA
                      (/home/strick/6809):00252         
                      (/home/strick/6809):00253                 ELSE
                      (/home/strick/6809):00254                 sta     >DskCtl
                      (/home/strick/6809):00255                 ENDC
                      (/home/strick/6809):00256                          
003D 8EFF2F           (/home/strick/6809):00257                 ldx     #CmdReg         ; Reset controler
0040 86D0             (/home/strick/6809):00258                 lda     #FrcInt
0042 A784             (/home/strick/6809):00259                 sta     ,x
0044 170342           (/home/strick/6809):00260                 lbsr    Delay
0047 A684             (/home/strick/6809):00261                 lda     ,x
0049 86FF             (/home/strick/6809):00262                 lda     #$FF
004B C604             (/home/strick/6809):00263                 ldb     #MaxDrv
004D 304F             (/home/strick/6809):00264                 leax    DrvBeg,u
                      (/home/strick/6809):00265                          
004F                  (/home/strick/6809):00266         InitDriveData    
004F A784             (/home/strick/6809):00267                 sta     DD.Tot,x        ; Set total sectors = $FF
0051 A78815           (/home/strick/6809):00268                 sta     <V.Trak,x       ; Set current track = 0
0054 308826           (/home/strick/6809):00269                 leax    <DrvMem,x       ; Skip to next drive
0057 5A               (/home/strick/6809):00270                 decb  
0058 26F5             (/home/strick/6809):00271                 bne     InitDriveData
                      (/home/strick/6809):00272                  
005A 308D0153         (/home/strick/6809):00273                 leax    >NMIService,pcr ; Setup NMI handler
005E BF010A           (/home/strick/6809):00274                 stx     >D.XNMI+1
0061 867E             (/home/strick/6809):00275                 lda     #$7E            ; $7E = JMP
0063 B70109           (/home/strick/6809):00276                 sta     >D.XNMI
                      (/home/strick/6809):00277                          
0066 6FC900B7         (/home/strick/6809):00278                 clr     VIRQInstalled,u ;flag not installed yet
                      (/home/strick/6809):00279         
006A 3420             (/home/strick/6809):00280                 pshs    y               ; save device dsc. ptr
006C 31C900B6         (/home/strick/6809):00281                 leay    >u00B5,u        ; point to Vi.Stat in VIRQ packet
0070 1F20             (/home/strick/6809):00282                 tfr     y,d             ; make it the status register ptr for IRQ
0072 318D02F7         (/home/strick/6809):00283                 leay    >IRQSvc,pc      ; point to IRQ service routine
0076 308DFFAE         (/home/strick/6809):00284                 leax    >IRQPkt,pc      ; point to IRQ packet
007A 103F2A           (/home/strick/6809):00285                 os9     F$IRQ           ; install IRQ
007D 3520             (/home/strick/6809):00286                 puls    y               ; Get back device dsc. ptr
                      (/home/strick/6809):00287                          
007F CC0100           (/home/strick/6809):00288                 ldd     #$0100          ; Request a page of system ram
0082 3440             (/home/strick/6809):00289                 pshs    u               ; used to verify writes
0084 103F28           (/home/strick/6809):00290                 os9     F$SRqMem 
0087 1F31             (/home/strick/6809):00291                 tfr     u,x
0089 3540             (/home/strick/6809):00292                 puls    u
008B 2505             (/home/strick/6809):00293                 bcs     Return
008D AFC900AD         (/home/strick/6809):00294                 stx     >BuffPtr,u      ; Save verify page pointer
0091 5F               (/home/strick/6809):00295                 clrb  
0092 39               (/home/strick/6809):00296         Return  rts   
                      (/home/strick/6809):00297         
                      (/home/strick/6809):00298         
                      (/home/strick/6809):00299         * GetStat
                      (/home/strick/6809):00300         *
                      (/home/strick/6809):00301         * Entry:
                      (/home/strick/6809):00302         *    A  = function code
                      (/home/strick/6809):00303         *    Y  = address of path descriptor
                      (/home/strick/6809):00304         *    U  = address of device memory area
                      (/home/strick/6809):00305         *
                      (/home/strick/6809):00306         * Exit:
                      (/home/strick/6809):00307         *    CC = carry set on error
                      (/home/strick/6809):00308         *    B  = error code
                      (/home/strick/6809):00309         *
0093                  (/home/strick/6809):00310         GetStat
                      (/home/strick/6809):00311         
                      (/home/strick/6809):00312         * Term
                      (/home/strick/6809):00313         *
                      (/home/strick/6809):00314         * Entry:
                      (/home/strick/6809):00315         *    U  = address of device memory area
                      (/home/strick/6809):00316         *
                      (/home/strick/6809):00317         * Exit:
                      (/home/strick/6809):00318         *    CC = carry set on error
                      (/home/strick/6809):00319         *    B  = error code
                      (/home/strick/6809):00320         *
0093 5F               (/home/strick/6809):00321         Term    clrb  
0094 39               (/home/strick/6809):00322                 rts   
                      (/home/strick/6809):00323         
                      (/home/strick/6809):00324         * Read
                      (/home/strick/6809):00325         *
                      (/home/strick/6809):00326         * Entry:
                      (/home/strick/6809):00327         *    B  = MSB of the disk's LSN
                      (/home/strick/6809):00328         *    X  = LSB of the disk's LSN
                      (/home/strick/6809):00329         *    Y  = address of path descriptor
                      (/home/strick/6809):00330         *    U  = address of device memory area
                      (/home/strick/6809):00331         *
                      (/home/strick/6809):00332         * Exit:
                      (/home/strick/6809):00333         *    CC = carry set on error
                      (/home/strick/6809):00334         *    B  = error code
                      (/home/strick/6809):00335         *
0095                  (/home/strick/6809):00336         Read            
0095 8691             (/home/strick/6809):00337                 lda     #$91            ; Retry count
0097 8C0000           (/home/strick/6809):00338                 cmpx    #$0000          ; LSN ?
009A 2623             (/home/strick/6809):00339                 bne     ReadDataWithRetry       ; No : Just do read,
009C 8D21             (/home/strick/6809):00340                 bsr     ReadDataWithRetry       ; Yes : do read and copy disk params
009E 2515             (/home/strick/6809):00341                 bcs     ReadDataExit
00A0 AE28             (/home/strick/6809):00342                 ldx     PD.Buf,y
00A2 3430             (/home/strick/6809):00343                 pshs    y,x
00A4 10AEC900A7       (/home/strick/6809):00344                 ldy     >CDrvTab,u
00A9 C614             (/home/strick/6809):00345                 ldb     #DD.Siz-1 
00AB A685             (/home/strick/6809):00346         L0082   lda     b,x
00AD A7A5             (/home/strick/6809):00347                 sta     b,y
00AF 5A               (/home/strick/6809):00348                 decb  
00B0 2AF9             (/home/strick/6809):00349                 bpl     L0082
00B2 5F               (/home/strick/6809):00350                 clrb  
00B3 35B0             (/home/strick/6809):00351                 puls    pc,y,x
00B5                  (/home/strick/6809):00352         ReadDataExit    
00B5 39               (/home/strick/6809):00353                 rts   
                      (/home/strick/6809):00354         
                      (/home/strick/6809):00355         ; Read Retry
                      (/home/strick/6809):00356         
00B6                  (/home/strick/6809):00357         ReadDataRetry    
00B6 2407             (/home/strick/6809):00358                 bcc     ReadDataWithRetry       ; Retry entry point
00B8 3416             (/home/strick/6809):00359                 pshs    x,b,a
00BA 170305           (/home/strick/6809):00360                 lbsr    ResetTrack0     ; Reset track 0
00BD 3516             (/home/strick/6809):00361                 puls    x,b,a
                      (/home/strick/6809):00362         
00BF                  (/home/strick/6809):00363         ReadDataWithRetry    
00BF 3416             (/home/strick/6809):00364                 pshs    x,b,a           ; Normal entry point
00C1 8D07             (/home/strick/6809):00365                 bsr     DoReadData
00C3 3516             (/home/strick/6809):00366                 puls    x,b,a
00C5 24EE             (/home/strick/6809):00367                 bcc     ReadDataExit
00C7 44               (/home/strick/6809):00368                 lsra                    ; Check for retry
00C8 26EC             (/home/strick/6809):00369                 bne     ReadDataRetry
                      (/home/strick/6809):00370         
00CA                  (/home/strick/6809):00371         DoReadData    
00CA 170132           (/home/strick/6809):00372                 lbsr    SeekTrack
00CD 25E6             (/home/strick/6809):00373                 bcs     ReadDataExit
00CF AE28             (/home/strick/6809):00374                 ldx     PD.Buf,y        ; Target address for data
00D1 3429             (/home/strick/6809):00375                 pshs    y,dp,cc
00D3 C688             (/home/strick/6809):00376                 ldb     #ReadCmnd       ; Read command
00D5 8D18             (/home/strick/6809):00377                 bsr     PrepDiskRW      ; Prepare disk 
                      (/home/strick/6809):00378         
00D7                  (/home/strick/6809):00379         DoReadDataLoop    
00D7 9627             (/home/strick/6809):00380                 lda     <DPPIACRB       ; Is data ready ?
00D9 2B0C             (/home/strick/6809):00381                 bmi     ReadDataReady   ; Yes : read it
                      (/home/strick/6809):00382                 
00DB 313F             (/home/strick/6809):00383                 leay    -1,y                    
00DD 26F8             (/home/strick/6809):00384                 bne     DoReadDataLoop
00DF 8D60             (/home/strick/6809):00385                 bsr     RestoreSavedIO
00E1 3529             (/home/strick/6809):00386                 puls    y,dp,cc                 
00E3 160232           (/home/strick/6809):00387                 lbra    RetReadError    ; Return read error to caller
                      (/home/strick/6809):00388         
00E6                  (/home/strick/6809):00389         ReadDataWait 
00E6 13               (/home/strick/6809):00390                 sync                    ; Sync to inturrupts, wait for data
                      (/home/strick/6809):00391                 
00E7                  (/home/strick/6809):00392         ReadDataReady
00E7 962C             (/home/strick/6809):00393                 lda     <DPDataReg      ; Read data from FDC
00E9 D626             (/home/strick/6809):00394                 ldb     <DPPIADB        ; Clear PIA inturrupt status
00EB A780             (/home/strick/6809):00395                 sta     ,x+             ; save data in memory
00ED 20F7             (/home/strick/6809):00396                 bra     ReadDataWait    ; do next
                      (/home/strick/6809):00397                  
                      (/home/strick/6809):00398         ;
                      (/home/strick/6809):00399         ; Prepare to do disk read/write.
                      (/home/strick/6809):00400         ;
                      (/home/strick/6809):00401                  
00EF                  (/home/strick/6809):00402         PrepDiskRW    
                      (/home/strick/6809):00403         
00EF 6FC900B1         (/home/strick/6809):00404                 clr     DskError,u
                      (/home/strick/6809):00405                 
00F3 86FF             (/home/strick/6809):00406                 lda     #$FF            ; Make DP=$FF, to make i/o faster
00F5 1F8B             (/home/strick/6809):00407                 tfr     a,dp
                      (/home/strick/6809):00408                 
                      (/home/strick/6809):00409         ;
                      (/home/strick/6809):00410         ; Do not attempt to talk to ACIA if this machine does not have one !
                      (/home/strick/6809):00411         ;
                      (/home/strick/6809):00412                 
                      (/home/strick/6809):00413                 IFEQ    Upgraded32
00F7 9606             (/home/strick/6809):00414                 lda     <DPAciaCmd      ; Save ACIA Command reg 
00F9 A7C900AC         (/home/strick/6809):00415                 sta     >SaveACIACmd,u
00FD 84FE             (/home/strick/6809):00416                 anda    #$FE            ; Disable ACIA inturrupt
00FF 9706             (/home/strick/6809):00417                 sta     <DPAciaCmd      
0101 8540             (/home/strick/6809):00418                 bita    #$40            ; Is Tx inturrupt enabled ?
0103 2706             (/home/strick/6809):00419                 beq     L00DE
0105 9605             (/home/strick/6809):00420         L00D8   lda     <DPAciaStat     ; Yes, wait for Tx to complete
0107 8510             (/home/strick/6809):00421                 bita    #$10
0109 27FA             (/home/strick/6809):00422                 beq     L00D8
                      (/home/strick/6809):00423                 ENDC
                      (/home/strick/6809):00424                          
010B 1A50             (/home/strick/6809):00425         L00DE   orcc    #$50            ; Mask inturrupts
010D 9603             (/home/strick/6809):00426                 lda     <DPPia0CRB      ; Save PIA0 IRQ Status
010F A7C900AB         (/home/strick/6809):00427                 sta     >SavePIA0CRB,u  
0113 8634             (/home/strick/6809):00428                 lda     #$34            ; Disable it.
0115 9703             (/home/strick/6809):00429                 sta     <DPPia0CRB      
                      (/home/strick/6809):00430         
                      (/home/strick/6809):00431                 IFEQ    Upgraded32
0117 9606             (/home/strick/6809):00432                 lda     <DPACIACmd      ; Disable ACIA Inturrupt
0119 84FE             (/home/strick/6809):00433                 anda    #$FE
011B 9706             (/home/strick/6809):00434                 sta     <DPACIACmd      
                      (/home/strick/6809):00435                 ENDC
                      (/home/strick/6809):00436                 
011D 9627             (/home/strick/6809):00437                 lda     <DPPIACRB       ; Set PIA to generate FIRQ on FDC DRQ
011F 8A03             (/home/strick/6809):00438                 ora     #$03
0121 9727             (/home/strick/6809):00439                 sta     <DPPIACRB       
0123 9626             (/home/strick/6809):00440                 lda     <DPPIADB        ; Clear any outstanding inturrupt       
0125 108EFFFF         (/home/strick/6809):00441                 ldy     #$FFFF
                      (/home/strick/6809):00442                 
0129 8690             (/home/strick/6809):00443                 lda     #NMIEn+MotorOn  ; Enable NMI, and turn motor on
012B AAC900A9         (/home/strick/6809):00444                 ora     >DrivSel,u      ; mask in drives
012F AAC900B0         (/home/strick/6809):00445                 ora     >Density,u      ; mask in density 
                      (/home/strick/6809):00446                 
0133 EAC900AF         (/home/strick/6809):00447                 ORB     >SideSel,U      ; Set up Side            
                      (/home/strick/6809):00448                  
                      (/home/strick/6809):00449                 IFNE    dalpha  ; Turn on drives & NMI
0137 17030E           (/home/strick/6809):00450                 lbsr    AlphaDskCtl
013A D72F             (/home/strick/6809):00451                 stb     <DPCmdReg       ; issue command to controler
013C 863C             (/home/strick/6809):00452                 lda     #NMICA2En       ; Enable NMI
013E 9725             (/home/strick/6809):00453                 sta     <DPPIA2CRA
                      (/home/strick/6809):00454                 ELSE
                      (/home/strick/6809):00455                 stb     <DPCmdReg       ; issue command to controler 
                      (/home/strick/6809):00456                 sta     <DPDskCtl
                      (/home/strick/6809):00457                 ENDC
                      (/home/strick/6809):00458                                          
                      (/home/strick/6809):00459                          
0140 39               (/home/strick/6809):00460                 rts  
                      (/home/strick/6809):00461                          
                      (/home/strick/6809):00462         ;
                      (/home/strick/6809):00463         ; Restore saved iO states of peripherals.
                      (/home/strick/6809):00464         ;
                      (/home/strick/6809):00465         
0141                  (/home/strick/6809):00466         RestoreSavedIO
                      (/home/strick/6809):00467                 IFNE    dalpha  
0141 8634             (/home/strick/6809):00468                 lda     #NMICA2Dis      ; Disable NMI (Alpha)
0143 9725             (/home/strick/6809):00469                 sta     <DPPIA2CRA
                      (/home/strick/6809):00470                 ENDC
                      (/home/strick/6809):00471         
0145 A6C900A9         (/home/strick/6809):00472                 lda     >DrivSel,u      ; Deselect drives, but leave motor on
0149 8A10             (/home/strick/6809):00473                 ora     #MotorOn
                      (/home/strick/6809):00474                 
                      (/home/strick/6809):00475                 IFNE    dalpha  ; Turn off drives & NMI
014B 1702FA           (/home/strick/6809):00476                 lbsr    AlphaDskCtl
                      (/home/strick/6809):00477                 ELSE
                      (/home/strick/6809):00478                 sta     <DPDskCtl
                      (/home/strick/6809):00479                 ENDC
                      (/home/strick/6809):00480                  
014E A6C900AB         (/home/strick/6809):00481                 lda     >SavePIA0CRB,u  ; Recover PIA0 state    
0152 9703             (/home/strick/6809):00482                 sta     <DPPia0CRB      
                      (/home/strick/6809):00483                 
0154 9627             (/home/strick/6809):00484                 lda     <DPPIACRB       ; Disable Drive FIRQ source.
0156 84FC             (/home/strick/6809):00485                 anda    #$FC
0158 9727             (/home/strick/6809):00486                 sta     <DPPIACRB       
                      (/home/strick/6809):00487         
                      (/home/strick/6809):00488                 IFEQ    Upgraded32
015A A6C900AC         (/home/strick/6809):00489                 lda     >SaveACIACmd,u  ; Recover ACIA state
015E 9706             (/home/strick/6809):00490                 sta     <DPAciaCmd      
                      (/home/strick/6809):00491                 ENDC
                      (/home/strick/6809):00492                 
0160 39               (/home/strick/6809):00493                 rts   
                      (/home/strick/6809):00494         
                      (/home/strick/6809):00495         * Write
                      (/home/strick/6809):00496         *
                      (/home/strick/6809):00497         * Entry:
                      (/home/strick/6809):00498         *    B  = MSB of the disk's LSN
                      (/home/strick/6809):00499         *    X  = LSB of the disk's LSN
                      (/home/strick/6809):00500         *    Y  = address of path descriptor
                      (/home/strick/6809):00501         *    U  = address of device memory area
                      (/home/strick/6809):00502         *
                      (/home/strick/6809):00503         * Exit:
                      (/home/strick/6809):00504         *    CC = carry set on error
                      (/home/strick/6809):00505         *    B  = error code
                      (/home/strick/6809):00506         *
0161 8691             (/home/strick/6809):00507         Write   lda     #$91            ; Retry byte
0163 3416             (/home/strick/6809):00508         L0124   pshs    x,b,a
0165 8D20             (/home/strick/6809):00509                 bsr     DoWrite         ; Attempt to do write
0167 3516             (/home/strick/6809):00510                 puls    x,b,a
0169 250C             (/home/strick/6809):00511                 bcs     WriteDataRetry  ; On error, retry
016B 6DA828           (/home/strick/6809):00512                 tst     <PD.Vfy,y       ; Written, should we verify ?
016E 2605             (/home/strick/6809):00513                 bne     WriteDone       ; no : return
0170 170054           (/home/strick/6809):00514                 lbsr    WriteVerify     ; yes : verify write
0173 2502             (/home/strick/6809):00515                 bcs     WriteDataRetry  ; verify error, retry write
0175                  (/home/strick/6809):00516         WriteDone    
0175 5F               (/home/strick/6809):00517                 clrb                    ; Return status ok
0176 39               (/home/strick/6809):00518                 rts   
                      (/home/strick/6809):00519                          
0177                  (/home/strick/6809):00520         WriteDataRetry    
0177 44               (/home/strick/6809):00521                 lsra                    ; Retry data write
0178 10270190         (/home/strick/6809):00522                 lbeq    RetWriteError   ; All retries exhausted ?, return error
017C 24E5             (/home/strick/6809):00523                 bcc     L0124
017E 3416             (/home/strick/6809):00524                 pshs    x,b,a           ; Reset to track 0
0180 17023F           (/home/strick/6809):00525                 lbsr    ResetTrack0
0183 3516             (/home/strick/6809):00526                 puls    x,b,a
0185 20DC             (/home/strick/6809):00527                 bra     L0124
                      (/home/strick/6809):00528                          
0187 170075           (/home/strick/6809):00529         DoWrite lbsr    SeekTrack       ; Seek to correct track & sector
018A 1025FF27         (/home/strick/6809):00530                 lbcs    ReadDataExit
018E AE28             (/home/strick/6809):00531                 ldx     PD.Buf,y        ; Get data buffer in X
0190 3429             (/home/strick/6809):00532                 pshs    y,dp,cc
0192 C6A8             (/home/strick/6809):00533                 ldb     #WritCmnd       ; Write command
                      (/home/strick/6809):00534                          
0194                  (/home/strick/6809):00535         WriteTrackCmd    
0194 17FF58           (/home/strick/6809):00536                 lbsr    PrepDiskRW      ; Prepare for disk r/w
0197 A680             (/home/strick/6809):00537                 lda     ,x+             ; get byte to write
0199 D627             (/home/strick/6809):00538         L015A   ldb     <DPPIACRB       ; Ready to write ?
019B 2B0E             (/home/strick/6809):00539                 bmi     WriteDataReady  ; Yes, do it.
019D 313F             (/home/strick/6809):00540                 leay    -1,y
019F 26F8             (/home/strick/6809):00541                 bne     L015A
01A1 8D9E             (/home/strick/6809):00542                 bsr     RestoreSavedIO  ; Restore saved peripheral states
01A3 3529             (/home/strick/6809):00543                 puls    y,dp,cc
01A5 160164           (/home/strick/6809):00544                 lbra    RetWriteError   ; Return write error
                      (/home/strick/6809):00545         
01A8                  (/home/strick/6809):00546         WriteDataWait    
01A8 A680             (/home/strick/6809):00547                 lda     ,x+             ; Get next byte to write
01AA 13               (/home/strick/6809):00548                 sync                    ; Wait for drive
01AB                  (/home/strick/6809):00549         WriteDataReady    
01AB 972C             (/home/strick/6809):00550                 sta     <DPDataReg      ; Write data to FDC
01AD D626             (/home/strick/6809):00551                 ldb     <DPPIADB        ; Clear pending FDC inturrupt
01AF 20F7             (/home/strick/6809):00552                 bra     WriteDataWait
                      (/home/strick/6809):00553                 
                      (/home/strick/6809):00554         
                      (/home/strick/6809):00555         ;
                      (/home/strick/6809):00556         ; NMI Handler code.
                      (/home/strick/6809):00557         ;
                      (/home/strick/6809):00558         
01B1                  (/home/strick/6809):00559         NMIService
01B1 326C             (/home/strick/6809):00560                 leas    R$Size,s        ; Drop regs from stack
01B3 8D8C             (/home/strick/6809):00561                 bsr     RestoreSavedIO  ; Restore saved IO states
01B5 3529             (/home/strick/6809):00562                 puls    y,dp,cc
01B7 F6FF2F           (/home/strick/6809):00563                 ldb     >CmdReg
                      (/home/strick/6809):00564         
01BA E7C900B1         (/home/strick/6809):00565                 stb     DskError,u
                      (/home/strick/6809):00566         
01BE C504             (/home/strick/6809):00567                 bitb    #LostMask       ; check for lost record
01C0 10260154         (/home/strick/6809):00568                 lbne    RetReadError    ; yes : return read error
01C4 160123           (/home/strick/6809):00569                 lbra    TestForError    ; esle test for other errors
                      (/home/strick/6809):00570                  
                      (/home/strick/6809):00571         ; Verify a written sector.
01C7                  (/home/strick/6809):00572         WriteVerify    
01C7 3416             (/home/strick/6809):00573                 pshs    x,b,a                           
01C9 AE28             (/home/strick/6809):00574                 ldx     PD.Buf,y        ; Swap buffer pointers
01CB 3410             (/home/strick/6809):00575                 pshs    x
01CD AEC900AD         (/home/strick/6809):00576                 ldx     >BuffPtr,u      
01D1 AF28             (/home/strick/6809):00577                 stx     PD.Buf,y
01D3 AE64             (/home/strick/6809):00578                 ldx     4,s
01D5 17FEF2           (/home/strick/6809):00579                 lbsr    DoReadData      ; Read data back in
01D8 3510             (/home/strick/6809):00580                 puls    x
01DA AF28             (/home/strick/6809):00581                 stx     PD.Buf,y        ; Swab buffer pointers back
01DC 251F             (/home/strick/6809):00582                 bcs     VerifyEnd
01DE 8620             (/home/strick/6809):00583                 lda     #$20
01E0 3462             (/home/strick/6809):00584                 pshs    u,y,a
01E2 10AEC900AD       (/home/strick/6809):00585                 ldy     >BuffPtr,u
01E7 1F13             (/home/strick/6809):00586                 tfr     x,u
01E9                  (/home/strick/6809):00587         VerifyLoop    
01E9 AEC4             (/home/strick/6809):00588                 ldx     ,u              ; Compare every 4th word
01EB ACA4             (/home/strick/6809):00589                 cmpx    ,y
01ED 260A             (/home/strick/6809):00590                 bne     VerifyErrorEnd
01EF 3348             (/home/strick/6809):00591                 leau    8,u
01F1 3128             (/home/strick/6809):00592                 leay    8,y             ; Increment pointers
01F3 6AE4             (/home/strick/6809):00593                 dec     ,s
01F5 26F2             (/home/strick/6809):00594                 bne     VerifyLoop
01F7 2002             (/home/strick/6809):00595                 bra     VerifyEndOk     ; Verify succeeded.
01F9                  (/home/strick/6809):00596         VerifyErrorEnd    
01F9 1A01             (/home/strick/6809):00597                 orcc    #Carry          ; Flag error
01FB                  (/home/strick/6809):00598         VerifyEndOk    
01FB 3562             (/home/strick/6809):00599                 puls    u,y,a
01FD                  (/home/strick/6809):00600         VerifyEnd    
01FD 3596             (/home/strick/6809):00601                 puls    pc,x,b,a
                      (/home/strick/6809):00602         ;
                      (/home/strick/6809):00603         ; Seek to a track
                      (/home/strick/6809):00604         ;
01FF                  (/home/strick/6809):00605         SeekTrack
01FF 6FC900AA         (/home/strick/6809):00606                 CLR     >Settle,U       ; default no settle
0203 1700B9           (/home/strick/6809):00607                 LBSR    SelectDrive     ; select and start correct drive
0206 5D               (/home/strick/6809):00608                 TSTB
0207 2611             (/home/strick/6809):00609                 BNE     E.Sect 
                      (/home/strick/6809):00610         
0209 1F10             (/home/strick/6809):00611                 TFR     X,D 
020B AEC900A7         (/home/strick/6809):00612                 LDX     >CDrvTab,U 
020F 10830000         (/home/strick/6809):00613                 CMPD    #0              ; Skip calculation of track 0
0213 2745             (/home/strick/6809):00614                 BEQ     SeekT1 
0215 10A301           (/home/strick/6809):00615                 CMPD    DD.TOT+1,X      ; Has an illegal LSN been
0218 2504             (/home/strick/6809):00616                 BLO     SeekT2 
021A 53               (/home/strick/6809):00617         E.Sect  COMB
021B C6F1             (/home/strick/6809):00618                 LDB     #E$Sect 
021D 39               (/home/strick/6809):00619                 RTS
                      (/home/strick/6809):00620                          
021E 6FE2             (/home/strick/6809):00621         SeekT2  CLR     ,-S             ; Calculate track number 
0220 A3A82B           (/home/strick/6809):00622                 SUBD    PD.T0S,Y        ; subtract no. of sectors in track 0
0223 2405             (/home/strick/6809):00623                 BHS     SeekT4 
0225 E3A82B           (/home/strick/6809):00624                 ADDD    PD.T0S,Y        ; if -ve we are on track 0, so add back on again
0228 200A             (/home/strick/6809):00625                 BRA     SeekT3 
022A 6CE4             (/home/strick/6809):00626         SeekT4  INC     ,S 
022C A38811           (/home/strick/6809):00627                 SUBD    DD.Spt,X        ; sectors per track for rest of disk
022F 24F9             (/home/strick/6809):00628                 BHS     SeekT4          ; repeat, until -ve, incrementing track count
0231 E38811           (/home/strick/6809):00629                 ADDD    DD.Spt,X        ; re add sectors/track to get sector number on track
                      (/home/strick/6809):00630         
                      (/home/strick/6809):00631         ; At this point the byte on the top of the stack contains the track
                      (/home/strick/6809):00632         ; number, and B contains the sector number on that track.
                      (/home/strick/6809):00633         
0234 3502             (/home/strick/6809):00634         SeekT3  PULS    A               ; retrieve track count
0236 1701C5           (/home/strick/6809):00635                 LBSR    SetWPC          ; set write precompensation
0239 1701DC           (/home/strick/6809):00636                 LBSR    SetDensity      ; Set density
023C 3404             (/home/strick/6809):00637                 PSHS    B 
023E E68810           (/home/strick/6809):00638                 LDB     DD.Fmt,X        ; Is the media double sided ?
0241 54               (/home/strick/6809):00639                 LSRB
0242 2410             (/home/strick/6809):00640                 BCC     SingleSidedDisk ; skip if not
0244 E6A827           (/home/strick/6809):00641                 LDB     PD.Sid,Y        ; Is the drive double sided ?
0247 5A               (/home/strick/6809):00642                 DECB
0248 2606             (/home/strick/6809):00643                 BNE     SetupSideMask   ; yes : deal with it.
024A 3504             (/home/strick/6809):00644                 PULS    B               ; No then its an error
024C 53               (/home/strick/6809):00645                 COMB
024D C6F9             (/home/strick/6809):00646                 LDB     #E$BTyp 
024F 39               (/home/strick/6809):00647                 RTS
                      (/home/strick/6809):00648                          
0250                  (/home/strick/6809):00649         SetupSideMask   
0250 8D5D             (/home/strick/6809):00650                 BSR     SetSide         ; Media & drive are double sided
0252 200F             (/home/strick/6809):00651                 BRA     SeekT9 
                      (/home/strick/6809):00652         
0254                  (/home/strick/6809):00653         SingleSidedDisk
0254 6FC900AF         (/home/strick/6809):00654                 clr     >SideSel,U      ; Single sided, make sure sidesel set correctly
0258 2009             (/home/strick/6809):00655                 BRA     SeekT9
                      (/home/strick/6809):00656                 
025A 1701BB           (/home/strick/6809):00657         SeekT1  LBSR    SetDensity      ; make sure density set correctly even for LSN0 !
                      (/home/strick/6809):00658         
025D 6FC900AF         (/home/strick/6809):00659                 clr     >SideSel,U      ; make sure sidesel is always 0 if lsn0
0261 3404             (/home/strick/6809):00660                 PSHS    B 
0263 E6A823           (/home/strick/6809):00661         SeekT9  LDB     PD.Typ,Y        ; Dragon and Coco disks
0266 C520             (/home/strick/6809):00662                 BITB    #TYP.CCF        ; count sectors from 1 no
0268 2705             (/home/strick/6809):00663                 BEQ     SeekT8 
026A 3504             (/home/strick/6809):00664                 PULS    B 
026C 5C               (/home/strick/6809):00665                 INCB                    ; so increment sector number
026D 2002             (/home/strick/6809):00666                 BRA     SeekT11 
026F 3504             (/home/strick/6809):00667         SeekT8  PULS    B               ; Count from 0 for other types
                      (/home/strick/6809):00668         
0271 F7FF2D           (/home/strick/6809):00669         SeekT11 STB     >SecReg         ; Write sector number to controler
0274 170112           (/home/strick/6809):00670                 LBSR    Delay 
0277 F1FF2D           (/home/strick/6809):00671                 CMPB    >SecReg 
027A 26F5             (/home/strick/6809):00672                 BNE     SeekT11                         
                      (/home/strick/6809):00673         
027C E68815           (/home/strick/6809):00674         SeekTS  LDB     <V.Trak,X       ; Entry point for SS.WTrk command
027F F7FF2E           (/home/strick/6809):00675                 STB     >TrkReg 
0282 6DC900AA         (/home/strick/6809):00676                 TST     >Settle,U       ; If settle has been flagged then wait for settle
0286 2605             (/home/strick/6809):00677                 BNE     SeekT5   
0288 A18815           (/home/strick/6809):00678                 CMPA    <V.Trak,X       ; otherwise check if this is  
028B 2718             (/home/strick/6809):00679                 BEQ     SeekT6          ; track number to the last
                      (/home/strick/6809):00680                          
028D A78815           (/home/strick/6809):00681         SeekT5  STA     <V.Trak,X       ; Do the seek
0290 B7FF2C           (/home/strick/6809):00682                 STA     >DataReg        ; Write track no to controler
0293 8D12             (/home/strick/6809):00683                 bsr     GetStepInB      ; get step rate
0295 CA10             (/home/strick/6809):00684                 ORB     #SeekCmnd       ; add seek command
0297 170082           (/home/strick/6809):00685                 LBSR    FDCCommand 
029A 3410             (/home/strick/6809):00686                 PSHS    X 
029C 8E222E           (/home/strick/6809):00687                 LDX     #$222E          ; Wait for head to settle
029F 301F             (/home/strick/6809):00688         SeekT7  LEAX    -1,X 
02A1 26FC             (/home/strick/6809):00689                 BNE     SeekT7 
02A3 3510             (/home/strick/6809):00690                 PULS    X 
                      (/home/strick/6809):00691         
02A5 5F               (/home/strick/6809):00692         SeekT6  CLRB                    ; return no error to caller
02A6 39               (/home/strick/6809):00693                 RTS
                      (/home/strick/6809):00694         
                      (/home/strick/6809):00695         ;
                      (/home/strick/6809):00696         ; Get step rate in bottom 2 bits of B
                      (/home/strick/6809):00697         ;
02A7                  (/home/strick/6809):00698         GetStepInB
02A7 E6A822           (/home/strick/6809):00699                 ldb     PD.Stp,Y        ; Set Step Rate according to Parameter block
02AA C403             (/home/strick/6809):00700                 andb    #%00000011      ; mask in only step rate bits
02AC C803             (/home/strick/6809):00701                 eorb    #%00000011      ; flip bits to make correct encoding
02AE 39               (/home/strick/6809):00702                 rts
                      (/home/strick/6809):00703         
                      (/home/strick/6809):00704         ; Set Side2 Mask
                      (/home/strick/6809):00705         ; A contains the track number on entry
02AF 44               (/home/strick/6809):00706         SetSide LSRA                    ; Get bit 0 into carry & devide track no by 2
02B0 3402             (/home/strick/6809):00707                 PSHS    A  
02B2 2404             (/home/strick/6809):00708                 BCC     Side0           ; Side 0 if even track no.
02B4 8602             (/home/strick/6809):00709                 LDA     #Sid2Sel        ; Odd track no. so side 2
02B6 2001             (/home/strick/6809):00710                 BRA     Side
02B8 4F               (/home/strick/6809):00711         Side0   CLRA
02B9 A7C900AF         (/home/strick/6809):00712         Side    STA     >SideSel,U 
02BD 3582             (/home/strick/6809):00713                 PULS    A,PC 
                      (/home/strick/6809):00714         
                      (/home/strick/6809):00715         ;
                      (/home/strick/6809):00716         ; Select drive and start drive motors.
                      (/home/strick/6809):00717         ; On entry A=drive number.
                      (/home/strick/6809):00718         ;
                      (/home/strick/6809):00719         
02BF                  (/home/strick/6809):00720         SelectDrive    
02BF 170123           (/home/strick/6809):00721                 lbsr    StartMotor      ; Start motor
02C2 A6A821           (/home/strick/6809):00722                 lda     <PD.Drv,y       ; Check it's a valid drive
02C5 8104             (/home/strick/6809):00723                 cmpa    #MaxDrv
02C7 2504             (/home/strick/6809):00724                 bcs     SelectDriveValid        ; yes : continue
                      (/home/strick/6809):00725                          
02C9                  (/home/strick/6809):00726         RetErrorBadUnit
02C9 53               (/home/strick/6809):00727                 comb                    ; Return bad unit error
02CA C6F0             (/home/strick/6809):00728                 ldb     #E$Unit
02CC 39               (/home/strick/6809):00729                 rts   
                      (/home/strick/6809):00730         
02CD                  (/home/strick/6809):00731         SelectDriveValid    
02CD 3416             (/home/strick/6809):00732                 pshs    x,b,a           ; Unit valid so slect it
02CF A7C900A9         (/home/strick/6809):00733                 sta     >DrivSel,u      ; Get DD table address
02D3 304F             (/home/strick/6809):00734                 leax    DrvBeg,u        ; Calculate offset into table
02D5 C626             (/home/strick/6809):00735                 ldb     #DrvMem
02D7 3D               (/home/strick/6809):00736                 mul   
02D8 308B             (/home/strick/6809):00737                 leax    d,x
02DA ACC900A7         (/home/strick/6809):00738                 cmpx    >CDrvTab,u
02DE 2708             (/home/strick/6809):00739                 beq     SelectDriveEnd
02E0 AFC900A7         (/home/strick/6809):00740                 stx     >CDrvTab,u      ; Force seek if different drive
02E4 63C900AA         (/home/strick/6809):00741                 com     >Settle,u
02E8                  (/home/strick/6809):00742         SelectDriveEnd    
02E8 3596             (/home/strick/6809):00743                 puls    pc,x,b,a
                      (/home/strick/6809):00744         
                      (/home/strick/6809):00745         ;
                      (/home/strick/6809):00746         ; Analise device status return.
                      (/home/strick/6809):00747         ;
                      (/home/strick/6809):00748         
02EA                  (/home/strick/6809):00749         TestForError    
02EA C5F8             (/home/strick/6809):00750                 bitb    #ErrMask
02EC 2714             (/home/strick/6809):00751                 beq     TestErrorEnd
02EE C580             (/home/strick/6809):00752                 bitb    #NotRMask       ; not ready
02F0 2612             (/home/strick/6809):00753                 bne     RetErrorNotReady
02F2 C540             (/home/strick/6809):00754                 bitb    #WPMask         ; Write protect
02F4 2612             (/home/strick/6809):00755                 bne     RetErrorWP
02F6 C520             (/home/strick/6809):00756                 bitb    #RTypMask       ; Wrong type ?
02F8 2612             (/home/strick/6809):00757                 bne     RetWriteError
02FA C510             (/home/strick/6809):00758                 bitb    #RNFMask        ; Record Not found
02FC 2612             (/home/strick/6809):00759                 bne     RetErrorSeek
02FE C508             (/home/strick/6809):00760                 bitb    #CRCMask
0300 2612             (/home/strick/6809):00761                 bne     RetErrorCRC
0302                  (/home/strick/6809):00762         TestErrorEnd   
0302 5F               (/home/strick/6809):00763                 clrb  
0303 39               (/home/strick/6809):00764                 rts   
                      (/home/strick/6809):00765         ;                
                      (/home/strick/6809):00766         ; Return error code
                      (/home/strick/6809):00767         ;
                      (/home/strick/6809):00768         
0304                  (/home/strick/6809):00769         RetErrorNotReady    
0304 53               (/home/strick/6809):00770                 comb  
0305 C6F6             (/home/strick/6809):00771                 ldb     #E$NotRdy
0307 39               (/home/strick/6809):00772                 rts   
0308                  (/home/strick/6809):00773         RetErrorWP    
0308 53               (/home/strick/6809):00774                 comb  
0309 C6F2             (/home/strick/6809):00775                 ldb     #E$WP
030B 39               (/home/strick/6809):00776                 rts   
030C                  (/home/strick/6809):00777         RetWriteError           
030C 53               (/home/strick/6809):00778                 comb  
030D C6F5             (/home/strick/6809):00779                 ldb     #E$Write
030F 39               (/home/strick/6809):00780                 rts   
0310                  (/home/strick/6809):00781         RetErrorSeek    
0310 53               (/home/strick/6809):00782                 comb  
0311 C6F7             (/home/strick/6809):00783                 ldb     #E$Seek
0313 39               (/home/strick/6809):00784                 rts   
0314                  (/home/strick/6809):00785         RetErrorCRC    
0314 53               (/home/strick/6809):00786                 comb  
0315 C6F3             (/home/strick/6809):00787                 ldb     #E$CRC
0317 39               (/home/strick/6809):00788                  rts   
0318                  (/home/strick/6809):00789         RetReadError
0318 53               (/home/strick/6809):00790                 comb  
0319 C6F4             (/home/strick/6809):00791                 ldb     #E$Read
031B 39               (/home/strick/6809):00792                 rts   
                      (/home/strick/6809):00793         ;                
                      (/home/strick/6809):00794         ; Issue a command to FDC and wait till it's ready
                      (/home/strick/6809):00795         ;
                      (/home/strick/6809):00796         
031C                  (/home/strick/6809):00797         FDCCommand    
031C 8D69             (/home/strick/6809):00798                 bsr     FDCCmd
031E                  (/home/strick/6809):00799         FDCCmdWait    
031E F6FF2F           (/home/strick/6809):00800                 ldb     >CmdReg         ; Poll until not busy
0321 C501             (/home/strick/6809):00801                 bitb    #$01
0323 276A             (/home/strick/6809):00802                 beq     Delay3
0325 20F7             (/home/strick/6809):00803                 bra     FDCCmdWait
                      (/home/strick/6809):00804         
0327                  (/home/strick/6809):00805         FDCCmdMotorOn    
0327 8610             (/home/strick/6809):00806                 lda     #MotorOn        ; Turn on motor
0329 AAC900A9         (/home/strick/6809):00807                 ora     >DrivSel,u
                      (/home/strick/6809):00808         
                      (/home/strick/6809):00809                 IFNE    dalpha
032D 170118           (/home/strick/6809):00810                 lbsr    AlphaDskCtl
                      (/home/strick/6809):00811                 ELSE
                      (/home/strick/6809):00812                 sta     >DskCtl
                      (/home/strick/6809):00813                 ENDC
                      (/home/strick/6809):00814         
0330 8D04             (/home/strick/6809):00815                 bsr     SetupVIRQ
                      (/home/strick/6809):00816                         
0332 F7FF2F           (/home/strick/6809):00817                 stb     >CmdReg         ; Send Command to FDC
0335 39               (/home/strick/6809):00818                 rts   
                      (/home/strick/6809):00819         
0336                  (/home/strick/6809):00820         SetupVIRQ
0336 3406             (/home/strick/6809):00821                 pshs    D
0338 EC8DFCD8         (/home/strick/6809):00822                 ldd     >VIRQCnt,pc     ; Get VIRQ initial count value
033C EDC900B2         (/home/strick/6809):00823                 std     >VIRQPak,u      ; Save it
0340 A6C900B7         (/home/strick/6809):00824                 lda     VIRQInstalled,u ; Installed yet ?
0344 2703             (/home/strick/6809):00825                 beq     DoInsVIRQ       ; Not installed yet, try installing it
0346                  (/home/strick/6809):00826         SetupVIRQExit
0346 3506             (/home/strick/6809):00827                 PULS    D
0348 39               (/home/strick/6809):00828                 rts
                      (/home/strick/6809):00829                 
0349                  (/home/strick/6809):00830         DoInsVIRQ
0349 8D02             (/home/strick/6809):00831                 bsr     InsVIRQ
034B 20F9             (/home/strick/6809):00832                 bra     SetupVIRQExit
                      (/home/strick/6809):00833                         
034D 3436             (/home/strick/6809):00834         InsVIRQ pshs    D,y,x
034F 8601             (/home/strick/6809):00835                 lda     #$01            ; Flag drive motor is up to speed
                      (/home/strick/6809):00836                 IFEQ    Level-1
0351 B7006F           (/home/strick/6809):00837                 sta     >D.DskTmr
                      (/home/strick/6809):00838                 ELSE
                      (/home/strick/6809):00839                 sta     <D.MotOn
                      (/home/strick/6809):00840                 ENDC
                      (/home/strick/6809):00841         
0354 8E0001           (/home/strick/6809):00842                 ldx     #$0001          ; Install VIRQ entry
0357 31C900B2         (/home/strick/6809):00843                 leay    >VIRQPak,u      ; Point to packet
035B 6F24             (/home/strick/6809):00844                 clr     Vi.Stat,y       ; Reset Status byte
035D EC8DFCB3         (/home/strick/6809):00845                 ldd     >VIRQCnt,pc     ; Get initial VIRQ count value
0361 103F27           (/home/strick/6809):00846                 os9     F$VIRQ          ; Install VIRQ
0364 2504             (/home/strick/6809):00847                 bcs     VIRQOut         ; Error, exit
0366 6CC900B7         (/home/strick/6809):00848                 inc     VIRQInstalled,u ; Flag it's installed
036A 3536             (/home/strick/6809):00849         VIRQOut puls    X,Y,D
036C 39               (/home/strick/6809):00850                 rts   
                      (/home/strick/6809):00851         
                      (/home/strick/6809):00852         * IRQ service routine for VIRQ (drive motor time)
                      (/home/strick/6809):00853         * Entry: U=Ptr to VIRQ memory area
036D 3402             (/home/strick/6809):00854         IRQSvc  pshs    a
036F 966A             (/home/strick/6809):00855                 lda     <D.DMAReq
0371 2704             (/home/strick/6809):00856                 beq     L0509
0373 8DD8             (/home/strick/6809):00857                 bsr     InsVIRQ
0375 200E             (/home/strick/6809):00858                 bra     IRQOut
0377                  (/home/strick/6809):00859         L0509    
                      (/home/strick/6809):00860                 IFNE    dalpha
0377 1700CE           (/home/strick/6809):00861                 lbsr    AlphaDskCtl
                      (/home/strick/6809):00862                 ELSE
                      (/home/strick/6809):00863                 sta     >DskCtl
                      (/home/strick/6809):00864                 ENDC
                      (/home/strick/6809):00865         
037A 6FC900B6         (/home/strick/6809):00866                 clr     u00B5,u
037E 6FC900B7         (/home/strick/6809):00867                 clr     VIRQInstalled,u
                      (/home/strick/6809):00868                 IFEQ    Level-1
0382 7F006F           (/home/strick/6809):00869                 clr     >D.DskTmr
                      (/home/strick/6809):00870                 ELSE
                      (/home/strick/6809):00871                 clr     <D.MotOn
                      (/home/strick/6809):00872                 ENDC
0385 3582             (/home/strick/6809):00873         IRQOut  puls    pc,a
                      (/home/strick/6809):00874         
                      (/home/strick/6809):00875                          
0387                  (/home/strick/6809):00876         FDCCmd
0387 8D9E             (/home/strick/6809):00877                 bsr     FDCCmdMotorOn
                      (/home/strick/6809):00878         
                      (/home/strick/6809):00879         ; Delay routine !
0389 170000           (/home/strick/6809):00880         Delay   lbsr    Delay2
038C 170000           (/home/strick/6809):00881         Delay2  lbsr    Delay3
038F 39               (/home/strick/6809):00882         Delay3  rts   
                      (/home/strick/6809):00883         
                      (/home/strick/6809):00884         * SetStat
                      (/home/strick/6809):00885         *
                      (/home/strick/6809):00886         * Entry:
                      (/home/strick/6809):00887         *    A  = function code
                      (/home/strick/6809):00888         *    Y  = address of path descriptor
                      (/home/strick/6809):00889         *    U  = address of device memory area
                      (/home/strick/6809):00890         *
                      (/home/strick/6809):00891         * Exit:
                      (/home/strick/6809):00892         *    CC = carry set on error
                      (/home/strick/6809):00893         *    B  = error code
                      (/home/strick/6809):00894         *
0390                  (/home/strick/6809):00895         SetStat 
0390 AE26             (/home/strick/6809):00896                 ldx     PD.Rgs,y        ; Retrieve request
0392 E602             (/home/strick/6809):00897                 ldb     R$B,x
                      (/home/strick/6809):00898                          
0394 C103             (/home/strick/6809):00899                 cmpb    #SS.Reset       ; Restore to track 0.
0396 272A             (/home/strick/6809):00900                 beq     ResetTrack0
0398 C104             (/home/strick/6809):00901                 cmpb    #SS.Wtrk        ; Write (format) a track
039A 2704             (/home/strick/6809):00902                 beq     DoWriteTrack
039C 53               (/home/strick/6809):00903                 comb  
039D C6D0             (/home/strick/6809):00904                 ldb     #E$UnkSvc
039F                  (/home/strick/6809):00905         SetStatEnd    
039F 39               (/home/strick/6809):00906                 rts   
                      (/home/strick/6809):00907         ;
                      (/home/strick/6809):00908         ; Write (format) a track
                      (/home/strick/6809):00909         ;
                      (/home/strick/6809):00910         
03A0                  (/home/strick/6809):00911         DoWriteTrack    
                      (/home/strick/6809):00912         
03A0 17FF1C           (/home/strick/6809):00913                 lbsr    SelectDrive     ; Select drive
03A3 A607             (/home/strick/6809):00914                 lda     R$Y+1,x
03A5 17FF07           (/home/strick/6809):00915                 LBSR    SetSide         ; Set Side 2 if appropriate
03A8 A609             (/home/strick/6809):00916                 LDA     R$U+1,X 
03AA 8D52             (/home/strick/6809):00917                 BSR     SetWPC          ; Set WPC by disk type
03AC 8D6A             (/home/strick/6809):00918                 bsr     SetDensity      ; Set density
                      (/home/strick/6809):00919                 
                      (/home/strick/6809):00920         ;L02D5
03AE AEC900A7         (/home/strick/6809):00921                 ldx     >CDrvTab,u
03B2 17FEC7           (/home/strick/6809):00922                 lbsr    SeekTS          ; Move to correct track
03B5 25E8             (/home/strick/6809):00923                 bcs     SetStatEnd
                      (/home/strick/6809):00924         
03B7 AE26             (/home/strick/6809):00925                 ldx     PD.Rgs,y
03B9 AE04             (/home/strick/6809):00926                 ldx     R$X,x           
03BB C6F0             (/home/strick/6809):00927                 ldb     #WtTkCmnd
03BD 3429             (/home/strick/6809):00928                 pshs    y,dp,cc
03BF 16FDD2           (/home/strick/6809):00929                 lbra    WriteTrackCmd
                      (/home/strick/6809):00930                          
                      (/home/strick/6809):00931         ; Reset track 0
03C2                  (/home/strick/6809):00932         ResetTrack0
03C2 17FEFA           (/home/strick/6809):00933                 lbsr    SelectDrive     ; Select drive
03C5 AEC900A7         (/home/strick/6809):00934                 ldx     >CDrvTab,u
03C9 6F8815           (/home/strick/6809):00935                 clr     <V.Trak,x       ; Set current track as 0
03CC 8605             (/home/strick/6809):00936                 lda     #$05
                      (/home/strick/6809):00937         
03CE                  (/home/strick/6809):00938         ResetTrack0Loop    
03CE 17FED6           (/home/strick/6809):00939                 lbsr    GetStepInB      ; Get step rate for this drive
03D1 CA40             (/home/strick/6809):00940                 orb     #StpICmnd       ; Step away from track 0 5 times
03D3 3402             (/home/strick/6809):00941                 pshs    a
03D5 17FF44           (/home/strick/6809):00942                 lbsr    FDCCommand
03D8 3502             (/home/strick/6809):00943                 puls    a
03DA 4A               (/home/strick/6809):00944                 deca  
03DB 26F1             (/home/strick/6809):00945                 bne     ResetTrack0Loop
                      (/home/strick/6809):00946         
03DD 17FEC7           (/home/strick/6809):00947                 lbsr    GetStepInB      ; Get step rate for this drive
03E0 CA00             (/home/strick/6809):00948                 orb     #RestCmnd       ; Now issue a restore
03E2 16FF37           (/home/strick/6809):00949                 lbra    FDCCommand
                      (/home/strick/6809):00950         ;
                      (/home/strick/6809):00951         ;Start drive motors
                      (/home/strick/6809):00952         ;
                      (/home/strick/6809):00953         
03E5                  (/home/strick/6809):00954         StartMotor    
03E5 3416             (/home/strick/6809):00955                 pshs    x,b,a
03E7 B6006F           (/home/strick/6809):00956                 lda     >D.DskTmr       ; if timer <> 0 then skip as motor already on
03EA 260D             (/home/strick/6809):00957                 bne     MotorsRunning                           
03EC 8610             (/home/strick/6809):00958                 lda     #MotorOn        ; else spin up
                      (/home/strick/6809):00959                          
                      (/home/strick/6809):00960                 IFNE    dalpha
03EE 8D58             (/home/strick/6809):00961                 bsr     AlphaDskCtl
                      (/home/strick/6809):00962                 ELSE
                      (/home/strick/6809):00963                 sta     >DskCtl
                      (/home/strick/6809):00964                 ENDC
                      (/home/strick/6809):00965                  
03F0 8EA000           (/home/strick/6809):00966                 ldx     #$A000          ; Wait a little while for motors to get up to speed
03F3                  (/home/strick/6809):00967         StartMotorLoop    
03F3 12               (/home/strick/6809):00968                 nop   
03F4 12               (/home/strick/6809):00969                 nop   
03F5 301F             (/home/strick/6809):00970                 leax    -1,x
03F7 26FA             (/home/strick/6809):00971                 bne     StartMotorLoop
                      (/home/strick/6809):00972                          
03F9                  (/home/strick/6809):00973         MotorsRunning
03F9 17FF3A           (/home/strick/6809):00974                 lbsr    SetupVIRQ
                      (/home/strick/6809):00975         ;       lda     #$F0            ; Start external motor timer
                      (/home/strick/6809):00976         ;        sta    >D.DskTmr       ; external to driver
03FC 3596             (/home/strick/6809):00977                 puls    pc,x,b,a
                      (/home/strick/6809):00978                 
                      (/home/strick/6809):00979         ;
                      (/home/strick/6809):00980         ; Set Write Precompensation according to media type
                      (/home/strick/6809):00981         ;
                      (/home/strick/6809):00982         ; Entry :
                      (/home/strick/6809):00983         ;       A =     Track no
                      (/home/strick/6809):00984         
03FE 3406             (/home/strick/6809):00985         SetWPC  PSHS    A,B 
0400 E6A824           (/home/strick/6809):00986                 LDB     PD.DNS,Y 
0403 C502             (/home/strick/6809):00987                 BITB    #T80Mask        ; Is it 96 tpi drive
0405 2601             (/home/strick/6809):00988                 BNE     SetWP1 
0407 48               (/home/strick/6809):00989                 ASLA                    ; no then double
0408 8120             (/home/strick/6809):00990         SetWP1  CMPA    #32             ; WPC needed ?
040A 230A             (/home/strick/6809):00991                 BLS     SetWP2 
040C A6C900A9         (/home/strick/6809):00992                 LDA     >DrivSel,U 
0410 8A40             (/home/strick/6809):00993                 ORA     #WPCEn 
0412 A7C900A9         (/home/strick/6809):00994                 STA     >DrivSel,U 
0416 3586             (/home/strick/6809):00995         SetWP2  PULS    A,B,PC 
                      (/home/strick/6809):00996         
                      (/home/strick/6809):00997         
                      (/home/strick/6809):00998         ;
                      (/home/strick/6809):00999         ; Set density acording to disk type.
                      (/home/strick/6809):01000         ;
                      (/home/strick/6809):01001         ; Entry A =     Track no
                      (/home/strick/6809):01002         ;
                      (/home/strick/6809):01003         
0418                  (/home/strick/6809):01004         SetDensity
0418 3406             (/home/strick/6809):01005                 PSHS    A,B 
041A E6A823           (/home/strick/6809):01006                 ldb     PD.TYP,Y        ; Dragon/CoCo disk ?
041D C520             (/home/strick/6809):01007                 bitb    #TYP.CCF
041F 261D             (/home/strick/6809):01008                 bne     SetDouble       ; Always double density
                      (/home/strick/6809):01009                 
0421 E6A824           (/home/strick/6809):01010                 LDB     PD.DNS,Y        ; Get density flags from Path descriptor
                      (/home/strick/6809):01011                 
0424 C501             (/home/strick/6809):01012                 bitb    #DNS.MFM        ; Disk is MFM ?
0426 270E             (/home/strick/6809):01013                 beq     SetSingle       ; no : set single density
                      (/home/strick/6809):01014                 
0428 8100             (/home/strick/6809):01015                 cmpa    #0              ; track 0 ?
042A 2612             (/home/strick/6809):01016                 bne     SetDouble       ; not track 0, exit
                      (/home/strick/6809):01017                 
042C 6DC900AF         (/home/strick/6809):01018                 tst     SideSel,u       ; is this side 0 ?
0430 260C             (/home/strick/6809):01019                 bne     SetDouble       ; no : use double density
                      (/home/strick/6809):01020                 
0432 C504             (/home/strick/6809):01021                 bitb    #DNS.MFM0       ; track 0 mfm ?
0434 2608             (/home/strick/6809):01022                 bne     SetDouble
                      (/home/strick/6809):01023                 
0436                  (/home/strick/6809):01024         SetSingle
0436 8620             (/home/strick/6809):01025                 lda     #SDensEn        ; flag single density
0438 A7C900B0         (/home/strick/6809):01026                 sta     Density,u       
043C 2004             (/home/strick/6809):01027                 bra     ExitDensity
                      (/home/strick/6809):01028                 
043E                  (/home/strick/6809):01029         SetDouble
043E 6FC900B0         (/home/strick/6809):01030                 clr     Density,u       ; flag double density
                      (/home/strick/6809):01031                 
0442                  (/home/strick/6809):01032         ExitDensity     
0442 3586             (/home/strick/6809):01033                 puls    a,b,pc
                      (/home/strick/6809):01034         
                      (/home/strick/6809):01035                 IFNE    dalpha
                      (/home/strick/6809):01036         
                      (/home/strick/6809):01037         ; Translate DragonDos Drive select mechinisim to work on Alpha 
                      (/home/strick/6809):01038         ; Takes byte that would be output to $FF48, reformats it and 
                      (/home/strick/6809):01039         ; outputs to Alpha AY-8912's IO port, which is connected to 
                      (/home/strick/6809):01040         ; Drive selects, motor on and enable precomp.
                      (/home/strick/6809):01041         ; This code now expects Alpha NMI/DDEN etc codes, as defined
                      (/home/strick/6809):01042         ; at top of this file (and dgndefs). The exception to this is
                      (/home/strick/6809):01043         ; the drive number is still passed in the bottom 2 bits and
                      (/home/strick/6809):01044         ; converted with a lookup table.
                      (/home/strick/6809):01045         ; We do not need to preserve the ROM select bit as this code
                      (/home/strick/6809):01046         ; operates in RAM only mode.
                      (/home/strick/6809):01047         
0444 01020408         (/home/strick/6809):01048         ADrvTab FCB             Drive0A,Drive1A,Drive2A,Drive3A
                      (/home/strick/6809):01049         
0448                  (/home/strick/6809):01050         AlphaDskCtl     
0448 3417             (/home/strick/6809):01051                 PSHS    x,A,B,CC
                      (/home/strick/6809):01052                 
044A 3402             (/home/strick/6809):01053                 PSHS    A       
044C 8403             (/home/strick/6809):01054                 anda    #DDosDriveMask  ; mask out dragondos format drive number
044E 308CF3           (/home/strick/6809):01055                 leax    ADrvTab,pcr     ; point at table
0451 A686             (/home/strick/6809):01056                 lda     a,x             ; get bitmap
0453 E6E4             (/home/strick/6809):01057                 ldb     ,s
0455 C4F0             (/home/strick/6809):01058                 andb    #AlphaCtrlMask  ; mask out drive number bits
0457 E7E4             (/home/strick/6809):01059                 stb     ,s
0459 AAE4             (/home/strick/6809):01060                 ora     ,s              ; recombine drive no & ctrl bits
                      (/home/strick/6809):01061         ;       sta     ,s
                      (/home/strick/6809):01062         
045B 8510             (/home/strick/6809):01063                 bita    #MotorOn        ; test motor on ?
045D 2601             (/home/strick/6809):01064                 bne     MotorRunning
                      (/home/strick/6809):01065         
045F 4F               (/home/strick/6809):01066                 clra                    ; No, turn off other bits.
0460                  (/home/strick/6809):01067         MotorRunning
0460 847F             (/home/strick/6809):01068                 anda    #Mask58         ; Mask out 5/8 bit to force the use of 5.25" clock
0462 A7E4             (/home/strick/6809):01069                 sta     ,s      
                      (/home/strick/6809):01070         
0464 1A50             (/home/strick/6809):01071                 orcc    #$50            ; disable inturrupts
                      (/home/strick/6809):01072                         
0466 860E             (/home/strick/6809):01073                 lda     #AYIOREG        ; AY-8912 IO register
0468 B7FF26           (/home/strick/6809):01074                 sta     PIA2DB          ; Output to PIA
046B C603             (/home/strick/6809):01075                 ldb     #AYREGLatch     ; Latch register to modify
046D F7FF24           (/home/strick/6809):01076                 stb     PIA2DA
                      (/home/strick/6809):01077                         
0470 7FFF24           (/home/strick/6809):01078                 clr     PIA2DA          ; Idle AY
                      (/home/strick/6809):01079                         
0473 A6E0             (/home/strick/6809):01080                 lda     ,s+             ; Fetch saved Drive Selects etc
0475 B7FF26           (/home/strick/6809):01081                 sta     PIA2DB          ; output to PIA
0478 C601             (/home/strick/6809):01082                 ldb     #AYWriteReg     ; Write value to latched register
047A F7FF24           (/home/strick/6809):01083                 stb     PIA2DA          ; Set register
                      (/home/strick/6809):01084         
047D 7FFF24           (/home/strick/6809):01085                 clr     PIA2DA          ; Idle AY
                      (/home/strick/6809):01086                                 
0480 3517             (/home/strick/6809):01087                 PULS    x,A,B,CC
0482 39               (/home/strick/6809):01088                 RTS
                      (/home/strick/6809):01089         
                      (/home/strick/6809):01090                 ENDC
                      (/home/strick/6809):01091                 
                      (/home/strick/6809):01092         
0483 8E9267           (/home/strick/6809):01093                 emod
     0486             (/home/strick/6809):01094         eom     equ   *
                      (/home/strick/6809):01095                 end
