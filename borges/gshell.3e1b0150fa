                      (       gshell.asm):00001                  nam   GShell Graphics Shell
                      (       gshell.asm):00002                  ttl   Source derived by Kent D. Meyers.
                      (       gshell.asm):00003         
                      (       gshell.asm):00004         * Signal handlers will have to handle new RBF call for directory updates
                      (       gshell.asm):00005         * DIR has to be open (uses path #), but can be in READ+DIR mode
                      (       gshell.asm):00006         *  Renames, etc. will have to close DIR 1st, do function, re-open.
                      (       gshell.asm):00007         
                      (       gshell.asm):00008         * Compressed Version. Started February 7, 1988. Completed February 29.
                      (       gshell.asm):00009         * Upgraded Version. Started March 2, 1988. Finished by KDM Feb 13, 1994
                      (       gshell.asm):00010         * NITROS9 ONLY VERSION. Started August 8,1998 by LCB
                      (       gshell.asm):00011         * NOTE: When GSHPAL added, got rid of DEVICSET, and 2 other SETS from env.file
                      (       gshell.asm):00012         *       check in DP (3 DP bytes back)
                      (       gshell.asm):00013         * NOTE: HAVE TRIED 5 ROWS OF ICONS (ICONYMAX=143, ICONROWH=32, ICONSCR=20), &
                      (       gshell.asm):00014         *       IT FITS, BUT LOOKS REALLY CROWDED
                      (       gshell.asm):00015         * Killed all calls to F.SLEEP, embedded (shorter & faster)
                      (       gshell.asm):00016         * Should do F$CpyMem of <$40-43 in direct page to get real RAM size - both
                      (       gshell.asm):00017         *   6809 and NitrOS9. Then we can eliminate RAM= from the Env.fil entirely!
                      (       gshell.asm):00018         
                      (       gshell.asm):00019         * NOTE (6309 ONLY): ALL STD -2,S TO CHECK THE D FLAG CAN BE CHANGED TO TSTD
                      (       gshell.asm):00020         *(SAME SIZE, FASTER)
                      (       gshell.asm):00021         
                      (       gshell.asm):00022                  IFP1
                      (       gshell.asm):00023                  USE   defsfile
     0002             (         defsfile):00001         Level    equ   2
                      (         defsfile):00002                  use   os9.d   
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
     0080             (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
     00FE             (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0004                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
002A                  (            os9.d):00820         DefIOSiz       EQU       12
002A                  (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
002A                  (            os9.d):00824         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00832         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00835         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00849                        RMB       $40-.               unused
002A                  (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
002A                  (            os9.d):00855         SysState       EQU       %10000000
002A                  (            os9.d):00856         TimSleep       EQU       %01000000
002A                  (            os9.d):00857         TimOut         EQU       %00100000
002A                  (            os9.d):00858         ImgChg         EQU       %00010000
002A                  (            os9.d):00859         Condem         EQU       %00000010
002A                  (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
     0010             (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0000                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00877         P$User         RMB       2                   User Index
000A                  (            os9.d):00878         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00879         P$Age          RMB       1                   Age
000C                  (            os9.d):00880         P$State        RMB       1                   Status
000D                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00892                        RMB       $20-.               unused
0020                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00905         P$Alarm        RMB       6
00C9                  (            os9.d):00906                        RMB       $200-.              Local stack
     0200             (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
     0080             (            os9.d):00913         SysState       EQU       %10000000
     0040             (            os9.d):00914         TimSleep       EQU       %01000000
     0020             (            os9.d):00915         TimOut         EQU       %00100000
     0010             (            os9.d):00916         ImgChg         EQU       %00010000
     0008             (            os9.d):00917         Suspend        EQU       %00001000
     0002             (            os9.d):00918         Condem         EQU       %00000010
     0001             (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     000D             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     000B             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
0005                  (            os9.d):01040         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01041         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01044         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01045         R$X            EQU       6                   X Index register
0005                  (            os9.d):01046         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01047         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01048         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
     0003             (            os9.d):01051         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01052         R$X            EQU       4                   X Index register
     0006             (            os9.d):01053         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01054         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01055         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
00FF                  (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
00FF                  (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
     003B             (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
     ED00             (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
00FF                  (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (         defsfile):00003                  use   scf.d   
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
                      (            scf.d):00222         
                      (            scf.d):00223         * PD.BAU definitions
                      (            scf.d):00224         *
                      (            scf.d):00225         * Baud rate
     0000             (            scf.d):00226         B110           EQU       %00000000
     0001             (            scf.d):00227         B300           EQU       %00000001
     0002             (            scf.d):00228         B600           EQU       %00000010
     0003             (            scf.d):00229         B1200          EQU       %00000011
     0004             (            scf.d):00230         B2400          EQU       %00000100
     0005             (            scf.d):00231         B4800          EQU       %00000101
     0006             (            scf.d):00232         B9600          EQU       %00000110
     0007             (            scf.d):00233         B19200         EQU       %00000111
     0008             (            scf.d):00234         B38400         EQU       %00001000
     0009             (            scf.d):00235         B57600         EQU       %00001001
     000A             (            scf.d):00236         B115200        EQU       %00001010
                      (            scf.d):00237         * Word size
     0000             (            scf.d):00238         WORD8          EQU       %00000000
     0020             (            scf.d):00239         WORD7          EQU       %00100000
                      (            scf.d):00240         * Stop bits
     0000             (            scf.d):00241         STOP1          EQU       %00000000
     0010             (            scf.d):00242         STOP2          EQU       %00010000
                      (            scf.d):00243         
                      (            scf.d):00244                        ENDC      
                      (         defsfile):00004                  use   rbf.d   
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (       gshell.asm):00024                  ENDC
                      (       gshell.asm):00025         
0000 87CD3E1B000D1181 (       gshell.asm):00026         BTEXT    mod   MODSIZE,MODNAME,$11,$81,CSTART,DATASIZE
     0D001416D5
                      (       gshell.asm):00027         
                      (       gshell.asm):00028         * COMPLETE DEFS FOR THIS ASSEMBLY.
                      (       gshell.asm):00029         
     0010             (       gshell.asm):00030         ICNONSCR equ   16         # icons on screen in 40 column mode
                      (       gshell.asm):00031         
                      (       gshell.asm):00032         * Standard character defs
     0000             (       gshell.asm):00033         NUL      equ   C$NULL
     0007             (       gshell.asm):00034         BEL      equ   C$BELL
     0009             (       gshell.asm):00035         HT       equ   $09
     000A             (       gshell.asm):00036         LF       equ   C$LF
     000C             (       gshell.asm):00037         FF       equ   $0C
     000D             (       gshell.asm):00038         CR       equ   C$CR
     0020             (       gshell.asm):00039         SPACE    equ   C$SPAC
                      (       gshell.asm):00040         
                      (       gshell.asm):00041         * GShell specific Data Structures.
                      (       gshell.asm):00042         
                      (       gshell.asm):00043                  org   0
                      (       gshell.asm):00044         * File info - linked list for each icon
0000.                 (       gshell.asm):00045         FL.XSTRT rmb   2          X start position of icon \   These are for determining if
0002.                 (       gshell.asm):00046         FL.YSTRT rmb   2          Y start position of icon  \  mouse clicks are on a particular
0004.                 (       gshell.asm):00047         FL.XEND  rmb   2          X end position of icon    /  icon or not.
0006.                 (       gshell.asm):00048         FL.YEND  rmb   2          Y end position of icon   /
0008.                 (       gshell.asm):00049         FL.ICONO rmb   1          Icon type (IC.*)
0009.                 (       gshell.asm):00050         FL.AIFNO rmb   1          AIF # (entry # to look in ID.* table)
000A.                 (       gshell.asm):00051         FL.LINK  rmb   2          Link to next FL.* entry
000C.                 (       gshell.asm):00052         FL.FNAME rmb   2          Ptr to filename
     000E             (       gshell.asm):00053         FL.SIZE  equ   .
                      (       gshell.asm):00054         
                      (       gshell.asm):00055                  org   0
                      (       gshell.asm):00056         * Structure for table entries for executable programs to fork into new
                      (       gshell.asm):00057         *   windows - called process tables here (see PTBL* vars)
0000.                 (       gshell.asm):00058         GD.MNAME rmb   2          Module name ptr?
0002.                 (       gshell.asm):00059         GD.INDVC rmb   2          ??? Ptr to ?
0004.                 (       gshell.asm):00060         GD.PRCID rmb   2          Process ID # for new process
0006.                 (       gshell.asm):00061         GD.STATS rmb   2          Last status of forked program (errors, etc.)
0008.                 (       gshell.asm):00062         GD.MTYPE rmb   1          Module type
0009.                 (       gshell.asm):00063         GD.MLANG rmb   1          Module language
000A.                 (       gshell.asm):00064         GD.MEMSZ rmb   2          Mem size required
000C.                 (       gshell.asm):00065         GD.WPATH rmb   2          Path to window
000E.                 (       gshell.asm):00066         GD.DW.OW rmb   2          Process running in overlay window flag: 1=Yes, else NO
0010.                 (       gshell.asm):00067         GD.XSTRT rmb   2          Start X,Y coords of window
0012.                 (       gshell.asm):00068         GD.YSTRT rmb   2
0014.                 (       gshell.asm):00069         GD.XEND  rmb   2          End X,Y coords of window
0016.                 (       gshell.asm):00070         GD.YEND  rmb   2
0018.                 (       gshell.asm):00071         GD.SCRNO rmb   2          Screen # 
001A.                 (       gshell.asm):00072         GD.LINK  rmb   2          Link to next GD.* entry
     001C             (       gshell.asm):00073         GD.SIZE  equ   .
                      (       gshell.asm):00074         
                      (       gshell.asm):00075         * Defs for table entries of AIF data
                      (       gshell.asm):00076         * NOTE: all ID.NUMBR's below IC.XTRNL ($14) are for internal AIF structures,
                      (       gshell.asm):00077         *   not from actual read in AIF files ($f-$13 are currently unused?)
                      (       gshell.asm):00078                  org   0
0000.                 (       gshell.asm):00079         ID.NUMBR rmb   2          Entry # in ID.* structure (only 2nd byte is used)
0002.                 (       gshell.asm):00080         ID.WTYPE rmb   2          Window type for AIF program
0004.                 (       gshell.asm):00081         ID.XSIZE rmb   2          Minimum window X size for AIF program
0006.                 (       gshell.asm):00082         ID.YSIZE rmb   2          Minimum window Y size for AIF program
0008.                 (       gshell.asm):00083         ID.FRGND rmb   2          Window foreground color for AIF program
000A.                 (       gshell.asm):00084         ID.BKGND rmb   2          Window background color for AIF program
000C.                 (       gshell.asm):00085         ID.MEMSZ rmb   2          Data area size for AIF program
000E.                 (       gshell.asm):00086         ID.MNAME rmb   2          Ptr to module name for AIF program
0010.                 (       gshell.asm):00087         ID.XXXPT rmb   2          ??? Ptr to AIF 3 letter extension?
0012.                 (       gshell.asm):00088         ID.PARAM rmb   2          Ptr to parameters for AIF program
0014.                 (       gshell.asm):00089         ID.LINK  rmb   2          Ptr to next ID.* structure in linked list
     0016             (       gshell.asm):00090         ID.SIZE  equ   .
                      (       gshell.asm):00091         
                      (       gshell.asm):00092         * Structure for screens used table (maximum of 8)
                      (       gshell.asm):00093                  org   0
0000.                 (       gshell.asm):00094         SC.PTHNO rmb   1          Path number to screen
0001.                 (       gshell.asm):00095         SC.WTYPE rmb   1          Full screen background window type
0002.                 (       gshell.asm):00096         SC.USERS rmb   1          # of users (programs) active on screen
0003.                 (       gshell.asm):00097                  rmb   1          ??? reserved space?
     0004             (       gshell.asm):00098         SC.SIZE  equ   .
                      (       gshell.asm):00099         
                      (       gshell.asm):00100         * Icon descriptor identifiers (reserved ones). For programs, they will have
                      (       gshell.asm):00101         *   there own entry for running in a new window (?)
                      (       gshell.asm):00102         * These are stored in Fl.ICONO
                      (       gshell.asm):00103         * NOTE: WE SHOULD ADD A PRINTER ICON, AND HAVE IT CALL THE FILE/PRINT ROUTINE
                      (       gshell.asm):00104         * ALSO, A NEW VERSION OF COCOPR SHOULD BE WRITTEN TO HANDLE GRAPHIC SCREEN
                      (       gshell.asm):00105         * DUMPS OF VEF'S. IT SHOULD ALSO ALLOW -F (FORMFEED AFTER TRAILER) AS AN
                      (       gshell.asm):00106         * OPTION FROM THE ENV.FILE
     0001             (       gshell.asm):00107         IC.TEXT  equ   $0001      Text file identifier
     0002             (       gshell.asm):00108         IC.FOLDR equ   $0002      Folder (directory) identifier
     0003             (       gshell.asm):00109         IC.PRGRM equ   $0003      Program (executable) identifier
     0004             (       gshell.asm):00110         IC.CLOSE equ   $0004      Close box
     0005             (       gshell.asm):00111         IC.DRIVE equ   $0005      Drive icon
     0006             (       gshell.asm):00112         IC.AIF.F equ   $0006      ??? AIF for a single program
     0007             (       gshell.asm):00113         IC.F.XXX equ   $0007      ??? AIF for an extension already allocated
     0008             (       gshell.asm):00114         IC.DRBAR equ   $0008      Drive bar (top of current dir window)
     0009             (       gshell.asm):00115         IC.TRASH equ   $0009      Trash can (delete from file menu)
     000A             (       gshell.asm):00116         IC.GCALC equ   $000A      Calculator off of Tandy menu
     000B             (       gshell.asm):00117         IC.GCLOK equ   $000B      Clock off of Tandy menu
     000C             (       gshell.asm):00118         IC.GCAL  equ   $000C      Calendar off of Tandy menu
     000D             (       gshell.asm):00119         IC.SHELL equ   $000D      Shell off of Tandy menu
     000E             (       gshell.asm):00120         IC.QUERY equ   $000E      '?' Help off of Tandy menu
     000F             (       gshell.asm):00121         IC.PRNTR equ   $000F      Printer (print from file menu)
                      (       gshell.asm):00122         * Looks like we have room to insert 5 entries here... like PRINTER
     0014             (       gshell.asm):00123         IC.XTRNL equ   $0014      Start of external entries (from AIF files)
                      (       gshell.asm):00124         
                      (       gshell.asm):00125         * Menu ID #'s
     0002             (       gshell.asm):00126         MID.CLS  equ   $0002
     0004             (       gshell.asm):00127         MID.SUP  equ   $0004
     0005             (       gshell.asm):00128         MID.SDN  equ   $0005
     0006             (       gshell.asm):00129         MID.SRT  equ   $0006
     0007             (       gshell.asm):00130         MID.SLT  equ   $0007
     0014             (       gshell.asm):00131         MID.TDY  equ   $0014
     0017             (       gshell.asm):00132         MID.FIL  equ   $0017
     0018             (       gshell.asm):00133         MID.VEW  equ   $0018
     0019             (       gshell.asm):00134         MID.DSK  equ   $0019
     001A             (       gshell.asm):00135         MID.KDM  equ   $001A
                      (       gshell.asm):00136         
                      (       gshell.asm):00137         * Mouse packet variables (see manual)
     0000             (       gshell.asm):00138         PT.VALID equ   $0000
     0008             (       gshell.asm):00139         PT.CBSA  equ   $0008
     0009             (       gshell.asm):00140         PT.CBSB  equ   $0009
     0016             (       gshell.asm):00141         PT.STAT  equ   $0016
     0018             (       gshell.asm):00142         PT.ACX   equ   $0018
     001A             (       gshell.asm):00143         PT.ACY   equ   $001A
     001C             (       gshell.asm):00144         PT.WRX   equ   $001C
     001E             (       gshell.asm):00145         PT.WRY   equ   $001E
                      (       gshell.asm):00146         
     0001             (       gshell.asm):00147         STDOUT   equ   $0001
     0002             (       gshell.asm):00148         STDERR   equ   $0002
                      (       gshell.asm):00149         
     0002             (       gshell.asm):00150         WT.FSWIN equ   $0002
     0004             (       gshell.asm):00151         WT.DBOX  equ   $0004
     0014             (       gshell.asm):00152         WN.NMNS  equ   $0014
     0017             (       gshell.asm):00153         WN.SYNC  equ   $0017
     0020             (       gshell.asm):00154         WN.BAR   equ   $0020
     C0C0             (       gshell.asm):00155         WINSYNC  equ   $C0C0
                      (       gshell.asm):00156         
     0001             (       gshell.asm):00157         PTR.ARR  equ   $0001
     0001             (       gshell.asm):00158         FNT.S8X8 equ   $0001
     0002             (       gshell.asm):00159         FNT.S6X8 equ   $0002
     0003             (       gshell.asm):00160         FNT.G8X8 equ   $0003
     0004             (       gshell.asm):00161         PTR.SLP  equ   $0004
     0005             (       gshell.asm):00162         PTR.ILL  equ   $0005
     000A             (       gshell.asm):00163         MOUSIGNL equ   $000A
     000B             (       gshell.asm):00164         KYBDSGNL equ   $000B
     000C             (       gshell.asm):00165         DIRSIG   equ   $000C      New signal for SS.FSig
     0015             (       gshell.asm):00166         MI.SIZ   equ   $0015
     000F             (       gshell.asm):00167         MI.ENBL  equ   $000F
     0012             (       gshell.asm):00168         MN.ENBL  equ   $0012
     0017             (       gshell.asm):00169         MN.SIZ   equ   $0017
     0022             (       gshell.asm):00170         WN.SIZ   equ   $0022
     00C8             (       gshell.asm):00171         GRP.FNT  equ   $00C8
     00CA             (       gshell.asm):00172         GRP.PTR  equ   $00CA
                      (       gshell.asm):00173         
                      (       gshell.asm):00174         * OS-9 DATA AREA DEFINITIONS
                      (       gshell.asm):00175         
                      (       gshell.asm):00176                  org   0
0000.                 (       gshell.asm):00177         WIPED    rmb   1          Icons wiped flag (0=no need to redraw)
0001.                 (       gshell.asm):00178         DEFWTYPE rmb   2          GShell's current window type (default for GCalc, GClock, etc.)
0003.                 (       gshell.asm):00179         ICONCOLW rmb   2          Width of icon column. (in pixels)
0005.                 (       gshell.asm):00180         STRTYPOS rmb   2          Starting Y position for the first icon on screen.
0007.                 (       gshell.asm):00181         ICONYMAX rmb   2          Maximum Y value for displayed icons.
0009.                 (       gshell.asm):00182         ICONROWH rmb   2          Height of icon row. (in pixels)
000B.                 (       gshell.asm):00183         WINDWSZY rmb   2          Y size of GShell window path.
000D.                 (       gshell.asm):00184         PTBLNEXT rmb   2          Pointer to next available process descriptor link.
000F.                 (       gshell.asm):00185         FNAMEPTR rmb   2          Pointer to file name buffer. (null terminated)
0011.                 (       gshell.asm):00186         IDSCSPTR rmb   2          Pointer to start of icon descriptor table.
0013.                 (       gshell.asm):00187         IDSCNEXT rmb   2          Pointer to next available icon descriptor link
0015.                 (       gshell.asm):00188         DEVICNTR rmb   1          Current device count. (maximum 5)
0016.                 (       gshell.asm):00189         DRIVYPOS rmb   1          Starting Y position for first drive icon.
                      (       gshell.asm):00190         
                      (       gshell.asm):00191         * The preceding are loaded at startup with default values.
                      (       gshell.asm):00192         
0017.                 (       gshell.asm):00193         STRTXPOS rmb   2          Starting X position for the first icon on screen.
0019.                 (       gshell.asm):00194         PIXELSWD rmb   2          Width of GShell window in pixels.
001B.                 (       gshell.asm):00195         FLAG640W rmb   1          640 pixels wide flag
001C.                 (       gshell.asm):00196         RECDSGNL rmb   2          Current received signal from intercept routine.
001E.                 (       gshell.asm):00197         MAXICONS rmb   2          Maximum number of icons per screen. (12/24)
0020.                 (       gshell.asm):00198         RAMSIZE  rmb   2          Computer's memory size. (128/512)
0022.                 (       gshell.asm):00199         WNDWPATH rmb   2          GShell window I/O path number.
0024.                 (       gshell.asm):00200         WINDWSZX rmb   2          X size of GShell window path.
0026.                 (       gshell.asm):00201         PRCIDNUM rmb   2          GShell process ID number. (for GPLOAD)
0028.                 (       gshell.asm):00202         SCREENOW rmb   2          Number of current display icon screen. (0 to n-1)
002A.                 (       gshell.asm):00203         NSCREENS rmb   2          Number of available icon screens.
002C.                 (       gshell.asm):00204         STRTICON rmb   2          Pointer to file icon descriptor for first icon on current screen.
002E.                 (       gshell.asm):00205         FILESCTR rmb   2          Number of files in current data directory.
0030.                 (       gshell.asm):00206         FTBLSPTR rmb   2          Pointer to start of file icon descriptor table.
0032.                 (       gshell.asm):00207         FTBLNEXT rmb   2          Pointer to next available link in file icon descriptor table.
0034.                 (       gshell.asm):00208         SELECTED rmb   2          Pointer to file icon descriptor for currently selected icon.
0036.                 (       gshell.asm):00209         DEVICNOW rmb   2          Pointer to file icon descriptor for currently selected drive.
0038.                 (       gshell.asm):00210         PTBLSPTR rmb   2          Pointer to start of process descriptor table.
003A.                 (       gshell.asm):00211         DIRPTR   rmb   2          Pointer to next directory entry in directory read buffer.
003C.                 (       gshell.asm):00212         XFD.ATT  rmb   1          Buffer for FD.ATT (attributes) of current directory entry.
003D.                 (       gshell.asm):00213         NEXTXPOS rmb   2          Next X position for file icon on this screen.
003F.                 (       gshell.asm):00214         NEXTYPOS rmb   4          Next Y position for file icon on this screen.
0043.                 (       gshell.asm):00215         ACTVSCRN rmb   2          Number of the active process screen. (for window setup)
0045.                 (       gshell.asm):00216         PROCXSIZ rmb   2          Minimum X size for this process.
0047.                 (       gshell.asm):00217         PROCYSIZ rmb   2          Minimum Y size for this process.
0049.                 (       gshell.asm):00218         PROCWTYP rmb   2          Default window type for this process.
004B.                 (       gshell.asm):00219         WPOSGOOD rmb   2          Window OK flag. (for window setup)
004D.                 (       gshell.asm):00220         DWSETSTY rmb   2          Actual STY byte for process window. (for window setup)
                      (       gshell.asm):00221         
                      (       gshell.asm):00222         * Additions to handle GSHPALx=r,g,b commands (removed *SET ones)
004F.                 (       gshell.asm):00223         CURPAL   rmb   1          Current GSHPAL palette # being worked on
0050.                 (       gshell.asm):00224         CURCOLOR rmb   1          Current palette value
0051.                 (       gshell.asm):00225         CURGFXSZ rmb   1          Size of GFXBUF to write for GSHPAL values
0052.                 (       gshell.asm):00226         GIPMSRES rmb   1          0=low res, 1=high res, $ff=not set (default=0)
0053.                 (       gshell.asm):00227         GIPMSPRT rmb   1          1=right, 2=left, $ff=not set (default=1)
0054.                 (       gshell.asm):00228         GIPKYST  rmb   1          keyboard repeat start ($ff=not set)
0055.                 (       gshell.asm):00229         GIPKYSPD rmb   1          keyboard repeat speed ($ff=not set)
0056.                 (       gshell.asm):00230         DRTBLPTR rmb   2          Pointer to start of drive table.
0058.                 (       gshell.asm):00231         SUREYPOS rmb   2          Y position for "Sure" box. 
005A.                 (       gshell.asm):00232         SUREXPOS rmb   1          X position for "Sure" box. 
005B.                 (       gshell.asm):00233         BXOFFSET rmb   2          X size for selection box. 
005D.                 (       gshell.asm):00234         WD48FLAG rmb   1          $80 if on type 7 windown.
005E.                 (       gshell.asm):00235         TNDYITMS rmb   MI.SIZ*8   Tandy Menu items array. 
                      (       gshell.asm):00236         
0106.                 (       gshell.asm):00237         DISKITMS rmb   0          Disk Menu items array.
0106.                 (       gshell.asm):00238         ITM.FREE rmb   MI.SIZ     Free
011B.                 (       gshell.asm):00239         ITM.FLDR rmb   MI.SIZ     Folder
0130.                 (       gshell.asm):00240         ITM.FMAT rmb   MI.SIZ*4   Format
                      (       gshell.asm):00241         
0184.                 (       gshell.asm):00242         FILSITMS rmb   0          Files menu items array.
0184.                 (       gshell.asm):00243         ITM.OPEN rmb   MI.SIZ     Open
0199.                 (       gshell.asm):00244         ITM.LIST rmb   MI.SIZ     List
01AE.                 (       gshell.asm):00245         ITM.COPY rmb   MI.SIZ     Copy
01C3.                 (       gshell.asm):00246         ITM.STAT rmb   MI.SIZ     Stat
01D8.                 (       gshell.asm):00247         ITM.PRNT rmb   MI.SIZ     Print
01ED.                 (       gshell.asm):00248         ITM.RNAM rmb   MI.SIZ     Rename
0202.                 (       gshell.asm):00249         ITM.DELT rmb   MI.SIZ     Delete
0217.                 (       gshell.asm):00250         ITM.SORT rmb   MI.SIZ*2   Sort
                      (       gshell.asm):00251         
0241.                 (       gshell.asm):00252         VIEWITMS rmb   0          View Menu items array.
0241.                 (       gshell.asm):00253         ITM.LRES rmb   MI.SIZ*3   Low Res 4 Color
                      (       gshell.asm):00254         
0280.                 (       gshell.asm):00255         KDMITMS  rmb   MI.SIZ*2   KDM Menu items array.
                      (       gshell.asm):00256         
02AA.                 (       gshell.asm):00257         TNDYDESC rmb   MN.SIZ     Tandy Menu descriptor.
02C1.                 (       gshell.asm):00258         FILSDESC rmb   MN.SIZ     Files Menu descriptor.
02D8.                 (       gshell.asm):00259         DISKDESC rmb   MN.SIZ     Disk Menu descriptor.
02EF.                 (       gshell.asm):00260         VIEWDESC rmb   MN.SIZ     View Menu descriptor. 
0306.                 (       gshell.asm):00261         KDMDESC  rmb   MN.SIZ     KDM Menu descriptor. 
                      (       gshell.asm):00262         
031D.                 (       gshell.asm):00263         SHELLNAM rmb   6          "shell"
0323.                 (       gshell.asm):00264         LISTNAM  rmb   5          "list"
0328.                 (       gshell.asm):00265         GCALCNAM rmb   6          "gcalc"
032E.                 (       gshell.asm):00266         GCLOCKNM rmb   7          "gclock"
0335.                 (       gshell.asm):00267         GCALNAM  rmb   5          "gcal"
033A.                 (       gshell.asm):00268         CONTRLNM rmb   8          "control"
0342.                 (       gshell.asm):00269         GPRINTNM rmb   7          "gprint"
0349.                 (       gshell.asm):00270         GPORTNAM rmb   6          "gport"
034F.                 (       gshell.asm):00271         HELPNAM  rmb   5          "help"
0354.                 (       gshell.asm):00272         COCPRNM  rmb   7          "cocopr"
                      (       gshell.asm):00273         
035B.                 (       gshell.asm):00274         DBOXDESC rmb   FL.SIZE    Directory Close Box descriptor. (file icon descriptor format)
0369.                 (       gshell.asm):00275         DBARDESC rmb   FL.SIZE    Directory Bar descriptor. (file icon descriptor format)
0377.                 (       gshell.asm):00276         QURYDESC rmb   FL.SIZE    ? descriptor. (file icon descriptor format)
0385.                 (       gshell.asm):00277         TRSHDESC rmb   FL.SIZE    Trash Can descriptor. (file icon descriptor format) 
0393.                 (       gshell.asm):00278         PRTRDESC rmb   FL.SIZE    Printer descriptor (file icon descriptor format)
                      (       gshell.asm):00279         
03A1.                 (       gshell.asm):00280         CALCDESC rmb   ID.SIZE    Icon descriptor for gcalc.
03B7.                 (       gshell.asm):00281         CLOKDESC rmb   ID.SIZE    icon descriptor for gclock
03CD.                 (       gshell.asm):00282         CALDESC  rmb   ID.SIZE    icon descriptor for gcal.
03E3.                 (       gshell.asm):00283         SHELDESC rmb   ID.LINK    icon descriptor for shell.
03F7.                 (       gshell.asm):00284         ENDLINK  rmb   2          Terminating link for internal icon descriptors.
03F9.                 (       gshell.asm):00285         NXTICONO rmb   2          Next available external icon number.
03FB.                 (       gshell.asm):00286         PRESSMSG rmb   14         "press any key"
0409.                 (       gshell.asm):00287         NEWNMSG  rmb   18         "new name:"
041B.                 (       gshell.asm):00288         SLASHW   rmb   3          "/w"
041E.                 (       gshell.asm):00289         ALLOCP   rmb   3          "C" Variable.
0421.                 (       gshell.asm):00290         STTOP    rmb   2          "C" Variable.
0423.                 (       gshell.asm):00291         MEMEND   rmb   10         "C" Variable.  1st 2 is current upper boundary of data memory
042D.                 (       gshell.asm):00292         MTOP     rmb   2          "C" Variable.
042F.                 (       gshell.asm):00293         STBOT    rmb   2          "C" Variable.
0431.                 (       gshell.asm):00294         ERRNO    rmb   2          "C" Variable.
0433.                 (       gshell.asm):00295         WINDDESC rmb   WN.SIZ     GShell window descriptor.
0455.                 (       gshell.asm):00296         DDIRNAME rmb   256        Full path name to current data directory.
0555.                 (       gshell.asm):00297         XDIRNAME rmb   256        Full path name to current execution directory.
0655.                 (       gshell.asm):00298         MOUSPCKT rmb   32         Mouse packet buffer.
0675.                 (       gshell.asm):00299         FNAMBUFR rmb   30         File name (null terminated) for file icon descriptor setup.
0693.                 (       gshell.asm):00300         DIRBUFER rmb   2048       Read buffer for current directory information.
0E93.                 (       gshell.asm):00301         ICONBUFR rmb   144        Icon read/build buffer. (for GPLOAD)
0F23.                 (       gshell.asm):00302         MULTIBFR rmb   256        Shared buffer.
1023.                 (       gshell.asm):00303         LINEBUFR rmb   80         80 character line input buffer.
1073.                 (       gshell.asm):00304         ASCIINUM rmb   8          ASCII number from binary/ASCII conversion routine.
107B.                 (       gshell.asm):00305         ASCIITMP rmb   8          Binary/ASCII temp buffer. (reversed)
1083.                 (       gshell.asm):00306         PARMSBFR rmb   256        Command/parameters build build buffer.
1183.                 (       gshell.asm):00307         AIFNMBFR rmb   8          AIF.xxx file name build buffer.
118B.                 (       gshell.asm):00308         DNAMBUFR rmb   32         Directory name input buffer.
11AB.                 (       gshell.asm):00309         SCRNTABL rmb   SC.SIZE*8  Process screen table.
11CB.                 (       gshell.asm):00310         ENVFLBFR rmb   80         80 character line buffer for ENV.FILE input.
121B.                 (       gshell.asm):00311         GFXBUF2  rmb   4          Graphics command build buffer. (small)
121F.                 (       gshell.asm):00312         SSOPTBFR rmb   34         Buffer for SS.OPT information.
1241.                 (       gshell.asm):00313         DRIVETBL rmb   FL.SIZE*5  Device/Drive table.
1287.                 (       gshell.asm):00314         DRVNMTBL rmb   32*5       Device/Drive name table.
1327.                 (       gshell.asm):00315         BASE     rmb   4          "C" Variable.
132B.                 (       gshell.asm):00316         SPARE    rmb   2          "C" Variable.
132D.                 (       gshell.asm):00317         GFXBUF   rmb   16         Graphics command build buffer. (large)
                      (       gshell.asm):00318         * Added for mode changing palette support
133D.                 (       gshell.asm):00319         GSHBUF   rmb   16         GSHPAL0 to 3 display code buffer.
134D.                 (       gshell.asm):00320         DIRPATH  rmb   1          Path # to current dir. (added for dir monitoring)
134E.                 (       gshell.asm):00321         Dirup    rmb   1          Copy of signal code (if it was new DIR signal)
134F.                 (       gshell.asm):00322         RenFlag  rmb   1          Flag used by rename - whether to reset DIRSIG or not
1350.                 (       gshell.asm):00323         NSIGN    rmb   1          "C" Variable.
1351.                 (       gshell.asm):00324         HANDLER  rmb   2          "C" Variable.
                      (       gshell.asm):00325                  IFEQ  H6309
1353.                 (       gshell.asm):00326         REGE     rmb   1
1354.                 (       gshell.asm):00327         REGF     rmb   1
                      (       gshell.asm):00328                  ENDC
1355.                 (       gshell.asm):00329         END      rmb   896        "C" Variable.
     16D5             (       gshell.asm):00330         DATASIZE equ   .
                      (       gshell.asm):00331         
000D 677368656CEC     (       gshell.asm):00332         MODNAME  fcs   "gshell"
0013 02               (       gshell.asm):00333                  fcb   2
                      (       gshell.asm):00334         
                      (       gshell.asm):00335         * Will change to not bother preserving U, assume data area always @ 0
0014 3420             (       gshell.asm):00336         CSTART   pshs  Y          Save ptr to end of parm area
0016 3440             (       gshell.asm):00337                  pshs  U          Save ptr to start of data area
                      (       gshell.asm):00338                  IFNE  H6309
                      (       gshell.asm):00339                  clr   ,-s        Init all of direct page to 0's
                      (       gshell.asm):00340                  ldw   #256
                      (       gshell.asm):00341                  tfm   s,u+
                      (       gshell.asm):00342                  leas  1,s        Eat 0 byte
                      (       gshell.asm):00343                  ELSE
0018 5F               (       gshell.asm):00344                  clrb
0019 6FC0             (       gshell.asm):00345         CSTART1  clr   ,u+
001B 5A               (       gshell.asm):00346                  decb
001C 26FB             (       gshell.asm):00347                  bne   CSTART1
                      (       gshell.asm):00348                  ENDC
001E AEE4             (       gshell.asm):00349                  ldx   ,S         Get ptr to start of data area again
0020 3384             (       gshell.asm):00350                  leau  ,X         Point U to it again
0022 30891355         (       gshell.asm):00351                  leax  END,X      Point to End of GSHELL data area
0026 3410             (       gshell.asm):00352                  pshs  X          Save it
0028 318D3A0E         (       gshell.asm):00353                  leay  ETEXT,PC   Point to a table of initialized data (includes screen height)
                      (       gshell.asm):00354                  IFNE  H6309
                      (       gshell.asm):00355                  ldw   ,y++       Get size of data block
                      (       gshell.asm):00356                  tfm   y+,u+      Block copy initialized data
                      (       gshell.asm):00357                  ELSE
002C AEA1             (       gshell.asm):00358                  ldx   ,y++
002E A6A0             (       gshell.asm):00359         CSTART2  lda   ,y+
0030 A7C0             (       gshell.asm):00360                  sta   ,u+
0032 301F             (       gshell.asm):00361                  leax  -1,x
0034 26F8             (       gshell.asm):00362                  bne   CSTART2
                      (       gshell.asm):00363                  ENDC
0036 EE62             (       gshell.asm):00364                  ldu   2,S        Get ptr to start of data area again
0038 33C85E           (       gshell.asm):00365                  leau  <TNDYITMS,U Point to Tandy Menu Items array in data area
                      (       gshell.asm):00366                  IFNE  H6309
                      (       gshell.asm):00367                  ldw   ,y++       Get size of data block
                      (       gshell.asm):00368                  tfm   y+,u+      Block copy initialized data
                      (       gshell.asm):00369                  ldw   ,s         Get end address
                      (       gshell.asm):00370                  clr   ,-s        Zero byte
                      (       gshell.asm):00371                  subr  u,w        W=Size of area to clear
                      (       gshell.asm):00372                  tfm   s,u+       Clear until end of data area
                      (       gshell.asm):00373                  ldu   3,s        Get ptr to start of data area again
                      (       gshell.asm):00374                  leas  5,s        Eat zero byte & End/Start of data markers
                      (       gshell.asm):00375                  ELSE
003B AEA1             (       gshell.asm):00376                  ldx   ,y++
003D A6A0             (       gshell.asm):00377         CSTART3  lda   ,y+
003F A7C0             (       gshell.asm):00378                  sta   ,u+
0041 301F             (       gshell.asm):00379                  leax  -1,x
0043 26F8             (       gshell.asm):00380                  bne   CSTART3
0045 ECE4             (       gshell.asm):00381                  ldd   ,s
0047 3440             (       gshell.asm):00382                  pshs  u
0049 A3E1             (       gshell.asm):00383                  subd  ,s++
004B 6FC0             (       gshell.asm):00384         CSTART4  clr   ,u+
004D 830001           (       gshell.asm):00385                  subd  #$0001
0050 26F9             (       gshell.asm):00386                  bne   CSTART4
0052 EE62             (       gshell.asm):00387                  ldu   2,s        Get ptr to start of data area again
0054 3264             (       gshell.asm):00388                  leas  4,s        Eat zero byte & End/Start of data markers
                      (       gshell.asm):00389                  ENDC
0056 3510             (       gshell.asm):00390                  puls  X          Get ptr to end of parm area
0058 BF0423           (       gshell.asm):00391                  stx   >MEMEND    Save as end of data memory ptr
005B 31C4             (       gshell.asm):00392                  leay  ,U         Point Y to start of data area
005D 8D14             (       gshell.asm):00393                  bsr   MAIN       Call main GSHELL routine
                      (       gshell.asm):00394                  IFNE  H6309
                      (       gshell.asm):00395                  clrd             No error & exit
                      (       gshell.asm):00396                  ELSE
005F 4F               (       gshell.asm):00397                  clra
0060 5F               (       gshell.asm):00398                  clrb
                      (       gshell.asm):00399                  ENDC
0061 EDE3             (       gshell.asm):00400                  std   ,--s
0063 163691           (       gshell.asm):00401                  lbra  EXIT
                      (       gshell.asm):00402         
                      (       gshell.asm):00403         * Signal intercept trap
0066 4F               (       gshell.asm):00404         SAVESGNL clra             Save signal as D & return
0067 EDC81C           (       gshell.asm):00405                  std   RECDSGNL,U
006A C10C             (       gshell.asm):00406                  cmpb  #DIRSIG    Dir update signal?
006C 2604             (       gshell.asm):00407                  bne   DoneSig
006E E7C9134E         (       gshell.asm):00408                  stb   Dirup,u    Save copy (in case in middle of dir update, or stuck elsewhere)
0072 3B               (       gshell.asm):00409         DoneSig  rti   
                      (       gshell.asm):00410         
0073 3460             (       gshell.asm):00411         MAIN     pshs  U,y        Save U
0075 172D8D           (       gshell.asm):00412                  lbsr  SETUPENV   Setup drive tables, and read in ENV.FIL stuff
0078 3520             (       gshell.asm):00413                  puls  y
007A 308CE9           (       gshell.asm):00414                  leax  <SAVESGNL,PC Set up intercept trap
007D 1F23             (       gshell.asm):00415                  tfr   Y,U        Copy start of data area to U
007F 103F09           (       gshell.asm):00416                  os9   F$ICPT
                      (       gshell.asm):00417         * FIXWINDW only called once, embed !
0082 8D13             (       gshell.asm):00418                  bsr   FIXWINDW   Get window path
0084 ED7E             (       gshell.asm):00419                  std   -2,S       Save it
0086 270D             (       gshell.asm):00420                  beq   GSHABORT   Could not get path, abort
0088 8D32             (       gshell.asm):00421                  bsr   BILDDESC   Go build menu descriptor for GSHELL
008A 8D6B             (       gshell.asm):00422                  bsr   SETWINDW   Set some coords, graphics cursor, window type, etc.
008C 173189           (       gshell.asm):00423                  lbsr  KILLPBUF   Kill all GP buffers in the our ID # group
008F 170142           (       gshell.asm):00424                  lbsr  FINLINIT   Redo std I/O for window path, menus for 128/512k,mouse on
0092 170188           (       gshell.asm):00425                  lbsr  GSHSTART
                      (       gshell.asm):00426         
0095 35C0             (       gshell.asm):00427         GSHABORT puls  U,PC       Restore U & return
                      (       gshell.asm):00428         
                      (       gshell.asm):00429         * Entry: Y=start of data area ptr
0097 CC0093           (       gshell.asm):00430         FIXWINDW ldd   #SS.SCTYP  Path=0, get screentype call
009A 103F8D           (       gshell.asm):00431                  os9   I$GETSTT
009D 240F             (       gshell.asm):00432                  bcc   ONWINDOW   No error on call, skip ahead
009F 4F               (       gshell.asm):00433                  clra  
00A0 FD0431           (       gshell.asm):00434                  std   >ERRNO     Save 16 bit error #
00A3 8603             (       gshell.asm):00435                  lda   #UPDAT.    Attempt to open path to 'w/'
00A5 8E041B           (       gshell.asm):00436                  ldx   #SLASHW
00A8 173200           (       gshell.asm):00437                  lbsr  I.OPEN     D=path for window
00AB DD22             (       gshell.asm):00438         DoneFix  std   <WNDWPATH  Save path to window
00AD 39               (       gshell.asm):00439                  rts   
                      (       gshell.asm):00440         
00AE 8602             (       gshell.asm):00441         ONWINDOW lda   #STDERR    Get Std Error path
00B0 1731EF           (       gshell.asm):00442                  lbsr  I.DUP      Duplicate path
00B3 3406             (       gshell.asm):00443                  pshs  d          Save new path # (16 bit)
00B5 1733EF           (       gshell.asm):00444                  lbsr  DWEND      DWEnd the window
00B8 3506             (       gshell.asm):00445                  puls  d          Get path #
00BA 20EF             (       gshell.asm):00446                  bra   DoneFix    Save & return
                      (       gshell.asm):00447         
00BC 8E02AA           (       gshell.asm):00448         BILDDESC ldx   #TNDYDESC  Point to our copy of Tandy Menu descriptor
00BF AFA90453         (       gshell.asm):00449                  stx   WINDDESC+WN.BAR,Y Save as ptr to menu descriptors
00C3 C605             (       gshell.asm):00450                  ldb   #5         5 menus on the menu bar
00C5 E7A90447         (       gshell.asm):00451                  stb   WINDDESC+WN.NMNS,Y
00C9 CCC0C0           (       gshell.asm):00452                  ldd   #WINSYNC   Sync bytes to $c0c0 <grin>
00CC EDA9044A         (       gshell.asm):00453                  std   WINDDESC+WN.SYNC,Y
00D0 308C17           (       gshell.asm):00454                  leax  <GSHELLTL,PC Point to GSHELL title bar
00D3 3410             (       gshell.asm):00455                  pshs  X          Save it
00D5 8E0433           (       gshell.asm):00456                  ldx   #WINDDESC  Point to Gshell menu descriptor
00D8 3410             (       gshell.asm):00457                  pshs  X          Save that
00DA 173207           (       gshell.asm):00458                  lbsr  STRCPY     Copy title bar info into RAM copy of Menu descriptor
00DD 3264             (       gshell.asm):00459                  leas  4,S        Eat stack
00DF 0F26             (       gshell.asm):00460                  clr   <PRCIDNUM
00E1 3420             (       gshell.asm):00461                  pshs  y          Save Y
00E3 103F0C           (       gshell.asm):00462                  os9   F$ID       Get process #
00E6 9727             (       gshell.asm):00463                  sta   <PRCIDNUM+1 Save it
00E8 35A0             (       gshell.asm):00464                  puls  y,pc       Restore Y & return
                      (       gshell.asm):00465         
00EA 475368656C6C2B20 (       gshell.asm):00466         GSHELLTL fcc   "GShell+ 1.26"
     312E3236
00F6 00               (       gshell.asm):00467                  fcb   NUL
                      (       gshell.asm):00468         
00F7 8D74             (       gshell.asm):00469         SETWINDW bsr   WINDPARM   Set up some of the 40/80 column measurement stuff
00F9 C602             (       gshell.asm):00470                  ldb   #2
00FB 3406             (       gshell.asm):00471                  pshs  d          border color=2
00FD 3406             (       gshell.asm):00472                  pshs  d          background color=0
00FF 5F               (       gshell.asm):00473                  clrb  
0100 3406             (       gshell.asm):00474                  pshs  d          foreground color=1
0102 9E0B             (       gshell.asm):00475                  ldx   WINDWSZY   Get Window height
0104 D625             (       gshell.asm):00476                  ldb   WINDWSZX+1 Get X window size (in chars)
0106 3416             (       gshell.asm):00477                  pshs  d,X        Save them
0108 5F               (       gshell.asm):00478                  clrb             Start x,y=0,0
0109 3406             (       gshell.asm):00479                  pshs  d
010B 3406             (       gshell.asm):00480                  pshs  d
010D 9E01             (       gshell.asm):00481                  ldx   DEFWTYPE   Get window type
010F D623             (       gshell.asm):00482                  ldb   WNDWPATH+1 Get window path #
0111 3416             (       gshell.asm):00483                  pshs  d,X        Save them
0113 173359           (       gshell.asm):00484                  lbsr  DWSET      Do the device window set
0116 172981           (       gshell.asm):00485                  lbsr  ResetPal   Added to restore GSHPAL colors when re-setting window
0119 32E812           (       gshell.asm):00486                  leas  18,S       Eat all of our stack crap
011C ED7E             (       gshell.asm):00487                  std   -2,S
011E 2D1B             (       gshell.asm):00488                  blt   SETWIND1   ??? Error, skip ahead
                      (       gshell.asm):00489         
0120 1735E7           (       gshell.asm):00490                  lbsr  MenuClr    Set color for menu bars
0123 8E0433           (       gshell.asm):00491                  ldx   #WINDDESC  Point to Gshell menu structure
0126 CC0002           (       gshell.asm):00492                  ldd   #WT.FSWIN  Framed window with scrollbars
0129 3416             (       gshell.asm):00493                  pshs  d,X        Save on stack
012B D623             (       gshell.asm):00494                  ldb   WNDWPATH+1 Get path to window
012D 3406             (       gshell.asm):00495                  pshs  d          Save
012F 17332B           (       gshell.asm):00496                  lbsr  ST.WNSET   Set the window to framed with scrollbars
0132 3266             (       gshell.asm):00497                  leas  6,S        Eat stack stuff
                      (       gshell.asm):00498         
0134 1735DA           (       gshell.asm):00499                  lbsr  RegClr     Set color for regular stuff
0137 ED7E             (       gshell.asm):00500                  std   -2,S
0139 2C0B             (       gshell.asm):00501                  bge   SETFONTS   No error, skip ahead
013B ECA90431         (       gshell.asm):00502         SETWIND1 ldd   ERRNO,Y    Get error #
013F 3406             (       gshell.asm):00503                  pshs  d          Save it
0141 17100B           (       gshell.asm):00504                  lbsr  TRYQUIT    ??? Try resetting everything?
0144 3262             (       gshell.asm):00505                  leas  2,S        Eat stack
0146 5F               (       gshell.asm):00506         SETFONTS clrb             Save regs
0147 3436             (       gshell.asm):00507                  pshs  d,X,Y
0149 173365           (       gshell.asm):00508                  lbsr  SELECT     Select std in as current window
014C D623             (       gshell.asm):00509                  ldb   WNDWPATH+1 Get window path
014E E761             (       gshell.asm):00510                  stb   1,S        Save on stack
0150 17335E           (       gshell.asm):00511                  lbsr  SELECT     Select Gshell window path as current window
0153 C602             (       gshell.asm):00512                  ldb   #FNT.S6X8  Save 6x8 font #
0155 E765             (       gshell.asm):00513                  stb   1+4,S
0157 C6C8             (       gshell.asm):00514                  ldb   #GRP.FNT   Save font group #
0159 E763             (       gshell.asm):00515                  stb   3,S
015B 17337B           (       gshell.asm):00516                  lbsr  FONT       Select the 6x8 font
015E 5F               (       gshell.asm):00517                  clrb             Echo off, pause off
015F ED62             (       gshell.asm):00518                  std   2,S
0161 172BB7           (       gshell.asm):00519                  lbsr  PAUSECHO   Shut echo & pause off
0164 17008B           (       gshell.asm):00520                  lbsr  CURSCLOF   Cursor off & Scaling off
0167 172C50           (       gshell.asm):00521                  lbsr  CRSRAROW   Set graphics cursor to the arrow
016A 3266             (       gshell.asm):00522                  leas  6,S        Eat stack & return
016C 39               (       gshell.asm):00523                  rts   
                      (       gshell.asm):00524         
016D 4F               (       gshell.asm):00525         WINDPARM clra             Default flag to 320 res.
016E D602             (       gshell.asm):00526                  ldb   DEFWTYPE+1 Get default window type
0170 C107             (       gshell.asm):00527                  cmpb  #7         640x200x4 color?
0172 2601             (       gshell.asm):00528                  bne   WINDPAR3   No, leave at 320 res.
0174 4C               (       gshell.asm):00529         WINDPAR1 inca             Flag as 640 res.
0175 971B             (       gshell.asm):00530         WINDPAR3 sta   FLAG640W   Save 640/320 flag
0177 262B             (       gshell.asm):00531                  bne   WINDPAR4   640, skip ahead
0179 CC012F           (       gshell.asm):00532                  ldd   #303       Set Gshell window width to 303
017C DD19             (       gshell.asm):00533                  std   PIXELSWD
017E CC0109           (       gshell.asm):00534                  ldd   #265       Set Directory Bar End X to 265
0181 EDA9036D         (       gshell.asm):00535                  std   DBARDESC+FL.XEND,Y
0185 CC0118           (       gshell.asm):00536                  ldd   #280       '?' Start X pos to 280
0188 EDA90377         (       gshell.asm):00537                  std   QURYDESC+FL.XSTRT,Y
018C CC0127           (       gshell.asm):00538                  ldd   #295       '?' End X pos to 295
018F EDA9037B         (       gshell.asm):00539                  std   QURYDESC+FL.XEND,Y
0193 CC0040           (       gshell.asm):00540                  ldd   #64        Start X position of icons on screen to 64
0196 DD17             (       gshell.asm):00541                  std   STRTXPOS
0198 DD03             (       gshell.asm):00542                  std   ICONCOLW   Also # pixels between icons (width)
019A C610             (       gshell.asm):00543                  ldb   #ICNONSCR  Get max # icons on screen at once
019C DD1E             (       gshell.asm):00544                  std   MAXICONS   Save it
019E C628             (       gshell.asm):00545                  ldb   #40        X Size of GShell window path to 40
01A0 0F5D             (       gshell.asm):00546                  clr   WD48FLAG   Set 40 column flag
01A2 202D             (       gshell.asm):00547                  bra   WINDPARX
                      (       gshell.asm):00548         
                      (       gshell.asm):00549         * 640 wide screen
01A4 CC026F           (       gshell.asm):00550         WINDPAR4 ldd   #623       GShell window width=632
01A7 DD19             (       gshell.asm):00551                  std   PIXELSWD
01A9 CC0240           (       gshell.asm):00552                  ldd   #576       Set directory bar end X to 576
01AC EDA9036D         (       gshell.asm):00553                  std   DBARDESC+FL.XEND,Y
01B0 CC0255           (       gshell.asm):00554                  ldd   #597       '?' Start X pos to 597
01B3 EDA90377         (       gshell.asm):00555                  std   QURYDESC+FL.XSTRT,Y
01B7 CC0267           (       gshell.asm):00556                  ldd   #615       '?' End X pos to 615
01BA EDA9037B         (       gshell.asm):00557                  std   QURYDESC+FL.XEND,Y
01BE CC0038           (       gshell.asm):00558                  ldd   #56        Start X pos of icons on screen to 56
01C1 DD17             (       gshell.asm):00559                  std   STRTXPOS
01C3 C620             (       gshell.asm):00560                  ldb   #ICNONSCR*2 # icons on screen max
01C5 DD1E             (       gshell.asm):00561                  std   MAXICONS   Save it
01C7 C648             (       gshell.asm):00562                  ldb   #72        72 pixels between icons on screen
01C9 D704             (       gshell.asm):00563                  stb   ICONCOLW+1
01CB C680             (       gshell.asm):00564                  ldb   #$80       Flag 80 colum screen
01CD D75D             (       gshell.asm):00565                  stb   WD48FLAG
01CF C650             (       gshell.asm):00566                  ldb   #80        80 column width
01D1 DD24             (       gshell.asm):00567         WINDPARX std   WINDWSZX   Save # text chars wide screen is & return
01D3 39               (       gshell.asm):00568                  rts   
                      (       gshell.asm):00569         
01D4 17140D           (       gshell.asm):00570         FINLINIT lbsr  RESTDIO    Close std I/O, Reopen with current window path
01D7 171C93           (       gshell.asm):00571                  lbsr  SETVIEW    Set up the VIEW menu
01DA 0D20             (       gshell.asm):00572                  tst   RAMSIZE    >128k RAM?
01DC 260D             (       gshell.asm):00573                  bne   FINLINIX   Yes, skip ahead
01DE 7F0301           (       gshell.asm):00574                  clr   VIEWDESC+MN.ENBL No, disable the view menu (only allow 16k 320x200x4)
01E1 7F013F           (       gshell.asm):00575                  clr   ITM.FMAT+MI.ENBL Disable the FORMAT command
01E4 9623             (       gshell.asm):00576                  lda   WNDWPATH+1 Get window path
01E6 C695             (       gshell.asm):00577                  ldb   #SS.UMBAR  Update the menu bar (to enforce above changes)
01E8 103F8E           (       gshell.asm):00578                  os9   I$SETSTT
                      (       gshell.asm):00579         
01EB 170B69           (       gshell.asm):00580         FINLINIX lbsr  STDICONS   Preload built in icons (regular & expanded for some)
01EE 171E86           (       gshell.asm):00581                  lbsr  MOUSENOW   Turn on auto-follow mouse
01F1 39               (       gshell.asm):00582                  rts   
                      (       gshell.asm):00583         
                      (       gshell.asm):00584         * Shut cursor & scaling off
01F2                  (       gshell.asm):00585         CURSCLOF
                      (       gshell.asm):00586                  IFNE  H6309
                      (       gshell.asm):00587                  clrd  
                      (       gshell.asm):00588                  ELSE
01F2 4F               (       gshell.asm):00589                  clra
01F3 5F               (       gshell.asm):00590                  clrb
                      (       gshell.asm):00591                  ENDC
01F4 3406             (       gshell.asm):00592                  pshs  d
01F6 E665             (       gshell.asm):00593                  ldb   5,S
01F8 3406             (       gshell.asm):00594                  pshs  d
01FA 1732F4           (       gshell.asm):00595                  lbsr  SCALESW    Shut scaling off
01FD 172BAE           (       gshell.asm):00596                  lbsr  CURSROFF   Shut cursor off
0200 2018             (       gshell.asm):00597                  bra   CURSCLOX
                      (       gshell.asm):00598         
                      (       gshell.asm):00599         * Clear out signal code, reset up Mouse/keyboard signals
                      (       gshell.asm):00600         * CHANGED: will copy Dirup signal flag to RECDSGNL
0202 4F               (       gshell.asm):00601         SETSGNLS clra             Clear out last received signal
0203 F6134E           (       gshell.asm):00602                  ldb   Dirup      Get Saved Dir updated signal (0 means none)
0206 DD1C             (       gshell.asm):00603                  std   RECDSGNL   Clear or set saved DIR signal
0208 D623             (       gshell.asm):00604                  ldb   WNDWPATH+1 D=window path to receive mouse signal from
020A 8E000A           (       gshell.asm):00605                  ldx   #MOUSIGNL  Mouse signal #
020D 3416             (       gshell.asm):00606                  pshs  d,X        Save for routine call (both only s/b 8 bit)
020F 1731F2           (       gshell.asm):00607                  lbsr  ST.RELEA   Release the mouse signal
0212 17323D           (       gshell.asm):00608                  lbsr  ST.MSSIG   Set the mouse signal 
0215 6C63             (       gshell.asm):00609                  inc   3,S        Bump up signal number (to keyboard signal)
0217 1731DF           (       gshell.asm):00610                  lbsr  ST.SSIG    Set keyboard signal
021A 3264             (       gshell.asm):00611         CURSCLOX leas  4,S        Eat temp stack & return
021C 39               (       gshell.asm):00612                  rts   
                      (       gshell.asm):00613         
021D 3440             (       gshell.asm):00614         GSHSTART pshs  U          Preserve U
021F 327D             (       gshell.asm):00615                  leas  -3,S       Make room on stack
0221 CE0655           (       gshell.asm):00616                  ldu   #MOUSPCKT  Point to mouse packet buffer
0224 172D6A           (       gshell.asm):00617                  lbsr  INITSCRN
0227 8DD9             (       gshell.asm):00618         WAITLOOP bsr   SETSGNLS   Set signals for keyboard & mouse
0229 DC1C             (       gshell.asm):00619                  ldd   RECDSGNL   Get signal
022B 2612             (       gshell.asm):00620                  bne   SGNLRECD   Got one, process it
022D 3406             (       gshell.asm):00621                  pshs  d          Preserve 0
022F 171268           (       gshell.asm):00622                  lbsr  HNDLWAIT   Go sleep, check for signals
0232 EDE1             (       gshell.asm):00623                  std   ,S++       Save child's signal code
0234 2609             (       gshell.asm):00624                  bne   SGNLRECD   Got one, process as if local signal
0236 8DCA             (       gshell.asm):00625                  bsr   SETSGNLS   Set signals again
0238 9E1C             (       gshell.asm):00626                  ldx   RECDSGNL   Get any new signal
023A 2603             (       gshell.asm):00627                  bne   SGNLRECD   Got one, process it
023C 103F0A           (       gshell.asm):00628                  os9   F$SLEEP    Sleep until signal received
023F DC1C             (       gshell.asm):00629         SGNLRECD ldd   RECDSGNL   Get signal code (only need B portion)
0241 C00C             (       gshell.asm):00630                  subb  #DIRSIG    Dir update signal?
0243 102700E9         (       gshell.asm):00631                  lbeq  EQULSIGN   Yes, go do
0247 5C               (       gshell.asm):00632                  incb             Keyboard signal?
0248 1027008B         (       gshell.asm):00633                  lbeq  CHKKEYBD   yes, handle
024C 5C               (       gshell.asm):00634                  incb             Mouse signal?
024D 26D8             (       gshell.asm):00635                  bne   WAITLOOP   No, wait some more
                      (       gshell.asm):00636         * Mouse signal handling here
024F DC22             (       gshell.asm):00637         CHKMOUSE ldd   WNDWPATH   Get window path
0251 3446             (       gshell.asm):00638                  pshs  d,U
0253 173190           (       gshell.asm):00639                  lbsr  GT.MOUSE   Get mouse packet
0256 3264             (       gshell.asm):00640                  leas  4,S
0258 E6C4             (       gshell.asm):00641                  ldb   PT.VALID,U Mouse on current window?
025A 27CB             (       gshell.asm):00642                  beq   WAITLOOP   No, continue waiting
025C E648             (       gshell.asm):00643                  ldb   PT.CBSA,U  Is button A pressed?
025E 27C7             (       gshell.asm):00644                  beq   WAITLOOP   No, continue waiting
0260 E6C816           (       gshell.asm):00645                  ldb   PT.STAT,U  Is mouse in control region or off window?
0263 2609             (       gshell.asm):00646                  bne   CHEKMENU   Yes, go check if menu select made
0265 3440             (       gshell.asm):00647                  pshs  U
0267 170115           (       gshell.asm):00648                  lbsr  CHEKSCRN   No, check if user selected something not on menu bar
026A 3262             (       gshell.asm):00649         SLCTRTRN leas  2,S        Eat stack, poll keyboard/mouse
026C 20B9             (       gshell.asm):00650                  bra   WAITLOOP
                      (       gshell.asm):00651         
026E 9623             (       gshell.asm):00652         CHEKMENU lda   WNDWPATH+1 Get window path
0270 C687             (       gshell.asm):00653                  ldb   #SS.MNSEL  Menu select call
0272 103F8D           (       gshell.asm):00654                  os9   I$GETSTT   Do call (ignore errors... original does)
                      (       gshell.asm):00655         * Error code added to see if we get errors when GSHELL "freezes"
0275 2403             (       gshell.asm):00656                  bcc   NoError
0277 103F06           (       gshell.asm):00657                  os9   F$EXIT
027A 8102             (       gshell.asm):00658         NoError  cmpa  #MID.CLS   Close box?
027C 2722             (       gshell.asm):00659                  beq   CLOSEBOX
027E 8104             (       gshell.asm):00660                  cmpa  #MID.SUP   Scroll up arrow?
0280 2723             (       gshell.asm):00661                  beq   SCRLLUPL
0282 8107             (       gshell.asm):00662                  cmpa  #MID.SLT   Scroll left arrow?
0284 271F             (       gshell.asm):00663                  beq   SCRLLUPL
0286 8105             (       gshell.asm):00664                  cmpa  #MID.SDN   Scroll down arrow?
0288 2724             (       gshell.asm):00665                  beq   SCRLLDNR
028A 8106             (       gshell.asm):00666                  cmpa  #MID.SRT   Scroll right arrow?
028C 2720             (       gshell.asm):00667                  beq   SCRLLDNR
028E 8114             (       gshell.asm):00668                  cmpa  #MID.TDY   Tandy menu?
0290 2725             (       gshell.asm):00669                  beq   TNDYMENU
0292 8117             (       gshell.asm):00670                  cmpa  #MID.FIL   File menu?
0294 2729             (       gshell.asm):00671                  beq   FILEMENU
0296 8119             (       gshell.asm):00672                  cmpa  #MID.DSK   Disk menu?
0298 272D             (       gshell.asm):00673                  beq   DISKMENU
029A 8118             (       gshell.asm):00674                  cmpa  #MID.VEW   View menu?
029C 2731             (       gshell.asm):00675                  beq   VIEWMENU
029E 2087             (       gshell.asm):00676         WAITRTRN bra   WAITLOOP   Continue waiting (About.. menu will never return item)
                      (       gshell.asm):00677         
                      (       gshell.asm):00678         * Called by hitting 'q' or clicking on close box
02A0 171B15           (       gshell.asm):00679         CLOSEBOX lbsr  SUREQUIT   Do 'are you sure' box
02A3 20F9             (       gshell.asm):00680                  bra   WAITRTRN   Obviously hit 'no', continue
                      (       gshell.asm):00681         
02A5 DC36             (       gshell.asm):00682         SCRLLUPL ldd   DEVICNOW   Drive selected?
02A7 27F5             (       gshell.asm):00683                  beq   WAITRTRN   No, continue polling keyboard/mouse
02A9 1704A7           (       gshell.asm):00684                  lbsr  SCRLLUP1   Scroll up on current drive
02AC 20F0             (       gshell.asm):00685                  bra   WAITRTRN   Continue polling keyboard/mouse
                      (       gshell.asm):00686         
02AE DC36             (       gshell.asm):00687         SCRLLDNR ldd   DEVICNOW   If drive selected, scroll down
02B0 27EC             (       gshell.asm):00688                  beq   WAITRTRN   continue polling keyboard/mouse
02B2 170495           (       gshell.asm):00689                  lbsr  SCRLLDN1
02B5 20E7             (       gshell.asm):00690                  bra   WAITRTRN
                      (       gshell.asm):00691         
                      (       gshell.asm):00692         * Entry for all 4 ????MENU calls is B=item # selected
02B7 4F               (       gshell.asm):00693         TNDYMENU clra  
02B8 3406             (       gshell.asm):00694                  pshs  d
02BA 171BCC           (       gshell.asm):00695                  lbsr  TNDYSLCT   Go handle Tandy menu
02BD 20AB             (       gshell.asm):00696                  bra   SLCTRTRN   Eat stack, continue polling
                      (       gshell.asm):00697         
02BF 4F               (       gshell.asm):00698         FILEMENU clra  
02C0 3406             (       gshell.asm):00699                  pshs  d
02C2 1715AE           (       gshell.asm):00700                  lbsr  FILESLCT   Do File menu
02C5 20A3             (       gshell.asm):00701                  bra   SLCTRTRN   Eat stack, continue polling
                      (       gshell.asm):00702         
02C7 4F               (       gshell.asm):00703         DISKMENU clra  
02C8 3406             (       gshell.asm):00704                  pshs  d
02CA 17187F           (       gshell.asm):00705                  lbsr  DISKSLCT   Do Disk menu
02CD 209B             (       gshell.asm):00706                  bra   SLCTRTRN   Eat stack, continue polling
                      (       gshell.asm):00707         
02CF 4F               (       gshell.asm):00708         VIEWMENU clra  
02D0 3406             (       gshell.asm):00709                  pshs  d
02D2 171B80           (       gshell.asm):00710                  lbsr  VIEWSLCT   Do View menu
02D5 2093             (       gshell.asm):00711                  bra   SLCTRTRN   Eat stack, continue polling
                      (       gshell.asm):00712         
                      (       gshell.asm):00713         * Poll keyboard
02D7 CC0001           (       gshell.asm):00714         CHKKEYBD ldd   #1         1 byte length/std in?
02DA 3406             (       gshell.asm):00715                  pshs  d
02DC 3062             (       gshell.asm):00716                  leax  2,S        Point to 1 byte buffer
02DE DC22             (       gshell.asm):00717                  ldd   WNDWPATH   Get window path
02E0 3416             (       gshell.asm):00718                  pshs  d,X
02E2 172F70           (       gshell.asm):00719                  lbsr  I.READ     Read key
02E5 3266             (       gshell.asm):00720                  leas  6,S
02E7 ED7E             (       gshell.asm):00721                  std   -2,S       save byte
02E9 2F4C             (       gshell.asm):00722                  ble   WAITRTN2   No key(?), continue polling
02EB E6E4             (       gshell.asm):00723                  ldb   ,S         Get key press
02ED C13D             (       gshell.asm):00724                  cmpb  #'=
02EF 273F             (       gshell.asm):00725                  beq   EQULSIGN   '=' - go refresh current drive/dir selection
02F1 C124             (       gshell.asm):00726                  cmpb  #'$
02F3 2721             (       gshell.asm):00727                  beq   DOLRSIGN   '$' - go set up new resizable shell window
02F5 C11C             (       gshell.asm):00728                  cmpb  #28        (Pageup)
02F7 27AC             (       gshell.asm):00729                  beq   SCRLLUPL   Scroll up current dir
02F9 C11A             (       gshell.asm):00730                  cmpb  #26        (PageDown)
02FB 27B1             (       gshell.asm):00731                  beq   SCRLLDNR   Scroll down current dir
02FD C13F             (       gshell.asm):00732                  cmpb  #63        '?' - call Help routine
02FF 2769             (       gshell.asm):00733                  beq   ICONQUR1
0301 C45F             (       gshell.asm):00734                  andb  #$5F
0303 C151             (       gshell.asm):00735                  cmpb  #'Q        'Q'uit Gshell
0305 2799             (       gshell.asm):00736                  beq   CLOSEBOX
0307 C153             (       gshell.asm):00737                  cmpb  #'S        'S'ame screen overlay shell
0309 272F             (       gshell.asm):00738                  beq   LETTERS
030B DC22             (       gshell.asm):00739                  ldd   WNDWPATH   Illegal key, beep at user
030D 3406             (       gshell.asm):00740                  pshs  d
030F 172A8E           (       gshell.asm):00741                  lbsr  RINGBELL
0312 3262             (       gshell.asm):00742                  leas  2,S
0314 2021             (       gshell.asm):00743                  bra   WAITRTN2   Continue polling
                      (       gshell.asm):00744         
                      (       gshell.asm):00745         * Resizable shell
0316 C60D             (       gshell.asm):00746         DOLRSIGN ldb   #IC.SHELL  We want the structure for the SHELL entry 
0318 3406             (       gshell.asm):00747                  pshs  d
031A 170D3E           (       gshell.asm):00748                  lbsr  FNDIDESC   (Returns D=ptr to proper ID structure) - may change screen type
031D EDE4             (       gshell.asm):00749                  std   ,S         Save ptr
031F CC0001           (       gshell.asm):00750                  ldd   #1         ? Save flag that we want a double box window for the program
0322 3406             (       gshell.asm):00751                  pshs  d
0324 8E031D           (       gshell.asm):00752                  ldx   #SHELLNAM  Point to shell name for F$Fork
0327 3410             (       gshell.asm):00753                  pshs  X
0329 171BD9           (       gshell.asm):00754                  lbsr  EXCICOND   Execute shell in resizable window
032C 3266             (       gshell.asm):00755                  leas  6,S
032E 2007             (       gshell.asm):00756                  bra   WAITRTN2
                      (       gshell.asm):00757         
                      (       gshell.asm):00758         * Refresh current drive/dir (NEW RBF CALL, IF FULLY WORKING, MAY OBSOLETE THIS
                      (       gshell.asm):00759         * ROUTINE FROM BEING CALLED BY A KEYPRESS)
0330 DC36             (       gshell.asm):00760         EQULSIGN ldd   DEVICNOW   If no drive selected, don't bother
0332 2703             (       gshell.asm):00761                  beq   WAITRTN2
0334 170408           (       gshell.asm):00762                  lbsr  DONEWDIR   Go refresh current drive stuff
0337 16FEED           (       gshell.asm):00763         WAITRTN2 lbra  WAITLOOP
                      (       gshell.asm):00764         
                      (       gshell.asm):00765         * Same screen overlay shell
033A                  (       gshell.asm):00766         LETTERS
                      (       gshell.asm):00767                  IFNE  H6309
                      (       gshell.asm):00768                  clrd  
                      (       gshell.asm):00769                  ELSE
033A 4F               (       gshell.asm):00770                  clra
033B 5F               (       gshell.asm):00771                  clrb
                      (       gshell.asm):00772                  ENDC
033C 3406             (       gshell.asm):00773                  pshs  d
033E 3406             (       gshell.asm):00774                  pshs  d          No parameter for calling program
0340 5C               (       gshell.asm):00775                  incb  
0341 3406             (       gshell.asm):00776                  pshs  d          Flag that we want overlay window to run in
0343 8E031D           (       gshell.asm):00777                  ldx   #SHELLNAM  Point to 'shell'
0346 3410             (       gshell.asm):00778                  pshs  X
0348 171CCD           (       gshell.asm):00779                  lbsr  EXECPRGM   Execute program in overlay window (MAYBE ALLOW RESIZE?)
034B 3268             (       gshell.asm):00780                  leas  8,S
034D 20E8             (       gshell.asm):00781                  bra   WAITRTN2   Continue polling after shell exited
                      (       gshell.asm):00782         
                      (       gshell.asm):00783         * Printer click
034F DC34             (       gshell.asm):00784         ICONPRTR ldd   SELECTED   Is there a file/dir selected?
0351 2714             (       gshell.asm):00785                  beq   ICONTRS1   No, don't do printer
0353 C605             (       gshell.asm):00786                  ldb   #5         Print menu item # from FILES menu
0355 EDE4             (       gshell.asm):00787                  std   ,S
0357 171519           (       gshell.asm):00788                  lbsr  FILESLCT
035A 200B             (       gshell.asm):00789                  bra   ICONTRS1
                      (       gshell.asm):00790         
                      (       gshell.asm):00791         * Trash can click
035C DC34             (       gshell.asm):00792         ICONTRSH ldd   SELECTED   Is there a file/dir selected?
035E 2707             (       gshell.asm):00793                  beq   ICONTRS1   No, don't do trash stuff
0360 C60A             (       gshell.asm):00794                  ldb   #10        Trash delete option from FILES menu structure (no sure prompt)
0362 EDE4             (       gshell.asm):00795                  std   ,S
0364 17150C           (       gshell.asm):00796                  lbsr  FILESLCT
0367 16015E           (       gshell.asm):00797         ICONTRS1 lbra  ICONEXIT
                      (       gshell.asm):00798         
                      (       gshell.asm):00799         * ? in upper right corner - hot key
036A 3406             (       gshell.asm):00800         ICONQUR1 pshs  d          Just so it exits properly
036C C607             (       gshell.asm):00801                  ldb   #7
036E 3406             (       gshell.asm):00802                  pshs  d
0370 171B16           (       gshell.asm):00803                  lbsr  TNDYSLCT
0373 20C2             (       gshell.asm):00804                  bra   WAITRTN2
                      (       gshell.asm):00805         
0375 C607             (       gshell.asm):00806         ICONQURY ldb   #7         '?' selected, call 'Help' (menu item 7) from Tandy menu
0377 3406             (       gshell.asm):00807                  pshs  d
0379 171B0D           (       gshell.asm):00808                  lbsr  TNDYSLCT
037C 160094           (       gshell.asm):00809                  lbra  ICONEXT1
                      (       gshell.asm):00810         
                      (       gshell.asm):00811         * Not menu bar selection, try other stuff on screen
037F 3440             (       gshell.asm):00812         CHEKSCRN pshs  U
0381 EC64             (       gshell.asm):00813                  ldd   8-4,S
0383 3416             (       gshell.asm):00814                  pshs  d,X
0385 17092F           (       gshell.asm):00815                  lbsr  ISITICON   Check if drive or icon
0388 1F03             (       gshell.asm):00816                  tfr   D,U
038A EF7E             (       gshell.asm):00817                  stu   -2,S       Set CC based on ptr to icon info
038C 10270128         (       gshell.asm):00818                  lbeq  DSLCTALL   Empty spot clicked, clear any currently highlighted stuff
0390 E648             (       gshell.asm):00819                  ldb   FL.ICONO,U Get selected icon buffer #
0392 C109             (       gshell.asm):00820                  cmpb  #IC.TRASH  Is it the trash can?
0394 27C6             (       gshell.asm):00821                  beq   ICONTRSH   Yes, go handle
0396 C10F             (       gshell.asm):00822                  cmpb  #IC.PRNTR  Is it the printer?
0398 27B5             (       gshell.asm):00823                  beq   ICONPRTR   Yes, go do it
039A C10E             (       gshell.asm):00824                  cmpb  #IC.QUERY  Is it the question mark?
039C 27D7             (       gshell.asm):00825                  beq   ICONQURY   Yes, go do help
039E 172BB2           (       gshell.asm):00826                  lbsr  ENBLSOFF   Disable any menu items that deal with specific file
03A1 C601             (       gshell.asm):00827                  ldb   #1
03A3 EDE4             (       gshell.asm):00828                  std   ,S
03A5 DC34             (       gshell.asm):00829                  ldd   SELECTED   Get current selected icon
03A7 2710             (       gshell.asm):00830                  beq   CHEKSCR2   None, skip ahead
03A9 119334           (       gshell.asm):00831                  cmpu  SELECTED   Same as previously selected icon?
03AC 2604             (       gshell.asm):00832                  bne   CHEKSCR1   No, unselect previous icon
03AE 6C61             (       gshell.asm):00833                  inc   1,S
03B0 2007             (       gshell.asm):00834                  bra   CHEKSCR2
                      (       gshell.asm):00835         
03B2 3406             (       gshell.asm):00836         CHEKSCR1 pshs  d          Unselect previously selected icon
03B4 1707EF           (       gshell.asm):00837                  lbsr  UNSLICON
03B7 3262             (       gshell.asm):00838                  leas  2,S
03B9 DF34             (       gshell.asm):00839         CHEKSCR2 stu   SELECTED   Save newly selected icon
03BB E648             (       gshell.asm):00840                  ldb   FL.ICONO,U Get icon # (also type?)
03BD 5A               (       gshell.asm):00841                  decb  
03BE 10270087         (       gshell.asm):00842                  lbeq  ICONTEXT   1=Text file icon
03C2 5A               (       gshell.asm):00843                  decb  
03C3 2765             (       gshell.asm):00844                  beq   ICONFLDR   2=Folder (dir) icon
03C5 5A               (       gshell.asm):00845                  decb  
03C6 102700C8         (       gshell.asm):00846                  lbeq  ICONPRGM   3=Program (executable) icon
03CA 5A               (       gshell.asm):00847                  decb  
03CB 2758             (       gshell.asm):00848                  beq   ICONCLOS   4=Close box for current device title bar
03CD 5A               (       gshell.asm):00849                  decb  
03CE 2716             (       gshell.asm):00850                  beq   ICONDRIV   5=Disk drive icon
03D0 5A               (       gshell.asm):00851                  decb  
03D1 102700A8         (       gshell.asm):00852                  lbeq  ICONAIF    6=AIF file icon
03D5 5A               (       gshell.asm):00853                  decb  
03D6 10270097         (       gshell.asm):00854                  lbeq  ICON.XXX   7=file with extension already defined by AIF
03DA 5A               (       gshell.asm):00855                  decb  
03DB 2638             (       gshell.asm):00856                  bne   ICONEXT2   >8, exit icon check routine
03DD DC36             (       gshell.asm):00857                  ldd   DEVICNOW   8=current device title bar (to refresh current dir)
03DF 2734             (       gshell.asm):00858                  beq   ICONEXT2
03E1 17035B           (       gshell.asm):00859                  lbsr  DONEWDIR   Refresh current dir
03E4 202F             (       gshell.asm):00860                  bra   ICONEXT2
                      (       gshell.asm):00861         
                      (       gshell.asm):00862         * Select new drive icon
03E6 DC36             (       gshell.asm):00863         ICONDRIV ldd   DEVICNOW   Get current device
03E8 ED62             (       gshell.asm):00864                  std   2,S
03EA 3406             (       gshell.asm):00865                  pshs  d
03EC 1707B7           (       gshell.asm):00866                  lbsr  UNSLICON   Unselect current device
03EF EFE4             (       gshell.asm):00867                  stu   ,S
03F1 17077B           (       gshell.asm):00868                  lbsr  SELCICON   Select new icon
03F4 EC4C             (       gshell.asm):00869                  ldd   FL.FNAME,U Get ptr to drive name
03F6 EDE4             (       gshell.asm):00870                  std   ,S
03F8 170190           (       gshell.asm):00871                  lbsr  NEWDDIR    Get new drive dir
03FB EDE1             (       gshell.asm):00872                  std   ,S++
03FD 2619             (       gshell.asm):00873                  bne   ICONDROK   Legit, continue
03FF 3440             (       gshell.asm):00874                  pshs  U
0401 1707A2           (       gshell.asm):00875                  lbsr  UNSLICON   Bad dir, unselect drive
0404 3262             (       gshell.asm):00876                  leas  2,S
                      (       gshell.asm):00877                  IFNE  H6309
                      (       gshell.asm):00878                  clrd  
                      (       gshell.asm):00879                  ELSE
0406 4F               (       gshell.asm):00880                  clra
0407 5F               (       gshell.asm):00881                  clrb
                      (       gshell.asm):00882                  ENDC
0408 DD34             (       gshell.asm):00883                  std   SELECTED   Current device=none
040A EC62             (       gshell.asm):00884                  ldd   2,S        Did user have a different drive selected before?
040C 2707             (       gshell.asm):00885                  beq   ICONEXT2   No, exit
040E 3406             (       gshell.asm):00886                  pshs  d
0410 17075C           (       gshell.asm):00887                  lbsr  SELCICON   Re-select the old drive instead
0413 3262             (       gshell.asm):00888         ICONEXT1 leas  2,S
0415 1600B0           (       gshell.asm):00889         ICONEXT2 lbra  ICONEXIT
                      (       gshell.asm):00890         
                      (       gshell.asm):00891         * User selected new, legitimate drive
0418 C601             (       gshell.asm):00892         ICONDROK ldb   #1         Enable menu items flag
041A 3406             (       gshell.asm):00893                  pshs  d
041C 172B3F           (       gshell.asm):00894                  lbsr  ENFREFLD   Enable drive specific menu items (NOT FILE ONES!)
041F 3262             (       gshell.asm):00895                  leas  2,S
0421 DF36             (       gshell.asm):00896                  stu   DEVICNOW   Save new current device
0423 20F0             (       gshell.asm):00897                  bra   ICONEXT2
                      (       gshell.asm):00898         
                      (       gshell.asm):00899         * Selected current path close box (go up a directory)
0425 1701C0           (       gshell.asm):00900         ICONCLOS lbsr  PARENTDR   Change to parent directory or drive
0428 20EB             (       gshell.asm):00901                  bra   ICONEXT2
                      (       gshell.asm):00902         
                      (       gshell.asm):00903         * Selected a folder (directory)
042A ECE4             (       gshell.asm):00904         ICONFLDR ldd   ,S         ??? Get # times mouse clicked
042C 5A               (       gshell.asm):00905                  decb  
042D 2709             (       gshell.asm):00906                  beq   ONECLIKF   Once, skip ahead
042F EC4C             (       gshell.asm):00907                  ldd   FL.FNAME,U Twice, get ptr to folder name
0431 3406             (       gshell.asm):00908                  pshs  d
0433 170131           (       gshell.asm):00909                  lbsr  OPENFLDR   Open the folder & return
0436 20DB             (       gshell.asm):00910                  bra   ICONEXT1
                      (       gshell.asm):00911         
0438 3440             (       gshell.asm):00912         ONECLIKF pshs  U
043A 170732           (       gshell.asm):00913                  lbsr  SELCICON   Highlight (select) the folder
043D C601             (       gshell.asm):00914                  ldb   #1
043F EDE4             (       gshell.asm):00915                  std   ,S
0441 172B26           (       gshell.asm):00916                  lbsr  ENBLOPEN   Enable OPEN item on files menu
0444 172B3E           (       gshell.asm):00917                  lbsr  ENSTRNDL   Enable STAT, RENAME & DELETE on files menu
0447 20CA             (       gshell.asm):00918                  bra   ICONEXT1   Exit
                      (       gshell.asm):00919         
                      (       gshell.asm):00920         * Text file icon selected
0449 C601             (       gshell.asm):00921         ICONTEXT ldb   #1         Enable LIST & PRINT on Files menu
044B 3406             (       gshell.asm):00922                  pshs  d
044D 172B20           (       gshell.asm):00923                  lbsr  ENLSTPRT
0450 EC62             (       gshell.asm):00924                  ldd   2,S        Get # of mouse clicks
0452 5A               (       gshell.asm):00925                  decb  
0453 2607             (       gshell.asm):00926                  bne   TWOCLIKT   double click, skip ahead
0455 EFE4             (       gshell.asm):00927                  stu   ,S         Select the icon
0457 170715           (       gshell.asm):00928                  lbsr  SELCICON
045A 2052             (       gshell.asm):00929                  bra   ICONTEX1
                      (       gshell.asm):00930         
045C 8E0001           (       gshell.asm):00931         TWOCLIKT ldx   #1         Double clicked text file: try executing as shell script
045F AFE4             (       gshell.asm):00932                  stx   ,S
0461 EC4C             (       gshell.asm):00933                  ldd   FL.FNAME,U Save ptr to filename
0463 3406             (       gshell.asm):00934                  pshs  d
0465 CC031D           (       gshell.asm):00935                  ldd   #SHELLNAM  Save ptr to 'shell' and 'use overlay window' flag
0468 3416             (       gshell.asm):00936                  pshs  d,X
046A 171BAB           (       gshell.asm):00937                  lbsr  EXECPRGM   Execute shell in overlay window
046D 3266             (       gshell.asm):00938                  leas  6,S
046F 203D             (       gshell.asm):00939                  bra   ICONTEX1
                      (       gshell.asm):00940         
                      (       gshell.asm):00941         * File with previously found AIF extension clicked on
0471 ECE4             (       gshell.asm):00942         ICON.XXX ldd   ,S         Get # of clicks
0473 5A               (       gshell.asm):00943                  decb  
0474 272A             (       gshell.asm):00944                  beq   ICONAIF1   1 click, skip ahead
0476 3440             (       gshell.asm):00945                  pshs  U
0478 170096           (       gshell.asm):00946                  lbsr  EXEC.XXX   Double click, execute the program related to icon
047B 2028             (       gshell.asm):00947                  bra   ICONAIF2
                      (       gshell.asm):00948         
                      (       gshell.asm):00949         * AIF file clicked on
047D C601             (       gshell.asm):00950         ICONAIF  ldb   #1         Enable LIST & PRINT on FILE menu
047F 3406             (       gshell.asm):00951                  pshs  d
0481 172AEC           (       gshell.asm):00952                  lbsr  ENLSTPRT
0484 3262             (       gshell.asm):00953                  leas  2,S
0486 ECE4             (       gshell.asm):00954                  ldd   ,S         Get # of clicks
0488 5A               (       gshell.asm):00955                  decb  
0489 2715             (       gshell.asm):00956                  beq   ICONAIF1   1 click, skip ahead
048B 3440             (       gshell.asm):00957                  pshs  U
048D 1700A1           (       gshell.asm):00958                  lbsr  EXECAIF    2 clicks, execute program AIF file refers to
0490 2013             (       gshell.asm):00959                  bra   ICONAIF2
                      (       gshell.asm):00960         
                      (       gshell.asm):00961         * Executable program clicked on
0492 ECE4             (       gshell.asm):00962         ICONPRGM ldd   ,S         Get # of clicks
0494 5A               (       gshell.asm):00963                  decb  
0495 2709             (       gshell.asm):00964                  beq   ICONAIF1   1 click, skip ahead
0497 3406             (       gshell.asm):00965                  pshs  d
0499 1713D7           (       gshell.asm):00966                  lbsr  FILESLCT   2 clicks, Go to file select menu, option 1 (OPEN)
049C 3262             (       gshell.asm):00967                  leas  2,S
049E 2007             (       gshell.asm):00968                  bra   ICONPRG1
                      (       gshell.asm):00969         
04A0 3440             (       gshell.asm):00970         ICONAIF1 pshs  U
04A2 1706CA           (       gshell.asm):00971                  lbsr  SELCICON   Do select icon on screen
04A5 3262             (       gshell.asm):00972         ICONAIF2 leas  2,S
04A7 C601             (       gshell.asm):00973         ICONPRG1 ldb   #1         Enable OPEN item on FILES menu
04A9 3406             (       gshell.asm):00974                  pshs  d
04AB 172ABC           (       gshell.asm):00975                  lbsr  ENBLOPEN
04AE C601             (       gshell.asm):00976         ICONTEX1 ldb   #1
04B0 EDE4             (       gshell.asm):00977                  std   ,S
04B2 172AC4           (       gshell.asm):00978                  lbsr  ENBLCOPY   Enable COPY item on FILES menu
04B5 16FF5B           (       gshell.asm):00979                  lbra  ICONEXT1
                      (       gshell.asm):00980         
04B8 DC34             (       gshell.asm):00981         DSLCTALL ldd   SELECTED   Get ptr to current selected icon
04BA 3406             (       gshell.asm):00982                  pshs  d
04BC 1706E7           (       gshell.asm):00983                  lbsr  UNSLICON   Unselect icon
04BF 172A91           (       gshell.asm):00984                  lbsr  ENBLSOFF   Shut all FILES menu items off
04C2 3262             (       gshell.asm):00985                  leas  2,S
                      (       gshell.asm):00986                  IFNE  H6309
                      (       gshell.asm):00987                  clrd  
                      (       gshell.asm):00988                  ELSE
04C4 4F               (       gshell.asm):00989                  clra
04C5 5F               (       gshell.asm):00990                  clrb
                      (       gshell.asm):00991                  ENDC
04C6 DD34             (       gshell.asm):00992                  std   SELECTED   Set selected file/device to none
04C8 3264             (       gshell.asm):00993         ICONEXIT leas  4,S
04CA 35C0             (       gshell.asm):00994                  puls  U,PC
                      (       gshell.asm):00995         
                      (       gshell.asm):00996         * Pop up overlay window to ask user for parameters for file we are about to
                      (       gshell.asm):00997         *  execute.
04CC 3440             (       gshell.asm):00998         GETPARMS pshs  U
04CE EC64             (       gshell.asm):00999                  ldd   4,S
04D0 32E8C6           (       gshell.asm):01000                  leas  -48-10,S   Make room on stack for string copy
04D3 308D0532         (       gshell.asm):01001                  leax  TENSPACE,PC
04D7 3416             (       gshell.asm):01002                  pshs  d,X        Save ptr to 10 spaces & ptr to module name we are executing
04D9 308C25           (       gshell.asm):01003                  leax  <PARMSFOR,PC Save ptr to "parameters for" text
04DC 3410             (       gshell.asm):01004                  pshs  X
04DE 3066             (       gshell.asm):01005                  leax  4+2,S
04E0 3410             (       gshell.asm):01006                  pshs  X
04E2 172DFF           (       gshell.asm):01007                  lbsr  STRCPY     Copy "paramters for" onto stack
04E5 3264             (       gshell.asm):01008                  leas  4,S
04E7 3406             (       gshell.asm):01009                  pshs  d
04E9 172E08           (       gshell.asm):01010                  lbsr  STRCAT     Add 10 spaces
04EC 3264             (       gshell.asm):01011                  leas  4,S
04EE 3406             (       gshell.asm):01012                  pshs  d
04F0 172E01           (       gshell.asm):01013                  lbsr  STRCAT     Add module name
04F3 3264             (       gshell.asm):01014                  leas  4,S
04F5 30E4             (       gshell.asm):01015                  leax  ,S
04F7 3410             (       gshell.asm):01016                  pshs  X
04F9 171F22           (       gshell.asm):01017                  lbsr  INPTSCRN   Get parameter info from user
04FC 32E83C           (       gshell.asm):01018                  leas  48+2+10,S  Eat stack & return
04FF 35C0             (       gshell.asm):01019                  puls  U,PC
                      (       gshell.asm):01020         
0501 506172616D657465 (       gshell.asm):01021         PARMSFOR fcc   "Parameters for "
     727320666F7220
0510 00               (       gshell.asm):01022                  fcb   NUL
                      (       gshell.asm):01023         
0511 3440             (       gshell.asm):01024         EXEC.XXX pshs  U
0513 8D0F             (       gshell.asm):01025                  bsr   IDESCTST
0515 274E             (       gshell.asm):01026                  beq   EXECAIF3
0517 3406             (       gshell.asm):01027                  pshs  d
0519 EC4C             (       gshell.asm):01028                  ldd   FL.FNAME,U Get ptr to file name
051B 3406             (       gshell.asm):01029                  pshs  d
051D 171039           (       gshell.asm):01030                  lbsr  STPREFIX
0520 3546             (       gshell.asm):01031                  puls  d,U
0522 2015             (       gshell.asm):01032                  bra   EXEC.XX1
                      (       gshell.asm):01033         
                      (       gshell.asm):01034         * See if there is a ID.* entry for a FL.* entry
                      (       gshell.asm):01035         * Entry: 0-1,s : RTS address
                      (       gshell.asm):01036         *        2-3,s : ignored
                      (       gshell.asm):01037         *        4-5,s : ignored
                      (       gshell.asm):01038         *        6-7,s : FL.* ptr
                      (       gshell.asm):01039         * Exit: D=ptr to ID.* structure (0 if none)
0524 EE66             (       gshell.asm):01040         IDESCTST ldu   4+2,S      Get ptr to file info structure (FL.*)
0526 4F               (       gshell.asm):01041                  clra  
0527 E649             (       gshell.asm):01042                  ldb   FL.AIFNO,U Get entry # in ID.* table
0529 3406             (       gshell.asm):01043                  pshs  d
052B 170B2D           (       gshell.asm):01044                  lbsr  FNDIDESC   Get ptr to appropriate ID.* table entry
052E EDE1             (       gshell.asm):01045                  std   ,S++       Set zero flag based on ptr
0530 39               (       gshell.asm):01046                  rts   
                      (       gshell.asm):01047         
0531 3440             (       gshell.asm):01048         EXECAIF  pshs  U          Save U
0533 8DEF             (       gshell.asm):01049                  bsr   IDESCTST   Get ID.* ptr
0535 272E             (       gshell.asm):01050                  beq   EXECAIF3   None, exit
0537 1F03             (       gshell.asm):01051                  tfr   D,U        Move ptr to U
0539 A6D812           (       gshell.asm):01052         EXEC.XX1 lda   [ID.PARAM,U] Get 1st char of parms
053C 271A             (       gshell.asm):01053                  beq   EXECAIF2   None, skip ahead
053E 813F             (       gshell.asm):01054                  cmpa  #'?        Question mark (prompt for parms)?
0540 260C             (       gshell.asm):01055                  bne   EXECAIFN   No, use parms raw
0542 EC4E             (       gshell.asm):01056                  ldd   ID.MNAME,U Get ptr to module name
0544 3406             (       gshell.asm):01057                  pshs  d
0546 8D84             (       gshell.asm):01058                  bsr   GETPARMS   Prompt user for parms (uses overlay with module name)
0548 EDE1             (       gshell.asm):01059                  std   ,S++       Size of user response
054A 270C             (       gshell.asm):01060                  beq   EXECAIF2   Just hit enter, skip ahead
054C 2003             (       gshell.asm):01061                  bra   EXECAIFP
                      (       gshell.asm):01062         
054E ECC812           (       gshell.asm):01063         EXECAIFN ldd   ID.PARAM,U Get ptr to parms string
0551 3406             (       gshell.asm):01064         EXECAIFP pshs  d          Save ptr to parms string
0553 171003           (       gshell.asm):01065                  lbsr  STPREFIX   Prefix that onto Fork line string
0556 3262             (       gshell.asm):01066                  leas  2,S
0558                  (       gshell.asm):01067         EXECAIF2
                      (       gshell.asm):01068                  IFNE  H6309
                      (       gshell.asm):01069                  clrd  
                      (       gshell.asm):01070                  ELSE
0558 4F               (       gshell.asm):01071                  clra
0559 5F               (       gshell.asm):01072                  clrb
                      (       gshell.asm):01073                  ENDC
055A 3446             (       gshell.asm):01074                  pshs  d,U
055C EC4E             (       gshell.asm):01075                  ldd   ID.MNAME,U Get ptr to module name to fork
055E 3406             (       gshell.asm):01076                  pshs  d
0560 1719A2           (       gshell.asm):01077                  lbsr  EXCICOND   Go execute module in resizable window
0563 3266             (       gshell.asm):01078                  leas  6,S
0565 35C0             (       gshell.asm):01079         EXECAIF3 puls  U,PC
                      (       gshell.asm):01080         
                      (       gshell.asm):01081         * Open folder
0567 3440             (       gshell.asm):01082         OPENFLDR pshs  U
0569 EE64             (       gshell.asm):01083                  ldu   4,S
056B 3440             (       gshell.asm):01084                  pshs  U
056D 172865           (       gshell.asm):01085                  lbsr  CHGDDIR    Change dir to newly selected folder
0570 EDE1             (       gshell.asm):01086                  std   ,S++
0572 2612             (       gshell.asm):01087                  bne   OPENFLD1
0574 8E0455           (       gshell.asm):01088                  ldx   #DDIRNAME  Append new dir to dir name on drive bar
0577 3410             (       gshell.asm):01089                  pshs  X
0579 172D5D           (       gshell.asm):01090                  lbsr  STREND     Find end of current path
057C 3262             (       gshell.asm):01091                  leas  2,S
057E 1F01             (       gshell.asm):01092                  tfr   D,X
0580 C62F             (       gshell.asm):01093                  ldb   #'/        Add slash to end of path
0582 E780             (       gshell.asm):01094                  stb   ,X+
0584 2018             (       gshell.asm):01095                  bra   NEWDDIR1
                      (       gshell.asm):01096         
0586 308C31           (       gshell.asm):01097         OPENFLD1 leax  <CANTFLDR,PC
0589 2024             (       gshell.asm):01098                  bra   OPENFLD2
                      (       gshell.asm):01099         
058B 3440             (       gshell.asm):01100         NEWDDIR  pshs  U
058D EE64             (       gshell.asm):01101                  ldu   4,S
058F 3440             (       gshell.asm):01102                  pshs  U
0591 172841           (       gshell.asm):01103                  lbsr  CHGDDIR
0594 EDE1             (       gshell.asm):01104                  std   ,S++
0596 2614             (       gshell.asm):01105                  bne   NEWDDIR2
0598 170AEE           (       gshell.asm):01106                  lbsr  KILIBUFS   Kill previous dir's icon buffers & get/put buffers?
059B 8E0455           (       gshell.asm):01107                  ldx   #DDIRNAME  Point to full path to current data directory
                      (       gshell.asm):01108         
059E 3450             (       gshell.asm):01109         NEWDDIR1 pshs  X,U
05A0 172D41           (       gshell.asm):01110                  lbsr  STRCPY     Add new path (,U) to end of current path (,X)
05A3 3264             (       gshell.asm):01111                  leas  4,S
05A5 170197           (       gshell.asm):01112                  lbsr  DONEWDIR   Refresh current drive on screen
05A8 C601             (       gshell.asm):01113                  ldb   #1         Exit with D=1
05AA 200B             (       gshell.asm):01114                  bra   NEWDDIR3
                      (       gshell.asm):01115         
05AC 308C22           (       gshell.asm):01116         NEWDDIR2 leax  <CANTDEVC,PC
05AF 3410             (       gshell.asm):01117         OPENFLD2 pshs  X
05B1 170C51           (       gshell.asm):01118                  lbsr  OLAYPRNT
05B4 3262             (       gshell.asm):01119                  leas  2,S
05B6 5F               (       gshell.asm):01120                  clrb  
05B7 4F               (       gshell.asm):01121         NEWDDIR3 clra  
05B8 35C0             (       gshell.asm):01122                  puls  U,PC
                      (       gshell.asm):01123         
05BA 43616E2774206F70 (       gshell.asm):01124         CANTFLDR fcc   "Can't open this folder"
     656E207468697320
     666F6C646572
05D0 00               (       gshell.asm):01125                  fcb   NUL
                      (       gshell.asm):01126         
05D1 43616E2774206F70 (       gshell.asm):01127         CANTDEVC fcc   "Can't open this device"
     656E207468697320
     646576696365
05E7 00               (       gshell.asm):01128                  fcb   NUL
                      (       gshell.asm):01129         
                      (       gshell.asm):01130         * Change to parent directory (clicked on dir bar close box)
05E8 3440             (       gshell.asm):01131         PARENTDR pshs  U
05EA 1706B9           (       gshell.asm):01132                  lbsr  FNDSLASH   Find slash NOTE: ONLY CALLED ONCE, EMBED!
05ED ED7E             (       gshell.asm):01133                  std   -2,S       On root?
05EF 2617             (       gshell.asm):01134                  bne   PARENTD1   Yes, skip ahead
05F1 308C33           (       gshell.asm):01135                  leax  <DOTDOT,PC Change directory to '..'
05F4 3410             (       gshell.asm):01136                  pshs  X
05F6 1727DC           (       gshell.asm):01137                  lbsr  CHGDDIR
05F9 8E0455           (       gshell.asm):01138                  ldx   #DDIRNAME  Get ptr to current full path to data dir.
05FC AFE4             (       gshell.asm):01139                  stx   ,S
05FE 17148C           (       gshell.asm):01140                  lbsr  TERMSLSH   Cut data dir off one directory level earlier
0601 3262             (       gshell.asm):01141                  leas  2,S        Eat stack
0603 170139           (       gshell.asm):01142                  lbsr  DONEWDIR   Refresh current drive on screen
0606 201D             (       gshell.asm):01143                  bra   PARENTD2
                      (       gshell.asm):01144         
                      (       gshell.asm):01145         * On root directory of current drive, unselect drive itself
0608 5F               (       gshell.asm):01146         PARENTD1 clrb             D=0
0609 3406             (       gshell.asm):01147                  pshs  d          Save it
060B 172950           (       gshell.asm):01148                  lbsr  ENFREFLD   Disable Drive specific menu items
060E 17023C           (       gshell.asm):01149                  lbsr  CLRDSCRN   Wipe out current dir icon window, reset scroll bars to 0,0
0611 DC36             (       gshell.asm):01150                  ldd   DEVICNOW   Get ptr to table for current selected drive 
0613 EDE4             (       gshell.asm):01151                  std   ,S         Save it
0615 17058E           (       gshell.asm):01152                  lbsr  UNSLICON   Unselect the current drive
0618 3262             (       gshell.asm):01153                  leas  2,S
                      (       gshell.asm):01154                  IFNE  H6309
                      (       gshell.asm):01155                  clrd  
                      (       gshell.asm):01156                  ELSE
061A 4F               (       gshell.asm):01157                  clra
061B 5F               (       gshell.asm):01158                  clrb
                      (       gshell.asm):01159                  ENDC
061C DD2C             (       gshell.asm):01160                  std   STRTICON   Set ptr to start icon for screen to NONE
061E DD34             (       gshell.asm):01161                  std   SELECTED   Current selected icon to NONE
0620 DD36             (       gshell.asm):01162                  std   DEVICNOW   Current selected device to NONE
0622 170A64           (       gshell.asm):01163                  lbsr  KILIBUFS   Kill icon table & get/put buffers
0625 35C0             (       gshell.asm):01164         PARENTD2 puls  U,PC
                      (       gshell.asm):01165         
0627 2E2E             (       gshell.asm):01166         DOTDOT   fcc   ".."
0629 00               (       gshell.asm):01167                  fcb   NUL
                      (       gshell.asm):01168         
062A 1600C9           (       gshell.asm):01169         KILPDS00 lbra  KILPDS16   Eat stack & exit
                      (       gshell.asm):01170         
                      (       gshell.asm):01171         * Kill process info for a process that has stopped (update linked list)
                      (       gshell.asm):01172         * NOTE: BOTH 6809/6309 - SOME STU -2,S LOOK PRETTY USELESS
                      (       gshell.asm):01173         * Entry: 0-1,s RTS address
                      (       gshell.asm):01174         *        2-3,s ptr to GD.* (process table entry ptr) to kill
062D 3440             (       gshell.asm):01175         KILPDESC pshs  U
                      (       gshell.asm):01176                  IFNE  H6309
                      (       gshell.asm):01177                  clrd             No entry found yet
                      (       gshell.asm):01178                  ELSE
062F 4F               (       gshell.asm):01179                  clra
0630 5F               (       gshell.asm):01180                  clrb
                      (       gshell.asm):01181                  ENDC
0631 3406             (       gshell.asm):01182                  pshs  d          Save it
0633 DE38             (       gshell.asm):01183                  ldu   PTBLSPTR   Get ptr to start of process descriptor table
0635 27F3             (       gshell.asm):01184                  beq   KILPDS00   None, exit
0637 EC66             (       gshell.asm):01185                  ldd   6,S        Get process table entry ptr we are to kill
0639 27EF             (       gshell.asm):01186                  beq   KILPDS00   None, exit
063B 11A366           (       gshell.asm):01187                  cmpu  6,S        Is the requested entry to kill the 1st entry in table?
063E 270E             (       gshell.asm):01188                  beq   KILPDES2   Yes, skip ahead
                      (       gshell.asm):01189         * Entry other than 1st to kill
0640 EFE4             (       gshell.asm):01190         KILPDES1 stu   ,S         Save ptr to entry previous to one we want to kill
0642 EEC81A           (       gshell.asm):01191                  ldu   GD.LINK,U  Get ptr to next process table entry in chain
                      (       gshell.asm):01192         * Following line should be removed (inherent from LDU)
0645 EF7E             (       gshell.asm):01193                  stu   -2,S
0647 2705             (       gshell.asm):01194                  beq   KILPDES2   No other entries, exit (if you follow below) (REALLY STUPID)
0649 11A366           (       gshell.asm):01195                  cmpu  6,S        Is this the entry we are trying to kill?
064C 26F2             (       gshell.asm):01196                  bne   KILPDES1   No, check next link
                      (       gshell.asm):01197         * ??? Remove entry from linked list (next entry in list pointed to by U)
064E EF7E             (       gshell.asm):01198         KILPDES2 stu   -2,S       Next entry a legit one?
0650 27D8             (       gshell.asm):01199                  beq   KILPDS00   No, exit
0652 119338           (       gshell.asm):01200                  cmpu  PTBLSPTR   Is it the 1st entry?
0655 2607             (       gshell.asm):01201                  bne   KILPDES3   No, skip ahead
0657 ECC81A           (       gshell.asm):01202                  ldd   GD.LINK,U  Get ptr to next process table entry
065A DD38             (       gshell.asm):01203                  std   PTBLSPTR   Reset this ptr as the 1st process table entry
065C 2008             (       gshell.asm):01204                  bra   KILPDES4   Skip ahead
                      (       gshell.asm):01205         
                      (       gshell.asm):01206         * one to remove is not 1st entry
065E ECC81A           (       gshell.asm):01207         KILPDES3 ldd   GD.LINK,U  Get next entry in linked list
0661 AEE4             (       gshell.asm):01208                  ldx   ,S         Get ptr to one previous to the one we want to kill
0663 ED881A           (       gshell.asm):01209                  std   GD.LINK,X  Repoint previous entry to link to next entry (bypass us)
0666 CC001A           (       gshell.asm):01210         KILPDES4 ldd   #GD.LINK   Offset to link ptr in structure
                      (       gshell.asm):01211                  IFNE  H6309
                      (       gshell.asm):01212                  addr  u,d        Point to next link ptr entry in current table entry
                      (       gshell.asm):01213                  ELSE
0669 3440             (       gshell.asm):01214                  pshs  u
066B E3E1             (       gshell.asm):01215                  addd  ,s++
                      (       gshell.asm):01216                  ENDC
066D 10930D           (       gshell.asm):01217                  cmpd  PTBLNEXT   Same as next available process descriptor link?
0670 2610             (       gshell.asm):01218                  bne   KILPDES6   No, skip ahead
0672 ECE4             (       gshell.asm):01219                  ldd   ,S         Get previous entry ptr
0674 2707             (       gshell.asm):01220                  beq   KILPDES5   None, skip ahead
0676 C3001A           (       gshell.asm):01221                  addd  #GD.LINK   Offset to next link ptr
0679 DD0D             (       gshell.asm):01222                  std   PTBLNEXT   Save as ptr to next available process descriptor link
067B 2005             (       gshell.asm):01223                  bra   KILPDES6
                      (       gshell.asm):01224         
067D 30A838           (       gshell.asm):01225         KILPDES5 leax  <PTBLSPTR,Y Point to 1st entry
0680 9F0D             (       gshell.asm):01226                  stx   PTBLNEXT   Save as next available process desc. link
0682 EC4C             (       gshell.asm):01227         KILPDES6 ldd   GD.WPATH,U Get window path for process
0684 2D3E             (       gshell.asm):01228                  blt   KILPDS10   If negative, skip ahead
0686 109322           (       gshell.asm):01229                  cmpd  WNDWPATH   Same as current GSHELL path?
0689 260C             (       gshell.asm):01230                  bne   KILPDES7   No, skip ahead
068B 171C8A           (       gshell.asm):01231                  lbsr  KILLOLAY   Remove overlay window it was running in.
068E 0D20             (       gshell.asm):01232                  tst   RAMSIZE    128k RAM machine?
0690 263B             (       gshell.asm):01233                  bne   KILPDS12   >=256K, skip ahead
0692 172707           (       gshell.asm):01234                  lbsr  CLRSCRN    on 128k, clear GSHELL screen 1st
0695 2036             (       gshell.asm):01235                  bra   KILPDS12
                      (       gshell.asm):01236         
                      (       gshell.asm):01237         *Process killed was on different path than GSHELL itself is on
0697 EC4E             (       gshell.asm):01238         KILPDES7 ldd   GD.DW.OW,U Process running in overlay window?
0699 2717             (       gshell.asm):01239                  beq   KILPDES8   No, skip ahead
                      (       gshell.asm):01240         * NOTE: WHY DO SELECT TWO DIFFERENT WINDOWS IN A ROW???
                      (       gshell.asm):01241         *   Something to do with overlay window vs. parent device window?
069B EC4C             (       gshell.asm):01242                  ldd   GD.WPATH,U Get path to window process was on
069D 3406             (       gshell.asm):01243                  pshs  d          Make it the active window
069F 172E0F           (       gshell.asm):01244                  lbsr  SELECT
06A2 DC22             (       gshell.asm):01245                  ldd   WNDWPATH   Get GSHELL window path
06A4 EDE4             (       gshell.asm):01246                  std   ,S         Select it
06A6 172E08           (       gshell.asm):01247                  lbsr  SELECT     Select window
06A9 EC4C             (       gshell.asm):01248                  ldd   GD.WPATH,U Get process' window path again
06AB EDE4             (       gshell.asm):01249                  std   ,S         End process' window
06AD 172DF7           (       gshell.asm):01250                  lbsr  DWEND
06B0 2007             (       gshell.asm):01251                  bra   KILPDES9
                      (       gshell.asm):01252         
06B2 DC22             (       gshell.asm):01253         KILPDES8 ldd   WNDWPATH   Get path to GSHELL window
06B4 3406             (       gshell.asm):01254                  pshs  d          Make it the active window
06B6 172DF8           (       gshell.asm):01255                  lbsr  SELECT
06B9 3262             (       gshell.asm):01256         KILPDES9 leas  2,S        Eat temp stack
06BB EC4C             (       gshell.asm):01257                  ldd   GD.WPATH,U Get path to process' window
06BD 3406             (       gshell.asm):01258                  pshs  d          Close path to window
06BF 172BF2           (       gshell.asm):01259                  lbsr  I.CLOSE
06C2 2007             (       gshell.asm):01260                  bra   KILPDS11
                      (       gshell.asm):01261         
06C4 DC22             (       gshell.asm):01262         KILPDS10 ldd   WNDWPATH   Get path to GSHELL window
06C6 3406             (       gshell.asm):01263                  pshs  d
06C8 172DE6           (       gshell.asm):01264                  lbsr  SELECT     Make it the active window
06CB 3262             (       gshell.asm):01265         KILPDS11 leas  2,S        Eat stack
06CD ECC818           (       gshell.asm):01266         KILPDS12 ldd   GD.SCRNO,U Get screen #
06D0 2F07             (       gshell.asm):01267                  ble   KILPDS13   If negative or 0, skip ahead
06D2 3406             (       gshell.asm):01268                  pshs  d          Save screen #
06D4 172342           (       gshell.asm):01269                  lbsr  UNLKWNDW   Unlink window from active window/screen list
06D7 3262             (       gshell.asm):01270                  leas  2,S
06D9 EC42             (       gshell.asm):01271         KILPDS13 ldd   GD.INDVC,U Get ptr to ???
06DB 2707             (       gshell.asm):01272                  beq   KILPDS14   None, skip ahead
06DD 3406             (       gshell.asm):01273                  pshs  d
06DF 172A35           (       gshell.asm):01274                  lbsr  FREE       ??? Free memory of some sort?
06E2 3262             (       gshell.asm):01275                  leas  2,S
06E4 ECC4             (       gshell.asm):01276         KILPDS14 ldd   GD.MNAME,U Get ptr to process module name
06E6 2707             (       gshell.asm):01277                  beq   KILPDS15   None, skip ahead
06E8 3406             (       gshell.asm):01278                  pshs  d          ??? Free mem for that?
06EA 172A2A           (       gshell.asm):01279                  lbsr  FREE
06ED 3262             (       gshell.asm):01280                  leas  2,S
06EF 3440             (       gshell.asm):01281         KILPDS15 pshs  U
06F1 172A23           (       gshell.asm):01282                  lbsr  FREE
06F4 3262             (       gshell.asm):01283                  leas  2,S
06F6 3262             (       gshell.asm):01284         KILPDS16 leas  2,S
06F8 35C0             (       gshell.asm):01285                  puls  U,PC
                      (       gshell.asm):01286         
                      (       gshell.asm):01287         * Allocate & setup process entry for our table of forked proceses
06FA 3440             (       gshell.asm):01288         SETPDESC pshs  U
06FC CC001C           (       gshell.asm):01289                  ldd   #GD.SIZE   Size we want to allocate
06FF 3406             (       gshell.asm):01290                  pshs  d
0701 170A01           (       gshell.asm):01291                  lbsr  MEMSPACE   Allocate the memory
0704 1F03             (       gshell.asm):01292                  tfr   D,U        Save ptr to allocated memory into U
0706 EDB80D           (       gshell.asm):01293                  std   [PTBLNEXT,Y] Save ptr to next available spot for process descriptor 
0709 30C81A           (       gshell.asm):01294                  leax  GD.LINK,U  Point to next link
070C 9F0D             (       gshell.asm):01295                  stx   PTBLNEXT   Save ptr to next available
070E EC66             (       gshell.asm):01296                  ldd   4+2,S
0710 EDE4             (       gshell.asm):01297                  std   ,S
0712 1709D4           (       gshell.asm):01298                  lbsr  PUTSTRNG
0715 3262             (       gshell.asm):01299                  leas  2,S
0717 EDC4             (       gshell.asm):01300                  std   GD.MNAME,U Save ptr to module name
                      (       gshell.asm):01301                  IFNE  H6309
                      (       gshell.asm):01302                  clrd  
                      (       gshell.asm):01303                  ELSE
0719 4F               (       gshell.asm):01304                  clra
071A 5F               (       gshell.asm):01305                  clrb
                      (       gshell.asm):01306                  ENDC
071B ED48             (       gshell.asm):01307                  std   GD.MTYPE,U Default stuff to zeros
071D ED42             (       gshell.asm):01308                  std   GD.INDVC,U ??? to 0
071F ED44             (       gshell.asm):01309                  std   GD.PRCID,U Process ID # to 0
0721 ED4A             (       gshell.asm):01310                  std   GD.MEMSZ,U memory size to 0
0723 ED4E             (       gshell.asm):01311                  std   GD.DW.OW,U Default to running on separate device window
0725 30C81A           (       gshell.asm):01312                  leax  GD.LINK,U  Point to next link ptr
0728 ED84             (       gshell.asm):01313                  std   ,X         Set next link to empty
072A CCFFFF           (       gshell.asm):01314                  ldd   #-1
072D ED46             (       gshell.asm):01315                  std   GD.STATS,U
072F ED4C             (       gshell.asm):01316                  std   GD.WPATH,U No window path done yet
0731 ED83             (       gshell.asm):01317                  std   ,--X
0733 ED83             (       gshell.asm):01318                  std   ,--X
0735 ED83             (       gshell.asm):01319                  std   ,--X
0737 ED83             (       gshell.asm):01320                  std   ,--X
0739 ED83             (       gshell.asm):01321                  std   ,--X
073B 1F30             (       gshell.asm):01322                  tfr   U,D
073D 35C0             (       gshell.asm):01323                  puls  U,PC
                      (       gshell.asm):01324         
073F 170FE6           (       gshell.asm):01325         DONEWDIR lbsr  KILLFTBL   Kill current file table in memory
0742 171050           (       gshell.asm):01326                  lbsr  RSTXYPTR   Reset x/y pointers for icon starts
0745 170130           (       gshell.asm):01327                  lbsr  NEWDIREC   Redraw current dir screen
0748 2010             (       gshell.asm):01328                  bra   DONEWDR1   Redraw screen & return
                      (       gshell.asm):01329         
074A D629             (       gshell.asm):01330         SCRLLDN1 ldb   SCREENOW+1
074C D12B             (       gshell.asm):01331                  cmpb  NSCREENS+1
074E 2C0C             (       gshell.asm):01332                  bge   SCRLLUDX
0750 5C               (       gshell.asm):01333                  incb  
0751 2005             (       gshell.asm):01334                  bra   SCRLLDN2
                      (       gshell.asm):01335         
0753 D629             (       gshell.asm):01336         SCRLLUP1 ldb   SCREENOW+1
0755 2705             (       gshell.asm):01337                  beq   SCRLLUDX
0757 5A               (       gshell.asm):01338                  decb  
0758 D729             (       gshell.asm):01339         SCRLLDN2 stb   SCREENOW+1
075A 8D01             (       gshell.asm):01340         DONEWDR1 bsr   DRAWSCRN
075C 39               (       gshell.asm):01341         SCRLLUDX rts   
                      (       gshell.asm):01342         
                      (       gshell.asm):01343         * Update screen: does 1) update directory bar, 2) update icons, 3) update
                      (       gshell.asm):01344         *   scroll bar marker.
075D 3440             (       gshell.asm):01345         DRAWSCRN pshs  U
075F 1727F1           (       gshell.asm):01346                  lbsr  ENBLSOFF   Disable any menu items that deal with a specific file
0762 DC22             (       gshell.asm):01347                  ldd   WNDWPATH   Get GSHELL path
0764 3416             (       gshell.asm):01348                  pshs  d,X
0766 172657           (       gshell.asm):01349                  lbsr  GCSETOFF   Shut graphics cursor off
0769 172681           (       gshell.asm):01350                  lbsr  MOUSOFF    Shut mouse off
076C 1700B7           (       gshell.asm):01351                  lbsr  WIPICONS   Wipe icons off screen (should not touch dir bar)
                      (       gshell.asm):01352                  IFNE  H6309
                      (       gshell.asm):01353                  clrd  
                      (       gshell.asm):01354                  ELSE
076F 4F               (       gshell.asm):01355                  clra
0770 5F               (       gshell.asm):01356                  clrb
                      (       gshell.asm):01357                  ENDC
0771 DD34             (       gshell.asm):01358                  std   SELECTED   0 out currently selected icon ptr
0773 DC1E             (       gshell.asm):01359                  ldd   MAXICONS   Get # icons/screen
                      (       gshell.asm):01360                  IFNE  H6309
                      (       gshell.asm):01361                  muld  SCREENOW   Multiply by screen set #
                      (       gshell.asm):01362                  stw   2,s        Save result
                      (       gshell.asm):01363                  ELSE
0775 3430             (       gshell.asm):01364                  pshs  x,y
0777 9E28             (       gshell.asm):01365                  ldx   SCREENOW
0779 172FA5           (       gshell.asm):01366                  lbsr  MUL16
077C 3530             (       gshell.asm):01367                  puls  x,y
077E EF62             (       gshell.asm):01368                  stu   2,s
                      (       gshell.asm):01369                  ENDC
0780 DE30             (       gshell.asm):01370                  ldu   FTBLSPTR   Get ptr to file icon descriptor table
0782 2002             (       gshell.asm):01371                  bra   DRAWSCR2
                      (       gshell.asm):01372         
0784 EE4A             (       gshell.asm):01373         DRAWSCR1 ldu   FL.LINK,U
0786 EC62             (       gshell.asm):01374         DRAWSCR2 ldd   2,S        Get screen set # we want to print
                      (       gshell.asm):01375                  IFNE  H6309
                      (       gshell.asm):01376                  decd             Base 0
                      (       gshell.asm):01377                  ELSE
0788 830001           (       gshell.asm):01378                  subd  #$0001
                      (       gshell.asm):01379                  ENDC
078B ED62             (       gshell.asm):01380                  std   2,S        Save it back
078D 2CF5             (       gshell.asm):01381                  bge   DRAWSCR1   If not 1st, skip ahead
078F DF2C             (       gshell.asm):01382                  stu   STRTICON   Save ptr to 1st icon on current screen
                      (       gshell.asm):01383                  IFNE  H6309
                      (       gshell.asm):01384                  clrd  
                      (       gshell.asm):01385                  ELSE
0791 4F               (       gshell.asm):01386                  clra
0792 5F               (       gshell.asm):01387                  clrb
                      (       gshell.asm):01388                  ENDC
0793 200E             (       gshell.asm):01389                  bra   DRAWSCR4
                      (       gshell.asm):01390         
0795 3440             (       gshell.asm):01391         DRAWSCR3 pshs  U
0797 170205           (       gshell.asm):01392                  lbsr  WRITICON
079A 3262             (       gshell.asm):01393                  leas  2,S
079C EE4A             (       gshell.asm):01394                  ldu   FL.LINK,U
079E EC62             (       gshell.asm):01395                  ldd   2,S
                      (       gshell.asm):01396                  IFNE  H6309
                      (       gshell.asm):01397                  incd  
                      (       gshell.asm):01398                  ELSE
07A0 C30001           (       gshell.asm):01399                  addd  #$0001
                      (       gshell.asm):01400                  ENDC
07A3 ED62             (       gshell.asm):01401         DRAWSCR4 std   2,S
07A5 EF7E             (       gshell.asm):01402                  stu   -2,S
07A7 2705             (       gshell.asm):01403                  beq   DRAWSCR5
07A9 10931E           (       gshell.asm):01404                  cmpd  MAXICONS
07AC 2DE7             (       gshell.asm):01405                  blt   DRAWSCR3
                      (       gshell.asm):01406         
07AE DC2A             (       gshell.asm):01407         DRAWSCR5 ldd   NSCREENS   Get # of icon screens
07B0 109328           (       gshell.asm):01408                  cmpd  SCREENOW   On last one?
07B3 2605             (       gshell.asm):01409                  bne   SCROLBAR   No, skip ahead
07B5 CC0014           (       gshell.asm):01410                  ldd   #20        Yes, use Y pos 20 (for 200 line screen)
07B8 204F             (       gshell.asm):01411                  bra   DRAWSCR6
                      (       gshell.asm):01412         
                      (       gshell.asm):01413         * Calculate position of vertical scroll bar (based on current screen #, and
                      (       gshell.asm):01414         *  how many screens of icons there is in current dir)
07BA DC2A             (       gshell.asm):01415         SCROLBAR ldd   NSCREENS   Get # of screens of icons
07BC 274B             (       gshell.asm):01416                  beq   DRAWSCR6   If 0, just put in position 0
07BE 9629             (       gshell.asm):01417                  lda   SCREENOW+1 Get current screen#
07C0 273F             (       gshell.asm):01418                  beq   Force0     If 0, that is Y position
07C2 327D             (       gshell.asm):01419                  leas  -3,s       make room on stack for temp vars
07C4 5C               (       gshell.asm):01420                  incb             Base 1 for divide
07C5 E763             (       gshell.asm):01421                  stb   3,s        Save # of screens
07C7 CC0015           (       gshell.asm):01422                  ldd   #21        Maximum # of screens
                      (       gshell.asm):01423                  IFNE  H6309
                      (       gshell.asm):01424                  divd  3,s        B= # of Y positions per screen
                      (       gshell.asm):01425         * remainder = A, quotient = B
                      (       gshell.asm):01426                  ELSE
07CA 6FE2             (       gshell.asm):01427                  clr   ,-s
07CC 6CE4             (       gshell.asm):01428         SCROLBRa inc   ,s
07CE E064             (       gshell.asm):01429                  subb  4,s
07D0 8200             (       gshell.asm):01430                  sbca  #0
07D2 24F8             (       gshell.asm):01431                  bcc   SCROLBRa
07D4 EB64             (       gshell.asm):01432                  addb  4,s
07D6 1F98             (       gshell.asm):01433                  tfr   b,a
07D8 3504             (       gshell.asm):01434                  puls  b
07DA 5A               (       gshell.asm):01435                  decb
                      (       gshell.asm):01436                  ENDC
07DB ED61             (       gshell.asm):01437                  std   1,s        Save remainder & answer
07DD 9629             (       gshell.asm):01438                  lda   SCREENOW+1 Get current screen #
07DF 4C               (       gshell.asm):01439                  inca             Base 1
07E0 3D               (       gshell.asm):01440                  mul              Multiply by answer (rough Y pos)
07E1 E7E4             (       gshell.asm):01441                  stb   ,s         Save that result
07E3 9629             (       gshell.asm):01442                  lda   SCREENOW+1 Get current screen #
07E5 4C               (       gshell.asm):01443                  inca             Base 1
07E6 E661             (       gshell.asm):01444                  ldb   1,s        Get original remainder
07E8 3D               (       gshell.asm):01445                  mul              Calculate 2ndary offset
                      (       gshell.asm):01446                  IFNE  H6309
                      (       gshell.asm):01447                  divd  3,s        B= # of Y positions per screen
                      (       gshell.asm):01448                  ELSE
07E9 6FE2             (       gshell.asm):01449                  clr   ,-s
07EB 6CE4             (       gshell.asm):01450         SCROLBRb inc   ,s
07ED E064             (       gshell.asm):01451                  subb  4,s
07EF 8200             (       gshell.asm):01452                  sbca  #0
07F1 24F8             (       gshell.asm):01453                  bcc   SCROLBRb
07F3 EB64             (       gshell.asm):01454                  addb  4,s
07F5 1F98             (       gshell.asm):01455                  tfr   b,a
07F7 3504             (       gshell.asm):01456                  puls  b
07F9 5A               (       gshell.asm):01457                  decb
                      (       gshell.asm):01458                  ENDC
07FA EBE4             (       gshell.asm):01459                  addb  ,s         Add 2ndary to primary Y pos calc
07FC 3263             (       gshell.asm):01460                  leas  3,s        Eat stack
07FE 5A               (       gshell.asm):01461                  decb             Base 0 for scroll bar SETSTAT call
07FF 2C02             (       gshell.asm):01462                  bge   NotNeg     not negative, skip ahead
0801                  (       gshell.asm):01463         Force0
                      (       gshell.asm):01464                  IFNE  H6309
                      (       gshell.asm):01465                  clrd             Force to 0
                      (       gshell.asm):01466                  ELSE
0801 4F               (       gshell.asm):01467                  clra
0802 5F               (       gshell.asm):01468                  clrb
                      (       gshell.asm):01469                  ENDC
0803 C114             (       gshell.asm):01470         NotNeg   cmpb  #20        Past end?
0805 2302             (       gshell.asm):01471                  bls   DRAWSCR6   No, good, so update scroll bars
0807 C614             (       gshell.asm):01472                  ldb   #20        Force to 20
                      (       gshell.asm):01473         * Actually update the scrollbar (Y only one used)
                      (       gshell.asm):01474         * Entry: D=Y position wanted (0-20)
0809 EDE4             (       gshell.asm):01475         DRAWSCR6 std   ,S         Save Y pos
080B 3406             (       gshell.asm):01476                  pshs  d          And again
080D 8E004D           (       gshell.asm):01477                  ldx   #77        Default to X position 77
0810 0D1B             (       gshell.asm):01478                  tst   FLAG640W   80 or 40 column?
0812 2603             (       gshell.asm):01479                  bne   DRAWSCR8   80, continue
0814 8E0025           (       gshell.asm):01480                  ldx   #37        X position to 37 for 40 column
0817 DC22             (       gshell.asm):01481         DRAWSCR8 ldd   WNDWPATH   Get GSHELL window path
0819 3416             (       gshell.asm):01482                  pshs  d,X        Save path & x position
081B 172C22           (       gshell.asm):01483                  lbsr  ST.SBAR    Set scroll bar positions
081E 171856           (       gshell.asm):01484                  lbsr  MOUSENOW   Turn auto-follow mouse back on
0821 3266             (       gshell.asm):01485                  leas  6,S        eat stack
0823 1601DF           (       gshell.asm):01486                  lbra  GENLEXIT   Fix stack & return
                      (       gshell.asm):01487         
                      (       gshell.asm):01488         * Wipe interior window, & redraw directory bar (latter done by call to
                      (       gshell.asm):01489         *   WRITDBAR). Change so it doesn't redraw directory bar unless directory has
                      (       gshell.asm):01490         *   changed
0826 3440             (       gshell.asm):01491         WIPICONS pshs  U
0828 C615             (       gshell.asm):01492                  ldb   #21        Window Y size to clear - NOTE: WE HAVE TO ELIMINATE THE
082A 3406             (       gshell.asm):01493                  pshs  d          EXTRA BOX LINE IT CURRENTLY DRAWS
082C 9E24             (       gshell.asm):01494                  ldx   WINDWSZX   Get window X size
082E 3019             (       gshell.asm):01495                  leax  -7,X       Subtract 7 (leaves scroll bars & drive icons alone)
0830 C602             (       gshell.asm):01496                  ldb   #2         Start Y at 2 (skip menu bar and current path line)
0832 3416             (       gshell.asm):01497                  pshs  d,X
0834 8E0006           (       gshell.asm):01498                  ldx   #6         Start X (skip left border & drive icons)
0837 DC22             (       gshell.asm):01499                  ldd   WNDWPATH   Get GSHELL path
0839 3416             (       gshell.asm):01500                  pshs  d,X
083B 172C7E           (       gshell.asm):01501                  lbsr  CWAREA     Change working area
083E 17255B           (       gshell.asm):01502                  lbsr  CLRSCRN    Clear screen (Send CHR$(12))
0841 326A             (       gshell.asm):01503                  leas  10,S       Eat stack
0843 172761           (       gshell.asm):01504                  lbsr  FULLSCRN   Change working area to whole window except border stuff
0846 172777           (       gshell.asm):01505                  lbsr  WRITDBAR   Do initial drawing of "inside" screen REDOES DIR STUFF
0849 0F00             (       gshell.asm):01506                  clr   WIPED      Flag that icons need not be redrawn
084B 35C0             (       gshell.asm):01507                  puls  U,PC       Exit
                      (       gshell.asm):01508         
                      (       gshell.asm):01509         * Wipe interior window, except drive icons (but including box around dir
                      (       gshell.asm):01510         *  contents)
084D 3440             (       gshell.asm):01511         CLRDSCRN pshs  U
084F C616             (       gshell.asm):01512                  ldb   #22        Y size
0851 3406             (       gshell.asm):01513                  pshs  d
0853 9E24             (       gshell.asm):01514                  ldx   WINDWSZX   X size -6 (includes box around dir contents)
0855 301A             (       gshell.asm):01515                  leax  -6,X
0857 C601             (       gshell.asm):01516                  ldb   #1         Y start=1 (includes dir bar)
0859 3416             (       gshell.asm):01517                  pshs  d,X
085B 8E0005           (       gshell.asm):01518                  ldx   #5         X start=5 (includes box around dir)
085E DC22             (       gshell.asm):01519                  ldd   WNDWPATH
0860 3416             (       gshell.asm):01520                  pshs  d,X
0862 172C57           (       gshell.asm):01521                  lbsr  CWAREA     Clear out interior window
0865 172534           (       gshell.asm):01522                  lbsr  CLRSCRN
0868 17273C           (       gshell.asm):01523                  lbsr  FULLSCRN   Full interior window size (except border)
                      (       gshell.asm):01524                  IFNE  H6309
                      (       gshell.asm):01525                  clrd             Redo scroll bars at 0,0
                      (       gshell.asm):01526                  ELSE
086B 4F               (       gshell.asm):01527                  clra
086C 5F               (       gshell.asm):01528                  clrb
                      (       gshell.asm):01529                  ENDC
086D ED64             (       gshell.asm):01530                  std   4,S
086F ED62             (       gshell.asm):01531                  std   2,S
0871 172BCC           (       gshell.asm):01532                  lbsr  ST.SBAR
0874 326A             (       gshell.asm):01533                  leas  10,S
0876 35C0             (       gshell.asm):01534                  puls  U,PC
                      (       gshell.asm):01535         
                      (       gshell.asm):01536         * new dir - read in and print 1st screen
0878 3440             (       gshell.asm):01537         NEWDIREC pshs  U
087A C6FF             (       gshell.asm):01538                  ldb   #$ff       Flag that we have to redo icons
087C D700             (       gshell.asm):01539                  stb   WIPED
087E 8DA6             (       gshell.asm):01540                  bsr   WIPICONS   Wipe icons off screen (leave current dir border)
                      (       gshell.asm):01541                  IFNE  H6309
                      (       gshell.asm):01542                  clrd  
                      (       gshell.asm):01543                  ELSE
0880 4F               (       gshell.asm):01544                  clra
0881 5F               (       gshell.asm):01545                  clrb
                      (       gshell.asm):01546                  ENDC
0882 DD2E             (       gshell.asm):01547                  std   FILESCTR   # files in current dir=0
0884 C604             (       gshell.asm):01548                  ldb   #PTR.SLP   Hourglass ptr
0886 3436             (       gshell.asm):01549                  pshs  d,X,Y
0888 8E00CA           (       gshell.asm):01550                  ldx   #GRP.PTR
088B DC22             (       gshell.asm):01551                  ldd   WNDWPATH
088D 3416             (       gshell.asm):01552                  pshs  d,X
088F 172C42           (       gshell.asm):01553                  lbsr  GCSET
0892 172558           (       gshell.asm):01554                  lbsr  MOUSOFF    Shut mouse off - Change later to slow sampling?
                      (       gshell.asm):01555         
                      (       gshell.asm):01556         * New DIR check code here
0895 B6134D           (       gshell.asm):01557                  lda   DIRPATH    Get current DIR path #
0898 2703             (       gshell.asm):01558                  beq   SkipClos   None, don't try closing
089A 103F8F           (       gshell.asm):01559                  os9   I$Close    Close dir path 1st
                      (       gshell.asm):01560         * New label here
089D C681             (       gshell.asm):01561         SkipClos ldb   #DIR.+READ.
089F ED62             (       gshell.asm):01562                  std   2,S
08A1 308D05A7         (       gshell.asm):01563                  leax  ONEDOT,PC  Point to '.'
08A5 AFE4             (       gshell.asm):01564                  stx   ,S
08A7 1729FD           (       gshell.asm):01565                  lbsr  I.OPEN2    Open current dir
08AA 3266             (       gshell.asm):01566                  leas  6,S
08AC ED62             (       gshell.asm):01567                  std   2,S        Save path # to stack
08AE 102D0099         (       gshell.asm):01568                  lblt  BAD.DIR    Couldn't read current dir
08B2 F7134D           (       gshell.asm):01569                  stb   DIRPATH    Successfull open; Save current dir path
                      (       gshell.asm):01570         * NOTE: Done this early so if opening a large directory, and updates are done
                      (       gshell.asm):01571         *   during read, they will get caught too
08B5 7F134E           (       gshell.asm):01572                  clr   Dirup      Clear out Directory update flag (saved signal)
                      (       gshell.asm):01573         * New DIR code here - We want a signal if DIR changes
                      (       gshell.asm):01574         * Moved here so will detect changes even on dir we are doing
08B8 B6134D           (       gshell.asm):01575                  lda   DIRPATH    path in A
08BB 8E000C           (       gshell.asm):01576                  ldx   #DIRSIG    Signal code to send on dir update
08BE C62C             (       gshell.asm):01577                  ldb   #SS.FSIG   Send signal on file update setstat
08C0 103F8E           (       gshell.asm):01578                  os9   I$SetStt   Enable call
                      (       gshell.asm):01579         
08C3 CC0040           (       gshell.asm):01580                  ldd   #DIR.SZ*2  Flag to read 2 entries (. & ..) - NOTE IF ONE OR BOTH OF THESE
08C6 3406             (       gshell.asm):01581                  pshs  d          IS NOT PRESENT, THEN GSHELL WILL SKIP ENTRIES!
08C8 8E0693           (       gshell.asm):01582                  ldx   #DIRBUFER
08CB EC64             (       gshell.asm):01583                  ldd   6-2,S
08CD 3416             (       gshell.asm):01584                  pshs  d,X
08CF 172983           (       gshell.asm):01585                  lbsr  I.READ     Read . & ..
08D2 3266             (       gshell.asm):01586                  leas  6,S
08D4 2053             (       gshell.asm):01587                  bra   READ.DIR   Go read rest of dir
                      (       gshell.asm):01588         
08D6 ECE4             (       gshell.asm):01589         DIRVALID ldd   ,S         Get # of bytes of dir entries
08D8 3406             (       gshell.asm):01590                  pshs  d          Save # to divide by
08DA C605             (       gshell.asm):01591                  ldb   #5
08DC 172DE4           (       gshell.asm):01592                  lbsr  CCASR      divide by 32 (2^5) (size of dir entry)
08DF EDE4             (       gshell.asm):01593                  std   ,S
08E1 8E0693           (       gshell.asm):01594                  ldx   #DIRBUFER  Point to start of DIR buffer
08E4 9F3A             (       gshell.asm):01595                  stx   DIRPTR     Save it
08E6 2038             (       gshell.asm):01596                  bra   CLASTEST   Check which kind of file
                      (       gshell.asm):01597         
08E8 E6B83A           (       gshell.asm):01598         CLASSIFY ldb   [DIRPTR,Y] Get 1st byte of dir entry
08EB 272C             (       gshell.asm):01599                  beq   CLASSIF4   NUL (Deleted file, skip to next)
08ED 9E3A             (       gshell.asm):01600                  ldx   DIRPTR     Get ptr to filename
08EF DC0F             (       gshell.asm):01601                  ldd   FNAMEPTR   Get ptr to current filename buffer
08F1 3416             (       gshell.asm):01602                  pshs  d,X
08F3 172A4E           (       gshell.asm):01603                  lbsr  STRHCPY    Copy filename, including fixing hi-bit marker
08F6 170D39           (       gshell.asm):01604                  lbsr  UPDTIPTR   Update icon/file table ptrs
08F9 3264             (       gshell.asm):01605                  leas  4,S
08FB 1F03             (       gshell.asm):01606                  tfr   D,U
08FD EF7E             (       gshell.asm):01607                  stu   -2,S
08FF 2718             (       gshell.asm):01608                  beq   CLASSIF4
                      (       gshell.asm):01609                  IFNE  H6309
                      (       gshell.asm):01610                  bsr   GTFD.ATT   Get file attributes
                      (       gshell.asm):01611                  ELSE
0901 170088           (       gshell.asm):01612                  lbsr  GTFD.ATT   Get file attributes
                      (       gshell.asm):01613                  ENDC
0904 C602             (       gshell.asm):01614                  ldb   #IC.FOLDR  Default to folder (dir)
0906 8580             (       gshell.asm):01615                  bita  #DIR.      If it is dir, done
0908 260D             (       gshell.asm):01616                  bne   CLASSIF3
090A C603             (       gshell.asm):01617                  ldb   #IC.PRGRM
090C 8504             (       gshell.asm):01618                  bita  #EXEC.     If executable, program type
090E 2607             (       gshell.asm):01619                  bne   CLASSIF3
0910 3440             (       gshell.asm):01620                  pshs  U
0912 170D68           (       gshell.asm):01621                  lbsr  ISIT.XXX   Check if an AIF type we know about
0915 3262             (       gshell.asm):01622                  leas  2,S
0917 E748             (       gshell.asm):01623         CLASSIF3 stb   FL.ICONO,U Save icon type
0919 DC3A             (       gshell.asm):01624         CLASSIF4 ldd   DIRPTR     Go onto next dir entry
091B C30020           (       gshell.asm):01625                  addd  #DIR.SZ
091E DD3A             (       gshell.asm):01626                  std   DIRPTR
                      (       gshell.asm):01627         
0920 ECE4             (       gshell.asm):01628         CLASTEST ldd   ,S         Get # of dir entries in this 2k block
                      (       gshell.asm):01629                  IFNE  H6309
                      (       gshell.asm):01630                  decd             Subtract 1
                      (       gshell.asm):01631                  ELSE
0922 830001           (       gshell.asm):01632                  subd  #$0001
                      (       gshell.asm):01633                  ENDC
0925 EDE4             (       gshell.asm):01634                  std   ,S
0927 2CBF             (       gshell.asm):01635                  bge   CLASSIFY   Still going, classify file type, otherwise, get next 2k block
                      (       gshell.asm):01636         
0929 CC0800           (       gshell.asm):01637         READ.DIR ldd   #2048      Size of read buffer (64 dir entries @ once)
092C 3406             (       gshell.asm):01638                  pshs  d
092E 8E0693           (       gshell.asm):01639                  ldx   #DIRBUFER
0931 EC64             (       gshell.asm):01640                  ldd   6-2,S
0933 3416             (       gshell.asm):01641                  pshs  d,X
0935 17291D           (       gshell.asm):01642                  lbsr  I.READ     Read in 2K of directory
0938 3266             (       gshell.asm):01643                  leas  6,S
093A EDE4             (       gshell.asm):01644                  std   ,S
093C 2E98             (       gshell.asm):01645                  bgt   DIRVALID   Good read, continue
                      (       gshell.asm):01646         
                      (       gshell.asm):01647         * New DIR code here
                      (       gshell.asm):01648         * We want a signal if DIR changes
093E B6134D           (       gshell.asm):01649                  lda   DIRPATH    path in A
0941 8E000C           (       gshell.asm):01650                  ldx   #DIRSIG    Signal code to send on dir update
0944 C62C             (       gshell.asm):01651                  ldb   #SS.FSIG   Send signal on file update setstat
0946 103F8E           (       gshell.asm):01652                  os9   I$SetStt   Enable call
0949 200A             (       gshell.asm):01653                  bra   READDIR2
                      (       gshell.asm):01654         
094B 308C0C           (       gshell.asm):01655         BAD.DIR  leax  <CANTFLD2,PC
094E 3410             (       gshell.asm):01656                  pshs  X
0950 1708B2           (       gshell.asm):01657                  lbsr  OLAYPRNT
0953 3262             (       gshell.asm):01658         READDIRX leas  2,S
0955 8D15             (       gshell.asm):01659         READDIR2 bsr   CNTSCRNS
0957 1600AB           (       gshell.asm):01660                  lbra  GENLEXIT
                      (       gshell.asm):01661         
095A 43616E2774206F70 (       gshell.asm):01662         CANTFLD2 fcc   "Can't open folder"
     656E20666F6C6465
     72
096B 00               (       gshell.asm):01663                  fcb   NUL
                      (       gshell.asm):01664         
                      (       gshell.asm):01665         * Count # of screens to hold icons
096C                  (       gshell.asm):01666         CNTSCRNS
                      (       gshell.asm):01667                  IFNE  H6309
                      (       gshell.asm):01668                  clrd  
                      (       gshell.asm):01669                  ELSE
096C 4F               (       gshell.asm):01670                  clra
096D 5F               (       gshell.asm):01671                  clrb
                      (       gshell.asm):01672                  ENDC
096E DD28             (       gshell.asm):01673                  std   SCREENOW   Set current "screen" of icons to 0 (1st)
0970 DC2E             (       gshell.asm):01674                  ldd   FILESCTR   Get # files current dir
0972 2715             (       gshell.asm):01675                  beq   CNTSCRN2   zero, save & exit
                      (       gshell.asm):01676                  IFNE  H6309
                      (       gshell.asm):01677                  decd  
                      (       gshell.asm):01678                  divd  MAXICONS+1 Divide by # icons/"screen"
                      (       gshell.asm):01679                  ELSE
0974 830001           (       gshell.asm):01680                  subd  #$0001
0977 6FE2             (       gshell.asm):01681                  clr   ,-s
0979 6CE4             (       gshell.asm):01682         CNTSCRNa inc   ,s
097B D01F             (       gshell.asm):01683                  subb  MAXICONS+1
097D 8200             (       gshell.asm):01684                  sbca  #0
097F 24F8             (       gshell.asm):01685                  bcc   CNTSCRNa
0981 DB1F             (       gshell.asm):01686                  addb  MAXICONS+1
0983 1F98             (       gshell.asm):01687                  tfr   b,a
0985 3504             (       gshell.asm):01688                  puls  b
0987 5A               (       gshell.asm):01689                  decb
                      (       gshell.asm):01690                  ENDC
0988 4F               (       gshell.asm):01691                  clra             16 bit result
0989 DD2A             (       gshell.asm):01692         CNTSCRN2 std   NSCREENS   Save # of icon "screens" & return
098B 39               (       gshell.asm):01693                  rts   
                      (       gshell.asm):01694         
098C 30A83C           (       gshell.asm):01695         GTFD.ATT leax  <XFD.ATT,Y
098F DC3A             (       gshell.asm):01696                  ldd   DIRPTR
0991 3416             (       gshell.asm):01697                  pshs  d,X
0993 EC68             (       gshell.asm):01698                  ldd   6+2,S
0995 3406             (       gshell.asm):01699                  pshs  d
0997 172365           (       gshell.asm):01700                  lbsr  GT.FDINF
099A 3266             (       gshell.asm):01701                  leas  6,S
099C 963C             (       gshell.asm):01702                  lda   XFD.ATT
099E 39               (       gshell.asm):01703                  rts   
                      (       gshell.asm):01704         
                      (       gshell.asm):01705         * Write icon to screen
099F 3440             (       gshell.asm):01706         WRITICON pshs  U
09A1 EE64             (       gshell.asm):01707                  ldu   4,S        ?? Get ptr to current FL.* entry
09A3 E648             (       gshell.asm):01708                  ldb   FL.ICONO,U Get icon type
09A5 3406             (       gshell.asm):01709                  pshs  d          Save it
09A7 2006             (       gshell.asm):01710                  bra   WRITICO2
                      (       gshell.asm):01711         
09A9 E649             (       gshell.asm):01712         WRITICO1 ldb   FL.AIFNO,U
09AB EDE4             (       gshell.asm):01713                  std   ,S
09AD 2007             (       gshell.asm):01714                  bra   WRITICO3
                      (       gshell.asm):01715         
09AF C007             (       gshell.asm):01716         WRITICO2 subb  #IC.F.XXX
09B1 27F6             (       gshell.asm):01717                  beq   WRITICO1
09B3 5C               (       gshell.asm):01718                  incb  
09B4 27F3             (       gshell.asm):01719                  beq   WRITICO1
09B6 EC42             (       gshell.asm):01720         WRITICO3 ldd   FL.YSTRT,U Get icon Y start position
09B8 3406             (       gshell.asm):01721                  pshs  d          Save it
09BA AEC4             (       gshell.asm):01722                  ldx   FL.XSTRT,U Get icon X start position
09BC EC62             (       gshell.asm):01723                  ldd   2,S        Get icon buffer #
09BE DA5D             (       gshell.asm):01724                  orb   WD48FLAG   +$80 if double wide (for 80 column)
09C0 3416             (       gshell.asm):01725                  pshs  d,X        Save 'em
09C2 9E26             (       gshell.asm):01726                  ldx   PRCIDNUM   Get group #
09C4 DC22             (       gshell.asm):01727                  ldd   WNDWPATH   Get window path
09C6 3416             (       gshell.asm):01728                  pshs  d,X        Save 'em
09C8 172B6D           (       gshell.asm):01729                  lbsr  PUTBLK     Put icon on screen
09CB 326A             (       gshell.asm):01730                  leas  10,S       Eat temp stack
09CD ECE4             (       gshell.asm):01731                  ldd   ,S         Get icon type
09CF C47F             (       gshell.asm):01732                  andb  #$7F       Strip hi bit
09D1 C109             (       gshell.asm):01733                  cmpb  #IC.TRASH  Trash icon?
09D3 2704             (       gshell.asm):01734                  beq   NoName     Yes, don't print name
09D5 C10F             (       gshell.asm):01735                  cmpb  #IC.PRNTR  Printer icon?
09D7 2604             (       gshell.asm):01736                  bne   WRITICO6   No, print name
09D9 3440             (       gshell.asm):01737         NoName   pshs  U          Yes, fake stack for exit, NO name printing
09DB 2028             (       gshell.asm):01738                  bra   GENLEXIT   Eat stack & return
                      (       gshell.asm):01739         
09DD C105             (       gshell.asm):01740         WRITICO6 cmpb  #IC.DRIVE  Drive icon?
09DF 2607             (       gshell.asm):01741                  bne   WRITICO4   No, skip ahead
09E1 3440             (       gshell.asm):01742                  pshs  U
09E3 170091           (       gshell.asm):01743                  lbsr  POSIDRNM   Print drive name below drive icon
09E6 201D             (       gshell.asm):01744                  bra   GENLEXIT   Eat stack & exit
                      (       gshell.asm):01745         
09E8 3440             (       gshell.asm):01746         WRITICO4 pshs  U          If not trash or drive, print icon name
09EA 8D02             (       gshell.asm):01747                  bsr   WRITFNAM
09EC 2017             (       gshell.asm):01748         WRITICO5 bra   GENLEXIT   Eat stack & exit
                      (       gshell.asm):01749         
09EE 3440             (       gshell.asm):01750         WRITFNAM pshs  U
09F0 EE64             (       gshell.asm):01751                  ldu   4,S        Get ptr to current icon table
09F2 EC4C             (       gshell.asm):01752                  ldd   FL.FNAME,U Get ptr to icon name
09F4 3406             (       gshell.asm):01753                  pshs  d          Save em
09F6 3440             (       gshell.asm):01754                  pshs  U
09F8 2009             (       gshell.asm):01755                  bra   ERWRFNAM   Write out icon (file) name
                      (       gshell.asm):01756         
                      (       gshell.asm):01757         * Erase the filename from the screen (under the icon)
09FA 3440             (       gshell.asm):01758         ERASFNAM pshs  U
09FC 308C0A           (       gshell.asm):01759                  leax  <TENSPACE,PC
09FF EC64             (       gshell.asm):01760                  ldd   4,S
0A01 3416             (       gshell.asm):01761                  pshs  d,X
0A03 8D0F             (       gshell.asm):01762         ERWRFNAM bsr   POSIFNAM   Print filename under icon
0A05 3264             (       gshell.asm):01763         GENLEXIT leas  4,S        Eat stack, restore U and return
0A07 35C0             (       gshell.asm):01764                  puls  U,PC
                      (       gshell.asm):01765         
0A09 202020202020     (       gshell.asm):01766         TENSPACE fcc   "      "
0A0F 20202020         (       gshell.asm):01767         FOURSPAC fcc   "    "
0A13 00               (       gshell.asm):01768                  fcb   NUL
                      (       gshell.asm):01769         
0A14 3440             (       gshell.asm):01770         POSIFNAM pshs  U
0A16 EE64             (       gshell.asm):01771                  ldu   4,S
0A18 EC66             (       gshell.asm):01772                  ldd   8-2,S
0A1A 3406             (       gshell.asm):01773                  pshs  d
0A1C 1728AD           (       gshell.asm):01774                  lbsr  STRLEN
0A1F 1083000A         (       gshell.asm):01775                  cmpd  #10
0A23 2F08             (       gshell.asm):01776                  ble   POSIFNA1
0A25 CC000A           (       gshell.asm):01777                  ldd   #10
0A28 0D5D             (       gshell.asm):01778                  tst   WD48FLAG
0A2A 2701             (       gshell.asm):01779                  beq   POSIFNA1
0A2C 5C               (       gshell.asm):01780                  incb  
0A2D EDE4             (       gshell.asm):01781         POSIFNA1 std   ,S
0A2F EC42             (       gshell.asm):01782                  ldd   FL.YSTRT,U Get Y start of icon
0A31 C30001           (       gshell.asm):01783                  addd  #1         Force to next text line
0A34 171EF3           (       gshell.asm):01784                  lbsr  DIVDX8     Divide by 8 (text Y position)
0A37 C30003           (       gshell.asm):01785                  addd  #3         Add 3 (to skip 3*8 pixel height of icon)
0A3A 3406             (       gshell.asm):01786                  pshs  d
0A3C EC62             (       gshell.asm):01787                  ldd   2,S
0A3E 47               (       gshell.asm):01788                  asra  
0A3F 56               (       gshell.asm):01789                  rorb  
0A40 3406             (       gshell.asm):01790                  pshs  d
0A42 ECC4             (       gshell.asm):01791                  ldd   FL.XSTRT,U
0A44 3406             (       gshell.asm):01792                  pshs  d
0A46 CC0006           (       gshell.asm):01793                  ldd   #6
0A49 172C0D           (       gshell.asm):01794                  lbsr  CCDIV
0A4C A3E1             (       gshell.asm):01795                  subd  ,S++
0A4E C30002           (       gshell.asm):01796                  addd  #2
0A51 0D5D             (       gshell.asm):01797                  tst   WD48FLAG
0A53 2703             (       gshell.asm):01798                  beq   POSIFNA3
0A55 C30002           (       gshell.asm):01799                  addd  #2
                      (       gshell.asm):01800         
0A58 3406             (       gshell.asm):01801         POSIFNA3 pshs  d
0A5A DC22             (       gshell.asm):01802                  ldd   WNDWPATH
0A5C 3406             (       gshell.asm):01803                  pshs  d
0A5E 0D5D             (       gshell.asm):01804                  tst   WD48FLAG
0A60 260A             (       gshell.asm):01805                  bne   POSIFNA4
0A62 ECC4             (       gshell.asm):01806                  ldd   FL.XSTRT,U
0A64 108300C8         (       gshell.asm):01807                  cmpd  #200
0A68 2502             (       gshell.asm):01808                  blo   POSIFNA4
0A6A 6C63             (       gshell.asm):01809                  inc   3,S
                      (       gshell.asm):01810         
0A6C 172309           (       gshell.asm):01811         POSIFNA4 lbsr  GOTOXY
0A6F EC66             (       gshell.asm):01812                  ldd   0+6,S
0A71 ED64             (       gshell.asm):01813                  std   4,S
0A73 EC6E             (       gshell.asm):01814                  ldd   10+4,S
0A75 2031             (       gshell.asm):01815                  bra   POSIFNA2
                      (       gshell.asm):01816         
                      (       gshell.asm):01817         * Print drive name (max 4 chars) at proper position below drive icon
0A77 3440             (       gshell.asm):01818         POSIDRNM pshs  U
0A79 EE64             (       gshell.asm):01819                  ldu   4,S        Get ptr to icon entry for current drive
0A7B EC4C             (       gshell.asm):01820                  ldd   FL.FNAME,U Get drive name ptr
0A7D 3406             (       gshell.asm):01821                  pshs  d          Save it
0A7F 17284A           (       gshell.asm):01822                  lbsr  STRLEN     Calculate length of drive name
0A82 10830004         (       gshell.asm):01823                  cmpd  #4         4 or less?
0A86 2F03             (       gshell.asm):01824                  ble   POSIDRN1   Yep, continue
0A88 CC0004           (       gshell.asm):01825                  ldd   #4         No, 4 is max.
0A8B EDE4             (       gshell.asm):01826         POSIDRN1 std   ,S         Save drive name size
0A8D EC42             (       gshell.asm):01827                  ldd   FL.YSTRT,U Get Y icon start
0A8F 171E98           (       gshell.asm):01828                  lbsr  DIVDX8     Calc char. position
0A92 C30002           (       gshell.asm):01829                  addd  #2         +2 to skip icon itself
0A95 3406             (       gshell.asm):01830                  pshs  d          Save it
0A97 C601             (       gshell.asm):01831                  ldb   #1         X position=1
0A99 3406             (       gshell.asm):01832                  pshs  d
0A9B DC22             (       gshell.asm):01833                  ldd   WNDWPATH   Window path
0A9D 3406             (       gshell.asm):01834                  pshs  d
0A9F 1722D6           (       gshell.asm):01835                  lbsr  GOTOXY     Position text cursor
0AA2 EC66             (       gshell.asm):01836                  ldd   6,S        Get drive name size
0AA4 ED64             (       gshell.asm):01837                  std   4,S        Save it
0AA6 EC4C             (       gshell.asm):01838                  ldd   FL.FNAME,U Get drive name ptr
0AA8 ED62             (       gshell.asm):01839         POSIFNA2 std   2,S        Save it
0AAA 1727CC           (       gshell.asm):01840                  lbsr  I.WRITE    Write out drive name
0AAD 3268             (       gshell.asm):01841                  leas  8,S        Eat temp stack
0AAF 35C0             (       gshell.asm):01842                  puls  U,PC       Restore U & return
                      (       gshell.asm):01843         
                      (       gshell.asm):01844         * Scroll bar Y position table (for # of icon-filled screens)
                      (       gshell.asm):01845         * SCROLLxx: xx is the number of screens of icons present
                      (       gshell.asm):01846         *  the last screen is ALWAYS the last position (20), irregardless of the #
                      (       gshell.asm):01847         *  of screens used.
                      (       gshell.asm):01848         * since using x200 now, can expand to 21 screen, using 0-20
                      (       gshell.asm):01849         * Data is then which Y position to be in for each screen set
                      (       gshell.asm):01850         * This should be a DIV type instruction, and screw the table to save memory
                      (       gshell.asm):01851         *  in the 6309 version
                      (       gshell.asm):01852         * EVENTUALLY, SEE IF WINDINT CAN HANDLE VARIABLE SIZED SCROLL
                      (       gshell.asm):01853         *   BARS (SEE NOTES I PUT IN MULTI-VUE MANUAL).
0AB1 00               (       gshell.asm):01854         SCROLL02 fcb   0
0AB2 000A             (       gshell.asm):01855         SCROLL03 fcb   0,10
0AB4 00070E           (       gshell.asm):01856         SCROLL04 fcb   0,7,14
0AB7 00070B0F         (       gshell.asm):01857         SCROLL05 fcb   0,7,11,15
0ABB 0006090D10       (       gshell.asm):01858         SCROLL06 fcb   0,6,9,13,16
0AC0 0004070A0D10     (       gshell.asm):01859         SCROLL07 fcb   0,4,7,10,13,16
0AC6 000407090C0E11   (       gshell.asm):01860         SCROLL08 fcb   0,4,7,9,12,14,17
0ACD 000406080A0C0E10 (       gshell.asm):01861         SCROLL09 fcb   0,4,6,8,10,12,14,16
0AD5 00030507090B0D0F (       gshell.asm):01862         SCROLL10 fcb   0,3,5,7,9,11,13,15,17
     11
0ADE 00020406080A0C0E (       gshell.asm):01863         SCROLL11 fcb   0,2,4,6,8,10,12,14,16,18
     1012
0AE8 0001030507090B0D (       gshell.asm):01864         SCROLL12 fcb   0,1,3,5,7,9,11,13,15,17,18
     0F1112
0AF3 000102030507090B (       gshell.asm):01865         SCROLL13 fcb   0,1,2,3,5,7,9,11,13,15,17,18
     0D0F1112
0AFF 000102030507090B (       gshell.asm):01866         SCROLL14 fcb   0,1,2,3,5,7,9,11,13,15,16,17,18
     0D0F101112
0B0C 0001020304050709 (       gshell.asm):01867         SCROLL15 fcb   0,1,2,3,4,5,7,9,11,13,15,16,17,18
     0B0D0F101112
0B1A 0001020304050709 (       gshell.asm):01868         SCROLL16 fcb   0,1,2,3,4,5,7,9,11,13,14,15,16,17,18
     0B0D0E0F101112
0B29 0001020304050607 (       gshell.asm):01869         SCROLL17 fcb   0,1,2,3,4,5,6,7,9,11,13,14,15,16,17,18
     090B0D0E0F101112
0B39 0001020304050607 (       gshell.asm):01870         SCROLL18 fcb   0,1,2,3,4,5,6,7,9,11,12,13,14,15,16,17,18
     090B0C0D0E0F1011
     12
0B4A 0001020304050607 (       gshell.asm):01871         SCROLL19 fcb   0,1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18
     08090B0C0D0E0F10
     1112
0B5C 0001020304050607 (       gshell.asm):01872         SCROLL20 fcb   0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18
     08090A0B0C0D0E0F
     101112
                      (       gshell.asm):01873         
                      (       gshell.asm):01874         * Select icon on screen - draw box around AIF ones, just FFill for drives,
                      (       gshell.asm):01875         *  folders, data files or executables. Done in color 3, reverts to color 1
                      (       gshell.asm):01876         *  on exit.
                      (       gshell.asm):01877         * NOTE: TRY CHANGING TO XOR BAR AROUND ICON & NAME OF ICON. SHOULD BE FASTER
                      (       gshell.asm):01878         * & SMALLER (don't need "stop box" around AIF's to prevent FFILL leaking)
                      (       gshell.asm):01879         * Entry: U=Ptr to FL.* data structure
0B6F 3440             (       gshell.asm):01880         SELCICON pshs  U
0B71 EE64             (       gshell.asm):01881                  ldu   4,S
0B73 272F             (       gshell.asm):01882                  beq   SELCICO3
0B75 C603             (       gshell.asm):01883                  ldb   #3         color 3
0B77 3416             (       gshell.asm):01884                  pshs  d,X
0B79 D623             (       gshell.asm):01885                  ldb   WNDWPATH+1
0B7B 3406             (       gshell.asm):01886                  pshs  d
0B7D 172979           (       gshell.asm):01887                  lbsr  FCOLOR     Change foreground color to 3
0B80 E648             (       gshell.asm):01888                  ldb   FL.ICONO,U Get icon type
0B82 2716             (       gshell.asm):01889                  beq   SELCICO2
0B84 C103             (       gshell.asm):01890                  cmpb  #IC.PRGRM  Program, folder or text?
0B86 230B             (       gshell.asm):01891                  bls   SELCICO1   Yes, draw box
0B88 C105             (       gshell.asm):01892                  cmpb  #IC.DRIVE  Drive icon?
0B8A 2707             (       gshell.asm):01893                  beq   SELCICO1   Yes, draw box
0B8C C006             (       gshell.asm):01894                  subb  #IC.AIF.F  If AIF file, draw box around icon 1st
0B8E 2703             (       gshell.asm):01895                  beq   SELCICO1
0B90 5A               (       gshell.asm):01896                  decb             If anything but AIF itself or found AIF extension, don't
0B91 2607             (       gshell.asm):01897                  bne   SELCICO2   draw box around icon
0B93                  (       gshell.asm):01898         SELCICO1
                      (       gshell.asm):01899                  IFNE  H6309
                      (       gshell.asm):01900                  lde   #1         Flag we want inverted shadow as well
                      (       gshell.asm):01901                  ELSE
0B93 8601             (       gshell.asm):01902                  lda   #1
0B95 B71353           (       gshell.asm):01903                  sta   REGE
                      (       gshell.asm):01904                  ENDC
0B98 8D3E             (       gshell.asm):01905                  bsr   DRAIFBOX   Draw "selected" box around icon
0B9A ED62             (       gshell.asm):01906         SELCICO2 std   2,S
0B9C 5F               (       gshell.asm):01907                  clrb             Reset foreground color to black
0B9D ED62             (       gshell.asm):01908                  std   2,S
0B9F 172957           (       gshell.asm):01909                  lbsr  FCOLOR
0BA2 3266             (       gshell.asm):01910                  leas  6,S
0BA4 35C0             (       gshell.asm):01911         SELCICO3 puls  U,PC
                      (       gshell.asm):01912         
                      (       gshell.asm):01913         * Unselect icon
                      (       gshell.asm):01914         * Entry: U=ptr to FL.* structure
0BA6 3440             (       gshell.asm):01915         UNSLICON pshs  U
0BA8 EE64             (       gshell.asm):01916                  ldu   4,S
0BAA 27F8             (       gshell.asm):01917                  beq   SELCICO3
0BAC E648             (       gshell.asm):01918                  ldb   FL.ICONO,U Get icon type
0BAE 2726             (       gshell.asm):01919                  beq   UNSLICO2
0BB0 C103             (       gshell.asm):01920                  cmpb  #IC.PRGRM  text, folder or program?
0BB2 230B             (       gshell.asm):01921                  bls   UNSLICO1   Yes, draw box
0BB4 C105             (       gshell.asm):01922                  cmpb  #IC.DRIVE  Drive?
0BB6 2707             (       gshell.asm):01923                  beq   UNSLICO1   Yes, draw grey box
0BB8 C006             (       gshell.asm):01924                  subb  #IC.AIF.F  If AIF or previously done AIF, we do outside box stuff 1st 
0BBA 2703             (       gshell.asm):01925                  beq   UNSLICO1
0BBC 5A               (       gshell.asm):01926                  decb  
0BBD 2617             (       gshell.asm):01927                  bne   UNSLICO2
0BBF 8E0002           (       gshell.asm):01928         UNSLICO1 ldx   #2         If AIF related, set color to 2 and draw box around it (clear
0BC2 D623             (       gshell.asm):01929                  ldb   WNDWPATH+1 box around around icon)
0BC4 3416             (       gshell.asm):01930                  pshs  d,X
0BC6 172930           (       gshell.asm):01931                  lbsr  FCOLOR
                      (       gshell.asm):01932                  IFNE  H6309
                      (       gshell.asm):01933                  clre             Flag that we are just doing light grey box
                      (       gshell.asm):01934                  ELSE
0BC9 7F1353           (       gshell.asm):01935                  clr   REGE
                      (       gshell.asm):01936                  ENDC
0BCC 8D0A             (       gshell.asm):01937                  bsr   DRAIFBOX   Light grey box (same as background color)
0BCE 5F               (       gshell.asm):01938                  clrb  
0BCF E763             (       gshell.asm):01939                  stb   3,S
0BD1 172925           (       gshell.asm):01940                  lbsr  FCOLOR     Reset foreground color to black
0BD4 3264             (       gshell.asm):01941                  leas  4,S
0BD6 35C0             (       gshell.asm):01942         UNSLICO2 puls  u,pc       ALSO REDRAWS FILENAME - UNNECESSARY FROM HERE, ANYWAYS
                      (       gshell.asm):01943         
                      (       gshell.asm):01944         * Draw select box around selected drive/icon
                      (       gshell.asm):01945         * Color should be set up before calling
                      (       gshell.asm):01946         * Entry: E=0 if just straight box, <>0 if box AND dark grey invert shadow
                      (       gshell.asm):01947         *        U=ptr to FL.* structure
                      (       gshell.asm):01948         * Uses F
0BD8 EC42             (       gshell.asm):01949         DRAIFBOX ldd   FL.YSTRT,U Get Y start coord for icon, subtract 2 for box
0BDA C002             (       gshell.asm):01950                  subb  #2         A little above top of icon
0BDC 3406             (       gshell.asm):01951                  pshs  d
0BDE AEC4             (       gshell.asm):01952                  ldx   FL.XSTRT,U Get X pos of icon
                      (       gshell.asm):01953                  IFNE  H6309
                      (       gshell.asm):01954                  ldf   FL.ICONO,u Get icon type
                      (       gshell.asm):01955                  subf  #IC.DRIVE  Drive? (special case)
                      (       gshell.asm):01956                  ELSE
0BE0 A648             (       gshell.asm):01957                  lda   FL.ICONO,u Get icon type
0BE2 8005             (       gshell.asm):01958                  suba  #IC.DRIVE  Drive? (special case)
0BE4 B71354           (       gshell.asm):01959                  sta   REGF
                      (       gshell.asm):01960                  ENDC
0BE7 2604             (       gshell.asm):01961                  bne   NormIcon   No, do normal box
0BE9 301D             (       gshell.asm):01962                  leax  -3,x       Yes, smaller box
0BEB 2013             (       gshell.asm):01963                  bra   Minus9     Go save X pos
                      (       gshell.asm):01964         
0BED 3017             (       gshell.asm):01965         NormIcon leax  -9,X       -9 to include text
0BEF 0D5D             (       gshell.asm):01966                  tst   WD48FLAG   If 40 column, bump down by another 14
0BF1 260D             (       gshell.asm):01967                  bne   Minus9
0BF3 3010             (       gshell.asm):01968                  leax  -16,x
0BF5 ECC4             (       gshell.asm):01969                  ldd   FL.XSTRT,u Get original icon start again
                      (       gshell.asm):01970                  IFNE  H6309
                      (       gshell.asm):01971                  lsld             Put column # in A
                      (       gshell.asm):01972                  lsld  
                      (       gshell.asm):01973                  ELSE
0BF7 58               (       gshell.asm):01974                  lslb
0BF8 49               (       gshell.asm):01975                  rola
0BF9 58               (       gshell.asm):01976                  lslb
0BFA 49               (       gshell.asm):01977                  rola
                      (       gshell.asm):01978                  ENDC
0BFB 3002             (       gshell.asm):01979         AdjLoop  leax  2,x        2 pixels per column
0BFD 4A               (       gshell.asm):01980                  deca  
0BFE 26FB             (       gshell.asm):01981                  bne   AdjLoop
0C00 DC22             (       gshell.asm):01982         Minus9   ldd   WNDWPATH   Save X start & window path
0C02 3416             (       gshell.asm):01983                  pshs  d,X
0C04 17291C           (       gshell.asm):01984                  lbsr  SETDPTR    Set draw ptr to upper left corner of box
                      (       gshell.asm):01985         * include text below icon as well
0C07 CC0024           (       gshell.asm):01986                  ldd   #36        Box height 36 pixels (2 above & below)
                      (       gshell.asm):01987                  IFNE  H6309
                      (       gshell.asm):01988                  tstf  
                      (       gshell.asm):01989                  ELSE
0C0A 7D1354           (       gshell.asm):01990                  tst   REGF
                      (       gshell.asm):01991                  ENDC
0C0D 2603             (       gshell.asm):01992                  bne   NormIco2
0C0F CC0018           (       gshell.asm):01993                  ldd   #24        Unless drive, then 24
0C12 ED64             (       gshell.asm):01994         NormIco2 std   4,S
                      (       gshell.asm):01995                  IFNE  H6309
                      (       gshell.asm):01996                  tstf             Drive?
                      (       gshell.asm):01997                  ELSE
0C14 7D1354           (       gshell.asm):01998                  tst   REGF
                      (       gshell.asm):01999                  ENDC
0C17 2604             (       gshell.asm):02000                  bne   NormIco3   No, determine width
0C19 C61D             (       gshell.asm):02001                  ldb   #29        Special width for drive
0C1B 2008             (       gshell.asm):02002                  bra   DRAIFBO1
                      (       gshell.asm):02003         
0C1D C644             (       gshell.asm):02004         NormIco3 ldb   #68        80 columns defaults to 68 pixel width
0C1F 0D5D             (       gshell.asm):02005                  tst   WD48FLAG   If 80 column skip ahead
0C21 2602             (       gshell.asm):02006                  bne   DRAIFBO1
0C23 C63E             (       gshell.asm):02007                  ldb   #62        Box width 62 pixels for 40 column
0C25 ED62             (       gshell.asm):02008         DRAIFBO1 std   2,S        Save box width
0C27 1728F5           (       gshell.asm):02009                  lbsr  RBOX       Draw box & return
                      (       gshell.asm):02010         * use entry flag to flag whether
                      (       gshell.asm):02011                  IFNE  H6309
                      (       gshell.asm):02012                  tste             Do we want shadow too?
                      (       gshell.asm):02013                  ELSE
0C2A 7D1353           (       gshell.asm):02014                  tst   REGE
                      (       gshell.asm):02015                  ENDC
0C2D 2726             (       gshell.asm):02016                  beq   DoneAIFB   No, exit
0C2F C601             (       gshell.asm):02017                  ldb   #1         Dark Grey color
0C31 ED62             (       gshell.asm):02018                  std   2,s
0C33 1728C3           (       gshell.asm):02019                  lbsr  FCOLOR
0C36 5F               (       gshell.asm):02020                  clrb             Set X offset to 0
0C37 ED62             (       gshell.asm):02021                  std   2,s
0C39 1728DB           (       gshell.asm):02022                  lbsr  RLINE      Draw vertical line
0C3C 5F               (       gshell.asm):02023                  clrb             Set Y offset to 0
0C3D ED64             (       gshell.asm):02024                  std   4,s
                      (       gshell.asm):02025                  IFNE  H6309
                      (       gshell.asm):02026                  tstf             Drive?
                      (       gshell.asm):02027                  ELSE
0C3F 7D1354           (       gshell.asm):02028                  tst   REGF
                      (       gshell.asm):02029                  ENDC
0C42 2604             (       gshell.asm):02030                  bne   NormIco4   No
0C44 C61C             (       gshell.asm):02031                  ldb   #28
0C46 2008             (       gshell.asm):02032                  bra   Do40Shdw
                      (       gshell.asm):02033         
0C48 C63D             (       gshell.asm):02034         NormIco4 ldb   #61        61 pixel width for 40 column
0C4A 0D5D             (       gshell.asm):02035                  tst   WD48FLAG
0C4C 2702             (       gshell.asm):02036                  beq   Do40Shdw
0C4E C643             (       gshell.asm):02037                  ldb   #67        67 pixel width for 80 column
0C50 ED62             (       gshell.asm):02038         Do40Shdw std   2,s        X offset
0C52 1728C2           (       gshell.asm):02039                  lbsr  RLINE      Draw horizontal dark grey line
0C55 3266             (       gshell.asm):02040         DoneAIFB leas  6,S        Eat stack & return
0C57 39               (       gshell.asm):02041                  rts   
                      (       gshell.asm):02042         
0C58 3440             (       gshell.asm):02043         UPDTDEVC pshs  U
0C5A CE1241           (       gshell.asm):02044                  ldu   #DRIVETBL
0C5D 8E0015           (       gshell.asm):02045                  ldx   #21
0C60 C604             (       gshell.asm):02046                  ldb   #4
0C62 3416             (       gshell.asm):02047                  pshs  d,X
0C64 8E0001           (       gshell.asm):02048                  ldx   #1
0C67 3410             (       gshell.asm):02049                  pshs  X
0C69 D623             (       gshell.asm):02050                  ldb   WNDWPATH+1
0C6B 3416             (       gshell.asm):02051                  pshs  d,X
0C6D 17284C           (       gshell.asm):02052                  lbsr  CWAREA
0C70 17217A           (       gshell.asm):02053                  lbsr  MOUSOFF
0C73 172126           (       gshell.asm):02054                  lbsr  CLRSCRN
0C76 17232E           (       gshell.asm):02055                  lbsr  FULLSCRN
0C79 2005             (       gshell.asm):02056                  bra   UPDTDEV2
                      (       gshell.asm):02057         
0C7B 17FD21           (       gshell.asm):02058         UPDTDEV1 lbsr  WRITICON   Print icon on screen
0C7E EE4A             (       gshell.asm):02059                  ldu   FL.LINK,U  Get next device in linked list
0C80 EFE4             (       gshell.asm):02060         UPDTDEV2 stu   ,S         Save it
0C82 26F7             (       gshell.asm):02061                  bne   UPDTDEV1   Still more drives, do next one
0C84 8E0385           (       gshell.asm):02062                  ldx   #TRSHDESC  Now, do trash can
0C87 AFE4             (       gshell.asm):02063                  stx   ,S
0C89 17FD13           (       gshell.asm):02064                  lbsr  WRITICON
0C8C 8E0393           (       gshell.asm):02065                  ldx   #PRTRDESC  And printer
0C8F AFE4             (       gshell.asm):02066                  stx   ,s
0C91 17FD0B           (       gshell.asm):02067                  lbsr  WRITICON
0C94 DC36             (       gshell.asm):02068                  ldd   DEVICNOW   Get current drive (if any)
0C96 EDE4             (       gshell.asm):02069                  std   ,S
0C98 17FED4           (       gshell.asm):02070                  lbsr  SELCICON   Select it on screen
0C9B DC22             (       gshell.asm):02071                  ldd   WNDWPATH
0C9D EDE4             (       gshell.asm):02072                  std   ,S
0C9F 17214F           (       gshell.asm):02073                  lbsr  INITMOUS   Set mouse parms
0CA2 326A             (       gshell.asm):02074                  leas  10,S
0CA4 35C0             (       gshell.asm):02075                  puls  U,PC
                      (       gshell.asm):02076         
                      (       gshell.asm):02077         * Get ptr to root path (not including drive name)
                      (       gshell.asm):02078         * Exit: X=ptr to either end of pathname (if on root), or ptr to root path
                      (       gshell.asm):02079         *       D=1 if on root
                      (       gshell.asm):02080         *       D=0 if found path
0CA6 8E0456           (       gshell.asm):02081         FNDSLASH ldx   #DDIRNAME+1 Point to full path of current dir (skip 1st '/')
0CA9 E680             (       gshell.asm):02082         FNDSLAS1 ldb   ,X+        Get char
0CAB 2707             (       gshell.asm):02083                  beq   FNDSLAS2   End of path, exit with D=1
0CAD C12F             (       gshell.asm):02084                  cmpb  #'/        Find slash?
0CAF 26F8             (       gshell.asm):02085                  bne   FNDSLAS1   No, keep looking
0CB1 5F               (       gshell.asm):02086                  clrb             Exit with D=0
0CB2 2001             (       gshell.asm):02087                  bra   FNDSLAS3
                      (       gshell.asm):02088         
0CB4 5C               (       gshell.asm):02089         FNDSLAS2 incb  
0CB5 4F               (       gshell.asm):02090         FNDSLAS3 clra  
0CB6 39               (       gshell.asm):02091                  rts   
                      (       gshell.asm):02092         
                      (       gshell.asm):02093         * Check if icon (or clickable option)
                      (       gshell.asm):02094         * Exit: D=0 if no icon selected
                      (       gshell.asm):02095         *       else D=ptr to FL.* structure for icon selected
0CB7 3440             (       gshell.asm):02096         ISITICON pshs  U
0CB9 AE64             (       gshell.asm):02097                  ldx   4,S        Get ptr to mouse packet
0CBB EC881A           (       gshell.asm):02098                  ldd   PT.ACY,X   Get Y coord
0CBE 830008           (       gshell.asm):02099                  subd  #8
0CC1 3416             (       gshell.asm):02100                  pshs  d,X        Save modified Y coord & room for X coord
0CC3 EC8818           (       gshell.asm):02101                  ldd   PT.ACX,X   Get X coord
0CC6 0D1B             (       gshell.asm):02102                  tst   FLAG640W   640 wide screen?
0CC8 2602             (       gshell.asm):02103                  bne   ISITICO1   No, skip ahead
                      (       gshell.asm):02104                  IFNE  H6309
                      (       gshell.asm):02105                  asrd             Divide by 2 (scale to 320)
                      (       gshell.asm):02106                  ELSE
0CCA 47               (       gshell.asm):02107                  asra
0CCB 56               (       gshell.asm):02108                  rorb
                      (       gshell.asm):02109                  ENDC
0CCC 830008           (       gshell.asm):02110         ISITICO1 subd  #8
0CCF ED62             (       gshell.asm):02111                  std   2,S        Save modified X coord
0CD1 10830020         (       gshell.asm):02112                  cmpd  #32        Is X coord within 32 pixels of left side (no border)?
0CD5 2F11             (       gshell.asm):02113                  ble   ISITDEVC   Yes, check for device (NOTE: WHERE PRINTER SHOULD GO)
0CD7 ECE4             (       gshell.asm):02114                  ldd   ,S         Get Y adjusted coord
0CD9 10830008         (       gshell.asm):02115                  cmpd  #8         Is it in the current directory bar area?
0CDD 2E05             (       gshell.asm):02116                  bgt   ISITDISP   No, skip ahead
0CDF CE035B           (       gshell.asm):02117                  ldu   #DBOXDESC  Point to icon info table entry for CLOSE box in current dir bar
0CE2 2039             (       gshell.asm):02118                  bra   ISITICO4   Go check that
                      (       gshell.asm):02119         
0CE4 DE2C             (       gshell.asm):02120         ISITDISP ldu   STRTICON   Get ptr to icon descriptor for 1st icon on current scrn
0CE6 2035             (       gshell.asm):02121                  bra   ISITICO4   Check it
                      (       gshell.asm):02122         
0CE8 CE1241           (       gshell.asm):02123         ISITDEVC ldu   #DRIVETBL  Point to start of device/drive table
0CEB ECE4             (       gshell.asm):02124                  ldd   ,S         Get adjusted Y coord (NOTE: LDB 1,S BOTH 6809/6309)
0CED C180             (       gshell.asm):02125                  cmpb  #128       From 0-128 (drives themselves)?
0CEF 252C             (       gshell.asm):02126                  blo   ISITICO4   Yes, check with drive table entries
0CF1 C1A0             (       gshell.asm):02127                  cmpb  #160       Trash?
0CF3 2505             (       gshell.asm):02128                  blo   TryPrntr   No, try printer
0CF5 CE0385           (       gshell.asm):02129                  ldu   #TRSHDESC  Try the trash can descriptor
0CF8 2023             (       gshell.asm):02130                  bra   ISITICO4
                      (       gshell.asm):02131         
0CFA CE0393           (       gshell.asm):02132         TryPrntr ldu   #PRTRDESC  Try printer descriptor
0CFD 201E             (       gshell.asm):02133                  bra   ISITICO4
                      (       gshell.asm):02134         
0CFF EC62             (       gshell.asm):02135         ISITICO2 ldd   2,S        Get X coord
0D01 10A3C4           (       gshell.asm):02136                  cmpd  FL.XSTRT,U Within X start coord of current file table entry?
0D04 2D15             (       gshell.asm):02137                  blt   ISITICO3   No, check next file entry
0D06 10A344           (       gshell.asm):02138                  cmpd  FL.XEND,U  Within X end coord of current entry?
0D09 2E10             (       gshell.asm):02139                  bgt   ISITICO3   No, check next file entry
0D0B ECE4             (       gshell.asm):02140                  ldd   ,S         Get Y coord
0D0D 10A342           (       gshell.asm):02141                  cmpd  FL.YSTRT,U Within Y start coord of current entry?
0D10 2D09             (       gshell.asm):02142                  blt   ISITICO3   No, check next
0D12 10A346           (       gshell.asm):02143                  cmpd  FL.YEND,U  Within Y end coord of current entry
0D15 2E04             (       gshell.asm):02144                  bgt   ISITICO3   No, check next
0D17 1F30             (       gshell.asm):02145                  tfr   U,D        Found, move table entry ptr to D & exit
0D19 2008             (       gshell.asm):02146                  bra   ISITICO5
                      (       gshell.asm):02147         
                      (       gshell.asm):02148         * Go to next file table entry
0D1B EE4A             (       gshell.asm):02149         ISITICO3 ldu   FL.LINK,U  Get next file table ptr
0D1D EF7E             (       gshell.asm):02150         ISITICO4 stu   -2,S       Is this a legit ptr?
0D1F 26DE             (       gshell.asm):02151                  bne   ISITICO2   Yes, go check it
0D21 4F               (       gshell.asm):02152                  clra             No match, return with 0 (done, & no icon clicked)
0D22 5F               (       gshell.asm):02153                  clrb  
0D23 3264             (       gshell.asm):02154         ISITICO5 leas  4,S        Eat stack & return
0D25 35C0             (       gshell.asm):02155                  puls  U,PC
                      (       gshell.asm):02156         
0D27 CC0120           (       gshell.asm):02157         SET48X24 ldd   #288
0D2A ED6E             (       gshell.asm):02158                  std   14,S
0D2C 8E0F23           (       gshell.asm):02159                  ldx   #MULTIBFR  Point to general purpose buffer
0D2F AFE810           (       gshell.asm):02160                  stx   16,S
0D32 C607             (       gshell.asm):02161                  ldb   #7
0D34 E769             (       gshell.asm):02162                  stb   9,S
0D36 CC0030           (       gshell.asm):02163                  ldd   #48
0D39 ED6A             (       gshell.asm):02164                  std   10,S
0D3B E667             (       gshell.asm):02165                  ldb   7,S
0D3D CA80             (       gshell.asm):02166                  orb   #$80
0D3F E767             (       gshell.asm):02167                  stb   7,S
0D41 39               (       gshell.asm):02168                  rts   
                      (       gshell.asm):02169         
0D42 CC0090           (       gshell.asm):02170         SET24X24 ldd   #144
0D45 ED6E             (       gshell.asm):02171                  std   14,S
0D47 8E0E93           (       gshell.asm):02172                  ldx   #ICONBUFR  Point to icon build buffer
0D4A AFE810           (       gshell.asm):02173                  stx   16,S
0D4D C606             (       gshell.asm):02174                  ldb   #6
0D4F E769             (       gshell.asm):02175                  stb   9,S
0D51 CC0018           (       gshell.asm):02176                  ldd   #24
0D54 ED6A             (       gshell.asm):02177                  std   10,S
0D56 39               (       gshell.asm):02178                  rts   
                      (       gshell.asm):02179         
                      (       gshell.asm):02180         * Load standard icons
0D57 3274             (       gshell.asm):02181         STDICONS leas  -12,S      Make temp buffer on stack
0D59 9E26             (       gshell.asm):02182                  ldx   PRCIDNUM   Get GSHELL's process id # (for group)
0D5B DC22             (       gshell.asm):02183                  ldd   WNDWPATH   Get GSHELL's window path
0D5D 3416             (       gshell.asm):02184                  pshs  d,X        Save them
0D5F C618             (       gshell.asm):02185                  ldb   #24        Save ??? (height in pixels?)
0D61 ED6A             (       gshell.asm):02186                  std   10,S
0D63 308D2BE9         (       gshell.asm):02187                  leax  txticon,pc Point to new 4 color image of text
0D67 C690             (       gshell.asm):02188                  ldb   #144
0D69 172990           (       gshell.asm):02189                  lbsr  CopyIcon
0D6C 1700B0           (       gshell.asm):02190                  lbsr  ICN48X24
0D6F CC0001           (       gshell.asm):02191                  ldd   #IC.TEXT
0D72 ED64             (       gshell.asm):02192                  std   4,S
0D74 8DCC             (       gshell.asm):02193                  bsr   SET24X24
0D76 1727E4           (       gshell.asm):02194                  lbsr  GPLOAD
0D79 8DAC             (       gshell.asm):02195                  bsr   SET48X24
0D7B 1727DF           (       gshell.asm):02196                  lbsr  GPLOAD
                      (       gshell.asm):02197         
0D7E 308D2B3E         (       gshell.asm):02198                  leax  foldricn,pc Point to new 4 color image of folder
0D82 C690             (       gshell.asm):02199                  ldb   #144
0D84 172975           (       gshell.asm):02200                  lbsr  CopyIcon
0D87 170095           (       gshell.asm):02201                  lbsr  ICN48X24
0D8A C602             (       gshell.asm):02202                  ldb   #IC.FOLDR
0D8C ED64             (       gshell.asm):02203                  std   4,S
0D8E 8DB2             (       gshell.asm):02204                  bsr   SET24X24
0D90 1727CA           (       gshell.asm):02205                  lbsr  GPLOAD
0D93 8D92             (       gshell.asm):02206                  bsr   SET48X24
0D95 1727C5           (       gshell.asm):02207                  lbsr  GPLOAD
                      (       gshell.asm):02208         
0D98 308D2A94         (       gshell.asm):02209                  leax  execicon,pc Point to new 4 color image of executable
0D9C C690             (       gshell.asm):02210                  ldb   #144
0D9E 17295B           (       gshell.asm):02211                  lbsr  CopyIcon
0DA1 17007B           (       gshell.asm):02212                  lbsr  ICN48X24   Make double width version for 80 column screen
0DA4 C603             (       gshell.asm):02213                  ldb   #IC.PRGRM
0DA6 ED64             (       gshell.asm):02214                  std   4,S
0DA8 8D98             (       gshell.asm):02215                  bsr   SET24X24
0DAA 1727B0           (       gshell.asm):02216                  lbsr  GPLOAD
0DAD 17FF77           (       gshell.asm):02217                  lbsr  SET48X24
0DB0 1727AA           (       gshell.asm):02218                  lbsr  GPLOAD
                      (       gshell.asm):02219         
0DB3 308D29E9         (       gshell.asm):02220                  leax  trashicn,pc Point to new 4 color image of trashcan
0DB7 C690             (       gshell.asm):02221                  ldb   #144
0DB9 172940           (       gshell.asm):02222                  lbsr  CopyIcon
0DBC C609             (       gshell.asm):02223                  ldb   #IC.TRASH
0DBE ED64             (       gshell.asm):02224                  std   4,S
0DC0 8D80             (       gshell.asm):02225                  bsr   SET24X24
0DC2 172798           (       gshell.asm):02226                  lbsr  GPLOAD
0DC5 C607             (       gshell.asm):02227                  ldb   #7
0DC7 E767             (       gshell.asm):02228                  stb   7,S
0DC9 C689             (       gshell.asm):02229                  ldb   #IC.TRASH+$80
0DCB E765             (       gshell.asm):02230                  stb   5,S
0DCD 17278D           (       gshell.asm):02231                  lbsr  GPLOAD
0DD0 17FF6F           (       gshell.asm):02232                  lbsr  SET24X24
                      (       gshell.asm):02233         
0DD3 308D2981         (       gshell.asm):02234                  leax  driveicn,pc Point to new 4 color image of drive
0DD7 C648             (       gshell.asm):02235                  ldb   #72
0DD9 172920           (       gshell.asm):02236                  lbsr  CopyIcon
0DDC CC0048           (       gshell.asm):02237                  ldd   #72        72 bytes to load
0DDF ED6C             (       gshell.asm):02238                  std   12,S
0DE1 C60C             (       gshell.asm):02239                  ldb   #12        12 lines high 
0DE3 ED6A             (       gshell.asm):02240                  std   10,S
0DE5 C605             (       gshell.asm):02241                  ldb   #IC.DRIVE  Buffer #
0DE7 ED64             (       gshell.asm):02242                  std   4,S
0DE9 172771           (       gshell.asm):02243                  lbsr  GPLOAD     Load it in
0DEC C607             (       gshell.asm):02244                  ldb   #7         Screen type 7
0DEE E767             (       gshell.asm):02245                  stb   7,S
0DF0 C685             (       gshell.asm):02246                  ldb   #IC.DRIVE+$80 Buffer #+$80 for type 7 version (useless, same as type 6)
0DF2 E765             (       gshell.asm):02247                  stb   5,S
0DF4 172766           (       gshell.asm):02248                  lbsr  GPLOAD     Load the type 7 version (eliminate later!)
                      (       gshell.asm):02249         
0DF7 308D2BE5         (       gshell.asm):02250                  leax  prntricn,pc Point to new 4 color image of printer
0DFB C65A             (       gshell.asm):02251                  ldb   #90        90 bytes to load/copy
0DFD 1728FC           (       gshell.asm):02252                  lbsr  CopyIcon
0E00 CC005A           (       gshell.asm):02253                  ldd   #90        72 bytes to load
0E03 ED6C             (       gshell.asm):02254                  std   12,S
0E05 C60F             (       gshell.asm):02255                  ldb   #15        12 lines high 
0E07 ED6A             (       gshell.asm):02256                  std   10,S
0E09 C60F             (       gshell.asm):02257                  ldb   #IC.PRNTR  Buffer #
0E0B ED64             (       gshell.asm):02258                  std   4,S
0E0D 17274D           (       gshell.asm):02259                  lbsr  GPLOAD     Load it in
0E10 C607             (       gshell.asm):02260                  ldb   #7         Screen type 7
0E12 E767             (       gshell.asm):02261                  stb   7,S
0E14 C68F             (       gshell.asm):02262                  ldb   #IC.PRNTR+$80 Buffer #+$80 for type 7 version (useless, same as type 6)
0E16 E765             (       gshell.asm):02263                  stb   5,S
0E18 172742           (       gshell.asm):02264                  lbsr  GPLOAD     Load the type 7 version (eliminate later!)
                      (       gshell.asm):02265         
0E1B 32E810           (       gshell.asm):02266                  leas  16,S
0E1E 39               (       gshell.asm):02267                  rts   
                      (       gshell.asm):02268         
                      (       gshell.asm):02269         * NOTE: XPNDICONS ROUTINE ORIGINALLY HERE...NO LONGER NEEDED
                      (       gshell.asm):02270         
                      (       gshell.asm):02271         * duplicate a 24x12 4 color buffer to a 48x12 
0E1F C690             (       gshell.asm):02272         ICN48X24 ldb   #144       Counter for # of bytes in 4 color icon
0E21 3444             (       gshell.asm):02273                  pshs  B,U        Save it
0E23 8E0E93           (       gshell.asm):02274                  ldx   #ICONBUFR  Point to 4 color icon buffer
0E26 CE0F23           (       gshell.asm):02275                  ldu   #MULTIBFR  Point to bigger buffer to expand into (could expand into LINEBUFR)
0E29 E680             (       gshell.asm):02276         IC48X24L ldb   ,X+        Get 4 color byte
0E2B 8D08             (       gshell.asm):02277                  bsr   SR48X24    Expand 2 pixels (a nibble) into 4 pixels (a byte)
0E2D 8D06             (       gshell.asm):02278                  bsr   SR48X24    Do next last half of byte
0E2F 6AE4             (       gshell.asm):02279                  dec   ,S         Are we done all 144 source bytes?
0E31 26F6             (       gshell.asm):02280                  bne   IC48X24L   No, continue
0E33 35C4             (       gshell.asm):02281                  puls  B,U,PC     Restore & return
                      (       gshell.asm):02282         
0E35 4F               (       gshell.asm):02283         SR48X24  clra             Zero out hi byte
0E36 58               (       gshell.asm):02284                  lslb             Shift 1st color into B (2 bits)
0E37 49               (       gshell.asm):02285                  rola  
0E38 58               (       gshell.asm):02286                  lslb  
0E39 49               (       gshell.asm):02287                  rola  
0E3A 48               (       gshell.asm):02288                  lsla             Now, shift that over 1 pixel
0E3B 48               (       gshell.asm):02289                  lsla  
0E3C 58               (       gshell.asm):02290                  lslb             Shift in the next pixel from the source byte
0E3D 49               (       gshell.asm):02291                  rola  
0E3E 58               (       gshell.asm):02292                  lslb  
0E3F 49               (       gshell.asm):02293                  rola  
0E40 3402             (       gshell.asm):02294                  pshs  A          Save that byte (2 source pixels, now separated by a pixel)
0E42 48               (       gshell.asm):02295                  lsla             Shift it left by a pixel
0E43 48               (       gshell.asm):02296                  lsla  
0E44 AAE0             (       gshell.asm):02297                  ora   ,S+        Merge with original (effectively doubling each pixel)
0E46 A7C0             (       gshell.asm):02298                  sta   ,U+        Save doubled up byte
0E48 39               (       gshell.asm):02299                  rts   
                      (       gshell.asm):02300         
0E49 616966           (       gshell.asm):02301         AIF.NAME fcc   "aif"
                      (       gshell.asm):02302         
0E4C 2E               (       gshell.asm):02303         ONEDOT   fcb   '.
0E4D 00               (       gshell.asm):02304                  fcb   NUL
                      (       gshell.asm):02305         
                      (       gshell.asm):02306         * Entry: 0-1,s=RTS address
                      (       gshell.asm):02307         *        2-3,s=Ptr to file table entry
0E4E 3440             (       gshell.asm):02308         FILE.XXX pshs  U
0E50 EE64             (       gshell.asm):02309                  ldu   4,S        Get ptr to file table entry
0E52 32E8C0           (       gshell.asm):02310                  leas  -64,S      Make large buffer on stack
                      (       gshell.asm):02311                  IFNE  H6309
                      (       gshell.asm):02312                  clrd  
                      (       gshell.asm):02313                  ELSE
0E55 4F               (       gshell.asm):02314                  clra
0E56 5F               (       gshell.asm):02315                  clrb
                      (       gshell.asm):02316                  ENDC
0E57 EDE81C           (       gshell.asm):02317                  std   28,S
0E5A EC4C             (       gshell.asm):02318                  ldd   FL.FNAME,U Get ptr to filename
0E5C 3406             (       gshell.asm):02319                  pshs  d
0E5E 1701BA           (       gshell.asm):02320                  lbsr  ISIT.AIF
0E61 EDE81E           (       gshell.asm):02321                  std   28+2,S
0E64 ECE848           (       gshell.asm):02322                  ldd   70+2,S
0E67 EDE4             (       gshell.asm):02323                  std   ,S
0E69 1701CA           (       gshell.asm):02324                  lbsr  MTCH.XXX
0E6C 3262             (       gshell.asm):02325                  leas  2,S
0E6E EDE816           (       gshell.asm):02326                  std   22,S
0E71 1026013C         (       gshell.asm):02327                  lbne  FILEXXX3
0E75 ECE846           (       gshell.asm):02328                  ldd   70,S
0E78 3406             (       gshell.asm):02329                  pshs  d
0E7A 308CCC           (       gshell.asm):02330                  leax  <AIF.NAME,PC
0E7D 3410             (       gshell.asm):02331                  pshs  X
0E7F 30E824           (       gshell.asm):02332                  leax  38-2,S
0E82 3410             (       gshell.asm):02333                  pshs  X
0E84 17245D           (       gshell.asm):02334                  lbsr  STRCPY
0E87 3264             (       gshell.asm):02335                  leas  4,S
0E89 3406             (       gshell.asm):02336                  pshs  d
0E8B 172466           (       gshell.asm):02337                  lbsr  STRCAT
0E8E EDE81E           (       gshell.asm):02338                  std   26+4,S
0E91 8E0001           (       gshell.asm):02339                  ldx   #READ.
0E94 AF62             (       gshell.asm):02340                  stx   2,S
0E96 EDE4             (       gshell.asm):02341                  std   ,S
0E98 17240C           (       gshell.asm):02342                  lbsr  I.OPEN2    Open AIF file
0E9B 3264             (       gshell.asm):02343                  leas  4,S
0E9D EDE81E           (       gshell.asm):02344                  std   30,S       Save path to AIF file
0EA0 102D0104         (       gshell.asm):02345                  lblt  FILEXXX2   Couldn't open, skip ahead
0EA4 ECE846           (       gshell.asm):02346                  ldd   70,S
0EA7 3406             (       gshell.asm):02347                  pshs  d
0EA9 17023D           (       gshell.asm):02348                  lbsr  PUTSTRNG
0EAC EDE812           (       gshell.asm):02349                  std   ID.XXXPT+2,S
0EAF ECE820           (       gshell.asm):02350                  ldd   30+2,S     Get path to AIF file
0EB2 EDE4             (       gshell.asm):02351                  std   ,S
0EB4 1703C0           (       gshell.asm):02352                  lbsr  RDLN80CH   Read line of up to 80 chars (program name)
0EB7 EDE4             (       gshell.asm):02353                  std   ,S         Save size of read
0EB9 17022D           (       gshell.asm):02354                  lbsr  PUTSTRNG   Allocate mem & copy string into that mem
0EBC EDE810           (       gshell.asm):02355                  std   ID.MNAME+2,S Save pointer to program name in AIF structure
0EBF EDE81C           (       gshell.asm):02356                  std   26+2,S     Save again
0EC2 ECE820           (       gshell.asm):02357                  ldd   30+2,S     Get path to AIF file again
0EC5 EDE4             (       gshell.asm):02358                  std   ,S
0EC7 1703AD           (       gshell.asm):02359                  lbsr  RDLN80CH   Read parameters line
0ECA EDE4             (       gshell.asm):02360                  std   ,S         Save size of read
0ECC 17021A           (       gshell.asm):02361                  lbsr  PUTSTRNG   Allocate mem & copy string
0ECF EDE814           (       gshell.asm):02362                  std   ID.PARAM+2,S Save parm line
0ED2 ECE820           (       gshell.asm):02363                  ldd   30+2,S
0ED5 EDE4             (       gshell.asm):02364                  std   ,S
0ED7 17039D           (       gshell.asm):02365                  lbsr  RDLN80CH   Get icon file path
0EDA EDE4             (       gshell.asm):02366                  std   ,S         Save # bytes read
0EDC 17020A           (       gshell.asm):02367                  lbsr  PUTSTRNG   Allocate mem & copy string
0EDF EDE81A           (       gshell.asm):02368                  std   24+2,S
0EE2 ECE820           (       gshell.asm):02369                  ldd   30+2,S
0EE5 EDE4             (       gshell.asm):02370                  std   ,S
0EE7 170120           (       gshell.asm):02371                  lbsr  GETNUMBR   Get memory modifier (in 256 byte pages) HANDLES +/-
0EEA ED6E             (       gshell.asm):02372                  std   ID.MEMSZ+2,S Save mem size
0EEC 17011B           (       gshell.asm):02373                  lbsr  GETNUMBR
0EEF ED64             (       gshell.asm):02374                  std   ID.WTYPE+2,S Save window type (includes - & 0's!)
0EF1 170116           (       gshell.asm):02375                  lbsr  GETNUMBR
0EF4 ED66             (       gshell.asm):02376                  std   ID.XSIZE+2,S Save minimum X size
0EF6 170111           (       gshell.asm):02377                  lbsr  GETNUMBR
0EF9 ED68             (       gshell.asm):02378                  std   ID.YSIZE+2,S Save minimum Y size
0EFB 17010C           (       gshell.asm):02379                  lbsr  GETNUMBR
0EFE ED6C             (       gshell.asm):02380                  std   ID.BKGND+2,S Save background color
0F00 170107           (       gshell.asm):02381                  lbsr  GETNUMBR
0F03 ED6A             (       gshell.asm):02382                  std   ID.FRGND+2,S Save foreground color
0F05 1723AC           (       gshell.asm):02383                  lbsr  I.CLOSE    Close the AIF file
0F08 C605             (       gshell.asm):02384                  ldb   #EXEC.+READ.
0F0A EDE4             (       gshell.asm):02385                  std   ,S
0F0C ECE81A           (       gshell.asm):02386                  ldd   26,S       Get icon file path ptr
0F0F 3406             (       gshell.asm):02387                  pshs  d
0F11 172393           (       gshell.asm):02388                  lbsr  I.OPEN2    Open icon file
0F14 3264             (       gshell.asm):02389                  leas  4,S
0F16 EDE81E           (       gshell.asm):02390                  std   30,S       Save path # to icon file
0F19 2D74             (       gshell.asm):02391                  blt   FILEXXX1   Error opening, skip ahead
0F1B CC0090           (       gshell.asm):02392                  ldd   #144       Size of icon file
0F1E 3406             (       gshell.asm):02393                  pshs  d
0F20 8E0E93           (       gshell.asm):02394                  ldx   #ICONBUFR  Point to buffer to hold icon data
0F23 ECE820           (       gshell.asm):02395                  ldd   34-2,S     Get path #
0F26 3416             (       gshell.asm):02396                  pshs  d,X        Save them both
0F28 17232A           (       gshell.asm):02397                  lbsr  I.READ     Read in icon data
0F2B ECE824           (       gshell.asm):02398                  ldd   30+6,S     Get path # again
0F2E EDE4             (       gshell.asm):02399                  std   ,S
0F30 172381           (       gshell.asm):02400                  lbsr  I.CLOSE    Close icon file
0F33 ECE81E           (       gshell.asm):02401                  ldd   24+6,S
0F36 EDE4             (       gshell.asm):02402                  std   ,S
0F38 1721DC           (       gshell.asm):02403                  lbsr  FREE
0F3B ECE84C           (       gshell.asm):02404                  ldd   70+6,S
0F3E EDE4             (       gshell.asm):02405                  std   ,S
0F40 17009D           (       gshell.asm):02406                  lbsr  EXTICTBL   Allocate a new AIF descriptor entry (ID.*)
0F43 EDE81C           (       gshell.asm):02407                  std   22+6,S     Save ptr to new entry
0F46 EDE4             (       gshell.asm):02408                  std   ,S         and again
0F48 CC0016           (       gshell.asm):02409                  ldd   #ID.SIZE   Get size of ID.* structure
0F4B ED64             (       gshell.asm):02410                  std   4,S        Save it
0F4D 3066             (       gshell.asm):02411                  leax  2+4,S
0F4F AF62             (       gshell.asm):02412                  stx   2,S
0F51 172407           (       gshell.asm):02413                  lbsr  STRNCPY    ?? Copy stack copy of ID.* structure into allocated entry
0F54 ECA903F9         (       gshell.asm):02414                  ldd   NXTICONO,Y
0F58 AEE81C           (       gshell.asm):02415                  ldx   22+6,S
0F5B ED84             (       gshell.asm):02416                  std   ,X
                      (       gshell.asm):02417                  IFNE  H6309
                      (       gshell.asm):02418                  incd  
                      (       gshell.asm):02419                  ELSE
0F5D C30001           (       gshell.asm):02420                  addd  #$0001
                      (       gshell.asm):02421                  ENDC
0F60 EDA903F9         (       gshell.asm):02422                  std   NXTICONO,Y
                      (       gshell.asm):02423                  IFNE  H6309
                      (       gshell.asm):02424                  clrd  
                      (       gshell.asm):02425                  ELSE
0F64 4F               (       gshell.asm):02426                  clra
0F65 5F               (       gshell.asm):02427                  clrb
                      (       gshell.asm):02428                  ENDC
0F66 ED8814           (       gshell.asm):02429                  std   ID.LINK,X
0F69 CC0018           (       gshell.asm):02430                  ldd   #24
0F6C EDE4             (       gshell.asm):02431                  std   ,S
0F6E 3406             (       gshell.asm):02432                  pshs  d
0F70 ECF81E           (       gshell.asm):02433                  ldd   [32-2,S]
0F73 3416             (       gshell.asm):02434                  pshs  d,X
0F75 9E26             (       gshell.asm):02435                  ldx   PRCIDNUM
0F77 DC22             (       gshell.asm):02436                  ldd   WNDWPATH
0F79 3416             (       gshell.asm):02437                  pshs  d,X
0F7B 17FDC4           (       gshell.asm):02438                  lbsr  SET24X24
0F7E 1725DC           (       gshell.asm):02439                  lbsr  GPLOAD
0F81 17FE9B           (       gshell.asm):02440                  lbsr  ICN48X24
0F84 17FDA0           (       gshell.asm):02441                  lbsr  SET48X24
0F87 1725D3           (       gshell.asm):02442                  lbsr  GPLOAD
0F8A 32E810           (       gshell.asm):02443                  leas  16,S
0F8D 2019             (       gshell.asm):02444                  bra   FILEXXX2
                      (       gshell.asm):02445         
0F8F EC6E             (       gshell.asm):02446         FILEXXX1 ldd   14,S
0F91 3406             (       gshell.asm):02447                  pshs  d
0F93 172181           (       gshell.asm):02448                  lbsr  FREE
0F96 ECE814           (       gshell.asm):02449                  ldd   18+2,S
0F99 EDE4             (       gshell.asm):02450                  std   ,S
0F9B 172179           (       gshell.asm):02451                  lbsr  FREE
0F9E ECE81A           (       gshell.asm):02452                  ldd   24+2,S
0FA1 EDE4             (       gshell.asm):02453                  std   ,S
0FA3 172171           (       gshell.asm):02454                  lbsr  FREE
0FA6 3262             (       gshell.asm):02455                  leas  2,S
0FA8 ECE81E           (       gshell.asm):02456         FILEXXX2 ldd   30,S
0FAB 2C04             (       gshell.asm):02457                  bge   FILEXXX3
                      (       gshell.asm):02458                  IFNE  H6309
                      (       gshell.asm):02459                  clrd  
                      (       gshell.asm):02460                  ELSE
0FAD 4F               (       gshell.asm):02461                  clra
0FAE 5F               (       gshell.asm):02462                  clrb
                      (       gshell.asm):02463                  ENDC
0FAF 202A             (       gshell.asm):02464                  bra   FILEXXX6
                      (       gshell.asm):02465         
0FB1 ECE81C           (       gshell.asm):02466         FILEXXX3 ldd   28,S
0FB4 2717             (       gshell.asm):02467                  beq   FILEXXX4
0FB6 AEE816           (       gshell.asm):02468                  ldx   22,S
0FB9 EC0E             (       gshell.asm):02469                  ldd   ID.MNAME,X
0FBB 3406             (       gshell.asm):02470                  pshs  d
0FBD 3440             (       gshell.asm):02471                  pshs  U
0FBF 1706DC           (       gshell.asm):02472                  lbsr  RPLFICON
0FC2 3264             (       gshell.asm):02473                  leas  4,S
0FC4 1F03             (       gshell.asm):02474                  tfr   D,U
0FC6 CC0006           (       gshell.asm):02475                  ldd   #IC.AIF.F
0FC9 E748             (       gshell.asm):02476                  stb   FL.ICONO,U
0FCB 2003             (       gshell.asm):02477                  bra   FILEXXX5
                      (       gshell.asm):02478         
0FCD CC0007           (       gshell.asm):02479         FILEXXX4 ldd   #IC.F.XXX
0FD0 EDE81C           (       gshell.asm):02480         FILEXXX5 std   28,S
0FD3 ECF816           (       gshell.asm):02481                  ldd   [22,S]
0FD6 E749             (       gshell.asm):02482                  stb   FL.AIFNO,U
0FD8 ECE81C           (       gshell.asm):02483                  ldd   28,S
0FDB 32E840           (       gshell.asm):02484         FILEXXX6 leas  64,S
0FDE 35C0             (       gshell.asm):02485                  puls  U,PC
                      (       gshell.asm):02486         
                      (       gshell.asm):02487         * Allocate new ID.* descriptor
                      (       gshell.asm):02488         * Exit:D=0 if could not allocate new descriptor
                      (       gshell.asm):02489         *      or D=ptr to where new descriptor is
0FE0 3440             (       gshell.asm):02490         EXTICTBL pshs  U
0FE2 CC0016           (       gshell.asm):02491                  ldd   #ID.SIZE   Size of ID.* structure (for AIF's)
0FE5 3416             (       gshell.asm):02492                  pshs  d,X
0FE7 17011B           (       gshell.asm):02493                  lbsr  MEMSPACE   Try to allocate memory for another ID.* entry
0FEA 3262             (       gshell.asm):02494                  leas  2,S
0FEC EDE4             (       gshell.asm):02495                  std   ,S         Save ptr to where new ID.* entry will go
0FEE EDB813           (       gshell.asm):02496                  std   [IDSCNEXT,Y] ??? Save where process ID # is supposed to be???
0FF1 C30014           (       gshell.asm):02497                  addd  #ID.LINK   offset to next link ptr within ID.* entry
0FF4 DD13             (       gshell.asm):02498                  std   IDSCNEXT   Save as ptr to next available icon desc. link
0FF6 ECE1             (       gshell.asm):02499                  ldd   ,S++       Get ptr to new entry
0FF8 35C0             (       gshell.asm):02500                  puls  U,PC       Return with it
                      (       gshell.asm):02501         
0FFA AE62             (       gshell.asm):02502         FIND.XXX ldx   2,S
0FFC 1722DC           (       gshell.asm):02503                  lbsr  STREND1
0FFF C62E             (       gshell.asm):02504                  ldb   #'.
1001 E11C             (       gshell.asm):02505                  cmpb  -4,X
1003 262E             (       gshell.asm):02506                  bne   ISITAIF4
1005 301D             (       gshell.asm):02507                  leax  -3,X
1007 1F10             (       gshell.asm):02508                  tfr   X,D
1009 39               (       gshell.asm):02509                  rts   
                      (       gshell.asm):02510         
                      (       gshell.asm):02511         * Get a numeric input
                      (       gshell.asm):02512         * Entry: Path # to read from on stack
100A EC62             (       gshell.asm):02513         GETNUMBR ldd   2,S        Get path to do read from
100C 3406             (       gshell.asm):02514                  pshs  d
100E 170266           (       gshell.asm):02515                  lbsr  RDLN80CH   Go do 80 char readln
1011 EDE4             (       gshell.asm):02516                  std   ,S         Save # chars read
1013 2703             (       gshell.asm):02517                  beq   GETNUMB1   If no characters read, exit
1015 17259C           (       gshell.asm):02518                  lbsr  ATOI       Convert ASCII # to raw binary form
1018 3262             (       gshell.asm):02519         GETNUMB1 leas  2,S
101A 39               (       gshell.asm):02520                  rts   
                      (       gshell.asm):02521         
101B AE62             (       gshell.asm):02522         ISIT.AIF ldx   2,S
101D EC81             (       gshell.asm):02523                  ldd   ,X++
                      (       gshell.asm):02524                  IFNE  H6309
                      (       gshell.asm):02525                  andd  #$5f5f
                      (       gshell.asm):02526                  ELSE
101F 845F             (       gshell.asm):02527                  anda  #$5f
1021 C45F             (       gshell.asm):02528                  andb  #$5f
                      (       gshell.asm):02529                  ENDC
1023 10834149         (       gshell.asm):02530                  cmpd  #"AI
1027 260A             (       gshell.asm):02531                  bne   ISITAIF4
1029 EC84             (       gshell.asm):02532                  ldd   ,X
102B 845F             (       gshell.asm):02533                  anda  #$5F
102D 1083462E         (       gshell.asm):02534                  cmpd  #"F.
1031 2702             (       gshell.asm):02535                  beq   ISITAIF5
1033 4F               (       gshell.asm):02536         ISITAIF4 clra  
1034 5F               (       gshell.asm):02537                  clrb  
1035 39               (       gshell.asm):02538         ISITAIF5 rts   
                      (       gshell.asm):02539         
1036 3450             (       gshell.asm):02540         MTCH.XXX pshs  X,U
1038 EE66             (       gshell.asm):02541                  ldu   6,S
103A 9E11             (       gshell.asm):02542                  ldx   IDSCSPTR
103C 30882C           (       gshell.asm):02543                  leax  ID.SIZE*2,X
103F AE8814           (       gshell.asm):02544                  ldx   ID.LINK,X
1042 2713             (       gshell.asm):02545                  beq   MTCH.XX2
1044 EC8810           (       gshell.asm):02546         MTCH.XX1 ldd   ID.XXXPT,X
1047 3446             (       gshell.asm):02547                  pshs  d,U
1049 1722B4           (       gshell.asm):02548                  lbsr  STRCMP
104C 3264             (       gshell.asm):02549                  leas  4,S
104E ED7E             (       gshell.asm):02550                  std   -2,S
1050 2705             (       gshell.asm):02551                  beq   MTCH.XX2
1052 AE8814           (       gshell.asm):02552                  ldx   ID.LINK,X
1055 26ED             (       gshell.asm):02553                  bne   MTCH.XX1
1057 1F10             (       gshell.asm):02554         MTCH.XX2 tfr   X,D
1059 35D0             (       gshell.asm):02555                  puls  X,U,PC
                      (       gshell.asm):02556         
                      (       gshell.asm):02557         * Entry: 0-1,s : RTS address
                      (       gshell.asm):02558         *        2-3,s : AIF entry # (anything lower than IC.XTRNL is internal AIF's
                      (       gshell.asm):02559         *                only, such as GCALC, etc.)
                      (       gshell.asm):02560         * Exit: D=ptr to ID.* structure that matches
                      (       gshell.asm):02561         *       D=0 if no match found
105B 3440             (       gshell.asm):02562         FNDIDESC pshs  U
105D EC64             (       gshell.asm):02563                  ldd   4,S        Get AIF entry # for ID.* structure (only need B)
105F DE11             (       gshell.asm):02564                  ldu   IDSCSPTR   Get ptr to start of icon descriptor table
1061 E141             (       gshell.asm):02565         FNDIDES1 cmpb  ID.NUMBR+1,U Is this the correct ID.* entry?
1063 2707             (       gshell.asm):02566                  beq   FNDIDES2   Yes, skip ahead
1065 EEC814           (       gshell.asm):02567                  ldu   ID.LINK,U  Get ptr to next ID.* entry
1068 26F7             (       gshell.asm):02568                  bne   FNDIDES1   Go check it out
106A 2019             (       gshell.asm):02569                  bra   FNDIDES5   Hit end of list, no match so exit with ptr=0
                      (       gshell.asm):02570         
106C C114             (       gshell.asm):02571         FNDIDES2 cmpb  #IC.XTRNL  Is this an external AIF?
106E 2C15             (       gshell.asm):02572                  bge   FNDIDES5   Yes, exit
1070 C10C             (       gshell.asm):02573                  cmpb  #IC.GCAL   Is it the calender program?
1072 260D             (       gshell.asm):02574                  bne   FNDIDES3   No, use GSHELL's current window type
                      (       gshell.asm):02575         * ADDED FOR GCAL - to allow it on an 80 column screen
1074 DC01             (       gshell.asm):02576                  ldd   DEFWTYPE   Get current GSHELL window type
1076 10830008         (       gshell.asm):02577                  cmpd  #8         Is it a 16 color?
107A 2607             (       gshell.asm):02578                  bne   FNDIDES4   No, allow GSHELL window type
107C CC0006           (       gshell.asm):02579                  ldd   #6         Force GCAL to use type 6 (320x200x4)
107F 2002             (       gshell.asm):02580                  bra   FNDIDES4
                      (       gshell.asm):02581         
1081 DC01             (       gshell.asm):02582         FNDIDES3 ldd   DEFWTYPE   Use default window type (GShell's actual type)
1083 ED42             (       gshell.asm):02583         FNDIDES4 std   ID.WTYPE,U Save as AIF's window type
1085 1F30             (       gshell.asm):02584         FNDIDES5 tfr   U,D        D=ptr to AIF entry found
1087 35C0             (       gshell.asm):02585                  puls  U,PC
                      (       gshell.asm):02586         
                      (       gshell.asm):02587         * Kill icon Get/put buffer, free up table entry???
1089 3440             (       gshell.asm):02588         KILIBUFS pshs  U
108B DE11             (       gshell.asm):02589                  ldu   IDSCSPTR
108D 33C842           (       gshell.asm):02590                  leau  ID.SIZE*3,U
1090 ECC814           (       gshell.asm):02591                  ldd   ID.LINK,U
1093 3406             (       gshell.asm):02592                  pshs  d
1095 4F               (       gshell.asm):02593                  clra  
1096 5F               (       gshell.asm):02594                  clrb  
1097 EDC814           (       gshell.asm):02595                  std   ID.LINK,U
109A 203B             (       gshell.asm):02596                  bra   KILIBUF2
                      (       gshell.asm):02597         
109C ECC814           (       gshell.asm):02598         KILIBUF1 ldd   ID.LINK,U
109F EDE4             (       gshell.asm):02599                  std   ,S
10A1 ECC4             (       gshell.asm):02600                  ldd   ID.NUMBR,U
10A3 3406             (       gshell.asm):02601                  pshs  d
10A5 DC26             (       gshell.asm):02602                  ldd   PRCIDNUM
10A7 3406             (       gshell.asm):02603                  pshs  d
10A9 DC22             (       gshell.asm):02604                  ldd   WNDWPATH
10AB 3406             (       gshell.asm):02605                  pshs  d
10AD 17242E           (       gshell.asm):02606                  lbsr  KILBUF
10B0 E665             (       gshell.asm):02607                  ldb   5,S
10B2 CA80             (       gshell.asm):02608                  orb   #$80
10B4 E765             (       gshell.asm):02609                  stb   5,S
10B6 172425           (       gshell.asm):02610                  lbsr  KILBUF
10B9 EC4E             (       gshell.asm):02611                  ldd   ID.MNAME,U
10BB EDE4             (       gshell.asm):02612                  std   ,S
10BD 172057           (       gshell.asm):02613                  lbsr  FREE
10C0 ECC810           (       gshell.asm):02614                  ldd   ID.XXXPT,U
10C3 EDE4             (       gshell.asm):02615                  std   ,S
10C5 17204F           (       gshell.asm):02616                  lbsr  FREE
10C8 ECC812           (       gshell.asm):02617                  ldd   ID.PARAM,U
10CB EDE4             (       gshell.asm):02618                  std   ,S
10CD 172047           (       gshell.asm):02619                  lbsr  FREE
10D0 EFE4             (       gshell.asm):02620                  stu   ,S
10D2 172042           (       gshell.asm):02621                  lbsr  FREE
10D5 3266             (       gshell.asm):02622                  leas  6,S
10D7 EEE4             (       gshell.asm):02623         KILIBUF2 ldu   ,S
10D9 26C1             (       gshell.asm):02624                  bne   KILIBUF1
10DB CC0014           (       gshell.asm):02625                  ldd   #IC.XTRNL
10DE EDA903F9         (       gshell.asm):02626                  std   NXTICONO,Y
10E2 8E03F7           (       gshell.asm):02627                  ldx   #ENDLINK
10E5 9F13             (       gshell.asm):02628                  stx   IDSCNEXT
10E7 35C6             (       gshell.asm):02629                  puls  d,U,PC
                      (       gshell.asm):02630         
10E9 EC62             (       gshell.asm):02631         PUTSTRNG ldd   2,S
10EB 3406             (       gshell.asm):02632                  pshs  d
10ED 1721DC           (       gshell.asm):02633                  lbsr  STRLEN
10F0 C30001           (       gshell.asm):02634                  addd  #1
10F3 EDE4             (       gshell.asm):02635                  std   ,S
10F5 8D0E             (       gshell.asm):02636                  bsr   MEMSPACE
10F7 EDE1             (       gshell.asm):02637                  std   ,S++
10F9 2709             (       gshell.asm):02638                  beq   PUTSTRNX
10FB AE62             (       gshell.asm):02639                  ldx   2,S
10FD 3416             (       gshell.asm):02640                  pshs  d,X
10FF 1721E2           (       gshell.asm):02641                  lbsr  STRCPY
1102 3264             (       gshell.asm):02642                  leas  4,S
1104 39               (       gshell.asm):02643         PUTSTRNX rts   
                      (       gshell.asm):02644         
                      (       gshell.asm):02645         * Allocate memory from internal data area?
                      (       gshell.asm):02646         * Entry: # bytes requested at 0,s
                      (       gshell.asm):02647         * Exit: appears to be ptr to start of memory received, or 0 if couldn't get
                      (       gshell.asm):02648         *       memory requested
1105 EC62             (       gshell.asm):02649         MEMSPACE ldd   2,S        Get size of memory requested
1107 3406             (       gshell.asm):02650                  pshs  d
1109 171FA1           (       gshell.asm):02651                  lbsr  MALLOC     Allocate it
110C EDE4             (       gshell.asm):02652                  std   ,S         Save ptr to memory received
110E 260A             (       gshell.asm):02653                  bne   MEMSPAC1   Successful MALLOC, exit with new mem ptr
1110 308C09           (       gshell.asm):02654                  leax  <OUTOFMEM,PC Unsuccesfull, print 'Out of memory" in overlay window
1113 3410             (       gshell.asm):02655                  pshs  X
1115 1700ED           (       gshell.asm):02656                  lbsr  OLAYPRNT
1118 3262             (       gshell.asm):02657                  leas  2,S
111A 3586             (       gshell.asm):02658         MEMSPAC1 puls  d,pc       Return with ptr
                      (       gshell.asm):02659         
111C 4F7574206F66206D (       gshell.asm):02660         OUTOFMEM fcc   "Out of memory"
     656D6F7279
1129 0D00             (       gshell.asm):02661         CRETURN  fcb   CR,NUL
                      (       gshell.asm):02662         
                      (       gshell.asm):02663         * See if all forked processes shut down before we exit
                      (       gshell.asm):02664         * Exit: D=-1 if still active processes
                      (       gshell.asm):02665         *
112B 3440             (       gshell.asm):02666         TESTQUIT pshs  U
112D DE38             (       gshell.asm):02667                  ldu   PTBLSPTR   Get ptr to start of linked list of process descriptors
112F 2714             (       gshell.asm):02668                  beq   TSTQUIT3   No entries
1131 AEC81A           (       gshell.asm):02669         TSTQUIT1 ldx   GD.LINK,U
1134 EC46             (       gshell.asm):02670                  ldd   GD.STATS,U
1136 2C0F             (       gshell.asm):02671                  bge   TSTQUIT2
1138 308C4B           (       gshell.asm):02672                  leax  <STILACTV,PC Print "processes still active" in overlay window
113B 3410             (       gshell.asm):02673                  pshs  X
113D 1700C5           (       gshell.asm):02674                  lbsr  OLAYPRNT
1140 3262             (       gshell.asm):02675                  leas  2,S
1142 CCFFFF           (       gshell.asm):02676                  ldd   #-1        Flag we can't exit GSHELL yet
1145 35C0             (       gshell.asm):02677         TSTQUIT3 puls  U,PC
                      (       gshell.asm):02678         
1147 1F13             (       gshell.asm):02679         TSTQUIT2 tfr   X,U
1149 EF7E             (       gshell.asm):02680                  stu   -2,S
114B 26E4             (       gshell.asm):02681                  bne   TSTQUIT1
114D 35C0             (       gshell.asm):02682                  puls  U,PC
                      (       gshell.asm):02683         
114F 3440             (       gshell.asm):02684         TRYQUIT  pshs  U
1151 8E0001           (       gshell.asm):02685                  ldx   #1
1154 D623             (       gshell.asm):02686                  ldb   WNDWPATH+1
1156 3416             (       gshell.asm):02687                  pshs  d,X
1158 171BC0           (       gshell.asm):02688                  lbsr  PAUSECHO   Set pause & echo ON
115B 171C4C           (       gshell.asm):02689                  lbsr  CURSORON   Turn text cursor ON
115E 1722A3           (       gshell.asm):02690                  lbsr  ST.RELEA   Release any pending signals
1161 1720B4           (       gshell.asm):02691                  lbsr  KILLPBUF
1164 6F63             (       gshell.asm):02692                  clr   3,S
1166 170F02           (       gshell.asm):02693                  lbsr  NOMOUSE    Shut mouse autofollow off
1169 1722F1           (       gshell.asm):02694                  lbsr  ST.WNSET
116C 5F               (       gshell.asm):02695                  clrb  
116D 3406             (       gshell.asm):02696                  pshs  d
116F 17233F           (       gshell.asm):02697                  lbsr  SELECT
1172 3262             (       gshell.asm):02698                  leas  2,S
1174 17213D           (       gshell.asm):02699                  lbsr  I.CLOSE
1177 3264             (       gshell.asm):02700                  leas  4,S
1179 EC64             (       gshell.asm):02701                  ldd   4,S
117B 2D05             (       gshell.asm):02702                  blt   TRYQUIT4
117D 3406             (       gshell.asm):02703                  pshs  d
117F 172575           (       gshell.asm):02704                  lbsr  F.EXIT
1182 4F               (       gshell.asm):02705         TRYQUIT4 clra  
1183 5F               (       gshell.asm):02706                  clrb  
1184 35C0             (       gshell.asm):02707                  puls  U,PC
                      (       gshell.asm):02708         
1186 50726F6365737365 (       gshell.asm):02709         STILACTV fcc   "Processes still active"
     73207374696C6C20
     616374697665
119C 00               (       gshell.asm):02710                  fcb   NUL
                      (       gshell.asm):02711         
119D 3440             (       gshell.asm):02712         ERRPRINT pshs  U
119F EE66             (       gshell.asm):02713                  ldu   6,S
11A1 EC4C             (       gshell.asm):02714                  ldd   GD.WPATH,U Get process window path
11A3 109322           (       gshell.asm):02715                  cmpd  WNDWPATH   Same as GSHELL window path?
11A6 2F0E             (       gshell.asm):02716                  ble   ERRPRIN1
11A8 3406             (       gshell.asm):02717                  pshs  d
11AA 172304           (       gshell.asm):02718                  lbsr  SELECT
11AD DC22             (       gshell.asm):02719                  ldd   WNDWPATH
11AF EDE4             (       gshell.asm):02720                  std   ,S
11B1 1722FD           (       gshell.asm):02721                  lbsr  SELECT
11B4 3262             (       gshell.asm):02722                  leas  2,S
11B6 EC46             (       gshell.asm):02723         ERRPRIN1 ldd   GD.STATS,U Get last status (error) from program
11B8 3406             (       gshell.asm):02724                  pshs  d
11BA AEC4             (       gshell.asm):02725                  ldx   GD.MNAME,U Get ptr to module name that had error 
11BC EC66             (       gshell.asm):02726                  ldd   6,S
11BE 3416             (       gshell.asm):02727                  pshs  d,X
11C0 8D04             (       gshell.asm):02728                  bsr   BUILDMSG
11C2 3266             (       gshell.asm):02729                  leas  6,S
11C4 35C0             (       gshell.asm):02730                  puls  U,PC
                      (       gshell.asm):02731         
11C6 EC66             (       gshell.asm):02732         BUILDMSG ldd   6,S
11C8 3406             (       gshell.asm):02733                  pshs  d
11CA 1700D5           (       gshell.asm):02734                  lbsr  BIN2ASCI
11CD EDE4             (       gshell.asm):02735                  std   ,S
11CF 308C2E           (       gshell.asm):02736                  leax  <QUOTDASH,PC
11D2 3410             (       gshell.asm):02737                  pshs  X
11D4 AE68             (       gshell.asm):02738                  ldx   8,S
11D6 EC66             (       gshell.asm):02739                  ldd   6,S
11D8 3416             (       gshell.asm):02740                  pshs  d,X
11DA 8E0F23           (       gshell.asm):02741                  ldx   #MULTIBFR
11DD 3410             (       gshell.asm):02742                  pshs  X
11DF 172102           (       gshell.asm):02743                  lbsr  STRCPY
11E2 3264             (       gshell.asm):02744                  leas  4,S
11E4 3406             (       gshell.asm):02745                  pshs  d
11E6 17210B           (       gshell.asm):02746                  lbsr  STRCAT
11E9 3264             (       gshell.asm):02747                  leas  4,S
11EB 3406             (       gshell.asm):02748                  pshs  d
11ED 172104           (       gshell.asm):02749                  lbsr  STRCAT
11F0 3264             (       gshell.asm):02750                  leas  4,S
11F2 3406             (       gshell.asm):02751                  pshs  d
11F4 1720FD           (       gshell.asm):02752                  lbsr  STRCAT
11F7 3264             (       gshell.asm):02753                  leas  4,S
11F9 3406             (       gshell.asm):02754                  pshs  d
11FB 8D08             (       gshell.asm):02755                  bsr   OLAYPRNT
11FD 3262             (       gshell.asm):02756                  leas  2,S
11FF 39               (       gshell.asm):02757                  rts   
                      (       gshell.asm):02758         
1200 22               (       gshell.asm):02759         QUOTDASH fcb   '"
1201 202D20           (       gshell.asm):02760                  fcc   " - "
1204 00               (       gshell.asm):02761                  fcb   NUL
                      (       gshell.asm):02762         
1205 8E0001           (       gshell.asm):02763         OLAYPRNT ldx   #1
1208 EC62             (       gshell.asm):02764                  ldd   2,S
120A 3416             (       gshell.asm):02765                  pshs  d,X
120C DC22             (       gshell.asm):02766                  ldd   WNDWPATH
120E 3406             (       gshell.asm):02767                  pshs  d
1210 171126           (       gshell.asm):02768                  lbsr  OLAYGNBK
1213 8D43             (       gshell.asm):02769                  bsr   WAITPRES
1215 17126B           (       gshell.asm):02770                  lbsr  KILOLAY2
1218 2012             (       gshell.asm):02771                  bra   OLAYPRN1
                      (       gshell.asm):02772         
                      (       gshell.asm):02773         * Write out a string to the current window path (string length determined by
                      (       gshell.asm):02774         * NUL char)
                      (       gshell.asm):02775         * Entry: 0-1,s = RTS address
                      (       gshell.asm):02776         *        2-3,s = ptr to string to write
121A EC62             (       gshell.asm):02777         WTSTRLEN ldd   2,S        Get ptr to string to write
121C 3406             (       gshell.asm):02778                  pshs  d
121E 1720AB           (       gshell.asm):02779                  lbsr  STRLEN     Determine length
1221 EDE4             (       gshell.asm):02780                  std   ,S         Save it
1223 AE64             (       gshell.asm):02781                  ldx   4,S
1225 DC22             (       gshell.asm):02782                  ldd   WNDWPATH   Get path to window
1227 3416             (       gshell.asm):02783                  pshs  d,X
1229 17204D           (       gshell.asm):02784                  lbsr  I.WRITE    Write it out
122C 3266             (       gshell.asm):02785         OLAYPRN1 leas  6,S        Eat temp stack & return
122E 39               (       gshell.asm):02786                  rts   
                      (       gshell.asm):02787         
                      (       gshell.asm):02788         * Write out a string to the current window path (string length determined by
                      (       gshell.asm):02789         * NUL char) and add a Carriage return if there isn't one already
                      (       gshell.asm):02790         * Entry: 0-1,s = RTS address
                      (       gshell.asm):02791         *        2-3,s = ptr to string to write
122F 3460             (       gshell.asm):02792         WRLNWCR  pshs  Y,U
1231 EC66             (       gshell.asm):02793                  ldd   6,S        Get ptr to string
1233 3406             (       gshell.asm):02794                  pshs  d
1235 1720A1           (       gshell.asm):02795                  lbsr  STREND     Get end position of string
1238 1F03             (       gshell.asm):02796                  tfr   D,U
123A A3E1             (       gshell.asm):02797                  subd  ,S++       Calculate size of string
123C 1F02             (       gshell.asm):02798                  tfr   D,Y
123E AE66             (       gshell.asm):02799                  ldx   6,S        Get ptr to string again
1240 9623             (       gshell.asm):02800                  lda   WNDWPATH+1 Get window path
1242 103F8C           (       gshell.asm):02801                  os9   I$WRITLN   Write it
1245 E65F             (       gshell.asm):02802                  ldb   -1,U       Was last char a CR?
1247 C10D             (       gshell.asm):02803                  cmpb  #CR
1249 270B             (       gshell.asm):02804                  beq   WRLNWCRX   Yep, done
124B 108E0001         (       gshell.asm):02805                  ldy   #1         No, write a CR too
124F 308DFED6         (       gshell.asm):02806                  leax  CRETURN,PC
1253 103F8C           (       gshell.asm):02807                  os9   I$WRITLN
1256 35E0             (       gshell.asm):02808         WRLNWCRX puls  Y,U,PC
                      (       gshell.asm):02809         
1258 3440             (       gshell.asm):02810         WAITPRES pshs  U
125A EE64             (       gshell.asm):02811                  ldu   4,S
125C 3440             (       gshell.asm):02812                  pshs  U
125E 1721A3           (       gshell.asm):02813                  lbsr  ST.RELEA
1261 CC000E           (       gshell.asm):02814                  ldd   #NEWNMSG-PRESSMSG
1264 EDE4             (       gshell.asm):02815                  std   ,S
1266 8E03FB           (       gshell.asm):02816                  ldx   #PRESSMSG
1269 3410             (       gshell.asm):02817                  pshs  X
126B 3440             (       gshell.asm):02818                  pshs  U
126D 172009           (       gshell.asm):02819                  lbsr  I.WRITE
1270 3266             (       gshell.asm):02820                  leas  6,S
1272 170E5F           (       gshell.asm):02821                  lbsr  WAITPSIG
1275 35C0             (       gshell.asm):02822                  puls  U,PC
                      (       gshell.asm):02823         
                      (       gshell.asm):02824         * ReadLn up to 80 chars into [LINEBUFR]
1277 CC0050           (       gshell.asm):02825         RDLN80CH ldd   #80        Max read size
127A 3406             (       gshell.asm):02826                  pshs  d
127C 8E1023           (       gshell.asm):02827                  ldx   #LINEBUFR  Get ptr to read buffer
127F EC64             (       gshell.asm):02828                  ldd   4,S        Get path to read from
1281 3416             (       gshell.asm):02829                  pshs  d,X
1283 171FE5           (       gshell.asm):02830                  lbsr  I.READLN   Read line up to 80 chars (note:includes CR!)
1286 3266             (       gshell.asm):02831                  leas  6,S
1288 C30001           (       gshell.asm):02832                  addd  #1         Add 1 to total of chars read
128B 2705             (       gshell.asm):02833                  beq   RDLN80C0   If was -1 (had error),try reading again
128D 830002           (       gshell.asm):02834                  subd  #2         Just CR?
1290 2605             (       gshell.asm):02835                  bne   RDLN80C1   No, skip ahead
1292 6FA91023         (       gshell.asm):02836         RDLN80C0 clr   LINEBUFR,Y If just one char, NUL instead of CR
1296 39               (       gshell.asm):02837                  rts   
                      (       gshell.asm):02838         
1297 8E1023           (       gshell.asm):02839         RDLN80C1 ldx   #LINEBUFR  Point to input buffer
129A 3410             (       gshell.asm):02840                  pshs  X
129C 308B             (       gshell.asm):02841                  leax  D,X        Point to last char read in buffer
129E 6F84             (       gshell.asm):02842                  clr   ,X         Terminate read string @ CR
12A0 3586             (       gshell.asm):02843                  puls  D,PC       Return with D=ptr to start of read buffer
                      (       gshell.asm):02844         
12A2 3440             (       gshell.asm):02845         BIN2ASCI pshs  U
12A4 CE107B           (       gshell.asm):02846                  ldu   #ASCIITMP  Point to buffer to hold ASCII version of # (reverse order)
12A7 EC64             (       gshell.asm):02847                  ldd   4,S
12A9 2019             (       gshell.asm):02848                  bra   BIN2ASC2
                      (       gshell.asm):02849         
12AB 3406             (       gshell.asm):02850         BIN2ASC1 pshs  d
12AD CC000A           (       gshell.asm):02851                  ldd   #10
12B0 172363           (       gshell.asm):02852                  lbsr  CCMOD
12B3 C30030           (       gshell.asm):02853                  addd  #'0        'ASCII'ize the digit
12B6 E7C0             (       gshell.asm):02854                  stb   ,U+
12B8 EC64             (       gshell.asm):02855                  ldd   4,S
12BA 3406             (       gshell.asm):02856                  pshs  d
12BC CC000A           (       gshell.asm):02857                  ldd   #10
12BF 172397           (       gshell.asm):02858                  lbsr  CCDIV
12C2 ED64             (       gshell.asm):02859                  std   4,S
12C4 10830009         (       gshell.asm):02860         BIN2ASC2 cmpd  #9
12C8 2EE1             (       gshell.asm):02861                  bgt   BIN2ASC1
12CA C30030           (       gshell.asm):02862                  addd  #'0
12CD 8E107B           (       gshell.asm):02863                  ldx   #ASCIITMP
12D0 3410             (       gshell.asm):02864                  pshs  X
12D2 8E1073           (       gshell.asm):02865                  ldx   #ASCIINUM
12D5 2002             (       gshell.asm):02866                  bra   BIN2ASC4
                      (       gshell.asm):02867         
12D7 E6C2             (       gshell.asm):02868         BIN2ASC3 ldb   ,-U
12D9 E780             (       gshell.asm):02869         BIN2ASC4 stb   ,X+
12DB 11A3E4           (       gshell.asm):02870                  cmpu  ,S
12DE 22F7             (       gshell.asm):02871                  bhi   BIN2ASC3
12E0 3262             (       gshell.asm):02872                  leas  2,S
12E2 6F84             (       gshell.asm):02873                  clr   ,X
12E4 8E1073           (       gshell.asm):02874                  ldx   #ASCIINUM
12E7 1F10             (       gshell.asm):02875                  tfr   X,D
12E9 35C0             (       gshell.asm):02876                  puls  U,PC
                      (       gshell.asm):02877         
12EB 3440             (       gshell.asm):02878         LINKLOAD pshs  U
12ED EE64             (       gshell.asm):02879                  ldu   4,S
12EF C604             (       gshell.asm):02880                  ldb   #PTR.SLP   Change ptr to sleep icon
12F1 3416             (       gshell.asm):02881                  pshs  d,X
12F3 8E00CA           (       gshell.asm):02882                  ldx   #GRP.PTR
12F6 DC22             (       gshell.asm):02883                  ldd   WNDWPATH
12F8 3416             (       gshell.asm):02884                  pshs  d,X
12FA 1721D7           (       gshell.asm):02885                  lbsr  GCSET
12FD 171AED           (       gshell.asm):02886                  lbsr  MOUSOFF    Shut mouse off
1300 3266             (       gshell.asm):02887                  leas  6,S
1302 3440             (       gshell.asm):02888                  pshs  U
1304 171E7E           (       gshell.asm):02889                  lbsr  NMLNKLOD   Attempt to link/load module
1307 EDE1             (       gshell.asm):02890                  std   ,S++
1309 2705             (       gshell.asm):02891                  beq   LINKLOA1   Error, deal with it
130B CC0001           (       gshell.asm):02892                  ldd   #1         No error, status=successful
130E 2012             (       gshell.asm):02893                  bra   LINKLOA2
                      (       gshell.asm):02894         
1310 ECA90431         (       gshell.asm):02895         LINKLOA1 ldd   ERRNO,Y    Get error code
1314 ED46             (       gshell.asm):02896                  std   GD.STATS,U Save in forked program status
1316 308C10           (       gshell.asm):02897                  leax  <CANTFORK,PC Tell user we could not fork program
1319 3450             (       gshell.asm):02898                  pshs  X,U
131B 17FE7F           (       gshell.asm):02899                  lbsr  ERRPRINT
131E 3264             (       gshell.asm):02900                  leas  4,S
1320 4F               (       gshell.asm):02901                  clra             Non successful fork
1321 5F               (       gshell.asm):02902                  clrb  
1322 EDE4             (       gshell.asm):02903         LINKLOA2 std   ,S         Save status of fork
1324 170D50           (       gshell.asm):02904                  lbsr  MOUSENOW   Turn mouse back on and return
1327 35C6             (       gshell.asm):02905                  puls  d,U,PC
                      (       gshell.asm):02906         
1329 43616E277420666F (       gshell.asm):02907         CANTFORK fcc   "Can't fork "
     726B20
1334 2200             (       gshell.asm):02908                  fcb   '",NUL
                      (       gshell.asm):02909         
1336 72756E63         (       gshell.asm):02910         RUNCNAME fcc   "runc"
133A 00               (       gshell.asm):02911                  fcb   NUL
                      (       gshell.asm):02912         
133B 72756E62         (       gshell.asm):02913         RUNBNAME fcc   "runb"
133F 00               (       gshell.asm):02914                  fcb   NUL
                      (       gshell.asm):02915         
1340 62617369633039   (       gshell.asm):02916         BAS09NAM fcc   "basic09"
1347 00               (       gshell.asm):02917                  fcb   NUL
                      (       gshell.asm):02918         
                      (       gshell.asm):02919         * Fork program pointed to by GD.* ptr, onto it's proper window (obviously
                      (       gshell.asm):02920         * already set up in GD.INDVC or GD.WPATH earlier). Does language stuff
                      (       gshell.asm):02921         * automatically like SHELL, and mem size stuff
                      (       gshell.asm):02922         * Stack on entry:
                      (       gshell.asm):02923         * 0-1,s = RTS address
                      (       gshell.asm):02924         * 2-3,s = Ptr to GD.* vars
1348 3440             (       gshell.asm):02925         FORKPROC pshs  U          Save U
134A EE64             (       gshell.asm):02926                  ldu   4,S        Get GD.* ptr
134C 3274             (       gshell.asm):02927                  leas  -12,S      Make temp stack
134E 4F               (       gshell.asm):02928                  clra  
134F 5F               (       gshell.asm):02929                  clrb  
1350 ED6A             (       gshell.asm):02930                  std   10,S       Set some things to 0
1352 ED68             (       gshell.asm):02931                  std   8,S
1354 EDE4             (       gshell.asm):02932                  std   ,S
1356 E649             (       gshell.asm):02933                  ldb   GD.MLANG,U Get language type of module to fork
1358 C101             (       gshell.asm):02934                  cmpb  #OBJCT     ML code?
135A 2F72             (       gshell.asm):02935                  ble   SETPRGRM   Yes, go set
135C C102             (       gshell.asm):02936                  cmpb  #ICODE     RUNB required?
135E 270F             (       gshell.asm):02937                  beq   SETRUNB    Yes, set that
1360 C103             (       gshell.asm):02938                  cmpb  #PCODE     Pascal required?
1362 2715             (       gshell.asm):02939                  beq   SETPASCL   Yes, set that
1364 C105             (       gshell.asm):02940                  cmpb  #CBLCODE   COBOL required?
1366 262D             (       gshell.asm):02941                  bne   BADLANG    No, don't have a clue what it is
1368 308CCB           (       gshell.asm):02942                  leax  <RUNCNAME,PC Must be RUNC (whatever that is?)
136B AF6A             (       gshell.asm):02943                  stx   10,S       Save ptr to runtime module name
136D 205A             (       gshell.asm):02944                  bra   SETLANG
                      (       gshell.asm):02945         
136F 308CC9           (       gshell.asm):02946         SETRUNB  leax  <RUNBNAME,PC Set ptr to RUNB module name
1372 AF6A             (       gshell.asm):02947                  stx   10,S
1374 308CC9           (       gshell.asm):02948                  leax  <BAS09NAM,PC 2nd ptr to BASIC09
1377 2008             (       gshell.asm):02949                  bra   SETRUNB1
                      (       gshell.asm):02950         
1379 308C09           (       gshell.asm):02951         SETPASCL leax  <PASCSNAM,PC Set ptr to PASCALS module name
137C AF6A             (       gshell.asm):02952                  stx   10,S
137E 308C0C           (       gshell.asm):02953                  leax  <PASCNNAM,PC 2nd ptr to PASCALN
1381 AF68             (       gshell.asm):02954         SETRUNB1 stx   8,S
1383 2044             (       gshell.asm):02955                  bra   SETLANG
                      (       gshell.asm):02956         
1385 70617363616C73   (       gshell.asm):02957         PASCSNAM fcc   "pascals"
138C 00               (       gshell.asm):02958                  fcb   NUL
                      (       gshell.asm):02959         
138D 70617363616C6E   (       gshell.asm):02960         PASCNNAM fcc   "pascaln"
1394 00               (       gshell.asm):02961                  fcb   NUL
                      (       gshell.asm):02962         
1395 308C0C           (       gshell.asm):02963         BADLANG  leax  <CANTLANG,PC Code type is unknown, notify user that we can
1398 3410             (       gshell.asm):02964                  pshs  X          not run.
139A 17FE68           (       gshell.asm):02965                  lbsr  OLAYPRNT
139D 3262             (       gshell.asm):02966                  leas  2,S
139F 4F               (       gshell.asm):02967                  clra  
13A0 5F               (       gshell.asm):02968                  clrb  
13A1 1600E3           (       gshell.asm):02969                  lbra  BADLANGX
                      (       gshell.asm):02970         
13A4 43616E2774206465 (       gshell.asm):02971         CANTLANG fcc   "Can't determine language"
     7465726D696E6520
     6C616E6775616765
13BC 20666F72206D6F64 (       gshell.asm):02972                  fcc   " for module"
     756C65
13C7 0D00             (       gshell.asm):02973                  fcb   CR,NUL
                      (       gshell.asm):02974         
                      (       gshell.asm):02975         * Entry: 10,s=ptr to runtime module
                      (       gshell.asm):02976         *  X=ptr to 2ndary module (if needed) ex. BASIC09 for RUNB
13C9 CC0101           (       gshell.asm):02977         SETLANG  ldd   #$0101     Module type=Program module, language=ML
13CC ED48             (       gshell.asm):02978                  std   GD.MTYPE,U Save module type&language of primary program to execute
13CE EC6A             (       gshell.asm):02979         SETPRGRM ldd   10,S       Get ptr to name of primary program
13D0 270D             (       gshell.asm):02980                  beq   FORKPRC2   If raw ML module (no runtime package), skip ahead
13D2 ECC4             (       gshell.asm):02981                  ldd   GD.MNAME,U Get ptr to sub-module name (ex. program name for RUNB)
13D4 3406             (       gshell.asm):02982                  pshs  d          Save it
13D6 170180           (       gshell.asm):02983                  lbsr  STPREFIX   Build (into PARMSBFR) program name <space> module name
13D9 3262             (       gshell.asm):02984                  leas  2,S        Eat stack
13DB EC6A             (       gshell.asm):02985                  ldd   10,S       Get ptr to name of primary program
13DD 2002             (       gshell.asm):02986                  bra   FORKPRC3
                      (       gshell.asm):02987         
13DF ECC4             (       gshell.asm):02988         FORKPRC2 ldd   GD.MNAME,U Get ptr to module to run
13E1 ED66             (       gshell.asm):02989         FORKPRC3 std   6,S        Save it
13E3 8E1083           (       gshell.asm):02990                  ldx   #PARMSBFR  Point to temp buffer
13E6 3410             (       gshell.asm):02991                  pshs  X          Save it
13E8 171EE1           (       gshell.asm):02992                  lbsr  STRLEN     Get length of command line to run
13EB 3262             (       gshell.asm):02993                  leas  2,S        Eat stack
13ED ED62             (       gshell.asm):02994                  std   2,S        Save length
13EF 270F             (       gshell.asm):02995                  beq   FORKPRC4   If 0, just put a CR in it
13F1 C3FFFF           (       gshell.asm):02996                  addd  #-1        Dec length by 1 (space on end?)
13F4 8E1083           (       gshell.asm):02997                  ldx   #PARMSBFR  Point to start of command line
13F7 308B             (       gshell.asm):02998                  leax  D,X        Point to end of it
13F9 CC0D00           (       gshell.asm):02999                  ldd   #CR*256    Append a CR/NUL to it
13FC ED84             (       gshell.asm):03000                  std   ,X
13FE 2007             (       gshell.asm):03001                  bra   FORKPRC5
                      (       gshell.asm):03002         
1400 CC0D00           (       gshell.asm):03003         FORKPRC4 ldd   #CR*256    Nothing in command buffer, just put CR/NUL in
1403 EDA91083         (       gshell.asm):03004                  std   PARMSBFR,Y
1407 EC62             (       gshell.asm):03005         FORKPRC5 ldd   2,S        Get length of command line to run
1409 C30001           (       gshell.asm):03006                  addd  #1         bump up by 1 & save it again
140C ED62             (       gshell.asm):03007                  std   2,S
140E 3440             (       gshell.asm):03008                  pshs  U
1410 17018C           (       gshell.asm):03009                  lbsr  NEWSTDIO   Change I/O paths (all 3) to window path in current GD.* ptr
1413 EDE1             (       gshell.asm):03010                  std   ,S++       Were we successful?
1415 2746             (       gshell.asm):03011                  beq   FORKPRC7   No, skip ahead
1417 4F               (       gshell.asm):03012                  clra             Select std IN path as current window (in other words,
1418 5F               (       gshell.asm):03013                  clrb             select GD.* path as new window
1419 3406             (       gshell.asm):03014                  pshs  d
141B 172093           (       gshell.asm):03015                  lbsr  SELECT
141E EC4A             (       gshell.asm):03016                  ldd   GD.MEMSZ,U Get memory size required
1420 EDE4             (       gshell.asm):03017                  std   ,S         Save it
1422 4F               (       gshell.asm):03018                  clra  
1423 5F               (       gshell.asm):03019                  clrb  
1424 3406             (       gshell.asm):03020                  pshs  d
1426 3406             (       gshell.asm):03021                  pshs  d
1428 8E1083           (       gshell.asm):03022                  ldx   #PARMSBFR  Point to parms buffer
142B EC68             (       gshell.asm):03023                  ldd   8,S
142D 3416             (       gshell.asm):03024                  pshs  d,X
142F ECE810           (       gshell.asm):03025                  ldd   16,S
1432 3406             (       gshell.asm):03026                  pshs  d
1434 171E03           (       gshell.asm):03027                  lbsr  F.FORK     Fork the program
1437 EDE810           (       gshell.asm):03028                  std   16,S
143A 2F04             (       gshell.asm):03029                  ble   FORKPR51
143C 326C             (       gshell.asm):03030                  leas  12,S
143E 2014             (       gshell.asm):03031                  bra   FORKPRC6
                      (       gshell.asm):03032         
1440 ECE814           (       gshell.asm):03033         FORKPR51 ldd   20,S
1443 2604             (       gshell.asm):03034                  bne   FORKPR52
1445 326C             (       gshell.asm):03035                  leas  12,S
1447 2014             (       gshell.asm):03036                  bra   FORKPRC7
                      (       gshell.asm):03037         
1449 EDE4             (       gshell.asm):03038         FORKPR52 std   ,S
144B 171DEC           (       gshell.asm):03039                  lbsr  F.FORK
144E 326C             (       gshell.asm):03040                  leas  12,S
1450 ED64             (       gshell.asm):03041                  std   4,S
1452 2F09             (       gshell.asm):03042                  ble   FORKPRC7
                      (       gshell.asm):03043         
1454 EC64             (       gshell.asm):03044         FORKPRC6 ldd   4,S
1456 ED44             (       gshell.asm):03045                  std   GD.PRCID,U
1458 CC0001           (       gshell.asm):03046                  ldd   #1
145B EDE4             (       gshell.asm):03047                  std   ,S
                      (       gshell.asm):03048         
                      (       gshell.asm):03049         * Couldn't change std paths to new window
145D ECC4             (       gshell.asm):03050         FORKPRC7 ldd   GD.MNAME,U Get ptr to module name
145F 3406             (       gshell.asm):03051                  pshs  d          Save it
1461 171D95           (       gshell.asm):03052                  lbsr  F.UNLOAD   Unload the module
1464 3262             (       gshell.asm):03053                  leas  2,S        Eat stack
1466 ECE4             (       gshell.asm):03054                  ldd   ,S         ???
1468 2610             (       gshell.asm):03055                  bne   FORKPRC8   But don't print FORK ERROR if it is<>0
146A ECA90431         (       gshell.asm):03056                  ldd   ERRNO,Y    Get error code
146E ED46             (       gshell.asm):03057                  std   GD.STATS,U Save as last status for forked program
1470 308C18           (       gshell.asm):03058                  leax  <FORKERR,PC Report FORK error in overlay window
1473 3450             (       gshell.asm):03059                  pshs  X,U
1475 17FD25           (       gshell.asm):03060                  lbsr  ERRPRINT
1478 3264             (       gshell.asm):03061                  leas  4,S
147A 6FA91083         (       gshell.asm):03062         FORKPRC8 clr   PARMSBFR,Y NUL the command buffer
147E 3440             (       gshell.asm):03063                  pshs  U
1480 170161           (       gshell.asm):03064                  lbsr  RESTDIO    Restore std I/O paths to normal GSHELL window path
1483 3262             (       gshell.asm):03065                  leas  2,S
1485 ECE4             (       gshell.asm):03066                  ldd   ,S         Get ???
1487 326C             (       gshell.asm):03067         BADLANGX leas  12,S       Eat stack & return
1489 35C0             (       gshell.asm):03068                  puls  U,PC
                      (       gshell.asm):03069         
148B 466F726B20657272 (       gshell.asm):03070         FORKERR  fcc   "Fork error - "
     6F72202D20
1498 2200             (       gshell.asm):03071                  fcb   '",NUL
                      (       gshell.asm):03072         
                      (       gshell.asm):03073         * Call F$Wait. If no child process, returns immediately.
                      (       gshell.asm):03074         * Otherwise, returns with child ID # & child exit status code)
                      (       gshell.asm):03075         * Stack usage (from -6,s):
                      (       gshell.asm):03076         * 0,s = ???
                      (       gshell.asm):03077         * 2,s = Child process ID #
                      (       gshell.asm):03078         * 4,s = Child process signal code
                      (       gshell.asm):03079         * NOTE: IF child is ABORTED (CTRL-E), GSHELL's keyboard buffer is cleared.
                      (       gshell.asm):03080         *  IF child is INTERRUPTED, GSHELL's keyboard buffer is left intact.
149A 3440             (       gshell.asm):03081         HNDLWAIT pshs  U
149C 327A             (       gshell.asm):03082                  leas  -6,S       Temp stack
149E 4F               (       gshell.asm):03083                  clra             Default child status code to 0
149F 5F               (       gshell.asm):03084                  clrb  
14A0 ED64             (       gshell.asm):03085                  std   4,S
14A2 3064             (       gshell.asm):03086         HNDLWAI1 leax  4,S        Point to temp ID/exit status
14A4 3410             (       gshell.asm):03087                  pshs  X          Save ptr for subroutine call
14A6 171D7E           (       gshell.asm):03088                  lbsr  F.WAIT     NOTE: ONLY CALLED FROM HERE! EMBED (6809 &6309)
14A9 3262             (       gshell.asm):03089                  leas  2,S        Eat temp X ptr
14AB ED62             (       gshell.asm):03090                  std   2,S        Save child process' ID #
14AD 270A             (       gshell.asm):03091                  beq   HNDLWAI2   None, eat temp stack & return
14AF 1083FFFF         (       gshell.asm):03092                  cmpd  #-1        Error from F$Wait?
14B3 276E             (       gshell.asm):03093                  beq   HNDLWA10   Yes, return with exit signal=0 (no signal)
14B5 DC1C             (       gshell.asm):03094                  ldd   RECDSGNL   Did get child signal; try local signal
14B7 2705             (       gshell.asm):03095                  beq   HNDLWAI3   None, process child signal
14B9 CC0001           (       gshell.asm):03096         HNDLWAI2 ldd   #S$WAKE    Exit with WAKE signal (flag to redo signal loop)
14BC 206F             (       gshell.asm):03097                  bra   HNDLWA12
                      (       gshell.asm):03098         
                      (       gshell.asm):03099         * Child process has sent us a signal
14BE EC62             (       gshell.asm):03100         HNDLWAI3 ldd   2,S        Get child process ID #
14C0 3406             (       gshell.asm):03101                  pshs  d          Save on stack (silly, unless destructive)
14C2 8D7F             (       gshell.asm):03102                  bsr   GTPRDESC   Get our process descriptor table entry ptr
14C4 1F03             (       gshell.asm):03103                  tfr   D,U        Move to U
14C6 EFE1             (       gshell.asm):03104                  stu   ,S++       Legit?
14C8 275D             (       gshell.asm):03105                  beq   HNDLWA11   No, if signal=0, try WAIT again, else exit
14CA EC64             (       gshell.asm):03106                  ldd   4,S        Get child's signal code
14CC EDA90431         (       gshell.asm):03107                  std   ERRNO,Y    Save as error
14D0 ED46             (       gshell.asm):03108                  std   GD.STATS,U Save as last status for forked program
14D2 273B             (       gshell.asm):03109                  beq   HNDLWAI8   If child's signal was 0, skip ahead
14D4 C102             (       gshell.asm):03110                  cmpb  #S$ABORT   Abort signal?
14D6 2704             (       gshell.asm):03111                  beq   HNDLWAI4   yes, go handle
14D8 C103             (       gshell.asm):03112                  cmpb  #S$INTRPT  Interrupt signal?
14DA 2629             (       gshell.asm):03113                  bne   HNDLWAI7   Yes, go handle
                      (       gshell.asm):03114         * Child ABORTed (CTRL-E)
14DC 5F               (       gshell.asm):03115         HNDLWAI4 clrb             D=0
14DD 3406             (       gshell.asm):03116                  pshs  d
14DF EC4C             (       gshell.asm):03117                  ldd   GD.WPATH,U Get programs window path
14E1 3406             (       gshell.asm):03118                  pshs  d
14E3 171835           (       gshell.asm):03119                  lbsr  PAUSECHO   Shut pause & echo off for that window
14E6 3264             (       gshell.asm):03120                  leas  4,S        Eat temp stack
14E8 200E             (       gshell.asm):03121                  bra   HNDLWAI6
                      (       gshell.asm):03122         
                      (       gshell.asm):03123         * Flush out keyboard buffer for main GSHELL window
14EA 3406             (       gshell.asm):03124         HNDLWAI5 pshs  d          Save # of chars in main window buffer
14EC 8E0F23           (       gshell.asm):03125                  ldx   #MULTIBFR  Point to temp buffer area
14EF DC22             (       gshell.asm):03126                  ldd   WNDWPATH   Get window path for GSHELL
14F1 3416             (       gshell.asm):03127                  pshs  d,X
14F3 171D5F           (       gshell.asm):03128                  lbsr  I.READ     Read (eat/flush) all chars in keyboard buffer for GSHELL
14F6 3266             (       gshell.asm):03129                  leas  6,S        Eat temp stack
14F8 DC22             (       gshell.asm):03130         HNDLWAI6 ldd   WNDWPATH   Get path to GSHELL window
14FA 3406             (       gshell.asm):03131                  pshs  d
14FC 171EC4           (       gshell.asm):03132                  lbsr  GT.READY   Check if any data ready in keyboard buffer
14FF 3262             (       gshell.asm):03133                  leas  2,S
1501 EDE4             (       gshell.asm):03134                  std   ,S         Save # chars waiting
1503 2EE5             (       gshell.asm):03135                  bgt   HNDLWAI5   There are some, process
                      (       gshell.asm):03136         * Child INTERRUPTed (CTRL-C)
1505 308C29           (       gshell.asm):03137         HNDLWAI7 leax  <PROCERR,PC Point to 'process error' msg
1508 3450             (       gshell.asm):03138                  pshs  X,U
150A 17FC90           (       gshell.asm):03139                  lbsr  ERRPRINT   Print error to screen
150D 3264             (       gshell.asm):03140                  leas  4,S
150F EC4E             (       gshell.asm):03141         HNDLWAI8 ldd   GD.DW.OW,U Child running on overlay window in main GSHELL scrn?
1511 10830001         (       gshell.asm):03142                  cmpd  #1
1515 2707             (       gshell.asm):03143                  beq   HNDLWAI9   Yes, Skip ahead
1517 3440             (       gshell.asm):03144                  pshs  U          No, save ptr to Process dsc. entry
1519 17F111           (       gshell.asm):03145                  lbsr  KILPDESC   Remove process descriptor out of table, kill device window
151C 3262             (       gshell.asm):03146                  leas  2,S
151E 11A36A           (       gshell.asm):03147         HNDLWAI9 cmpu  10,S       Current process desc. entry ptr same as ???
1521 2604             (       gshell.asm):03148                  bne   HNDLWA11
1523 4F               (       gshell.asm):03149         HNDLWA10 clra             Return with D=0 (no signal)
1524 5F               (       gshell.asm):03150                  clrb  
1525 2006             (       gshell.asm):03151                  bra   HNDLWA12
                      (       gshell.asm):03152         
                      (       gshell.asm):03153         * If signal received not for any child of ours (done directly from GSHELL)
                      (       gshell.asm):03154         *   ,exit with D=0, else redo WAIT and try again (could this be 'infinite'
                      (       gshell.asm):03155         * loop bug where sometimes just auto-follow mouse works, but nothing else?
1527 EC64             (       gshell.asm):03156         HNDLWA11 ldd   4,S        Get child's signal code
1529 1027FF75         (       gshell.asm):03157                  lbeq  HNDLWAI1   If none, redo WAIT call & try again
152D 3266             (       gshell.asm):03158         HNDLWA12 leas  6,S        Eat temp stack & return
152F 35C0             (       gshell.asm):03159                  puls  U,PC
                      (       gshell.asm):03160         
1531 50726F6365737320 (       gshell.asm):03161         PROCERR  fcc   "Process error - "
     6572726F72202D20
1541 2200             (       gshell.asm):03162                  fcb   '",NUL
                      (       gshell.asm):03163         
                      (       gshell.asm):03164         * Exit: D=0 if no child processes in table
                      (       gshell.asm):03165         *       D=ptr to process descriptor table entry
1543 9E38             (       gshell.asm):03166         GTPRDESC ldx   PTBLSPTR   Get ptr to start of process descriptor table
1545 270F             (       gshell.asm):03167                  beq   GTPRDES3   None, exit
1547 EC04             (       gshell.asm):03168         GTPRDES1 ldd   GD.PRCID,X Get process id # for current table entry
1549 10A362           (       gshell.asm):03169                  cmpd  2,S        This the one we are looking for?
154C 2603             (       gshell.asm):03170                  bne   GTPRDES2   No, skip to next one
154E 1F10             (       gshell.asm):03171                  tfr   X,D        Exit with D=process table entry ptr
1550 39               (       gshell.asm):03172                  rts   
                      (       gshell.asm):03173         
1551 AE881A           (       gshell.asm):03174         GTPRDES2 ldx   GD.LINK,X  Get ptr to next process in table
1554 26F1             (       gshell.asm):03175                  bne   GTPRDES1   got one, check it
1556 4F               (       gshell.asm):03176         GTPRDES3 clra             End of table, exit with D=0
1557 5F               (       gshell.asm):03177                  clrb  
1558 39               (       gshell.asm):03178                  rts   
                      (       gshell.asm):03179         
                      (       gshell.asm):03180         * Add a string prefix to the current string
                      (       gshell.asm):03181         * Entry: 0-1,s = RTS address
                      (       gshell.asm):03182         *        2-3,s = String that we are inserting in front of
1559 3440             (       gshell.asm):03183         STPREFIX pshs  U          Preserve U
155B EC64             (       gshell.asm):03184                  ldd   4,S        Get ptr to string we are inserting in front of
155D 3436             (       gshell.asm):03185                  pshs  d,X,Y      Save it & regs
155F 171D6A           (       gshell.asm):03186                  lbsr  STRLEN     Get length of string we are inserting in front of
                      (       gshell.asm):03187         * NOTE: WHEN TFM'ING BELOW, DELETE ADDD #1
1562 C30001           (       gshell.asm):03188                  addd  #1
1565 ED64             (       gshell.asm):03189                  std   4,S        Save length of string+1
1567 CE1083           (       gshell.asm):03190                  ldu   #PARMSBFR  Point to temp buffer
156A EFE4             (       gshell.asm):03191                  stu   ,S         Save ptr
156C 171D5D           (       gshell.asm):03192                  lbsr  STRLEN     Get length of string in temp buffer
156F 3262             (       gshell.asm):03193                  leas  2,S        Eat stack
                      (       gshell.asm):03194         * WHEN TFMING BELOW, DELETE INCB
1571 5C               (       gshell.asm):03195                  incb             Bump length up by 1
                      (       gshell.asm):03196         * 6309
                      (       gshell.asm):03197         * tfr d,w  Save length
                      (       gshell.asm):03198         * addr w,u Point to end of string+1
                      (       gshell.asm):03199         * DELETE LDA 1,S BELOW
                      (       gshell.asm):03200         
1572 EDE4             (       gshell.asm):03201                  std   ,S         Save it
1574 33CB             (       gshell.asm):03202                  leau  D,U        Point to end of string+1
1576 1F31             (       gshell.asm):03203                  tfr   U,X        Save ptr in X
1578 EC62             (       gshell.asm):03204                  ldd   2,S        Get length of string we are inserting in front of
157A 33CB             (       gshell.asm):03205                  leau  D,U        Calculate end ptr of two strings together
157C A661             (       gshell.asm):03206                  lda   1,S        Get # of bytes to move (size of inserted string)
157E 2004             (       gshell.asm):03207                  bra   STPREFX2
                      (       gshell.asm):03208         
                      (       gshell.asm):03209         * 6309 - DELETE ABOVE BRA STPREFX2
                      (       gshell.asm):03210         * NOTE THAT DELETING INCB & ADDD #1 ABOVE IS BECAUSE TFM IS _POST_ DECREMENT,
                      (       gshell.asm):03211         *   WHILE ORIGINAL ,-X IS _PRE_DECREMENT
                      (       gshell.asm):03212         * NOTE: 6309 ONLY: CHANGE TO TFM
                      (       gshell.asm):03213         *  tfm x-,u-
                      (       gshell.asm):03214         * Copy string we are inserting in front of further ahead in buffer to make
                      (       gshell.asm):03215         *   room for inserted string
1580 E682             (       gshell.asm):03216         STPREFX1 ldb   ,-X        Get char from 1st string
1582 E7C2             (       gshell.asm):03217                  stb   ,-U        Append in 2nd
1584 4A               (       gshell.asm):03218         STPREFX2 deca             Dec # bytes left
1585 2CF9             (       gshell.asm):03219                  bge   STPREFX1   Still some left continue copying
1587 AE68             (       gshell.asm):03220                  ldx   8,S        Get ptr to another string
1589 CE1083           (       gshell.asm):03221                  ldu   #PARMSBFR  Point to start of temp buffer
158C 2004             (       gshell.asm):03222                  bra   STPREFX4
                      (       gshell.asm):03223         
158E E680             (       gshell.asm):03224         STPREFX3 ldb   ,X+        Copy char from string to temp buffer
1590 E7C0             (       gshell.asm):03225                  stb   ,U+
1592 E684             (       gshell.asm):03226         STPREFX4 ldb   ,X         Get char from string
1594 26F8             (       gshell.asm):03227                  bne   STPREFX3   Not end of string, copy character
1596 CC0020           (       gshell.asm):03228                  ldd   #SPACE     A=0, B=Space char
1599 E7C4             (       gshell.asm):03229                  stb   ,U         Add space char
159B 3264             (       gshell.asm):03230                  leas  4,S        Eat stack & return
159D 35C0             (       gshell.asm):03231                  puls  U,PC
                      (       gshell.asm):03232         
                      (       gshell.asm):03233         * Change all 3 standard I/O paths to path pointed to by current program
                      (       gshell.asm):03234         *   table entry (GD.*) (or WNDWPATH if GD.WPATH is negative & there is no
                      (       gshell.asm):03235         *   ptr to a pathname in GD.INDVC)
                      (       gshell.asm):03236         * Entry: 0-1,s = RTS address
                      (       gshell.asm):03237         *        2-3,s = Ptr to current entry in GD.* table
159F 3440             (       gshell.asm):03238         NEWSTDIO pshs  U
15A1 EE64             (       gshell.asm):03239                  ldu   4,S        Get GD.* ptr
15A3 A64D             (       gshell.asm):03240                  lda   GD.WPATH+1,U Get path # to window program is/will be running on.
15A5 2E02             (       gshell.asm):03241                  bgt   NEWSTDI1   If positive value, skip ahead
15A7 9623             (       gshell.asm):03242                  lda   WNDWPATH+1 If negative, use GSHELL window path
15A9 3402             (       gshell.asm):03243         NEWSTDI1 pshs  A          Save new window path #
15AB 4F               (       gshell.asm):03244                  clra             Close current input/output/error paths
15AC 103F8F           (       gshell.asm):03245                  os9   I$CLOSE
15AF 4C               (       gshell.asm):03246                  inca  
15B0 103F8F           (       gshell.asm):03247                  os9   I$CLOSE
15B3 4C               (       gshell.asm):03248                  inca  
15B4 103F8F           (       gshell.asm):03249                  os9   I$CLOSE
15B7 AE42             (       gshell.asm):03250                  ldx   GD.INDVC,U Get ptr to new window's path NAME
15B9 2707             (       gshell.asm):03251                  beq   NEWSTDI2   None, use path # on stack
15BB 8601             (       gshell.asm):03252                  lda   #READ.     There is a path name, OPEN a READ path to it
15BD 103F84           (       gshell.asm):03253                  os9   I$OPEN     & use it's path # for new std i/o paths
15C0 2005             (       gshell.asm):03254                  bra   NEWSTDI3
                      (       gshell.asm):03255         
15C2 A6E4             (       gshell.asm):03256         NEWSTDI2 lda   ,S         Get new window's path # from stack
15C4 103F82           (       gshell.asm):03257                  os9   I$DUP      Duplicate new path as std in
15C7 2515             (       gshell.asm):03258         NEWSTDI3 bcs   NEWSTDI4
15C9 A6E4             (       gshell.asm):03259                  lda   ,S         and std out
15CB 103F82           (       gshell.asm):03260                  os9   I$DUP
15CE 250E             (       gshell.asm):03261                  bcs   NEWSTDI4
15D0 A6E4             (       gshell.asm):03262                  lda   ,S         and std err
15D2 103F82           (       gshell.asm):03263                  os9   I$DUP
15D5 2507             (       gshell.asm):03264                  bcs   NEWSTDI4
15D7 3502             (       gshell.asm):03265                  puls  A          eat copy of new path #
15D9 CC0001           (       gshell.asm):03266                  ldd   #1         D=1 if new std i/o paths created successfully
15DC 35C0             (       gshell.asm):03267                  puls  U,PC
                      (       gshell.asm):03268         
15DE 3261             (       gshell.asm):03269         NEWSTDI4 leas  1,S        Eat stack
15E0 4F               (       gshell.asm):03270                  clra             Exit with D=0 if could not create new paths
15E1 5F               (       gshell.asm):03271                  clrb  
15E2 35C0             (       gshell.asm):03272                  puls  U,PC
                      (       gshell.asm):03273         
                      (       gshell.asm):03274         * Restore std I/O paths to normal GSHELL path
15E4 4F               (       gshell.asm):03275         RESTDIO  clra             Close std in/out/error paths
15E5 103F8F           (       gshell.asm):03276                  os9   I$CLOSE
15E8 4C               (       gshell.asm):03277                  inca  
15E9 103F8F           (       gshell.asm):03278                  os9   I$CLOSE
15EC 4C               (       gshell.asm):03279                  inca  
15ED 103F8F           (       gshell.asm):03280                  os9   I$CLOSE
15F0 9623             (       gshell.asm):03281                  lda   WNDWPATH+1 Duplicate normal GSHELL window paths to std i/o
15F2 103F82           (       gshell.asm):03282                  os9   I$DUP
15F5 9623             (       gshell.asm):03283                  lda   WNDWPATH+1
15F7 103F82           (       gshell.asm):03284                  os9   I$DUP
15FA 9623             (       gshell.asm):03285                  lda   WNDWPATH+1
15FC 103F82           (       gshell.asm):03286                  os9   I$DUP
15FF 39               (       gshell.asm):03287                  rts   
                      (       gshell.asm):03288         
1600 3440             (       gshell.asm):03289         EXTFITBL pshs  U
1602 EC64             (       gshell.asm):03290                  ldd   4,S
1604 3406             (       gshell.asm):03291                  pshs  d
1606 171CC3           (       gshell.asm):03292                  lbsr  STRLEN
1609 C3000F           (       gshell.asm):03293                  addd  #FL.SIZE+1
160C EDE4             (       gshell.asm):03294                  std   ,S
160E 17FAF4           (       gshell.asm):03295                  lbsr  MEMSPACE
1611 3262             (       gshell.asm):03296                  leas  2,S
1613 1F03             (       gshell.asm):03297                  tfr   D,U
1615 EF7E             (       gshell.asm):03298                  stu   -2,S
1617 2715             (       gshell.asm):03299                  beq   EXTFITB1
1619 304E             (       gshell.asm):03300                  leax  FL.SIZE,U
161B AF4C             (       gshell.asm):03301                  stx   FL.FNAME,U
161D EC64             (       gshell.asm):03302                  ldd   4,S
161F 3406             (       gshell.asm):03303                  pshs  d
1621 3410             (       gshell.asm):03304                  pshs  X
1623 171CBE           (       gshell.asm):03305                  lbsr  STRCPY
1626 3264             (       gshell.asm):03306                  leas  4,S
1628 0C2F             (       gshell.asm):03307                  inc   FILESCTR+1
162A 2602             (       gshell.asm):03308                  bne   EXTFITB1
162C 0C2E             (       gshell.asm):03309                  inc   FILESCTR
162E 1F30             (       gshell.asm):03310         EXTFITB1 tfr   U,D
1630 35C0             (       gshell.asm):03311                  puls  U,PC
                      (       gshell.asm):03312         
1632 EC62             (       gshell.asm):03313         UPDTIPTR ldd   2,S
1634 3406             (       gshell.asm):03314                  pshs  d
1636 8DC8             (       gshell.asm):03315                  bsr   EXTFITBL
1638 EDE4             (       gshell.asm):03316                  std   ,S
163A 2712             (       gshell.asm):03317                  beq   UPDTIPT1
163C EDB832           (       gshell.asm):03318                  std   [FTBLNEXT,Y]
163F 1F01             (       gshell.asm):03319                  tfr   D,X
1641 4F               (       gshell.asm):03320                  clra  
1642 5F               (       gshell.asm):03321                  clrb  
1643 ED0A             (       gshell.asm):03322                  std   FL.LINK,X
1645 ED08             (       gshell.asm):03323                  std   FL.ICONO,X
1647 1700F6           (       gshell.asm):03324                  lbsr  ICNXYSET
164A 300A             (       gshell.asm):03325                  leax  FL.LINK,X
164C 9F32             (       gshell.asm):03326                  stx   FTBLNEXT
164E 3586             (       gshell.asm):03327         UPDTIPT1 puls  d,PC
                      (       gshell.asm):03328         
1650 EC62             (       gshell.asm):03329         ADDFICON ldd   2,S
1652 3406             (       gshell.asm):03330                  pshs  d
1654 8DDC             (       gshell.asm):03331                  bsr   UPDTIPTR
1656 EDE4             (       gshell.asm):03332                  std   ,S
1658 2712             (       gshell.asm):03333                  beq   ADDFICO3
165A E667             (       gshell.asm):03334                  ldb   7,S
165C C106             (       gshell.asm):03335                  cmpb  #IC.AIF.F
165E 2704             (       gshell.asm):03336                  beq   ADDFICO1
1660 C107             (       gshell.asm):03337                  cmpb  #IC.F.XXX
1662 2602             (       gshell.asm):03338                  bne   ADDFICO2
1664 8D17             (       gshell.asm):03339         ADDFICO1 bsr   ISIT.XXX
1666 AEE4             (       gshell.asm):03340         ADDFICO2 ldx   ,S
1668 E708             (       gshell.asm):03341                  stb   FL.ICONO,X
166A 8D02             (       gshell.asm):03342                  bsr   UPDTNSCR
166C 3586             (       gshell.asm):03343         ADDFICO3 puls  d,PC
                      (       gshell.asm):03344         
166E DC2E             (       gshell.asm):03345         UPDTNSCR ldd   FILESCTR
1670 830001           (       gshell.asm):03346                  subd  #1
1673 3406             (       gshell.asm):03347                  pshs  d
1675 DC1E             (       gshell.asm):03348                  ldd   MAXICONS
1677 171FDF           (       gshell.asm):03349                  lbsr  CCDIV
167A DD2A             (       gshell.asm):03350                  std   NSCREENS
167C 39               (       gshell.asm):03351                  rts   
                      (       gshell.asm):03352         
167D 3440             (       gshell.asm):03353         ISIT.XXX pshs  U
167F EE64             (       gshell.asm):03354                  ldu   4,S
1681 EC4C             (       gshell.asm):03355                  ldd   FL.FNAME,U
1683 3406             (       gshell.asm):03356                  pshs  d
1685 17F972           (       gshell.asm):03357                  lbsr  FIND.XXX
1688 EDE1             (       gshell.asm):03358                  std   ,S++
168A 270F             (       gshell.asm):03359                  beq   ISITXXX1
168C 3406             (       gshell.asm):03360                  pshs  d
168E 3440             (       gshell.asm):03361                  pshs  U
1690 17F7BB           (       gshell.asm):03362                  lbsr  FILE.XXX
1693 3264             (       gshell.asm):03363                  leas  4,S
1695 ED7E             (       gshell.asm):03364                  std   -2,S
1697 2702             (       gshell.asm):03365                  beq   ISITXXX1
1699 35C0             (       gshell.asm):03366                  puls  U,PC
                      (       gshell.asm):03367         
169B 5C               (       gshell.asm):03368         ISITXXX1 incb  
169C 35C0             (       gshell.asm):03369                  puls  U,PC
                      (       gshell.asm):03370         
169E 3440             (       gshell.asm):03371         RPLFICON pshs  U
16A0 EC64             (       gshell.asm):03372                  ldd   6-2,S
16A2 3416             (       gshell.asm):03373                  pshs  d,X
16A4 8D6D             (       gshell.asm):03374                  bsr   SRCHFTBL
16A6 ED62             (       gshell.asm):03375                  std   2,S
16A8 EC6A             (       gshell.asm):03376                  ldd   8+2,S
16AA EDE4             (       gshell.asm):03377                  std   ,S
16AC 17FF51           (       gshell.asm):03378                  lbsr  EXTFITBL
16AF 1F03             (       gshell.asm):03379                  tfr   D,U
16B1 CC000C           (       gshell.asm):03380                  ldd   #FL.FNAME
16B4 EDE4             (       gshell.asm):03381                  std   ,S
16B6 EC68             (       gshell.asm):03382                  ldd   8,S
16B8 3406             (       gshell.asm):03383                  pshs  d
16BA 3440             (       gshell.asm):03384                  pshs  U
16BC 171C9C           (       gshell.asm):03385                  lbsr  STRNCPY
16BF 3266             (       gshell.asm):03386                  leas  6,S
16C1 AE66             (       gshell.asm):03387                  ldx   6,S
16C3 9C2C             (       gshell.asm):03388                  cmpx  STRTICON
16C5 2602             (       gshell.asm):03389                  bne   RPLFICOX
16C7 DF2C             (       gshell.asm):03390                  stu   STRTICON
16C9 AE0A             (       gshell.asm):03391         RPLFICOX ldx   FL.LINK,X
16CB 2604             (       gshell.asm):03392                  bne   RPLFICO1
16CD 304A             (       gshell.asm):03393                  leax  FL.LINK,U
16CF 9F32             (       gshell.asm):03394                  stx   FTBLNEXT
16D1 AEE4             (       gshell.asm):03395         RPLFICO1 ldx   ,S
16D3 2604             (       gshell.asm):03396                  bne   RPLFICO2
16D5 DF30             (       gshell.asm):03397                  stu   FTBLSPTR
16D7 2002             (       gshell.asm):03398                  bra   RPLFICO3
                      (       gshell.asm):03399         
16D9 EF0A             (       gshell.asm):03400         RPLFICO2 stu   FL.LINK,X
16DB EC66             (       gshell.asm):03401         RPLFICO3 ldd   6,S
16DD 3406             (       gshell.asm):03402                  pshs  d
16DF 171A35           (       gshell.asm):03403                  lbsr  FREE
16E2 DC2E             (       gshell.asm):03404                  ldd   FILESCTR
16E4 830001           (       gshell.asm):03405                  subd  #1         NOTE: 6309 DECD
16E7 DD2E             (       gshell.asm):03406                  std   FILESCTR
16E9 8D83             (       gshell.asm):03407                  bsr   UPDTNSCR
16EB 1F30             (       gshell.asm):03408                  tfr   U,D
16ED 3264             (       gshell.asm):03409                  leas  4,S
16EF 35C0             (       gshell.asm):03410                  puls  U,PC
                      (       gshell.asm):03411         
16F1 3440             (       gshell.asm):03412         RMVFICON pshs  U
16F3 AE64             (       gshell.asm):03413                  ldx   4,S
16F5 EE0A             (       gshell.asm):03414                  ldu   FL.LINK,X
16F7 3410             (       gshell.asm):03415                  pshs  X
16F9 8D18             (       gshell.asm):03416                  bsr   SRCHFTBL
16FB EDE4             (       gshell.asm):03417                  std   ,S
16FD EF7E             (       gshell.asm):03418                  stu   -2,S
16FF 26D0             (       gshell.asm):03419                  bne   RPLFICO1
1701 ECE4             (       gshell.asm):03420                  ldd   ,S
1703 2607             (       gshell.asm):03421                  bne   RMVFICO1
1705 30A830           (       gshell.asm):03422                  leax  <FTBLSPTR,Y
1708 9F32             (       gshell.asm):03423                  stx   FTBLNEXT
170A 20C5             (       gshell.asm):03424                  bra   RPLFICO1
                      (       gshell.asm):03425         
170C C3000A           (       gshell.asm):03426         RMVFICO1 addd  #FL.LINK
170F DD32             (       gshell.asm):03427                  std   FTBLNEXT
1711 20BE             (       gshell.asm):03428                  bra   RPLFICO1
                      (       gshell.asm):03429         
1713 4F               (       gshell.asm):03430         SRCHFTBL clra  
1714 5F               (       gshell.asm):03431                  clrb  
1715 3406             (       gshell.asm):03432                  pshs  d
1717 9E30             (       gshell.asm):03433                  ldx   FTBLSPTR
1719 AC64             (       gshell.asm):03434         SRCHFTB1 cmpx  4,S
171B 2602             (       gshell.asm):03435                  bne   SRCHFTB2
171D 3586             (       gshell.asm):03436                  puls  d,PC
                      (       gshell.asm):03437         
171F AFE4             (       gshell.asm):03438         SRCHFTB2 stx   ,S
1721 AE0A             (       gshell.asm):03439                  ldx   FL.LINK,X
1723 26F4             (       gshell.asm):03440                  bne   SRCHFTB1
1725 4F               (       gshell.asm):03441                  clra  
1726 5F               (       gshell.asm):03442                  clrb  
1727 39               (       gshell.asm):03443                  rts   
                      (       gshell.asm):03444         
1728 3446             (       gshell.asm):03445         KILLFTBL pshs  d,U
172A DE30             (       gshell.asm):03446                  ldu   FTBLSPTR
172C 2005             (       gshell.asm):03447                  bra   KILLFTB2
                      (       gshell.asm):03448         
172E EE4A             (       gshell.asm):03449         KILLFTB1 ldu   FL.LINK,U
1730 1719E4           (       gshell.asm):03450                  lbsr  FREE
1733 EFE4             (       gshell.asm):03451         KILLFTB2 stu   ,S
1735 26F7             (       gshell.asm):03452                  bne   KILLFTB1
1737 30A830           (       gshell.asm):03453                  leax  <FTBLSPTR,Y
173A EF84             (       gshell.asm):03454                  stu   ,X
173C 9F32             (       gshell.asm):03455                  stx   FTBLNEXT
173E 35C6             (       gshell.asm):03456                  puls  d,U,PC
                      (       gshell.asm):03457         
                      (       gshell.asm):03458         * Update file icon table position entry, as well as next icon position on
                      (       gshell.asm):03459         * screen.
                      (       gshell.asm):03460         * Entry: 0-1,s = RTS address
                      (       gshell.asm):03461         *        2-3,s = Ptr to current file table (FL.*) entry
1740 3440             (       gshell.asm):03462         ICNXYSET pshs  U
1742 EE64             (       gshell.asm):03463                  ldu   4,S        Get ptr to current file table entry
1744 DC3D             (       gshell.asm):03464                  ldd   NEXTXPOS   Get next X position for file icon on screen
1746 EDC4             (       gshell.asm):03465                  std   FL.XSTRT,U Save as X start for file table entry
1748 C30018           (       gshell.asm):03466                  addd  #24        Add 24 pixels (Width of icon)
174B 0D5D             (       gshell.asm):03467                  tst   WD48FLAG   Using wide 80 column screen?
174D 2703             (       gshell.asm):03468                  beq   ICNXYSE2   No, skip ahead
174F C30018           (       gshell.asm):03469                  addd  #24        Yes, add another 24 pixels (48 pixels for wide)
1752 ED44             (       gshell.asm):03470         ICNXYSE2 std   FL.XEND,U  Save as X end for file table entry
1754 DC3F             (       gshell.asm):03471                  ldd   NEXTYPOS   Get next Y position
1756 ED42             (       gshell.asm):03472                  std   FL.YSTRT,U Save as Y start for file table entry
1758 C30018           (       gshell.asm):03473                  addd  #24        Add 24
175B ED46             (       gshell.asm):03474                  std   FL.YEND,U  Save Y end for file table entry
175D DC3D             (       gshell.asm):03475                  ldd   NEXTXPOS   Get next X start pos again
175F D303             (       gshell.asm):03476                  addd  ICONCOLW   Add icon column width (including spacing)
1761 DD3D             (       gshell.asm):03477                  std   NEXTXPOS   Save as new next X pos
1763 3406             (       gshell.asm):03478                  pshs  d          * NOTE: 6309 SUBR
1765 DC19             (       gshell.asm):03479                  ldd   PIXELSWD   Get GSHELL window width
1767 A3E1             (       gshell.asm):03480                  subd  ,S++
1769 10830018         (       gshell.asm):03481                  cmpd  #24        Is next icon going to be past right window edge?
176D 2C13             (       gshell.asm):03482                  bge   ICNXYSE1   No, skip ahead
176F DC17             (       gshell.asm):03483                  ldd   STRTXPOS   Yes, reset next X pos to start X pos (left side)
1771 DD3D             (       gshell.asm):03484                  std   NEXTXPOS
1773 DC3F             (       gshell.asm):03485                  ldd   NEXTYPOS   Bump Y pos up too by icon row height
1775 D309             (       gshell.asm):03486                  addd  ICONROWH
1777 DD3F             (       gshell.asm):03487                  std   NEXTYPOS
1779 109307           (       gshell.asm):03488                  cmpd  ICONYMAX   Are we passed the bottom of the GSHELL window too?
177C 2F04             (       gshell.asm):03489                  ble   ICNXYSE1   No, skip ahead
177E DC05             (       gshell.asm):03490                  ldd   STRTYPOS   Yes, reset next Y pos as start Y pos (top side)
1780 DD3F             (       gshell.asm):03491                  std   NEXTYPOS
1782 35C0             (       gshell.asm):03492         ICNXYSE1 puls  U,PC
                      (       gshell.asm):03493         
1784 8D0F             (       gshell.asm):03494         UPDFITBL bsr   RSTXYPTR   Reset X/Y positions of next icon to upper left corner
1786 9E30             (       gshell.asm):03495                  ldx   FTBLSPTR   Get ptr to start of file table
1788 2008             (       gshell.asm):03496                  bra   UPDFITB2   Update table icon positions again
                      (       gshell.asm):03497         
178A 3410             (       gshell.asm):03498         UPDFITB1 pshs  X          Save file table entry ptr
178C 8DB2             (       gshell.asm):03499                  bsr   ICNXYSET   Set X/Y positions of file icon
178E 3262             (       gshell.asm):03500                  leas  2,S
1790 AE0A             (       gshell.asm):03501                  ldx   FL.LINK,X  Get ptr to next file table entry
1792 26F6             (       gshell.asm):03502         UPDFITB2 bne   UPDFITB1   There is one, go fix it's coords
1794 39               (       gshell.asm):03503                  rts              Done them all, return
                      (       gshell.asm):03504         
                      (       gshell.asm):03505         * Reset next positions for icons to upper left corner
1795 DC17             (       gshell.asm):03506         RSTXYPTR ldd   STRTXPOS
1797 DD3D             (       gshell.asm):03507                  std   NEXTXPOS
1799 DC05             (       gshell.asm):03508                  ldd   STRTYPOS
179B DD3F             (       gshell.asm):03509                  std   NEXTYPOS
179D 39               (       gshell.asm):03510                  rts   
                      (       gshell.asm):03511         
                      (       gshell.asm):03512         * FILE menu - Sort option
179E 1709FD           (       gshell.asm):03513         FLSORT   lbsr  SUREBOX6
17A1 ED7E             (       gshell.asm):03514                  std   -2,S
17A3 2715             (       gshell.asm):03515                  beq   FLSORT1
                      (       gshell.asm):03516                  IFNE  H6309
                      (       gshell.asm):03517                  clrd  
                      (       gshell.asm):03518                  ELSE
17A5 4F               (       gshell.asm):03519                  clra
17A6 5F               (       gshell.asm):03520                  clrb
                      (       gshell.asm):03521                  ENDC
17A7 3406             (       gshell.asm):03522                  pshs  d
17A9 3406             (       gshell.asm):03523                  pshs  d          No parameter for program
17AB 3406             (       gshell.asm):03524                  pshs  d          No overlay window
17AD 308C0D           (       gshell.asm):03525                  leax  <GSORTNAM,PC Save primary module name ptr
17B0 3410             (       gshell.asm):03526                  pshs  X
17B2 170863           (       gshell.asm):03527                  lbsr  EXECPRGM   Execute GSORT without overlay window (does it's own)
17B5 3268             (       gshell.asm):03528                  leas  8,S
17B7 17EF85           (       gshell.asm):03529                  lbsr  DONEWDIR
17BA 1600EC           (       gshell.asm):03530         FLSORT1  lbra  FILSEXIT
                      (       gshell.asm):03531         
17BD 67736F7274       (       gshell.asm):03532         GSORTNAM fcc   "gsort"
17C2 00               (       gshell.asm):03533                  fcb   NUL
                      (       gshell.asm):03534         
17C3 64656C646972     (       gshell.asm):03535         DELDIRNM fcc   "deldir"
17C9 00               (       gshell.asm):03536                  fcb   NUL
                      (       gshell.asm):03537         
17CA 43616E2774206465 (       gshell.asm):03538         CANTDELT fcc   "Can't delete "
     6C65746520
17D7 2200             (       gshell.asm):03539                  fcb   '",NUL
                      (       gshell.asm):03540         
                      (       gshell.asm):03541         * FILE menu, Delete option (Trash entry a little further in. NOTE: Use this
                      (       gshell.asm):03542         *  as the basis for the PRINT option)
17D9 1709C2           (       gshell.asm):03543         FLDELETE lbsr  SUREBOX6   Ask user if he/she is sure they want to delete
17DC ED7E             (       gshell.asm):03544                  std   -2,S
17DE 102700C7         (       gshell.asm):03545                  lbeq  FILSEXIT   Said no, don't delete
17E2 E648             (       gshell.asm):03546         FLTRASH  ldb   FL.ICONO,U Get icon buffer number for file to delete
17E4 C102             (       gshell.asm):03547                  cmpb  #IC.FOLDR  Is it a folder (directory)?
17E6 2617             (       gshell.asm):03548                  bne   NOTADIR    No, skip ahead
17E8 4F               (       gshell.asm):03549                  clra             Call DELDIR to delete a directory
17E9 5F               (       gshell.asm):03550                  clrb  
17EA 3406             (       gshell.asm):03551                  pshs  d
17EC AE4C             (       gshell.asm):03552                  ldx   FL.FNAME,U
17EE 5C               (       gshell.asm):03553                  incb  
17EF 3416             (       gshell.asm):03554                  pshs  d,X
17F1 308CCF           (       gshell.asm):03555                  leax  <DELDIRNM,PC
17F4 3410             (       gshell.asm):03556                  pshs  X
17F6 17081F           (       gshell.asm):03557                  lbsr  EXECPRGM
17F9 3268             (       gshell.asm):03558                  leas  8,S
17FB ED64             (       gshell.asm):03559         FLDELET1 std   4,S
17FD 202E             (       gshell.asm):03560                  bra   FLDELET3
                      (       gshell.asm):03561         
                      (       gshell.asm):03562         * Not a dir, delete a normal file
17FF 3440             (       gshell.asm):03563         NOTADIR  pshs  U
1801 170212           (       gshell.asm):03564                  lbsr  GETFLPTR   Get ptr to filename
1804 EDE4             (       gshell.asm):03565                  std   ,S
1806 171ABB           (       gshell.asm):03566                  lbsr  I.DELETE
1809 3262             (       gshell.asm):03567                  leas  2,S
180B ED64             (       gshell.asm):03568                  std   4,S
180D 271E             (       gshell.asm):03569                  beq   FLDELET3
180F ECA90431         (       gshell.asm):03570                  ldd   ERRNO,Y
1813 C1D8             (       gshell.asm):03571                  cmpb  #E$PNNF
1815 2604             (       gshell.asm):03572                  bne   FLDELET2
1817 4F               (       gshell.asm):03573                  clra  
1818 5F               (       gshell.asm):03574                  clrb  
1819 20E0             (       gshell.asm):03575                  bra   FLDELET1
                      (       gshell.asm):03576         
181B AEA90431         (       gshell.asm):03577         FLDELET2 ldx   ERRNO,Y
181F EC4C             (       gshell.asm):03578                  ldd   FL.FNAME,U
1821 3416             (       gshell.asm):03579                  pshs  d,X
1823 308CA4           (       gshell.asm):03580                  leax  <CANTDELT,PC
1826 3410             (       gshell.asm):03581                  pshs  X
1828 17F99B           (       gshell.asm):03582                  lbsr  BUILDMSG
182B 3266             (       gshell.asm):03583                  leas  6,S
182D EC64             (       gshell.asm):03584         FLDELET3 ldd   4,S
182F 2678             (       gshell.asm):03585                  bne   FILSEXIT
1831 3440             (       gshell.asm):03586                  pshs  U
1833 17FEBB           (       gshell.asm):03587                  lbsr  RMVFICON
1836 3262             (       gshell.asm):03588                  leas  2,S
1838 4F               (       gshell.asm):03589                  clra  
1839 5F               (       gshell.asm):03590                  clrb  
183A DD34             (       gshell.asm):03591                  std   SELECTED
183C 17FF45           (       gshell.asm):03592                  lbsr  UPDFITBL
183F EC48             (       gshell.asm):03593                  ldd   FL.ICONO,U
1841 8106             (       gshell.asm):03594                  cmpa  #IC.AIF.F
1843 2624             (       gshell.asm):03595                  bne   FLDELET9
1845 9E30             (       gshell.asm):03596                  ldx   FTBLSPTR
1847 270E             (       gshell.asm):03597                  beq   FLDELET6
1849 8601             (       gshell.asm):03598                  lda   #IC.TEXT
184B E109             (       gshell.asm):03599         FLDELET4 cmpb  FL.AIFNO,X
184D 2604             (       gshell.asm):03600                  bne   FLDELET5
184F 6F09             (       gshell.asm):03601                  clr   FL.AIFNO,X
1851 A708             (       gshell.asm):03602                  sta   FL.ICONO,X
1853 AE0A             (       gshell.asm):03603         FLDELET5 ldx   FL.LINK,X
1855 26F4             (       gshell.asm):03604                  bne   FLDELET4
1857 9E11             (       gshell.asm):03605         FLDELET6 ldx   IDSCSPTR
1859 E101             (       gshell.asm):03606         FLDELET7 cmpb  ID.NUMBR+1,X
185B 2607             (       gshell.asm):03607                  bne   FLDELET8
185D AE8810           (       gshell.asm):03608                  ldx   ID.XXXPT,X
1860 6F84             (       gshell.asm):03609                  clr   ,X
1862 2005             (       gshell.asm):03610                  bra   FLDELET9
                      (       gshell.asm):03611         
1864 AE8814           (       gshell.asm):03612         FLDELET8 ldx   ID.LINK,X
1867 26F0             (       gshell.asm):03613                  bne   FLDELET7
1869                  (       gshell.asm):03614         FLDELET9       
1869 17EEF1           (       gshell.asm):03615         FLCOPYEX lbsr  DRAWSCRN
186C 203B             (       gshell.asm):03616                  bra   FILSEXIT
                      (       gshell.asm):03617         
                      (       gshell.asm):03618         * FILE menu, Quit option
186E 17053D           (       gshell.asm):03619         FLQUIT   lbsr  SUREQUI3   Ask user if they are sure
1871 2036             (       gshell.asm):03620                  bra   FILSEXIT
                      (       gshell.asm):03621         
                      (       gshell.asm):03622         * FILES menu
1873 3440             (       gshell.asm):03623         FILESLCT pshs  U
1875 3278             (       gshell.asm):03624                  leas  -8,S
1877 DE34             (       gshell.asm):03625                  ldu   SELECTED   Get ptr to icon table entry currently selected
1879 EC6C             (       gshell.asm):03626                  ldd   12,S       Get FILES menu item #
187B 5A               (       gshell.asm):03627                  decb  
187C 272F             (       gshell.asm):03628                  beq   FLOPEN
187E 5A               (       gshell.asm):03629                  decb  
187F 10270099         (       gshell.asm):03630                  lbeq  FLLIST
1883 5A               (       gshell.asm):03631                  decb  
1884 102700AA         (       gshell.asm):03632                  lbeq  FLCOPY
1888 5A               (       gshell.asm):03633                  decb  
1889 102700F1         (       gshell.asm):03634                  lbeq  FLSTAT
188D 5A               (       gshell.asm):03635                  decb  
188E 1027010E         (       gshell.asm):03636                  lbeq  FLPRINT
1892 5A               (       gshell.asm):03637                  decb  
1893 1027011F         (       gshell.asm):03638                  lbeq  FLRENAME
1897 5A               (       gshell.asm):03639                  decb  
1898 1027FF3D         (       gshell.asm):03640                  lbeq  FLDELETE
189C 5A               (       gshell.asm):03641                  decb  
189D 1027FEFD         (       gshell.asm):03642                  lbeq  FLSORT
18A1 5A               (       gshell.asm):03643                  decb  
18A2 27CA             (       gshell.asm):03644                  beq   FLQUIT
18A4 5A               (       gshell.asm):03645                  decb  
18A5 1027FF39         (       gshell.asm):03646                  lbeq  FLTRASH
18A9 3268             (       gshell.asm):03647         FILSEXIT leas  8,S
18AB 35C0             (       gshell.asm):03648                  puls  U,PC
                      (       gshell.asm):03649         
                      (       gshell.asm):03650         * File menu - OPEN option
18AD E648             (       gshell.asm):03651         FLOPEN   ldb   FL.ICONO,U Get icon type
18AF C106             (       gshell.asm):03652                  cmpb  #IC.AIF.F  Is it a one shot AIF file?
18B1 270F             (       gshell.asm):03653                  beq   FLOPNAIF   Yes, open as an AIF file
18B3 C102             (       gshell.asm):03654                  cmpb  #IC.FOLDR  Is it a folder/directory?
18B5 2712             (       gshell.asm):03655                  beq   FLOPFLDR   Yes, switch to that sub-directory
18B7 C107             (       gshell.asm):03656                  cmpb  #IC.F.XXX  Is it a file that matches a previous AIF extension
18B9 2619             (       gshell.asm):03657                  bne   FLOPRGRM   No, treat as an executable
18BB 3440             (       gshell.asm):03658                  pshs  U          Save file info ptr
18BD 17EC51           (       gshell.asm):03659                  lbsr  EXEC.XXX   Do the AIF match thing
18C0 200E             (       gshell.asm):03660                  bra   FLEXHOOK
                      (       gshell.asm):03661         
                      (       gshell.asm):03662         * File menu - OPEN for a one-shot AIF file
18C2 3440             (       gshell.asm):03663         FLOPNAIF pshs  U          Save file info ptr
18C4 17EC6A           (       gshell.asm):03664                  lbsr  EXECAIF    Execute using AIF stuff
18C7 2007             (       gshell.asm):03665                  bra   FLEXHOOK
                      (       gshell.asm):03666         
                      (       gshell.asm):03667         * File menu - OPEN for a folder (directory)
18C9 EC4C             (       gshell.asm):03668         FLOPFLDR ldd   FL.FNAME,U Get ptr to directory name
18CB 3406             (       gshell.asm):03669                  pshs  d
18CD 17EC97           (       gshell.asm):03670                  lbsr  OPENFLDR   Change to sub-directory
18D0 3262             (       gshell.asm):03671         FLEXHOOK leas  2,S        Eat temp stack & exit
18D2 20D5             (       gshell.asm):03672                  bra   FILSEXIT
                      (       gshell.asm):03673         
18D4 EC4C             (       gshell.asm):03674         FLOPRGRM ldd   FL.FNAME,U Get ptr to filename to execute
18D6 3406             (       gshell.asm):03675                  pshs  d
18D8 308C3F           (       gshell.asm):03676                  leax  <SLASH,PC  Point to a slash
18DB 3410             (       gshell.asm):03677                  pshs  X
18DD 8E0455           (       gshell.asm):03678                  ldx   #DDIRNAME  Point to current full path name
18E0 3410             (       gshell.asm):03679                  pshs  X
18E2 8E0F23           (       gshell.asm):03680                  ldx   #MULTIBFR  Place to store path & filename
18E5 3410             (       gshell.asm):03681                  pshs  X
18E7 1719FA           (       gshell.asm):03682                  lbsr  STRCPY     Copy pathname to temp buffer
18EA 3264             (       gshell.asm):03683                  leas  4,S
18EC 3406             (       gshell.asm):03684                  pshs  d
18EE 171A03           (       gshell.asm):03685                  lbsr  STRCAT     Add slash (NOTE: DO MANUALLY!)
18F1 3264             (       gshell.asm):03686                  leas  4,S
18F3 3406             (       gshell.asm):03687                  pshs  d
18F5 1719FC           (       gshell.asm):03688                  lbsr  STRCAT     Add filename of program to execute
18F8 3264             (       gshell.asm):03689                  leas  4,S
18FA EC4C             (       gshell.asm):03690                  ldd   FL.FNAME,U Point to filename (for get params prompt)
18FC 3406             (       gshell.asm):03691                  pshs  d
18FE 17EBCB           (       gshell.asm):03692                  lbsr  GETPARMS   Prompt & get any params needed from user
1901 3262             (       gshell.asm):03693                  leas  2,S
1903 ED62             (       gshell.asm):03694                  std   2,S
1905 CC0001           (       gshell.asm):03695                  ldd   #1         We want overlay window to run program in flag
1908 3406             (       gshell.asm):03696                  pshs  d
190A AE64             (       gshell.asm):03697                  ldx   4,S
190C 3416             (       gshell.asm):03698                  pshs  d,X
190E 8E0F23           (       gshell.asm):03699                  ldx   #MULTIBFR  Point to new filename path
1911 3410             (       gshell.asm):03700         FLEXEC   pshs  X
1913 170702           (       gshell.asm):03701                  lbsr  EXECPRGM   Fork that program in an overlay window
1916 3268             (       gshell.asm):03702                  leas  8,S
1918 208F             (       gshell.asm):03703         FILSEXT2 bra   FILSEXIT
                      (       gshell.asm):03704         
191A 2F               (       gshell.asm):03705         SLASH    fcc   "/"
191B 00               (       gshell.asm):03706                  fcb   NUL
                      (       gshell.asm):03707         
                      (       gshell.asm):03708         * File menu - LIST option
191C CC0001           (       gshell.asm):03709         FLLIST   ldd   #1
191F 3406             (       gshell.asm):03710                  pshs  d
1921 3440             (       gshell.asm):03711                  pshs  U
1923 1700F0           (       gshell.asm):03712                  lbsr  GETFLPTR   Get ptr to filename we want to list
1926 EDE4             (       gshell.asm):03713                  std   ,S         Save it
1928 CC0001           (       gshell.asm):03714                  ldd   #1         Flag that we want to run LIST in an overlay window
192B 3406             (       gshell.asm):03715                  pshs  d
192D 8E0323           (       gshell.asm):03716                  ldx   #LISTNAM   Point to 'LIST '
1930 20DF             (       gshell.asm):03717                  bra   FLEXEC
                      (       gshell.asm):03718         
                      (       gshell.asm):03719         * File menu - COPY option
1932 8E0409           (       gshell.asm):03720         FLCOPY   ldx   #NEWNMSG   Point to 'new name:'
1935 3410             (       gshell.asm):03721                  pshs  X
1937 170AE4           (       gshell.asm):03722                  lbsr  INPTSCRN   Prompt for destination path for copy
193A ED64             (       gshell.asm):03723                  std   4,S
193C 2792             (       gshell.asm):03724                  beq   FLEXHOOK   User just hit <ENTER>, abort copy
193E EDE4             (       gshell.asm):03725                  std   ,S         Save ptr to string we are inserting in front of
1940 17FC16           (       gshell.asm):03726                  lbsr  STPREFIX   Insert original filename to copy (?)
1943 4F               (       gshell.asm):03727                  clra  
1944 5F               (       gshell.asm):03728                  clrb  
1945 EDE4             (       gshell.asm):03729                  std   ,S
1947 3440             (       gshell.asm):03730                  pshs  U
1949 1700CA           (       gshell.asm):03731                  lbsr  GETFLPTR   Get ptr to filename we want to copy
194C EDE4             (       gshell.asm):03732                  std   ,S
194E 4F               (       gshell.asm):03733                  clra             No overlay window for COPY command
194F 5F               (       gshell.asm):03734                  clrb  
1950 3406             (       gshell.asm):03735                  pshs  d
1952 308C40           (       gshell.asm):03736                  leax  <COPYNAME,PC
1955 3410             (       gshell.asm):03737                  pshs  X
1957 1706BE           (       gshell.asm):03738                  lbsr  EXECPRGM   Execute COPY program
195A 3268             (       gshell.asm):03739                  leas  8,S
195C ED7E             (       gshell.asm):03740                  std   -2,S
195E 26B8             (       gshell.asm):03741                  bne   FILSEXT2
1960 EC62             (       gshell.asm):03742                  ldd   2,S
1962 3406             (       gshell.asm):03743                  pshs  d
1964 1700F0           (       gshell.asm):03744                  lbsr  INOURDIR
1967 3262             (       gshell.asm):03745                  leas  2,S
1969 ED62             (       gshell.asm):03746                  std   2,S
196B 27AB             (       gshell.asm):03747                  beq   FILSEXT2
196D E648             (       gshell.asm):03748                  ldb   FL.ICONO,U
196F 1D               (       gshell.asm):03749                  sex   
1970 3406             (       gshell.asm):03750                  pshs  d
1972 EC64             (       gshell.asm):03751                  ldd   4,S
1974 3406             (       gshell.asm):03752                  pshs  d
1976 17FCD7           (       gshell.asm):03753                  lbsr  ADDFICON
1979 3264             (       gshell.asm):03754                  leas  4,S
197B 16FEEB           (       gshell.asm):03755                  lbra  FLCOPYEX
                      (       gshell.asm):03756         
                      (       gshell.asm):03757         * File menu - FSTAT option
197E CC0001           (       gshell.asm):03758         FLSTAT   ldd   #1
1981 3406             (       gshell.asm):03759                  pshs  d
1983 3440             (       gshell.asm):03760                  pshs  U
1985 17008E           (       gshell.asm):03761                  lbsr  GETFLPTR   Get ptr to filename we are FSTATing
1988 EDE4             (       gshell.asm):03762                  std   ,S
198A CC0001           (       gshell.asm):03763                  ldd   #1         Flag we want this in an overlay window
198D 3406             (       gshell.asm):03764                  pshs  d
198F 308C08           (       gshell.asm):03765                  leax  <FSTATNAM,PC Point to 'fstat'
1992 16FF7C           (       gshell.asm):03766                  lbra  FLEXEC
                      (       gshell.asm):03767         
1995 636F7079         (       gshell.asm):03768         COPYNAME fcc   "copy"
1999 00               (       gshell.asm):03769                  fcb   NUL
                      (       gshell.asm):03770         
199A 6673746174       (       gshell.asm):03771         FSTATNAM fcc   "fstat"
199F 00               (       gshell.asm):03772                  fcb   NUL
                      (       gshell.asm):03773         
                      (       gshell.asm):03774         * File menu - PRINT option - NOTE: ADD PRINT ICON CALL TO HERE
19A0 CC0001           (       gshell.asm):03775         FLPRINT  ldd   #1
19A3 3406             (       gshell.asm):03776                  pshs  d
19A5 3440             (       gshell.asm):03777                  pshs  U
19A7 8D6D             (       gshell.asm):03778                  bsr   GETFLPTR   Get ptr to file to print
19A9 EDE4             (       gshell.asm):03779                  std   ,S
19AB CC0001           (       gshell.asm):03780                  ldd   #1         We want this to run in an overlay window
19AE 3406             (       gshell.asm):03781                  pshs  d
19B0 8E0354           (       gshell.asm):03782                  ldx   #COCPRNM   Execute 'COCOPR' program
19B3 16FF5B           (       gshell.asm):03783                  lbra  FLEXEC
                      (       gshell.asm):03784         
                      (       gshell.asm):03785         * File menu - RENAME option - patch to not allow DIRSIG to trigger needlessly
19B6 8E0409           (       gshell.asm):03786         FLRENAME ldx   #NEWNMSG   Prompt user for new filename
19B9 3410             (       gshell.asm):03787                  pshs  X
19BB 170A60           (       gshell.asm):03788                  lbsr  INPTSCRN
19BE ED64             (       gshell.asm):03789                  std   4,S        Save ptr to new filename
19C0 274A             (       gshell.asm):03790                  beq   FLRENAM1   User hit <ENTER>, abort rename
19C2 EDE4             (       gshell.asm):03791                  std   ,S
19C4 17FB92           (       gshell.asm):03792                  lbsr  STPREFIX
19C7 4F               (       gshell.asm):03793                  clra  
19C8 5F               (       gshell.asm):03794                  clrb  
19C9 EDE4             (       gshell.asm):03795                  std   ,S
19CB 3440             (       gshell.asm):03796                  pshs  U
19CD 8D47             (       gshell.asm):03797                  bsr   GETFLPTR   Get ptr to filename of original filename to rename
19CF EDE4             (       gshell.asm):03798                  std   ,S
                      (       gshell.asm):03799         * If Dirup <>0, leave RECDSGNL/Dirup alone (another process has updated DIR)
                      (       gshell.asm):03800         * If Dirup=0, we want to wipe out RECDSGNL & Dirup right after Fork comes back
                      (       gshell.asm):03801         * before we exit this routine.
19D1 B6134E           (       gshell.asm):03802                  lda   Dirup      Any directory update signal?
19D4 B7134F           (       gshell.asm):03803                  sta   RenFlag    Save it (irregardless)
19D7 4F               (       gshell.asm):03804                  clra             No overlay window for RENAME
19D8 5F               (       gshell.asm):03805                  clrb  
19D9 3406             (       gshell.asm):03806                  pshs  d
19DB 308C31           (       gshell.asm):03807                  leax  <RENAMENM,PC Rename the file
19DE 3410             (       gshell.asm):03808                  pshs  X
19E0 170635           (       gshell.asm):03809                  lbsr  EXECPRGM
19E3 3268             (       gshell.asm):03810                  leas  8,S
19E5 ED7E             (       gshell.asm):03811                  std   -2,S
19E7 1026FEBE         (       gshell.asm):03812                  lbne  FILSEXIT
19EB B6134F           (       gshell.asm):03813                  lda   RenFlag    Was their a dir update originally?
19EE 2605             (       gshell.asm):03814                  bne   SkipSigC   Yes, leave signal stuff alone
19F0 B7134E           (       gshell.asm):03815                  sta   Dirup      Clear queued dir update signal flag (rename triggered it)
19F3 971D             (       gshell.asm):03816                  sta   RECDSGNL+1 Clear signal copy as well
19F5 3440             (       gshell.asm):03817         SkipSigC pshs  U
19F7 17F000           (       gshell.asm):03818                  lbsr  ERASFNAM   Erase the original filename from the screen
19FA EC64             (       gshell.asm):03819                  ldd   4,S
19FC EDE4             (       gshell.asm):03820                  std   ,S
19FE 3440             (       gshell.asm):03821                  pshs  U
1A00 17FC9B           (       gshell.asm):03822                  lbsr  RPLFICON   Update the file table entry for the new name
1A03 3264             (       gshell.asm):03823                  leas  4,S
1A05 DD34             (       gshell.asm):03824                  std   SELECTED
1A07 3406             (       gshell.asm):03825                  pshs  d
1A09 17EFE2           (       gshell.asm):03826                  lbsr  WRITFNAM   Write the new filename on the screen
1A0C 16FEC1           (       gshell.asm):03827         FLRENAM1 lbra  FLEXHOOK
                      (       gshell.asm):03828         
1A0F 72656E616D65     (       gshell.asm):03829         RENAMENM fcc   "rename"
1A15 00               (       gshell.asm):03830                  fcb   NUL
                      (       gshell.asm):03831         
                      (       gshell.asm):03832         * Get ptr to filename
                      (       gshell.asm):03833         * Entry: 0-1,s = RTS address
                      (       gshell.asm):03834         *        2-3,s = Ptr to file table entry for current file
1A16 AE62             (       gshell.asm):03835         GETFLPTR ldx   2,S        Get ptr to file table entry
1A18 E608             (       gshell.asm):03836                  ldb   FL.ICONO,X Get icon type
1A1A C106             (       gshell.asm):03837                  cmpb  #IC.AIF.F  Is it a one shot AIF type?
1A1C 2607             (       gshell.asm):03838                  bne   GETFLPT1   No, skip ahead
1A1E 3410             (       gshell.asm):03839                  pshs  X          Save ptr to file table entry
1A20 8D06             (       gshell.asm):03840                  bsr   FPTR.XXX   Generate AIF.xxx filename, return with ptr to it
1A22 3262             (       gshell.asm):03841                  leas  2,S
1A24 39               (       gshell.asm):03842                  rts   
                      (       gshell.asm):03843         
                      (       gshell.asm):03844         * Non AIF one-shot
1A25 EC0C             (       gshell.asm):03845         GETFLPT1 ldd   FL.FNAME,X Get filename ptr & return
1A27 39               (       gshell.asm):03846                  rts   
                      (       gshell.asm):03847         
                      (       gshell.asm):03848         * AIF one shot (need name of AIF itself, not program referenced in it)
1A28 3440             (       gshell.asm):03849         FPTR.XXX pshs  U
1A2A 338DF41B         (       gshell.asm):03850                  leau  AIF.NAME,PC Point to 'aif'
1A2E 8E1183           (       gshell.asm):03851                  ldx   #AIFNMBFR  Point to buffer to build AIF.xxx filename
1A31 3450             (       gshell.asm):03852                  pshs  X,U
1A33 1718AE           (       gshell.asm):03853                  lbsr  STRCPY     Copy 'aif' into buffer
1A36 3264             (       gshell.asm):03854                  leas  4,S
1A38 EE64             (       gshell.asm):03855                  ldu   4,S
1A3A 4F               (       gshell.asm):03856                  clra  
1A3B E649             (       gshell.asm):03857                  ldb   FL.AIFNO,U Get entry # into ID.* table
1A3D 3406             (       gshell.asm):03858                  pshs  d
1A3F 17F619           (       gshell.asm):03859                  lbsr  FNDIDESC   Go find the right entry
1A42 1F03             (       gshell.asm):03860                  tfr   D,U
1A44 EDE1             (       gshell.asm):03861                  std   ,S++
1A46 270D             (       gshell.asm):03862                  beq   FPTRXXX1   None, skip ahead
1A48 EEC810           (       gshell.asm):03863                  ldu   ID.XXXPT,U Get ptr to ???
1A4B 8E1183           (       gshell.asm):03864                  ldx   #AIFNMBFR  Point to AIF buffer again
1A4E 3450             (       gshell.asm):03865                  pshs  X,U
1A50 1718A1           (       gshell.asm):03866                  lbsr  STRCAT     append the 3 letter AIF code
1A53 3264             (       gshell.asm):03867                  leas  4,S
1A55 35C0             (       gshell.asm):03868         FPTRXXX1 puls  U,PC       Return with ptr to AIF.xxx filename
                      (       gshell.asm):03869         
1A57 3440             (       gshell.asm):03870         INOURDIR pshs  U
1A59 EE64             (       gshell.asm):03871                  ldu   4,S
1A5B E6C4             (       gshell.asm):03872                  ldb   ,U
1A5D C12F             (       gshell.asm):03873                  cmpb  #'/
1A5F 261C             (       gshell.asm):03874                  bne   INOURDI1
1A61 3440             (       gshell.asm):03875                  pshs  U
1A63 8D28             (       gshell.asm):03876                  bsr   TERMSLSH   Cut directory name off one dir. level earlier
1A65 EDE4             (       gshell.asm):03877                  std   ,S         Save ptr to end of new path
1A67 8E0455           (       gshell.asm):03878                  ldx   #DDIRNAME
1A6A 3450             (       gshell.asm):03879                  pshs  X,U
1A6C 171891           (       gshell.asm):03880                  lbsr  STRCMP
1A6F 3264             (       gshell.asm):03881                  leas  4,S
1A71 3510             (       gshell.asm):03882                  puls  X
1A73 ED7E             (       gshell.asm):03883                  std   -2,S
1A75 260E             (       gshell.asm):03884                  bne   INOURDI2
1A77 3001             (       gshell.asm):03885                  leax  1,X
1A79 1F10             (       gshell.asm):03886                  tfr   X,D
1A7B 200E             (       gshell.asm):03887                  bra   INOURDI4
                      (       gshell.asm):03888         
1A7D E6C0             (       gshell.asm):03889         INOURDI1 ldb   ,U+
1A7F 2708             (       gshell.asm):03890                  beq   INOURDI3
1A81 C12F             (       gshell.asm):03891                  cmpb  #'/
1A83 26F8             (       gshell.asm):03892                  bne   INOURDI1
1A85 4F               (       gshell.asm):03893         INOURDI2 clra  
1A86 5F               (       gshell.asm):03894                  clrb  
1A87 35C0             (       gshell.asm):03895                  puls  U,PC
                      (       gshell.asm):03896         
1A89 EC64             (       gshell.asm):03897         INOURDI3 ldd   4,S
1A8B 35C0             (       gshell.asm):03898         INOURDI4 puls  U,PC
                      (       gshell.asm):03899         
                      (       gshell.asm):03900         * Shorten string at [2,S] to end at the previous '/'
                      (       gshell.asm):03901         * Used to shorten directory paths by one directory level
                      (       gshell.asm):03902         * Exit: D=ptr to end of new pathname
1A8D AE62             (       gshell.asm):03903         TERMSLSH ldx   2,S        Get ptr to pathname
1A8F 171849           (       gshell.asm):03904                  lbsr  STREND1    Get end of string ptr into D
1A92 E682             (       gshell.asm):03905         TERMSLS1 ldb   ,-X        Get previous char
1A94 C12F             (       gshell.asm):03906                  cmpb  #'/        Slash?
1A96 26FA             (       gshell.asm):03907                  bne   TERMSLS1   No, keep looking
1A98 AC62             (       gshell.asm):03908                  cmpx  2,S        Yes, are we at the beginning of the path again?
1A9A 2703             (       gshell.asm):03909                  beq   TERMSLS2   Yes, done
1A9C 5F               (       gshell.asm):03910                  clrb             Found previous dir, flag string end here
1A9D E784             (       gshell.asm):03911                  stb   ,X
1A9F 1F10             (       gshell.asm):03912         TERMSLS2 tfr   X,D
1AA1 39               (       gshell.asm):03913                  rts   
                      (       gshell.asm):03914         
                      (       gshell.asm):03915         * FILE menu, Free option
1AA2 CC0001           (       gshell.asm):03916         DOFREE   ldd   #1         Do in an overlay window
1AA5 3406             (       gshell.asm):03917                  pshs  d
1AA7 9E36             (       gshell.asm):03918                  ldx   DEVICNOW   Get ptr to file entry for current device
1AA9 AE0C             (       gshell.asm):03919                  ldx   FL.FNAME,X Get ptr to device name
1AAB 3416             (       gshell.asm):03920                  pshs  d,X
1AAD 308C02           (       gshell.asm):03921                  leax  <FREENAME,PC Fork FREE command on that drive
1AB0 207B             (       gshell.asm):03922                  bra   FORKHOOK
                      (       gshell.asm):03923         
1AB2 66726565         (       gshell.asm):03924         FREENAME fcc   "free"
1AB6 00               (       gshell.asm):03925                  fcb   NUL
                      (       gshell.asm):03926         
1AB7 20536F7572636520 (       gshell.asm):03927         SORCDEVC fcc   " Source device"
     646576696365
1AC5 0A00             (       gshell.asm):03928                  fcb   LF,NUL
                      (       gshell.asm):03929         
1AC7 20446573742E2064 (       gshell.asm):03930         DESTDEVC fcc   " Dest. device"
     6576696365
1AD4 0A00             (       gshell.asm):03931                  fcb   LF,NUL
                      (       gshell.asm):03932         
1AD6 6261636B7570     (       gshell.asm):03933         BACKUPNM fcc   "backup"
1ADC 00               (       gshell.asm):03934                  fcb   NUL
                      (       gshell.asm):03935         
1ADD 73               (       gshell.asm):03936         SNAME    fcc   "s"
1ADE 00               (       gshell.asm):03937                  fcb   NUL
                      (       gshell.asm):03938         
                      (       gshell.asm):03939         * - Backup command - NOTE: SHOULD WE CHANGE THIS TO USE BRUCE ISTED'S STREAM?
1ADF 308CD5           (       gshell.asm):03940         DOBACKUP leax  <SORCDEVC,PC Point to ' Source device'
1AE2 3410             (       gshell.asm):03941                  pshs  X
1AE4 17012B           (       gshell.asm):03942                  lbsr  SLCTDEVC   Prompt user for source device to BACKUP
1AE7 1F03             (       gshell.asm):03943                  tfr   D,U
1AE9 EFE1             (       gshell.asm):03944                  stu   ,S++
1AEB 277B             (       gshell.asm):03945                  beq   DISKEXIT   User just hit <ENTER>, exit
1AED 308CD7           (       gshell.asm):03946                  leax  <DESTDEVC,PC Prompt user for destination device to BACKUP
1AF0 3410             (       gshell.asm):03947                  pshs  X
1AF2 17011D           (       gshell.asm):03948                  lbsr  SLCTDEVC
1AF5 3262             (       gshell.asm):03949                  leas  2,S
1AF7 ED62             (       gshell.asm):03950                  std   2,S
1AF9 276D             (       gshell.asm):03951                  beq   DISKEXIT   User just hit <ENTER>, exit
1AFB 11A362           (       gshell.asm):03952                  cmpu  2,S        Same as source drive?
1AFE 270B             (       gshell.asm):03953                  beq   SNGLDRIV   Yes, doing single drive backup
1B00 3406             (       gshell.asm):03954                  pshs  d
1B02 17FA54           (       gshell.asm):03955                  lbsr  STPREFIX   Append 
1B05 3262             (       gshell.asm):03956                  leas  2,S
1B07 4F               (       gshell.asm):03957                  clra             No overlay window (since will be automatic)
1B08 5F               (       gshell.asm):03958                  clrb  
1B09 2003             (       gshell.asm):03959                  bra   TWODRIVE
                      (       gshell.asm):03960         
                      (       gshell.asm):03961         * Single drive backup
1B0B CC0001           (       gshell.asm):03962         SNGLDRIV ldd   #1         Need overlay window for disk swap prompts
1B0E EDE4             (       gshell.asm):03963         TWODRIVE std   ,S
1B10 3440             (       gshell.asm):03964                  pshs  U
1B12 17FA44           (       gshell.asm):03965                  lbsr  STPREFIX
1B15 CC0001           (       gshell.asm):03966                  ldd   #1
1B18 EDE4             (       gshell.asm):03967                  std   ,S
1B1A EC62             (       gshell.asm):03968                  ldd   2,S
1B1C 2705             (       gshell.asm):03969                  beq   TWODRIV1
1B1E 308CBC           (       gshell.asm):03970                  leax  <SNAME,PC
1B21 1F10             (       gshell.asm):03971                  tfr   X,D
1B23 3406             (       gshell.asm):03972         TWODRIV1 pshs  d
1B25 CC0001           (       gshell.asm):03973                  ldd   #1
1B28 3406             (       gshell.asm):03974                  pshs  d
1B2A 308CA9           (       gshell.asm):03975                  leax  <BACKUPNM,PC
1B2D 3410             (       gshell.asm):03976         FORKHOOK pshs  X
1B2F 1704E6           (       gshell.asm):03977                  lbsr  EXECPRGM
1B32 3268             (       gshell.asm):03978                  leas  8,S
1B34 2032             (       gshell.asm):03979                  bra   DISKEXIT
                      (       gshell.asm):03980         
1B36 170532           (       gshell.asm):03981         DOSTEXEC lbsr  NOMOUSE    ++X25
1B39 1701D5           (       gshell.asm):03982                  lbsr  STEXCDVC
1B3C 202A             (       gshell.asm):03983                  bra   DISKEXIT
                      (       gshell.asm):03984         
1B3E 17052A           (       gshell.asm):03985         DOSETDVC lbsr  NOMOUSE    ++X25
1B41 171326           (       gshell.asm):03986                  lbsr  FIXDRTBL
1B44 171352           (       gshell.asm):03987                  lbsr  CHGDEVCS
1B47 17F10E           (       gshell.asm):03988                  lbsr  UPDTDEVC
1B4A 201C             (       gshell.asm):03989                  bra   DISKEXIT
                      (       gshell.asm):03990         
                      (       gshell.asm):03991         * DISK MENU
1B4C 3440             (       gshell.asm):03992         DISKSLCT pshs  U
1B4E 327C             (       gshell.asm):03993                  leas  -4,S
1B50 EC68             (       gshell.asm):03994                  ldd   8,S
1B52 5A               (       gshell.asm):03995                  decb  
1B53 1027FF4B         (       gshell.asm):03996                  lbeq  DOFREE     Free
1B57 5A               (       gshell.asm):03997                  decb  
1B58 2715             (       gshell.asm):03998                  beq   DONWFLDR   Create new folder (directory)
1B5A 5A               (       gshell.asm):03999                  decb  
1B5B 275E             (       gshell.asm):04000                  beq   DOFORMAT   Format disk
1B5D 5A               (       gshell.asm):04001                  decb  
1B5E 1027FF7D         (       gshell.asm):04002                  lbeq  DOBACKUP   Backup disk
1B62 5A               (       gshell.asm):04003                  decb  
1B63 27D1             (       gshell.asm):04004                  beq   DOSTEXEC   Set execution directory
1B65 5A               (       gshell.asm):04005                  decb  
1B66 27D6             (       gshell.asm):04006                  beq   DOSETDVC   Set data directory (drive)
1B68 3264             (       gshell.asm):04007         DISKEXIT leas  4,S
1B6A 17050A           (       gshell.asm):04008                  lbsr  MOUSENOW   Turn mouse back on
1B6D 35C0             (       gshell.asm):04009                  puls  U,PC
                      (       gshell.asm):04010         
1B6F 1704F9           (       gshell.asm):04011         DONWFLDR lbsr  NOMOUSE    Turn mouse off
1B72 308C66           (       gshell.asm):04012                  leax  <FOLDRNAM,PC Ask for new folder name
1B75 3410             (       gshell.asm):04013                  pshs  X
1B77 1708A4           (       gshell.asm):04014                  lbsr  INPTSCRN
1B7A 1F03             (       gshell.asm):04015                  tfr   D,U
1B7C EDE1             (       gshell.asm):04016                  std   ,S++
1B7E 27E8             (       gshell.asm):04017                  beq   DISKEXIT
1B80 C62F             (       gshell.asm):04018                  ldb   #PEXEC.+PREAD.+EXEC.+UPDAT.
1B82 3406             (       gshell.asm):04019                  pshs  d
1B84 3440             (       gshell.asm):04020                  pshs  U
1B86 171732           (       gshell.asm):04021                  lbsr  I.MAKDIR
1B89 3264             (       gshell.asm):04022                  leas  4,S
1B8B 5D               (       gshell.asm):04023                  tstb  
1B8C 261B             (       gshell.asm):04024                  bne   DONWFLD1
1B8E 3440             (       gshell.asm):04025                  pshs  U
1B90 17FEC4           (       gshell.asm):04026                  lbsr  INOURDIR
1B93 1F03             (       gshell.asm):04027                  tfr   D,U
1B95 EFE1             (       gshell.asm):04028                  stu   ,S++
1B97 27CF             (       gshell.asm):04029                  beq   DISKEXIT
1B99 C602             (       gshell.asm):04030                  ldb   #IC.FOLDR
1B9B 3406             (       gshell.asm):04031                  pshs  d
1B9D 3440             (       gshell.asm):04032                  pshs  U
1B9F 17FAAE           (       gshell.asm):04033                  lbsr  ADDFICON
1BA2 3264             (       gshell.asm):04034                  leas  4,S
1BA4 17EBB6           (       gshell.asm):04035                  lbsr  DRAWSCRN
1BA7 20BF             (       gshell.asm):04036                  bra   DISKEXIT
                      (       gshell.asm):04037         
1BA9 ECA90431         (       gshell.asm):04038         DONWFLD1 ldd   ERRNO,Y
1BAD 3406             (       gshell.asm):04039                  pshs  d
1BAF 308C3C           (       gshell.asm):04040                  leax  <CANTMAKE,PC
1BB2 3450             (       gshell.asm):04041                  pshs  X,U
1BB4 17F60F           (       gshell.asm):04042                  lbsr  BUILDMSG
1BB7 3266             (       gshell.asm):04043                  leas  6,S
1BB9 20AD             (       gshell.asm):04044                  bra   DISKEXIT
                      (       gshell.asm):04045         
1BBB 308C3D           (       gshell.asm):04046         DOFORMAT leax  <FMTDEVIC,PC
1BBE 3410             (       gshell.asm):04047                  pshs  X
1BC0 8D50             (       gshell.asm):04048                  bsr   SLCTDEVC
1BC2 1F03             (       gshell.asm):04049                  tfr   D,U
1BC4 EFE1             (       gshell.asm):04050                  stu   ,S++
1BC6 27A0             (       gshell.asm):04051                  beq   DISKEXIT
1BC8 1705CE           (       gshell.asm):04052                  lbsr  SUREBOX5
1BCB 5D               (       gshell.asm):04053                  tstb  
1BCC 279A             (       gshell.asm):04054                  beq   DISKEXIT
1BCE CC0001           (       gshell.asm):04055                  ldd   #1
1BD1 3406             (       gshell.asm):04056                  pshs  d
1BD3 3446             (       gshell.asm):04057                  pshs  d,U
1BD5 308C33           (       gshell.asm):04058                  leax  <FORMATNM,PC
1BD8 16FF52           (       gshell.asm):04059                  lbra  FORKHOOK
                      (       gshell.asm):04060         
1BDB 466F6C646572206E (       gshell.asm):04061         FOLDRNAM fcc   "Folder name:      "
     616D653A20202020
     2020
1BED 00               (       gshell.asm):04062                  fcb   NUL
                      (       gshell.asm):04063         
1BEE 43616E2774206D61 (       gshell.asm):04064         CANTMAKE fcc   "Can't make "
     6B6520
1BF9 2200             (       gshell.asm):04065                  fcb   '",NUL
                      (       gshell.asm):04066         
1BFB 20466F726D617420 (       gshell.asm):04067         FMTDEVIC fcc   " Format device"
     646576696365
1C09 0A00             (       gshell.asm):04068                  fcb   LF,NUL
                      (       gshell.asm):04069         
1C0B 666F726D6174     (       gshell.asm):04070         FORMATNM fcc   "format"
1C11 00               (       gshell.asm):04071                  fcb   NUL
                      (       gshell.asm):04072         
                      (       gshell.asm):04073         * Select a new drive
1C12 3440             (       gshell.asm):04074         SLCTDEVC pshs  U
1C14 170454           (       gshell.asm):04075                  lbsr  NOMOUSE    Shut the mouse off
1C17 8E0655           (       gshell.asm):04076                  ldx   #MOUSPCKT
1C1A CC0008           (       gshell.asm):04077                  ldd   #8
1C1D DD5B             (       gshell.asm):04078                  std   BXOFFSET
1C1F 5F               (       gshell.asm):04079                  clrb  
1C20 3416             (       gshell.asm):04080                  pshs  d,X
1C22 C603             (       gshell.asm):04081                  ldb   #3
1C24 3416             (       gshell.asm):04082                  pshs  d,X
1C26 5A               (       gshell.asm):04083                  decb  
1C27 3406             (       gshell.asm):04084                  pshs  d
1C29 8E000A           (       gshell.asm):04085                  ldx   #10
1C2C EC6E             (       gshell.asm):04086                  ldd   16-2,S
1C2E 3416             (       gshell.asm):04087                  pshs  d,X
1C30 171699           (       gshell.asm):04088                  lbsr  STRLEN
1C33 C30002           (       gshell.asm):04089                  addd  #2
1C36 EDE4             (       gshell.asm):04090                  std   ,S
1C38 5F               (       gshell.asm):04091                  clrb  
1C39 3406             (       gshell.asm):04092                  pshs  d
1C3B C60A             (       gshell.asm):04093                  ldb   #10
1C3D 3406             (       gshell.asm):04094                  pshs  d
1C3F 8E0001           (       gshell.asm):04095                  ldx   #1
1C42 DC22             (       gshell.asm):04096                  ldd   WNDWPATH
1C44 3416             (       gshell.asm):04097                  pshs  d,X
1C46 171834           (       gshell.asm):04098                  lbsr  OWSET
1C49 CC0004           (       gshell.asm):04099                  ldd   #WT.DBOX   Double box overlay window
1C4C ED62             (       gshell.asm):04100                  std   2,S
1C4E 17180C           (       gshell.asm):04101                  lbsr  ST.WNSET
1C51 ECE81A           (       gshell.asm):04102                  ldd   10+16,S
1C54 EDE4             (       gshell.asm):04103                  std   ,S
1C56 17F5D6           (       gshell.asm):04104                  lbsr  WRLNWCR
1C59 32E810           (       gshell.asm):04105                  leas  2+14,S
1C5C CC0010           (       gshell.asm):04106                  ldd   #16
1C5F EDE4             (       gshell.asm):04107                  std   ,S
1C61 CE1241           (       gshell.asm):04108                  ldu   #DRIVETBL
1C64 2038             (       gshell.asm):04109                  bra   SLCTDEV2
                      (       gshell.asm):04110         
1C66 EC4C             (       gshell.asm):04111         SLCTDEV1 ldd   FL.FNAME,U
1C68 3406             (       gshell.asm):04112                  pshs  d
1C6A 8E118B           (       gshell.asm):04113                  ldx   #DNAMBUFR
1C6D 3410             (       gshell.asm):04114                  pshs  X
1C6F 171672           (       gshell.asm):04115                  lbsr  STRCPY
1C72 6FA91196         (       gshell.asm):04116                  clr   DNAMBUFR+11,Y
1C76 308DED95         (       gshell.asm):04117                  leax  FOURSPAC,PC
1C7A AFE4             (       gshell.asm):04118                  stx   ,S
1C7C 17F59B           (       gshell.asm):04119                  lbsr  WTSTRLEN
1C7F 8E118B           (       gshell.asm):04120                  ldx   #DNAMBUFR
1C82 AFE4             (       gshell.asm):04121                  stx   ,S
1C84 17F5A8           (       gshell.asm):04122                  lbsr  WRLNWCR
1C87 EC64             (       gshell.asm):04123                  ldd   4,S
1C89 ED62             (       gshell.asm):04124                  std   2,S
1C8B CC0008           (       gshell.asm):04125                  ldd   #8
1C8E EDE4             (       gshell.asm):04126                  std   ,S
1C90 170499           (       gshell.asm):04127                  lbsr  DRAWABOX
1C93 3264             (       gshell.asm):04128                  leas  4,S
1C95 ECE4             (       gshell.asm):04129                  ldd   ,S
1C97 C30008           (       gshell.asm):04130                  addd  #8
1C9A EDE4             (       gshell.asm):04131                  std   ,S
1C9C EE4A             (       gshell.asm):04132                  ldu   FL.LINK,U
1C9E EF7E             (       gshell.asm):04133         SLCTDEV2 stu   -2,S
1CA0 26C4             (       gshell.asm):04134                  bne   SLCTDEV1
1CA2 DF1C             (       gshell.asm):04135                  stu   RECDSGNL
1CA4 DC22             (       gshell.asm):04136                  ldd   WNDWPATH
1CA6 3416             (       gshell.asm):04137                  pshs  d,X
1CA8 171759           (       gshell.asm):04138                  lbsr  ST.RELEA
1CAB 1703C9           (       gshell.asm):04139                  lbsr  MOUSENOW
1CAE CC000A           (       gshell.asm):04140                  ldd   #MOUSIGNL
1CB1 ED62             (       gshell.asm):04141                  std   2,S
1CB3 17179C           (       gshell.asm):04142                  lbsr  ST.MSSIG
1CB6 3264             (       gshell.asm):04143                  leas  4,S
1CB8 9E1C             (       gshell.asm):04144                  ldx   RECDSGNL   Get signal
1CBA 2603             (       gshell.asm):04145                  bne   SLCTDEV3   Got one, process
1CBC 103F0A           (       gshell.asm):04146                  os9   F$SLEEP    Sleep for remainder of tick
1CBF DC1C             (       gshell.asm):04147         SLCTDEV3 ldd   RECDSGNL
1CC1 C10A             (       gshell.asm):04148                  cmpb  #MOUSIGNL
1CC3 2634             (       gshell.asm):04149                  bne   SLCTDEV6
1CC5 AE64             (       gshell.asm):04150                  ldx   4,S
1CC7 DC22             (       gshell.asm):04151                  ldd   WNDWPATH
1CC9 3416             (       gshell.asm):04152                  pshs  d,X
1CCB 171718           (       gshell.asm):04153                  lbsr  GT.MOUSE
1CCE 3264             (       gshell.asm):04154                  leas  4,S
1CD0 CC0010           (       gshell.asm):04155                  ldd   #16
1CD3 EDE4             (       gshell.asm):04156                  std   ,S
1CD5 CE1241           (       gshell.asm):04157                  ldu   #DRIVETBL
1CD8 201B             (       gshell.asm):04158                  bra   SLCTDEV5
                      (       gshell.asm):04159         
1CDA 3406             (       gshell.asm):04160         SLCTDEV4 pshs  d
1CDC 8E0008           (       gshell.asm):04161                  ldx   #8
1CDF EC66             (       gshell.asm):04162                  ldd   8-2,S
1CE1 3416             (       gshell.asm):04163                  pshs  d,X
1CE3 17011C           (       gshell.asm):04164                  lbsr  TESTDBOX
1CE6 3266             (       gshell.asm):04165                  leas  6,S
1CE8 ED62             (       gshell.asm):04166                  std   2,S
1CEA 260D             (       gshell.asm):04167                  bne   SLCTDEV6
1CEC ECE4             (       gshell.asm):04168                  ldd   ,S
1CEE C30008           (       gshell.asm):04169                  addd  #8
1CF1 EDE4             (       gshell.asm):04170                  std   ,S
1CF3 EE4A             (       gshell.asm):04171                  ldu   FL.LINK,U
1CF5 EF7E             (       gshell.asm):04172         SLCTDEV5 stu   -2,S
1CF7 26E1             (       gshell.asm):04173                  bne   SLCTDEV4
1CF9 DC22             (       gshell.asm):04174         SLCTDEV6 ldd   WNDWPATH
1CFB 3406             (       gshell.asm):04175                  pshs  d
1CFD 1717AC           (       gshell.asm):04176                  lbsr  OWEND
1D00 3262             (       gshell.asm):04177                  leas  2,S
1D02 170372           (       gshell.asm):04178                  lbsr  MOUSENOW
1D05 EC62             (       gshell.asm):04179                  ldd   2,S
1D07 2704             (       gshell.asm):04180                  beq   SLCTDEV7
1D09 EC4C             (       gshell.asm):04181                  ldd   FL.FNAME,U
1D0B 2065             (       gshell.asm):04182                  bra   SLCTDEVX
                      (       gshell.asm):04183         
1D0D 4F               (       gshell.asm):04184         SLCTDEV7 clra  
1D0E 5F               (       gshell.asm):04185                  clrb  
1D0F 2061             (       gshell.asm):04186                  bra   SLCTDEVX
                      (       gshell.asm):04187         
1D11 3440             (       gshell.asm):04188         STEXCDVC pshs  U
1D13 CC0003           (       gshell.asm):04189                  ldd   #3
1D16 3406             (       gshell.asm):04190                  pshs  d
1D18 308C60           (       gshell.asm):04191                  leax  <SETEXEC,PC
1D1B DC22             (       gshell.asm):04192                  ldd   WNDWPATH
1D1D 3416             (       gshell.asm):04193                  pshs  d,X
1D1F 170617           (       gshell.asm):04194                  lbsr  OLAYGNBK
1D22 171085           (       gshell.asm):04195                  lbsr  CURSORON
1D25 308C6A           (       gshell.asm):04196                  leax  <PREVIOUS,PC
1D28 AFE4             (       gshell.asm):04197                  stx   ,S
1D2A 17F4ED           (       gshell.asm):04198                  lbsr  WTSTRLEN
1D2D 8E0555           (       gshell.asm):04199                  ldx   #XDIRNAME
1D30 AFE4             (       gshell.asm):04200                  stx   ,S
1D32 17F4FA           (       gshell.asm):04201                  lbsr  WRLNWCR
1D35 308C62           (       gshell.asm):04202                  leax  <NEW.MSG,PC
1D38 AFE4             (       gshell.asm):04203                  stx   ,S
1D3A 17F4DD           (       gshell.asm):04204                  lbsr  WTSTRLEN
1D3D 1706FE           (       gshell.asm):04205                  lbsr  INPUTCHK
1D40 3266             (       gshell.asm):04206                  leas  2+4,S
1D42 1F03             (       gshell.asm):04207                  tfr   D,U
1D44 EF7E             (       gshell.asm):04208                  stu   -2,S
1D46 272E             (       gshell.asm):04209                  beq   STEXCDV3
1D48 E6C4             (       gshell.asm):04210                  ldb   ,U
1D4A 272A             (       gshell.asm):04211                  beq   STEXCDV3
1D4C 3440             (       gshell.asm):04212                  pshs  U
1D4E 171080           (       gshell.asm):04213                  lbsr  CHGXDIR
1D51 EDE1             (       gshell.asm):04214                  std   ,S++
1D53 260C             (       gshell.asm):04215                  bne   STEXCDV1
1D55 8E0555           (       gshell.asm):04216                  ldx   #XDIRNAME
1D58 3450             (       gshell.asm):04217                  pshs  X,U
1D5A 171587           (       gshell.asm):04218                  lbsr  STRCPY
1D5D 3264             (       gshell.asm):04219                  leas  4,S
1D5F 2015             (       gshell.asm):04220                  bra   STEXCDV3
                      (       gshell.asm):04221         
1D61 1705B4           (       gshell.asm):04222         STEXCDV1 lbsr  KILLOLAY
1D64 ECA90431         (       gshell.asm):04223                  ldd   ERRNO,Y
1D68 3406             (       gshell.asm):04224                  pshs  D
1D6A 308C34           (       gshell.asm):04225                  leax  <CANTOPEN,PC
1D6D 3450             (       gshell.asm):04226                  pshs  X,U
1D6F 17F454           (       gshell.asm):04227                  lbsr  BUILDMSG
1D72 3266             (       gshell.asm):04228         SLCTDEVX leas  6,S
1D74 35C0             (       gshell.asm):04229                  puls  U,PC
                      (       gshell.asm):04230         
1D76 17059F           (       gshell.asm):04231         STEXCDV3 lbsr  KILLOLAY
1D79 35C0             (       gshell.asm):04232                  puls  U,PC
                      (       gshell.asm):04233         
1D7B 2053657420657865 (       gshell.asm):04234         SETEXEC  fcc   " Set execution folder "
     637574696F6E2066
     6F6C64657220
1D91 00               (       gshell.asm):04235                  fcb   NUL
                      (       gshell.asm):04236         
1D92 0A               (       gshell.asm):04237         PREVIOUS fcb   LF
1D93 507265763A20     (       gshell.asm):04238                  fcc   "Prev: "
1D99 00               (       gshell.asm):04239                  fcb   NUL
                      (       gshell.asm):04240         
1D9A 4E65773A2020     (       gshell.asm):04241         NEW.MSG  fcc   "New:  "
1DA0 00               (       gshell.asm):04242                  fcb   NUL
                      (       gshell.asm):04243         
1DA1 43616E2774206F70 (       gshell.asm):04244         CANTOPEN fcc   "Can't open "
     656E20
1DAC 2200             (       gshell.asm):04245                  fcb   '",NUL
                      (       gshell.asm):04246         
1DAE 17F37A           (       gshell.asm):04247         SUREQUI3 lbsr  TESTQUIT
1DB1 2643             (       gshell.asm):04248                  bne   SUREQUI2
1DB3 1703F2           (       gshell.asm):04249                  lbsr  SUREBOX8
1DB6 2008             (       gshell.asm):04250                  bra   SUREQUI4
                      (       gshell.asm):04251         
1DB8 17F370           (       gshell.asm):04252         SUREQUIT lbsr  TESTQUIT
1DBB 2639             (       gshell.asm):04253                  bne   SUREQUI2
1DBD 1703E3           (       gshell.asm):04254                  lbsr  SUREBOX7
1DC0 ED7E             (       gshell.asm):04255         SUREQUI4 std   -2,S
1DC2 2732             (       gshell.asm):04256                  beq   SUREQUI2
1DC4 CCFFFF           (       gshell.asm):04257                  ldd   #-1
1DC7 3406             (       gshell.asm):04258                  pshs  D
1DC9 17F383           (       gshell.asm):04259                  lbsr  TRYQUIT
1DCC EDE1             (       gshell.asm):04260                  std   ,S++
1DCE 2626             (       gshell.asm):04261                  bne   SUREQUI2
1DD0 103F0C           (       gshell.asm):04262                  os9   F$ID
1DD3 8E0693           (       gshell.asm):04263                  ldx   #DIRBUFER
1DD6 103F18           (       gshell.asm):04264                  os9   F$GPRDSC
1DD9 6D01             (       gshell.asm):04265                  tst   1,X
1DDB 2614             (       gshell.asm):04266                  bne   SUREQUI1
1DDD 10CE00FF         (       gshell.asm):04267                  lds   #$FF
1DE1 308C13           (       gshell.asm):04268                  leax  <EXITSHEL,PC Point to SHELL
1DE4 338C16           (       gshell.asm):04269                  leau  <IEQUALS,PC Point to 'i=/1'
1DE7 108E0005         (       gshell.asm):04270                  ldy   #PARMSIZE
                      (       gshell.asm):04271         * NOTE: WE SHOULD CHANGE SO THAT GSHELL RECORDS THE ORIGINAL WINDOW TYPE, AND
                      (       gshell.asm):04272         *  RESTORES IT AS WELL. IT SHOULD ALSO RESET PAUSE PROPERLY
1DEB CC0100           (       gshell.asm):04273                  ldd   #$0100     Chain to regular SHELL
1DEE 103F05           (       gshell.asm):04274                  os9   F$CHAIN
                      (       gshell.asm):04275         
1DF1 3406             (       gshell.asm):04276         SUREQUI1 pshs  D
1DF3 171901           (       gshell.asm):04277                  lbsr  EXIT
1DF6 39               (       gshell.asm):04278         SUREQUI2 rts   
                      (       gshell.asm):04279         
1DF7 7368656C6C       (       gshell.asm):04280         EXITSHEL fcc   "shell"
1DFC 0D               (       gshell.asm):04281                  fcb   CR
                      (       gshell.asm):04282         
1DFD 693D2F31         (       gshell.asm):04283         IEQUALS  fcc   "i=/1"
1E01 0D               (       gshell.asm):04284                  fcb   CR
                      (       gshell.asm):04285         
     0005             (       gshell.asm):04286         PARMSIZE equ   *-IEQUALS
                      (       gshell.asm):04287         
                      (       gshell.asm):04288         * Entry: 0-1,s = RTS address
                      (       gshell.asm):04289         *        2-3,s = Ptr to mouse packet
1E02 3440             (       gshell.asm):04290         TESTDBOX pshs  U
1E04 EE64             (       gshell.asm):04291                  ldu   4,S        Get ptr to mouse packet
1E06 AEC81C           (       gshell.asm):04292                  ldx   PT.WRX,U   Get
1E09 ECC81E           (       gshell.asm):04293                  ldd   PT.WRY,U
1E0C 3416             (       gshell.asm):04294                  pshs  d,X
1E0E EC6A             (       gshell.asm):04295                  ldd   10,S
1E10 10A362           (       gshell.asm):04296                  cmpd  2,S
1E13 2C3A             (       gshell.asm):04297                  bge   TESTDBO1
1E15 D35B             (       gshell.asm):04298                  addd  BXOFFSET
1E17 10A362           (       gshell.asm):04299                  cmpd  2,S
1E1A 2D33             (       gshell.asm):04300                  blt   TESTDBO1
1E1C EC6C             (       gshell.asm):04301                  ldd   12,S
1E1E 10A3E4           (       gshell.asm):04302                  cmpd  ,S
1E21 2C2C             (       gshell.asm):04303                  bge   TESTDBO1
1E23 C30008           (       gshell.asm):04304                  addd  #8
1E26 10A3E4           (       gshell.asm):04305                  cmpd  ,S
1E29 2D24             (       gshell.asm):04306                  blt   TESTDBO1
1E2B EC6C             (       gshell.asm):04307                  ldd   12,S
1E2D C30002           (       gshell.asm):04308                  addd  #2
1E30 3406             (       gshell.asm):04309                  pshs  d
1E32 EC6C             (       gshell.asm):04310                  ldd   12,S
1E34 C30002           (       gshell.asm):04311                  addd  #2
1E37 3406             (       gshell.asm):04312                  pshs  d
1E39 DC22             (       gshell.asm):04313                  ldd   WNDWPATH
1E3B 3406             (       gshell.asm):04314                  pshs  d
1E3D 1716E3           (       gshell.asm):04315                  lbsr  SETDPTR
1E40 17170F           (       gshell.asm):04316                  lbsr  FFILL
1E43 8E000A           (       gshell.asm):04317                  ldx   #10        Sleep for 10 ticks
1E46 103F0A           (       gshell.asm):04318                  os9   F$SLEEP
1E49 3266             (       gshell.asm):04319                  leas  6,S
1E4B C601             (       gshell.asm):04320                  ldb   #1
1E4D 2001             (       gshell.asm):04321                  bra   TESTDBO2
                      (       gshell.asm):04322         
1E4F 5F               (       gshell.asm):04323         TESTDBO1 clrb  
1E50 4F               (       gshell.asm):04324         TESTDBO2 clra  
1E51 3264             (       gshell.asm):04325                  leas  4,S
1E53 35C0             (       gshell.asm):04326                  puls  U,PC
                      (       gshell.asm):04327         
1E55 E663             (       gshell.asm):04328         VIEWSLCT ldb   3,S        Get menu item #
1E57 2713             (       gshell.asm):04329                  beq   VIEWEXIT   None selected, exit
1E59 C103             (       gshell.asm):04330                  cmpb  #3         Higher than the 3 we ignore (HOW WOULD THIS HAPPEN?)
1E5B 220F             (       gshell.asm):04331                  bhi   VIEWEXIT
1E5D CB05             (       gshell.asm):04332                  addb  #5         Adjust to match OS9 window types
1E5F D102             (       gshell.asm):04333                  cmpb  DEFWTYPE+1 Same as current type?
1E61 2709             (       gshell.asm):04334                  beq   VIEWEXIT   Yes, don't do anything
1E63 D702             (       gshell.asm):04335                  stb   DEFWTYPE+1 Save new type
1E65 D700             (       gshell.asm):04336                  stb   WIPED      Flag that we have to redo dir bar
1E67 8D04             (       gshell.asm):04337                  bsr   SETVIEW    Do changes to the VIEW menu for the new type
1E69 1702DB           (       gshell.asm):04338                  lbsr  SETHLRES   Change current GSHELL window to new type
1E6C 39               (       gshell.asm):04339         VIEWEXIT rts   
                      (       gshell.asm):04340         
                      (       gshell.asm):04341         * Update VIEW menu options
1E6D C601             (       gshell.asm):04342         SETVIEW  ldb   #1
1E6F 8E0250           (       gshell.asm):04343                  ldx   #ITM.LRES+MI.ENBL
1E72 E784             (       gshell.asm):04344                  stb   ,X
1E74 E78815           (       gshell.asm):04345                  stb   MI.SIZ,X
1E77 E7882A           (       gshell.asm):04346                  stb   MI.SIZ*2,X
1E7A D602             (       gshell.asm):04347                  ldb   DEFWTYPE+1
1E7C C005             (       gshell.asm):04348                  subb  #5
1E7E 5A               (       gshell.asm):04349         SETVIEW1 decb  
1E7F 2705             (       gshell.asm):04350                  beq   SETVIEW2
1E81 308815           (       gshell.asm):04351                  leax  MI.SIZ,X
1E84 20F8             (       gshell.asm):04352                  bra   SETVIEW1
                      (       gshell.asm):04353         
1E86 6F84             (       gshell.asm):04354         SETVIEW2 clr   ,X
1E88 39               (       gshell.asm):04355                  rts   
                      (       gshell.asm):04356         
                      (       gshell.asm):04357         * Select off of the TANDY menu
                      (       gshell.asm):04358         * Entry: 0-1,s = RTS parameter
                      (       gshell.asm):04359         *        2-3,s = Menu item # selected
1E89                  (       gshell.asm):04360         TNDYSLCT
                      (       gshell.asm):04361                  IFNE  H6309
                      (       gshell.asm):04362                  clrd             Put 4 zero bytes on stack
                      (       gshell.asm):04363                  ELSE
1E89 4F               (       gshell.asm):04364                  clra
1E8A 5F               (       gshell.asm):04365                  clrb
                      (       gshell.asm):04366                  ENDC
1E8B 3406             (       gshell.asm):04367                  pshs  D
1E8D 3406             (       gshell.asm):04368                  pshs  D
1E8F E667             (       gshell.asm):04369                  ldb   7,S        Get 1 byte version of menu item selected
1E91 5A               (       gshell.asm):04370                  decb  
1E92 275C             (       gshell.asm):04371                  beq   SELCALC    1=Calculator
1E94 5A               (       gshell.asm):04372                  decb  
1E95 271C             (       gshell.asm):04373                  beq   SELCLOCK   2=Clock
1E97 5A               (       gshell.asm):04374                  decb  
1E98 2720             (       gshell.asm):04375                  beq   SELCAL     3=Calender
1E9A 5A               (       gshell.asm):04376                  decb  
1E9B 2724             (       gshell.asm):04377                  beq   SELCNTRL   4=Control Panel
1E9D 5A               (       gshell.asm):04378                  decb  
1E9E 2726             (       gshell.asm):04379                  beq   SELPRNTR   5=Printer control panel
1EA0 5A               (       gshell.asm):04380                  decb  
1EA1 2728             (       gshell.asm):04381                  beq   SELPORT    6=Serial port control panel
1EA3 5A               (       gshell.asm):04382                  decb  
1EA4 2731             (       gshell.asm):04383                  beq   SELHELP    7=Help command
1EA6 5A               (       gshell.asm):04384                  decb  
1EA7 2659             (       gshell.asm):04385                  bne   TNDYEXIT   9 or greater, exit Tandy menu
1EA9 5C               (       gshell.asm):04386                  incb             Save ???
1EAA E761             (       gshell.asm):04387                  stb   1,S
1EAC C60D             (       gshell.asm):04388                  ldb   #IC.SHELL  Execute resizable window SHELL command
1EAE 8E031D           (       gshell.asm):04389                  ldx   #SHELLNAM  Point to word "shell" with NUL
1EB1 2042             (       gshell.asm):04390                  bra   TNDYEXEC   Go execute it
                      (       gshell.asm):04391         
                      (       gshell.asm):04392         * Clock from Tandy menu selected
1EB3 C60B             (       gshell.asm):04393         SELCLOCK ldb   #IC.GCLOK  Clock forked process ID #
1EB5 8E032E           (       gshell.asm):04394                  ldx   #GCLOCKNM  Point to name of clock program
1EB8 203B             (       gshell.asm):04395                  bra   TNDYEXEC   Go execute it
                      (       gshell.asm):04396         
                      (       gshell.asm):04397         * Calendar from Tandy menu selected
1EBA C60C             (       gshell.asm):04398         SELCAL   ldb   #IC.GCAL   Execute GCalendar
1EBC 8E0335           (       gshell.asm):04399                  ldx   #GCALNAM
1EBF 2034             (       gshell.asm):04400                  bra   TNDYEXEC
                      (       gshell.asm):04401         
                      (       gshell.asm):04402         * Control panel selected
1EC1 8E033A           (       gshell.asm):04403         SELCNTRL ldx   #CONTRLNM
1EC4 2008             (       gshell.asm):04404                  bra   TNDYEXC1
                      (       gshell.asm):04405         
                      (       gshell.asm):04406         * Printer panel selected
1EC6 8E0342           (       gshell.asm):04407         SELPRNTR ldx   #GPRINTNM
1EC9 2003             (       gshell.asm):04408                  bra   TNDYEXC1
                      (       gshell.asm):04409         
                      (       gshell.asm):04410         * Serial ports panel selected
1ECB 8E0349           (       gshell.asm):04411         SELPORT  ldx   #GPORTNAM
1ECE 3410             (       gshell.asm):04412         TNDYEXC1 pshs  X          Save ptr to program name to fork
1ED0 1700FD           (       gshell.asm):04413                  lbsr  EXCOPOPR
1ED3 3262             (       gshell.asm):04414                  leas  2,S
1ED5 202B             (       gshell.asm):04415                  bra   TNDYEXIT
                      (       gshell.asm):04416         
1ED7 5C               (       gshell.asm):04417         SELHELP  incb  
1ED8 3406             (       gshell.asm):04418                  pshs  D
1EDA 9E34             (       gshell.asm):04419                  ldx   SELECTED
1EDC 2706             (       gshell.asm):04420                  beq   SELHELP1
1EDE EC0C             (       gshell.asm):04421                  ldd   FL.FNAME,X
1EE0 ED62             (       gshell.asm):04422                  std   2,S
1EE2 6C65             (       gshell.asm):04423                  inc   5,S
                      (       gshell.asm):04424         
1EE4 8E034F           (       gshell.asm):04425         SELHELP1 ldx   #HELPNAM
1EE7 3410             (       gshell.asm):04426                  pshs  X
1EE9 17012C           (       gshell.asm):04427                  lbsr  EXECPRGM
1EEC 3264             (       gshell.asm):04428                  leas  4,S
1EEE 2012             (       gshell.asm):04429                  bra   TNDYEXIT
                      (       gshell.asm):04430         
1EF0 C60A             (       gshell.asm):04431         SELCALC  ldb   #IC.GCALC
1EF2 8E0328           (       gshell.asm):04432                  ldx   #GCALCNAM
                      (       gshell.asm):04433         
                      (       gshell.asm):04434         * Execute resizable window, call program
                      (       gshell.asm):04435         * Entry: B=IC.*  id number
                      (       gshell.asm):04436         *        X=Pointer to program to call (no parameters at this point)
1EF5 3406             (       gshell.asm):04437         TNDYEXEC pshs  D          Preserve id #
1EF7 17F161           (       gshell.asm):04438                  lbsr  FNDIDESC   Find Ptr to ID descriptor we are looking for
1EFA ED64             (       gshell.asm):04439                  std   2+2,S      Save on stack
1EFC AFE4             (       gshell.asm):04440                  stx   ,S         Save ptr to program name
1EFE 8D05             (       gshell.asm):04441                  bsr   EXCICOND   Go execute
1F00 3262             (       gshell.asm):04442                  leas  2,S        Eat temp stack
1F02 3264             (       gshell.asm):04443         TNDYEXIT leas  4,S        Eat rest of temp stack & return
1F04 39               (       gshell.asm):04444                  rts   
                      (       gshell.asm):04445         
                      (       gshell.asm):04446         *Execute an IC.* program
                      (       gshell.asm):04447         * Entry: 0-1,s  RTS address
                      (       gshell.asm):04448         *        2-3,s  Ptr to name of program to be called
1F05 3440             (       gshell.asm):04449         EXCICOND pshs  U          Preserve U
1F07 EC64             (       gshell.asm):04450                  ldd   4,S        Get ptr to program to be forked
1F09 3406             (       gshell.asm):04451                  pshs  D          Add entry to our internal table of programs we have forked
1F0B 17E7EC           (       gshell.asm):04452                  lbsr  SETPDESC
1F0E EDE4             (       gshell.asm):04453                  std   ,S         Save ptr to current descriptor entry
1F10 10270094         (       gshell.asm):04454                  lbeq  EXCICON9   None (couldn't make), clear 1st byte of parms buffer/exit
1F14 1F03             (       gshell.asm):04455                  tfr   D,U        Move ptr to U
1F16 17F3D2           (       gshell.asm):04456                  lbsr  LINKLOAD   Shut mouse off/Hourglass, link or load program in question
1F19 EDE1             (       gshell.asm):04457                  std   ,S++       Did we have an error?
1F1B 10270084         (       gshell.asm):04458                  lbeq  EXCICON8   Yes, kill our GD.* process link, window (if any), exit
1F1F 0D20             (       gshell.asm):04459                  tst   RAMSIZE    Check our RAM size
1F21 263A             (       gshell.asm):04460                  bne   EXCICON4   >128k, skip ahead
1F23 EC68             (       gshell.asm):04461                  ldd   8,S        128k
1F25 3406             (       gshell.asm):04462                  pshs  D
1F27 3440             (       gshell.asm):04463                  pshs  U
1F29 170565           (       gshell.asm):04464                  lbsr  ISCR128K   Do special 128k processing for new window
1F2C 3264             (       gshell.asm):04465                  leas  4,S        Eat stack
1F2E ED7E             (       gshell.asm):04466                  std   -2,S       Check if new window create successful
1F30 2707             (       gshell.asm):04467                  beq   EXCICON1   Yes, continue
1F32 2E55             (       gshell.asm):04468                  bgt   EXCICON6   Screen type of 7 or 8, can't create in 128k
1F34 170210           (       gshell.asm):04469                  lbsr  SETHLRES   Reinit main window, then print 'can't create' error
1F37 2050             (       gshell.asm):04470                  bra   EXCICON6
                      (       gshell.asm):04471         
1F39 EC66             (       gshell.asm):04472         EXCICON1 ldd   6,S        ???
1F3B 2710             (       gshell.asm):04473                  beq   EXCICON2
1F3D 8E0004           (       gshell.asm):04474                  ldx   #WT.DBOX   Double box border
1F40 D623             (       gshell.asm):04475                  ldb   WNDWPATH+1 Window path
1F42 3416             (       gshell.asm):04476                  pshs  D,X        Save for routine
1F44 171516           (       gshell.asm):04477                  lbsr  ST.WNSET   Set window to double box
1F47 3264             (       gshell.asm):04478                  leas  4,S        Eat temp stack
1F49 ED7E             (       gshell.asm):04479                  std   -2,S       Error on Window Set?
1F4B 260B             (       gshell.asm):04480                  bne   EXCICON3   Yes, reset window (?) and exit
1F4D 3406             (       gshell.asm):04481         EXCICON2 pshs  D          Save regs
1F4F 3406             (       gshell.asm):04482                  pshs  D
1F51 3440             (       gshell.asm):04483                  pshs  U          ?? Save ptr to process to fork
1F53 17012D           (       gshell.asm):04484                  lbsr  FORKWAIT   Go fork process
1F56 3266             (       gshell.asm):04485                  leas  6,S
1F58 1701EC           (       gshell.asm):04486         EXCICON3 lbsr  SETHLRES   Change current window type & exit
1F5B 2051             (       gshell.asm):04487                  bra   EXCICN10
                      (       gshell.asm):04488         
                      (       gshell.asm):04489         * >128k RAM for forking IC.* program
1F5D EC68             (       gshell.asm):04490         EXCICON4 ldd   8,S
1F5F 3406             (       gshell.asm):04491                  pshs  D
1F61 3440             (       gshell.asm):04492                  pshs  U
1F63 1708B9           (       gshell.asm):04493                  lbsr  ISCR512K   Go set up new window to fork program into
1F66 3264             (       gshell.asm):04494                  leas  4,S        Eat temp stack
1F68 ED7E             (       gshell.asm):04495                  std   -2,S       Successful window create?
1F6A 2D44             (       gshell.asm):04496                  blt   EXCICN11   No, report error
1F6C EC66             (       gshell.asm):04497                  ldd   6,S        Get double box window flag
1F6E 2710             (       gshell.asm):04498                  beq   EXCICON5   Not set, go straight to program fork
1F70 8E0004           (       gshell.asm):04499                  ldx   #WT.DBOX   Draw Double box window
1F73 EC4C             (       gshell.asm):04500                  ldd   GD.WPATH,U Get path # to window program is/will be running on
1F75 3416             (       gshell.asm):04501                  pshs  D,X
1F77 1714E3           (       gshell.asm):04502                  lbsr  ST.WNSET
1F7A 3264             (       gshell.asm):04503                  leas  4,S
1F7C ED7E             (       gshell.asm):04504                  std   -2,S
1F7E 2609             (       gshell.asm):04505                  bne   EXCICON6   Couldn't create double box window, report error
1F80 3440             (       gshell.asm):04506         EXCICON5 pshs  U          Save ptr to GD.* variables
1F82 17F3C3           (       gshell.asm):04507                  lbsr  FORKPROC   Fork program
1F85 EDE1             (       gshell.asm):04508                  std   ,S++
1F87 2625             (       gshell.asm):04509                  bne   EXCICN10   Successful fork, exit
1F89 DC22             (       gshell.asm):04510         EXCICON6 ldd   WNDWPATH   Print error on main window that we could not
1F8B 3406             (       gshell.asm):04511                  pshs  D          make a new window
1F8D 171521           (       gshell.asm):04512                  lbsr  SELECT
1F90 3262             (       gshell.asm):04513                  leas  2,S
1F92 308C6D           (       gshell.asm):04514                  leax  <CANTWIND,PC
1F95 3410             (       gshell.asm):04515         EXCICON7 pshs  X
1F97 17F26B           (       gshell.asm):04516                  lbsr  OLAYPRNT   Print message on overlay window (main screen)
1F9A ECC4             (       gshell.asm):04517                  ldd   GD.MNAME,U
1F9C EDE4             (       gshell.asm):04518                  std   ,S
1F9E 171258           (       gshell.asm):04519                  lbsr  F.UNLOAD   Unload program we tried to fork
1FA1 3262             (       gshell.asm):04520                  leas  2,S
1FA3 3440             (       gshell.asm):04521         EXCICON8 pshs  U
1FA5 17E685           (       gshell.asm):04522                  lbsr  KILPDESC   Yank entry out of current forked processes list
1FA8 3262             (       gshell.asm):04523         EXCICON9 leas  2,S
1FAA 6FA91083         (       gshell.asm):04524                  clr   PARMSBFR,Y Flag parameters buffer as empty & return
1FAE 35C0             (       gshell.asm):04525         EXCICN10 puls  U,PC
                      (       gshell.asm):04526         
1FB0 1083FFFF         (       gshell.asm):04527         EXCICN11 cmpd  #-1
1FB4 27D3             (       gshell.asm):04528                  beq   EXCICON6   If error flag=-1,"can't create new window" error
1FB6 308C02           (       gshell.asm):04529                  leax  <EXECTERM,PC "Execution terminated" error
1FB9 20DA             (       gshell.asm):04530                  bra   EXCICON7
                      (       gshell.asm):04531         
1FBB 457865637574696F (       gshell.asm):04532         EXECTERM fcc   "Execution terminated"
     6E207465726D696E
     61746564
1FCF 00               (       gshell.asm):04533                  fcb   NUL
                      (       gshell.asm):04534         
                      (       gshell.asm):04535         * Execute program in pop up window on main GSHELL screen?
1FD0 3440             (       gshell.asm):04536         EXCOPOPR pshs  U
1FD2 EC64             (       gshell.asm):04537                  ldd   4,S
1FD4 3406             (       gshell.asm):04538                  pshs  D
1FD6 17E721           (       gshell.asm):04539                  lbsr  SETPDESC   Allocate internal process descriptor table entry
1FD9 1F03             (       gshell.asm):04540                  tfr   D,U
1FDB EDE4             (       gshell.asm):04541                  std   ,S
1FDD 27C9             (       gshell.asm):04542                  beq   EXCICON9
1FDF 17F309           (       gshell.asm):04543                  lbsr  LINKLOAD
1FE2 EDE1             (       gshell.asm):04544                  std   ,S++
1FE4 27BD             (       gshell.asm):04545                  beq   EXCICON8
1FE6 3440             (       gshell.asm):04546                  pshs  U
1FE8 1702CB           (       gshell.asm):04547                  lbsr  OLAYWTBK
1FEB EDE1             (       gshell.asm):04548                  std   ,S++
1FED 27B4             (       gshell.asm):04549                  beq   EXCICON8
1FEF 8E0001           (       gshell.asm):04550                  ldx   #1
1FF2 D623             (       gshell.asm):04551                  ldb   WNDWPATH+1
1FF4 3416             (       gshell.asm):04552                  pshs  D,X
1FF6 1714F8           (       gshell.asm):04553                  lbsr  SCALESW
1FF9 3264             (       gshell.asm):04554                  leas  4,S
1FFB 4F               (       gshell.asm):04555                  clra  
1FFC 5F               (       gshell.asm):04556                  clrb  
1FFD 3406             (       gshell.asm):04557                  pshs  D
1FFF 5C               (       gshell.asm):04558                  incb  
2000 204A             (       gshell.asm):04559                  bra   EXECPRG3
                      (       gshell.asm):04560         
2002 43616E2774206F70 (       gshell.asm):04561         CANTWIND fcc   "Can't open new window"
     656E206E65772077
     696E646F77
2017 00               (       gshell.asm):04562                  fcb   NUL
                      (       gshell.asm):04563         
                      (       gshell.asm):04564         * Execute program
                      (       gshell.asm):04565         * Entry: 0-1,s = RTS address
                      (       gshell.asm):04566         *        2-3,s = Ptr to primary module name
                      (       gshell.asm):04567         *        4-5,s = Flag 0=Make overlay window, <>0 = no overlay window
                      (       gshell.asm):04568         *        6-7,s = Ptr to parameter to send?
2018 3440             (       gshell.asm):04569         EXECPRGM pshs  U
201A EC64             (       gshell.asm):04570                  ldd   4,S        Get ptr to primary module to execute
201C 3406             (       gshell.asm):04571                  pshs  D
201E 17E6D9           (       gshell.asm):04572                  lbsr  SETPDESC   Allocate a process table entry
2021 EDE4             (       gshell.asm):04573                  std   ,S
2023 273F             (       gshell.asm):04574                  beq   EXECPRG5   If primary module ptr empty, exit
2025 EEE4             (       gshell.asm):04575                  ldu   ,S         Get ptr to primary module name
2027 17F2C1           (       gshell.asm):04576                  lbsr  LINKLOAD   Attempt to link or load it
202A EDE1             (       gshell.asm):04577                  std   ,S++       Eat stack
202C 2731             (       gshell.asm):04578                  beq   EXECPRG4   Could not load/link, return process tbl mem & exit
202E EC66             (       gshell.asm):04579                  ldd   6,S        Get overlay window flag
2030 2709             (       gshell.asm):04580                  beq   EXECPRG1   If flag=0, don't do overlay window
2032 3440             (       gshell.asm):04581                  pshs  U
2034 170228           (       gshell.asm):04582                  lbsr  OLAYBLWT
2037 8D32             (       gshell.asm):04583                  bsr   NOMOUSE
2039 3262             (       gshell.asm):04584                  leas  2,S
203B EC68             (       gshell.asm):04585         EXECPRG1 ldd   8,S
203D 2707             (       gshell.asm):04586                  beq   EXECPRG2
203F 3406             (       gshell.asm):04587                  pshs  D
2041 17F515           (       gshell.asm):04588                  lbsr  STPREFIX
2044 3262             (       gshell.asm):04589                  leas  2,S
                      (       gshell.asm):04590         
2046 EC6A             (       gshell.asm):04591         EXECPRG2 ldd   10,S
2048 3406             (       gshell.asm):04592                  pshs  D
204A EC68             (       gshell.asm):04593                  ldd   8,S
                      (       gshell.asm):04594         
204C 3406             (       gshell.asm):04595         EXECPRG3 pshs  d
204E 3440             (       gshell.asm):04596                  pshs  U
2050 8D31             (       gshell.asm):04597                  bsr   FORKWAIT
2052 3406             (       gshell.asm):04598                  pshs  d
2054 8D21             (       gshell.asm):04599                  bsr   MOUSENOW
2056 3506             (       gshell.asm):04600                  puls  d
2058 3266             (       gshell.asm):04601                  leas  6,S
205A 170A3D           (       gshell.asm):04602                  lbsr  ResetPal   Reset palettes to GSHPAL in case CONTROL was called.
205D 35C0             (       gshell.asm):04603                  puls  U,PC
                      (       gshell.asm):04604         
205F 3440             (       gshell.asm):04605         EXECPRG4 pshs  U
2061 17E5C9           (       gshell.asm):04606                  lbsr  KILPDESC   Kill the process table entry we had allocated
2064 3262             (       gshell.asm):04607         EXECPRG5 leas  2,S        Exit with error flag set
2066 CCFFFF           (       gshell.asm):04608                  ldd   #-1
2069 35C0             (       gshell.asm):04609                  puls  U,PC
                      (       gshell.asm):04610         
206B DC22             (       gshell.asm):04611         NOMOUSE  ldd   WNDWPATH
206D 3406             (       gshell.asm):04612                  pshs  d
206F 170D4E           (       gshell.asm):04613                  lbsr  GCSETOFF
2072 170D78           (       gshell.asm):04614                  lbsr  MOUSOFF
2075 3586             (       gshell.asm):04615                  puls  d,PC
                      (       gshell.asm):04616         
2077 DC22             (       gshell.asm):04617         MOUSENOW ldd   WNDWPATH   Get path to gshell window
2079 3406             (       gshell.asm):04618                  pshs  d          Save it
207B 170D3C           (       gshell.asm):04619                  lbsr  CRSRAROW   Set gfx cursor to arrow
207E 170D70           (       gshell.asm):04620                  lbsr  INITMOUS   Set mouse parms
2081 3586             (       gshell.asm):04621                  puls  d,PC
                      (       gshell.asm):04622         
2083 3440             (       gshell.asm):04623         FORKWAIT pshs  U
2085 EE64             (       gshell.asm):04624                  ldu   4,S
2087 34C0             (       gshell.asm):04625                  pshs  U,PC
2089 17F2BC           (       gshell.asm):04626                  lbsr  FORKPROC   Fork process
208C EDE1             (       gshell.asm):04627                  std   ,S++       Successful?
208E 272F             (       gshell.asm):04628                  beq   FORKWAI3   No, flag error & kill process descriptor entry
2090 4F               (       gshell.asm):04629         FORKWAI1 clra             Succesful - clear received signal
2091 5F               (       gshell.asm):04630                  clrb  
2092 DD1C             (       gshell.asm):04631                  std   RECDSGNL
2094 3440             (       gshell.asm):04632                  pshs  U
2096 17F401           (       gshell.asm):04633                  lbsr  HNDLWAIT   Handle waiting while forked process runs
2099 3262             (       gshell.asm):04634                  leas  2,S
209B EC46             (       gshell.asm):04635                  ldd   GD.STATS,U Get child's exit signal
209D 1083FFFF         (       gshell.asm):04636                  cmpd  #-1        If -1, try waiting again
20A1 27ED             (       gshell.asm):04637                  beq   FORKWAI1
20A3 EDE4             (       gshell.asm):04638                  std   ,S         Save signal
20A5 EC68             (       gshell.asm):04639                  ldd   8,S
20A7 2729             (       gshell.asm):04640                  beq   FORKWAI5
20A9 EC6A             (       gshell.asm):04641                  ldd   10,S
20AB 2717             (       gshell.asm):04642                  beq   FORKWAI4
20AD ECE4             (       gshell.asm):04643                  ldd   ,S
20AF 2613             (       gshell.asm):04644                  bne   FORKWAI4
20B1 8E03FB           (       gshell.asm):04645                  ldx   #PRESSMSG  "Press any key" message
20B4 3410             (       gshell.asm):04646                  pshs  X
20B6 17F176           (       gshell.asm):04647                  lbsr  WRLNWCR
20B9 3262             (       gshell.asm):04648                  leas  2,S
20BB 8D17             (       gshell.asm):04649                  bsr   WAITPSIG   Wait for signal
20BD 2005             (       gshell.asm):04650                  bra   FORKWAI4
                      (       gshell.asm):04651         
20BF CCFFFF           (       gshell.asm):04652         FORKWAI3 ldd   #-1        Flag error
20C2 EDE4             (       gshell.asm):04653                  std   ,S
20C4 3440             (       gshell.asm):04654         FORKWAI4 pshs  U
20C6 17E564           (       gshell.asm):04655                  lbsr  KILPDESC   Kill process descriptor entry
20C9 3262             (       gshell.asm):04656                  leas  2,S
20CB 0D20             (       gshell.asm):04657                  tst   RAMSIZE    Only 128k?
20CD 2603             (       gshell.asm):04658                  bne   FORKWAI5   No, exit
20CF 170EBF           (       gshell.asm):04659                  lbsr  INITSCRN   Yes, reinit screen before exiting
20D2 35C6             (       gshell.asm):04660         FORKWAI5 puls  d,U,PC
                      (       gshell.asm):04661         
20D4 17E12B           (       gshell.asm):04662         WAITPSIG lbsr  SETSGNLS   Reset mouse & keyboard signals
20D7 DC1C             (       gshell.asm):04663                  ldd   RECDSGNL   Get current signal (could be dirupdate from SETSGNLS)
20D9 270D             (       gshell.asm):04664                  beq   WAITPSLP   None, sleep for one.
20DB C10C             (       gshell.asm):04665                  cmpb  #DIRSIG    Queued Dir update signal?
20DD 2708             (       gshell.asm):04666                  beq   WAITPSL2   Yes, sleep till next signal
20DF 8D3A             (       gshell.asm):04667                  bsr   FORKWTST   Check for key press, abort or interrupt signal
20E1 26F1             (       gshell.asm):04668                  bne   WAITPSIG   Different signal, wait for a different one
20E3 8D1C             (       gshell.asm):04669                  bsr   FORKWSUB   Go read a key from current window
20E5 20ED             (       gshell.asm):04670                  bra   WAITPSIG   Now wait for signal again
                      (       gshell.asm):04671         
20E7 5F               (       gshell.asm):04672         WAITPSL2 clrb  
20E8 1F01             (       gshell.asm):04673         WAITPSLP tfr   d,x        Sleep till we receive a signal
20EA 103F0A           (       gshell.asm):04674                  os9   F$SLEEP
20ED 8D2C             (       gshell.asm):04675                  bsr   FORKWTST   Have signal, check it out
20EF 2602             (       gshell.asm):04676                  bne   WAITPRSX   Not key, abort or interrupt, skip ahead
20F1 8D0E             (       gshell.asm):04677                  bsr   FORKWSUB   If one of those, eat key from kybd buffer 1st
20F3 DC22             (       gshell.asm):04678         WAITPRSX ldd   <WNDWPATH  Release signals for window
20F5 3406             (       gshell.asm):04679                  pshs  d
20F7 17130A           (       gshell.asm):04680                  lbsr  ST.RELEA
20FA 3262             (       gshell.asm):04681                  leas  2,S
                      (       gshell.asm):04682                  IFNE  H6309
                      (       gshell.asm):04683                  clrd             Clear out signal received & return
                      (       gshell.asm):04684                  ELSE
20FC 4F               (       gshell.asm):04685                  clra
20FD 5F               (       gshell.asm):04686                  clrb
                      (       gshell.asm):04687                  ENDC
20FE DD1C             (       gshell.asm):04688                  std   <RECDSGNL
2100 39               (       gshell.asm):04689                  rts   
                      (       gshell.asm):04690         
2101 6FE2             (       gshell.asm):04691         FORKWSUB clr   ,-S
2103 DC22             (       gshell.asm):04692                  ldd   WNDWPATH
2105 340E             (       gshell.asm):04693                  pshs  d,DP
2107 170C11           (       gshell.asm):04694                  lbsr  PAUSECHO   Shut echo & pause off on current window
210A CC0001           (       gshell.asm):04695                  ldd   #1
210D EDE4             (       gshell.asm):04696                  std   ,S
210F DC22             (       gshell.asm):04697                  ldd   WNDWPATH
2111 3062             (       gshell.asm):04698                  leax  2,S
2113 3416             (       gshell.asm):04699                  pshs  d,X
2115 17113D           (       gshell.asm):04700                  lbsr  I.READ     Read 1 char for current window
2118 3268             (       gshell.asm):04701                  leas  8,S
211A 39               (       gshell.asm):04702                  rts   
                      (       gshell.asm):04703         
                      (       gshell.asm):04704         * Received signal - Set for BEQ if keyboard, interrupt or abort signal, else
                      (       gshell.asm):04705         *   BNE
211B DC1C             (       gshell.asm):04706         FORKWTST ldd   <RECDSGNL  Get last received signal
211D 0F1C             (       gshell.asm):04707                  clr   <RECDSGNL  Clear out old signal code
211F 0F1D             (       gshell.asm):04708                  clr   <RECDSGNL+1
2121 C10B             (       gshell.asm):04709                  cmpb  #KYBDSGNL  Key pressed?
2123 2706             (       gshell.asm):04710                  beq   FORKWTEX   Yes, return
2125 C102             (       gshell.asm):04711                  cmpb  #S$ABORT   Abort signal?
2127 2702             (       gshell.asm):04712                  beq   FORKWTEX   Yes, return
2129 C103             (       gshell.asm):04713                  cmpb  #S$INTRPT  Interrupt signal, return
212B 39               (       gshell.asm):04714         FORKWTEX rts   
                      (       gshell.asm):04715         
212C EC62             (       gshell.asm):04716         DRAWABOX ldd   2,S
212E AE64             (       gshell.asm):04717                  ldx   4,S
2130 3416             (       gshell.asm):04718                  pshs  d,X
2132 DC22             (       gshell.asm):04719                  ldd   WNDWPATH
2134 3406             (       gshell.asm):04720                  pshs  D
2136 1713EA           (       gshell.asm):04721                  lbsr  SETDPTR
2139 DC5B             (       gshell.asm):04722                  ldd   BXOFFSET
213B ED62             (       gshell.asm):04723                  std   2,S
213D C608             (       gshell.asm):04724                  ldb   #8
213F ED64             (       gshell.asm):04725                  std   4,S
2141 1713DB           (       gshell.asm):04726                  lbsr  RBOX
2144 3266             (       gshell.asm):04727                  leas  6,S
2146 39               (       gshell.asm):04728                  rts   
                      (       gshell.asm):04729         
                      (       gshell.asm):04730         *Change current window type (from VIEW menu)
2147 CC0004           (       gshell.asm):04731         SETHLRES ldd   #PTR.SLP   Set mouse cursor to hourglass
214A 3406             (       gshell.asm):04732                  pshs  d
214C 8E00CA           (       gshell.asm):04733                  ldx   #GRP.PTR
214F DC22             (       gshell.asm):04734                  ldd   WNDWPATH
2151 3416             (       gshell.asm):04735                  pshs  d,X
2153 17137E           (       gshell.asm):04736                  lbsr  GCSET
2156 1712AB           (       gshell.asm):04737                  lbsr  ST.RELEA   Release any signals
2159 170C91           (       gshell.asm):04738                  lbsr  MOUSOFF
215C 8E001E           (       gshell.asm):04739                  ldx   #30        Sleep for 1/2 second
215F 103F0A           (       gshell.asm):04740         SETHLRE1 os9   F$SLEEP
2162 3084             (       gshell.asm):04741                  leax  ,X         Did we finish sleeping?
2164 26F9             (       gshell.asm):04742                  bne   SETHLRE1   No, continue sleeping
2166 DC22             (       gshell.asm):04743         SETHLRE2 ldd   WNDWPATH   Get window path
2168 EDE4             (       gshell.asm):04744                  std   ,S
216A 17133A           (       gshell.asm):04745                  lbsr  DWEND      End current window
216D 3266             (       gshell.asm):04746                  leas  6,S
216F 17DF85           (       gshell.asm):04747                  lbsr  SETWINDW   Set new window
2172 17E7F7           (       gshell.asm):04748                  lbsr  CNTSCRNS   Figure out how many screens needed to hold all icons
2175 17F60C           (       gshell.asm):04749                  lbsr  UPDFITBL   Rebuild icon positions in file table (FL.* stuff)
2178 170E16           (       gshell.asm):04750                  lbsr  INITSCRN   Init new screen
217B 39               (       gshell.asm):04751                  rts   
                      (       gshell.asm):04752         
217C 2041726520796F75 (       gshell.asm):04753         AREYSURE fcc   " Are you sure?"
     20737572653F
218A 00               (       gshell.asm):04754                  fcb   NUL
                      (       gshell.asm):04755         
218B 0A               (       gshell.asm):04756         YES.NO   fcb   LF
218C 2020202020202020 (       gshell.asm):04757                  fcc   "        Yes!"
     59657321
2198 00               (       gshell.asm):04758                  fcb   NUL
                      (       gshell.asm):04759         
2199 CC000A           (       gshell.asm):04760         SUREBOX5 ldd   #10
219C 200D             (       gshell.asm):04761                  bra   SUREBOX9
                      (       gshell.asm):04762         
219E CC0405           (       gshell.asm):04763         SUREBOX6 ldd   #4*256+5
21A1 2008             (       gshell.asm):04764                  bra   SUREBOX9
                      (       gshell.asm):04765         
21A3 CC0000           (       gshell.asm):04766         SUREBOX7 ldd   #0
21A6 2003             (       gshell.asm):04767                  bra   SUREBOX9
                      (       gshell.asm):04768         
21A8 CC0605           (       gshell.asm):04769         SUREBOX8 ldd   #6*256+5
21AB DD59             (       gshell.asm):04770         SUREBOX9 std   SUREYPOS+1
21AD 3440             (       gshell.asm):04771                  pshs  U
21AF 17FEB9           (       gshell.asm):04772                  lbsr  NOMOUSE
21B2 CE0655           (       gshell.asm):04773                  ldu   #MOUSPCKT
21B5 C603             (       gshell.asm):04774                  ldb   #3
21B7 341E             (       gshell.asm):04775                  pshs  D,DP,X
21B9 5A               (       gshell.asm):04776                  decb  
21BA 3406             (       gshell.asm):04777                  pshs  D
21BC 8E0006           (       gshell.asm):04778                  ldx   #6
21BF C60E             (       gshell.asm):04779                  ldb   #14
21C1 3416             (       gshell.asm):04780                  pshs  D,X
21C3 9E58             (       gshell.asm):04781                  ldx   SUREYPOS
21C5 D65A             (       gshell.asm):04782                  ldb   SUREXPOS
21C7 3416             (       gshell.asm):04783                  pshs  D,X
21C9 8E0001           (       gshell.asm):04784                  ldx   #1
21CC D623             (       gshell.asm):04785                  ldb   WNDWPATH+1
21CE 3416             (       gshell.asm):04786                  pshs  D,X
21D0 1712AA           (       gshell.asm):04787                  lbsr  OWSET
21D3 CC0004           (       gshell.asm):04788                  ldd   #WT.DBOX
21D6 ED62             (       gshell.asm):04789                  std   2,S
21D8 171282           (       gshell.asm):04790                  lbsr  ST.WNSET
21DB 308C9E           (       gshell.asm):04791                  leax  <AREYSURE,PC
21DE AFE4             (       gshell.asm):04792                  stx   ,S
21E0 17F04C           (       gshell.asm):04793                  lbsr  WRLNWCR
21E3 308CA5           (       gshell.asm):04794                  leax  <YES.NO,PC
21E6 AFE4             (       gshell.asm):04795                  stx   ,S
21E8 17F02F           (       gshell.asm):04796                  lbsr  WTSTRLEN
21EB CC0010           (       gshell.asm):04797                  ldd   #16
21EE DD5B             (       gshell.asm):04798                  std   BXOFFSET
21F0 ED62             (       gshell.asm):04799                  std   0+2,S
21F2 C614             (       gshell.asm):04800                  ldb   #20
21F4 EDE4             (       gshell.asm):04801                  std   ,S
21F6 17FF33           (       gshell.asm):04802                  lbsr  DRAWABOX
21F9 17FE7B           (       gshell.asm):04803                  lbsr  MOUSENOW
21FC 17E003           (       gshell.asm):04804                  lbsr  SETSGNLS
21FF 0D1D             (       gshell.asm):04805                  tst   RECDSGNL+1
2201 2606             (       gshell.asm):04806                  bne   SUREBOX0
                      (       gshell.asm):04807                  IFNE  H6309
                      (       gshell.asm):04808                  tfr   0,x        Sleep for remainder of tick (ldx #0 for 6809)
                      (       gshell.asm):04809                  ELSE
2203 8E0000           (       gshell.asm):04810                  ldx   #$0000
                      (       gshell.asm):04811                  ENDC
2206 103F0A           (       gshell.asm):04812                  os9   F$SLEEP
2209 32E810           (       gshell.asm):04813         SUREBOX0 leas  16,S
220C DC1C             (       gshell.asm):04814                  ldd   RECDSGNL
220E C10A             (       gshell.asm):04815                  cmpb  #MOUSIGNL
2210 2619             (       gshell.asm):04816                  bne   SUREBOX1
2212 D623             (       gshell.asm):04817                  ldb   WNDWPATH+1
2214 3446             (       gshell.asm):04818                  pshs  d,U
2216 1711CD           (       gshell.asm):04819                  lbsr  GT.MOUSE
2219 CC0010           (       gshell.asm):04820                  ldd   #16
221C ED62             (       gshell.asm):04821                  std   2,S
221E C614             (       gshell.asm):04822                  ldb   #20
2220 EDE4             (       gshell.asm):04823                  std   ,S
2222 3440             (       gshell.asm):04824                  pshs  U
2224 17FBDB           (       gshell.asm):04825                  lbsr  TESTDBOX
2227 3266             (       gshell.asm):04826                  leas  6,S
2229 2022             (       gshell.asm):04827                  bra   SUREBOX4
                      (       gshell.asm):04828         
222B C10B             (       gshell.asm):04829         SUREBOX1 cmpb  #KYBDSGNL
222D 261C             (       gshell.asm):04830                  bne   SUREBOX3
222F C601             (       gshell.asm):04831                  ldb   #1
2231 3406             (       gshell.asm):04832                  pshs  D
2233 3064             (       gshell.asm):04833                  leax  4,S
2235 D623             (       gshell.asm):04834                  ldb   WNDWPATH+1
2237 3416             (       gshell.asm):04835                  pshs  D,X
2239 171019           (       gshell.asm):04836                  lbsr  I.READ
223C 3266             (       gshell.asm):04837                  leas  6,S
223E E662             (       gshell.asm):04838                  ldb   2,S
2240 C45F             (       gshell.asm):04839                  andb  #$5F
2242 C159             (       gshell.asm):04840                  cmpb  #'Y
2244 2605             (       gshell.asm):04841                  bne   SUREBOX3
2246 CC0001           (       gshell.asm):04842                  ldd   #1
2249 2002             (       gshell.asm):04843                  bra   SUREBOX4
                      (       gshell.asm):04844         
224B 4F               (       gshell.asm):04845         SUREBOX3 clra  
224C 5F               (       gshell.asm):04846                  clrb  
224D EDE4             (       gshell.asm):04847         SUREBOX4 std   ,S
224F DC22             (       gshell.asm):04848                  ldd   WNDWPATH
2251 3406             (       gshell.asm):04849                  pshs  D
2253 171256           (       gshell.asm):04850                  lbsr  OWEND
2256 17FE1E           (       gshell.asm):04851                  lbsr  MOUSENOW
2259 EC62             (       gshell.asm):04852                  ldd   2,S
225B 3265             (       gshell.asm):04853                  leas  5,S
225D 35C0             (       gshell.asm):04854                  puls  U,PC
                      (       gshell.asm):04855         
                      (       gshell.asm):04856         * Create overlay window for calling other programs
                      (       gshell.asm):04857         * Does White on Black
225F 3440             (       gshell.asm):04858         OLAYBLWT pshs  U
2261 C60D             (       gshell.asm):04859                  ldb   #13        Overlay window height of 13 lines
2263 3476             (       gshell.asm):04860                  pshs  D,X,Y,U
2265 8E004B           (       gshell.asm):04861                  ldx   #75        75 char wide window as default
2268 0D1B             (       gshell.asm):04862                  tst   FLAG640W   On 640 screen?
226A 2603             (       gshell.asm):04863                  bne   OLAYBLW2   Yes, continue on
226C 8E0025           (       gshell.asm):04864                  ldx   #37        320 screen, only do 37 char wide window
226F C609             (       gshell.asm):04865         OLAYBLW2 ldb   #9         Start Y of overlay at 9 chars down from top
2271 3416             (       gshell.asm):04866                  pshs  D,X
2273 8E0002           (       gshell.asm):04867                  ldx   #2         Start X of overlay at 2 chars from left
2276 DC22             (       gshell.asm):04868                  ldd   WNDWPATH
2278 3416             (       gshell.asm):04869                  pshs  D,X
227A 17123F           (       gshell.asm):04870                  lbsr  CWAREA     Change working area to outside of overlay
227D 5F               (       gshell.asm):04871                  clrb             Background color black
227E ED6E             (       gshell.asm):04872                  std   14,S
2280 C603             (       gshell.asm):04873                  ldb   #3         Foreground color (WHITE)
2282 ED6C             (       gshell.asm):04874                  std   12,S
2284 C60D             (       gshell.asm):04875                  ldb   #13        Y size of overlay
2286 ED6A             (       gshell.asm):04876                  std   10,S
2288 C64B             (       gshell.asm):04877                  ldb   #75        Width of overlay
228A 0D1B             (       gshell.asm):04878                  tst   FLAG640W
228C 2602             (       gshell.asm):04879                  bne   OLAYBLW4
228E C625             (       gshell.asm):04880                  ldb   #37        40 column width
2290 ED68             (       gshell.asm):04881         OLAYBLW4 std   8,S
2292 5F               (       gshell.asm):04882                  clrb  
2293 ED66             (       gshell.asm):04883                  std   6,S        Start Y=0
2295 ED64             (       gshell.asm):04884                  std   4,S        Start X=0
2297 0D20             (       gshell.asm):04885                  tst   RAMSIZE    Enough RAM to save overlay area?
2299 2701             (       gshell.asm):04886                  beq   OLAYBLW6   No, don't bother 
229B 5C               (       gshell.asm):04887                  incb             Flag to preserve contents
229C ED62             (       gshell.asm):04888         OLAYBLW6 std   2,S
229E 1711DC           (       gshell.asm):04889                  lbsr  OWSET      Do overlay window
22A1 32E810           (       gshell.asm):04890                  leas  16,S       Eat stack
22A4 ED7E             (       gshell.asm):04891                  std   -2,S       Save error code
22A6 2644             (       gshell.asm):04892                  bne   OLAYBERR
22A8 8E0004           (       gshell.asm):04893                  ldx   #WT.DBOX   Double box around window
22AB DC22             (       gshell.asm):04894                  ldd   WNDWPATH
22AD 3416             (       gshell.asm):04895                  pshs  D,X
22AF 1711AB           (       gshell.asm):04896                  lbsr  ST.WNSET   Draw double box
22B2 3264             (       gshell.asm):04897                  leas  4,S
22B4 202D             (       gshell.asm):04898                  bra   OLAYBLW7
                      (       gshell.asm):04899         
                      (       gshell.asm):04900         * Theoretically, 
22B6 3440             (       gshell.asm):04901         OLAYWTBK pshs  U
22B8 5F               (       gshell.asm):04902                  clrb             Black background
22B9 3406             (       gshell.asm):04903                  pshs  D
22BB C603             (       gshell.asm):04904                  ldb   #3         White foreground
22BD 3406             (       gshell.asm):04905                  pshs  D
22BF 9E0B             (       gshell.asm):04906                  ldx   WINDWSZY   Get window Y size
22C1 301D             (       gshell.asm):04907                  leax  -3,X       Drop by 3
22C3 DC24             (       gshell.asm):04908                  ldd   WINDWSZX   Get window X size
22C5 47               (       gshell.asm):04909                  asra             Divide by 2
22C6 56               (       gshell.asm):04910                  rorb  
22C7 3416             (       gshell.asm):04911                  pshs  D,X        Save X/Y sizes
22C9 5F               (       gshell.asm):04912                  clrb  
22CA 3406             (       gshell.asm):04913                  pshs  D
22CC 3406             (       gshell.asm):04914                  pshs  D
22CE 0D20             (       gshell.asm):04915                  tst   RAMSIZE
22D0 2701             (       gshell.asm):04916                  beq   OLAYWTB2
22D2 5C               (       gshell.asm):04917                  incb  
22D3 3406             (       gshell.asm):04918         OLAYWTB2 pshs  D          Save 'save screen' flag
22D5 DC22             (       gshell.asm):04919                  ldd   WNDWPATH
22D7 3406             (       gshell.asm):04920                  pshs  D
22D9 1711A1           (       gshell.asm):04921                  lbsr  OWSET
22DC 32E810           (       gshell.asm):04922                  leas  16,S       Eat stack
22DF ED7E             (       gshell.asm):04923                  std   -2,S
22E1 2609             (       gshell.asm):04924                  bne   OLAYBERR
22E3 EC64             (       gshell.asm):04925         OLAYBLW7 ldd   4,S
22E5 3406             (       gshell.asm):04926                  pshs  D
22E7 8D07             (       gshell.asm):04927                  bsr   OLAYIOPS
22E9 160212           (       gshell.asm):04928                  lbra  ISC128K5
                      (       gshell.asm):04929         
22EC                  (       gshell.asm):04930         OLAYBERR
                      (       gshell.asm):04931                  IFNE  H6309
                      (       gshell.asm):04932                  clrd  
                      (       gshell.asm):04933                  ELSE
22EC 4F               (       gshell.asm):04934                  clra
22ED 5F               (       gshell.asm):04935                  clrb
                      (       gshell.asm):04936                  ENDC
22EE 35C0             (       gshell.asm):04937                  puls  U,PC
                      (       gshell.asm):04938         
22F0 3440             (       gshell.asm):04939         OLAYIOPS pshs  U
22F2 EE64             (       gshell.asm):04940                  ldu   4,S
22F4 8D0E             (       gshell.asm):04941                  bsr   IOOPTSON
22F6 DC22             (       gshell.asm):04942                  ldd   WNDWPATH   Get GSHELL window path
22F8 ED4C             (       gshell.asm):04943                  std   GD.WPATH,U Save as window path for forked program
                      (       gshell.asm):04944                  IFNE  H6309
                      (       gshell.asm):04945                  clrd  
                      (       gshell.asm):04946                  ELSE
22FA 4F               (       gshell.asm):04947                  clra
22FB 5F               (       gshell.asm):04948                  clrb
                      (       gshell.asm):04949                  ENDC
22FC EDC818           (       gshell.asm):04950                  std   GD.SCRNO,U Screen # 0
22FF 5C               (       gshell.asm):04951                  incb  
2300 ED4E             (       gshell.asm):04952                  std   GD.DW.OW,U ??? to 1
2302 35C0             (       gshell.asm):04953                  puls  U,PC
                      (       gshell.asm):04954         
                      (       gshell.asm):04955         * Turn ON: page pause, echo, text cursor, and release any pending signals
2304 C601             (       gshell.asm):04956         IOOPTSON ldb   #1         Flag for turning stuff ON
2306 3406             (       gshell.asm):04957                  pshs  D
2308 D623             (       gshell.asm):04958                  ldb   WNDWPATH+1
230A 3406             (       gshell.asm):04959                  pshs  D
230C 170A0C           (       gshell.asm):04960                  lbsr  PAUSECHO   Turn pause & echo on
230F 170A98           (       gshell.asm):04961                  lbsr  CURSORON   Turn text cursor on
2312 1710EF           (       gshell.asm):04962                  lbsr  ST.RELEA   Release any pending signals
2315 3264             (       gshell.asm):04963                  leas  4,S
2317 39               (       gshell.asm):04964                  rts   
                      (       gshell.asm):04965         
2318 3440             (       gshell.asm):04966         KILLOLAY pshs  U
231A DC22             (       gshell.asm):04967                  ldd   WNDWPATH   Get path to current window
231C 3416             (       gshell.asm):04968                  pshs  D,X
231E 6F63             (       gshell.asm):04969                  clr   3,S
2320 1710E1           (       gshell.asm):04970                  lbsr  ST.RELEA   Release any pending signals
2323 170AC7           (       gshell.asm):04971                  lbsr  MOUSOFF    Shut mouse off
2326 171183           (       gshell.asm):04972                  lbsr  OWEND      Remove overlay window
2329 170C7B           (       gshell.asm):04973                  lbsr  FULLSCRN   Change working area to full screen
232C 1709EC           (       gshell.asm):04974                  lbsr  PAUSECHO
232F 170A7C           (       gshell.asm):04975                  lbsr  CURSROFF   Shut text cursor off
2332 170ABC           (       gshell.asm):04976                  lbsr  INITMOUS   Set mouse parms
2335 3264             (       gshell.asm):04977                  leas  4,S
2337 35C0             (       gshell.asm):04978                  puls  U,PC
                      (       gshell.asm):04979         
                      (       gshell.asm):04980         * Make double bordered overlay window with text in it
2339 3440             (       gshell.asm):04981         OLAYGNBK pshs  U
233B EE66             (       gshell.asm):04982                  ldu   6,S
233D 3274             (       gshell.asm):04983                  leas  -12,S      Make stack buffer
233F ECE810           (       gshell.asm):04984                  ldd   16,S
2342 3406             (       gshell.asm):04985                  pshs  D
2344 1710BD           (       gshell.asm):04986                  lbsr  ST.RELEA   Release any pending signals
2347 EFE4             (       gshell.asm):04987                  stu   ,S
2349 170F80           (       gshell.asm):04988                  lbsr  STRLEN     Get string length of prompt text
234C ED66             (       gshell.asm):04989                  std   4+2,S
234E 3262             (       gshell.asm):04990                  leas  2,s
                      (       gshell.asm):04991         *NOTE: SINCE THIS MULD DOES THE WIDTH OF A WINDOW, WHICH CAN NEVER GET PAST
                      (       gshell.asm):04992         * 106 CHARACTERS, WE SHOULD BE ABLE TO USE A STRAIGHT 8 BIT MUL, FOLLOWED BY
                      (       gshell.asm):04993         * AND ADDD#7 ON _BOTH_ THE 6809 & 6309 VERSIONS.
                      (       gshell.asm):04994                  IFNE  H6309
                      (       gshell.asm):04995                  muld  #6         Multiply by 6 (for 6 pixel font chars)
                      (       gshell.asm):04996                  ldd   #7         Add 7 extra pixels (border?)
                      (       gshell.asm):04997                  addr  w,d
                      (       gshell.asm):04998                  ELSE
2350 3470             (       gshell.asm):04999                  pshs  x,y,u
2352 8E0006           (       gshell.asm):05000                  ldx   #6
2355 1713C9           (       gshell.asm):05001                  lbsr  MUL16
2358 3440             (       gshell.asm):05002                  pshs  u
235A CC0007           (       gshell.asm):05003                  ldd   #7
235D E3E1             (       gshell.asm):05004                  addd  ,s++
235F 3570             (       gshell.asm):05005                  puls  x,y,u
                      (       gshell.asm):05006                  ENDC
2361 1705C6           (       gshell.asm):05007                  lbsr  DIVDX8     Divide by 8 (shift method) for # 8 pixel chars for window width
2364 C30003           (       gshell.asm):05008                  addd  #3         Add 3 more for borders?
2367 109324           (       gshell.asm):05009                  cmpd  WINDWSZX   Too big for current screen width?
236A 2503             (       gshell.asm):05010                  blo   OLAYGNB1   No, continue
236C DC24             (       gshell.asm):05011                  ldd   WINDWSZX   Yes, change to screen width-1
236E 5A               (       gshell.asm):05012                  decb  
236F ED66             (       gshell.asm):05013         OLAYGNB1 std   6,S        Save overlay window width
2371 ECE814           (       gshell.asm):05014                  ldd   20,S       ???
                      (       gshell.asm):05015                  IFNE  H6309
                      (       gshell.asm):05016                  incd  
                      (       gshell.asm):05017                  ELSE
2374 C30001           (       gshell.asm):05018                  addd  #$0001
                      (       gshell.asm):05019                  ENDC
2377 EDE814           (       gshell.asm):05020                  std   20,S
237A 30E4             (       gshell.asm):05021                  leax  ,S         Where we are going to store Y size
237C 3410             (       gshell.asm):05022                  pshs  X
237E 3064             (       gshell.asm):05023                  leax  4,S        Where we are going to store X size
2380 ECE812           (       gshell.asm):05024                  ldd   20-2,S
2383 3416             (       gshell.asm):05025                  pshs  D,X        Save path # & ptr to where to store X size
2385 171094           (       gshell.asm):05026                  lbsr  GT.SCSIZ   Get the current screen size
2388 3266             (       gshell.asm):05027                  leas  6,S        Eat ptrs & path duplicates
238A EC62             (       gshell.asm):05028                  ldd   2,S        Get X size of screen
238C 10A366           (       gshell.asm):05029                  cmpd  6,S
238F 2206             (       gshell.asm):05030                  bhi   OLAYGN05   If it is wider than the proposed overlay window, jump
2391 6A66             (       gshell.asm):05031                  dec   6,S        If not, bump X size of overlay down by one
2393 6F6B             (       gshell.asm):05032                  clr   11,S       ??? Clear flag
2395 200C             (       gshell.asm):05033                  bra   OLAYGN07
                      (       gshell.asm):05034         
2397 A366             (       gshell.asm):05035         OLAYGN05 subd  6,S        Get # of characters extra we have for window vs scrn width
2399 3406             (       gshell.asm):05036                  pshs  D
                      (       gshell.asm):05037         * NOTE: HARD CODE SINGLE SHIFT HERE! (6809 & 6309)
239B CC0002           (       gshell.asm):05038                  ldd   #2         Divide by 2 (to figure out start X coord of overlay)
239E 1712B8           (       gshell.asm):05039                  lbsr  CCDIV
23A1 ED6A             (       gshell.asm):05040                  std   10,S       Save start X coord
23A3 C603             (       gshell.asm):05041         OLAYGN07 ldb   #3         Save background palette #3 (white in new windint)
23A5 3406             (       gshell.asm):05042                  pshs  D
                      (       gshell.asm):05043         * NOTE: 6309 ONLY - USE DARK GREY? (PALETTE #1)
23A7 C601             (       gshell.asm):05044                  ldb   #1         Save foreground palette #1 (dark grey in new windint)
23A9 3406             (       gshell.asm):05045                  pshs  D
23AB ECE818           (       gshell.asm):05046                  ldd   24,S       Get Y size for border (usually 2)
23AE CB03             (       gshell.asm):05047                  addb  #3         ??? Add 3 for data entry lines (not including borders)
23B0 3406             (       gshell.asm):05048                  pshs  D          Save overlay Y size
23B2 EC6C             (       gshell.asm):05049                  ldd   12,S       Save X size of overlay
23B4 3406             (       gshell.asm):05050                  pshs  D
                      (       gshell.asm):05051         * Start Y coord for overlay
                      (       gshell.asm):05052         * NOTE: 6309 - Change to use W on first load, then SUBR
23B6 ECE81C           (       gshell.asm):05053                  ldd   28,S       Get Y size of border (usually 2)
23B9 C30003           (       gshell.asm):05054                  addd  #3         Add 3 for height added to overlay window for data entry
23BC 3406             (       gshell.asm):05055                  pshs  D
23BE EC6A             (       gshell.asm):05056                  ldd   10,S       Get height of screen      
23C0 A3E1             (       gshell.asm):05057                  subd  ,S++       Subtract overlay Y size
23C2 47               (       gshell.asm):05058                  asra             Divide result by 2 
23C3 56               (       gshell.asm):05059                  rorb  
23C4 3406             (       gshell.asm):05060                  pshs  D          Save Y start coord
23C6 ECE814           (       gshell.asm):05061                  ldd   20,S       Start X coord of overlay
23C9 3406             (       gshell.asm):05062                  pshs  D
23CB C601             (       gshell.asm):05063                  ldb   #1         Save switch to ON
23CD 3406             (       gshell.asm):05064                  pshs  D
23CF ECE81E           (       gshell.asm):05065                  ldd   30,S       Get path to window
23D2 3406             (       gshell.asm):05066                  pshs  D
23D4 1710A6           (       gshell.asm):05067                  lbsr  OWSET      Make overlay window
23D7 32E810           (       gshell.asm):05068                  leas  16,S       Eat temp stack
23DA ED7E             (       gshell.asm):05069                  std   -2,S       If error, eat stack & return
23DC 263C             (       gshell.asm):05070                  bne   OLAYGNB4
23DE 8E0004           (       gshell.asm):05071                  ldx   #WT.DBOX   Now make the overlay a double bordered box
23E1 ECE810           (       gshell.asm):05072                  ldd   18-2,S
23E4 3416             (       gshell.asm):05073                  pshs  D,X
23E6 171074           (       gshell.asm):05074                  lbsr  ST.WNSET
23E9 3264             (       gshell.asm):05075                  leas  4,S
23EB ECE814           (       gshell.asm):05076                  ldd   20,S       ??? Flag to indicate whether we add CR to text on overlay
23EE 271C             (       gshell.asm):05077                  beq   OLAYGNB2   or not. If 0, do NOT add CR.
23F0 EC64             (       gshell.asm):05078                  ldd   4,S
23F2 3406             (       gshell.asm):05079                  pshs  D          Save length of string to write
23F4 ECE812           (       gshell.asm):05080                  ldd   20-2,S
23F7 3446             (       gshell.asm):05081                  pshs  D,U        Save path # and ptr to text to write
23F9 170E96           (       gshell.asm):05082                  lbsr  I.WRITLN   Write text to double box window
23FC CC0001           (       gshell.asm):05083                  ldd   #1         Length to write=1
23FF ED64             (       gshell.asm):05084                  std   4,S
2401 308DED24         (       gshell.asm):05085                  leax  CRETURN,PC Write out a single CR
2405 AF62             (       gshell.asm):05086                  stx   2,S
2407 170E88           (       gshell.asm):05087                  lbsr  I.WRITLN
240A 200C             (       gshell.asm):05088                  bra   OLAYGNB3
                      (       gshell.asm):05089         
240C EC64             (       gshell.asm):05090         OLAYGNB2 ldd   4,S        Get length of string to write
240E 3406             (       gshell.asm):05091                  pshs  D          Save it
2410 ECE812           (       gshell.asm):05092                  ldd   20-2,S     Get ptr to text to write
2413 3446             (       gshell.asm):05093                  pshs  D,U
2415 170E61           (       gshell.asm):05094                  lbsr  I.WRITE    Write text out (NO CR)
2418 3266             (       gshell.asm):05095         OLAYGNB3 leas  6,S        Eat stack & exit
241A 326C             (       gshell.asm):05096         OLAYGNB4 leas  12,S
241C 35C0             (       gshell.asm):05097                  puls  U,PC
                      (       gshell.asm):05098         
                      (       gshell.asm):05099         * Pop up overlay window and ask for input from user
241E 3440             (       gshell.asm):05100         INPTSCRN pshs  U
2420 CC0001           (       gshell.asm):05101                  ldd   #1
2423 3406             (       gshell.asm):05102                  pshs  D
2425 AE66             (       gshell.asm):05103                  ldx   6,S
2427 DC22             (       gshell.asm):05104                  ldd   WNDWPATH
2429 3416             (       gshell.asm):05105                  pshs  D,X
242B 17FF0B           (       gshell.asm):05106                  lbsr  OLAYGNBK   Pop up overlay window & print prompt
242E 170979           (       gshell.asm):05107                  lbsr  CURSORON   Turn text cursor on
2431 8D0B             (       gshell.asm):05108                  bsr   INPUTCHK   Get input from user
2433 3266             (       gshell.asm):05109                  leas  2+4,S
2435 1F03             (       gshell.asm):05110                  tfr   D,U
2437 17FEDE           (       gshell.asm):05111                  lbsr  KILLOLAY   Shut off overlay prompt window
243A 1F30             (       gshell.asm):05112                  tfr   U,D
243C 35C0             (       gshell.asm):05113                  puls  U,PC
                      (       gshell.asm):05114         
243E DC22             (       gshell.asm):05115         INPUTCHK ldd   WNDWPATH   Get window path
2440 3406             (       gshell.asm):05116                  pshs  D
2442 17DDBD           (       gshell.asm):05117         INPTLOOP lbsr  SETSGNLS   Reset both mouse & keyboard signals
2445 DC1C             (       gshell.asm):05118                  ldd   RECDSGNL   Any signal received?
2447 2607             (       gshell.asm):05119                  bne   INPTSGNL   Yes, go process
2449 1F01             (       gshell.asm):05120                  tfr   d,x
244B 103F0A           (       gshell.asm):05121                  os9   F$SLEEP    Sleep for remainder of tick
244E DC1C             (       gshell.asm):05122                  ldd   RECDSGNL   Get signal code
2450 C103             (       gshell.asm):05123         INPTSGNL cmpb  #S$INTRPT  Interrupt signal?
2452 2719             (       gshell.asm):05124                  beq   INPTQUIT   Yes, abort input
2454 C102             (       gshell.asm):05125                  cmpb  #S$ABORT   Abort signal?
2456 2715             (       gshell.asm):05126                  beq   INPTQUIT   Yes, abort input
2458 C10A             (       gshell.asm):05127                  cmpb  #MOUSIGNL  Mouse signal?
245A 2604             (       gshell.asm):05128                  bne   INPTKYBD   No, skip ahead (must be keyboard)
                      (       gshell.asm):05129                  IFNE  H6309
                      (       gshell.asm):05130                  clrd             Mouse signal, abort input & return
                      (       gshell.asm):05131                  ELSE
245C 4F               (       gshell.asm):05132                  clra
245D 5F               (       gshell.asm):05133                  clrb
                      (       gshell.asm):05134                  ENDC
245E 200A             (       gshell.asm):05135                  bra   INPTEXIT
                      (       gshell.asm):05136         
2460 C10B             (       gshell.asm):05137         INPTKYBD cmpb  #KYBDSGNL  Keyboard signal?
                      (       gshell.asm):05138         * NOTE (6309 ONLY): IF LIVE DIRECTORY UPDATE IS ENABLED, WE WILL HAVE TO FLAG
                      (       gshell.asm):05139         *  IT HERE TO ACT ON _AFTER_ PROCESSING KEYBOARD INPUT
2462 26DE             (       gshell.asm):05140                  bne   INPTLOOP   No, ignore any other signals
2464 17FE9D           (       gshell.asm):05141                  lbsr  IOOPTSON   Turn pause,echo,text cursor on, release signals
2467 17EE0D           (       gshell.asm):05142                  lbsr  RDLN80CH   Go read in up to 80 chars
246A 3262             (       gshell.asm):05143         INPTEXIT leas  2,S        Eat stack & return
246C 39               (       gshell.asm):05144                  rts   
                      (       gshell.asm):05145         
                      (       gshell.asm):05146         * Waiting for user input, but received abort or interrupt signal
246D 170F94           (       gshell.asm):05147         INPTQUIT lbsr  ST.RELEA   Release any other pending signals
2470 CC0001           (       gshell.asm):05148                  ldd   #1         Read 1 char from window path
2473 3406             (       gshell.asm):05149                  pshs  D
2475 3062             (       gshell.asm):05150                  leax  2,S        Point to temp spot
2477 DC22             (       gshell.asm):05151                  ldd   WNDWPATH
2479 3416             (       gshell.asm):05152                  pshs  D,X
247B 170DD7           (       gshell.asm):05153                  lbsr  I.READ     Read 1 key from keyboard (hot key)
                      (       gshell.asm):05154                  IFNE  H6309
                      (       gshell.asm):05155                  clrd             exit
                      (       gshell.asm):05156                  ELSE
247E 4F               (       gshell.asm):05157                  clra
247F 5F               (       gshell.asm):05158                  clrb
                      (       gshell.asm):05159                  ENDC
2480 3268             (       gshell.asm):05160                  leas  8,S
2482 39               (       gshell.asm):05161                  rts   
                      (       gshell.asm):05162         
2483 3440             (       gshell.asm):05163         KILOLAY2 pshs  U
2485 EC64             (       gshell.asm):05164                  ldd   4,S
2487 3406             (       gshell.asm):05165                  pshs  D
2489 170F78           (       gshell.asm):05166                  lbsr  ST.RELEA
248C 17101D           (       gshell.asm):05167                  lbsr  OWEND
248F 206D             (       gshell.asm):05168                  bra   ISC128K5
                      (       gshell.asm):05169         
2491 3440             (       gshell.asm):05170         ISCR128K pshs  U
2493 EE66             (       gshell.asm):05171                  ldu   6,S
2495 EC42             (       gshell.asm):05172                  ldd   ID.WTYPE,U Get window type
2497 3406             (       gshell.asm):05173                  pshs  d          Save it
2499 10830006         (       gshell.asm):05174                  cmpd  #6
249D 2E5C             (       gshell.asm):05175                  bgt   ISC128K4
249F DC22             (       gshell.asm):05176                  ldd   WNDWPATH   Get GSHELL window path
24A1 AE66             (       gshell.asm):05177                  ldx   6,S
24A3 ED0C             (       gshell.asm):05178                  std   GD.WPATH,X Save as program window path
24A5 3406             (       gshell.asm):05179                  pshs  d
24A7 170916           (       gshell.asm):05180                  lbsr  GCSETOFF
24AA 170F57           (       gshell.asm):05181                  lbsr  ST.RELEA
24AD 170FF7           (       gshell.asm):05182                  lbsr  DWEND
24B0 EC4A             (       gshell.asm):05183                  ldd   ID.BKGND,U
24B2 EDE4             (       gshell.asm):05184                  std   ,S
24B4 3406             (       gshell.asm):05185                  pshs  d
24B6 AE48             (       gshell.asm):05186                  ldx   ID.FRGND,U
                      (       gshell.asm):05187         * Changed for x200 screens
24B8 C619             (       gshell.asm):05188                  ldb   #25
24BA 3416             (       gshell.asm):05189                  pshs  d,X
24BC EC68             (       gshell.asm):05190                  ldd   8,S        Get screen type
24BE 17034E           (       gshell.asm):05191                  lbsr  COLS4080   40 or 80 column?
24C1 2704             (       gshell.asm):05192                  beq   ISC128K1   80 column, skip ahead
24C3 C628             (       gshell.asm):05193                  ldb   #40        40 columns
24C5 2002             (       gshell.asm):05194                  bra   ISC128K2
                      (       gshell.asm):05195         
24C7 C650             (       gshell.asm):05196         ISC128K1 ldb   #80        80 columns
24C9 3406             (       gshell.asm):05197         ISC128K2 pshs  d
24CB 5F               (       gshell.asm):05198                  clrb  
24CC 3406             (       gshell.asm):05199                  pshs  d
24CE 3406             (       gshell.asm):05200                  pshs  d
24D0 AE6E             (       gshell.asm):05201                  ldx   14,S       Get window type
24D2 DC22             (       gshell.asm):05202                  ldd   WNDWPATH   Get path # to window
24D4 3416             (       gshell.asm):05203                  pshs  D,X
24D6 170F96           (       gshell.asm):05204                  lbsr  DWSET      Set the new window
24D9 32E812           (       gshell.asm):05205                  leas  18,S
24DC ED7E             (       gshell.asm):05206                  std   -2,S
24DE 2616             (       gshell.asm):05207                  bne   ISC128K3
24E0 8E0001           (       gshell.asm):05208                  ldx   #1
24E3 DC22             (       gshell.asm):05209                  ldd   WNDWPATH
24E5 3416             (       gshell.asm):05210                  pshs  D,X
24E7 170FC7           (       gshell.asm):05211                  lbsr  SELECT
24EA 17FB8A           (       gshell.asm):05212                  lbsr  MOUSENOW
24ED 17082B           (       gshell.asm):05213                  lbsr  PAUSECHO
24F0 3264             (       gshell.asm):05214                  leas  4,S
24F2 4F               (       gshell.asm):05215                  clra  
24F3 5F               (       gshell.asm):05216                  clrb  
24F4 2008             (       gshell.asm):05217                  bra   ISC128K5
                      (       gshell.asm):05218         
24F6 CCFFFF           (       gshell.asm):05219         ISC128K3 ldd   #-1
24F9 2003             (       gshell.asm):05220                  bra   ISC128K5
                      (       gshell.asm):05221         
24FB CC0001           (       gshell.asm):05222         ISC128K4 ldd   #1
24FE 3262             (       gshell.asm):05223         ISC128K5 leas  2,S
2500 35C0             (       gshell.asm):05224                  puls  U,PC
                      (       gshell.asm):05225         
                      (       gshell.asm):05226         * Get mouse packet - wait till button A is released
2502 3440             (       gshell.asm):05227         GETMPAKT pshs  U
2504 CE0655           (       gshell.asm):05228                  ldu   #MOUSPCKT
2507 EC64             (       gshell.asm):05229                  ldd   4,S
2509 3446             (       gshell.asm):05230                  pshs  D,U
250B 170ED8           (       gshell.asm):05231         GETMPAK1 lbsr  GT.MOUSE   Get mouse packet
250E EC48             (       gshell.asm):05232                  ldd   PT.CBSA,U  Button A pressed?
2510 26F9             (       gshell.asm):05233                  bne   GETMPAK1   Yes, wait till it is released
2512 3264             (       gshell.asm):05234                  leas  4,S
2514 35C0             (       gshell.asm):05235                  puls  U,PC
                      (       gshell.asm):05236         
                      (       gshell.asm):05237         * Use mouse to position & size new window
2516 3440             (       gshell.asm):05238         SETSTOP  pshs  U
2518 3276             (       gshell.asm):05239                  leas  -10,S      Make 10 byte temp area
251A CE0655           (       gshell.asm):05240                  ldu   #MOUSPCKT  Point to mouse packet
251D EC6E             (       gshell.asm):05241                  ldd   14,S
251F 3406             (       gshell.asm):05242                  pshs  D
2521 8DDF             (       gshell.asm):05243                  bsr   GETMPAKT   Let auto-follow mouse for start position of window run until
2523 3262             (       gshell.asm):05244                  leas  2,S        button A is released
                      (       gshell.asm):05245         * Upper left corner is now selected
2525 EC6E             (       gshell.asm):05246         SETSTOP1 ldd   14,S
2527 3436             (       gshell.asm):05247                  pshs  D,X,Y
2529 170ED8           (       gshell.asm):05248                  lbsr  ST.RELEA   Release signals
252C 4F               (       gshell.asm):05249                  clra  
252D 5F               (       gshell.asm):05250                  clrb  
252E DD1C             (       gshell.asm):05251                  std   RECDSGNL
2530 DD4B             (       gshell.asm):05252                  std   WPOSGOOD
2532 CC000B           (       gshell.asm):05253                  ldd   #KYBDSGNL  Set keyboard signal (So we can trap SPACEBAR to switch screens
2535 ED62             (       gshell.asm):05254                  std   2,S        for new window)
2537 170EBF           (       gshell.asm):05255                  lbsr  ST.SSIG
253A 4F               (       gshell.asm):05256                  clra  
253B 5F               (       gshell.asm):05257                  clrb  
253C ED66             (       gshell.asm):05258                  std   6,S
253E ED64             (       gshell.asm):05259                  std   4,S
2540 ED68             (       gshell.asm):05260                  std   8,S
2542 ED62             (       gshell.asm):05261                  std   2,S
2544 170FDC           (       gshell.asm):05262                  lbsr  SETDPTR    Draw ptr=0,0
2547 DC47             (       gshell.asm):05263                  ldd   PROCYSIZ   Min. X size of process
2549 ED64             (       gshell.asm):05264                  std   4,S
254B DC45             (       gshell.asm):05265                  ldd   PROCXSIZ   Min. Y size of process
254D ED62             (       gshell.asm):05266                  std   2,S
254F 170FC9           (       gshell.asm):05267                  lbsr  BOX        Draw box (for window sizing)
2552 3266             (       gshell.asm):05268                  leas  6,S
2554 3440             (       gshell.asm):05269         SETSTOP2 pshs  U
2556 ECE810           (       gshell.asm):05270                  ldd   16,S
2559 3406             (       gshell.asm):05271                  pshs  D
255B 170E88           (       gshell.asm):05272                  lbsr  GT.MOUSE   Get mouse update
255E 3264             (       gshell.asm):05273                  leas  4,S
2560 E649             (       gshell.asm):05274                  ldb   PT.CBSB,U  Button B pressed?
2562 2708             (       gshell.asm):05275                  beq   SETSTOP3   No, skip ahead
2564 CC0001           (       gshell.asm):05276                  ldd   #S$WAKE    Flag WAKE signal
2567 DD1C             (       gshell.asm):05277                  std   RECDSGNL
2569 1600CF           (       gshell.asm):05278                  lbra  SETTOP13
                      (       gshell.asm):05279         
256C E648             (       gshell.asm):05280         SETSTOP3 ldb   PT.CBSA,U  Button A pressed?
256E 2710             (       gshell.asm):05281                  beq   SETSTOP4   No, skip ahead
2570 EC6E             (       gshell.asm):05282                  ldd   14,S       Button B pressed - do this?
2572 3406             (       gshell.asm):05283                  pshs  D
2574 8D8C             (       gshell.asm):05284                  bsr   GETMPAKT   Do auto-follow mouse update until button A pressed
2576 3262             (       gshell.asm):05285                  leas  2,S
2578 DC4B             (       gshell.asm):05286                  ldd   WPOSGOOD
257A 102700BD         (       gshell.asm):05287                  lbeq  SETTOP13
257E 20D4             (       gshell.asm):05288                  bra   SETSTOP2
                      (       gshell.asm):05289         
                      (       gshell.asm):05290         * Button A pressed when positioning window
2580 ECC818           (       gshell.asm):05291         SETSTOP4 ldd   PT.ACX,U   Get current X coord of mouse
2583 ED66             (       gshell.asm):05292                  std   6,S        Save it
2585 DC49             (       gshell.asm):05293                  ldd   PROCWTYP   Get window type
2587 170285           (       gshell.asm):05294                  lbsr  COLS4080   40 or 80 column?
258A 2706             (       gshell.asm):05295                  beq   SETSTOP5   80 column, skip ahead
258C EC66             (       gshell.asm):05296                  ldd   6,S        Get current X coord of mouse
258E 44               (       gshell.asm):05297                  lsra             divide by 2
258F 56               (       gshell.asm):05298                  rorb  
2590 ED66             (       gshell.asm):05299                  std   6,S        Save it
2592 EC66             (       gshell.asm):05300         SETSTOP5 ldd   6,S        Get X coord of mouse
2594 C4F8             (       gshell.asm):05301                  andb  #%11111000 Make it evenly divisible by 8
2596 ED66             (       gshell.asm):05302                  std   6,S        Save new X coord
2598 ECC81A           (       gshell.asm):05303                  ldd   PT.ACY,U   Get current mouse Y coord
259B C4F8             (       gshell.asm):05304                  andb  #%11111000 Make it evenly divisible by 8
259D ED64             (       gshell.asm):05305                  std   4,S        Save it
259F EC66             (       gshell.asm):05306                  ldd   6,S        Get X coord
25A1 10A362           (       gshell.asm):05307                  cmpd  2,S
25A4 2607             (       gshell.asm):05308                  bne   SETSTOP6
25A6 EC64             (       gshell.asm):05309                  ldd   4,S
25A8 10A3E4           (       gshell.asm):05310                  cmpd  ,S
25AB 276A             (       gshell.asm):05311                  beq   SETTOP11
25AD EC64             (       gshell.asm):05312         SETSTOP6 ldd   4,S
25AF D347             (       gshell.asm):05313                  addd  PROCYSIZ
25B1 3406             (       gshell.asm):05314                  pshs  D
25B3 EC68             (       gshell.asm):05315                  ldd   8,S
25B5 D345             (       gshell.asm):05316                  addd  PROCXSIZ
25B7 3406             (       gshell.asm):05317                  pshs  D
25B9 AE68             (       gshell.asm):05318                  ldx   8,S
25BB EC6A             (       gshell.asm):05319                  ldd   12-2,S
25BD 3416             (       gshell.asm):05320                  pshs  D,X
25BF 1701F7           (       gshell.asm):05321                  lbsr  CHKPOSIT   See if we can position window on existing screen
25C2 3268             (       gshell.asm):05322                  leas  8,S
25C4 ED7E             (       gshell.asm):05323                  std   -2,S
25C6 2740             (       gshell.asm):05324                  beq   SETSTOP9
25C8 DC4B             (       gshell.asm):05325                  ldd   WPOSGOOD
25CA 270B             (       gshell.asm):05326                  beq   SETSTOP7
25CC EC6E             (       gshell.asm):05327                  ldd   14,S
25CE 3406             (       gshell.asm):05328                  pshs  D
25D0 1701D9           (       gshell.asm):05329                  lbsr  GOODWPOS
25D3 3262             (       gshell.asm):05330                  leas  2,S
25D5 2002             (       gshell.asm):05331                  bra   SETSTOP8
                      (       gshell.asm):05332         
25D7 8D1C             (       gshell.asm):05333         SETSTOP7 bsr   MAKERBOX
25D9 EC64             (       gshell.asm):05334         SETSTOP8 ldd   4,S
25DB EDE4             (       gshell.asm):05335                  std   ,S
25DD 3406             (       gshell.asm):05336                  pshs  D
25DF AE68             (       gshell.asm):05337                  ldx   8,S
25E1 AF64             (       gshell.asm):05338                  stx   4,S
25E3 ECE810           (       gshell.asm):05339                  ldd   18-2,S
25E6 3416             (       gshell.asm):05340                  pshs  D,X
25E8 170F38           (       gshell.asm):05341                  lbsr  SETDPTR
25EB 3266             (       gshell.asm):05342                  leas  6,S
25ED 8D06             (       gshell.asm):05343                  bsr   MAKERBOX
25EF ED7E             (       gshell.asm):05344                  std   -2,S
25F1 2C24             (       gshell.asm):05345                  bge   SETTOP11
25F3 2019             (       gshell.asm):05346                  bra   SETTOP10
                      (       gshell.asm):05347         
                      (       gshell.asm):05348         * Draw relative box
25F5 DC47             (       gshell.asm):05349         MAKERBOX ldd   PROCYSIZ   Y size
25F7 3406             (       gshell.asm):05350                  pshs  D
25F9 DC45             (       gshell.asm):05351                  ldd   PROCXSIZ   X size
25FB 3406             (       gshell.asm):05352                  pshs  D
25FD ECE814           (       gshell.asm):05353                  ldd   18+2,S     Get path # to full-screen window underneath program windows
2600 3406             (       gshell.asm):05354                  pshs  D
2602 170F1A           (       gshell.asm):05355                  lbsr  RBOX       Draw box from current coord for currently selected size
2605 3266             (       gshell.asm):05356                  leas  6,S
2607 39               (       gshell.asm):05357                  rts   
                      (       gshell.asm):05358         
2608 DC4B             (       gshell.asm):05359         SETSTOP9 ldd   WPOSGOOD
260A 260B             (       gshell.asm):05360                  bne   SETTOP11
260C 8DE7             (       gshell.asm):05361                  bsr   MAKERBOX
260E EC6E             (       gshell.asm):05362         SETTOP10 ldd   14,S
2610 3406             (       gshell.asm):05363                  pshs  D
2612 17017E           (       gshell.asm):05364                  lbsr  STOPSIGN
2615 3262             (       gshell.asm):05365                  leas  2,S
2617 DC1C             (       gshell.asm):05366         SETTOP11 ldd   RECDSGNL
2619 1027FF37         (       gshell.asm):05367                  lbeq  SETSTOP2
261D C10B             (       gshell.asm):05368                  cmpb  #KYBDSGNL
261F 2613             (       gshell.asm):05369                  bne   SETTOP12
2621 CC0001           (       gshell.asm):05370                  ldd   #1
2624 3406             (       gshell.asm):05371                  pshs  D
2626 306A             (       gshell.asm):05372                  leax  10,S
2628 ECE810           (       gshell.asm):05373                  ldd   18-2,S
262B 3416             (       gshell.asm):05374                  pshs  D,X
262D 170C25           (       gshell.asm):05375                  lbsr  I.READ
2630 3266             (       gshell.asm):05376                  leas  6,S
2632 2007             (       gshell.asm):05377                  bra   SETTOP13
                      (       gshell.asm):05378         
2634 4F               (       gshell.asm):05379         SETTOP12 clra  
2635 5F               (       gshell.asm):05380                  clrb  
2636 DD1C             (       gshell.asm):05381                  std   RECDSGNL
2638 16FF19           (       gshell.asm):05382                  lbra  SETSTOP2
                      (       gshell.asm):05383         
263B DC1C             (       gshell.asm):05384         SETTOP13 ldd   RECDSGNL   Get last signal received
263D 2719             (       gshell.asm):05385                  beq   SETTOP15   None, skip ahead
263F DC4B             (       gshell.asm):05386                  ldd   WPOSGOOD   ??? Window positioning good?
2641 2602             (       gshell.asm):05387                  bne   SETTOP14   Yes, create selected window pos/size to run program in
2643 8DB0             (       gshell.asm):05388                  bsr   MAKERBOX   No, Draw current 
2645 EC6E             (       gshell.asm):05389         SETTOP14 ldd   14,S
2647 3406             (       gshell.asm):05390                  pshs  D
2649 170160           (       gshell.asm):05391                  lbsr  GOODWPOS
264C 3262             (       gshell.asm):05392                  leas  2,S
264E 1702E7           (       gshell.asm):05393                  lbsr  GETPSCRN   Create new window (screen) if possible
2651 ED6E             (       gshell.asm):05394                  std   14,S       Save flag
2653 2D19             (       gshell.asm):05395                  blt   SETTOP16
2655 16FECD           (       gshell.asm):05396                  lbra  SETSTOP1
                      (       gshell.asm):05397         
2658 EC6E             (       gshell.asm):05398         SETTOP15 ldd   14,S
265A 3406             (       gshell.asm):05399                  pshs  D
265C 170DA5           (       gshell.asm):05400                  lbsr  ST.RELEA   Release signals
265F 3262             (       gshell.asm):05401                  leas  2,S
2661 EC62             (       gshell.asm):05402                  ldd   2,S
2663 AEE810           (       gshell.asm):05403                  ldx   16,S
2666 ED8810           (       gshell.asm):05404                  std   GD.XSTRT,X
2669 ECE4             (       gshell.asm):05405                  ldd   ,S
266B ED8812           (       gshell.asm):05406                  std   GD.YSTRT,X
                      (       gshell.asm):05407         
266E EC6E             (       gshell.asm):05408         SETTOP16 ldd   14,S
2670 326A             (       gshell.asm):05409                  leas  10,S
2672 35C0             (       gshell.asm):05410                  puls  U,PC
                      (       gshell.asm):05411         
2674 3440             (       gshell.asm):05412         SETSBOTM pshs  U
2676 EE64             (       gshell.asm):05413                  ldu   4,S
2678 3272             (       gshell.asm):05414                  leas  -14,S
267A 8E0655           (       gshell.asm):05415                  ldx   #MOUSPCKT
267D AF6C             (       gshell.asm):05416                  stx   12,S
267F 4F               (       gshell.asm):05417                  clra  
2680 5F               (       gshell.asm):05418                  clrb  
2681 DD4B             (       gshell.asm):05419                  std   WPOSGOOD
2683 AEE814           (       gshell.asm):05420                  ldx   20,S
2686 EC8810           (       gshell.asm):05421                  ldd   GD.XSTRT,X
2689 D345             (       gshell.asm):05422                  addd  PROCXSIZ
268B ED62             (       gshell.asm):05423                  std   2,S
268D ED66             (       gshell.asm):05424                  std   6,S
268F EC8812           (       gshell.asm):05425                  ldd   GD.YSTRT,X
2692 D347             (       gshell.asm):05426                  addd  PROCYSIZ
2694 EDE4             (       gshell.asm):05427                  std   ,S
2696 ED64             (       gshell.asm):05428                  std   4,S
                      (       gshell.asm):05429         
2698 EC6C             (       gshell.asm):05430         SETSBOT1 ldd   12,S
269A 3406             (       gshell.asm):05431                  pshs  D
269C 3440             (       gshell.asm):05432                  pshs  U
269E 170D45           (       gshell.asm):05433                  lbsr  GT.MOUSE
26A1 3264             (       gshell.asm):05434                  leas  4,S
26A3 DC4B             (       gshell.asm):05435                  ldd   WPOSGOOD
26A5 2706             (       gshell.asm):05436                  beq   SETSBOT2
26A7 AE6C             (       gshell.asm):05437                  ldx   12,S
26A9 E608             (       gshell.asm):05438                  ldb   PT.CBSA,X
26AB 26EB             (       gshell.asm):05439                  bne   SETSBOT1
                      (       gshell.asm):05440         
26AD AE6C             (       gshell.asm):05441         SETSBOT2 ldx   12,S       Get ptr to mouse packet
26AF EC8818           (       gshell.asm):05442                  ldd   PT.ACX,X   Get current mouse X coord
26B2 ED6A             (       gshell.asm):05443                  std   10,S       Save it
26B4 DC49             (       gshell.asm):05444                  ldd   PROCWTYP   Get new process' window type 
26B6 170156           (       gshell.asm):05445                  lbsr  COLS4080   Check if 40 or 80 column
26B9 2706             (       gshell.asm):05446                  beq   SETSBOT3   80 column, skip ahead
26BB EC6A             (       gshell.asm):05447                  ldd   10,S       Get mouse X coord again
26BD 47               (       gshell.asm):05448                  asra             Divide by 2
26BE 56               (       gshell.asm):05449                  rorb  
26BF ED6A             (       gshell.asm):05450                  std   10,S       Save it
26C1 EC6A             (       gshell.asm):05451         SETSBOT3 ldd   10,S       Get mouse X coord
26C3 3406             (       gshell.asm):05452                  pshs  D          Save it
26C5 1700BD           (       gshell.asm):05453                  lbsr  RNDUPTO8   Round up to nearest 8 pixel boundary
26C8 ED6C             (       gshell.asm):05454                  std   10+2,S     Save it again
26CA AE6E             (       gshell.asm):05455                  ldx   12+2,S     Get mouse packet ptr again
26CC EC881A           (       gshell.asm):05456                  ldd   PT.ACY,X   Get mouse Y coord
26CF EDE4             (       gshell.asm):05457                  std   ,S         Save it
26D1 1700B1           (       gshell.asm):05458                  lbsr  RNDUPTO8   Round it up to nearest 8 pixel boundary
26D4 3262             (       gshell.asm):05459                  leas  2,S        Eat temp stack
26D6 ED68             (       gshell.asm):05460                  std   8,S        Save it
26D8 EC6A             (       gshell.asm):05461                  ldd   10,S       Get X coord
26DA 10A366           (       gshell.asm):05462                  cmpd  6,S
26DD 2C04             (       gshell.asm):05463                  bge   SETSBOT4
26DF EC66             (       gshell.asm):05464                  ldd   6,S
26E1 ED6A             (       gshell.asm):05465                  std   10,S
                      (       gshell.asm):05466         
26E3 EC68             (       gshell.asm):05467         SETSBOT4 ldd   8,S
26E5 10A364           (       gshell.asm):05468                  cmpd  4,S
26E8 2C04             (       gshell.asm):05469                  bge   SETSBOT5
26EA EC64             (       gshell.asm):05470                  ldd   4,S
26EC ED68             (       gshell.asm):05471                  std   8,S
                      (       gshell.asm):05472         
26EE EC6A             (       gshell.asm):05473         SETSBOT5 ldd   10,S
26F0 10A362           (       gshell.asm):05474                  cmpd  2,S
26F3 2607             (       gshell.asm):05475                  bne   SETSBOT6
26F5 EC68             (       gshell.asm):05476                  ldd   8,S
26F7 10A3E4           (       gshell.asm):05477                  cmpd  ,S
26FA 2760             (       gshell.asm):05478                  beq   SETBOT11
                      (       gshell.asm):05479         
26FC AE68             (       gshell.asm):05480         SETSBOT6 ldx   8,S
26FE EC6A             (       gshell.asm):05481                  ldd   12-2,S
2700 3416             (       gshell.asm):05482                  pshs  D,X
2702 AEE818           (       gshell.asm):05483                  ldx   24,S
2705 EC8812           (       gshell.asm):05484                  ldd   GD.YSTRT,X
2708 3406             (       gshell.asm):05485                  pshs  D
270A EC8810           (       gshell.asm):05486                  ldd   GD.XSTRT,X
270D 3406             (       gshell.asm):05487                  pshs  D
270F 1700A7           (       gshell.asm):05488                  lbsr  CHKPOSIT
2712 3268             (       gshell.asm):05489                  leas  8,S
2714 ED7E             (       gshell.asm):05490                  std   -2,S
2716 2738             (       gshell.asm):05491                  beq   SETSBOT9
2718 DC4B             (       gshell.asm):05492                  ldd   WPOSGOOD
271A 2719             (       gshell.asm):05493                  beq   SETSBOT7
271C 3440             (       gshell.asm):05494                  pshs  U
271E 17008B           (       gshell.asm):05495                  lbsr  GOODWPOS
2721 3262             (       gshell.asm):05496                  leas  2,S
2723 2012             (       gshell.asm):05497                  bra   SETSBOT8
                      (       gshell.asm):05498         
2725 EC62             (       gshell.asm):05499         MAKEBOX2 ldd   2,S
2727 3406             (       gshell.asm):05500                  pshs  D
2729 EC66             (       gshell.asm):05501                  ldd   4+2,S
272B 3406             (       gshell.asm):05502                  pshs  D
272D 3440             (       gshell.asm):05503                  pshs  U
272F 170DE9           (       gshell.asm):05504                  lbsr  BOX
2732 3266             (       gshell.asm):05505                  leas  6,S
2734 39               (       gshell.asm):05506                  rts   
                      (       gshell.asm):05507         
2735 8DEE             (       gshell.asm):05508         SETSBOT7 bsr   MAKEBOX2
                      (       gshell.asm):05509         
2737 EC68             (       gshell.asm):05510         SETSBOT8 ldd   8,S
2739 EDE4             (       gshell.asm):05511                  std   ,S
273B 3406             (       gshell.asm):05512                  pshs  D
273D EC6C             (       gshell.asm):05513                  ldd   12,S
273F ED64             (       gshell.asm):05514                  std   4,S
2741 3406             (       gshell.asm):05515                  pshs  D
2743 3440             (       gshell.asm):05516                  pshs  U
2745 170DD3           (       gshell.asm):05517                  lbsr  BOX
2748 3266             (       gshell.asm):05518                  leas  6,S
274A ED7E             (       gshell.asm):05519                  std   -2,S
274C 2C0E             (       gshell.asm):05520                  bge   SETBOT11
274E 2006             (       gshell.asm):05521                  bra   SETBOT10
                      (       gshell.asm):05522         
2750 DC4B             (       gshell.asm):05523         SETSBOT9 ldd   WPOSGOOD
2752 2602             (       gshell.asm):05524                  bne   SETBOT10
2754 8DCF             (       gshell.asm):05525                  bsr   MAKEBOX2
                      (       gshell.asm):05526         
2756 3440             (       gshell.asm):05527         SETBOT10 pshs  U
2758 8D39             (       gshell.asm):05528                  bsr   STOPSIGN
275A 3262             (       gshell.asm):05529                  leas  2,S
                      (       gshell.asm):05530         
275C AE6C             (       gshell.asm):05531         SETBOT11 ldx   12,S
275E E608             (       gshell.asm):05532                  ldb   PT.CBSA,X
2760 1027FF34         (       gshell.asm):05533                  lbeq  SETSBOT1
2764 DC4B             (       gshell.asm):05534                  ldd   WPOSGOOD
2766 1026FF2E         (       gshell.asm):05535                  lbne  SETSBOT1
276A EC68             (       gshell.asm):05536                  ldd   8,S
276C AEE814           (       gshell.asm):05537                  ldx   20,S
276F ED8816           (       gshell.asm):05538                  std   GD.YEND,X
2772 3406             (       gshell.asm):05539                  pshs  D
2774 EC6C             (       gshell.asm):05540                  ldd   12,S
2776 ED8814           (       gshell.asm):05541                  std   GD.XEND,X
2779 3406             (       gshell.asm):05542                  pshs  D
277B 3440             (       gshell.asm):05543                  pshs  U
277D 170D9B           (       gshell.asm):05544                  lbsr  BOX
2780 32E814           (       gshell.asm):05545                  leas  14+6,S
2783 35C0             (       gshell.asm):05546                  puls  U,PC
                      (       gshell.asm):05547         
2785 3440             (       gshell.asm):05548         RNDUPTO8 pshs  U
2787 EC64             (       gshell.asm):05549                  ldd   4,S
2789 C30007           (       gshell.asm):05550                  addd  #7
278C C4F8             (       gshell.asm):05551                  andb  #$F8
278E C3FFFF           (       gshell.asm):05552                  addd  #-1
2791 35C0             (       gshell.asm):05553                  puls  U,PC
                      (       gshell.asm):05554         
2793 3440             (       gshell.asm):05555         STOPSIGN pshs  U
2795 CC0001           (       gshell.asm):05556                  ldd   #1
2798 DD4B             (       gshell.asm):05557                  std   WPOSGOOD
279A C605             (       gshell.asm):05558                  ldb   #PTR.ILL
279C 3406             (       gshell.asm):05559                  pshs  D
279E 8E00CA           (       gshell.asm):05560                  ldx   #GRP.PTR
27A1 EC66             (       gshell.asm):05561                  ldd   8-2,S
27A3 3416             (       gshell.asm):05562                  pshs  D,X
27A5 170D2C           (       gshell.asm):05563                  lbsr  GCSET
27A8 3266             (       gshell.asm):05564                  leas  6,S
27AA 35C0             (       gshell.asm):05565                  puls  U,PC
                      (       gshell.asm):05566         
27AC 4F               (       gshell.asm):05567         GOODWPOS clra  
27AD 5F               (       gshell.asm):05568                  clrb  
27AE DD4B             (       gshell.asm):05569                  std   WPOSGOOD
27B0 EC62             (       gshell.asm):05570                  ldd   2,S
27B2 3406             (       gshell.asm):05571                  pshs  D
27B4 170609           (       gshell.asm):05572                  lbsr  GCSETOFF
27B7 3586             (       gshell.asm):05573                  puls  D,PC
                      (       gshell.asm):05574         
                      (       gshell.asm):05575         * Theoretically, code to check if we can fit new window on an existing
                      (       gshell.asm):05576         * screen
27B9 3440             (       gshell.asm):05577         CHKPOSIT pshs  U
27BB DE38             (       gshell.asm):05578                  ldu   PTBLSPTR   Get ptr to process descriptors table
27BD 2047             (       gshell.asm):05579                  bra   CHKPOSI8   NOTE: BOTH CPUS: S/B ABLE TO BRA PAST STU -2,S
                      (       gshell.asm):05580         
27BF ECC818           (       gshell.asm):05581         CHKPOSI1 ldd   GD.SCRNO,U Get screen # for process entry
27C2 109343           (       gshell.asm):05582                  cmpd  ACTVSCRN   Same as active process screen?
27C5 263C             (       gshell.asm):05583                  bne   CHKPOSI7   Nope, skip ahead
27C7 ECC810           (       gshell.asm):05584                  ldd   GD.XSTRT,U
27CA 10A364           (       gshell.asm):05585                  cmpd  4,S
27CD 2D07             (       gshell.asm):05586                  blt   CHKPOSI3
27CF 10A368           (       gshell.asm):05587                  cmpd  8,S
27D2 2D0F             (       gshell.asm):05588                  blt   CHKPOSI4
27D4 202D             (       gshell.asm):05589                  bra   CHKPOSI7
                      (       gshell.asm):05590         
27D6 ECC814           (       gshell.asm):05591         CHKPOSI3 ldd   GD.XEND,U
27D9 10A364           (       gshell.asm):05592                  cmpd  4,S
27DC 2E05             (       gshell.asm):05593                  bgt   CHKPOSI4
27DE 10A368           (       gshell.asm):05594                  cmpd  8,S
27E1 2F20             (       gshell.asm):05595                  ble   CHKPOSI7
                      (       gshell.asm):05596         
27E3 ECC812           (       gshell.asm):05597         CHKPOSI4 ldd   GD.YSTRT,U
27E6 10A366           (       gshell.asm):05598                  cmpd  6,S
27E9 2D07             (       gshell.asm):05599                  blt   CHKPOSI5
27EB 10A36A           (       gshell.asm):05600                  cmpd  10,S
27EE 2D0F             (       gshell.asm):05601                  blt   CHKPOSI6
27F0 2011             (       gshell.asm):05602                  bra   CHKPOSI7
                      (       gshell.asm):05603         
27F2 ECC816           (       gshell.asm):05604         CHKPOSI5 ldd   GD.YEND,U
27F5 10A366           (       gshell.asm):05605                  cmpd  6,S
27F8 2E05             (       gshell.asm):05606                  bgt   CHKPOSI6
27FA 10A36A           (       gshell.asm):05607                  cmpd  10,S
27FD 2F04             (       gshell.asm):05608                  ble   CHKPOSI7
27FF 4F               (       gshell.asm):05609         CHKPOSI6 clra  
2800 5F               (       gshell.asm):05610                  clrb  
2801 35C0             (       gshell.asm):05611                  puls  U,PC
                      (       gshell.asm):05612         
2803 EEC81A           (       gshell.asm):05613         CHKPOSI7 ldu   GD.LINK,U  Get ptr to next forked program entry
2806 EF7E             (       gshell.asm):05614         CHKPOSI8 stu   -2,S       Is there one?
2808 26B5             (       gshell.asm):05615                  bne   CHKPOSI1   Yes, check positions
280A CC0001           (       gshell.asm):05616                  ldd   #1         No, set flag to 1 & exit
280D 35C0             (       gshell.asm):05617                  puls  U,PC
                      (       gshell.asm):05618         
                      (       gshell.asm):05619         * Entry: B=screen type
                      (       gshell.asm):05620         * Exit: B=0 (80 column)
                      (       gshell.asm):05621         *       B=1 (40 column)
280F 5A               (       gshell.asm):05622         COLS4080 decb             Type 1?
2810 270A             (       gshell.asm):05623                  beq   COLS408X   Yes, flag 40 column
2812 C105             (       gshell.asm):05624                  cmpb  #5         320x200x4?
2814 2706             (       gshell.asm):05625                  beq   COLS408X   Yes, flag 40 column
2816 C107             (       gshell.asm):05626                  cmpb  #7         320x200x16?
2818 2702             (       gshell.asm):05627                  beq   COLS408X   Yes, flag 40 column
281A 5F               (       gshell.asm):05628                  clrb             Flag for 80 column
281B 39               (       gshell.asm):05629                  rts   
                      (       gshell.asm):05630         
281C C601             (       gshell.asm):05631         COLS408X ldb   #1
281E 39               (       gshell.asm):05632                  rts   
                      (       gshell.asm):05633         
                      (       gshell.asm):05634         * >128k RAM, try to make new window???
281F 3440             (       gshell.asm):05635         ISCR512K pshs  U
2821 EE64             (       gshell.asm):05636                  ldu   4,S        Get ptr to current GD (forked process table) structure
                      (       gshell.asm):05637                  IFNE  H6309
                      (       gshell.asm):05638                  clrd  
                      (       gshell.asm):05639                  ELSE
2823 4F               (       gshell.asm):05640                  clra
2824 5F               (       gshell.asm):05641                  clrb
                      (       gshell.asm):05642                  ENDC
2825 DD43             (       gshell.asm):05643                  std   ACTVSCRN   Current active screen to none
2827 DD4D             (       gshell.asm):05644                  std   DWSETSTY   New window type to none
2829 AE66             (       gshell.asm):05645                  ldx   6,S
282B 1701FC           (       gshell.asm):05646                  lbsr  GFXSIZXY   Set window type & minimum X/Y sizes
282E EC0C             (       gshell.asm):05647                  ldd   ID.MEMSZ,X Get mem size need for new program
2830 ED4A             (       gshell.asm):05648                  std   GD.MEMSZ,U Save it in forked process table
2832 DC49             (       gshell.asm):05649                  ldd   PROCWTYP   Get default window type new program
2834 3436             (       gshell.asm):05650                  pshs  d,X,Y      Save window type, ID.* tbl ptr & room for 2 bytes(?)
2836 8DD7             (       gshell.asm):05651                  bsr   COLS4080   Figure it if 40 or 80 column screen
2838 E765             (       gshell.asm):05652                  stb   5,S        Save 40/80 flag (0=80 column)
283A 3506             (       gshell.asm):05653                  puls  d          Get window type back
283C 5A               (       gshell.asm):05654                  decb  
283D 2715             (       gshell.asm):05655                  beq   ISC512K3   H/W text handler (type 1) - Just create new window
283F 5A               (       gshell.asm):05656                  decb  
2840 2712             (       gshell.asm):05657                  beq   ISC512K3   H/W text handler (type 2) - Just create new window
2842 C628             (       gshell.asm):05658                  ldb   #40        Default to 40 column screen
2844 6D63             (       gshell.asm):05659                  tst   3,S        Was process window type 40 or 80 column
2846 2602             (       gshell.asm):05660                  bne   ISC512K2   40, skip ahead
2848 C650             (       gshell.asm):05661                  ldb   #80        It was 80
284A E105             (       gshell.asm):05662         ISC512K2 cmpb  ID.XSIZE+1,X If min width<>full width window, go to window 
284C 262C             (       gshell.asm):05663                  bne   ISC512K6   sizing routine
284E A607             (       gshell.asm):05664                  lda   ID.YSIZE+1,X If min height<>full height window, go to window sizing
2850 8119             (       gshell.asm):05665                  cmpa  #25        routine
2852 2626             (       gshell.asm):05666                  bne   ISC512K6
                      (       gshell.asm):05667         * New window is full size goes here
2854                  (       gshell.asm):05668         ISC512K3
                      (       gshell.asm):05669                  IFNE  H6309
                      (       gshell.asm):05670                  clrd             Default window x,y start to 0,0
                      (       gshell.asm):05671                  ELSE
2854 4F               (       gshell.asm):05672                  clra
2855 5F               (       gshell.asm):05673                  clrb
                      (       gshell.asm):05674                  ENDC
2856 EDC810           (       gshell.asm):05675                  std   GD.XSTRT,U
2859 EDC812           (       gshell.asm):05676                  std   GD.YSTRT,U
285C CC013F           (       gshell.asm):05677                  ldd   #319       Default to 320 X pixel size
285F 6D63             (       gshell.asm):05678                  tst   3,S        Was it 40 column window?
2861 2603             (       gshell.asm):05679                  bne   ISC512K5   Yes, 320 is fine
2863 CC027F           (       gshell.asm):05680                  ldd   #639       80 column, so 640 X pixel size
2866 EDC814           (       gshell.asm):05681         ISC512K5 std   GD.XEND,U  Save X size for new process
2869 CC00C7           (       gshell.asm):05682                  ldd   #199       Y end is 199 (NitrOS9 only)
286C EDC816           (       gshell.asm):05683                  std   GD.YEND,U
286F CCFFFF           (       gshell.asm):05684                  ldd   #-1        Flag active screen with -1 (?)
2872 DD43             (       gshell.asm):05685                  std   ACTVSCRN
2874 DC49             (       gshell.asm):05686                  ldd   PROCWTYP   Get process' requested type
2876 DD4D             (       gshell.asm):05687                  std   DWSETSTY   Save as screen type to use to create new window
2878 2030             (       gshell.asm):05688                  bra   ISC512K7
                      (       gshell.asm):05689         
                      (       gshell.asm):05690         * New window is sized by user - do positioning/sizing
287A 1700BB           (       gshell.asm):05691         ISC512K6 lbsr  GETPSCRN   ???Activate screen we will be putting new window on
287D EDE4             (       gshell.asm):05692                  std   ,S         Save flag
287F 102D00A3         (       gshell.asm):05693                  lblt  IS512K13   If -2 or -1, eat stack & exit (Either scrn tbl full, or deleted old screen)
2883 3446             (       gshell.asm):05694                  pshs  d,U
2885 17FC8E           (       gshell.asm):05695                  lbsr  SETSTOP    Position & size window with mouse
2888 3264             (       gshell.asm):05696                  leas  4,S
288A EDE4             (       gshell.asm):05697                  std   ,S         Save flag
288C 102D0096         (       gshell.asm):05698                  lblt  IS512K13
2890 3446             (       gshell.asm):05699                  pshs  d,U
2892 17FDDF           (       gshell.asm):05700                  lbsr  SETSBOTM
2895 EC64             (       gshell.asm):05701                  ldd   4,S
2897 EDE4             (       gshell.asm):05702                  std   ,S
2899 170524           (       gshell.asm):05703                  lbsr  GCSETOFF
289C 3264             (       gshell.asm):05704                  leas  4,S
289E 8E0000           (       gshell.asm):05705                  ldx   #0
28A1 ECE4             (       gshell.asm):05706                  ldd   ,S
28A3 3416             (       gshell.asm):05707                  pshs  d,X
28A5 170C55           (       gshell.asm):05708                  lbsr  LSET
28A8 3264             (       gshell.asm):05709                  leas  4,S
                      (       gshell.asm):05710         * Create new window (?)
28AA DC43             (       gshell.asm):05711         ISC512K7 ldd   ACTVSCRN
28AC EDC818           (       gshell.asm):05712                  std   GD.SCRNO,U
28AF 2D03             (       gshell.asm):05713                  blt   ISC512K8
28B1 170160           (       gshell.asm):05714                  lbsr  LINKWNDW
28B4 8603             (       gshell.asm):05715         ISC512K8 lda   #UPDAT.    Open path to next available window
28B6 8E041B           (       gshell.asm):05716                  ldx   #SLASHW
28B9 1709EF           (       gshell.asm):05717                  lbsr  I.OPEN
28BC ED62             (       gshell.asm):05718                  std   2,S        Save path #
28BE 2D66             (       gshell.asm):05719                  blt   IS512K13   negative (error), skip ahead
28C0 ED4C             (       gshell.asm):05720                  std   GD.WPATH,U Save as path # to window for program to fork
28C2 AE6A             (       gshell.asm):05721                  ldx   10,S
28C4 2607             (       gshell.asm):05722                  bne   ISC512K9
28C6 4F               (       gshell.asm):05723                  clra  
28C7 5F               (       gshell.asm):05724                  clrb  
28C8 8E0001           (       gshell.asm):05725                  ldx   #1
28CB 2004             (       gshell.asm):05726                  bra   IS512K10
                      (       gshell.asm):05727         
28CD EC08             (       gshell.asm):05728         ISC512K9 ldd   ID.FRGND,X Get foreground color
28CF AE0A             (       gshell.asm):05729                  ldx   ID.BKGND,X Get background color
28D1 3410             (       gshell.asm):05730         IS512K10 pshs  X          Save border color (Background copy)
28D3 3416             (       gshell.asm):05731                  pshs  d,X        Save background & foreground colors
28D5 3274             (       gshell.asm):05732                  leas  -12,S      Make room on stack for rest of DWSET
28D7 ECC812           (       gshell.asm):05733                  ldd   GD.YSTRT,U
28DA 8D4E             (       gshell.asm):05734                  bsr   DIVDX8
28DC ED66             (       gshell.asm):05735                  std   6,S        Save Y start of window
28DE ECC816           (       gshell.asm):05736                  ldd   GD.YEND,U
28E1 5C               (       gshell.asm):05737                  incb  
28E2 8D46             (       gshell.asm):05738                  bsr   DIVDX8
28E4 A366             (       gshell.asm):05739                  subd  6,S        Save Y window size
28E6 ED6A             (       gshell.asm):05740                  std   10,S
28E8 ECC810           (       gshell.asm):05741                  ldd   GD.XSTRT,U Save X start of window
28EB 8D3D             (       gshell.asm):05742                  bsr   DIVDX8
28ED ED64             (       gshell.asm):05743                  std   4,S
28EF ECC814           (       gshell.asm):05744                  ldd   GD.XEND,U  Save X window size
                      (       gshell.asm):05745                  IFNE  H6309
                      (       gshell.asm):05746                  incd  
                      (       gshell.asm):05747                  ELSE
28F2 C30001           (       gshell.asm):05748                  addd  #$0001
                      (       gshell.asm):05749                  ENDC
28F5 8D33             (       gshell.asm):05750                  bsr   DIVDX8
28F7 A364             (       gshell.asm):05751                  subd  4,S
28F9 ED68             (       gshell.asm):05752                  std   8,S
28FB DC4D             (       gshell.asm):05753                  ldd   DWSETSTY   Save screen type
28FD ED62             (       gshell.asm):05754                  std   2,S
28FF ECE814           (       gshell.asm):05755                  ldd   20,S       Save path to new window
2902 EDE4             (       gshell.asm):05756                  std   ,S
2904 170B68           (       gshell.asm):05757                  lbsr  DWSET
2907 32E812           (       gshell.asm):05758                  leas  18,S
290A ED7E             (       gshell.asm):05759                  std   -2,S
290C 2615             (       gshell.asm):05760                  bne   IS512K12
290E DC4D             (       gshell.asm):05761                  ldd   DWSETSTY
2910 2709             (       gshell.asm):05762                  beq   IS512K11
2912 EC62             (       gshell.asm):05763                  ldd   2,S
2914 3406             (       gshell.asm):05764                  pshs  D
2916 170B98           (       gshell.asm):05765                  lbsr  SELECT
2919 3506             (       gshell.asm):05766                  puls  D
                      (       gshell.asm):05767         
291B CC0002           (       gshell.asm):05768         IS512K11 ldd   #2
291E ED4E             (       gshell.asm):05769                  std   GD.DW.OW,U
2920 5A               (       gshell.asm):05770                  decb  
2921 2003             (       gshell.asm):05771                  bra   IS512K13
                      (       gshell.asm):05772         
2923 CCFFFF           (       gshell.asm):05773         IS512K12 ldd   #-1
                      (       gshell.asm):05774         
2926 3264             (       gshell.asm):05775         IS512K13 leas  4,S
2928 35C0             (       gshell.asm):05776                  puls  U,PC
                      (       gshell.asm):05777         
                      (       gshell.asm):05778         *D=D/8
292A 47               (       gshell.asm):05779         DIVDX8   asra  
292B 56               (       gshell.asm):05780                  rorb  
292C 47               (       gshell.asm):05781                  asra  
292D 56               (       gshell.asm):05782                  rorb  
292E 47               (       gshell.asm):05783                  asra  
292F 56               (       gshell.asm):05784                  rorb  
2930 39               (       gshell.asm):05785                  rts   
                      (       gshell.asm):05786         
                      (       gshell.asm):05787         *D=D*8
2931 58               (       gshell.asm):05788         MULDX8   aslb  
2932 49               (       gshell.asm):05789                  rola  
2933 58               (       gshell.asm):05790                  aslb  
2934 49               (       gshell.asm):05791                  rola  
2935 58               (       gshell.asm):05792                  aslb  
2936 49               (       gshell.asm):05793                  rola  
2937 39               (       gshell.asm):05794                  rts   
                      (       gshell.asm):05795         
                      (       gshell.asm):05796         * ???
                      (       gshell.asm):05797         * NOTE: BOTH CPUS: SINCE MAX=8, LDB ACTVSCRN+1 WOULD BE FINE
                      (       gshell.asm):05798         * Exit: D=-1 : screen table full, could not create new screen
                      (       gshell.asm):05799         *       D=-2 : Closed existing screen table, did not create new screen
2938 3440             (       gshell.asm):05800         GETPSCRN pshs  U          Preserve U
293A 327E             (       gshell.asm):05801                  leas  -2,S       Make room on stack
293C CE11AB           (       gshell.asm):05802                  ldu   #SCRNTABL  Point to start of screens used table
293F DC43             (       gshell.asm):05803                  ldd   ACTVSCRN   Get active screen #
2941 58               (       gshell.asm):05804                  aslb             x4 (size of each entry)
2942 58               (       gshell.asm):05805                  aslb  
2943 33CB             (       gshell.asm):05806                  leau  D,U        Point to active screen entry
2945 D644             (       gshell.asm):05807                  ldb   ACTVSCRN+1 Get active screen # again
2947 2726             (       gshell.asm):05808                  beq   GETPSCR3   1st entry, skip ahead (?)
2949 3044             (       gshell.asm):05809                  leax  SC.SIZE,U  Point to next entry
294B A602             (       gshell.asm):05810                  lda   SC.USERS,X Any paths already open to this next screen?
294D 2620             (       gshell.asm):05811                  bne   GETPSCR3   Yes, skip ahead
                      (       gshell.asm):05812         * Cleanup? seems to close screen path if no programs on screen
294F DC22             (       gshell.asm):05813                  ldd   WNDWPATH   No programs on this screen, get GSHELL window path
2951 3416             (       gshell.asm):05814                  pshs  D,X
2953 170B5B           (       gshell.asm):05815                  lbsr  SELECT     Go select GSHELL window
2956 3516             (       gshell.asm):05816                  puls  D,X
2958 1700C6           (       gshell.asm):05817                  lbsr  CLOSE.X    Close screen entry path
295B CCFFFE           (       gshell.asm):05818                  ldd   #-2        Exit flag
295E 2029             (       gshell.asm):05819                  bra   GETPSCR6
                      (       gshell.asm):05820         
                      (       gshell.asm):05821         * NOTE: IN ADDITION TO ADDING SUPPORT FOR VDG SCREENS, AND WINDOW TYPES
                      (       gshell.asm):05822         *  WITH GSHELL PALETTES (INSTEAD OF STANDARD), WE SHOULD PUT IN A WILDCARD
                      (       gshell.asm):05823         *  ONE FOR PROGRAMS THAT DON'T CARE (EX. ZONE RUNNER, ROGUE, ETC.) THAT CAN
                      (       gshell.asm):05824         *  RUN ON ANY TYPE AS LONG AS THERE IS ROOM, BASED ON MINIMUM X/Y SIZES.
                      (       gshell.asm):05825         *  (AND IT HAS TO BE ON A GRAPHICS WINDOW)
                      (       gshell.asm):05826         * SC.USERS count will be at least 1 (for the underlying size select window)
                      (       gshell.asm):05827         
                      (       gshell.asm):05828         * This chunk checks against window types for screens in active use...
2960 A641             (       gshell.asm):05829         GETPSCR1 lda   SC.WTYPE,U Get screen type
2962 914A             (       gshell.asm):05830                  cmpa  PROCWTYP+1 Same as window type needed for process?
2964 2604             (       gshell.asm):05831                  bne   GETPSCR2   No, try next screen
2966 A642             (       gshell.asm):05832                  lda   SC.USERS,U Screen initialized already?
2968 262F             (       gshell.asm):05833                  bne   GETPSCR8   Yes, skip ahead
296A 5C               (       gshell.asm):05834         GETPSCR2 incb             Set active screen to next one
296B D744             (       gshell.asm):05835                  stb   ACTVSCRN+1
296D 3344             (       gshell.asm):05836                  leau  SC.SIZE,U  Bump to next screen table
296F C108             (       gshell.asm):05837         GETPSCR3 cmpb  #8         On last possible active screen?
2971 2DED             (       gshell.asm):05838                  blt   GETPSCR1   No, check this screen
                      (       gshell.asm):05839         * No current screen entry of correct type
2973 CE11AB           (       gshell.asm):05840                  ldu   #SCRNTABL  IF on last screen, point to start of screen table
2976 5F               (       gshell.asm):05841                  clrb             Next routine starts @ screen 0 again
2977 2007             (       gshell.asm):05842                  bra   GETPSCR5   See if we can add new screen to list
                      (       gshell.asm):05843         
                      (       gshell.asm):05844         * This chunk checks to see if we can add a new screen to the screen table
2979 A642             (       gshell.asm):05845         GETPSCR4 lda   SC.USERS,U Is this screen initialized already?
297B 2710             (       gshell.asm):05846                  beq   GETPSCR7   No, use it
297D 5C               (       gshell.asm):05847                  incb             Yes, try next one
297E 3344             (       gshell.asm):05848                  leau  SC.SIZE,U
2980 D744             (       gshell.asm):05849         GETPSCR5 stb   ACTVSCRN+1 Save screen #
2982 C108             (       gshell.asm):05850                  cmpb  #8         On last one?
2984 2DF3             (       gshell.asm):05851                  blt   GETPSCR4   No, check next
2986 CCFFFF           (       gshell.asm):05852                  ldd   #-1        ERROR - no room for new screen
2989 EDE4             (       gshell.asm):05853         GETPSCR6 std   ,S         Save flag as to what happened
298B 2017             (       gshell.asm):05854                  bra   GETPSCR9   Restore regs & exit
                      (       gshell.asm):05855         
                      (       gshell.asm):05856         * Empty screen table entry - add new entry (Screen) for process
298D DC49             (       gshell.asm):05857         GETPSCR7 ldd   PROCWTYP   Get process window type
298F E741             (       gshell.asm):05858                  stb   SC.WTYPE,U Save as screen table screen type
2991 3406             (       gshell.asm):05859                  pshs  D          Save it
2993 8D2E             (       gshell.asm):05860                  bsr   OPNSLSHW   Open new window (/w)
2995 3262             (       gshell.asm):05861                  leas  2,S        Eat stack
2997 E7C4             (       gshell.asm):05862                  stb   SC.PTHNO,U Save new window path #
2999 E6C4             (       gshell.asm):05863         GETPSCR8 ldb   SC.PTHNO,U Get path # to screen
299B 1D               (       gshell.asm):05864                  sex              Save it as D for subroutines
299C EDE4             (       gshell.asm):05865                  std   ,S
299E 2D04             (       gshell.asm):05866                  blt   GETPSCR9   If new window failed, exit
29A0 0C44             (       gshell.asm):05867                  inc   ACTVSCRN+1 Bump up active screen #
29A2 8D02             (       gshell.asm):05868                  bsr   INITPSCR   Select new window, LSET to XOR, set up mouse
29A4 35C6             (       gshell.asm):05869         GETPSCR9 puls  D,U,PC
                      (       gshell.asm):05870         
                      (       gshell.asm):05871         * Select new window, prepare for sizing/etc.
29A6 3406             (       gshell.asm):05872         INITPSCR pshs  D          Save new window path #
29A8 3406             (       gshell.asm):05873                  pshs  D          & again
29AA 170444           (       gshell.asm):05874                  lbsr  INITMOUS   Set mouse parms & turn auto follow on
29AD 17D842           (       gshell.asm):05875                  lbsr  CURSCLOF   Cursor & scaling off
29B0 170AFE           (       gshell.asm):05876                  lbsr  SELECT     Select new window as interactive one
29B3 CC0003           (       gshell.asm):05877                  ldd   #3         gfx logic set to XOR
29B6 ED62             (       gshell.asm):05878                  std   2,S
29B8 170B42           (       gshell.asm):05879                  lbsr  LSET
29BB 6F63             (       gshell.asm):05880                  clr   3,S
29BD 17035B           (       gshell.asm):05881                  lbsr  PAUSECHO   Shut echo & pause off
29C0 3264             (       gshell.asm):05882                  leas  4,S        Eat stack & return
29C2 39               (       gshell.asm):05883                  rts   
                      (       gshell.asm):05884         
                      (       gshell.asm):05885         * Create new window - GSHPAL window stuff & VDGINT stuff should go here!
                      (       gshell.asm):05886         * Called from GETPSCR7 only. Should be able to sneak GSHPAL flag as 1st byte
                      (       gshell.asm):05887         *   of window type (0=not gshpal, <>0=gshpal), so window type needs no
                      (       gshell.asm):05888         *   massaging here (or, do masks here)
                      (       gshell.asm):05889         * Entry: 0-1,s = RTS address
                      (       gshell.asm):05890         *        2-3,s = window type
                      (       gshell.asm):05891         * Exit: D=New window path #
                      (       gshell.asm):05892         *         <0 means failure on OPEN
29C3 3440             (       gshell.asm):05893         OPNSLSHW pshs  U
29C5 8E041B           (       gshell.asm):05894                  ldx   #SLASHW
29C8 8603             (       gshell.asm):05895                  lda   #UPDAT.
29CA 1708DE           (       gshell.asm):05896                  lbsr  I.OPEN     Open /w
29CD 1F03             (       gshell.asm):05897                  tfr   D,U        Copy path # to U
29CF ED7E             (       gshell.asm):05898                  std   -2,S
29D1 2D34             (       gshell.asm):05899                  blt   OPNSLSHX   Error opening path, exit 
29D3 C650             (       gshell.asm):05900                  ldb   #80
29D5 A665             (       gshell.asm):05901                  lda   5,S        Get window type (could put GSHPAL flag at 4,s)
                      (       gshell.asm):05902         * beq SetupVDG    Add this in for when we do VDG window support
29D7 8401             (       gshell.asm):05903                  anda  #1         See if 40 or 80 column window
29D9 2602             (       gshell.asm):05904                  bne   OPNSLSH2
29DB C628             (       gshell.asm):05905                  ldb   #40
29DD 3406             (       gshell.asm):05906         OPNSLSH2 pshs  d          Save window width for DWSET
29DF C602             (       gshell.asm):05907                  ldb   #2         Border color=2
29E1 3406             (       gshell.asm):05908                  pshs  d
29E3 5F               (       gshell.asm):05909                  clrb             Background color=0
29E4 3406             (       gshell.asm):05910                  pshs  d
29E6 5C               (       gshell.asm):05911                  incb             Foreground color=1
29E7 3406             (       gshell.asm):05912                  pshs  d
29E9 C619             (       gshell.asm):05913                  ldb   #25        Window height=25
29EB 3406             (       gshell.asm):05914                  pshs  d
29ED AE68             (       gshell.asm):05915                  ldx   8,S        Get window width
29EF 5F               (       gshell.asm):05916                  clrb  
29F0 3416             (       gshell.asm):05917                  pshs  d,X        Save Y start & window width
29F2 3406             (       gshell.asm):05918                  pshs  d          Save X start
29F4 ECE814           (       gshell.asm):05919                  ldd   20,S       Get window type
29F7 3406             (       gshell.asm):05920                  pshs  d          Save for DWSET
29F9 3440             (       gshell.asm):05921                  pshs  U          Save path # to new window (new screen)
29FB 170A71           (       gshell.asm):05922                  lbsr  DWSET      Set the window
29FE 5F               (       gshell.asm):05923                  clrb  
29FF ED62             (       gshell.asm):05924                  std   2,S
2A01 170AF1           (       gshell.asm):05925                  lbsr  DWPROTSW
2A04 32E814           (       gshell.asm):05926                  leas  20,S       Eat temp stack
2A07 1F30             (       gshell.asm):05927         OPNSLSHX tfr   U,D        Transfer new window path # to D & exit
2A09 35C0             (       gshell.asm):05928                  puls  U,PC
                      (       gshell.asm):05929         
2A0B 5A               (       gshell.asm):05930         SRWINDOW decb             - Note, if B does not need to be signed, change
2A0C 8E11AB           (       gshell.asm):05931                  ldx   #SCRNTABL  LEAX d,x to abx
2A0F 58               (       gshell.asm):05932                  aslb  
2A10 58               (       gshell.asm):05933                  aslb  
2A11 308B             (       gshell.asm):05934                  leax  D,X
2A13 39               (       gshell.asm):05935                  rts   
                      (       gshell.asm):05936         
2A14 8DF5             (       gshell.asm):05937         LINKWNDW bsr   SRWINDOW
2A16 6C02             (       gshell.asm):05938                  inc   SC.USERS,X
2A18 39               (       gshell.asm):05939                  rts   
                      (       gshell.asm):05940         
                      (       gshell.asm):05941         * Unlink window from active screen list
2A19 EC62             (       gshell.asm):05942         UNLKWNDW ldd   2,S
2A1B 8DEE             (       gshell.asm):05943                  bsr   SRWINDOW
2A1D 6A02             (       gshell.asm):05944                  dec   SC.USERS,X Dec # users on current screen
2A1F 2608             (       gshell.asm):05945                  bne   UNLKWND1   Still some left, exit
                      (       gshell.asm):05946         * Close current SC.* entry path
                      (       gshell.asm):05947         * Entry: X=ptr to current entry in used screen table
2A21 A684             (       gshell.asm):05948         CLOSE.X  lda   SC.PTHNO,X Get path to window
2A23 103F8F           (       gshell.asm):05949                  os9   I$CLOSE    Close it
2A26 4F               (       gshell.asm):05950                  clra             Flag as no path anymore & return
2A27 A784             (       gshell.asm):05951                  sta   SC.PTHNO,X
2A29 39               (       gshell.asm):05952         UNLKWND1 rts   
                      (       gshell.asm):05953         
                      (       gshell.asm):05954         * Calc highest pixel values allowed for AIF entry (X&Y), and window type
                      (       gshell.asm):05955         * Saves PROCYSIZ, PROCXSIZ, PROCWTYP
                      (       gshell.asm):05956         * Entry: X=ptr to ID.* structure
2A2A EC04             (       gshell.asm):05957         GFXSIZXY ldd   ID.XSIZE,X Get min. X size for AIF entry
2A2C 17FF02           (       gshell.asm):05958                  lbsr  MULDX8     *8 for pixels
2A2F 830001           (       gshell.asm):05959                  subd  #1         -1 for far right pixel base 0
2A32 DD45             (       gshell.asm):05960                  std   PROCXSIZ   Save as min. X size for process
2A34 EC06             (       gshell.asm):05961                  ldd   ID.YSIZE,X Do pixel Y calc
2A36 17FEF8           (       gshell.asm):05962                  lbsr  MULDX8
2A39 830001           (       gshell.asm):05963                  subd  #1
2A3C DD47             (       gshell.asm):05964                  std   PROCYSIZ   Save as min. Y size for process
2A3E EC02             (       gshell.asm):05965                  ldd   ID.WTYPE,X Save AIF window type too.
2A40 DD49             (       gshell.asm):05966                  std   PROCWTYP
2A42 39               (       gshell.asm):05967                  rts   
                      (       gshell.asm):05968         
2A43 2F64642F7379732F (       gshell.asm):05969         ENV.FILE fcc   "/dd/sys/env.file"
     656E762E66696C65
2A53 00               (       gshell.asm):05970                  fcb   NUL
                      (       gshell.asm):05971         
2A54 3440             (       gshell.asm):05972         GET.ENV  pshs  U
2A56 CE11CB           (       gshell.asm):05973                  ldu   #ENVFLBFR  Point U to 80 char buffer for enviornment file lines
2A59 CCFFFF           (       gshell.asm):05974                  ldd   #$ffff     Defaults for keyboard & mouse stuff
2A5C DD52             (       gshell.asm):05975                  std   <GIPMSRES  Both mouse defaults
2A5E DD54             (       gshell.asm):05976                  std   <GIPKYST   Both keyboard defaults
2A60 CC0080           (       gshell.asm):05977                  ldd   #128       Default RAM size to 128k
2A63 9751             (       gshell.asm):05978                  sta   <CURGFXSZ  Size of GSHPAL buffer to 0
2A65 DD20             (       gshell.asm):05979                  std   <RAMSIZE
2A67 308CD9           (       gshell.asm):05980                  leax  <ENV.FILE,PC Point to filename
2A6A 3430             (       gshell.asm):05981                  pshs  X,Y
2A6C 3440             (       gshell.asm):05982                  pshs  U
2A6E 170873           (       gshell.asm):05983                  lbsr  STRCPY
2A71 3264             (       gshell.asm):05984                  leas  4,S
2A73 8601             (       gshell.asm):05985                  lda   #READ.
2A75 1F31             (       gshell.asm):05986                  tfr   U,X
2A77 170831           (       gshell.asm):05987                  lbsr  I.OPEN     Open env.file
2A7A EDE4             (       gshell.asm):05988                  std   ,S         Save path #
2A7C 2D55             (       gshell.asm):05989                  blt   GET.ENV3   Bad path #, exit
                      (       gshell.asm):05990         
2A7E CC0050           (       gshell.asm):05991         GET.ENV1 ldd   #80        Size of line buffer to read
2A81 3406             (       gshell.asm):05992                  pshs  d
2A83 3440             (       gshell.asm):05993                  pshs  U
2A85 EC64             (       gshell.asm):05994                  ldd   4,S
2A87 3406             (       gshell.asm):05995                  pshs  d
2A89 1707DF           (       gshell.asm):05996                  lbsr  I.READLN   Read line from env.file
2A8C 3266             (       gshell.asm):05997                  leas  6,S
2A8E ED7E             (       gshell.asm):05998                  std   -2,S
2A90 2F0C             (       gshell.asm):05999                  ble   GET.ENV2   End of file, close & exit
2A92 3440             (       gshell.asm):06000                  pshs  U
2A94 8D4C             (       gshell.asm):06001                  bsr   PROCENVF   Go process lines we actually pay attention to
2A96 3262             (       gshell.asm):06002                  leas  2,S
2A98 20E4             (       gshell.asm):06003                  bra   GET.ENV1   Keep going till env.file done
                      (       gshell.asm):06004         
2A9A 3446             (       gshell.asm):06005         ResetPal pshs  d,u        For GET.ENV3 below
2A9C 2022             (       gshell.asm):06006                  bra   DoPal
                      (       gshell.asm):06007         
2A9E 170813           (       gshell.asm):06008         GET.ENV2 lbsr  I.CLOSE
2AA1 3420             (       gshell.asm):06009                  pshs  y          Do mouse/keyboard updates
2AA3 9652             (       gshell.asm):06010                  lda   <GIPMSRES  Any change to Mouse resolution?
2AA5 81FF             (       gshell.asm):06011                  cmpa  #$ff
2AA7 2601             (       gshell.asm):06012                  bne   Mse2       Yes, use it
2AA9 4F               (       gshell.asm):06013                  clra             No, default to low res
2AAA D653             (       gshell.asm):06014         Mse2     ldb   <GIPMSPRT  Any change to mouse port?
2AAC C1FF             (       gshell.asm):06015                  cmpb  #$ff
2AAE 2602             (       gshell.asm):06016                  bne   Kybd1      Yes, use it
2AB0 C601             (       gshell.asm):06017                  ldb   #1         No, default to right port
2AB2 1F01             (       gshell.asm):06018         Kybd1    tfr   d,x        Move mouse stuff to X
2AB4 109E54           (       gshell.asm):06019                  ldy   <GIPKYST   Get keyboard repeat start/repeat speed
2AB7 9623             (       gshell.asm):06020                  lda   <WNDWPATH+1 Get window path
2AB9 C694             (       gshell.asm):06021                  ldb   #$94       SS.GIP call
2ABB 103F8E           (       gshell.asm):06022                  os9   I$SETSTT   Set keyboard/mouse stuff
2ABE 3520             (       gshell.asm):06023                  puls  y
2AC0 D651             (       gshell.asm):06024         DoPal    ldb   <CURGFXSZ  Get current graphics buffer write size
2AC2 270F             (       gshell.asm):06025                  beq   GET.ENV3   Empty, exit
2AC4 4F               (       gshell.asm):06026                  clra             Put in Y
2AC5 3420             (       gshell.asm):06027                  pshs  y          Save Y (else screws up)
2AC7 1F02             (       gshell.asm):06028                  tfr   d,y
2AC9 8E133D           (       gshell.asm):06029                  ldx   #GSHBUF    Point to start of buffer
2ACC 9623             (       gshell.asm):06030                  lda   <WNDWPATH+1 Get path # to window
2ACE 103F8A           (       gshell.asm):06031                  os9   I$Write    Write out palette changes
2AD1 3520             (       gshell.asm):06032                  puls  y          Restore y
2AD3 35C6             (       gshell.asm):06033         GET.ENV3 puls  D,U,PC
                      (       gshell.asm):06034         
2AD5 5242464445563D   (       gshell.asm):06035         RBFDEVEQ fcc   "RBFDEV="
2ADC 00               (       gshell.asm):06036         RBFSEND  fcb   NUL
                      (       gshell.asm):06037         
2ADD 52414D3D         (       gshell.asm):06038         RAMEQU   fcc   "RAM="
2AE1 00               (       gshell.asm):06039         RAMSEND  fcb   NUL
                      (       gshell.asm):06040         
                      (       gshell.asm):06041         * Process and env.file line
2AE2 3440             (       gshell.asm):06042         PROCENVF pshs  U
2AE4 EE64             (       gshell.asm):06043                  ldu   4,S
2AE6 327E             (       gshell.asm):06044                  leas  -2,S
2AE8 C607             (       gshell.asm):06045                  ldb   #RBFSEND-RBFDEVEQ
2AEA 308CE8           (       gshell.asm):06046                  leax  <RBFDEVEQ,PC
2AED 8D1D             (       gshell.asm):06047                  bsr   PROCLINE   Check if 'RBFDEV='
2AEF 2629             (       gshell.asm):06048                  bne   PROCENV2   No, check next
2AF1 3347             (       gshell.asm):06049                  leau  RBFSEND-RBFDEVEQ,U Point to start of string
2AF3 3440             (       gshell.asm):06050         PROCENV1 pshs  U          Save start of string ptr
2AF5 8D68             (       gshell.asm):06051                  bsr   TERMNATE   Append NUL terminator on end of device name
2AF7 ED62             (       gshell.asm):06052                  std   2,S        Save flag as to whether whole string is done
2AF9 17033C           (       gshell.asm):06053                  lbsr  ADDEVICE   Add the device to the list
2AFC 1707CD           (       gshell.asm):06054                  lbsr  STRLEN     Get length of device name
2AFF 3262             (       gshell.asm):06055                  leas  2,S        Eat extra on stack
2B01 C30001           (       gshell.asm):06056                  addd  #1         Bump length up to accomodate NUL (INCD for 6309)
2B04 33CB             (       gshell.asm):06057                  leau  D,U        Point to start of next device name (if any)
2B06 ECE4             (       gshell.asm):06058                  ldd   ,S         Get flag - do we have more to do?
2B08 27E9             (       gshell.asm):06059                  beq   PROCENV1   Yes, keep doing until all devices done
2B0A 204A             (       gshell.asm):06060                  bra   PROCENV4   No, exit process current line of env.file routine
                      (       gshell.asm):06061         
                      (       gshell.asm):06062         * Check if current env.file line=current flag we are looking for
                      (       gshell.asm):06063         * Entry:B=Size of compare to do
                      (       gshell.asm):06064         *       X=Text of current flag we are looking for
                      (       gshell.asm):06065         * Exit: Flags set so BEQ will mean a match
2B0C 3406             (       gshell.asm):06066         PROCLINE pshs  d
2B0E 3410             (       gshell.asm):06067                  pshs  X
2B10 3440             (       gshell.asm):06068                  pshs  U
2B12 170806           (       gshell.asm):06069                  lbsr  STRNCMP
2B15 3266             (       gshell.asm):06070                  leas  6,S
2B17 ED7E             (       gshell.asm):06071                  std   -2,S
2B19 39               (       gshell.asm):06072                  rts   
                      (       gshell.asm):06073         
2B1A C604             (       gshell.asm):06074         PROCENV2 ldb   #RAMSEND-RAMEQU Check for RAM setting ALREADY HANDLES >128K
2B1C 308CBE           (       gshell.asm):06075                  leax  <RAMEQU,PC
2B1F 8DEB             (       gshell.asm):06076                  bsr   PROCLINE
2B21 2613             (       gshell.asm):06077                  bne   PROCENV3   Not RAM, check next
2B23 3344             (       gshell.asm):06078                  leau  RAMSEND-RAMEQU,U Point to after RAM=
2B25 3440             (       gshell.asm):06079                  pshs  U          Save ptr
2B27 170A8A           (       gshell.asm):06080                  lbsr  ATOI       Convert ASCII text from [,u] into D register
2B2A 3262             (       gshell.asm):06081                  leas  2,S        Save RAM size from file
2B2C DD20             (       gshell.asm):06082                  std   <RAMSIZE   Save RAM size found
2B2E 2026             (       gshell.asm):06083                  bra   PROCENV4   Done processing current line
                      (       gshell.asm):06084         
2B30 455845433D       (       gshell.asm):06085         EXECEQU  fcc   "EXEC="
2B35 00               (       gshell.asm):06086         EXECSEND fcb   NUL
                      (       gshell.asm):06087         
2B36 C605             (       gshell.asm):06088         PROCENV3 ldb   #EXECSEND-EXECEQU Check for EXEC setting
2B38 308CF5           (       gshell.asm):06089                  leax  <EXECEQU,PC
2B3B 8DCF             (       gshell.asm):06090                  bsr   PROCLINE
2B3D 263D             (       gshell.asm):06091                  bne   GSHPal
2B3F 3345             (       gshell.asm):06092                  leau  EXECSEND-EXECEQU,U Point to 1st byte after EXEC=
2B41 3440             (       gshell.asm):06093                  pshs  U
2B43 8D1A             (       gshell.asm):06094                  bsr   TERMNATE   Terminate the string with a NUL
2B45 170289           (       gshell.asm):06095                  lbsr  CHGXDIR    Change Execution directory to one read from env.file
2B48 EDE1             (       gshell.asm):06096                  std   ,S++       Eat stack & set CC
2B4A 260A             (       gshell.asm):06097                  bne   PROCENV4
2B4C 8E0555           (       gshell.asm):06098                  ldx   #XDIRNAME  Copy execution path name here
2B4F 3450             (       gshell.asm):06099                  pshs  X,U
2B51 170790           (       gshell.asm):06100                  lbsr  STRCPY
2B54 3264             (       gshell.asm):06101                  leas  4,S
                      (       gshell.asm):06102         
2B56 35C6             (       gshell.asm):06103         PROCENV4 puls  d,U,PC     Restore regs & return
                      (       gshell.asm):06104         
2B58 47534850414C     (       gshell.asm):06105         GSHPALEQ fcc   "GSHPAL"   --Added for GShell palettes
2B5E 00               (       gshell.asm):06106         GSHSEND  fcb   NUL
                      (       gshell.asm):06107         
                      (       gshell.asm):06108         * Add a NUL to the end of a string segment (, or CR delimeter)
                      (       gshell.asm):06109         * Entry: 2,S=Ptr to string
                      (       gshell.asm):06110         * Exit: D=0 if end of string
                      (       gshell.asm):06111         *       D=1 if string has more to process yet
2B5F AE62             (       gshell.asm):06112         TERMNATE ldx   2,S        Get ptr to start of string
2B61 5F               (       gshell.asm):06113                  clrb             NUL to terminate string with
2B62 A684             (       gshell.asm):06114         TERMNAT1 lda   ,X         Get char
2B64 2712             (       gshell.asm):06115                  beq   TERMNAT4   Already NUL, flag & exit
2B66 812C             (       gshell.asm):06116                  cmpa  #',        Comma?
2B68 2708             (       gshell.asm):06117                  beq   TERMNAT2   Yes, set NUL & exit
2B6A 810D             (       gshell.asm):06118                  cmpa  #CR        End of line?
2B6C 2708             (       gshell.asm):06119                  beq   TERMNAT3   Yes, set NUL & flag & exit
2B6E 3001             (       gshell.asm):06120                  leax  1,X        Bump up string ptr
2B70 20F0             (       gshell.asm):06121                  bra   TERMNAT1   Keep looking
                      (       gshell.asm):06122         
2B72 E784             (       gshell.asm):06123         TERMNAT2 stb   ,X         Save NUL as separator
2B74 4F               (       gshell.asm):06124                  clra             We're done the entire string flag
2B75 39               (       gshell.asm):06125                  rts   
                      (       gshell.asm):06126         
2B76 E784             (       gshell.asm):06127         TERMNAT3 stb   ,X         Save NUL as separator
2B78 CC0001           (       gshell.asm):06128         TERMNAT4 ldd   #1         We still have more in string to do flag
2B7B 39               (       gshell.asm):06129                  rts   
                      (       gshell.asm):06130         
                      (       gshell.asm):06131         * NOTE: FROM HERE ON, SHOULD CHANGE NON-LBRA TO PROCENV4 TO BE SHORT BRANCHES
                      (       gshell.asm):06132         *  TO THE TERMINATING LBRA PROCENV4 (TO SAVE A LITTLE SPACE)
                      (       gshell.asm):06133         
                      (       gshell.asm):06134         * Added by LCB 8/12/1998 - Check for GShell default palettes (only 0-3 legit)
2B7C C606             (       gshell.asm):06135         GSHPal   ldb   #GSHSEND-GSHPALEQ Check for GSHPAL setting
2B7E 308CD7           (       gshell.asm):06136                  leax  <GSHPALEQ,pc
2B81 8D89             (       gshell.asm):06137                  bsr   PROCLINE
2B83 10260095         (       gshell.asm):06138                  lbne  DefCheck   Not, try next
2B87 3346             (       gshell.asm):06139         PalLoop  leau  GSHSEND-GSHPALEQ,u Point to 1st byte after GSHPAL
2B89 ECC1             (       gshell.asm):06140                  ldd   ,u++       Get palette # to assign to
2B8B C13D             (       gshell.asm):06141                  cmpb  #'=        2nd char '='?
2B8D 26C7             (       gshell.asm):06142                  bne   PROCENV4   No, ignore this line
2B8F 8030             (       gshell.asm):06143                  suba  #$30       Convert to binary palette #
2B91 2DC3             (       gshell.asm):06144                  blt   PROCENV4   Went negative, ignore line
2B93 8103             (       gshell.asm):06145                  cmpa  #3         Within palette range?
2B95 22BF             (       gshell.asm):06146                  bhi   PROCENV4   No, ignore this line
2B97 974F             (       gshell.asm):06147                  sta   <CURPAL    Save palette #
2B99 ECC1             (       gshell.asm):06148                  ldd   ,u++       Get next 2 chars
2B9B C12C             (       gshell.asm):06149                  cmpb  #',        2nd a comma?
2B9D 26B7             (       gshell.asm):06150                  bne   PROCENV4   No, ignore line
2B9F 8030             (       gshell.asm):06151                  suba  #$30       Convert to binary
2BA1 2DB3             (       gshell.asm):06152                  blt   PROCENV4   negative, ignore line
2BA3 8103             (       gshell.asm):06153                  cmpa  #3         Within range?
2BA5 22AF             (       gshell.asm):06154                  bhi   PROCENV4   (No, ignore line)
2BA7 48               (       gshell.asm):06155                  lsla             Move to 1st red bit
2BA8 48               (       gshell.asm):06156                  lsla  
2BA9 1F89             (       gshell.asm):06157                  tfr   a,b        Save copy
2BAB 8404             (       gshell.asm):06158                  anda  #4         Save lsb
2BAD 3402             (       gshell.asm):06159                  pshs  a
2BAF 58               (       gshell.asm):06160                  lslb             Calculate msb of RED
2BB0 58               (       gshell.asm):06161                  lslb  
2BB1 C420             (       gshell.asm):06162                  andb  #$20
2BB3 EBE0             (       gshell.asm):06163                  addb  ,s+        Merge the reds together
2BB5 D750             (       gshell.asm):06164                  stb   <CURCOLOR  Save it
2BB7 ECC1             (       gshell.asm):06165                  ldd   ,u++       Get next color
2BB9 C12C             (       gshell.asm):06166                  cmpb  #',        2nd char a comma?
2BBB 2699             (       gshell.asm):06167                  bne   PROCENV4   No, ignore line
2BBD 8030             (       gshell.asm):06168                  suba  #$30       Convert to binary
2BBF 2D95             (       gshell.asm):06169                  blt   PROCENV4   negative, ignore line
2BC1 8103             (       gshell.asm):06170                  cmpa  #3         Within range?
2BC3 2291             (       gshell.asm):06171                  bhi   PROCENV4   (No, ignore line)
2BC5 48               (       gshell.asm):06172                  lsla             Shift to 1st Green bit
2BC6 1F89             (       gshell.asm):06173                  tfr   a,b        Save copy
2BC8 8402             (       gshell.asm):06174                  anda  #2         Save lsb
2BCA 3402             (       gshell.asm):06175                  pshs  a
2BCC 58               (       gshell.asm):06176                  lslb             Calculate msb of Green
2BCD 58               (       gshell.asm):06177                  lslb  
2BCE C410             (       gshell.asm):06178                  andb  #$10
2BD0 EBE0             (       gshell.asm):06179                  addb  ,s+        Merge the greens together
2BD2 DA50             (       gshell.asm):06180                  orb   <CURCOLOR  mix with red
2BD4 D750             (       gshell.asm):06181                  stb   <CURCOLOR  Save it
2BD6 ECC1             (       gshell.asm):06182                  ldd   ,u++       Get last color
2BD8 C10D             (       gshell.asm):06183                  cmpb  #CR        2nd char a CR?
2BDA 262B             (       gshell.asm):06184                  bne   GSHPalEx   No, ignore line
2BDC 8030             (       gshell.asm):06185                  suba  #$30       Convert to binary
2BDE 2D27             (       gshell.asm):06186                  blt   GSHPalEx   negative, ignore line
2BE0 8103             (       gshell.asm):06187                  cmpa  #3         Within range?
2BE2 2223             (       gshell.asm):06188                  bhi   GSHPALEx   (No, ignore line)
2BE4 1F89             (       gshell.asm):06189                  tfr   a,b
2BE6 C401             (       gshell.asm):06190                  andb  #1
2BE8 3404             (       gshell.asm):06191                  pshs  b          Save lsb of Blue
2BEA 48               (       gshell.asm):06192                  lsla             Move msb of Blue
2BEB 48               (       gshell.asm):06193                  lsla  
2BEC 8408             (       gshell.asm):06194                  anda  #$08       Just msb
2BEE ABE0             (       gshell.asm):06195                  adda  ,s+        Merge blues together
2BF0 9A50             (       gshell.asm):06196                  ora   <CURCOLOR  merge with red/green
2BF2 8E133D           (       gshell.asm):06197                  ldx   #GSHBUF    Point to start of palette buffer
2BF5 D651             (       gshell.asm):06198                  ldb   <CURGFXSZ  Get size of previous buffer
2BF7 3A               (       gshell.asm):06199                  abx              Point X to start
2BF8 CB04             (       gshell.asm):06200                  addb  #4         Add for next position
2BFA D751             (       gshell.asm):06201                  stb   <CURGFXSZ  Save it
2BFC A703             (       gshell.asm):06202                  sta   3,x        Save color
2BFE 964F             (       gshell.asm):06203                  lda   <CURPAL    Get current palette
2C00 A702             (       gshell.asm):06204                  sta   2,x        Save palette
2C02 CC1B31           (       gshell.asm):06205                  ldd   #$1b31     Change palette command
2C05 ED84             (       gshell.asm):06206                  std   ,x         Save it
2C07 16FF4C           (       gshell.asm):06207         GSHPalEx lbra  PROCENV4   Done processing line
                      (       gshell.asm):06208         
2C0A 444546545950453D (       gshell.asm):06209         DEFTYPE  fcc   "DEFTYPE="
2C12 00               (       gshell.asm):06210         DEFTPEND fcb   NUL
                      (       gshell.asm):06211         
2C13 4D4F4E545950453D (       gshell.asm):06212         MONITOR  fcc   "MONTYPE="
2C1B 00               (       gshell.asm):06213         MONTEND  fcb   NUL
                      (       gshell.asm):06214         
                      (       gshell.asm):06215         * Added by LCB 12/24/1998 - Check for Default screen type=6,7,8
2C1C C608             (       gshell.asm):06216         DefCheck ldb   #DEFTPEND-DEFTYPE Check for Default screen type
2C1E 308CE9           (       gshell.asm):06217                  leax  <DEFTYPE,PC
2C21 17FEE8           (       gshell.asm):06218                  lbsr  PROCLINE
2C24 2613             (       gshell.asm):06219                  bne   MonCheck   No, try next
2C26 3348             (       gshell.asm):06220                  leau  DEFTPEND-DEFTYPE,u Point to after DEFTYPE=
2C28 A6C4             (       gshell.asm):06221                  lda   ,u         Get screen type
2C2A 8030             (       gshell.asm):06222                  suba  #$30       Adjust to binary
2C2C 8106             (       gshell.asm):06223                  cmpa  #6         Below type 6?
2C2E 2506             (       gshell.asm):06224                  blo   DefEx      Yes, ignore
2C30 8108             (       gshell.asm):06225                  cmpa  #8         Above type 8?
2C32 2202             (       gshell.asm):06226                  bhi   DefEx      Yes, ignore
2C34 9702             (       gshell.asm):06227                  sta   DEFWTYPE+1 One of 3 good ones, save it
2C36 16FF1D           (       gshell.asm):06228         DefEx    lbra  PROCENV4   Done processing current line
                      (       gshell.asm):06229         
                      (       gshell.asm):06230         * Added by LCB 04/15/1999 - set monitor type
2C39 C608             (       gshell.asm):06231         MonCheck ldb   #MONTEND-MONITOR Check for monitor type
2C3B 308CD5           (       gshell.asm):06232                  leax  <MONITOR,pc
2C3E 17FECB           (       gshell.asm):06233                  lbsr  PROCLINE
2C41 261F             (       gshell.asm):06234                  bne   MousChk1   No, try next
2C43 3348             (       gshell.asm):06235                  leau  MONTEND-MONITOR,u Point to after MONTYPE=
2C45 E6C4             (       gshell.asm):06236                  ldb   ,u         Get monitor type
2C47 C030             (       gshell.asm):06237                  subb  #$30       Adjust to binary
2C49 C102             (       gshell.asm):06238                  cmpb  #2         Above 2, ignore
2C4B 220A             (       gshell.asm):06239                  bhi   MonEx
2C4D 4F               (       gshell.asm):06240                  clra  
2C4E 1F01             (       gshell.asm):06241                  tfr   d,x        Move to proper register
2C50 9623             (       gshell.asm):06242                  lda   <WNDWPATH+1 Get path # to window
2C52 C692             (       gshell.asm):06243                  ldb   #$92       SS.Montr call
2C54 103F8E           (       gshell.asm):06244                  os9   I$SETSTT   Change monitor type
2C57 16FEFC           (       gshell.asm):06245         MonEx    lbra  PROCENV4   Done processing current line
                      (       gshell.asm):06246         
2C5A 5054525349443D   (       gshell.asm):06247         PTRSIDE  fcc   "PTRSID="
2C61 00               (       gshell.asm):06248         PTRSDEND fcb   NUL
                      (       gshell.asm):06249         
                      (       gshell.asm):06250         * Following 4 (PTRSID, PTRRES, REPSPD, REPSTR) added by LCB 04/15/1999 - set
                      (       gshell.asm):06251         *   keyboard and mouse parameters
2C62 C607             (       gshell.asm):06252         MousChk1 ldb   #PTRSDEND-PTRSIDE Check for Mouse port
2C64 308CF3           (       gshell.asm):06253                  leax  <PTRSIDE,pc
2C67 17FEA2           (       gshell.asm):06254                  lbsr  PROCLINE
2C6A 261E             (       gshell.asm):06255                  bne   MousChk2   No, try next
2C6C 3347             (       gshell.asm):06256                  leau  PTRSDEND-PTRSIDE,u Point to after PTRSID=
2C6E A6C4             (       gshell.asm):06257                  lda   ,u         Get parm
2C70 8030             (       gshell.asm):06258                  suba  #$30       ASC to binary
2C72 8101             (       gshell.asm):06259                  cmpa  #1
2C74 2209             (       gshell.asm):06260                  bhi   Mse1Ex     <>0 or 1 is illegal
2C76 C601             (       gshell.asm):06261                  ldb   #1
                      (       gshell.asm):06262                  IFNE  H6309
                      (       gshell.asm):06263                  subr  a,b        Invert value
                      (       gshell.asm):06264                  ELSE
2C78 3402             (       gshell.asm):06265                  pshs  a
2C7A E0E0             (       gshell.asm):06266                  subb  ,s+
                      (       gshell.asm):06267                  ENDC
2C7C 5C               (       gshell.asm):06268                  incb             Bump up to 1-2 for SS.GIP
2C7D 9753             (       gshell.asm):06269                  sta   <GIPMSPRT  Save it
2C7F 16FED4           (       gshell.asm):06270         Mse1Ex   lbra  PROCENV4
                      (       gshell.asm):06271         
2C82 5054525245533D   (       gshell.asm):06272         PTRRES   fcc   'PTRRES='
2C89 00               (       gshell.asm):06273         PTRRESEN fcb   NUL
                      (       gshell.asm):06274         
2C8A C607             (       gshell.asm):06275         MousChk2 ldb   #PTRRESEN-PTRRES Check for mouse resolution
2C8C 308CF3           (       gshell.asm):06276                  leax  <PTRRES,pc
2C8F 17FE7A           (       gshell.asm):06277                  lbsr  PROCLINE
2C92 261C             (       gshell.asm):06278                  bne   KybdChk1   No, try next
2C94 3347             (       gshell.asm):06279                  leau  PTRRESEN-PTRRES,u Point to after PTRRES=
2C96 A6C4             (       gshell.asm):06280                  lda   ,u         Get parm
2C98 8030             (       gshell.asm):06281                  suba  #$30       ASC to bin
2C9A 8101             (       gshell.asm):06282                  cmpa  #1
2C9C 2202             (       gshell.asm):06283                  bhi   Mse2Ex     <>1 or 2 is illegal
2C9E 9752             (       gshell.asm):06284                  sta   <GIPMSRES  Save mouse res
2CA0 16FEB3           (       gshell.asm):06285         Mse2Ex   lbra  PROCENV4
                      (       gshell.asm):06286         
2CA3 5245505354523D   (       gshell.asm):06287         REPSTR   fcc   'REPSTR='
2CAA 00               (       gshell.asm):06288         REPSTREN fcb   NUL
                      (       gshell.asm):06289         
                      (       gshell.asm):06290         * Start delay table from CONTROL
2CAB 002D1E140A       (       gshell.asm):06291         StrtTble fcb   0,45,30,20,10
                      (       gshell.asm):06292         
2CB0 C607             (       gshell.asm):06293         KybdChk1 ldb   #REPSTREN-REPSTR Check for keyboard repeat start
2CB2 308CEE           (       gshell.asm):06294                  leax  <REPSTR,pc
2CB5 17FE54           (       gshell.asm):06295                  lbsr  PROCLINE
2CB8 2624             (       gshell.asm):06296                  bne   KybdChk2   No, try next
2CBA 3347             (       gshell.asm):06297                  leau  REPSTREN-REPSTR,u Point to after REPSTR=
2CBC A6C4             (       gshell.asm):06298                  lda   ,u         Get parm
2CBE 8030             (       gshell.asm):06299                  suba  #$30       ASC to bin
2CC0 270C             (       gshell.asm):06300                  beq   Key1Ex     0 not legal
2CC2 8105             (       gshell.asm):06301                  cmpa  #5
2CC4 2208             (       gshell.asm):06302                  bhi   Key1Ex     Above 5 ain't either (unlike manual's 3)
2CC6 308CE2           (       gshell.asm):06303                  leax  <StrtTble,pc Point to table
2CC9 4A               (       gshell.asm):06304                  deca             0-4
2CCA E686             (       gshell.asm):06305                  ldb   a,x        Get speed setting
2CCC D754             (       gshell.asm):06306                  stb   <GIPKYST   Save keyboard repeat start
2CCE 16FE85           (       gshell.asm):06307         Key1Ex   lbra  PROCENV4
                      (       gshell.asm):06308         
2CD1 5245505350443D   (       gshell.asm):06309         REPSPD   fcc   'REPSPD='
2CD8 00               (       gshell.asm):06310         REPSPDEN fcb   NUL
                      (       gshell.asm):06311         
2CD9 180C060302       (       gshell.asm):06312         SpdTble  fcb   24,12,6,3,2
                      (       gshell.asm):06313         
2CDE C607             (       gshell.asm):06314         KybdChk2 ldb   #REPSPDEN-REPSPD Check for keyboard repeat speed
2CE0 308CEE           (       gshell.asm):06315                  leax  <REPSPD,pc
2CE3 17FE26           (       gshell.asm):06316                  lbsr  PROCLINE
2CE6 2614             (       gshell.asm):06317                  bne   Key2Ex     No, done processing current line
2CE8 3347             (       gshell.asm):06318                  leau  REPSPDEN-REPSPD,u Point to after REPSPD=
2CEA A6C4             (       gshell.asm):06319                  lda   ,u         Get parm
2CEC 8030             (       gshell.asm):06320                  suba  #$30       ASC to bin
2CEE 270C             (       gshell.asm):06321                  beq   Key2Ex     0 not legal
2CF0 8105             (       gshell.asm):06322                  cmpa  #5
2CF2 2208             (       gshell.asm):06323                  bhi   Key2Ex     Above 5 ain't either (unlike manual's 3)
2CF4 308CE2           (       gshell.asm):06324                  leax  <SpdTble,pc Point to table
2CF7 4A               (       gshell.asm):06325                  deca             0-4
2CF8 E686             (       gshell.asm):06326                  ldb   a,x        Get speed setting
2CFA D755             (       gshell.asm):06327                  stb   <GIPKYSPD  Save keyboard repeat speed
2CFC 16FE57           (       gshell.asm):06328         Key2Ex   lbra  PROCENV4
                      (       gshell.asm):06329         
                      (       gshell.asm):06330         * Get file descriptor info
2CFF 3476             (       gshell.asm):06331         GT.FDINF pshs  d,X,Y,U
2D01 AE6C             (       gshell.asm):06332                  ldx   12,S
2D03 30881D           (       gshell.asm):06333                  leax  DIR.FD,X
2D06 A680             (       gshell.asm):06334                  lda   ,X+
2D08 C601             (       gshell.asm):06335                  ldb   #1
2D0A 1F02             (       gshell.asm):06336                  tfr   D,Y
2D0C EE84             (       gshell.asm):06337                  ldu   ,X
2D0E AE6E             (       gshell.asm):06338                  ldx   14,S
2D10 A661             (       gshell.asm):06339                  lda   1,S
2D12 C620             (       gshell.asm):06340                  ldb   #SS.FDINF
2D14 103F8D           (       gshell.asm):06341                  os9   I$GETSTT
2D17 3576             (       gshell.asm):06342                  puls  d,X,Y,U
2D19 2015             (       gshell.asm):06343                  bra   ISYSRET1
                      (       gshell.asm):06344         
                      (       gshell.asm):06345         * Entry: 0-1,s  = RTS address
                      (       gshell.asm):06346         *        2-3,s  = Path for window (only use 3,s)
                      (       gshell.asm):06347         *        4-5,s  = On/off flag (0=off, 1=on) (only use 5,s)
2D1B 8E121F           (       gshell.asm):06348         PAUSECHO ldx   #SSOPTBFR  Point to window's SS.option buffer
2D1E A663             (       gshell.asm):06349                  lda   3,S        Get path
2D20 5F               (       gshell.asm):06350                  clrb             SS.OPT Getstat
2D21 103F8D           (       gshell.asm):06351                  os9   I$GETSTT   Get current window options
2D24 250A             (       gshell.asm):06352                  bcs   ISYSRET1
2D26 E665             (       gshell.asm):06353                  ldb   5,S        Get on/off flag
2D28 E704             (       gshell.asm):06354                  stb   4,X        Set echo
2D2A E707             (       gshell.asm):06355                  stb   7,X        Set page pause
2D2C 5F               (       gshell.asm):06356                  clrb             SS.OPT SetStat
2D2D 103F8E           (       gshell.asm):06357                  os9   I$SETSTT   Set echo & pause options
2D30 1609BF           (       gshell.asm):06358         ISYSRET1 lbra  SYSRET
                      (       gshell.asm):06359         
                      (       gshell.asm):06360         *Close box char, and CurXY to 8,0
2D33 C7022820         (       gshell.asm):06361         CBOXICON fcb   $C7,$02,$28,$20
                      (       gshell.asm):06362         
                      (       gshell.asm):06363         *Text string to draw 80 column wide stripes for directory bar
                      (       gshell.asm):06364         * We should make this box/line calls, as faster (possibly smaller?)
2D37 C5C5C5C5C5C5C5C5 (       gshell.asm):06365         STRIPBAR fcb   $C5,$C5,$C5,$C5,$C5,$C5,$C5,$C5
2D3F C5C5C5C5C5C5C5C5 (       gshell.asm):06366                  fcb   $C5,$C5,$C5,$C5,$C5,$C5,$C5,$C5
2D47 C5C5C5C5C5C5C5C5 (       gshell.asm):06367                  fcb   $C5,$C5,$C5,$C5,$C5,$C5,$C5,$C5
2D4F C5C5C5C5C5C5C5C5 (       gshell.asm):06368                  fcb   $C5,$C5,$C5,$C5,$C5,$C5,$C5,$C5
2D57 C5C5C5C5C5C500   (       gshell.asm):06369                  fcb   $C5,$C5,$C5,$C5,$C5,$C5,$00
                      (       gshell.asm):06370         
2D5E 308CD2           (       gshell.asm):06371         WBOX.BAR leax  <CBOXICON,PC Point to CLOSE box & CurXY 8,0
2D61 C61D             (       gshell.asm):06372                  ldb   #29        Default to close box & 25 "stripe" bar chars to write
2D63 0D1B             (       gshell.asm):06373                  tst   FLAG640W
2D65 2727             (       gshell.asm):06374                  beq   WRITEBX    If 320 pixel screen, go write it
2D67 DC22             (       gshell.asm):06375                  ldd   <WNDWPATH  Save window path
2D69 3406             (       gshell.asm):06376                  pshs  d
2D6B C621             (       gshell.asm):06377                  ldb   #33        Do close box & 29 "stripe" bar chars
2D6D 8D1F             (       gshell.asm):06378                  bsr   WRITEBX
2D6F 3262             (       gshell.asm):06379                  leas  2,S        Eat temp window path
2D71 C624             (       gshell.asm):06380                  ldb   #36        Do 36 more "stripe" bar chars (65 total)
2D73 308CC1           (       gshell.asm):06381                  leax  <STRIPBAR,PC
2D76 2016             (       gshell.asm):06382                  bra   WRITEBX
                      (       gshell.asm):06383         
2D78 8E121B           (       gshell.asm):06384         GOTOXY   ldx   #GFXBUF2
2D7B 8602             (       gshell.asm):06385                  lda   #2
2D7D E665             (       gshell.asm):06386                  ldb   5,S
2D7F CB20             (       gshell.asm):06387                  addb  #SPACE
2D81 ED84             (       gshell.asm):06388                  std   ,X
2D83 E667             (       gshell.asm):06389                  ldb   7,S
2D85 CB20             (       gshell.asm):06390                  addb  #SPACE
2D87 E702             (       gshell.asm):06391                  stb   2,X
2D89 C603             (       gshell.asm):06392                  ldb   #3
                      (       gshell.asm):06393         
2D8B 8E121B           (       gshell.asm):06394         GFXWR2   ldx   #GFXBUF2
                      (       gshell.asm):06395         
                      (       gshell.asm):06396         * Write text string
                      (       gshell.asm):06397         * Entry: B    =# chars to write
                      (       gshell.asm):06398         *        X    =Ptr to text to write
                      (       gshell.asm):06399         *        4-5,s=Path to write to (only 5 used) 
2D8E 3420             (       gshell.asm):06400         WRITEBX  pshs  Y
2D90 4F               (       gshell.asm):06401                  clra  
2D91 1F02             (       gshell.asm):06402                  tfr   D,Y
2D93 A665             (       gshell.asm):06403                  lda   5,S
2D95 103F8A           (       gshell.asm):06404                  os9   I$WRITE
2D98 3520             (       gshell.asm):06405                  puls  Y
2D9A 2094             (       gshell.asm):06406                  bra   ISYSRET1
                      (       gshell.asm):06407         
2D9C C60C             (       gshell.asm):06408         CLRSCRN  ldb   #FF
2D9E 2002             (       gshell.asm):06409                  bra   OUT1
                      (       gshell.asm):06410         
2DA0 C607             (       gshell.asm):06411         RINGBELL ldb   #BEL
2DA2 E7A9121B         (       gshell.asm):06412         OUT1     stb   GFXBUF2,Y
2DA6 C601             (       gshell.asm):06413                  ldb   #1
2DA8 20E1             (       gshell.asm):06414                  bra   GFXWR2
                      (       gshell.asm):06415         
2DAA C621             (       gshell.asm):06416         CURSORON ldb   #$21
2DAC 2002             (       gshell.asm):06417                  bra   CURSRSET
                      (       gshell.asm):06418         
2DAE C620             (       gshell.asm):06419         CURSROFF ldb   #$20
2DB0 8605             (       gshell.asm):06420         CURSRSET lda   #5
2DB2 EDA9121B         (       gshell.asm):06421                  std   GFXBUF2,Y
2DB6 C602             (       gshell.asm):06422                  ldb   #2
2DB8 20D1             (       gshell.asm):06423                  bra   GFXWR2
                      (       gshell.asm):06424         
                      (       gshell.asm):06425         * Change gfx cursor to arrow
2DBA 86CA             (       gshell.asm):06426         CRSRAROW lda   #GRP.PTR
2DBC C601             (       gshell.asm):06427                  ldb   #PTR.ARR
2DBE 2002             (       gshell.asm):06428                  bra   GCSET.2
                      (       gshell.asm):06429         
2DC0 4F               (       gshell.asm):06430         GCSETOFF clra  
2DC1 5F               (       gshell.asm):06431                  clrb  
2DC2 EDA9121D         (       gshell.asm):06432         GCSET.2  std   GFXBUF2+2,Y
2DC6 CC1B39           (       gshell.asm):06433                  ldd   #$1B39
2DC9 EDA9121B         (       gshell.asm):06434                  std   GFXBUF2,Y
2DCD C604             (       gshell.asm):06435                  ldb   #4
2DCF 20BA             (       gshell.asm):06436                  bra   GFXWR2
                      (       gshell.asm):06437         
                      (       gshell.asm):06438         * Entry for change EXEC dir
2DD1 8604             (       gshell.asm):06439         CHGXDIR  lda   #EXEC.
2DD3 2002             (       gshell.asm):06440                  bra   I.CHGDIR
                      (       gshell.asm):06441         
                      (       gshell.asm):06442         * Entry for change DATA dir
2DD5 8601             (       gshell.asm):06443         CHGDDIR  lda   #READ.
2DD7 3402             (       gshell.asm):06444         I.CHGDIR pshs  A
                      (       gshell.asm):06445         * SHOULD WE CHANGE TO JUST DROP SAMPLING RATE SO MOUSE CAN STILL MOVE?
                      (       gshell.asm):06446         * Shut mouse off (note that keyboard mouse ignores this)
2DD9 17F28F           (       gshell.asm):06447                  lbsr  NOMOUSE
2DDC 3502             (       gshell.asm):06448                  puls  A
2DDE AE62             (       gshell.asm):06449                  ldx   2,S
2DE0 103F86           (       gshell.asm):06450                  os9   I$CHGDIR
2DE3 3405             (       gshell.asm):06451                  pshs  CC,B
                      (       gshell.asm):06452         * Mouse back on
2DE5 17F28F           (       gshell.asm):06453                  lbsr  MOUSENOW
2DE8 3505             (       gshell.asm):06454                  puls  CC,B
2DEA 160905           (       gshell.asm):06455                  lbra  SYSRET
                      (       gshell.asm):06456         
2DED 4F               (       gshell.asm):06457         MOUSOFF  clra  
2DEE 5F               (       gshell.asm):06458                  clrb  
2DEF 2003             (       gshell.asm):06459                  bra   INITMOU1
                      (       gshell.asm):06460         
                      (       gshell.asm):06461         *             0-1,s = Path to window to read mouse from
                      (       gshell.asm):06462         *             2-3,s = Mouse sampling rate
                      (       gshell.asm):06463         *             4-5,s = Mouse button timeout
                      (       gshell.asm):06464         *             6-7 ,s= Auto follow mouse flag 
                      (       gshell.asm):06465         * Init mouse to 
2DF1 CC0003           (       gshell.asm):06466         INITMOUS ldd   #3
2DF4 8E0001           (       gshell.asm):06467         INITMOU1 ldx   #1
2DF7 3410             (       gshell.asm):06468                  pshs  X
2DF9 3416             (       gshell.asm):06469                  pshs  d,X        Save mouse sampling rate & mouse button timeout
2DFB EC68             (       gshell.asm):06470                  ldd   8,S
2DFD 3406             (       gshell.asm):06471                  pshs  d          Save path to window mouse is on
                      (       gshell.asm):06472         * NOTE: ONLY CALLED ONCE...EMBED WITH RAW CALL!
2DFF 1705CC           (       gshell.asm):06473                  lbsr  ST.MOUSE   Set mouse parms
2E02 3268             (       gshell.asm):06474                  leas  8,S        Eat temp stack & return
2E04 39               (       gshell.asm):06475                  rts   
                      (       gshell.asm):06476         
2E05 3440             (       gshell.asm):06477         SETUPENV pshs  U
2E07 CE1241           (       gshell.asm):06478                  ldu   #DRIVETBL
2E0A DF56             (       gshell.asm):06479                  stu   <DRTBLPTR
2E0C 8E1287           (       gshell.asm):06480                  ldx   #DRVNMTBL
2E0F 4F               (       gshell.asm):06481                  clra  
2E10 AF4C             (       gshell.asm):06482         SETUPEN1 stx   FL.FNAME,U
2E12 C605             (       gshell.asm):06483                  ldb   #IC.DRIVE
2E14 E748             (       gshell.asm):06484                  stb   FL.ICONO,U
2E16 C608             (       gshell.asm):06485                  ldb   #8
2E18 EDC4             (       gshell.asm):06486                  std   FL.XSTRT,U
2E1A C620             (       gshell.asm):06487                  ldb   #32
2E1C ED44             (       gshell.asm):06488                  std   FL.XEND,U
2E1E D616             (       gshell.asm):06489                  ldb   <DRIVYPOS
2E20 ED42             (       gshell.asm):06490                  std   FL.YSTRT,U
2E22 CB0C             (       gshell.asm):06491                  addb  #12
2E24 ED46             (       gshell.asm):06492                  std   FL.YEND,U
2E26 CB0C             (       gshell.asm):06493                  addb  #12
2E28 D716             (       gshell.asm):06494                  stb   <DRIVYPOS
2E2A 308820           (       gshell.asm):06495                  leax  32,X
2E2D 334E             (       gshell.asm):06496                  leau  FL.SIZE,U
2E2F 0A15             (       gshell.asm):06497                  dec   <DEVICNTR
2E31 26DD             (       gshell.asm):06498                  bne   SETUPEN1
2E33 17FC1E           (       gshell.asm):06499                  lbsr  GET.ENV    Read env.sys file
2E36 35C0             (       gshell.asm):06500                  puls  U,PC
                      (       gshell.asm):06501         
2E38 3440             (       gshell.asm):06502         ADDEVICE pshs  U
2E3A 9E56             (       gshell.asm):06503                  ldx   <DRTBLPTR
2E3C D615             (       gshell.asm):06504                  ldb   <DEVICNTR
2E3E C105             (       gshell.asm):06505                  cmpb  #5
2E40 2C18             (       gshell.asm):06506                  bge   ADDEVIC1
2E42 3404             (       gshell.asm):06507                  pshs  B
2E44 0C15             (       gshell.asm):06508                  inc   DEVICNTR
2E46 EE65             (       gshell.asm):06509                  ldu   5,S
2E48 3450             (       gshell.asm):06510                  pshs  X,U
2E4A 8D10             (       gshell.asm):06511                  bsr   MOVDNAME
2E4C 3550             (       gshell.asm):06512                  puls  X,U
2E4E 330E             (       gshell.asm):06513                  leau  FL.SIZE,X
2E50 DF56             (       gshell.asm):06514                  stu   <DRTBLPTR
2E52 E6E0             (       gshell.asm):06515                  ldb   ,S+
2E54 2704             (       gshell.asm):06516                  beq   ADDEVIC1
2E56 3312             (       gshell.asm):06517                  leau  0-FL.SIZE,X
2E58 AF4A             (       gshell.asm):06518                  stx   FL.LINK,U
2E5A 35C0             (       gshell.asm):06519         ADDEVIC1 puls  U,PC
                      (       gshell.asm):06520         
2E5C AE62             (       gshell.asm):06521         MOVDNAME ldx   2,S
2E5E EC0C             (       gshell.asm):06522                  ldd   FL.FNAME,X
2E60 AE64             (       gshell.asm):06523                  ldx   4,S
2E62 3416             (       gshell.asm):06524                  pshs  d,X
2E64 17047D           (       gshell.asm):06525                  lbsr  STRCPY
2E67 3264             (       gshell.asm):06526                  leas  4,S
2E69 39               (       gshell.asm):06527                  rts   
                      (       gshell.asm):06528         
2E6A D615             (       gshell.asm):06529         FIXDRTBL ldb   <DEVICNTR
2E6C 272A             (       gshell.asm):06530                  beq   FIXDRTB1
2E6E DC34             (       gshell.asm):06531                  ldd   <SELECTED
2E70 2707             (       gshell.asm):06532                  beq   FIXDRTBX
2E72 3406             (       gshell.asm):06533                  pshs  d
2E74 17DD2F           (       gshell.asm):06534                  lbsr  UNSLICON
2E77 3262             (       gshell.asm):06535                  leas  2,S
                      (       gshell.asm):06536         
2E79 9E56             (       gshell.asm):06537         FIXDRTBX ldx   <DRTBLPTR
                      (       gshell.asm):06538                  IFNE  H6309
                      (       gshell.asm):06539                  clrd  
                      (       gshell.asm):06540                  ELSE
2E7B 4F               (       gshell.asm):06541                  clra
2E7C 5F               (       gshell.asm):06542                  clrb
                      (       gshell.asm):06543                  ENDC
2E7D DD34             (       gshell.asm):06544                  std   <SELECTED
2E7F ED1C             (       gshell.asm):06545                  std   FL.LINK-FL.SIZE,X
2E81 DC36             (       gshell.asm):06546                  ldd   <DEVICNOW
2E83 2713             (       gshell.asm):06547                  beq   FIXDRTB1
2E85 9C36             (       gshell.asm):06548                  cmpx  <DEVICNOW
2E87 220F             (       gshell.asm):06549                  bhi   FIXDRTB1
                      (       gshell.asm):06550                  IFNE  H6309
                      (       gshell.asm):06551                  clrd  
                      (       gshell.asm):06552                  ELSE
2E89 4F               (       gshell.asm):06553                  clra
2E8A 5F               (       gshell.asm):06554                  clrb
                      (       gshell.asm):06555                  ENDC
2E8B DD36             (       gshell.asm):06556                  std   <DEVICNOW
2E8D DD2C             (       gshell.asm):06557                  std   <STRTICON
2E8F 1700CE           (       gshell.asm):06558                  lbsr  ENFREFL1
2E92 1700BE           (       gshell.asm):06559                  lbsr  ENBLSOFF
2E95 17D9B5           (       gshell.asm):06560                  lbsr  CLRDSCRN
2E98 39               (       gshell.asm):06561         FIXDRTB1 rts   
                      (       gshell.asm):06562         
2E99 3440             (       gshell.asm):06563         CHGDEVCS pshs  U
2E9B 32E8DA           (       gshell.asm):06564                  leas  -38,S
2E9E 3066             (       gshell.asm):06565                  leax  6,S
2EA0 AF64             (       gshell.asm):06566                  stx   4,S
2EA2 CC0003           (       gshell.asm):06567                  ldd   #3
2EA5 3406             (       gshell.asm):06568                  pshs  d
2EA7 5A               (       gshell.asm):06569                  decb  
2EA8 3406             (       gshell.asm):06570                  pshs  d
2EAA C60A             (       gshell.asm):06571                  ldb   #10
2EAC 3406             (       gshell.asm):06572                  pshs  d
2EAE 8E0014           (       gshell.asm):06573                  ldx   #20
2EB1 C60B             (       gshell.asm):06574                  ldb   #11
2EB3 3416             (       gshell.asm):06575                  pshs  d,X
2EB5 5A               (       gshell.asm):06576                  decb  
2EB6 3406             (       gshell.asm):06577                  pshs  d
2EB8 8E0001           (       gshell.asm):06578                  ldx   #1
2EBB D623             (       gshell.asm):06579                  ldb   <WNDWPATH+1
2EBD 3416             (       gshell.asm):06580                  pshs  d,X
2EBF 1705BB           (       gshell.asm):06581                  lbsr  OWSET      Overlay window
2EC2 CC0004           (       gshell.asm):06582                  ldd   #WT.DBOX
2EC5 ED62             (       gshell.asm):06583                  std   2,S
2EC7 170593           (       gshell.asm):06584                  lbsr  ST.WNSET   Double boxed window
2ECA 17F437           (       gshell.asm):06585                  lbsr  IOOPTSON
2ECD 308C6E           (       gshell.asm):06586                  leax  <CHGDEVNM,PC
2ED0 AFE4             (       gshell.asm):06587                  stx   ,S
2ED2 17E35A           (       gshell.asm):06588                  lbsr  WRLNWCR
2ED5 32E810           (       gshell.asm):06589                  leas  2+14,S
2ED8 CE1241           (       gshell.asm):06590                  ldu   #DRIVETBL
2EDB 200B             (       gshell.asm):06591                  bra   CHGDEVC2
                      (       gshell.asm):06592         
2EDD EC4C             (       gshell.asm):06593         CHGDEVC1 ldd   FL.FNAME,U
2EDF 3406             (       gshell.asm):06594                  pshs  d
2EE1 17E34B           (       gshell.asm):06595                  lbsr  WRLNWCR
2EE4 3262             (       gshell.asm):06596                  leas  2,S
2EE6 EE4A             (       gshell.asm):06597                  ldu   FL.LINK,U
2EE8 EF7E             (       gshell.asm):06598         CHGDEVC2 stu   -2,S
2EEA 26F1             (       gshell.asm):06599                  bne   CHGDEVC1
2EEC DE56             (       gshell.asm):06600                  ldu   <DRTBLPTR
2EEE D615             (       gshell.asm):06601                  ldb   <DEVICNTR
2EF0 203E             (       gshell.asm):06602                  bra   CHGDEVC5
                      (       gshell.asm):06603         
2EF2 CC0020           (       gshell.asm):06604         CHGDEVC3 ldd   #32
2EF5 3406             (       gshell.asm):06605                  pshs  d
2EF7 AE66             (       gshell.asm):06606                  ldx   6,S
2EF9 DC22             (       gshell.asm):06607                  ldd   WNDWPATH
2EFB 3416             (       gshell.asm):06608                  pshs  d,X
2EFD 17036B           (       gshell.asm):06609                  lbsr  I.READLN
2F00 3266             (       gshell.asm):06610                  leas  6,S
2F02 EDE4             (       gshell.asm):06611                  std   ,S
2F04 2F30             (       gshell.asm):06612                  ble   CHGDEVC6
2F06 E6F804           (       gshell.asm):06613                  ldb   [4,S]
2F09 C12F             (       gshell.asm):06614                  cmpb  #'/
2F0B 2629             (       gshell.asm):06615                  bne   CHGDEVC6
2F0D ECE4             (       gshell.asm):06616                  ldd   ,S
2F0F 5A               (       gshell.asm):06617                  decb  
2F10 E364             (       gshell.asm):06618                  addd  4,S
2F12 1F01             (       gshell.asm):06619                  tfr   D,X
2F14 6F84             (       gshell.asm):06620                  clr   ,X
2F16 EC64             (       gshell.asm):06621                  ldd   4,S
2F18 3406             (       gshell.asm):06622                  pshs  d
2F1A 3440             (       gshell.asm):06623                  pshs  U
2F1C 17FF3D           (       gshell.asm):06624                  lbsr  MOVDNAME
2F1F 3264             (       gshell.asm):06625                  leas  4,S
2F21 E663             (       gshell.asm):06626                  ldb   3,S
2F23 2702             (       gshell.asm):06627                  beq   CHGDEVC4
2F25 EF5C             (       gshell.asm):06628                  stu   FL.LINK-FL.SIZE,U
2F27                  (       gshell.asm):06629         CHGDEVC4
                      (       gshell.asm):06630                  IFNE  H6309
                      (       gshell.asm):06631                  clrd  
                      (       gshell.asm):06632                  ELSE
2F27 4F               (       gshell.asm):06633                  clra
2F28 5F               (       gshell.asm):06634                  clrb
                      (       gshell.asm):06635                  ENDC
2F29 ED4A             (       gshell.asm):06636                  std   FL.LINK,U
2F2B 334E             (       gshell.asm):06637                  leau  FL.SIZE,U
2F2D E663             (       gshell.asm):06638                  ldb   3,S
2F2F 5C               (       gshell.asm):06639                  incb  
2F30 E763             (       gshell.asm):06640         CHGDEVC5 stb   3,S
2F32 C105             (       gshell.asm):06641                  cmpb  #5
2F34 2DBC             (       gshell.asm):06642                  blt   CHGDEVC3
2F36 17F3DF           (       gshell.asm):06643         CHGDEVC6 lbsr  KILLOLAY
2F39 32E826           (       gshell.asm):06644                  leas  38,S
2F3C 35C0             (       gshell.asm):06645                  puls  U,PC
                      (       gshell.asm):06646         
2F3E 4368616E67652064 (       gshell.asm):06647         CHGDEVNM fcc   "Change device names"
     6576696365206E61
     6D6573
2F51 0A00             (       gshell.asm):06648                  fcb   LF,NUL
                      (       gshell.asm):06649         
2F53 5F               (       gshell.asm):06650         ENBLSOFF clrb             Flag to disable menu items on FILES menu
2F54 3406             (       gshell.asm):06651                  pshs  d
2F56 8D12             (       gshell.asm):06652                  bsr   ENBLOPEN   Set OPEN item on FILES menu
2F58 8D16             (       gshell.asm):06653                  bsr   ENLSTPRT   Set LIST & PRINT items on FILES menu
2F5A 8D1D             (       gshell.asm):06654                  bsr   ENBLCOPY   Set COPY item on FILES menu
2F5C 2024             (       gshell.asm):06655                  bra   ENBLSOFX
                      (       gshell.asm):06656         
2F5E E663             (       gshell.asm):06657         ENFREFLD ldb   3,S
                      (       gshell.asm):06658         * Enable/Disable FREE, FOLDER & SORT on DISK menu
2F60 F70115           (       gshell.asm):06659         ENFREFL1 stb   ITM.FREE+MI.ENBL
2F63 F7012A           (       gshell.asm):06660                  stb   ITM.FLDR+MI.ENBL
2F66 F70226           (       gshell.asm):06661                  stb   ITM.SORT+MI.ENBL
2F69 39               (       gshell.asm):06662                  rts   
                      (       gshell.asm):06663         
                      (       gshell.asm):06664         * Enable/Disable OPEN item on FILES menu
2F6A E663             (       gshell.asm):06665         ENBLOPEN ldb   3,S
2F6C F70193           (       gshell.asm):06666                  stb   ITM.OPEN+MI.ENBL
2F6F 39               (       gshell.asm):06667                  rts   
                      (       gshell.asm):06668         
                      (       gshell.asm):06669         * Enable/Disable LIST & PRINT items on FILES menu
2F70 E663             (       gshell.asm):06670         ENLSTPRT ldb   3,S
2F72 F701A8           (       gshell.asm):06671                  stb   ITM.LIST+MI.ENBL
2F75 F701E7           (       gshell.asm):06672                  stb   ITM.PRNT+MI.ENBL
2F78 39               (       gshell.asm):06673                  rts   
                      (       gshell.asm):06674         
                      (       gshell.asm):06675         * Enable/Disable COPY item on FILES menu
2F79 EC62             (       gshell.asm):06676         ENBLCOPY ldd   2,S
2F7B F701BD           (       gshell.asm):06677                  stb   ITM.COPY+MI.ENBL
2F7E 3406             (       gshell.asm):06678                  pshs  d
2F80 8D03             (       gshell.asm):06679                  bsr   ENSTRNDL   Deal with 3 other menu items
2F82 3262             (       gshell.asm):06680         ENBLSOFX leas  2,S
2F84 39               (       gshell.asm):06681                  rts   
                      (       gshell.asm):06682         
                      (       gshell.asm):06683         * Enable/Disable STAT, RENAME & DELETE items on FILES menu
2F85 E663             (       gshell.asm):06684         ENSTRNDL ldb   3,S
2F87 F701D2           (       gshell.asm):06685                  stb   ITM.STAT+MI.ENBL
2F8A F701FC           (       gshell.asm):06686                  stb   ITM.RNAM+MI.ENBL
2F8D F70211           (       gshell.asm):06687                  stb   ITM.DELT+MI.ENBL
2F90 39               (       gshell.asm):06688                  rts   
                      (       gshell.asm):06689         
2F91 8D14             (       gshell.asm):06690         INITSCRN bsr   FULLSCRN   Change working area to everything but menu/scroll bars
2F93 DC22             (       gshell.asm):06691                  ldd   WNDWPATH   Get window path
2F95 3406             (       gshell.asm):06692                  pshs  d
2F97 17FE02           (       gshell.asm):06693                  lbsr  CLRSCRN    Send $0c to clear screen
2F9A 3262             (       gshell.asm):06694                  leas  2,S        Eat stack
2F9C 17DCB9           (       gshell.asm):06695                  lbsr  UPDTDEVC   Update device list at left in window ONLY
2F9F DC36             (       gshell.asm):06696                  ldd   DEVICNOW   Get ptr to icon descriptor for current selected drive
2FA1 2703             (       gshell.asm):06697                  beq   INITSCR1   No drive selected, return
2FA3 17D7B7           (       gshell.asm):06698                  lbsr  DRAWSCRN   Disable OPEN,COPY,LIST,PRINT,STAT,RENAME,DELETE options
2FA6 39               (       gshell.asm):06699         INITSCR1 rts              Wipe out icons, draw icons, etc., etc.
                      (       gshell.asm):06700         
                      (       gshell.asm):06701         * Changed from 22 to 23 for NitrOS9
2FA7 C617             (       gshell.asm):06702         FULLSCRN ldb   #23        Save CWAREA height
2FA9 3406             (       gshell.asm):06703                  pshs  d
2FAB DC24             (       gshell.asm):06704                  ldd   WINDWSZX   CWAREA width=full width-2
2FAD C002             (       gshell.asm):06705                  subb  #2
2FAF 3406             (       gshell.asm):06706                  pshs  d          Save it
2FB1 8E0001           (       gshell.asm):06707                  ldx   #1         Save '1'
2FB4 3410             (       gshell.asm):06708                  pshs  X
2FB6 D623             (       gshell.asm):06709                  ldb   WNDWPATH+1 Get window path
2FB8 3416             (       gshell.asm):06710                  pshs  d,X        Save '1' again & path
2FBA 1704FF           (       gshell.asm):06711                  lbsr  CWAREA     Change working area
2FBD 326A             (       gshell.asm):06712                  leas  10,S
2FBF 39               (       gshell.asm):06713                  rts   
                      (       gshell.asm):06714         
                      (       gshell.asm):06715         * Draw border stuff for current dir, re-title dir bar
2FC0                  (       gshell.asm):06716         WRITDBAR
                      (       gshell.asm):06717                  IFNE  H6309
                      (       gshell.asm):06718                  clrd  
                      (       gshell.asm):06719                  ELSE
2FC0 4F               (       gshell.asm):06720                  clra
2FC1 5F               (       gshell.asm):06721                  clrb
                      (       gshell.asm):06722                  ENDC
2FC2 3406             (       gshell.asm):06723                  pshs  d
2FC4 8E0027           (       gshell.asm):06724                  ldx   #39        39,0 for 1st coord (relative to window inside border)
2FC7 DC22             (       gshell.asm):06725                  ldd   WNDWPATH
2FC9 3416             (       gshell.asm):06726                  pshs  d,X
2FCB 17FE1F           (       gshell.asm):06727                  lbsr  MOUSOFF    Shut mouse off
2FCE 170552           (       gshell.asm):06728                  lbsr  SETDPTR    Set draw ptr
2FD1 C6B7             (       gshell.asm):06729                  ldb   #183       Draw to 39,183 (for 200 line screen)
2FD3 ED64             (       gshell.asm):06730                  std   4,S
2FD5 170537           (       gshell.asm):06731                  lbsr  LINE
2FD8 C608             (       gshell.asm):06732                  ldb   #8         Y coord=8
2FDA ED64             (       gshell.asm):06733                  std   4,s
2FDC 170544           (       gshell.asm):06734                  lbsr  SETDPTR    Set draw ptr to 39,8
2FDF DC19             (       gshell.asm):06735                  ldd   PIXELSWD   Get far right coord of current dir window
2FE1 ED62             (       gshell.asm):06736                  std   2,s
2FE3 170529           (       gshell.asm):06737                  lbsr  LINE       Draw top line
2FE6 D600             (       gshell.asm):06738                  ldb   WIPED      icons ok already?
2FE8 10270089         (       gshell.asm):06739                  lbeq  WIPICEXT   Yes, exit
                      (       gshell.asm):06740         * From here on draws the dir bar, question mark, and current directory.
                      (       gshell.asm):06741         *  Should flag to NOT do this if still in same dir.
2FEC CC0003           (       gshell.asm):06742                  ldd   #FNT.G8X8  8x8 graphic font
2FEF ED64             (       gshell.asm):06743                  std   4,S
2FF1 C6C8             (       gshell.asm):06744                  ldb   #GRP.FNT
2FF3 ED62             (       gshell.asm):06745                  std   2,S
2FF5 1704E1           (       gshell.asm):06746                  lbsr  FONT       Set font to special GSHELL font set
                      (       gshell.asm):06747                  IFNE  H6309
                      (       gshell.asm):06748                  clrd  
                      (       gshell.asm):06749                  ELSE
2FF8 4F               (       gshell.asm):06750                  clra
2FF9 5F               (       gshell.asm):06751                  clrb
                      (       gshell.asm):06752                  ENDC
2FFA ED64             (       gshell.asm):06753                  std   4,S
2FFC C606             (       gshell.asm):06754                  ldb   #6
2FFE ED62             (       gshell.asm):06755                  std   2,S
3000 17FD75           (       gshell.asm):06756                  lbsr  GOTOXY     Text cursor to 6,0
3003 17FD58           (       gshell.asm):06757                  lbsr  WBOX.BAR   Draw dir entry close box, and bars all the way across
3006 C601             (       gshell.asm):06758                  ldb   #FNT.S8X8  Select 8x8 text font
3008 ED64             (       gshell.asm):06759                  std   4,S
300A C6C8             (       gshell.asm):06760                  ldb   #GRP.FNT
300C ED62             (       gshell.asm):06761                  std   2,S
300E 1704C8           (       gshell.asm):06762                  lbsr  FONT
3011 C605             (       gshell.asm):06763                  ldb   #5         Write out ' <?> ' for help box
3013 E765             (       gshell.asm):06764                  stb   5,S
3015 308C63           (       gshell.asm):06765                  leax  <QUERY,PC
3018 AF62             (       gshell.asm):06766                  stx   2,S
301A 17025C           (       gshell.asm):06767                  lbsr  I.WRITE
301D C602             (       gshell.asm):06768                  ldb   #FNT.S6X8  6x8 text font
301F ED64             (       gshell.asm):06769                  std   4,S
3021 C6C8             (       gshell.asm):06770                  ldb   #GRP.FNT
3023 ED62             (       gshell.asm):06771                  std   2,S
3025 1704B1           (       gshell.asm):06772                  lbsr  FONT       Text cursor to 10,0
                      (       gshell.asm):06773                  IFNE  H6309
                      (       gshell.asm):06774                  clrd  
                      (       gshell.asm):06775                  ELSE
3028 4F               (       gshell.asm):06776                  clra
3029 5F               (       gshell.asm):06777                  clrb
                      (       gshell.asm):06778                  ENDC
302A ED64             (       gshell.asm):06779                  std   4,S
302C C60A             (       gshell.asm):06780                  ldb   #10
302E ED62             (       gshell.asm):06781                  std   2,S
3030 17FD45           (       gshell.asm):06782                  lbsr  GOTOXY
3033 8E0455           (       gshell.asm):06783                  ldx   #DDIRNAME  Print dir name (as far as can fit)
3036 AF62             (       gshell.asm):06784                  stx   2,S
3038 3410             (       gshell.asm):06785                  pshs  X
303A 17028F           (       gshell.asm):06786                  lbsr  STRLEN
303D 3510             (       gshell.asm):06787                  puls  X
303F 10830022         (       gshell.asm):06788                  cmpd  #34        If 320 screen, we can fit up to 34 chars
3043 231E             (       gshell.asm):06789                  bls   WRITDBA1
3045 0D1B             (       gshell.asm):06790                  tst   FLAG640W   Check if 640 screen, in which case we can fit up to 87 chars
3047 2710             (       gshell.asm):06791                  beq   WRITDB05
3049 10830057         (       gshell.asm):06792                  cmpd  #87
304D 2314             (       gshell.asm):06793                  bls   WRITDBA1
304F 830057           (       gshell.asm):06794                  subd  #87
3052 308B             (       gshell.asm):06795                  leax  D,X
3054 CC0057           (       gshell.asm):06796                  ldd   #87
3057 2008             (       gshell.asm):06797                  bra   WRITDB07
                      (       gshell.asm):06798         
3059 830022           (       gshell.asm):06799         WRITDB05 subd  #34
305C 308B             (       gshell.asm):06800                  leax  D,X
305E CC0022           (       gshell.asm):06801                  ldd   #34
3061 AF62             (       gshell.asm):06802         WRITDB07 stx   2,S
3063 ED64             (       gshell.asm):06803         WRITDBA1 std   4,S
3065 170211           (       gshell.asm):06804                  lbsr  I.WRITE    Write out current directory name
3068 CC0001           (       gshell.asm):06805                  ldd   #1
306B ED64             (       gshell.asm):06806                  std   4,S
306D 308C10           (       gshell.asm):06807                  leax  <ONESPACE,PC Add one space
3070 AF62             (       gshell.asm):06808                  stx   2,S
3072 170204           (       gshell.asm):06809                  lbsr  I.WRITE
3075 17FD79           (       gshell.asm):06810         WIPICEXT lbsr  INITMOUS   Re-init mouse
3078 3266             (       gshell.asm):06811                  leas  6,S        Eat stack & return
307A 39               (       gshell.asm):06812                  rts   
                      (       gshell.asm):06813         
307B 203C3F3E20       (       gshell.asm):06814         QUERY    fcc   " <?> "
                      (       gshell.asm):06815         
3080 20               (       gshell.asm):06816         ONESPACE fcc   " "
                      (       gshell.asm):06817         
                      (       gshell.asm):06818         * memory allocation ala K&R
                      (       gshell.asm):06819         *  functionally identical to the C stuff from MicroWare
                      (       gshell.asm):06820         *   but 75% as much code and faster
                      (       gshell.asm):06821         *   calloc split out to save size
                      (       gshell.asm):06822         * Allocates memory in multiples of 256 bytes (pages)
                      (       gshell.asm):06823         * Exit:D=-1 If could not get the memory requested
                      (       gshell.asm):06824         
3081 EC62             (       gshell.asm):06825         MORECORE ldd   2,S        get nu   (Get # 4 byte units requested)
3083 C300FF           (       gshell.asm):06826                  addd  #255       nu + NALLOC - 1  Round up to even 256 byte page
3086 5F               (       gshell.asm):06827                  clrb             divided by NALLOC
3087 3406             (       gshell.asm):06828                  pshs  D          rnu = result      Save # of 256 byte pages needed
3089 58               (       gshell.asm):06829                  aslb             * sizeof(HEADER)    (Multiply by 4)
308A 49               (       gshell.asm):06830                  rola  
308B 58               (       gshell.asm):06831                  aslb  
308C 49               (       gshell.asm):06832                  rola  
308D 3406             (       gshell.asm):06833                  pshs  D          Save # 
308F 1702DA           (       gshell.asm):06834                  lbsr  SBRK       Go allocate more data mem & clear it
3092 3262             (       gshell.asm):06835                  leas  2,S        Eat temp
3094 3540             (       gshell.asm):06836                  puls  U          get rnu into U (U=# 256 byte pages requested)
3096 1083FFFF         (       gshell.asm):06837                  cmpd  #-1        Did we get our requested data memory?
309A 2710             (       gshell.asm):06838                  beq   ANRTS      No, return with D=-1
309C 1E03             (       gshell.asm):06839                  exg   D,U        Swap # 256 byte pages & ptr to start of free data mem
309E ED42             (       gshell.asm):06840                  std   2,U        Save # 256 byte pages at 2,<start of free data mem>
30A0 3344             (       gshell.asm):06841                  leau  4,U        up += 1 (Point to next entry after free data header)??
30A2 3440             (       gshell.asm):06842                  pshs  U          Save ptr
30A4 8D71             (       gshell.asm):06843                  bsr   FREE
30A6 3262             (       gshell.asm):06844                  leas  2,S        waste up
30A8 EEA9041E         (       gshell.asm):06845                  ldu   ALLOCP,Y   return allocp (never 0)
30AC 39               (       gshell.asm):06846         ANRTS    rts   
                      (       gshell.asm):06847         
                      (       gshell.asm):06848         * Allocate memory within our data area
30AD 3446             (       gshell.asm):06849         MALLOC   pshs  D,U        Preserve regs
30AF EC66             (       gshell.asm):06850                  ldd   6,S        Get # bytes to be allocated
30B1 C30003           (       gshell.asm):06851                  addd  #3         nbytes + sizeof(HEADER) - 1
                      (       gshell.asm):06852                  IFNE  H6309
                      (       gshell.asm):06853                  lsrd             div by sizeof(HEADER) (4 bytes)
                      (       gshell.asm):06854                  lsrd  
                      (       gshell.asm):06855                  incd             result+1
                      (       gshell.asm):06856                  ELSE
30B4 44               (       gshell.asm):06857                  lsra
30B5 56               (       gshell.asm):06858                  rorb
30B6 44               (       gshell.asm):06859                  lsra
30B7 56               (       gshell.asm):06860                  rorb
30B8 C30001           (       gshell.asm):06861                  addd  #$0001
                      (       gshell.asm):06862                  ENDC
30BB EDE4             (       gshell.asm):06863                  std   ,S         nunits = result (units allocated seems to be 4 byte chunks)
30BD AEA9041E         (       gshell.asm):06864                  ldx   ALLOCP,Y   q = allocp  (Get current value)
30C1 2611             (       gshell.asm):06865                  bne   MALLOC1    if not 0    (If not zero, it has been initialized)
30C3 8E1327           (       gshell.asm):06866                  ldx   #BASE      q = &base   (Initialize it to BASE)
30C6 AFA9041E         (       gshell.asm):06867                  stx   ALLOCP,Y   allocp = q = &base
30CA AFA91327         (       gshell.asm):06868                  stx   BASE,Y     base.ptr = .... = &base  (BASE points to itself)
                      (       gshell.asm):06869                  IFNE  H6309
                      (       gshell.asm):06870                  clrd  
                      (       gshell.asm):06871                  ELSE
30CE 4F               (       gshell.asm):06872                  clra
30CF 5F               (       gshell.asm):06873                  clrb
                      (       gshell.asm):06874                  ENDC
30D0 EDA91329         (       gshell.asm):06875                  std   BASE+2,Y   base.size = 0   (it's size=0)
30D4 EE84             (       gshell.asm):06876         MALLOC1  ldu   ,X         p = q->ptr   (Get ptr to current allocp (last mem entry?)
30D6 2004             (       gshell.asm):06877                  bra   MALLOC3
                      (       gshell.asm):06878         
30D8 1F31             (       gshell.asm):06879         MALLOC2  tfr   U,X        q = p
30DA EEC4             (       gshell.asm):06880                  ldu   ,U         p = p->ptr
30DC EC42             (       gshell.asm):06881         MALLOC3  ldd   2,U        Get size of last block allocated
30DE 10A3E4           (       gshell.asm):06882                  cmpd  ,S         Compare with # 4 byte blocks requested
30E1 2522             (       gshell.asm):06883                  blo   MALLOC6    if (p->size >= nunits)
30E3 2606             (       gshell.asm):06884                  bne   MALLOC4    if (p->size == nunits)
30E5 ECC4             (       gshell.asm):06885                  ldd   ,U
30E7 ED84             (       gshell.asm):06886                  std   ,X         q->ptr = p->ptr
30E9 2010             (       gshell.asm):06887                  bra   MALLOC5
                      (       gshell.asm):06888         
30EB EC42             (       gshell.asm):06889         MALLOC4  ldd   2,U        p->size -= nunits
30ED A3E4             (       gshell.asm):06890                  subd  0,S
30EF ED42             (       gshell.asm):06891                  std   2,U
30F1 58               (       gshell.asm):06892                  aslb             (char) p->size
30F2 49               (       gshell.asm):06893                  rola  
30F3 58               (       gshell.asm):06894                  aslb  
30F4 49               (       gshell.asm):06895                  rola  
30F5 33CB             (       gshell.asm):06896                  leau  D,U        p += (char) p->size
30F7 ECE4             (       gshell.asm):06897                  ldd   ,S         p->size = nunits
30F9 ED42             (       gshell.asm):06898                  std   2,U
                      (       gshell.asm):06899         
30FB AFA9041E         (       gshell.asm):06900         MALLOC5  stx   ALLOCP,Y   allocp = q
30FF 3344             (       gshell.asm):06901                  leau  4,U        p += 1 (header)
3101 1F30             (       gshell.asm):06902                  tfr   U,D        set up for return
3103 200E             (       gshell.asm):06903                  bra   MALLOC7
                      (       gshell.asm):06904         
3105 11A3A9041E       (       gshell.asm):06905         MALLOC6  cmpu  ALLOCP,Y   if (p == allocp)
310A 26CC             (       gshell.asm):06906                  bne   MALLOC2
310C 17FF72           (       gshell.asm):06907                  lbsr  MORECORE   nunits above return addr (Get more data mem)
310F 26C7             (       gshell.asm):06908                  bne   MALLOC2    if (p = .... == 0) (Get mem failed?)
                      (       gshell.asm):06909                  IFNE  H6309
                      (       gshell.asm):06910                  clrd             set up zero for return
                      (       gshell.asm):06911                  ELSE
3111 4F               (       gshell.asm):06912                  clra
3112 5F               (       gshell.asm):06913                  clrb
                      (       gshell.asm):06914                  ENDC
3113 3262             (       gshell.asm):06915         MALLOC7  leas  2,S
3115 35C0             (       gshell.asm):06916                  puls  U,PC
                      (       gshell.asm):06917         
                      (       gshell.asm):06918         * Entry: 0-1,s    RTS address
                      (       gshell.asm):06919         *        2-3,s    Ptr of some sort (to data area after 4 byte header?)
                      (       gshell.asm):06920         *        D=# 256 byte pages requested
                      (       gshell.asm):06921         *        U=Ptr to header+4
3117 3446             (       gshell.asm):06922         FREE     pshs  D,U        Save ??? ptr & #256 byte pages
3119 EE66             (       gshell.asm):06923                  ldu   6,S        Get ptr to data start of allocated chunk?
311B 335C             (       gshell.asm):06924                  leau  -4,U       p = ap - 1 (Point to star of chunk header?)
311D AEA9041E         (       gshell.asm):06925                  ldx   ALLOCP,Y   q = allocp  ???
3121 2010             (       gshell.asm):06926                  bra   FREE3
                      (       gshell.asm):06927         
3123 AC84             (       gshell.asm):06928         FREE1    cmpx  ,X         if (q >= q->ptr)
3125 250A             (       gshell.asm):06929                  blo   FREE2
3127 11A3E4           (       gshell.asm):06930                  cmpu  ,S         && (p > q
312A 2213             (       gshell.asm):06931                  bhi   FREE4
312C 11A384           (       gshell.asm):06932                  cmpu  ,X         || p < q->ptr)
312F 250E             (       gshell.asm):06933                  blo   FREE4      break
3131 AE84             (       gshell.asm):06934         FREE2    ldx   ,X         q >= q->ptr
3133 AFE4             (       gshell.asm):06935         FREE3    stx   ,S         q' = q         Save ??? (chunk header?)
3135 11A3E4           (       gshell.asm):06936                  cmpu  ,S         if (p > q)     Is 
3138 23E9             (       gshell.asm):06937                  bls   FREE1
313A 11A384           (       gshell.asm):06938                  cmpu  ,X         && (p < q->ptr)
313D 24E4             (       gshell.asm):06939                  bhs   FREE1
313F 3440             (       gshell.asm):06940         FREE4    pshs  U          stack p
3141 EC42             (       gshell.asm):06941                  ldd   2,U        t$1 = p->size
3143 58               (       gshell.asm):06942                  aslb             scale it
3144 49               (       gshell.asm):06943                  rola  
3145 58               (       gshell.asm):06944                  aslb  
3146 49               (       gshell.asm):06945                  rola  
3147 E3E1             (       gshell.asm):06946                  addd  ,S++       t$1 = p + p->size
3149 10A384           (       gshell.asm):06947                  cmpd  ,X         if (p + p->size == q->ptr)
314C 2610             (       gshell.asm):06948                  bne   FREE5
314E 3410             (       gshell.asm):06949                  pshs  X          save q
3150 AE84             (       gshell.asm):06950                  ldx   ,X         q = q->ptr
3152 EC02             (       gshell.asm):06951                  ldd   2,X        t$1 = q->ptr->size
3154 3510             (       gshell.asm):06952                  puls  X          recover q
3156 E342             (       gshell.asm):06953                  addd  2,U        t$1 = p->size + p->ptr->size
3158 ED42             (       gshell.asm):06954                  std   2,U        p->size = t$1
315A EC94             (       gshell.asm):06955                  ldd   [,X]       t$1 = q->ptr->ptr
315C 2002             (       gshell.asm):06956                  bra   FREE6
                      (       gshell.asm):06957         
315E EC84             (       gshell.asm):06958         FREE5    ldd   ,X         t$1 = q->ptr
3160 EDC4             (       gshell.asm):06959         FREE6    std   ,U         p->ptr = t$1
3162 EC02             (       gshell.asm):06960                  ldd   2,X        t$1 = q->size
3164 58               (       gshell.asm):06961                  aslb             scale it
3165 49               (       gshell.asm):06962                  rola  
3166 58               (       gshell.asm):06963                  aslb  
3167 49               (       gshell.asm):06964                  rola  
3168 E3E4             (       gshell.asm):06965                  addd  ,S         t$1 = q + q->size
                      (       gshell.asm):06966         *NOTE 6309:CMPR D,U
316A 3406             (       gshell.asm):06967                  pshs  D
316C 11A3E1           (       gshell.asm):06968                  cmpu  ,S++       if (q + q->size == p)
316F 260C             (       gshell.asm):06969                  bne   FREE7
3171 EC02             (       gshell.asm):06970                  ldd   2,X        t$1 = q->size
3173 E342             (       gshell.asm):06971                  addd  2,U        t$1 += p->size
3175 ED02             (       gshell.asm):06972                  std   2,X        q->size = t$1
3177 ECC4             (       gshell.asm):06973                  ldd   ,U         t$1 = p->ptr
3179 ED84             (       gshell.asm):06974                  std   ,X         q->ptr = t$1
317B 2002             (       gshell.asm):06975                  bra   FREE8
                      (       gshell.asm):06976         
317D EF84             (       gshell.asm):06977         FREE7    stu   ,X         q->ptr = p
317F AFA9041E         (       gshell.asm):06978         FREE8    stx   ALLOCP,Y   allocp = q
3183 208E             (       gshell.asm):06979                  bra   MALLOC7
                      (       gshell.asm):06980         
3185 3440             (       gshell.asm):06981         NMLNKLOD pshs  U
3187 327C             (       gshell.asm):06982                  leas  -4,S
3189 30E4             (       gshell.asm):06983                  leax  ,S
318B 3362             (       gshell.asm):06984                  leau  2,S
318D 3450             (       gshell.asm):06985                  pshs  X,U
318F EE6C             (       gshell.asm):06986                  ldu   12,S
3191 ECC4             (       gshell.asm):06987                  ldd   GD.MNAME,U
3193 3406             (       gshell.asm):06988                  pshs  D
3195 8D3F             (       gshell.asm):06989                  bsr   F.NMLINK
3197 ED7E             (       gshell.asm):06990                  std   -2,S
3199 260A             (       gshell.asm):06991                  bne   LINLOA1
319B 8D2F             (       gshell.asm):06992                  bsr   F.NMLOAD
319D ED7E             (       gshell.asm):06993                  std   -2,S
319F 2604             (       gshell.asm):06994                  bne   LINLOA1
31A1 3266             (       gshell.asm):06995                  leas  6,S
31A3 2023             (       gshell.asm):06996                  bra   LINLOA3
                      (       gshell.asm):06997         
31A5 3266             (       gshell.asm):06998         LINLOA1  leas  6,S
31A7 E661             (       gshell.asm):06999                  ldb   1,S
31A9 C4F0             (       gshell.asm):07000                  andb  #$F0
31AB 54               (       gshell.asm):07001                  lsrb  
31AC 54               (       gshell.asm):07002                  lsrb  
31AD 54               (       gshell.asm):07003                  lsrb  
31AE 54               (       gshell.asm):07004                  lsrb  
31AF E748             (       gshell.asm):07005                  stb   GD.MTYPE,U
31B1 E661             (       gshell.asm):07006                  ldb   1,S
31B3 C40F             (       gshell.asm):07007                  andb  #$0F
31B5 E749             (       gshell.asm):07008                  stb   GD.MLANG,U
31B7 EC4A             (       gshell.asm):07009                  ldd   GD.MEMSZ,U
31B9 260D             (       gshell.asm):07010                  bne   LINLOA3
31BB EC62             (       gshell.asm):07011                  ldd   2,S
31BD 5D               (       gshell.asm):07012                  tstb  
31BE 2701             (       gshell.asm):07013                  beq   LINLOA2
31C0 4C               (       gshell.asm):07014                  inca  
31C1 1F89             (       gshell.asm):07015         LINLOA2  tfr   A,B
31C3 4F               (       gshell.asm):07016                  clra  
31C4 ED4A             (       gshell.asm):07017                  std   GD.MEMSZ,U
31C6 C601             (       gshell.asm):07018                  ldb   #1
31C8 3264             (       gshell.asm):07019         LINLOA3  leas  4,S
31CA 35C0             (       gshell.asm):07020                  puls  U,PC
                      (       gshell.asm):07021         
31CC 3430             (       gshell.asm):07022         F.NMLOAD pshs  X,Y
31CE AE66             (       gshell.asm):07023                  ldx   6,S
31D0 4F               (       gshell.asm):07024                  clra  
31D1 103F22           (       gshell.asm):07025                  os9   F$NMLOAD
31D4 200A             (       gshell.asm):07026                  bra   F.NML1
                      (       gshell.asm):07027         
31D6 3430             (       gshell.asm):07028         F.NMLINK pshs  X,Y
31D8 AE66             (       gshell.asm):07029                  ldx   6,S
31DA 8D26             (       gshell.asm):07030                  bsr   SKPSLASH
31DC 4F               (       gshell.asm):07031                  clra  
31DD 103F21           (       gshell.asm):07032                  os9   F$NMLINK
31E0 2409             (       gshell.asm):07033         F.NML1   bcc   F.NML2
31E2 3530             (       gshell.asm):07034                  puls  X,Y
31E4 E7A90432         (       gshell.asm):07035                  stb   ERRNO+1,Y
                      (       gshell.asm):07036                  IFNE  H6309
                      (       gshell.asm):07037                  clrd  
                      (       gshell.asm):07038                  ELSE
31E8 4F               (       gshell.asm):07039                  clra
31E9 5F               (       gshell.asm):07040                  clrb
                      (       gshell.asm):07041                  ENDC
31EA 39               (       gshell.asm):07042                  rts   
                      (       gshell.asm):07043         
31EB 10AFF80A         (       gshell.asm):07044         F.NML2   sty   [10,S]
31EF 1F89             (       gshell.asm):07045                  tfr   A,B
31F1 4F               (       gshell.asm):07046                  clra  
31F2 EDF808           (       gshell.asm):07047                  std   [8,S]
31F5 C601             (       gshell.asm):07048                  ldb   #1
31F7 35B0             (       gshell.asm):07049                  puls  X,Y,PC
                      (       gshell.asm):07050         
31F9 AE62             (       gshell.asm):07051         F.UNLOAD ldx   2,S
31FB 8D05             (       gshell.asm):07052                  bsr   SKPSLASH
31FD 4F               (       gshell.asm):07053                  clra  
31FE 103F1D           (       gshell.asm):07054                  os9   F$UNLOAD
3201 39               (       gshell.asm):07055                  rts   
                      (       gshell.asm):07056         
3202 3410             (       gshell.asm):07057         SKPSLASH pshs  X
3204 1700D4           (       gshell.asm):07058                  lbsr  STREND1
3207 ACE4             (       gshell.asm):07059         SKPSLAS1 cmpx  ,S
3209 2F0A             (       gshell.asm):07060                  ble   SKPSLAS2
320B E682             (       gshell.asm):07061                  ldb   ,-X
320D C12F             (       gshell.asm):07062                  cmpb  #'/
320F 26F6             (       gshell.asm):07063                  bne   SKPSLAS1
3211 3001             (       gshell.asm):07064                  leax  1,X
3213 AFE4             (       gshell.asm):07065                  stx   ,S
3215 3510             (       gshell.asm):07066         SKPSLAS2 puls  X
3217 39               (       gshell.asm):07067                  rts   
                      (       gshell.asm):07068         
3218 5F               (       gshell.asm):07069         KILLPBUF clrb  
3219 3406             (       gshell.asm):07070                  pshs  D
321B 9E26             (       gshell.asm):07071                  ldx   PRCIDNUM
321D DC22             (       gshell.asm):07072                  ldd   WNDWPATH
321F 3416             (       gshell.asm):07073                  pshs  D,X
3221 1702BA           (       gshell.asm):07074                  lbsr  KILBUF
3224 3266             (       gshell.asm):07075                  leas  6,S
3226 39               (       gshell.asm):07076                  rts   
                      (       gshell.asm):07077         
                      (       gshell.asm):07078         * NOTE: ONLY CALLED FROM
                      (       gshell.asm):07079         * Wait for forked program to die (or wait for signal)
                      (       gshell.asm):07080         * Entry: [,x] is a ptr to a 16 bit area to save the child's exit code
                      (       gshell.asm):07081         * Exit:  [,x] child's exit code
                      (       gshell.asm):07082         *        D=0 - if [,x] ptr was 0
                      (       gshell.asm):07083         *   else D=   Child's proces #
3227                  (       gshell.asm):07084         F.WAIT
                      (       gshell.asm):07085                  IFNE  H6309
                      (       gshell.asm):07086                  clrd             Wait for signal
                      (       gshell.asm):07087                  ELSE
3227 4F               (       gshell.asm):07088                  clra
3228 5F               (       gshell.asm):07089                  clrb
                      (       gshell.asm):07090                  ENDC
3229 103F04           (       gshell.asm):07091                  os9   F$WAIT
322C 255D             (       gshell.asm):07092                  bcs   OS9ERR2    Error, save error code & return (no child process) 
322E AE62             (       gshell.asm):07093                  ldx   2,S        Get ptr to ???
3230 2704             (       gshell.asm):07094                  beq   F.WAITX    If 0, exit with child ID process #=0
3232 E701             (       gshell.asm):07095                  stb   1,X        Save child's exit code in pointed to area
3234 6F84             (       gshell.asm):07096                  clr   ,X
3236 1F89             (       gshell.asm):07097         F.WAITX  tfr   A,B        D=Deceased child process's ID #
3238 4F               (       gshell.asm):07098                  clra  
3239 39               (       gshell.asm):07099                  rts   
                      (       gshell.asm):07100         
323A 3460             (       gshell.asm):07101         F.FORK   pshs  Y,U
323C AE66             (       gshell.asm):07102                  ldx   6,S
323E 10AE68           (       gshell.asm):07103                  ldy   8,S
3241 EE6A             (       gshell.asm):07104                  ldu   10,S
3243 A66D             (       gshell.asm):07105                  lda   13,S
3245 AA6F             (       gshell.asm):07106                  ora   15,S
3247 E6E811           (       gshell.asm):07107                  ldb   17,S
324A 103F03           (       gshell.asm):07108                  os9   F$FORK
324D 3560             (       gshell.asm):07109                  puls  Y,U
324F 253A             (       gshell.asm):07110                  bcs   OS9ERR2
3251 1F89             (       gshell.asm):07111                  tfr   A,B
3253 4F               (       gshell.asm):07112                  clra  
3254 39               (       gshell.asm):07113                  rts   
                      (       gshell.asm):07114         
                      (       gshell.asm):07115         * Raw read
3255 3420             (       gshell.asm):07116         I.READ   pshs  Y          Save Y
3257 AE66             (       gshell.asm):07117                  ldx   6,S        Get ptr to buffer to read into
3259 A665             (       gshell.asm):07118                  lda   5,S        Get file path
325B 10AE68           (       gshell.asm):07119                  ldy   8,S        Get size of read
325E 103F89           (       gshell.asm):07120                  os9   I$READ     Read data
3261 242B             (       gshell.asm):07121         READ1    bcc   WRITE10
3263 C1D3             (       gshell.asm):07122                  cmpb  #E$EOF     EOF error?
3265 2622             (       gshell.asm):07123                  bne   WRITERR    No, report error
                      (       gshell.asm):07124                  IFNE  H6309
                      (       gshell.asm):07125                  clrd             If EOF error, report 0 bytes read
                      (       gshell.asm):07126                  ELSE
3267 4F               (       gshell.asm):07127                  clra
3268 5F               (       gshell.asm):07128                  clrb
                      (       gshell.asm):07129                  ENDC
3269 35A0             (       gshell.asm):07130                  puls  Y,PC
                      (       gshell.asm):07131         
                      (       gshell.asm):07132         * Read line: Exits with D=# bytes read
326B 3420             (       gshell.asm):07133         I.READLN pshs  Y
326D A665             (       gshell.asm):07134                  lda   5,S
326F AE66             (       gshell.asm):07135                  ldx   6,S
3271 10AE68           (       gshell.asm):07136                  ldy   8,S
3274 103F8B           (       gshell.asm):07137                  os9   I$READLN
3277 20E8             (       gshell.asm):07138                  bra   READ1
                      (       gshell.asm):07139         
3279 3420             (       gshell.asm):07140         I.WRITE  pshs  Y
327B 10AE68           (       gshell.asm):07141                  ldy   8,S
327E 270E             (       gshell.asm):07142                  beq   WRITE10
3280 A665             (       gshell.asm):07143                  lda   5,S
3282 AE66             (       gshell.asm):07144                  ldx   6,S
3284 103F8A           (       gshell.asm):07145                  os9   I$WRITE
3287 2405             (       gshell.asm):07146         WRITE1   bcc   WRITE10
3289 3520             (       gshell.asm):07147         WRITERR  puls  Y
328B 16045B           (       gshell.asm):07148         OS9ERR2  lbra  OS9ERR
                      (       gshell.asm):07149         
328E 1F20             (       gshell.asm):07150         WRITE10  tfr   Y,D
3290 35A0             (       gshell.asm):07151                  puls  Y,PC
                      (       gshell.asm):07152         
                      (       gshell.asm):07153         * Perform WritLn call
                      (       gshell.asm):07154         * Entry: 0-1,s  =RTS address
                      (       gshell.asm):07155         *        2-3,s  =Path to write to (use only B)
                      (       gshell.asm):07156         *        4-5,s  =Ptr to text to write
                      (       gshell.asm):07157         *        6-7,s  =Length to write
3292 3420             (       gshell.asm):07158         I.WRITLN pshs  Y
3294 10AE68           (       gshell.asm):07159                  ldy   8,S
3297 27F5             (       gshell.asm):07160                  beq   WRITE10
3299 A665             (       gshell.asm):07161                  lda   5,S
329B AE66             (       gshell.asm):07162                  ldx   6,S
329D 103F8C           (       gshell.asm):07163                  os9   I$WRITLN
32A0 20E5             (       gshell.asm):07164                  bra   WRITE1
                      (       gshell.asm):07165         
32A2 103F82           (       gshell.asm):07166         I.DUP    os9   I$DUP
32A5 2007             (       gshell.asm):07167                  bra   ERRTEST
                      (       gshell.asm):07168         
32A7 AE62             (       gshell.asm):07169         I.OPEN2  ldx   2,S
32A9 A665             (       gshell.asm):07170                  lda   5,S
32AB 103F84           (       gshell.asm):07171         I.OPEN   os9   I$OPEN
32AE 25DB             (       gshell.asm):07172         ERRTEST  bcs   OS9ERR2
32B0 1F89             (       gshell.asm):07173                  tfr   A,B
32B2 4F               (       gshell.asm):07174                  clra  
32B3 39               (       gshell.asm):07175                  rts   
                      (       gshell.asm):07176         
32B4 A663             (       gshell.asm):07177         I.CLOSE  lda   3,S
32B6 103F8F           (       gshell.asm):07178                  os9   I$CLOSE
32B9 200E             (       gshell.asm):07179                  bra   I.SYSRET
                      (       gshell.asm):07180         
32BB AE62             (       gshell.asm):07181         I.MAKDIR ldx   2,S
32BD E665             (       gshell.asm):07182                  ldb   5,S
32BF 103F85           (       gshell.asm):07183                  os9   I$MAKDIR
32C2 2005             (       gshell.asm):07184                  bra   I.SYSRET
                      (       gshell.asm):07185         
32C4 AE62             (       gshell.asm):07186         I.DELETE ldx   2,S
32C6 103F87           (       gshell.asm):07187                  os9   I$DELETE
32C9 160426           (       gshell.asm):07188         I.SYSRET lbra  SYSRET
                      (       gshell.asm):07189         
                      (       gshell.asm):07190         * Get String length - terminated by NUL (CHR$(0)) char
                      (       gshell.asm):07191         * Entry: 0-1,s is RTS address
                      (       gshell.asm):07192         *        2-3,s is the ptr to the string to check
                      (       gshell.asm):07193         * Exit:  X=Ptr to end of string (not including NUL)
                      (       gshell.asm):07194         *        D=Length of string
32CC AE62             (       gshell.asm):07195         STRLEN   ldx   2,S        Get ptr to string we are checking length of
32CE E680             (       gshell.asm):07196         STRLEN1  ldb   ,X+        Get char
32D0 26FC             (       gshell.asm):07197                  bne   STRLEN1    Not end of string, keep checking
32D2 301F             (       gshell.asm):07198                  leax  -1,X       Found it, point to last char
32D4 1F10             (       gshell.asm):07199                  tfr   X,D
32D6 A362             (       gshell.asm):07200                  subd  2,S        D=length of string
32D8 39               (       gshell.asm):07201                  rts   
                      (       gshell.asm):07202         
                      (       gshell.asm):07203         * Get string end - terminated by NUL char
                      (       gshell.asm):07204         * Entry: [,s] is the ptr to the string to check
                      (       gshell.asm):07205         * Exit: D=Ptr to end of string (not including NUL)
32D9 AE62             (       gshell.asm):07206         STREND   ldx   2,S
32DB E680             (       gshell.asm):07207         STREND1  ldb   ,X+
32DD 26FC             (       gshell.asm):07208                  bne   STREND1
32DF 301F             (       gshell.asm):07209                  leax  -1,X
32E1 1F10             (       gshell.asm):07210                  tfr   X,D
32E3 39               (       gshell.asm):07211                  rts   
                      (       gshell.asm):07212         
32E4 3450             (       gshell.asm):07213         STRCPY   pshs  X,U
32E6 EE66             (       gshell.asm):07214                  ldu   6,S
32E8 AE68             (       gshell.asm):07215         STRCAT2  ldx   8,S
32EA E680             (       gshell.asm):07216         STRCPY1  ldb   ,X+
32EC E7C0             (       gshell.asm):07217                  stb   ,U+
32EE 26FA             (       gshell.asm):07218                  bne   STRCPY1
32F0 EC66             (       gshell.asm):07219                  ldd   6,S
32F2 35D0             (       gshell.asm):07220                  puls  X,U,PC
                      (       gshell.asm):07221         
32F4 3450             (       gshell.asm):07222         STRCAT   pshs  X,U
32F6 EE66             (       gshell.asm):07223                  ldu   6,S
32F8 E6C0             (       gshell.asm):07224         STRCAT1  ldb   ,U+
32FA 26FC             (       gshell.asm):07225                  bne   STRCAT1
32FC 335F             (       gshell.asm):07226                  leau  -1,U
32FE 20E8             (       gshell.asm):07227                  bra   STRCAT2
                      (       gshell.asm):07228         
                      (       gshell.asm):07229         * Compare two strings
                      (       gshell.asm):07230         * Exit: D=0 if they are the same
                      (       gshell.asm):07231         *       D=-1 if they are not the same
3300 3450             (       gshell.asm):07232         STRCMP   pshs  X,U        Save regs
3302 EE66             (       gshell.asm):07233                  ldu   6,S        Get ptr to 1st string
3304 2710             (       gshell.asm):07234                  beq   STRCMP2    No string, exit with <>
3306 AE68             (       gshell.asm):07235                  ldx   8,S        Get ptr to 2nd string
3308 270C             (       gshell.asm):07236                  beq   STRCMP2    No string, exit with <>
330A E6C0             (       gshell.asm):07237         STRCMP1  ldb   ,U+        Get char from 1st string
330C E180             (       gshell.asm):07238                  cmpb  ,X+        Same as char from 2nd string?
330E 2606             (       gshell.asm):07239                  bne   STRCMP2    No, exit with <>
3310 5D               (       gshell.asm):07240                  tstb             Same, is it an end of string marker?
3311 26F7             (       gshell.asm):07241                  bne   STRCMP1    No, continue comparing
3313 4F               (       gshell.asm):07242                  clra             Exit with '='
3314 35D0             (       gshell.asm):07243                  puls  X,U,PC
                      (       gshell.asm):07244         
                      (       gshell.asm):07245         * Flag not equal strings
3316 CCFFFF           (       gshell.asm):07246         STRCMP2  ldd   #-1
3319 35D0             (       gshell.asm):07247                  puls  X,U,PC
                      (       gshell.asm):07248         
                      (       gshell.asm):07249         * String compare with maximum length of strings
                      (       gshell.asm):07250         * Exit: D=-1 if they are <>
                      (       gshell.asm):07251         *       D=0  if they are =
331B 3450             (       gshell.asm):07252         STRNCMP  pshs  X,U
331D EE66             (       gshell.asm):07253                  ldu   6,S        Get ptr to string 1
331F 271E             (       gshell.asm):07254                  beq   STRNCMP4
3321 AE68             (       gshell.asm):07255                  ldx   8,S        Get ptr to string 2
3323 271A             (       gshell.asm):07256                  beq   STRNCMP4
3325 A66B             (       gshell.asm):07257                  lda   11,S       Get maximum size to compare
3327 270C             (       gshell.asm):07258                  beq   STRNCMP2   If 0, exit with =
3329 4A               (       gshell.asm):07259         STRNCMP1 deca             Done max length?
332A 2D0D             (       gshell.asm):07260                  blt   STRNCMP3   Yes, process
332C E6C0             (       gshell.asm):07261                  ldb   ,U+        Get char
332E E180             (       gshell.asm):07262                  cmpb  ,X+        Same as in 2nd string?
3330 260D             (       gshell.asm):07263                  bne   STRNCMP4   No,  exit with <>
3332 5D               (       gshell.asm):07264                  tstb             End of string early?
3333 26F4             (       gshell.asm):07265                  bne   STRNCMP1   No, continue comparing
3335                  (       gshell.asm):07266         STRNCMP2
                      (       gshell.asm):07267                  IFNE  H6309
                      (       gshell.asm):07268                  clrd             Exit with =
                      (       gshell.asm):07269                  ELSE
3335 4F               (       gshell.asm):07270                  clra
3336 5F               (       gshell.asm):07271                  clrb
                      (       gshell.asm):07272                  ENDC
3337 35D0             (       gshell.asm):07273                  puls  X,U,PC
                      (       gshell.asm):07274         
                      (       gshell.asm):07275         * If done up to max length, compare last chars of each string
                      (       gshell.asm):07276         * NOTE: THIS LOOKS LIKE THE LDB/CMPB/BEQ IS USELESS??? SHOULD JUST EXIT
                      (       gshell.asm):07277         *   WITH D=0???
3339 E6C2             (       gshell.asm):07278         STRNCMP3 ldb   ,-U        If last 2 chars matched, exit with =
333B E182             (       gshell.asm):07279                  cmpb  ,-X
333D 27F6             (       gshell.asm):07280                  beq   STRNCMP2
333F CCFFFF           (       gshell.asm):07281         STRNCMP4 ldd   #-1        Exit with <>
3342 35D0             (       gshell.asm):07282         STRNCMPX puls  X,U,PC
                      (       gshell.asm):07283         
3344 3440             (       gshell.asm):07284         STRHCPY  pshs  U
3346 EE64             (       gshell.asm):07285                  ldu   4,S
3348 AE66             (       gshell.asm):07286                  ldx   6,S
334A E680             (       gshell.asm):07287         STRHCPY1 ldb   ,X+
334C E7C0             (       gshell.asm):07288                  stb   ,U+
334E 2EFA             (       gshell.asm):07289                  bgt   STRHCPY1
3350 C47F             (       gshell.asm):07290                  andb  #$7F
3352 E75F             (       gshell.asm):07291                  stb   -1,U
3354 5F               (       gshell.asm):07292                  clrb  
3355 E7C4             (       gshell.asm):07293                  stb   ,U
3357 EC64             (       gshell.asm):07294                  ldd   4,S
3359 35C0             (       gshell.asm):07295                  puls  U,PC
                      (       gshell.asm):07296         
                      (       gshell.asm):07297         * Copy B bytes from X to Y
                      (       gshell.asm):07298         * NOTE: CHANGE TO TFM!
335B 3450             (       gshell.asm):07299         STRNCPY  pshs  X,U
335D EE66             (       gshell.asm):07300                  ldu   6,S
335F AE68             (       gshell.asm):07301                  ldx   8,S
3361 E66B             (       gshell.asm):07302                  ldb   11,S
3363 A680             (       gshell.asm):07303         STRNCPY1 lda   ,X+
3365 A7C0             (       gshell.asm):07304                  sta   ,U+
3367 5A               (       gshell.asm):07305                  decb  
3368 26F9             (       gshell.asm):07306                  bne   STRNCPY1
336A 35D0             (       gshell.asm):07307                  puls  X,U,PC
                      (       gshell.asm):07308         
                      (       gshell.asm):07309         * Allocate more memory from our remainding data memory, or get more data mem-
                      (       gshell.asm):07310         * ory and allocate from that
                      (       gshell.asm):07311         * Exit:D=-1 if could not get memory
                      (       gshell.asm):07312         *      or D=Ptr to start of free data memory
336C ECA90423         (       gshell.asm):07313         SBRK     ldd   MEMEND,Y   Get end of data memory ptr
3370 3406             (       gshell.asm):07314                  pshs  D          Save it
3372 EC64             (       gshell.asm):07315                  ldd   4,S        Get # bytes requested
3374 10A3A9132B       (       gshell.asm):07316                  cmpd  SPARE,Y    Will that fit in what we have left right now?
                      (       gshell.asm):07317         * following should be BLO
3379 2525             (       gshell.asm):07318                  bcs   SBRK20     Yes, skip ahead
337B E3A90423         (       gshell.asm):07319                  addd  MEMEND,Y   Calculate what total data area size should now be
337F 250B             (       gshell.asm):07320                  bcs   SBRK05     >64k, too big to fit in process space, exit with error
3381 3420             (       gshell.asm):07321                  pshs  Y          Preserve Y
3383 103F07           (       gshell.asm):07322                  os9   F$MEM      Attempt to change data area size to D bytes
3386 1F20             (       gshell.asm):07323                  tfr   Y,D        Move new end of data mem address to D
3388 3520             (       gshell.asm):07324                  puls  Y          Restore Y
338A 2406             (       gshell.asm):07325                  bcc   SBRK10     No error on F$MEM call, continue
338C CCFFFF           (       gshell.asm):07326         SBRK05   ldd   #-1        Eat stack & exit with error flag set
338F 3262             (       gshell.asm):07327                  leas  2,S
3391 39               (       gshell.asm):07328                  rts   
                      (       gshell.asm):07329         
                      (       gshell.asm):07330         * Extra memory requested was succesful
3392 EDA90423         (       gshell.asm):07331         SBRK10   std   MEMEND,Y   Save new end of data mem ptr
3396 E3A9132B         (       gshell.asm):07332                  addd  SPARE,Y    Add to amount of free data mem before request came in
339A A3E4             (       gshell.asm):07333                  subd  ,S         Subtract original end of data mem ptr
339C EDA9132B         (       gshell.asm):07334                  std   SPARE,Y    Save new amount of spare data mem
33A0 3262             (       gshell.asm):07335         SBRK20   leas  2,S
33A2 ECA9132B         (       gshell.asm):07336                  ldd   SPARE,Y    Get amount of spare data mem
33A6 3406             (       gshell.asm):07337                  pshs  D
33A8 A364             (       gshell.asm):07338                  subd  4,S        Subtract the amount of mem requested
33AA EDA9132B         (       gshell.asm):07339                  std   SPARE,Y    Save new amount of spare data mem
33AE ECA90423         (       gshell.asm):07340                  ldd   MEMEND,Y   Get end of data mem ptr
                      (       gshell.asm):07341         * NOTE 6309:SUBR, AND KEEP SIZE OF SPARE MEM. CHANGE LOOP BELOW TO TFM
33B2 A3E1             (       gshell.asm):07342                  subd  ,S++       Calculate start address of free data mem
33B4 3406             (       gshell.asm):07343                  pshs  D          Save it
33B6 4F               (       gshell.asm):07344                  clra             Zero byte
33B7 AEE4             (       gshell.asm):07345                  ldx   ,S         X=start of free data mem
33B9 A780             (       gshell.asm):07346         SBRK30   sta   ,X+        Clear out all free data mem
33BB ACA90423         (       gshell.asm):07347                  cmpx  MEMEND,Y
33BF 25F8             (       gshell.asm):07348                  bcs   SBRK30
33C1 3586             (       gshell.asm):07349                  puls  D,PC       Get ptr to start of data mem & return with it
                      (       gshell.asm):07350         
33C3 A663             (       gshell.asm):07351         GT.READY lda   3,S
33C5 C601             (       gshell.asm):07352                  ldb   #SS.READY
33C7 103F8D           (       gshell.asm):07353                  os9   I$GETSTT
33CA 2542             (       gshell.asm):07354                  bcs   OS9ERR3
33CC 4F               (       gshell.asm):07355                  clra  
33CD 39               (       gshell.asm):07356                  rts   
                      (       gshell.asm):07357         
                      (       gshell.asm):07358         * setup mouse parms - NOTE: should embed elsewhere  - only called once.
                      (       gshell.asm):07359         * In routine: 0-1,s = Preserved Y
                      (       gshell.asm):07360         *             2-3,s = RTS address
                      (       gshell.asm):07361         *             4-5,s = Path to window to read mouse from
                      (       gshell.asm):07362         *             6-7,s = Mouse sampling rate
                      (       gshell.asm):07363         *             8-9,s = Mouse button timeout
                      (       gshell.asm):07364         *            10-11,s= Auto follow mouse flag 
33CE 3420             (       gshell.asm):07365         ST.MOUSE pshs  Y          Preserve Y
33D0 A667             (       gshell.asm):07366                  lda   7,S        Get # clock ticks between mouse reads
33D2 E669             (       gshell.asm):07367                  ldb   9,S        Get mouse button timeout value
33D4 1F01             (       gshell.asm):07368                  tfr   D,X
33D6 4F               (       gshell.asm):07369                  clra             Get auto-follow flag
33D7 E66B             (       gshell.asm):07370                  ldb   11,S
33D9 1F02             (       gshell.asm):07371                  tfr   D,Y
33DB A665             (       gshell.asm):07372                  lda   5,S        Get path for window mouse is on
33DD C689             (       gshell.asm):07373                  ldb   #SS.MOUSE  Setup mouse parms
33DF 103F8E           (       gshell.asm):07374                  os9   I$SETSTT
33E2 3520             (       gshell.asm):07375                  puls  Y          Restore Y & return
33E4 2025             (       gshell.asm):07376                  bra   SYSRET2
                      (       gshell.asm):07377         
33E6 A663             (       gshell.asm):07378         GT.MOUSE lda   3,S
33E8 C689             (       gshell.asm):07379                  ldb   #SS.MOUSE
33EA AE64             (       gshell.asm):07380                  ldx   4,S
33EC 3420             (       gshell.asm):07381                  pshs  Y
33EE 108E0000         (       gshell.asm):07382                  ldy   #0
33F2 103F8D           (       gshell.asm):07383                  os9   I$GETSTT
33F5 3520             (       gshell.asm):07384                  puls  Y
33F7 2012             (       gshell.asm):07385                  bra   SYSRET2
                      (       gshell.asm):07386         
33F9 A663             (       gshell.asm):07387         ST.SSIG  lda   3,S
33FB C61A             (       gshell.asm):07388                  ldb   #SS.SSIG
33FD AE64             (       gshell.asm):07389                  ldx   4,S
33FF 103F8E           (       gshell.asm):07390                  os9   I$SETSTT
3402 2007             (       gshell.asm):07391                  bra   SYSRET2
                      (       gshell.asm):07392         
3404 A663             (       gshell.asm):07393         ST.RELEA lda   3,S
3406 C61B             (       gshell.asm):07394                  ldb   #SS.RELEA
3408 103F8E           (       gshell.asm):07395                  os9   I$SETSTT
340B 1602E4           (       gshell.asm):07396         SYSRET2  lbra  SYSRET
                      (       gshell.asm):07397         
340E 102502D7         (       gshell.asm):07398         OS9ERR3  lbcs  OS9ERR
3412 3402             (       gshell.asm):07399                  pshs  A
3414 1D               (       gshell.asm):07400                  sex   
3415 EDF805           (       gshell.asm):07401                  std   [5,S]
3418 3504             (       gshell.asm):07402                  puls  B
341A 4F               (       gshell.asm):07403                  clra  
341B 39               (       gshell.asm):07404                  rts   
                      (       gshell.asm):07405         
                      (       gshell.asm):07406         * Get current screen size in 8x8 text chars
                      (       gshell.asm):07407         * Entry: 0-1,s   = RTS address
                      (       gshell.asm):07408         *        2-3,s   = 16 bit path # (only use 3,s)
                      (       gshell.asm):07409         *        4-5,s   = Ptr to where to store X size
                      (       gshell.asm):07410         *        6-7,s   = Ptr to where to store Y size
341C A663             (       gshell.asm):07411         GT.SCSIZ lda   3,S        Get path to screen
341E C626             (       gshell.asm):07412                  ldb   #SS.SCSIZ
3420 3430             (       gshell.asm):07413                  pshs  X,Y        Preserve regs
3422 103F8D           (       gshell.asm):07414                  os9   I$GETSTT
3425 250B             (       gshell.asm):07415                  bcs   SCSIZERR
3427 AFF808           (       gshell.asm):07416                  stx   [8,S]      Save X size (by pointer)
342A 10AFF80A         (       gshell.asm):07417                  sty   [10,S]     Save Y size (by pointer)
                      (       gshell.asm):07418                  IFNE  H6309
                      (       gshell.asm):07419                  clrd  
                      (       gshell.asm):07420                  ELSE
342E 4F               (       gshell.asm):07421                  clra
342F 5F               (       gshell.asm):07422                  clrb
                      (       gshell.asm):07423                  ENDC
3430 200B             (       gshell.asm):07424                  bra   SCSIZEXT
                      (       gshell.asm):07425         
3432 10AE62           (       gshell.asm):07426         SCSIZERR ldy   2,S        Get data area pointer back
3435 4F               (       gshell.asm):07427                  clra  
3436 EDA90431         (       gshell.asm):07428                  std   ERRNO,Y    Save error code
343A CCFFFF           (       gshell.asm):07429                  ldd   #-1        Flag error & return
343D 3530             (       gshell.asm):07430         SCSIZEXT puls  X,Y
343F 39               (       gshell.asm):07431                  rts   
                      (       gshell.asm):07432         
3440 A663             (       gshell.asm):07433         ST.SBAR  lda   3,S
3442 C688             (       gshell.asm):07434                  ldb   #SS.SBAR
3444 AE64             (       gshell.asm):07435                  ldx   4,S
3446 3420             (       gshell.asm):07436                  pshs  Y
3448 10AE68           (       gshell.asm):07437                  ldy   8,S
344B 103F8E           (       gshell.asm):07438                  os9   I$SETSTT
344E 3520             (       gshell.asm):07439                  puls  Y
3450 20B9             (       gshell.asm):07440                  bra   SYSRET2
                      (       gshell.asm):07441         
3452 A663             (       gshell.asm):07442         ST.MSSIG lda   3,S
3454 C68A             (       gshell.asm):07443                  ldb   #SS.MSSIG
3456 AE64             (       gshell.asm):07444                  ldx   4,S
3458 103F8E           (       gshell.asm):07445                  os9   I$SETSTT
345B 20AE             (       gshell.asm):07446                  bra   SYSRET2
                      (       gshell.asm):07447         
                      (       gshell.asm):07448         * Do WINDINT window style
                      (       gshell.asm):07449         * Entry: 0-1,s   =RTS address
                      (       gshell.asm):07450         *        2-3,s   =Window path (only use B)
                      (       gshell.asm):07451         *        4-5,s   =window type (WT.*)
                      (       gshell.asm):07452         *        6-7,s   =Ptr to window/menu data (for framed windows only)
345D A663             (       gshell.asm):07453         ST.WNSET lda   3,S        Get path
345F C686             (       gshell.asm):07454                  ldb   #SS.WNSET
3461 3420             (       gshell.asm):07455                  pshs  Y
3463 10AE66           (       gshell.asm):07456                  ldy   6,S        Get window type
3466 AE68             (       gshell.asm):07457                  ldx   8,S        Get ptr for framed window data
3468 103F8E           (       gshell.asm):07458                  os9   I$SETSTT   Convert current window
346B 3520             (       gshell.asm):07459                  puls  Y
346D 209C             (       gshell.asm):07460                  bra   SYSRET2
                      (       gshell.asm):07461         
                      (       gshell.asm):07462         * Entry: all parms for DWSET are on stack, in order-but with 2 bytes/parm
                      (       gshell.asm):07463         *    whether it needs it or not!
                      (       gshell.asm):07464         * 0-1,s: RTS address
                      (       gshell.asm):07465         * 2-3,s: path # to window
                      (       gshell.asm):07466         * 4-5,s: screen type
                      (       gshell.asm):07467         * etc. for other DWSET parms
346F CC1B20           (       gshell.asm):07468         DWSET    ldd   #$1B20     Device window Set
3472 8D12             (       gshell.asm):07469                  bsr   DW.OWSET   Set up GFXBUF to contain full display code sequence for DWSET
3474 C609             (       gshell.asm):07470                  ldb   #9         # of bytes to write in DWSET sequence
3476 6D65             (       gshell.asm):07471                  tst   5,S        Check low byte of window type (actual type)
3478 2F01             (       gshell.asm):07472                  ble   DOWSETX    If current displayed or current processes screen, don't bother with border
347A 5C               (       gshell.asm):07473                  incb             If positive, bump # bytes up to 10 (to cover border color)
347B 2071             (       gshell.asm):07474         DOWSETX  bra   GFXWR3     Go write it out and return from there
                      (       gshell.asm):07475         
347D CC1B22           (       gshell.asm):07476         OWSET    ldd   #$1B22
3480 8D04             (       gshell.asm):07477                  bsr   DW.OWSET
3482 C609             (       gshell.asm):07478                  ldb   #9
3484 20F5             (       gshell.asm):07479                  bra   DOWSETX
                      (       gshell.asm):07480         
3486 8E132D           (       gshell.asm):07481         DW.OWSET ldx   #GFXBUF    Place to put actual command bytes for DWSET
3489 ED81             (       gshell.asm):07482                  std   ,X++       Save command sequence
348B A667             (       gshell.asm):07483                  lda   7,S        Get screen type (low byte only)
348D E669             (       gshell.asm):07484                  ldb   9,S
348F ED81             (       gshell.asm):07485                  std   ,X++       Get start, end ,etc. parms & append them
3491 A66B             (       gshell.asm):07486                  lda   11,S
3493 E66D             (       gshell.asm):07487                  ldb   13,S
3495 ED81             (       gshell.asm):07488                  std   ,X++
3497 A66F             (       gshell.asm):07489                  lda   15,S
3499 E6E811           (       gshell.asm):07490                  ldb   17,S
349C ED81             (       gshell.asm):07491                  std   ,X++
349E A6E813           (       gshell.asm):07492                  lda   19,S
34A1 E6E815           (       gshell.asm):07493                  ldb   21,S       Get border color (may not be used)
34A4 ED84             (       gshell.asm):07494                  std   ,X
34A6 39               (       gshell.asm):07495                  rts   
                      (       gshell.asm):07496         
34A7 CC1B24           (       gshell.asm):07497         DWEND    ldd   #$1B24
34AA 2008             (       gshell.asm):07498                  bra   OUT2
                      (       gshell.asm):07499         
34AC CC1B23           (       gshell.asm):07500         OWEND    ldd   #$1B23
34AF 2003             (       gshell.asm):07501                  bra   OUT2
                      (       gshell.asm):07502         
34B1 CC1B21           (       gshell.asm):07503         SELECT   ldd   #$1B21
                      (       gshell.asm):07504         
34B4 EDA9132D         (       gshell.asm):07505         OUT2     std   GFXBUF,Y
34B8 C602             (       gshell.asm):07506                  ldb   #2
34BA 2032             (       gshell.asm):07507                  bra   GFXWR3
                      (       gshell.asm):07508         
34BC CC1B25           (       gshell.asm):07509         CWAREA   ldd   #$1B25
34BF 8E132D           (       gshell.asm):07510                  ldx   #GFXBUF
34C2 ED81             (       gshell.asm):07511                  std   ,X++
34C4 A665             (       gshell.asm):07512                  lda   5,S
34C6 E667             (       gshell.asm):07513                  ldb   7,S
34C8 ED81             (       gshell.asm):07514                  std   ,X++
34CA A669             (       gshell.asm):07515                  lda   9,S
34CC E66B             (       gshell.asm):07516                  ldb   11,S
34CE ED84             (       gshell.asm):07517                  std   ,X
34D0 C606             (       gshell.asm):07518                  ldb   #6
34D2 201A             (       gshell.asm):07519                  bra   GFXWR3
                      (       gshell.asm):07520         
34D4 CC1B39           (       gshell.asm):07521         GCSET    ldd   #$1B39
34D7 2008             (       gshell.asm):07522                  bra   OUT4
                      (       gshell.asm):07523         
34D9 CC1B3A           (       gshell.asm):07524         FONT     ldd   #$1B3A
34DC 2003             (       gshell.asm):07525                  bra   OUT4
                      (       gshell.asm):07526         
34DE CC1B2A           (       gshell.asm):07527         KILBUF   ldd   #$1B2A
34E1 8E132D           (       gshell.asm):07528         OUT4     ldx   #GFXBUF
34E4 ED81             (       gshell.asm):07529                  std   ,X++
34E6 A665             (       gshell.asm):07530                  lda   5,S
34E8 E667             (       gshell.asm):07531                  ldb   7,S
34EA ED84             (       gshell.asm):07532                  std   ,X
34EC C604             (       gshell.asm):07533                  ldb   #4
34EE 1600A6           (       gshell.asm):07534         GFXWR3   lbra  GFXWR
                      (       gshell.asm):07535         
34F1 C635             (       gshell.asm):07536         SCALESW  ldb   #$35
34F3 200A             (       gshell.asm):07537                  bra   OUT3
                      (       gshell.asm):07538         
34F5 C636             (       gshell.asm):07539         DWPROTSW ldb   #$36
34F7 2006             (       gshell.asm):07540                  bra   OUT3
                      (       gshell.asm):07541         
34F9 C632             (       gshell.asm):07542         FCOLOR   ldb   #$32
34FB 2002             (       gshell.asm):07543                  bra   OUT3
                      (       gshell.asm):07544         
34FD C62F             (       gshell.asm):07545         LSET     ldb   #$2F
34FF 861B             (       gshell.asm):07546         OUT3     lda   #$1B
3501 EDA9132D         (       gshell.asm):07547                  std   GFXBUF,Y
3505 E665             (       gshell.asm):07548                  ldb   5,S
3507 E7A9132F         (       gshell.asm):07549                  stb   GFXBUF+2,Y
350B C603             (       gshell.asm):07550                  ldb   #3
350D 20DF             (       gshell.asm):07551                  bra   GFXWR3
                      (       gshell.asm):07552         
350F C644             (       gshell.asm):07553         LINE     ldb   #$44
3511 2012             (       gshell.asm):07554                  bra   OUT6
                      (       gshell.asm):07555         
3513 C646             (       gshell.asm):07556         LINEM    ldb   #$46
3515 200E             (       gshell.asm):07557                  bra   OUT6
                      (       gshell.asm):07558         
3517 C645             (       gshell.asm):07559         RLINE    ldb   #$45
3519 200A             (       gshell.asm):07560                  bra   OUT6
                      (       gshell.asm):07561         
351B C648             (       gshell.asm):07562         BOX      ldb   #$48
351D 2006             (       gshell.asm):07563                  bra   OUT6
                      (       gshell.asm):07564         
351F C649             (       gshell.asm):07565         RBOX     ldb   #$49
3521 2002             (       gshell.asm):07566                  bra   OUT6
                      (       gshell.asm):07567         
3523 C640             (       gshell.asm):07568         SETDPTR  ldb   #$40
3525 861B             (       gshell.asm):07569         OUT6     lda   #$1B
3527 8E132D           (       gshell.asm):07570                  ldx   #GFXBUF
352A ED81             (       gshell.asm):07571                  std   ,X++
352C EC64             (       gshell.asm):07572                  ldd   4,S
352E ED81             (       gshell.asm):07573                  std   ,X++
3530 EC66             (       gshell.asm):07574                  ldd   6,S
3532 ED84             (       gshell.asm):07575                  std   ,X
3534 C606             (       gshell.asm):07576                  ldb   #6
3536 205F             (       gshell.asm):07577                  bra   GFXWR
                      (       gshell.asm):07578         
3538 8E132D           (       gshell.asm):07579         PUTBLK   ldx   #GFXBUF
353B CC1B2D           (       gshell.asm):07580                  ldd   #$1B2D
353E ED81             (       gshell.asm):07581                  std   ,X++
3540 A665             (       gshell.asm):07582                  lda   5,S
3542 E667             (       gshell.asm):07583                  ldb   7,S
3544 ED81             (       gshell.asm):07584                  std   ,X++
3546 EC68             (       gshell.asm):07585                  ldd   8,S
3548 ED81             (       gshell.asm):07586                  std   ,X++
354A EC6A             (       gshell.asm):07587                  ldd   10,S
354C ED84             (       gshell.asm):07588                  std   ,X
354E C608             (       gshell.asm):07589                  ldb   #8
3550 2045             (       gshell.asm):07590                  bra   GFXWR
                      (       gshell.asm):07591         
3552 CC1B4F           (       gshell.asm):07592         FFILL    ldd   #$1B4F
3555 EDA9132D         (       gshell.asm):07593                  std   GFXBUF,Y
3559 C602             (       gshell.asm):07594                  ldb   #2
355B 203A             (       gshell.asm):07595                  bra   GFXWR
                      (       gshell.asm):07596         
355D 8E132D           (       gshell.asm):07597         GPLOAD   ldx   #GFXBUF
3560 CC1B2B           (       gshell.asm):07598                  ldd   #$1B2B
3563 ED81             (       gshell.asm):07599                  std   ,X++
3565 A665             (       gshell.asm):07600                  lda   5,S
3567 E667             (       gshell.asm):07601                  ldb   7,S
3569 ED81             (       gshell.asm):07602                  std   ,X++
356B A669             (       gshell.asm):07603                  lda   9,S
356D A780             (       gshell.asm):07604                  sta   ,X+
356F EC6A             (       gshell.asm):07605                  ldd   10,S
3571 ED81             (       gshell.asm):07606                  std   ,X++
3573 EC6C             (       gshell.asm):07607                  ldd   12,S
3575 ED81             (       gshell.asm):07608                  std   ,X++
3577 EC6E             (       gshell.asm):07609                  ldd   14,S
3579 ED84             (       gshell.asm):07610                  std   ,X
357B EC62             (       gshell.asm):07611                  ldd   2,S
357D 3406             (       gshell.asm):07612                  pshs  D
357F C60B             (       gshell.asm):07613                  ldb   #11
3581 8D14             (       gshell.asm):07614                  bsr   GFXWR
3583 3262             (       gshell.asm):07615                  leas  2,S
3585 AEE810           (       gshell.asm):07616                  ldx   16,S
3588 3420             (       gshell.asm):07617                  pshs  Y
358A 10AEE810         (       gshell.asm):07618                  ldy   16,S
358E A665             (       gshell.asm):07619                  lda   5,S
3590 103F8A           (       gshell.asm):07620                  os9   I$WRITE
3593 2516             (       gshell.asm):07621                  bcs   GFXERR
3595 35A0             (       gshell.asm):07622                  puls  Y,PC
                      (       gshell.asm):07623         
                      (       gshell.asm):07624         
                      (       gshell.asm):07625         * Entry:B= # bytes to write
3597 4F               (       gshell.asm):07626         GFXWR    clra             D=B
3598 8E132D           (       gshell.asm):07627                  ldx   #GFXBUF    Point to buffer that holds graphics commands to execute
359B 3420             (       gshell.asm):07628                  pshs  Y
359D 1F02             (       gshell.asm):07629                  tfr   D,Y        Length of command sequence to write
359F A665             (       gshell.asm):07630                  lda   5,S        Get path # to write to
35A1 103F8A           (       gshell.asm):07631                  os9   I$WRITE    Send gfx command
35A4 3520             (       gshell.asm):07632                  puls  Y
35A6 2503             (       gshell.asm):07633                  bcs   GFXERR
35A8 4F               (       gshell.asm):07634                  clra  
35A9 5F               (       gshell.asm):07635                  clrb  
35AA 39               (       gshell.asm):07636                  rts   
                      (       gshell.asm):07637         
35AB 4F               (       gshell.asm):07638         GFXERR   clra  
35AC EDA90431         (       gshell.asm):07639                  std   ERRNO,Y
35B0 CCFFFF           (       gshell.asm):07640                  ldd   #-1
35B3 39               (       gshell.asm):07641                  rts   
                      (       gshell.asm):07642         
                      (       gshell.asm):07643         * Convert ASCII # to 16 bit signed integer
                      (       gshell.asm):07644         * NOTE:WILL DO WEIRD THINGS IF RESULT IS >65535 (WRAPS AT 16 BIT)
                      (       gshell.asm):07645         * Works by saving neg/pos flag, and then going from left to right, multiplying
                      (       gshell.asm):07646         *  cumulative result by 10 each time a new digit is found, until non-digit
                      (       gshell.asm):07647         *  found. Also eats leading spaces & tabs.
                      (       gshell.asm):07648         * Entry: ptr to ASCII buffer on stack
                      (       gshell.asm):07649         * Exit: D=signed 16 bit value
35B4 3440             (       gshell.asm):07650         ATOI     pshs  U          Preserve U
35B6 EE64             (       gshell.asm):07651                  ldu   4,S        Get ptr to text to convert
                      (       gshell.asm):07652                  IFNE  H6309
                      (       gshell.asm):07653                  clrd             Clear carry, and default # to 0
                      (       gshell.asm):07654                  ELSE
35B8 4F               (       gshell.asm):07655                  clra
35B9 5F               (       gshell.asm):07656                  clrb
                      (       gshell.asm):07657                  ENDC
35BA 340F             (       gshell.asm):07658                  pshs  CC,d,dp    CC=storage for current ASC char, dp=sign, D=current result
35BC E6C0             (       gshell.asm):07659         ATOI1    ldb   ,U+        Get 1st ascii character
35BE E7E4             (       gshell.asm):07660                  stb   ,S         Save it
35C0 C120             (       gshell.asm):07661                  cmpb  #SPACE     Is it a space?
35C2 27F8             (       gshell.asm):07662                  beq   ATOI1      Yes, skip that char
35C4 C109             (       gshell.asm):07663                  cmpb  #HT        Is it a TAB char?
35C6 27F4             (       gshell.asm):07664                  beq   ATOI1      Yes, skip that char
35C8 C12D             (       gshell.asm):07665                  cmpb  #'-        Is it a negative sign?
35CA 2604             (       gshell.asm):07666                  bne   ATOI2      No, process character
35CC C601             (       gshell.asm):07667                  ldb   #1         Flag that we are working with a negative #
35CE 2001             (       gshell.asm):07668                  bra   ATOI3
                      (       gshell.asm):07669         
35D0 5F               (       gshell.asm):07670         ATOI2    clrb             Flag that it is a positive #
35D1 E763             (       gshell.asm):07671         ATOI3    stb   3,S        Save positive/negative flag
35D3 E6E4             (       gshell.asm):07672                  ldb   ,S         Get char again
35D5 C12D             (       gshell.asm):07673                  cmpb  #'-        Was it a negative sign?
35D7 271B             (       gshell.asm):07674                  beq   ATOI5      Yes, go onto next character
35D9 C12B             (       gshell.asm):07675                  cmpb  #'+        Was it a plus sign?
35DB 2619             (       gshell.asm):07676                  bne   ATOI6      No, go check if it was a numeric char
35DD 2015             (       gshell.asm):07677                  bra   ATOI5      +, skip to next char
                      (       gshell.asm):07678         * CHANGE MAIN LOOP TO PRE SUBTRACT #$30 INSTEAD OF CMP 1ST WHEN CHECKING
                      (       gshell.asm):07679         *   RANGE (?)
                      (       gshell.asm):07680         
35DF EC61             (       gshell.asm):07681         ATOI4    ldd   1,S        Get current result (so far)
                      (       gshell.asm):07682                  IFNE  H6309
                      (       gshell.asm):07683                  muld  #10        Bump up by one order of magnitude (Since on next digit)
                      (       gshell.asm):07684                  ldb   ,S         Get original numeric char
                      (       gshell.asm):07685                  sex              make 16 bit (note: still ascii version!)
                      (       gshell.asm):07686                  addr  w,d        Add to current base digit value (1,10,100,1000,10000)
                      (       gshell.asm):07687                  ELSE
35E1 3470             (       gshell.asm):07688                  pshs  x,y,u
35E3 8E000A           (       gshell.asm):07689                  ldx   #10
35E6 170138           (       gshell.asm):07690                  lbsr  MUL16
35E9 E666             (       gshell.asm):07691                  ldb   6,s
35EB 1D               (       gshell.asm):07692                  sex
35EC 3440             (       gshell.asm):07693                  pshs  u
35EE E3E1             (       gshell.asm):07694                  addd  ,s++ 
35F0 3570             (       gshell.asm):07695                  puls  x,y,u
                      (       gshell.asm):07696                  ENDC
35F2 ED61             (       gshell.asm):07697                  std   1,S        Save current result
35F4 E6C0             (       gshell.asm):07698         ATOI5    ldb   ,U+        Get next char from ASCII buffer
35F6 C030             (       gshell.asm):07699         ATOI6    subb  #$30       Convert to binary
35F8 E7E4             (       gshell.asm):07700                  stb   ,S         Save it
35FA 2D0C             (       gshell.asm):07701                  blt   ATOI65     Below '0', stop conversion
35FC C109             (       gshell.asm):07702                  cmpb  #9         Above '9'?
35FE 23DF             (       gshell.asm):07703                  bls   ATOI4      No, numeric, go process
3600 C130             (       gshell.asm):07704                  cmpb  #'0        Below a numeric char?
3602 2504             (       gshell.asm):07705                  blo   ATOI65     Yes, skip ahead
3604 C139             (       gshell.asm):07706                  cmpb  #'9        Above a numeric char?
3606 23D7             (       gshell.asm):07707                  bls   ATOI4      No, a numeric, go process
                      (       gshell.asm):07708         * Non numeric char stops conversion
3608 EC61             (       gshell.asm):07709         ATOI65   ldd   1,S        Get current result
360A 6D63             (       gshell.asm):07710                  tst   3,S        Was there a negative sign?
360C 2704             (       gshell.asm):07711                  beq   ATOI8      No, done
                      (       gshell.asm):07712                  IFNE  H6309
                      (       gshell.asm):07713                  negd  
                      (       gshell.asm):07714                  ELSE
360E 40               (       gshell.asm):07715                  nega  
360F 50               (       gshell.asm):07716                  negb  
3610 8200             (       gshell.asm):07717                  sbca  #$00
                      (       gshell.asm):07718                  ENDC
3612 3264             (       gshell.asm):07719         ATOI8    leas  4,S        Eat temp vars
3614 35C0             (       gshell.asm):07720                  puls  U,PC       Restore U & exit
                      (       gshell.asm):07721         
3616 308C40           (       gshell.asm):07722         CCMOD    leax  <CCDIV,PC
3619 AFA91351         (       gshell.asm):07723                  stx   HANDLER,Y
361D 6FA91350         (       gshell.asm):07724                  clr   NSIGN,Y
3621 6D62             (       gshell.asm):07725                  tst   2,S
3623 2A04             (       gshell.asm):07726                  bpl   CCMOD1
3625 6CA91350         (       gshell.asm):07727                  inc   NSIGN,Y
3629 830000           (       gshell.asm):07728         CCMOD1   subd  #0
362C 2606             (       gshell.asm):07729                  bne   CCMOD2
362E 3510             (       gshell.asm):07730                  puls  X
3630 ECE1             (       gshell.asm):07731                  ldd   ,S++
3632 6E84             (       gshell.asm):07732                  jmp   ,X
                      (       gshell.asm):07733         
3634 AE62             (       gshell.asm):07734         CCMOD2   ldx   2,S
3636 3410             (       gshell.asm):07735                  pshs  X
3638 ADB91351         (       gshell.asm):07736                  jsr   [HANDLER,Y]
363C ECE4             (       gshell.asm):07737                  ldd   ,S
363E ED62             (       gshell.asm):07738                  std   2,S
3640 1F10             (       gshell.asm):07739                  tfr   X,D
3642 6DA91350         (       gshell.asm):07740                  tst   NSIGN,Y
3646 2704             (       gshell.asm):07741                  beq   CCMODX
                      (       gshell.asm):07742                  IFNE  H6309
                      (       gshell.asm):07743                  negd  
                      (       gshell.asm):07744                  ELSE
3648 40               (       gshell.asm):07745                  nega  
3649 50               (       gshell.asm):07746                  negb  
364A 8200             (       gshell.asm):07747                  sbca  #$00
                      (       gshell.asm):07748                  ENDC
364C EDE1             (       gshell.asm):07749         CCMODX   std   ,S++
364E 39               (       gshell.asm):07750                  rts   
                      (       gshell.asm):07751         
364F 3506             (       gshell.asm):07752         DIVIDE.0 puls  D
3651 EDE4             (       gshell.asm):07753                  std   ,S
3653 CC002D           (       gshell.asm):07754                  ldd   #45
                      (       gshell.asm):07755                  IFNE  H6309
                      (       gshell.asm):07756                  bra   RPTERR
                      (       gshell.asm):07757                  ELSE
3656 160081           (       gshell.asm):07758                  lbra  RPTERR
                      (       gshell.asm):07759                  ENDC
                      (       gshell.asm):07760         
3659 830000           (       gshell.asm):07761         CCDIV    subd  #0
365C 27F1             (       gshell.asm):07762                  beq   DIVIDE.0
365E 3406             (       gshell.asm):07763                  pshs  D
3660 327E             (       gshell.asm):07764                  leas  -2,S
3662 6FE4             (       gshell.asm):07765                  clr   ,S
3664 6F61             (       gshell.asm):07766                  clr   1,S
3666 4D               (       gshell.asm):07767                  tsta  
3667 2A08             (       gshell.asm):07768                  bpl   CCDIV1
                      (       gshell.asm):07769                  IFNE  H6309
                      (       gshell.asm):07770                  negd  
                      (       gshell.asm):07771                  ELSE
3669 40               (       gshell.asm):07772                  nega  
366A 50               (       gshell.asm):07773                  negb  
366B 8200             (       gshell.asm):07774                  sbca  #$00
                      (       gshell.asm):07775                  ENDC
366D 6C61             (       gshell.asm):07776                  inc   1,S
366F ED62             (       gshell.asm):07777                  std   2,S
3671 EC66             (       gshell.asm):07778         CCDIV1   ldd   6,S
3673 2A08             (       gshell.asm):07779                  bpl   CCDIV2
                      (       gshell.asm):07780                  IFNE  H6309
                      (       gshell.asm):07781                  negd  
                      (       gshell.asm):07782                  ELSE
3675 40               (       gshell.asm):07783                  nega  
3676 50               (       gshell.asm):07784                  negb  
3677 8200             (       gshell.asm):07785                  sbca  #$00
                      (       gshell.asm):07786                  ENDC
3679 6361             (       gshell.asm):07787                  com   1,S
367B ED66             (       gshell.asm):07788                  std   6,S
367D 8601             (       gshell.asm):07789         CCDIV2   lda   #1
367F 4C               (       gshell.asm):07790         CCDIV3   inca  
3680 6863             (       gshell.asm):07791                  asl   3,S
3682 6962             (       gshell.asm):07792                  rol   2,S
3684 2AF9             (       gshell.asm):07793                  bpl   CCDIV3
3686 A7E4             (       gshell.asm):07794                  sta   ,S
3688 EC66             (       gshell.asm):07795                  ldd   6,S
368A 6F66             (       gshell.asm):07796                  clr   6,S
368C 6F67             (       gshell.asm):07797                  clr   7,S
368E A362             (       gshell.asm):07798         CCDIV4   subd  2,S
3690 2406             (       gshell.asm):07799                  bcc   CCDIV5
3692 E362             (       gshell.asm):07800                  addd  2,S
3694 1CFE             (       gshell.asm):07801                  andcc  #^Carry
3696 2002             (       gshell.asm):07802                  bra   CCDIV6
                      (       gshell.asm):07803         
3698 1A01             (       gshell.asm):07804         CCDIV5   orcc  #Carry
369A 6967             (       gshell.asm):07805         CCDIV6   rol   7,S
369C 6966             (       gshell.asm):07806                  rol   6,S
369E 6462             (       gshell.asm):07807                  lsr   2,S
36A0 6663             (       gshell.asm):07808                  ror   3,S
36A2 6AE4             (       gshell.asm):07809                  dec   ,S
36A4 26E8             (       gshell.asm):07810                  bne   CCDIV4
36A6 ED62             (       gshell.asm):07811                  std   2,S
36A8 6D61             (       gshell.asm):07812                  tst   1,S
36AA 2708             (       gshell.asm):07813                  beq   CCDIV7
36AC EC66             (       gshell.asm):07814                  ldd   6,S
                      (       gshell.asm):07815                  IFNE  H6309
                      (       gshell.asm):07816                  negd  
                      (       gshell.asm):07817                  ELSE
36AE 40               (       gshell.asm):07818                  nega  
36AF 50               (       gshell.asm):07819                  negb  
36B0 8200             (       gshell.asm):07820                  sbca  #$00
                      (       gshell.asm):07821                  ENDC
36B2 ED66             (       gshell.asm):07822                  std   6,S
36B4 AE64             (       gshell.asm):07823         CCDIV7   ldx   4,S
36B6 EC66             (       gshell.asm):07824                  ldd   6,S
36B8 ED64             (       gshell.asm):07825                  std   4,S
36BA AF66             (       gshell.asm):07826                  stx   6,S
36BC AE62             (       gshell.asm):07827                  ldx   2,S
36BE EC64             (       gshell.asm):07828                  ldd   4,S
36C0 3266             (       gshell.asm):07829                  leas  6,S
36C2 39               (       gshell.asm):07830                  rts   
                      (       gshell.asm):07831         
36C3 5D               (       gshell.asm):07832         CCASR    tstb  
36C4 2707             (       gshell.asm):07833                  beq   CCSEXIT
36C6 6762             (       gshell.asm):07834         CCASR1   asr   2,S
36C8 6663             (       gshell.asm):07835                  ror   3,S
36CA 5A               (       gshell.asm):07836                  decb  
36CB 26F9             (       gshell.asm):07837                  bne   CCASR1
36CD EC62             (       gshell.asm):07838         CCSEXIT  ldd   2,S
36CF 3406             (       gshell.asm):07839                  pshs  D
36D1 EC62             (       gshell.asm):07840                  ldd   2,S
36D3 ED64             (       gshell.asm):07841                  std   4,S
36D5 ECE4             (       gshell.asm):07842                  ldd   ,S
36D7 3264             (       gshell.asm):07843                  leas  4,S
36D9 39               (       gshell.asm):07844                  rts   
                      (       gshell.asm):07845         
36DA EDA90431         (       gshell.asm):07846         RPTERR   std   ERRNO,Y
36DE 3424             (       gshell.asm):07847                  pshs  B,Y
36E0 103F0C           (       gshell.asm):07848                  os9   F$ID
36E3 3524             (       gshell.asm):07849                  puls  B,Y
36E5 103F08           (       gshell.asm):07850                  os9   F$SEND
36E8 39               (       gshell.asm):07851                  rts   
                      (       gshell.asm):07852         
                      (       gshell.asm):07853         * Save error # & set flag
36E9 4F               (       gshell.asm):07854         OS9ERR   clra  
36EA EDA90431         (       gshell.asm):07855                  std   ERRNO,Y
36EE CCFFFF           (       gshell.asm):07856                  ldd   #-1
36F1 39               (       gshell.asm):07857                  rts   
                      (       gshell.asm):07858         
36F2 25F5             (       gshell.asm):07859         SYSRET   bcs   OS9ERR
                      (       gshell.asm):07860                  IFNE  H6309
                      (       gshell.asm):07861                  clrd  
                      (       gshell.asm):07862                  ELSE
36F4 4F               (       gshell.asm):07863                  clra
36F5 5F               (       gshell.asm):07864                  clrb
                      (       gshell.asm):07865                  ENDC
36F6 39               (       gshell.asm):07866                  rts   
                      (       gshell.asm):07867         
36F7                  (       gshell.asm):07868         EXIT           
36F7 EC62             (       gshell.asm):07869         F.EXIT   ldd   2,S
36F9 103F06           (       gshell.asm):07870                  os9   F$EXIT
                      (       gshell.asm):07871         
                      (       gshell.asm):07872         * Quick hack to copy new 4 color icon stuff into buffer used by GPLOAD routine
                      (       gshell.asm):07873         * Entry: X=Source buffer of icon
                      (       gshell.asm):07874         *        B=# bytes to copy
36FC 3440             (       gshell.asm):07875         CopyIcon pshs  u
36FE CE0E93           (       gshell.asm):07876                  ldu   #ICONBUFR  Point to icon build buffer
3701 A680             (       gshell.asm):07877         CpyIc    lda   ,x+
3703 A7C0             (       gshell.asm):07878                  sta   ,u+
3705 5A               (       gshell.asm):07879                  decb  
3706 26F9             (       gshell.asm):07880                  bne   CpyIc
3708 35C0             (       gshell.asm):07881                  puls  u,pc
                      (       gshell.asm):07882         
                      (       gshell.asm):07883         * Reset fore/back colors for Menu bar updates
370A 3436             (       gshell.asm):07884         MenuClr  pshs  d,x,y
370C 308C3D           (       gshell.asm):07885                  leax  <MenuColr,pc
370F 2005             (       gshell.asm):07886                  bra   WritColr
                      (       gshell.asm):07887         
                      (       gshell.asm):07888         * Reset fore/back colors for non-Menu bar updates
3711 3436             (       gshell.asm):07889         RegClr   pshs  d,x,y
3713 308C3C           (       gshell.asm):07890                  leax  <RegColr,pc
3716 108E0006         (       gshell.asm):07891         WritColr ldy   #6
371A 9623             (       gshell.asm):07892                  lda   <WNDWPATH+1 Get window path
371C 103F8A           (       gshell.asm):07893                  os9   I$Write
371F 35B6             (       gshell.asm):07894                  puls  d,x,y,pc
                      (       gshell.asm):07895         
                      (       gshell.asm):07896         * 16 bit multiply
                      (       gshell.asm):07897                  IFEQ  H6309
3721 3476             (       gshell.asm):07898         MUL16    pshs  d,x,y,u        XmulD returns Y&U
3723 6F64             (       gshell.asm):07899                  clr   4,s
3725 A663             (       gshell.asm):07900                  lda   3,s
3727 3D               (       gshell.asm):07901                  mul
3728 ED66             (       gshell.asm):07902                  std   6,s
372A EC61             (       gshell.asm):07903                  ldd   1,s
372C 3D               (       gshell.asm):07904                  mul
372D EB66             (       gshell.asm):07905                  addb  6,s
372F 8900             (       gshell.asm):07906                  adca  #0
3731 ED65             (       gshell.asm):07907                  std   5,s
3733 E6E4             (       gshell.asm):07908                  ldb   ,s
3735 A663             (       gshell.asm):07909                  lda   3,s
3737 3D               (       gshell.asm):07910                  mul
3738 E365             (       gshell.asm):07911                  addd  5,s
373A ED65             (       gshell.asm):07912                  std   5,s
373C 2402             (       gshell.asm):07913                  bcc   MUL16b
373E 6C64             (       gshell.asm):07914                  inc   4,s
3740 A6E4             (       gshell.asm):07915         MUL16b   lda   ,s
3742 E662             (       gshell.asm):07916                  ldb   2,s
3744 3D               (       gshell.asm):07917                  mul
3745 E364             (       gshell.asm):07918                  addd  4,s
3747 4F               (       gshell.asm):07919                  clra
3748 ED64             (       gshell.asm):07920                  std   4,s
374A 35F6             (       gshell.asm):07921                  puls  d,x,y,u,pc
                      (       gshell.asm):07922                  ENDC
                      (       gshell.asm):07923         
374C 1B32021B3300     (       gshell.asm):07924         MenuColr fcb   $1b,$32,2,$1b,$33,0
3752 1B32001B3302     (       gshell.asm):07925         RegColr  fcb   $1b,$32,0,$1b,$33,2
                      (       gshell.asm):07926         
                      (       gshell.asm):07927         * New 4 color disk drive icon 24x12
3758 FFFFFFFFFFFD     (       gshell.asm):07928         driveicn fcb   255,255,255,255,255,253
375E EAAAAAAAAAA9     (       gshell.asm):07929                  fcb   234,170,170,170,170,169
3764 EAAAAAAAAAA9     (       gshell.asm):07930                  fcb   234,170,170,170,170,169
376A EAAAAAAAAAA9     (       gshell.asm):07931                  fcb   234,170,170,170,170,169
3770 EAAA5555AAA9     (       gshell.asm):07932                  fcb   234,170,85,85,170,169
3776 E955400155E9     (       gshell.asm):07933                  fcb   233,85,64,1,85,233
377C EBFFEAABFFE9     (       gshell.asm):07934                  fcb   235,255,234,171,255,233
3782 EAAAFFFFAAA9     (       gshell.asm):07935                  fcb   234,170,255,255,170,169
3788 EAAAAAAAAFE9     (       gshell.asm):07936                  fcb   234,170,170,170,175,233
378E E56AAAAAAD69     (       gshell.asm):07937                  fcb   229,106,170,170,173,105
3794 EAAAAAAAAAA9     (       gshell.asm):07938                  fcb   234,170,170,170,170,169
379A D55555555555     (       gshell.asm):07939                  fcb   213,85,85,85,85,85
                      (       gshell.asm):07940         
                      (       gshell.asm):07941         * New trash can icon 24x24
37A0 AAAAAAAAAAAA     (       gshell.asm):07942         trashicn fcb   170,170,170,170,170,170
37A6 AA800000AAAA     (       gshell.asm):07943                  fcb   170,128,0,0,170,170
37AC A005559B02AA     (       gshell.asm):07944                  fcb   160,5,85,155,2,170
37B2 81115666BCAA     (       gshell.asm):07945                  fcb   129,17,86,102,188,170
37B8 0455599AEF2A     (       gshell.asm):07946                  fcb   4,85,89,154,239,42
37BE 011166A7BC2A     (       gshell.asm):07947                  fcb   1,17,102,167,188,42
37C4 2005599F022A     (       gshell.asm):07948                  fcb   32,5,89,159,2,42
37CA 2A800000AA2A     (       gshell.asm):07949                  fcb   42,128,0,0,170,42
37D0 2AAAAAAAAA2A     (       gshell.asm):07950                  fcb   42,170,170,170,170,42
37D6 280AAAA80A2A     (       gshell.asm):07951                  fcb   40,10,170,168,10,42
37DC 23D280A3D22A     (       gshell.asm):07952                  fcb   35,210,128,163,210,42
37E2 23923D23922A     (       gshell.asm):07953                  fcb   35,146,61,35,146,42
37E8 23923923922A     (       gshell.asm):07954                  fcb   35,146,57,35,146,42
37EE 23923923922A     (       gshell.asm):07955                  fcb   35,146,57,35,146,42
37F4 23923923922A     (       gshell.asm):07956                  fcb   35,146,57,35,146,42
37FA 23923923922A     (       gshell.asm):07957                  fcb   35,146,57,35,146,42
3800 23923923922A     (       gshell.asm):07958                  fcb   35,146,57,35,146,42
3806 23923923922A     (       gshell.asm):07959                  fcb   35,146,57,35,146,42
380C 23923923922A     (       gshell.asm):07960                  fcb   35,146,57,35,146,42
3812 23923923922A     (       gshell.asm):07961                  fcb   35,146,57,35,146,42
3818 280A39280A16     (       gshell.asm):07962                  fcb   40,10,57,40,10,22
381E 82AA80AAA055     (       gshell.asm):07963                  fcb   130,170,128,170,160,85
3824 A80AAAA80555     (       gshell.asm):07964                  fcb   168,10,170,168,5,85
382A AAA000015556     (       gshell.asm):07965                  fcb   170,160,0,1,85,86
                      (       gshell.asm):07966         
                      (       gshell.asm):07967         * New 4 color EXECUTABLE icon 24x24
3830 FFFFFFFFFFFD     (       gshell.asm):07968         execicon fcb   255,255,255,255,255,253
3836 E4A915644AA5     (       gshell.asm):07969                  fcb   228,169,21,100,74,165
383C E4A914A10AA5     (       gshell.asm):07970                  fcb   228,169,20,161,10,165
3842 D55555555555     (       gshell.asm):07971                  fcb   213,85,85,85,85,85
3848 FDAAAAAAAAFD     (       gshell.asm):07972                  fcb   253,170,170,170,170,253
384E E991AA12AAC9     (       gshell.asm):07973                  fcb   233,145,170,18,170,201
3854 E984AA46AAC1     (       gshell.asm):07974                  fcb   233,132,170,70,170,193
385A E991AA12AAD5     (       gshell.asm):07975                  fcb   233,145,170,18,170,213
3860 E9AAAAAAAAE9     (       gshell.asm):07976                  fcb   233,170,170,170,170,233
3866 E9946A14AAFD     (       gshell.asm):07977                  fcb   233,148,106,20,170,253
386C E9916A50AAE9     (       gshell.asm):07978                  fcb   233,145,106,80,170,233
3872 E9AAAAAAAAD5     (       gshell.asm):07979                  fcb   233,170,170,170,170,213
3878 E9AAAAAAAAE9     (       gshell.asm):07980                  fcb   233,170,170,170,170,233
387E E99DEAAAAAE9     (       gshell.asm):07981                  fcb   233,157,234,170,170,233
3884 E9B46AAAAAE9     (       gshell.asm):07982                  fcb   233,180,106,170,170,233
388A E9836AAAAAE9     (       gshell.asm):07983                  fcb   233,131,106,170,170,233
3890 E9AAAAAAAAD5     (       gshell.asm):07984                  fcb   233,170,170,170,170,213
3896 E9812AAAAAC1     (       gshell.asm):07985                  fcb   233,129,42,170,170,193
389C E9842AAAAAD1     (       gshell.asm):07986                  fcb   233,132,42,170,170,209
38A2 D5AAAAAAAAD5     (       gshell.asm):07987                  fcb   213,170,170,170,170,213
38A8 FFFFFFFFFFFD     (       gshell.asm):07988                  fcb   255,255,255,255,255,253
38AE C1AE6AAAAA41     (       gshell.asm):07989                  fcb   193,174,106,170,170,65
38B4 E1AE6AAAAA49     (       gshell.asm):07990                  fcb   225,174,106,170,170,73
38BA 555555555555     (       gshell.asm):07991                  fcb   85,85,85,85,85,85
                      (       gshell.asm):07992         
                      (       gshell.asm):07993         * New 4 color Folder icon 24x24
38C0 AA82AAAAAAAA     (       gshell.asm):07994         foldricn fcb   170,130,170,170,170,170
38C6 AA3C0AAAAAAA     (       gshell.asm):07995                  fcb   170,60,10,170,170,170
38CC AA37F0AAAAAA     (       gshell.asm):07996                  fcb   170,55,240,170,170,170
38D2 01E17CAAAAAA     (       gshell.asm):07997                  fcb   1,225,124,170,170,170
38D8 3C2AA80AAAAA     (       gshell.asm):07998                  fcb   60,42,168,10,170,170
38DE 3FC0ABF02AAA     (       gshell.asm):07999                  fcb   63,192,171,240,42,170
38E4 3EBF02AFC0AA     (       gshell.asm):08000                  fcb   62,191,2,175,192,170
38EA 3AAAFC0ABF02     (       gshell.asm):08001                  fcb   58,170,252,10,191,2
38F0 3AAAABF02AFC     (       gshell.asm):08002                  fcb   58,170,171,240,42,252
38F6 3AAAAAAFC2A0     (       gshell.asm):08003                  fcb   58,170,170,175,194,160
38FC 3AAAAAAA92A4     (       gshell.asm):08004                  fcb   58,170,170,170,146,164
3902 3AAAAAAA9194     (       gshell.asm):08005                  fcb   58,170,170,170,145,148
3908 3AAAAAAA9264     (       gshell.asm):08006                  fcb   58,170,170,170,146,100
390E 3AAAAAAA9194     (       gshell.asm):08007                  fcb   58,170,170,170,145,148
3914 3AAAAAAA9252     (       gshell.asm):08008                  fcb   58,170,170,170,146,82
391A 3AAAAAAAA492     (       gshell.asm):08009                  fcb   58,170,170,170,164,146
3920 3AAAAAAAA452     (       gshell.asm):08010                  fcb   58,170,170,170,164,82
3926 15AAAAAAA492     (       gshell.asm):08011                  fcb   21,170,170,170,164,146
392C 8056AAAAA452     (       gshell.asm):08012                  fcb   128,86,170,170,164,82
3932 AA015AAAA40A     (       gshell.asm):08013                  fcb   170,1,90,170,164,10
3938 AAA8056AA50A     (       gshell.asm):08014                  fcb   170,168,5,106,165,10
393E AAAAA015990A     (       gshell.asm):08015                  fcb   170,170,160,21,153,10
3944 AAAAAA80550A     (       gshell.asm):08016                  fcb   170,170,170,128,85,10
394A AAAAAAAA000A     (       gshell.asm):08017                  fcb   170,170,170,170,0,10
                      (       gshell.asm):08018         
                      (       gshell.asm):08019         * Text Icon 24x24
3950 00000000000A     (       gshell.asm):08020         txticon  fcb   0,0,0,0,0,10
3956 3FFFFFFD5546     (       gshell.asm):08021                  fcb   63,255,255,253,85,70
395C 3DB7E5FD9A86     (       gshell.asm):08022                  fcb   61,183,229,253,154,134
3962 3D776D7DE686     (       gshell.asm):08023                  fcb   61,119,109,125,230,134
3968 3FFFFFFDF986     (       gshell.asm):08024                  fcb   63,255,255,253,249,134
396E 3FFFFFFDBE46     (       gshell.asm):08025                  fcb   63,255,255,253,190,70
3974 3DBFF6FD5546     (       gshell.asm):08026                  fcb   61,191,246,253,85,70
397A 3EDF9BBFFFC6     (       gshell.asm):08027                  fcb   62,223,155,191,255,198
3980 3FFFFFFFFFC6     (       gshell.asm):08028                  fcb   63,255,255,255,255,198
3986 3FFFFFFFFFC6     (       gshell.asm):08029                  fcb   63,255,255,255,255,198
398C 3E6DFDD7FBC6     (       gshell.asm):08030                  fcb   62,109,253,215,251,198
3992 3F7E7ADBB9C6     (       gshell.asm):08031                  fcb   63,126,122,219,185,198
3998 3FFFFFFFFFC6     (       gshell.asm):08032                  fcb   63,255,255,255,255,198
399E 3FFFFFFFFFC6     (       gshell.asm):08033                  fcb   63,255,255,255,255,198
39A4 3EFEFEFFFBC6     (       gshell.asm):08034                  fcb   62,254,254,255,251,198
39AA 3E7D6E7DF9C6     (       gshell.asm):08035                  fcb   62,125,110,125,249,198
39B0 3FFFFFFFFFC6     (       gshell.asm):08036                  fcb   63,255,255,255,255,198
39B6 3FFFFFFFFFC6     (       gshell.asm):08037                  fcb   63,255,255,255,255,198
39BC 3EBD7FE797C6     (       gshell.asm):08038                  fcb   62,189,127,231,151,198
39C2 3EFFAFDFFBC6     (       gshell.asm):08039                  fcb   62,255,175,223,251,198
39C8 3FFFFFFFFFC6     (       gshell.asm):08040                  fcb   63,255,255,255,255,198
39CE 000000000006     (       gshell.asm):08041                  fcb   0,0,0,0,0,6
39D4 955555555556     (       gshell.asm):08042                  fcb   149,85,85,85,85,86
39DA AAAAAAAAAAAA     (       gshell.asm):08043                  fcb   170,170,170,170,170,170
                      (       gshell.asm):08044         
                      (       gshell.asm):08045         * NEW - printer icon (24x15)
39E0 AAA80002AAAA     (       gshell.asm):08046         prntricn fcb   170,168,0,2,170,170
39E6 AAA8FFC8AAAA     (       gshell.asm):08047                  fcb   170,168,255,200,170,170
39EC AAA8C3CD2AAA     (       gshell.asm):08048                  fcb   170,168,195,205,42,170
39F2 AAA8FFC02AAA     (       gshell.asm):08049                  fcb   170,168,255,192,42,170
39F8 AAA8C0FF2AAA     (       gshell.asm):08050                  fcb   170,168,192,255,42,170
39FE AAA8FFC32AAA     (       gshell.asm):08051                  fcb   170,168,255,195,42,170
3A04 AA80C0FF02AA     (       gshell.asm):08052                  fcb   170,128,192,255,2,170
3A0A AA88FFFF22AA     (       gshell.asm):08053                  fcb   170,136,255,255,34,170
3A10 AA00000000AA     (       gshell.asm):08054                  fcb   170,0,0,0,0,170
3A16 A8A666666A2A     (       gshell.asm):08055                  fcb   168,166,102,102,106,42
3A1C A8AAAAAA822A     (       gshell.asm):08056                  fcb   168,170,170,170,130,42
3A22 A8AAAAAAAA2A     (       gshell.asm):08057                  fcb   168,170,170,170,170,42
3A28 A8000000002A     (       gshell.asm):08058                  fcb   168,0,0,0,0,42
3A2E AA26666668AA     (       gshell.asm):08059                  fcb   170,38,102,102,104,170
3A34 AA80000002AA     (       gshell.asm):08060                  fcb   170,128,0,0,2,170
                      (       gshell.asm):08061         
3A3A 0017             (       gshell.asm):08062         ETEXT    fdb   INTCOUNT-DPAGDATA
                      (       gshell.asm):08063         
3A3C FF               (       gshell.asm):08064         DPAGDATA fcb   $FF        WIPED  On initialization, we have to refresh DIR screen
3A3D 0006             (       gshell.asm):08065                  fdb   6          DEFWTYPE
3A3F 0040             (       gshell.asm):08066                  fdb   64         ICONCOLW
3A41 000F             (       gshell.asm):08067                  fdb   15         STRTYPOS
3A43 0087             (       gshell.asm):08068                  fdb   135        ICONYMAX
3A45 0028             (       gshell.asm):08069                  fdb   40         ICONROWH
3A47 0019             (       gshell.asm):08070                  fdb   25         WNDWSZY
3A49 0038             (       gshell.asm):08071                  fdb   PTBLSPTR   PTBLNEXT
3A4B 0675             (       gshell.asm):08072                  fdb   FNAMBUFR   FNAMEPTR
3A4D 03A1             (       gshell.asm):08073                  fdb   CALCDESC   IDSCSPTR
3A4F 03F7             (       gshell.asm):08074                  fdb   ENDLINK    IDSCNEXT
3A51 05               (       gshell.asm):08075                  fcb   5          DEVICNTR
3A52 02               (       gshell.asm):08076                  fcb   2          DRIVYPOS  Was 18 (making room for printer)
                      (       gshell.asm):08077         
                      (       gshell.asm):08078         * End of Direct Page Variables.
                      (       gshell.asm):08079         
3A53 03C3             (       gshell.asm):08080         INTCOUNT fdb   DTXCOUNT-INITDATA
                      (       gshell.asm):08081         
                      (       gshell.asm):08082         * TNDYITMS
                      (       gshell.asm):08083         
3A55 43616C63         (       gshell.asm):08084         INITDATA fcc   "Calc"
3A59 0000000000000000 (       gshell.asm):08085                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3A61 000000           (       gshell.asm):08086                  fcb   NUL,NUL,NUL
3A64 01000000         (       gshell.asm):08087                  fcb   1,0,0,0
3A68 0000             (       gshell.asm):08088                  fcb   0,0
                      (       gshell.asm):08089         
3A6A 436C6F636B       (       gshell.asm):08090                  fcc   "Clock"
3A6F 0000000000000000 (       gshell.asm):08091                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3A77 0000             (       gshell.asm):08092                  fcb   NUL,NUL
3A79 01000000         (       gshell.asm):08093                  fcb   1,0,0,0
3A7D 0000             (       gshell.asm):08094                  fcb   0,0
                      (       gshell.asm):08095         
3A7F 43616C656E646172 (       gshell.asm):08096                  fcc   "Calendar"
3A87 00000000000000   (       gshell.asm):08097                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL
3A8E 01000000         (       gshell.asm):08098                  fcb   1,0,0,0
3A92 0000             (       gshell.asm):08099                  fcb   0,0
                      (       gshell.asm):08100         
3A94 436F6E74726F6C   (       gshell.asm):08101                  fcc   "Control"
3A9B 0000000000000000 (       gshell.asm):08102                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3AA3 01000000         (       gshell.asm):08103                  fcb   1,0,0,0
3AA7 0000             (       gshell.asm):08104                  fcb   0,0
                      (       gshell.asm):08105         
3AA9 5072696E746572   (       gshell.asm):08106                  fcc   "Printer"
3AB0 0000000000000000 (       gshell.asm):08107                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3AB8 01000000         (       gshell.asm):08108                  fcb   1,0,0,0
3ABC 0000             (       gshell.asm):08109                  fcb   0,0
                      (       gshell.asm):08110         
3ABE 506F7274         (       gshell.asm):08111                  fcc   "Port"
3AC2 0000000000000000 (       gshell.asm):08112                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3ACA 000000           (       gshell.asm):08113                  fcb   NUL,NUL,NUL
3ACD 01000000         (       gshell.asm):08114                  fcb   1,0,0,0
3AD1 0000             (       gshell.asm):08115                  fcb   0,0
                      (       gshell.asm):08116         
3AD3 48656C70         (       gshell.asm):08117                  fcc   "Help"
3AD7 0000000000000000 (       gshell.asm):08118                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3ADF 000000           (       gshell.asm):08119                  fcb   NUL,NUL,NUL
3AE2 01000000         (       gshell.asm):08120                  fcb   1,0,0,0
3AE6 0000             (       gshell.asm):08121                  fcb   0,0
                      (       gshell.asm):08122         
3AE8 5368656C6C       (       gshell.asm):08123                  fcc   "Shell"
3AED 0000000000000000 (       gshell.asm):08124                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3AF5 0000             (       gshell.asm):08125                  fcb   NUL,NUL
3AF7 01000000         (       gshell.asm):08126                  fcb   1,0,0,0
3AFB 0000             (       gshell.asm):08127                  fcb   0,0
                      (       gshell.asm):08128         
                      (       gshell.asm):08129         * MAY WANT TO ADD BACK IN IF WE START USING CLIPBOARD FUNCTIONS
                      (       gshell.asm):08130         * FCC "Clipboard" 
                      (       gshell.asm):08131         * FCB NUL,NUL,NUL,NUL,NUL,NUL 
                      (       gshell.asm):08132         * FCB 0,0,0,0 
                      (       gshell.asm):08133         * FCB 0,0 
                      (       gshell.asm):08134         
                      (       gshell.asm):08135         * DISKITMS
                      (       gshell.asm):08136         * ITM.FREE
                      (       gshell.asm):08137         
3AFD 46726565         (       gshell.asm):08138                  fcc   "Free"
3B01 0000000000000000 (       gshell.asm):08139                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3B09 000000           (       gshell.asm):08140                  fcb   NUL,NUL,NUL
3B0C 00000000         (       gshell.asm):08141                  fcb   0,0,0,0
3B10 0000             (       gshell.asm):08142                  fcb   0,0
                      (       gshell.asm):08143         
                      (       gshell.asm):08144         * ITM.FLDR
                      (       gshell.asm):08145         
3B12 4E657720466F6C64 (       gshell.asm):08146                  fcc   "New Folder"
     6572
3B1C 0000000000       (       gshell.asm):08147                  fcb   NUL,NUL,NUL,NUL,NUL
3B21 00000000         (       gshell.asm):08148                  fcb   0,0,0,0
3B25 0000             (       gshell.asm):08149                  fcb   0,0
                      (       gshell.asm):08150         
                      (       gshell.asm):08151         * ITM.FMAT
                      (       gshell.asm):08152         
3B27 466F726D6174     (       gshell.asm):08153                  fcc   "Format"
3B2D 0000000000000000 (       gshell.asm):08154                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3B35 00               (       gshell.asm):08155                  fcb   NUL
3B36 01000000         (       gshell.asm):08156                  fcb   1,0,0,0
3B3A 0000             (       gshell.asm):08157                  fcb   0,0
                      (       gshell.asm):08158         
3B3C 4261636B7570     (       gshell.asm):08159                  fcc   "Backup"
3B42 0000000000000000 (       gshell.asm):08160                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3B4A 00               (       gshell.asm):08161                  fcb   NUL
3B4B 01000000         (       gshell.asm):08162                  fcb   1,0,0,0
3B4F 0000             (       gshell.asm):08163                  fcb   0,0
                      (       gshell.asm):08164         
3B51 5365742045786563 (       gshell.asm):08165                  fcc   "Set Execute"
     757465
3B5C 00000000         (       gshell.asm):08166                  fcb   NUL,NUL,NUL,NUL
3B60 01000000         (       gshell.asm):08167                  fcb   1,0,0,0
3B64 0000             (       gshell.asm):08168                  fcb   0,0
                      (       gshell.asm):08169         
3B66 5365742044657669 (       gshell.asm):08170                  fcc   "Set Devices"
     636573
3B71 00000000         (       gshell.asm):08171                  fcb   NUL,NUL,NUL,NUL
3B75 01000000         (       gshell.asm):08172                  fcb   1,0,0,0
3B79 0000             (       gshell.asm):08173                  fcb   0,0
                      (       gshell.asm):08174         
                      (       gshell.asm):08175         * ITM.OPEN
                      (       gshell.asm):08176         
3B7B 4F70656E         (       gshell.asm):08177                  fcc   "Open"
3B7F 0000000000000000 (       gshell.asm):08178                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3B87 000000           (       gshell.asm):08179                  fcb   NUL,NUL,NUL
3B8A 00000000         (       gshell.asm):08180                  fcb   0,0,0,0
3B8E 0000             (       gshell.asm):08181                  fcb   0,0
                      (       gshell.asm):08182         
                      (       gshell.asm):08183         * ITM.LIST
                      (       gshell.asm):08184         
3B90 4C697374         (       gshell.asm):08185                  fcc   "List"
3B94 0000000000000000 (       gshell.asm):08186                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3B9C 000000           (       gshell.asm):08187                  fcb   NUL,NUL,NUL
3B9F 00000000         (       gshell.asm):08188                  fcb   0,0,0,0
3BA3 0000             (       gshell.asm):08189                  fcb   0,0
                      (       gshell.asm):08190         
                      (       gshell.asm):08191         * ITM.COPY
                      (       gshell.asm):08192         
3BA5 436F7079         (       gshell.asm):08193                  fcc   "Copy"
3BA9 0000000000000000 (       gshell.asm):08194                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3BB1 000000           (       gshell.asm):08195                  fcb   NUL,NUL,NUL
3BB4 00000000         (       gshell.asm):08196                  fcb   0,0,0,0
3BB8 0000             (       gshell.asm):08197                  fcb   0,0
                      (       gshell.asm):08198         
                      (       gshell.asm):08199         * ITM.STAT
                      (       gshell.asm):08200         
3BBA 53746174         (       gshell.asm):08201                  fcc   "Stat"
3BBE 0000000000000000 (       gshell.asm):08202                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3BC6 000000           (       gshell.asm):08203                  fcb   NUL,NUL,NUL
3BC9 00000000         (       gshell.asm):08204                  fcb   0,0,0,0
3BCD 0000             (       gshell.asm):08205                  fcb   0,0
                      (       gshell.asm):08206         
                      (       gshell.asm):08207         * ITM.PRNT
                      (       gshell.asm):08208         
3BCF 5072696E74       (       gshell.asm):08209                  fcc   "Print"
3BD4 0000000000000000 (       gshell.asm):08210                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3BDC 0000             (       gshell.asm):08211                  fcb   NUL,NUL
3BDE 00000000         (       gshell.asm):08212                  fcb   0,0,0,0
3BE2 0000             (       gshell.asm):08213                  fcb   0,0
                      (       gshell.asm):08214         
                      (       gshell.asm):08215         * ITM.RENAM
                      (       gshell.asm):08216         
3BE4 52656E616D65     (       gshell.asm):08217                  fcc   "Rename"
3BEA 0000000000000000 (       gshell.asm):08218                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3BF2 00               (       gshell.asm):08219                  fcb   NUL
3BF3 00000000         (       gshell.asm):08220                  fcb   0,0,0,0
3BF7 0000             (       gshell.asm):08221                  fcb   0,0
                      (       gshell.asm):08222         
                      (       gshell.asm):08223         * ITM.DELT
                      (       gshell.asm):08224         
3BF9 44656C657465     (       gshell.asm):08225                  fcc   "Delete"
3BFF 0000000000000000 (       gshell.asm):08226                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3C07 00               (       gshell.asm):08227                  fcb   NUL
3C08 00000000         (       gshell.asm):08228                  fcb   0,0,0,0
3C0C 0000             (       gshell.asm):08229                  fcb   0,0
                      (       gshell.asm):08230         
                      (       gshell.asm):08231         * ITM.SORT
                      (       gshell.asm):08232         
3C0E 536F7274         (       gshell.asm):08233                  fcc   "Sort"
3C12 0000000000000000 (       gshell.asm):08234                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3C1A 000000           (       gshell.asm):08235                  fcb   NUL,NUL,NUL
3C1D 00000000         (       gshell.asm):08236                  fcb   0,0,0,0
3C21 0000             (       gshell.asm):08237                  fcb   0,0
                      (       gshell.asm):08238         
3C23 51756974         (       gshell.asm):08239                  fcc   "Quit"
3C27 0000000000000000 (       gshell.asm):08240                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3C2F 000000           (       gshell.asm):08241                  fcb   NUL,NUL,NUL
3C32 01000000         (       gshell.asm):08242                  fcb   1,0,0,0
3C36 0000             (       gshell.asm):08243                  fcb   0,0
                      (       gshell.asm):08244         
                      (       gshell.asm):08245         * VIEWITEMS
                      (       gshell.asm):08246         * ITM.LRES
                      (       gshell.asm):08247         
3C38 34307832352D34   (       gshell.asm):08248                  fcc   "40x25-4"
3C3F 0000000000000000 (       gshell.asm):08249                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3C47 01000000         (       gshell.asm):08250                  fcb   1,0,0,0
3C4B 0000             (       gshell.asm):08251                  fcb   0,0
                      (       gshell.asm):08252         
3C4D 38307832352D3420 (       gshell.asm):08253                  fcc   "80x25-4 (FAT)"
     2846415429
3C5A 0000             (       gshell.asm):08254                  fcb   NUL,NUL
3C5C 01000000         (       gshell.asm):08255                  fcb   1,0,0,0
3C60 0000             (       gshell.asm):08256                  fcb   0,0
                      (       gshell.asm):08257         
3C62 34307832352D3136 (       gshell.asm):08258                  fcc   "40x25-16"
3C6A 00000000000000   (       gshell.asm):08259                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL
3C71 01000000         (       gshell.asm):08260                  fcb   1,0,0,0
3C75 0000             (       gshell.asm):08261                  fcb   0,0
                      (       gshell.asm):08262         
                      (       gshell.asm):08263         * KDMITMS
                      (       gshell.asm):08264         
3C77 3C4B444D264C4342 (       gshell.asm):08265                  fcc   "<KDM&LCB>"
     3E
3C80 000000000000     (       gshell.asm):08266                  fcb   NUL,NUL,NUL,NUL,NUL,NUL
3C86 00000000         (       gshell.asm):08267                  fcb   0,0,0,0
3C8A 0000             (       gshell.asm):08268                  fcb   0,0
                      (       gshell.asm):08269         
3C8C 5623312E3236     (       gshell.asm):08270                  fcc   "V#1.26"
3C92 0000000000000000 (       gshell.asm):08271                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
     00
3C9B 00000000         (       gshell.asm):08272                  fcb   0,0,0,0
3C9F 0000             (       gshell.asm):08273                  fcb   0,0
                      (       gshell.asm):08274         
                      (       gshell.asm):08275         * TNDYDESC
                      (       gshell.asm):08276         
3CA1 54616E6479       (       gshell.asm):08277                  fcc   "Tandy"
3CA6 0000000000000000 (       gshell.asm):08278                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3CAE 0000             (       gshell.asm):08279                  fcb   NUL,NUL
3CB0 14               (       gshell.asm):08280                  fcb   MID.TDY
3CB1 080801           (       gshell.asm):08281                  fcb   8,8,1
3CB4 0000             (       gshell.asm):08282                  fdb   $0000
3CB6 005E             (       gshell.asm):08283                  fdb   TNDYITMS
                      (       gshell.asm):08284         
                      (       gshell.asm):08285         * FILSDESC
                      (       gshell.asm):08286         
3CB8 46696C6573       (       gshell.asm):08287                  fcc   "Files"
3CBD 0000000000000000 (       gshell.asm):08288                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3CC5 0000             (       gshell.asm):08289                  fcb   NUL,NUL
3CC7 17               (       gshell.asm):08290                  fcb   MID.FIL
3CC8 060901           (       gshell.asm):08291                  fcb   6,9,1
3CCB 0000             (       gshell.asm):08292                  fdb   $0000
3CCD 0184             (       gshell.asm):08293                  fdb   FILSITMS
                      (       gshell.asm):08294         
                      (       gshell.asm):08295         * DISKDESC
                      (       gshell.asm):08296         
3CCF 4469736B         (       gshell.asm):08297                  fcc   "Disk"
3CD3 0000000000000000 (       gshell.asm):08298                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3CDB 000000           (       gshell.asm):08299                  fcb   NUL,NUL,NUL
3CDE 19               (       gshell.asm):08300                  fcb   MID.DSK
3CDF 0C0601           (       gshell.asm):08301                  fcb   12,6,1
3CE2 0000             (       gshell.asm):08302                  fdb   $0000
3CE4 0106             (       gshell.asm):08303                  fdb   DISKITMS
                      (       gshell.asm):08304         
                      (       gshell.asm):08305         * VIEWDESC
                      (       gshell.asm):08306         
3CE6 56696577         (       gshell.asm):08307                  fcc   "View"
3CEA 0000000000000000 (       gshell.asm):08308                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3CF2 000000           (       gshell.asm):08309                  fcb   NUL,NUL,NUL
3CF5 18               (       gshell.asm):08310                  fcb   MID.VEW
3CF6 0D0301           (       gshell.asm):08311                  fcb   13,3,1
3CF9 0000             (       gshell.asm):08312                  fdb   $0000
3CFB 0241             (       gshell.asm):08313                  fdb   VIEWITMS
                      (       gshell.asm):08314         
                      (       gshell.asm):08315         * KDMDESC
                      (       gshell.asm):08316         
3CFD 41626F75742E2E   (       gshell.asm):08317                  fcc   "About.."
3D04 0000000000000000 (       gshell.asm):08318                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3D0C 1A               (       gshell.asm):08319                  fcb   MID.KDM
3D0D 090201           (       gshell.asm):08320                  fcb   9,2,1
3D10 0000             (       gshell.asm):08321                  fdb   $0000
3D12 0280             (       gshell.asm):08322                  fdb   KDMITMS
                      (       gshell.asm):08323         
                      (       gshell.asm):08324         * SHELLNAM
                      (       gshell.asm):08325         
3D14 7368656C6C       (       gshell.asm):08326                  fcc   "shell"
3D19 00               (       gshell.asm):08327                  fcb   NUL
                      (       gshell.asm):08328         
                      (       gshell.asm):08329         * LISTNAM
                      (       gshell.asm):08330         
3D1A 6C697374         (       gshell.asm):08331                  fcc   "list"
3D1E 00               (       gshell.asm):08332                  fcb   NUL
                      (       gshell.asm):08333         
                      (       gshell.asm):08334         * GCALCNAM
                      (       gshell.asm):08335         
3D1F 6763616C63       (       gshell.asm):08336                  fcc   "gcalc"
3D24 00               (       gshell.asm):08337                  fcb   NUL
                      (       gshell.asm):08338         
                      (       gshell.asm):08339         * GCLOCKNM
                      (       gshell.asm):08340         
3D25 67636C6F636B     (       gshell.asm):08341                  fcc   "gclock"
3D2B 00               (       gshell.asm):08342                  fcb   NUL
                      (       gshell.asm):08343         
                      (       gshell.asm):08344         * GCALNAM
                      (       gshell.asm):08345         
3D2C 6763616C         (       gshell.asm):08346                  fcc   "gcal"
3D30 00               (       gshell.asm):08347                  fcb   NUL
                      (       gshell.asm):08348         
                      (       gshell.asm):08349         * CONTROLNM
                      (       gshell.asm):08350         
3D31 636F6E74726F6C   (       gshell.asm):08351                  fcc   "control"
3D38 00               (       gshell.asm):08352                  fcb   NUL
                      (       gshell.asm):08353         
                      (       gshell.asm):08354         * GPRINTNM
                      (       gshell.asm):08355         
3D39 677072696E74     (       gshell.asm):08356                  fcc   "gprint"
3D3F 00               (       gshell.asm):08357                  fcb   NUL
                      (       gshell.asm):08358         
                      (       gshell.asm):08359         * GPORTNAM
                      (       gshell.asm):08360         
3D40 67706F7274       (       gshell.asm):08361                  fcc   "gport"
3D45 00               (       gshell.asm):08362                  fcb   NUL
                      (       gshell.asm):08363         
                      (       gshell.asm):08364         * HELPNAM
                      (       gshell.asm):08365         
3D46 68656C70         (       gshell.asm):08366                  fcc   "help"
3D4A 00               (       gshell.asm):08367                  fcb   NUL
                      (       gshell.asm):08368         
                      (       gshell.asm):08369         * COCPRNM
                      (       gshell.asm):08370         
3D4B 636F636F7072     (       gshell.asm):08371                  fcc   "cocopr"
3D51 00               (       gshell.asm):08372                  fcb   NUL
                      (       gshell.asm):08373         
                      (       gshell.asm):08374         * SCRLPTRS table of pointers was here
                      (       gshell.asm):08375         
                      (       gshell.asm):08376         * DBOXDESC
                      (       gshell.asm):08377         
3D52 0030000000380008 (       gshell.asm):08378                  fdb   48,0,56,8
3D5A 04               (       gshell.asm):08379                  fcb   IC.CLOSE
3D5B 00               (       gshell.asm):08380                  fcb   0
3D5C 0369             (       gshell.asm):08381                  fdb   DBARDESC
3D5E 0000             (       gshell.asm):08382                  fdb   $0000
                      (       gshell.asm):08383         
                      (       gshell.asm):08384         * DBARDESC
                      (       gshell.asm):08385         
3D60 003A000002580008 (       gshell.asm):08386                  fdb   58,0,600,8
3D68 08               (       gshell.asm):08387                  fcb   IC.DRBAR
3D69 00               (       gshell.asm):08388                  fcb   0
3D6A 0377             (       gshell.asm):08389                  fdb   QURYDESC
3D6C 0000             (       gshell.asm):08390                  fdb   $0000
                      (       gshell.asm):08391         
                      (       gshell.asm):08392         * QURYDESC
                      (       gshell.asm):08393         
3D6E 02580000026F0008 (       gshell.asm):08394                  fdb   600,0,623,8
3D76 0E               (       gshell.asm):08395                  fcb   IC.QUERY
3D77 00               (       gshell.asm):08396                  fcb   0
3D78 00000000         (       gshell.asm):08397                  fdb   $0000,$0000
                      (       gshell.asm):08398         
                      (       gshell.asm):08399         * TRSHDESC - moved down to make room for printer
3D7C 000800A0002000B8 (       gshell.asm):08400                  fdb   8,160,32,184 Was 8,144,32,168
3D84 09               (       gshell.asm):08401                  fcb   IC.TRASH
3D85 00               (       gshell.asm):08402                  fcb   0
3D86 00000000         (       gshell.asm):08403                  fdb   $0000,$0000
                      (       gshell.asm):08404         
                      (       gshell.asm):08405         * PRTRDESC - NEW
3D8A 0008008500200094 (       gshell.asm):08406                  fdb   8,133,32,148
3D92 0F               (       gshell.asm):08407                  fcb   IC.PRNTR
3D93 00               (       gshell.asm):08408                  fcb   0
3D94 00000000         (       gshell.asm):08409                  fdb   $0000,$0000
                      (       gshell.asm):08410         
                      (       gshell.asm):08411         * CALCDESC
                      (       gshell.asm):08412         
3D98 000A             (       gshell.asm):08413                  fdb   IC.GCALC
3D9A 00060014000C0001 (       gshell.asm):08414                  fdb   6,20,12,1
3DA2 00000000         (       gshell.asm):08415                  fdb   0,0
3DA6 0328             (       gshell.asm):08416                  fdb   GCALCNAM
3DA8 00000000         (       gshell.asm):08417                  fdb   $0000,$0000
3DAC 03B7             (       gshell.asm):08418                  fdb   CLOKDESC
                      (       gshell.asm):08419         
                      (       gshell.asm):08420         * CLOKDESC
                      (       gshell.asm):08421         
3DAE 000B             (       gshell.asm):08422                  fdb   IC.GCLOK
3DB0 00060014000A0001 (       gshell.asm):08423                  fdb   6,20,10,1
3DB8 00000000         (       gshell.asm):08424                  fdb   0,0
3DBC 032E             (       gshell.asm):08425                  fdb   GCLOCKNM
3DBE 00000000         (       gshell.asm):08426                  fdb   $0000,$0000
3DC2 03CD             (       gshell.asm):08427                  fdb   CALDESC
                      (       gshell.asm):08428         
                      (       gshell.asm):08429         * CALDESC
                      (       gshell.asm):08430         
3DC4 000C             (       gshell.asm):08431                  fdb   IC.GCAL
3DC6 0006002800190001 (       gshell.asm):08432                  fdb   6,40,25,1
3DCE 00000000         (       gshell.asm):08433                  fdb   0,0
3DD2 0335             (       gshell.asm):08434                  fdb   GCALNAM
3DD4 00000000         (       gshell.asm):08435                  fdb   $0000,$0000
3DD8 03E3             (       gshell.asm):08436                  fdb   SHELDESC
                      (       gshell.asm):08437         
                      (       gshell.asm):08438         * SHELDESC
                      (       gshell.asm):08439         
3DDA 000D             (       gshell.asm):08440                  fdb   IC.SHELL
3DDC 0006000A00050001 (       gshell.asm):08441                  fdb   6,10,5,1
3DE4 00000000         (       gshell.asm):08442                  fdb   0,0
3DE8 031D             (       gshell.asm):08443                  fdb   SHELLNAM
3DEA 00000000         (       gshell.asm):08444                  fdb   $0000,$0000
                      (       gshell.asm):08445         
                      (       gshell.asm):08446         * ENDLINK
                      (       gshell.asm):08447         
3DEE 0000             (       gshell.asm):08448                  fdb   $0000
                      (       gshell.asm):08449         
                      (       gshell.asm):08450         * NXTICONO
                      (       gshell.asm):08451         
3DF0 0014             (       gshell.asm):08452                  fdb   IC.XTRNL
                      (       gshell.asm):08453         
                      (       gshell.asm):08454         * PRESSMSG
                      (       gshell.asm):08455         
3DF2 507265737320616E (       gshell.asm):08456                  fcc   "Press any key"
     79206B6579
3DFF 00               (       gshell.asm):08457                  fcb   NUL
                      (       gshell.asm):08458         
                      (       gshell.asm):08459         * NEWNMSG
                      (       gshell.asm):08460         
3E00 4E6577206E616D65 (       gshell.asm):08461                  fcc   "New name:        "
     3A20202020202020
     20
3E11 00               (       gshell.asm):08462                  fcb   NUL
                      (       gshell.asm):08463         
                      (       gshell.asm):08464         * SLASHW
                      (       gshell.asm):08465         
3E12 2F77             (       gshell.asm):08466                  fcc   "/w"
3E14 00               (       gshell.asm):08467                  fcb   NUL
                      (       gshell.asm):08468         
                      (       gshell.asm):08469         * ALLOCP
                      (       gshell.asm):08470         
3E15 000000           (       gshell.asm):08471                  fcb   0,0,0
                      (       gshell.asm):08472         
3E18                  (       gshell.asm):08473         DTXCOUNT       
                      (       gshell.asm):08474         
3E18 0150FA           (       gshell.asm):08475                  emod  
     3E1B             (       gshell.asm):08476         MODSIZE  equ   *
                      (       gshell.asm):08477                  end   
