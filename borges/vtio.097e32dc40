                      (vtio_beta5yakback):00001         ********************************************************************
                      (vtio_beta5yakback):00002         * VTIO - Video Terminal I/O Driver for CoCo 3
                      (vtio_beta5yakback):00003         *
                      (vtio_beta5yakback):00004         * $Id$
                      (vtio_beta5yakback):00005         * Need to add SS.GIP2 as well (see notes in code below). May also want to add
                      (vtio_beta5yakback):00006         * a new SetStat call to allow changing a device descriptor between CoVDG and CoWin
                      (vtio_beta5yakback):00007         *   types (without needing XMODE)
                      (vtio_beta5yakback):00008         * NOTE:  CODE ISSUES FOUND!!
                      (vtio_beta5yakback):00009         * "Animate Palette?  This obviously isn't implemented yet"
                      (vtio_beta5yakback):00010         * Look at this code.  Why is this calling an entry point in
                      (vtio_beta5yakback):00011         * SNDDRV??? LCB note: Sound is usually driven by the same IRQ
                      (vtio_beta5yakback):00012         *   (60hz) as the keyboard/joystick scan, and they have to link
                      (vtio_beta5yakback):00013         *   together, so that may be why.
                      (vtio_beta5yakback):00014         *
                      (vtio_beta5yakback):00015         * Edt/Rev  YYYY/MM/DD  Modified by
                      (vtio_beta5yakback):00016         * Comment
                      (vtio_beta5yakback):00017         * ------------------------------------------------------------------
                      (vtio_beta5yakback):00018         *  16      1986/??/??
                      (vtio_beta5yakback):00019         * Original OS-9 L2 Tandy distribution.
                      (vtio_beta5yakback):00020         *
                      (vtio_beta5yakback):00021         *  26r3    1998/10/12
                      (vtio_beta5yakback):00022         * Added support for obtaining monitor type from the init module.
                      (vtio_beta5yakback):00023         *
                      (vtio_beta5yakback):00024         *  26r4    1998/10/23
                      (vtio_beta5yakback):00025         * Added support for obtaining key repeat info from the init module.
                      (vtio_beta5yakback):00026         *
                      (vtio_beta5yakback):00027         *  26r5    2002/07/24
                      (vtio_beta5yakback):00028         * Added support for obtaining mouse info from the init module.
                      (vtio_beta5yakback):00029         *
                      (vtio_beta5yakback):00030         *  27      2003/08/18  Boisy G. Pitre
                      (vtio_beta5yakback):00031         * Forward ported to NitrOS-9.
                      (vtio_beta5yakback):00032         *
                      (vtio_beta5yakback):00033         *          2003/11/16  Robert Gault
                      (vtio_beta5yakback):00034         * Corrected several lines for keyboard mouse.
                      (vtio_beta5yakback):00035         * Corrected several lines in SSMOUSE where MS.Side used incorrectly.
                      (vtio_beta5yakback):00036         *
                      (vtio_beta5yakback):00037         *          2003/12/02  Boisy G. Pitre
                      (vtio_beta5yakback):00038         * Keyboard mouse is now either global or local to window, depending
                      (vtio_beta5yakback):00039         * on whether GLOBALKEYMOUSE is defined.
                      (vtio_beta5yakback):00040         *
                      (vtio_beta5yakback):00041         *          2004/08/14  Boisy G. Pitre
                      (vtio_beta5yakback):00042         * Fixed a bug where the last deiniz of the last window device caused
                      (vtio_beta5yakback):00043         * an infinite loop.  The problem was that IOMan clears the static
                      (vtio_beta5yakback):00044         * storage of a device whose use count has reached zero (in the
                      (vtio_beta5yakback):00045         * case of a hard detach).  See Note below.
                      (vtio_beta5yakback):00046         *
                      (vtio_beta5yakback):00047         * Renamed to VTIO and reset edition to 1.
                      (vtio_beta5yakback):00048         *
                      (vtio_beta5yakback):00049         *   1      2006/03/04  Boisy G. Pitre
                      (vtio_beta5yakback):00050         * Added detection of CTRL-ALT-BREAK to invoke system debugger.
                      (vtio_beta5yakback):00051         * Renamed to VTIO and reset edition to 1.
                      (vtio_beta5yakback):00052         *
                      (vtio_beta5yakback):00053         *   2      2007/08/22  Boisy G. Pitre
                      (vtio_beta5yakback):00054         * Fixed bug where an error other than E$MNF when linking to CoWin would be ignored.
                      (vtio_beta5yakback):00055         * Now, if the error returned from linking CoWin is not E$MNF, we don't bother to look
                      (vtio_beta5yakback):00056         * for CoGrf... we just return immediately.
                      (vtio_beta5yakback):00057         *   3      2020/04/26  L. Curtis Boyle
                      (vtio_beta5yakback):00058         * Changed SS.GIP call (should be backwards compatible) to allow individual $FF settings
                      (vtio_beta5yakback):00059         *   (leave current setting alone) to work for all 4 parameters independently.
                      (vtio_beta5yakback):00060         
                      (vtio_beta5yakback):00061                  nam   VTIO
                      (vtio_beta5yakback):00062                  ttl   Video Terminal I/O Driver for CoCo 3
                      (vtio_beta5yakback):00063         
                      (vtio_beta5yakback):00064         * Disassembled 98/09/09 08:29:24 by Disasm v1.6 (C) 1988 by RML
                      (vtio_beta5yakback):00065         
                      (vtio_beta5yakback):00066                ifp1
                      (vtio_beta5yakback):00067                  use   /dd/defs/deffile
     0002             ( /dd/defs/deffile):00001         Level    set     2
     0000             ( /dd/defs/deffile):00002         CoGrf    set     0
     0000             ( /dd/defs/deffile):00003         MATCHBOX set     0
                      ( /dd/defs/deffile):00004         *H6309    set     0
     0000             ( /dd/defs/deffile):00005         H6309    set     0
                      ( /dd/defs/deffile):00006                  use   /dd/defs/os9.d
                      (   /dd/defs/os9.d):00001         ********************************************************************
                      (   /dd/defs/os9.d):00002         * os9.d - NitrOS-9 System Definitions
                      (   /dd/defs/os9.d):00003         *
                      (   /dd/defs/os9.d):00004         * $Id$
                      (   /dd/defs/os9.d):00005         *
                      (   /dd/defs/os9.d):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/os9.d):00007         * Comment
                      (   /dd/defs/os9.d):00008         * ------------------------------------------------------------------
                      (   /dd/defs/os9.d):00009         *          1985/08/29  KMZ
                      (   /dd/defs/os9.d):00010         * Fixed DT.SBF/NFM values to 3/4
                      (   /dd/defs/os9.d):00011         *
                      (   /dd/defs/os9.d):00012         *          1985/09/01  KMZ
                      (   /dd/defs/os9.d):00013         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (   /dd/defs/os9.d):00014         *
                      (   /dd/defs/os9.d):00015         *          1985/09/03  KMZ/Robert F. Doggett
                      (   /dd/defs/os9.d):00016         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (   /dd/defs/os9.d):00017         * 68000 compatability.
                      (   /dd/defs/os9.d):00018         *
                      (   /dd/defs/os9.d):00019         *          1986/04/15  Mark G. Hawkins
                      (   /dd/defs/os9.d):00020         * F$AlHRAM System call added for COCO.
                      (   /dd/defs/os9.d):00021         *
                      (   /dd/defs/os9.d):00022         *          1986/09/08  Mark G. Hawkins
                      (   /dd/defs/os9.d):00023         * F$Alarm for COCO Clock Module.
                      (   /dd/defs/os9.d):00024         *
                      (   /dd/defs/os9.d):00025         *          1986/09/17  Mark G. Hawkins
                      (   /dd/defs/os9.d):00026         * SS.Tone For COCO.
                      (   /dd/defs/os9.d):00027         *
                      (   /dd/defs/os9.d):00028         *          1986/09/23  Mark G. Hawkins
                      (   /dd/defs/os9.d):00029         * Added F$NMLink and F$NMLoad for COCO.
                      (   /dd/defs/os9.d):00030         *
                      (   /dd/defs/os9.d):00031         *          1986/09/30  Mark G. Hawkins
                      (   /dd/defs/os9.d):00032         * Added Reserved User $70 to $7f in sytem calls.
                      (   /dd/defs/os9.d):00033         *
                      (   /dd/defs/os9.d):00034         *          1986/09/30  Mark G. Hawkins
                      (   /dd/defs/os9.d):00035         * Created Color Computer 3 Version of OS9Defs.
                      (   /dd/defs/os9.d):00036         *
                      (   /dd/defs/os9.d):00037         *          1998/10/03  Boisy G. Pitre
                      (   /dd/defs/os9.d):00038         * Consoldated Level 1/Level 2 os9defs.
                      (   /dd/defs/os9.d):00039         *
                      (   /dd/defs/os9.d):00040         *          2002/04/04  Boisy G. Pitre
                      (   /dd/defs/os9.d):00041         * Consoldated Level 2/Level 2 V3 os9defs.
                      (   /dd/defs/os9.d):00042         *
                      (   /dd/defs/os9.d):00043         *          2002/04/30  Boisy G. Pitre
                      (   /dd/defs/os9.d):00044         * Added NitrOS-9 definitions.
                      (   /dd/defs/os9.d):00045         *
                      (   /dd/defs/os9.d):00046         *          2003/05/30  Boisy G. Pitre
                      (   /dd/defs/os9.d):00047         * Added WD1002 sys vars to Level One section.
                      (   /dd/defs/os9.d):00048         *
                      (   /dd/defs/os9.d):00049         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/os9.d):00050         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (   /dd/defs/os9.d):00051         * changed the sizes from 2 to 3 bytes.
                      (   /dd/defs/os9.d):00052         * DT.NFM is now the same for both Level One and Level Two.
                      (   /dd/defs/os9.d):00053         * Added DT.CDFM type for future CD-ROM file manager
                      (   /dd/defs/os9.d):00054         *
                      (   /dd/defs/os9.d):00055         *          2003/11/05  Robert Gault
                      (   /dd/defs/os9.d):00056         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (   /dd/defs/os9.d):00057         *
                      (   /dd/defs/os9.d):00058         *              2005/11/02  P.Harvey-Smith
                      (   /dd/defs/os9.d):00059         * Added definitions for boot areas on Dragon computers.
                      (   /dd/defs/os9.d):00060         *
                      (   /dd/defs/os9.d):00061         *              2006/03/03  Boisy G. Pitre
                      (   /dd/defs/os9.d):00062         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (   /dd/defs/os9.d):00063         *
                      (   /dd/defs/os9.d):00064         * Added I$ModDsc call (modify device descriptor in system memory) BN/LCB
                      (   /dd/defs/os9.d):00065         *          2019/10/30  Bill Nobel, from discussions with L. Curtis Boyle
                      (   /dd/defs/os9.d):00066                        NAM       os9.d
                      (   /dd/defs/os9.d):00067                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (   /dd/defs/os9.d):00068         
                      (   /dd/defs/os9.d):00069         * Common definitions
     0001             (   /dd/defs/os9.d):00070         true           EQU       1                   useful name
     0000             (   /dd/defs/os9.d):00071         false          EQU       0                   useful name
                      (   /dd/defs/os9.d):00072         
                      (   /dd/defs/os9.d):00073                        PAG       
                      (   /dd/defs/os9.d):00074         *****************************************
                      (   /dd/defs/os9.d):00075         * System Service Request Code Definitions
                      (   /dd/defs/os9.d):00076         *
                      (   /dd/defs/os9.d):00077                        ORG       0
0000                  (   /dd/defs/os9.d):00078         F$Link         RMB       1                   Link to Module
0001                  (   /dd/defs/os9.d):00079         F$Load         RMB       1                   Load Module from File
0002                  (   /dd/defs/os9.d):00080         F$UnLink       RMB       1                   Unlink Module
0003                  (   /dd/defs/os9.d):00081         F$Fork         RMB       1                   Start New Process
0004                  (   /dd/defs/os9.d):00082         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (   /dd/defs/os9.d):00083         F$Chain        RMB       1                   Chain Process to New Module
0006                  (   /dd/defs/os9.d):00084         F$Exit         RMB       1                   Terminate Process
0007                  (   /dd/defs/os9.d):00085         F$Mem          RMB       1                   Set Memory Size
0008                  (   /dd/defs/os9.d):00086         F$Send         RMB       1                   Send Signal to Process
0009                  (   /dd/defs/os9.d):00087         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (   /dd/defs/os9.d):00088         F$Sleep        RMB       1                   Suspend Process
000B                  (   /dd/defs/os9.d):00089         F$SSpd         RMB       1                   Suspend Process
000C                  (   /dd/defs/os9.d):00090         F$ID           RMB       1                   Return Process ID
000D                  (   /dd/defs/os9.d):00091         F$SPrior       RMB       1                   Set Process Priority
000E                  (   /dd/defs/os9.d):00092         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (   /dd/defs/os9.d):00093         F$PErr         RMB       1                   Print Error
0010                  (   /dd/defs/os9.d):00094         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (   /dd/defs/os9.d):00095         F$CmpNam       RMB       1                   Compare Two Names
0012                  (   /dd/defs/os9.d):00096         F$SchBit       RMB       1                   Search Bit Map
0013                  (   /dd/defs/os9.d):00097         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (   /dd/defs/os9.d):00098         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (   /dd/defs/os9.d):00099         F$Time         RMB       1                   Get Current Time
0016                  (   /dd/defs/os9.d):00100         F$STime        RMB       1                   Set Current Time
0017                  (   /dd/defs/os9.d):00101         F$CRC          RMB       1                   Generate CRC ($17)
                      (   /dd/defs/os9.d):00102         
                      (   /dd/defs/os9.d):00103         
                      (   /dd/defs/os9.d):00104         * NitrOS-9 Level 2 system calls
0018                  (   /dd/defs/os9.d):00105         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (   /dd/defs/os9.d):00106         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (   /dd/defs/os9.d):00107         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (   /dd/defs/os9.d):00108         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (   /dd/defs/os9.d):00109         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (   /dd/defs/os9.d):00110         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (   /dd/defs/os9.d):00111         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (   /dd/defs/os9.d):00112                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (   /dd/defs/os9.d):00113         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (   /dd/defs/os9.d):00114         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (   /dd/defs/os9.d):00115         
                      (   /dd/defs/os9.d):00116         
                      (   /dd/defs/os9.d):00117         * NitrOS-9 Level 1 system call padding
                      (   /dd/defs/os9.d):00118         
                      (   /dd/defs/os9.d):00119         
0023                  (   /dd/defs/os9.d):00120         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (   /dd/defs/os9.d):00121         
                      (   /dd/defs/os9.d):00122         
                      (   /dd/defs/os9.d):00123                        ORG       $25
0025                  (   /dd/defs/os9.d):00124         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (   /dd/defs/os9.d):00125         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (   /dd/defs/os9.d):00126         
                      (   /dd/defs/os9.d):00127         
                      (   /dd/defs/os9.d):00128                        ORG       $27                 Beginning of System Reserved Calls
                      (   /dd/defs/os9.d):00129         * NitrOS-9 common system calls
0027                  (   /dd/defs/os9.d):00130         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (   /dd/defs/os9.d):00131         F$SRqMem       RMB       1                   System Memory Request
0029                  (   /dd/defs/os9.d):00132         F$SRtMem       RMB       1                   System Memory Return
002A                  (   /dd/defs/os9.d):00133         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (   /dd/defs/os9.d):00134         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (   /dd/defs/os9.d):00135         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (   /dd/defs/os9.d):00136         F$NProc        RMB       1                   Start Next Process
002E                  (   /dd/defs/os9.d):00137         F$VModul       RMB       1                   Validate Module
002F                  (   /dd/defs/os9.d):00138         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (   /dd/defs/os9.d):00139         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (   /dd/defs/os9.d):00140         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (   /dd/defs/os9.d):00141         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (   /dd/defs/os9.d):00142         F$IODel        RMB       1                   Delete I/O Module
                      (   /dd/defs/os9.d):00143         
                      (   /dd/defs/os9.d):00144         
0034                  (   /dd/defs/os9.d):00145         F$SLink        RMB       1                   System Link
0035                  (   /dd/defs/os9.d):00146         F$Boot         RMB       1                   Bootstrap System
0036                  (   /dd/defs/os9.d):00147         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (   /dd/defs/os9.d):00148         F$GProcP       RMB       1                   Get Process ptr
0038                  (   /dd/defs/os9.d):00149         F$Move         RMB       1                   Move Data (low bound first)
0039                  (   /dd/defs/os9.d):00150         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (   /dd/defs/os9.d):00151         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (   /dd/defs/os9.d):00152         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (   /dd/defs/os9.d):00153         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (   /dd/defs/os9.d):00154         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (   /dd/defs/os9.d):00155         F$FreeHB       RMB       1                   Get Free High Block
003F                  (   /dd/defs/os9.d):00156         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (   /dd/defs/os9.d):00157         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (   /dd/defs/os9.d):00158         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (   /dd/defs/os9.d):00159         F$ResTsk       RMB       1                   Reserve Task number
0043                  (   /dd/defs/os9.d):00160         F$RelTsk       RMB       1                   Release Task number
0044                  (   /dd/defs/os9.d):00161         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (   /dd/defs/os9.d):00162         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (   /dd/defs/os9.d):00163         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (   /dd/defs/os9.d):00164         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (   /dd/defs/os9.d):00165         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (   /dd/defs/os9.d):00166         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (   /dd/defs/os9.d):00167         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (   /dd/defs/os9.d):00168         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (   /dd/defs/os9.d):00169         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (   /dd/defs/os9.d):00170         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (   /dd/defs/os9.d):00171         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (   /dd/defs/os9.d):00172         F$MapBlk       RMB       1                   Map Specific Block
0050                  (   /dd/defs/os9.d):00173         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (   /dd/defs/os9.d):00174         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (   /dd/defs/os9.d):00175         F$GCMDir       RMB       1                   Pack module directory
0053                  (   /dd/defs/os9.d):00176         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (   /dd/defs/os9.d):00177         
                      (   /dd/defs/os9.d):00178         * Alan DeKok additions
0054                  (   /dd/defs/os9.d):00179         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (   /dd/defs/os9.d):00180         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (   /dd/defs/os9.d):00181         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (   /dd/defs/os9.d):00182         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (   /dd/defs/os9.d):00183         
                      (   /dd/defs/os9.d):00184         
                      (   /dd/defs/os9.d):00185         *
                      (   /dd/defs/os9.d):00186         * Numbers $70 through $7F are reserved for user definitions
                      (   /dd/defs/os9.d):00187         *
                      (   /dd/defs/os9.d):00188                        ORG       $70
                      (   /dd/defs/os9.d):00189         
                      (   /dd/defs/os9.d):00190         
                      (   /dd/defs/os9.d):00191         
                      (   /dd/defs/os9.d):00192         
0070                  (   /dd/defs/os9.d):00193         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (   /dd/defs/os9.d):00194         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (   /dd/defs/os9.d):00195         
0072                  (   /dd/defs/os9.d):00196                        RMB       $80-.               Reserved for user definitions
                      (   /dd/defs/os9.d):00197         
                      (   /dd/defs/os9.d):00198                        PAG       
                      (   /dd/defs/os9.d):00199         **************************************
                      (   /dd/defs/os9.d):00200         * I/O Service Request Code Definitions
                      (   /dd/defs/os9.d):00201         *
                      (   /dd/defs/os9.d):00202                        ORG       $80
0080                  (   /dd/defs/os9.d):00203         I$Attach       RMB       1                   Attach I/O Device
0081                  (   /dd/defs/os9.d):00204         I$Detach       RMB       1                   Detach I/O Device
0082                  (   /dd/defs/os9.d):00205         I$Dup          RMB       1                   Duplicate Path
0083                  (   /dd/defs/os9.d):00206         I$Create       RMB       1                   Create New File
0084                  (   /dd/defs/os9.d):00207         I$Open         RMB       1                   Open Existing File
0085                  (   /dd/defs/os9.d):00208         I$MakDir       RMB       1                   Make Directory File
0086                  (   /dd/defs/os9.d):00209         I$ChgDir       RMB       1                   Change Default Directory
0087                  (   /dd/defs/os9.d):00210         I$Delete       RMB       1                   Delete File
0088                  (   /dd/defs/os9.d):00211         I$Seek         RMB       1                   Change Current Position
0089                  (   /dd/defs/os9.d):00212         I$Read         RMB       1                   Read Data
008A                  (   /dd/defs/os9.d):00213         I$Write        RMB       1                   Write Data
008B                  (   /dd/defs/os9.d):00214         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (   /dd/defs/os9.d):00215         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (   /dd/defs/os9.d):00216         I$GetStt       RMB       1                   Get Path Status
008E                  (   /dd/defs/os9.d):00217         I$SetStt       RMB       1                   Set Path Status
008F                  (   /dd/defs/os9.d):00218         I$Close        RMB       1                   Close Path
0090                  (   /dd/defs/os9.d):00219         I$DeletX       RMB       1                   Delete from current exec dir
0091                  (   /dd/defs/os9.d):00220         I$ModDsc       RMB       1                   Modify SCF/RBF Descriptor in Memory
                      (   /dd/defs/os9.d):00221         
                      (   /dd/defs/os9.d):00222         *******************
                      (   /dd/defs/os9.d):00223         * File Access Modes
                      (   /dd/defs/os9.d):00224         *
     0001             (   /dd/defs/os9.d):00225         READ.          EQU       %00000001
     0002             (   /dd/defs/os9.d):00226         WRITE.         EQU       %00000010
     0003             (   /dd/defs/os9.d):00227         UPDAT.         EQU       READ.+WRITE.
     0004             (   /dd/defs/os9.d):00228         EXEC.          EQU       %00000100
     0008             (   /dd/defs/os9.d):00229         PREAD.         EQU       %00001000
     0010             (   /dd/defs/os9.d):00230         PWRIT.         EQU       %00010000
     0020             (   /dd/defs/os9.d):00231         PEXEC.         EQU       %00100000
     0040             (   /dd/defs/os9.d):00232         SHARE.         EQU       %01000000
     0080             (   /dd/defs/os9.d):00233         DIR.           EQU       %10000000
     0020             (   /dd/defs/os9.d):00234         ISIZ.          EQU       %00100000
                      (   /dd/defs/os9.d):00235         
                      (   /dd/defs/os9.d):00236         **************
                      (   /dd/defs/os9.d):00237         * Signal Codes
                      (   /dd/defs/os9.d):00238         *
                      (   /dd/defs/os9.d):00239                        ORG       0
0000                  (   /dd/defs/os9.d):00240         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (   /dd/defs/os9.d):00241         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (   /dd/defs/os9.d):00242         S$Abort        RMB       1                   Keyboard Abort
0003                  (   /dd/defs/os9.d):00243         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (   /dd/defs/os9.d):00244         S$Window       RMB       1                   Window Change
     0004             (   /dd/defs/os9.d):00245         S$HUP          EQU       S$Window            Hang Up
0005                  (   /dd/defs/os9.d):00246         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (   /dd/defs/os9.d):00247         
                      (   /dd/defs/os9.d):00248                        PAG       
                      (   /dd/defs/os9.d):00249         **********************************
                      (   /dd/defs/os9.d):00250         * Status Codes for GetStat/GetStat
                      (   /dd/defs/os9.d):00251         *
                      (   /dd/defs/os9.d):00252                        ORG       0
0000                  (   /dd/defs/os9.d):00253         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (   /dd/defs/os9.d):00254         SS.Ready       RMB       1                   Check for Device Ready
0002                  (   /dd/defs/os9.d):00255         SS.Size        RMB       1                   Read/Write File Size
0003                  (   /dd/defs/os9.d):00256         SS.Reset       RMB       1                   Device Restore
0004                  (   /dd/defs/os9.d):00257         SS.WTrk        RMB       1                   Device Write Track
0005                  (   /dd/defs/os9.d):00258         SS.Pos         RMB       1                   Get File Current Position
0006                  (   /dd/defs/os9.d):00259         SS.EOF         RMB       1                   Test for End of File
0007                  (   /dd/defs/os9.d):00260         SS.Link        RMB       1                   Link to Status routines
0008                  (   /dd/defs/os9.d):00261         SS.ULink       RMB       1                   Unlink Status routines
0009                  (   /dd/defs/os9.d):00262         SS.Feed        RMB       1                   Issue form feed
000A                  (   /dd/defs/os9.d):00263         SS.Frz         RMB       1                   Freeze DD. information
000B                  (   /dd/defs/os9.d):00264         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (   /dd/defs/os9.d):00265         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (   /dd/defs/os9.d):00266         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (   /dd/defs/os9.d):00267         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (   /dd/defs/os9.d):00268         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (   /dd/defs/os9.d):00269         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (   /dd/defs/os9.d):00270         SS.Lock        RMB       1                   Lock/Release record
0012                  (   /dd/defs/os9.d):00271         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (   /dd/defs/os9.d):00272         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (   /dd/defs/os9.d):00273         SS.BlkRd       RMB       1                   Block Read
0015                  (   /dd/defs/os9.d):00274         SS.BlkWr       RMB       1                   Block Write
0016                  (   /dd/defs/os9.d):00275         SS.Reten       RMB       1                   Retension cycle
0017                  (   /dd/defs/os9.d):00276         SS.WFM         RMB       1                   Write File Mark
0018                  (   /dd/defs/os9.d):00277         SS.RFM         RMB       1                   Read past File Mark
0019                  (   /dd/defs/os9.d):00278         SS.ELog        RMB       1                   Read Error Log
001A                  (   /dd/defs/os9.d):00279         SS.SSig        RMB       1                   Send signal on data ready
001B                  (   /dd/defs/os9.d):00280         SS.Relea       RMB       1                   Release device
001C                  (   /dd/defs/os9.d):00281         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (   /dd/defs/os9.d):00282         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (   /dd/defs/os9.d):00283         SS.Break       RMB       1                   Send break signal out acia
001E                  (   /dd/defs/os9.d):00284         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (   /dd/defs/os9.d):00285                        RMB       1                   Reserved
     0020             (   /dd/defs/os9.d):00286         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (   /dd/defs/os9.d):00287         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (   /dd/defs/os9.d):00288                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (   /dd/defs/os9.d):00289         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (   /dd/defs/os9.d):00290         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (   /dd/defs/os9.d):00291         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (   /dd/defs/os9.d):00292         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (   /dd/defs/os9.d):00293         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (   /dd/defs/os9.d):00294         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (   /dd/defs/os9.d):00295         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (   /dd/defs/os9.d):00296         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (   /dd/defs/os9.d):00297         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (   /dd/defs/os9.d):00298         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (   /dd/defs/os9.d):00299         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (   /dd/defs/os9.d):00300         
                      (   /dd/defs/os9.d):00301         * System Specific and User defined codes above $80
                      (   /dd/defs/os9.d):00302                        ORG       $80
0080                  (   /dd/defs/os9.d):00303         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (   /dd/defs/os9.d):00304         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (   /dd/defs/os9.d):00305         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (   /dd/defs/os9.d):00306         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (   /dd/defs/os9.d):00307         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (   /dd/defs/os9.d):00308         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (   /dd/defs/os9.d):00309         
                      (   /dd/defs/os9.d):00310         *               IFGT      Level-1
                      (   /dd/defs/os9.d):00311         * Level 2 Windowing
0086                  (   /dd/defs/os9.d):00312         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (   /dd/defs/os9.d):00313         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (   /dd/defs/os9.d):00314         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (   /dd/defs/os9.d):00315         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (   /dd/defs/os9.d):00316         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (   /dd/defs/os9.d):00317         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (   /dd/defs/os9.d):00318         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (   /dd/defs/os9.d):00319         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (   /dd/defs/os9.d):00320         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (   /dd/defs/os9.d):00321         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (   /dd/defs/os9.d):00322                        RMB       1                   Reserved
0091                  (   /dd/defs/os9.d):00323         SS.Palet       RMB       1                   Return palette information
0092                  (   /dd/defs/os9.d):00324         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (   /dd/defs/os9.d):00325         SS.ScTyp       RMB       1                   Get screen type information
0094                  (   /dd/defs/os9.d):00326         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (   /dd/defs/os9.d):00327         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (   /dd/defs/os9.d):00328         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (   /dd/defs/os9.d):00329         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (   /dd/defs/os9.d):00330         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (   /dd/defs/os9.d):00331         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (   /dd/defs/os9.d):00332         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (   /dd/defs/os9.d):00333         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (   /dd/defs/os9.d):00334         
                      (   /dd/defs/os9.d):00335         * sc6551 defined
     0099             (   /dd/defs/os9.d):00336         SS.CDSta       EQU       SS.GIP2
     009A             (   /dd/defs/os9.d):00337         SS.CDSig       EQU       SS.AnPal
     009B             (   /dd/defs/os9.d):00338         SS.CDRel       EQU       SS.FndBf
                      (   /dd/defs/os9.d):00339         * These are wide open in Level 1
                      (   /dd/defs/os9.d):00340         
                      (   /dd/defs/os9.d):00341         * sc6551 defined
                      (   /dd/defs/os9.d):00342         
                      (   /dd/defs/os9.d):00343                        ORG       $A0
                      (   /dd/defs/os9.d):00344         *
                      (   /dd/defs/os9.d):00345         * New Default SCF input buffer Set status call
00A0                  (   /dd/defs/os9.d):00346         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (   /dd/defs/os9.d):00347         SS.Hist        RMB       1                   Enable command-line history easily
                      (   /dd/defs/os9.d):00348         
                      (   /dd/defs/os9.d):00349         
                      (   /dd/defs/os9.d):00350                        ORG       $B0
                      (   /dd/defs/os9.d):00351         *
                      (   /dd/defs/os9.d):00352         * New WDDisk get/set status calls
00B0                  (   /dd/defs/os9.d):00353         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (   /dd/defs/os9.d):00354         
                      (   /dd/defs/os9.d):00355         *
                      (   /dd/defs/os9.d):00356         
                      (   /dd/defs/os9.d):00357         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (   /dd/defs/os9.d):00358         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (   /dd/defs/os9.d):00359         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (   /dd/defs/os9.d):00360         
     0081             (   /dd/defs/os9.d):00361         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (   /dd/defs/os9.d):00362         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (   /dd/defs/os9.d):00363         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (   /dd/defs/os9.d):00364         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (   /dd/defs/os9.d):00365         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (   /dd/defs/os9.d):00366         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (   /dd/defs/os9.d):00367         
                      (   /dd/defs/os9.d):00368         * SDisk 3 Definition Equates
     0080             (   /dd/defs/os9.d):00369         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (   /dd/defs/os9.d):00370         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (   /dd/defs/os9.d):00371         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (   /dd/defs/os9.d):00372         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (   /dd/defs/os9.d):00373         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (   /dd/defs/os9.d):00374         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (   /dd/defs/os9.d):00375         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (   /dd/defs/os9.d):00376         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (   /dd/defs/os9.d):00377         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return ($86)
                      (   /dd/defs/os9.d):00378         
                      (   /dd/defs/os9.d):00379         
                      (   /dd/defs/os9.d):00380                        TTL       Direct Page Definitions
                      (   /dd/defs/os9.d):00381                        PAG       
                      (   /dd/defs/os9.d):00382         
                      (   /dd/defs/os9.d):00383         **********************************
                      (   /dd/defs/os9.d):00384         * Direct Page Variable Definitions
                      (   /dd/defs/os9.d):00385         *
                      (   /dd/defs/os9.d):00386                        ORG       $00
0000                  (   /dd/defs/os9.d):00387         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (   /dd/defs/os9.d):00388         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (   /dd/defs/os9.d):00389         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (   /dd/defs/os9.d):00390                        RMB       5
0009                  (   /dd/defs/os9.d):00391         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (   /dd/defs/os9.d):00392         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (   /dd/defs/os9.d):00393         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (   /dd/defs/os9.d):00394         D.DWStat       RMB       2                   DriveWire statics page
0010                  (   /dd/defs/os9.d):00395         D.DWSrvID      RMB       1                   DriveWire server ID
                      (   /dd/defs/os9.d):00396         
                      (   /dd/defs/os9.d):00397                        ORG       $20
                      (   /dd/defs/os9.d):00398         
                      (   /dd/defs/os9.d):00399         
                      (   /dd/defs/os9.d):00400         * Level 1 DP vars
                      (   /dd/defs/os9.d):00401         
                      (   /dd/defs/os9.d):00402         *D.XSWI3        RMB       3
                      (   /dd/defs/os9.d):00403         *D.XSWI2        RMB       3
                      (   /dd/defs/os9.d):00404         *D.XFIRQ        RMB       3
                      (   /dd/defs/os9.d):00405         *D.XIRQ         RMB       3
                      (   /dd/defs/os9.d):00406         *D.XSWI         RMB       3
                      (   /dd/defs/os9.d):00407         *D.XNMI         RMB       3
                      (   /dd/defs/os9.d):00408         
                      (   /dd/defs/os9.d):00409         
                      (   /dd/defs/os9.d):00410         * Table Sizes
                      (   /dd/defs/os9.d):00411         
                      (   /dd/defs/os9.d):00412         
                      (   /dd/defs/os9.d):00413         * Level 2 DP vars
0020                  (   /dd/defs/os9.d):00414         D.Tasks        RMB       2                   Task User Table
0022                  (   /dd/defs/os9.d):00415         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (   /dd/defs/os9.d):00416         D.Init         RMB       2                   Initialization Module ptr
0026                  (   /dd/defs/os9.d):00417         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (   /dd/defs/os9.d):00418         D.Time         EQU       .                   System Time
0028                  (   /dd/defs/os9.d):00419         D.Year         RMB       1
0029                  (   /dd/defs/os9.d):00420         D.Month        RMB       1
002A                  (   /dd/defs/os9.d):00421         D.Day          RMB       1
002B                  (   /dd/defs/os9.d):00422         D.Hour         RMB       1
002C                  (   /dd/defs/os9.d):00423         D.Min          RMB       1
002D                  (   /dd/defs/os9.d):00424         D.Sec          RMB       1
002E                  (   /dd/defs/os9.d):00425         D.Tick         RMB       1
002F                  (   /dd/defs/os9.d):00426         D.Slice        RMB       1                   current slice remaining
0030                  (   /dd/defs/os9.d):00427         D.TSlice       RMB       1                   Ticks per Slice
0031                  (   /dd/defs/os9.d):00428         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (   /dd/defs/os9.d):00429         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (   /dd/defs/os9.d):00430         D.ErrCod       RMB       1                   Reset Error Code
0034                  (   /dd/defs/os9.d):00431         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (   /dd/defs/os9.d):00432         D.TkCnt        RMB       1                   Tick Counter
0036                  (   /dd/defs/os9.d):00433         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (   /dd/defs/os9.d):00434         D.BtSz         RMB       2                   Size of Boot
                      (   /dd/defs/os9.d):00435         
003A                  (   /dd/defs/os9.d):00436                        RMB       1                   Currently unused in NitrOS-9/6809
                      (   /dd/defs/os9.d):00437         
003B                  (   /dd/defs/os9.d):00438         D.CRC          RMB       1                   CRC checking mode flag
                      (   /dd/defs/os9.d):00439         
003C                  (   /dd/defs/os9.d):00440         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (   /dd/defs/os9.d):00441         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (   /dd/defs/os9.d):00442         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (   /dd/defs/os9.d):00443         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (   /dd/defs/os9.d):00444         
                      (   /dd/defs/os9.d):00445                        ORG       $40
0040                  (   /dd/defs/os9.d):00446         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (   /dd/defs/os9.d):00447         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (   /dd/defs/os9.d):00448         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (   /dd/defs/os9.d):00449         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (   /dd/defs/os9.d):00450         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (   /dd/defs/os9.d):00451         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (   /dd/defs/os9.d):00452         D.Proc         RMB       2                   Current Process ptr
0052                  (   /dd/defs/os9.d):00453         D.AProcQ       RMB       2                   Active Process Queue
0054                  (   /dd/defs/os9.d):00454         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (   /dd/defs/os9.d):00455         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (   /dd/defs/os9.d):00456         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (   /dd/defs/os9.d):00457         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (   /dd/defs/os9.d):00458         D.CldRes       RMB       2                   Cold Restart vector
005E                  (   /dd/defs/os9.d):00459         D.BtBug        RMB       3                   Boot debug information
0061                  (   /dd/defs/os9.d):00460         D.Pipe         RMB       2
                      (   /dd/defs/os9.d):00461         
                      (   /dd/defs/os9.d):00462                        ORG       $6B
006B                  (   /dd/defs/os9.d):00463         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (   /dd/defs/os9.d):00464         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (   /dd/defs/os9.d):00465         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (   /dd/defs/os9.d):00466         
                      (   /dd/defs/os9.d):00467                        ORG       $80
0080                  (   /dd/defs/os9.d):00468         D.DevTbl       RMB       2                   I/O Device Table
0082                  (   /dd/defs/os9.d):00469         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (   /dd/defs/os9.d):00470                        RMB       4                   reserved
0088                  (   /dd/defs/os9.d):00471         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (   /dd/defs/os9.d):00472         D.DMAReq       RMB       1                   DMA Request flag
                      (   /dd/defs/os9.d):00473         
                      (   /dd/defs/os9.d):00474         ********
                      (   /dd/defs/os9.d):00475         * CoCo 3 STUFF COMES NEXT
                      (   /dd/defs/os9.d):00476         * This area is used for the CoCo Hardware Registers
                      (   /dd/defs/os9.d):00477         *
                      (   /dd/defs/os9.d):00478                        ORG       $90
0090                  (   /dd/defs/os9.d):00479         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (   /dd/defs/os9.d):00480         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (   /dd/defs/os9.d):00481         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (   /dd/defs/os9.d):00482         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (   /dd/defs/os9.d):00483         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (   /dd/defs/os9.d):00484         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (   /dd/defs/os9.d):00485         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (   /dd/defs/os9.d):00486         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (   /dd/defs/os9.d):00487         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (   /dd/defs/os9.d):00488         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (   /dd/defs/os9.d):00489         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (   /dd/defs/os9.d):00490         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (   /dd/defs/os9.d):00491         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (   /dd/defs/os9.d):00492         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (   /dd/defs/os9.d):00493         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (   /dd/defs/os9.d):00494         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (   /dd/defs/os9.d):00495         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (   /dd/defs/os9.d):00496         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (   /dd/defs/os9.d):00497         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (   /dd/defs/os9.d):00498         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (   /dd/defs/os9.d):00499         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (   /dd/defs/os9.d):00500         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (   /dd/defs/os9.d):00501         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (   /dd/defs/os9.d):00502         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (   /dd/defs/os9.d):00503         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (   /dd/defs/os9.d):00504         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (   /dd/defs/os9.d):00505         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (   /dd/defs/os9.d):00506         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (   /dd/defs/os9.d):00507         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (   /dd/defs/os9.d):00508         D.Clock2       RMB       2                   CC Clock2 entry address
                      (   /dd/defs/os9.d):00509                        ORG       $C0
00C0                  (   /dd/defs/os9.d):00510         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (   /dd/defs/os9.d):00511         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (   /dd/defs/os9.d):00512         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (   /dd/defs/os9.d):00513         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (   /dd/defs/os9.d):00514         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (   /dd/defs/os9.d):00515         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (   /dd/defs/os9.d):00516         D.SysStk       RMB       2                   System stack
00CE                  (   /dd/defs/os9.d):00517         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (   /dd/defs/os9.d):00518         D.SysTsk       RMB       1                   System Task number
                      (   /dd/defs/os9.d):00519                        ORG       $E0
00E0                  (   /dd/defs/os9.d):00520         D.Clock        RMB       2
00E2                  (   /dd/defs/os9.d):00521         D.XSWI3        RMB       2
00E4                  (   /dd/defs/os9.d):00522         D.XSWI2        RMB       2
00E6                  (   /dd/defs/os9.d):00523         D.XFIRQ        RMB       2
00E8                  (   /dd/defs/os9.d):00524         D.XIRQ         RMB       2
00EA                  (   /dd/defs/os9.d):00525         D.XSWI         RMB       2
00EC                  (   /dd/defs/os9.d):00526         D.XNMI         RMB       2
00EE                  (   /dd/defs/os9.d):00527         D.ErrRst       RMB       2
00F0                  (   /dd/defs/os9.d):00528         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (   /dd/defs/os9.d):00529         D.SWI3         RMB       2
00F4                  (   /dd/defs/os9.d):00530         D.SWI2         RMB       2
00F6                  (   /dd/defs/os9.d):00531         D.FIRQ         RMB       2
00F8                  (   /dd/defs/os9.d):00532         D.IRQ          RMB       2
00FA                  (   /dd/defs/os9.d):00533         D.SWI          RMB       2
00FC                  (   /dd/defs/os9.d):00534         D.NMI          RMB       2
                      (   /dd/defs/os9.d):00535         
                      (   /dd/defs/os9.d):00536         *************************
                      (   /dd/defs/os9.d):00537         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (   /dd/defs/os9.d):00538         * and for bytes in the system memory map at D.SysMem.
                      (   /dd/defs/os9.d):00539         * A value of 0 indicates an unused/unassigned block.
                      (   /dd/defs/os9.d):00540         * In the code, block assignment often involves incrementing a value
                      (   /dd/defs/os9.d):00541         * from 0 to 1 rather than explict use of RAMinUse.
                      (   /dd/defs/os9.d):00542         *
     0080             (   /dd/defs/os9.d):00543         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (   /dd/defs/os9.d):00544         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (   /dd/defs/os9.d):00545         ModBlock       EQU       %00000010           Module in Block
     0001             (   /dd/defs/os9.d):00546         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (   /dd/defs/os9.d):00547         *
                      (   /dd/defs/os9.d):00548         * Service Dispatch Table special entries
                      (   /dd/defs/os9.d):00549         *
     00FE             (   /dd/defs/os9.d):00550         IOEntry        EQU       254
                      (   /dd/defs/os9.d):00551         
                      (   /dd/defs/os9.d):00552         
                      (   /dd/defs/os9.d):00553                        TTL       Structure Formats
                      (   /dd/defs/os9.d):00554                        PAG       
                      (   /dd/defs/os9.d):00555         ************************************
                      (   /dd/defs/os9.d):00556         * Module Directory Entry Definitions
                      (   /dd/defs/os9.d):00557         *
                      (   /dd/defs/os9.d):00558                        ORG       0
0000                  (   /dd/defs/os9.d):00559         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (   /dd/defs/os9.d):00560         MD$MBSiz       RMB       2                   Memory Block size
0004                  (   /dd/defs/os9.d):00561         MD$MPtr        RMB       2                   Module ptr
0006                  (   /dd/defs/os9.d):00562         MD$Link        RMB       2                   Module Link count
     0008             (   /dd/defs/os9.d):00563         MD$ESize       EQU       .                   Module Directory Entry size
                      (   /dd/defs/os9.d):00564         
                      (   /dd/defs/os9.d):00565         ************************************
                      (   /dd/defs/os9.d):00566         * Module Definitions
                      (   /dd/defs/os9.d):00567         *
                      (   /dd/defs/os9.d):00568         * Universal Module Offsets
                      (   /dd/defs/os9.d):00569         *
                      (   /dd/defs/os9.d):00570                        ORG       0
0000                  (   /dd/defs/os9.d):00571         M$ID           RMB       2                   ID Code
0002                  (   /dd/defs/os9.d):00572         M$Size         RMB       2                   Module Size
0004                  (   /dd/defs/os9.d):00573         M$Name         RMB       2                   Module Name
0006                  (   /dd/defs/os9.d):00574         M$Type         RMB       1                   Type / Language
0007                  (   /dd/defs/os9.d):00575         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (   /dd/defs/os9.d):00576         M$Parity       RMB       1                   Header Parity
     0009             (   /dd/defs/os9.d):00577         M$IDSize       EQU       .                   Module ID Size
                      (   /dd/defs/os9.d):00578         *
                      (   /dd/defs/os9.d):00579         * Type-Dependent Module Offsets
                      (   /dd/defs/os9.d):00580         *
                      (   /dd/defs/os9.d):00581         * System, File Manager, Device Driver, Program Module
                      (   /dd/defs/os9.d):00582         *
0009                  (   /dd/defs/os9.d):00583         M$Exec         RMB       2                   Execution Entry Offset
                      (   /dd/defs/os9.d):00584         *
                      (   /dd/defs/os9.d):00585         * Device Driver, Program Module
                      (   /dd/defs/os9.d):00586         *
000B                  (   /dd/defs/os9.d):00587         M$Mem          RMB       2                   Stack Requirement
                      (   /dd/defs/os9.d):00588         *
                      (   /dd/defs/os9.d):00589         * Device Driver, Device Descriptor Module
                      (   /dd/defs/os9.d):00590         *
000D                  (   /dd/defs/os9.d):00591         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (   /dd/defs/os9.d):00592         *
                      (   /dd/defs/os9.d):00593         * Device Descriptor Module
                      (   /dd/defs/os9.d):00594         *
                      (   /dd/defs/os9.d):00595                        ORG       M$IDSize
0009                  (   /dd/defs/os9.d):00596         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (   /dd/defs/os9.d):00597         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (   /dd/defs/os9.d):00598                        RMB       1                   M$Mode (defined above)
000E                  (   /dd/defs/os9.d):00599         M$Port         RMB       3                   Port Address
0011                  (   /dd/defs/os9.d):00600         M$Opt          RMB       1                   Device Default Options
0012                  (   /dd/defs/os9.d):00601         M$DTyp         RMB       1                   Device Type
     0012             (   /dd/defs/os9.d):00602         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (   /dd/defs/os9.d):00603         *
                      (   /dd/defs/os9.d):00604         * Configuration Module Entry Offsets
                      (   /dd/defs/os9.d):00605         *
                      (   /dd/defs/os9.d):00606                        ORG       M$IDSize
0009                  (   /dd/defs/os9.d):00607         MaxMem         RMB       3                   Maximum Free Memory
000C                  (   /dd/defs/os9.d):00608         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (   /dd/defs/os9.d):00609         DevCnt         RMB       1                   Entries in Device Table
000E                  (   /dd/defs/os9.d):00610         InitStr        RMB       2                   Initial Module Name
0010                  (   /dd/defs/os9.d):00611         SysStr         RMB       2                   System Device Name
0012                  (   /dd/defs/os9.d):00612         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (   /dd/defs/os9.d):00613         BootStr        RMB       2                   Bootstrap Module name
0016                  (   /dd/defs/os9.d):00614         ProtFlag       RMB       1                   Write protect enable flag
                      (   /dd/defs/os9.d):00615         
0017                  (   /dd/defs/os9.d):00616         OSLevel        RMB       1                   OS level
0018                  (   /dd/defs/os9.d):00617         OSVer          RMB       1                   OS version
0019                  (   /dd/defs/os9.d):00618         OSMajor        RMB       1                   OS major
001A                  (   /dd/defs/os9.d):00619         OSMinor        RMB       1                   OS minor
001B                  (   /dd/defs/os9.d):00620         Feature1       RMB       1                   feature byte 1
001C                  (   /dd/defs/os9.d):00621         Feature2       RMB       1                   feature byte 2
001D                  (   /dd/defs/os9.d):00622         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (   /dd/defs/os9.d):00623         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (   /dd/defs/os9.d):00624                        RMB       4                   reserved for future use
                      (   /dd/defs/os9.d):00625         
                      (   /dd/defs/os9.d):00626         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (   /dd/defs/os9.d):00627         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (   /dd/defs/os9.d):00628         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (   /dd/defs/os9.d):00629         KeyRptS        RMB       1                   Key repeat start constant
0029                  (   /dd/defs/os9.d):00630         KeyRptD        RMB       1                   Key repeat delay constant
                      (   /dd/defs/os9.d):00631         
                      (   /dd/defs/os9.d):00632         * Feature1 byte definitions
     0001             (   /dd/defs/os9.d):00633         CRCOn          EQU       %00000001           CRC checking on
     0000             (   /dd/defs/os9.d):00634         CRCOff         EQU       %00000000           CRC checking off
     0000             (   /dd/defs/os9.d):00635         Proc6809       EQU       %00000000           6809 procesor
     0002             (   /dd/defs/os9.d):00636         Proc6309       EQU       %00000010           6309 procesor
                      (   /dd/defs/os9.d):00637         
                      (   /dd/defs/os9.d):00638                        PAG       
                      (   /dd/defs/os9.d):00639         **************************
                      (   /dd/defs/os9.d):00640         * Module Field Definitions
                      (   /dd/defs/os9.d):00641         *
                      (   /dd/defs/os9.d):00642         * ID Field - First two bytes of a NitrOS-9 module
                      (   /dd/defs/os9.d):00643         *
     0087             (   /dd/defs/os9.d):00644         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (   /dd/defs/os9.d):00645         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (   /dd/defs/os9.d):00646         M$ID12         EQU       M$ID1*256+M$ID2
                      (   /dd/defs/os9.d):00647         
                      (   /dd/defs/os9.d):00648         *
                      (   /dd/defs/os9.d):00649         * Module Type/Language Field Masks
                      (   /dd/defs/os9.d):00650         *
     00F0             (   /dd/defs/os9.d):00651         TypeMask       EQU       %11110000           Type Field
     000F             (   /dd/defs/os9.d):00652         LangMask       EQU       %00001111           Language Field
                      (   /dd/defs/os9.d):00653         
                      (   /dd/defs/os9.d):00654         *
                      (   /dd/defs/os9.d):00655         * Module Type Values
                      (   /dd/defs/os9.d):00656         *
     00F0             (   /dd/defs/os9.d):00657         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (   /dd/defs/os9.d):00658         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (   /dd/defs/os9.d):00659         FlMgr          EQU       $D0                 File Manager
     00C0             (   /dd/defs/os9.d):00660         Systm          EQU       $C0                 System Module
     0050             (   /dd/defs/os9.d):00661         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (   /dd/defs/os9.d):00662         Data           EQU       $40                 Data Module
     0030             (   /dd/defs/os9.d):00663         Multi          EQU       $30                 Multi-Module
     0020             (   /dd/defs/os9.d):00664         Sbrtn          EQU       $20                 Subroutine Module
     0010             (   /dd/defs/os9.d):00665         Prgrm          EQU       $10                 Program Module
                      (   /dd/defs/os9.d):00666         
                      (   /dd/defs/os9.d):00667         *
                      (   /dd/defs/os9.d):00668         * Module Language Values
                      (   /dd/defs/os9.d):00669         *
     0001             (   /dd/defs/os9.d):00670         Objct          EQU       1                   6809 Object Code Module
     0002             (   /dd/defs/os9.d):00671         ICode          EQU       2                   Basic09 I-code
     0003             (   /dd/defs/os9.d):00672         PCode          EQU       3                   Pascal P-code
     0004             (   /dd/defs/os9.d):00673         CCode          EQU       4                   C I-code
     0005             (   /dd/defs/os9.d):00674         CblCode        EQU       5                   Cobol I-code
     0006             (   /dd/defs/os9.d):00675         FrtnCode       EQU       6                   Fortran I-code
     0007             (   /dd/defs/os9.d):00676         Obj6309        EQU       7                   6309 object code
                      (   /dd/defs/os9.d):00677         *
                      (   /dd/defs/os9.d):00678         * Module Attributes / Revision byte
                      (   /dd/defs/os9.d):00679         *
                      (   /dd/defs/os9.d):00680         * Field Masks
                      (   /dd/defs/os9.d):00681         *
     00F0             (   /dd/defs/os9.d):00682         AttrMask       EQU       %11110000           Attributes Field
     000F             (   /dd/defs/os9.d):00683         RevsMask       EQU       %00001111           Revision Level Field
                      (   /dd/defs/os9.d):00684         *
                      (   /dd/defs/os9.d):00685         * Attribute Flags
                      (   /dd/defs/os9.d):00686         *
     0080             (   /dd/defs/os9.d):00687         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (   /dd/defs/os9.d):00688         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (   /dd/defs/os9.d):00689         ModNat         EQU       %00100000           6309 native mode attribute
     0040             (   /dd/defs/os9.d):00690         BufWrits       EQU       ModProt             SCF buffered read supported (Coco only at this point)
     0010             (   /dd/defs/os9.d):00691         BufReads       EQU       %00010000           SCF buffered write supported (Coco only at this point)
                      (   /dd/defs/os9.d):00692         * LCB - propose we add Buffered Read/Buffered Write attribute bits for Coco (in descriptors and
                      (   /dd/defs/os9.d):00693         *   drivers for SCF), with one of them replacing ModProt. SCF would check Read/ReadLn and Write/WritLn
                      (   /dd/defs/os9.d):00694         *   calls, and if both the driver and descriptor have the appropriate bit set, it would do buffered 32
                      (   /dd/defs/os9.d):00695         *   byte (for now) reads/writes like the Grfdrv write call does now, for all bytes that are ASCII >$1F
                      (   /dd/defs/os9.d):00696         *   (ie non-control chars, which need special processing)
                      (   /dd/defs/os9.d):00697         
                      (   /dd/defs/os9.d):00698         
                      (   /dd/defs/os9.d):00699         ********************
                      (   /dd/defs/os9.d):00700         * Device Type Values
                      (   /dd/defs/os9.d):00701         *
                      (   /dd/defs/os9.d):00702         * These values define various classes of devices, which are
                      (   /dd/defs/os9.d):00703         * managed by a file manager module.  The Device Type is embedded
                      (   /dd/defs/os9.d):00704         * in a device's device descriptor.
                      (   /dd/defs/os9.d):00705         *
     0000             (   /dd/defs/os9.d):00706         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (   /dd/defs/os9.d):00707         DT.RBF         EQU       1                   Random Block File Manager
     0002             (   /dd/defs/os9.d):00708         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (   /dd/defs/os9.d):00709         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (   /dd/defs/os9.d):00710         DT.NFM         EQU       4                   Network File Manager
     0005             (   /dd/defs/os9.d):00711         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (   /dd/defs/os9.d):00712         DT.RFM                  EQU             6                                       Remote File Manager
                      (   /dd/defs/os9.d):00713         
                      (   /dd/defs/os9.d):00714         *********************
                      (   /dd/defs/os9.d):00715         * CRC Result Constant
                      (   /dd/defs/os9.d):00716         *
     0080             (   /dd/defs/os9.d):00717         CRCCon1        EQU       $80
     0FE3             (   /dd/defs/os9.d):00718         CRCCon23       EQU       $0FE3
                      (   /dd/defs/os9.d):00719         
                      (   /dd/defs/os9.d):00720                        TTL       Process Information
                      (   /dd/defs/os9.d):00721                        PAG       
                      (   /dd/defs/os9.d):00722         ********************************
                      (   /dd/defs/os9.d):00723         * Process Descriptor Definitions
                      (   /dd/defs/os9.d):00724         *
                      (   /dd/defs/os9.d):00725         
                      (   /dd/defs/os9.d):00726         * Level 1 process descriptor defs
                      (   /dd/defs/os9.d):00727         
                      (   /dd/defs/os9.d):00728         
                      (   /dd/defs/os9.d):00729         *
                      (   /dd/defs/os9.d):00730         * Process State Flags
                      (   /dd/defs/os9.d):00731         *
                      (   /dd/defs/os9.d):00732         
                      (   /dd/defs/os9.d):00733         
                      (   /dd/defs/os9.d):00734         * Level 2 process descriptor defs
     0010             (   /dd/defs/os9.d):00735         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (   /dd/defs/os9.d):00736         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (   /dd/defs/os9.d):00737         NumPaths       EQU       16                  Number of Local Paths
                      (   /dd/defs/os9.d):00738         
                      (   /dd/defs/os9.d):00739                        ORG       0
0000                  (   /dd/defs/os9.d):00740         P$ID           RMB       1                   Process ID
0001                  (   /dd/defs/os9.d):00741         P$PID          RMB       1                   Parent's ID
0002                  (   /dd/defs/os9.d):00742         P$SID          RMB       1                   Sibling's ID
0003                  (   /dd/defs/os9.d):00743         P$CID          RMB       1                   Child's ID
0004                  (   /dd/defs/os9.d):00744         P$SP           RMB       2                   Stack ptr
0006                  (   /dd/defs/os9.d):00745         P$Task         RMB       1                   Task Number
0007                  (   /dd/defs/os9.d):00746         P$PagCnt       RMB       1                   Memory Page Count
0008                  (   /dd/defs/os9.d):00747         P$User         RMB       2                   User Index
000A                  (   /dd/defs/os9.d):00748         P$Prior        RMB       1                   Priority
000B                  (   /dd/defs/os9.d):00749         P$Age          RMB       1                   Age
000C                  (   /dd/defs/os9.d):00750         P$State        RMB       1                   Status
000D                  (   /dd/defs/os9.d):00751         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (   /dd/defs/os9.d):00752         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (   /dd/defs/os9.d):00753         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (   /dd/defs/os9.d):00754         P$PModul       RMB       2                   Primary Module
0013                  (   /dd/defs/os9.d):00755         P$SWI          RMB       2                   SWI Entry Point
0015                  (   /dd/defs/os9.d):00756         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (   /dd/defs/os9.d):00757         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (   /dd/defs/os9.d):00758         P$Signal       RMB       1                   Signal Code
001A                  (   /dd/defs/os9.d):00759         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (   /dd/defs/os9.d):00760         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (   /dd/defs/os9.d):00761         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (   /dd/defs/os9.d):00762                        RMB       $20-.               unused
0020                  (   /dd/defs/os9.d):00763         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (   /dd/defs/os9.d):00764         P$Path         RMB       NumPaths            I/O Path Table
0040                  (   /dd/defs/os9.d):00765         P$DATImg       RMB       64                  DAT Image
0080                  (   /dd/defs/os9.d):00766         P$Links        RMB       32                  Block Link counts
00A0                  (   /dd/defs/os9.d):00767         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (   /dd/defs/os9.d):00768         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (   /dd/defs/os9.d):00769         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (   /dd/defs/os9.d):00770         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (   /dd/defs/os9.d):00771         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (   /dd/defs/os9.d):00772         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (   /dd/defs/os9.d):00773         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (   /dd/defs/os9.d):00774         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (   /dd/defs/os9.d):00775         P$Alarm        RMB       6
00C9                  (   /dd/defs/os9.d):00776                        RMB       $200-.              Local stack
     0200             (   /dd/defs/os9.d):00777         P$Stack        EQU       .                   Top of Stack
     0200             (   /dd/defs/os9.d):00778         P$Size         EQU       .                   Size of Process Descriptor
                      (   /dd/defs/os9.d):00779         
                      (   /dd/defs/os9.d):00780         *
                      (   /dd/defs/os9.d):00781         * Process State Flags
                      (   /dd/defs/os9.d):00782         *
     0080             (   /dd/defs/os9.d):00783         SysState       EQU       %10000000
     0040             (   /dd/defs/os9.d):00784         TimSleep       EQU       %01000000
     0020             (   /dd/defs/os9.d):00785         TimOut         EQU       %00100000
     0010             (   /dd/defs/os9.d):00786         ImgChg         EQU       %00010000
     0008             (   /dd/defs/os9.d):00787         Suspend        EQU       %00001000
     0002             (   /dd/defs/os9.d):00788         Condem         EQU       %00000010
     0001             (   /dd/defs/os9.d):00789         Dead           EQU       %00000001
                      (   /dd/defs/os9.d):00790         
                      (   /dd/defs/os9.d):00791         
                      (   /dd/defs/os9.d):00792                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (   /dd/defs/os9.d):00793                        PAG       
                      (   /dd/defs/os9.d):00794         *************************
                      (   /dd/defs/os9.d):00795         * Path Descriptor Offsets
                      (   /dd/defs/os9.d):00796         *
                      (   /dd/defs/os9.d):00797                        ORG       0
0000                  (   /dd/defs/os9.d):00798         PD.PD          RMB       1                   Path Number
0001                  (   /dd/defs/os9.d):00799         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (   /dd/defs/os9.d):00800         PD.CNT         RMB       1                   Number of Open Images
0003                  (   /dd/defs/os9.d):00801         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (   /dd/defs/os9.d):00802         PD.CPR         RMB       1                   Current Process
0006                  (   /dd/defs/os9.d):00803         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (   /dd/defs/os9.d):00804         PD.BUF         RMB       2                   Buffer Address
000A                  (   /dd/defs/os9.d):00805         PD.FST         RMB       32-.                File Manager's Storage
     0020             (   /dd/defs/os9.d):00806         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (   /dd/defs/os9.d):00807         PD.DTP         RMB       1                   Device Type
0021                  (   /dd/defs/os9.d):00808                        RMB       64-.                Path options
     0040             (   /dd/defs/os9.d):00809         PDSIZE         EQU       .
                      (   /dd/defs/os9.d):00810         
                      (   /dd/defs/os9.d):00811         *
                      (   /dd/defs/os9.d):00812         * Pathlist Special Symbols
                      (   /dd/defs/os9.d):00813         *
     002F             (   /dd/defs/os9.d):00814         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (   /dd/defs/os9.d):00815         PDIR           EQU       '.                  Directory
     0040             (   /dd/defs/os9.d):00816         PENTIR         EQU       '@                  Entire Device
                      (   /dd/defs/os9.d):00817         
                      (   /dd/defs/os9.d):00818                        PAG       
                      (   /dd/defs/os9.d):00819         ****************************
                      (   /dd/defs/os9.d):00820         * File Manager Entry Offsets
                      (   /dd/defs/os9.d):00821         *
                      (   /dd/defs/os9.d):00822                        ORG       0
0000                  (   /dd/defs/os9.d):00823         FMCREA         RMB       3                   Create (Open New) File
0003                  (   /dd/defs/os9.d):00824         FMOPEN         RMB       3                   Open File
0006                  (   /dd/defs/os9.d):00825         FMMDIR         RMB       3                   Make Directory
0009                  (   /dd/defs/os9.d):00826         FMCDIR         RMB       3                   Change Directory
000C                  (   /dd/defs/os9.d):00827         FMDLET         RMB       3                   Delete File
000F                  (   /dd/defs/os9.d):00828         FMSEEK         RMB       3                   Position File
0012                  (   /dd/defs/os9.d):00829         FMREAD         RMB       3                   Read from File
0015                  (   /dd/defs/os9.d):00830         FMWRIT         RMB       3                   Write to File
0018                  (   /dd/defs/os9.d):00831         FMRDLN         RMB       3                   ReadLn
001B                  (   /dd/defs/os9.d):00832         FMWRLN         RMB       3                   WritLn
001E                  (   /dd/defs/os9.d):00833         FMGSTA         RMB       3                   Get File Status
0021                  (   /dd/defs/os9.d):00834         FMSSTA         RMB       3                   Set File Status
0024                  (   /dd/defs/os9.d):00835         FMCLOS         RMB       3                   Close File
                      (   /dd/defs/os9.d):00836         
                      (   /dd/defs/os9.d):00837         *****************************
                      (   /dd/defs/os9.d):00838         * Device Driver Entry Offsets
                      (   /dd/defs/os9.d):00839         *
                      (   /dd/defs/os9.d):00840                        ORG       0
0000                  (   /dd/defs/os9.d):00841         D$INIT         RMB       3                   Device Initialization
0003                  (   /dd/defs/os9.d):00842         D$READ         RMB       3                   Read from Device
0006                  (   /dd/defs/os9.d):00843         D$WRIT         RMB       3                   Write to Device
0009                  (   /dd/defs/os9.d):00844         D$GSTA         RMB       3                   Get Device Status
000C                  (   /dd/defs/os9.d):00845         D$PSTA         RMB       3                   Put Device Status
000F                  (   /dd/defs/os9.d):00846         D$TERM         RMB       3                   Device Termination
                      (   /dd/defs/os9.d):00847         
                      (   /dd/defs/os9.d):00848         *********************
                      (   /dd/defs/os9.d):00849         * Device Table Format
                      (   /dd/defs/os9.d):00850         *
                      (   /dd/defs/os9.d):00851                        ORG       0
0000                  (   /dd/defs/os9.d):00852         V$DRIV         RMB       2                   Device Driver module
0002                  (   /dd/defs/os9.d):00853         V$STAT         RMB       2                   Device Driver Static storage
0004                  (   /dd/defs/os9.d):00854         V$DESC         RMB       2                   Device Descriptor module
0006                  (   /dd/defs/os9.d):00855         V$FMGR         RMB       2                   File Manager module
0008                  (   /dd/defs/os9.d):00856         V$USRS         RMB       1                   use count
0009                  (   /dd/defs/os9.d):00857         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (   /dd/defs/os9.d):00858         V$FMGREX       RMB       2                   File Manager execution address
     000D             (   /dd/defs/os9.d):00859         DEVSIZ         EQU       .
                      (   /dd/defs/os9.d):00860         
                      (   /dd/defs/os9.d):00861         *******************************
                      (   /dd/defs/os9.d):00862         * Device Static Storage Offsets
                      (   /dd/defs/os9.d):00863         *
                      (   /dd/defs/os9.d):00864                        ORG       0
0000                  (   /dd/defs/os9.d):00865         V.PAGE         RMB       1                   Port Extended Address
0001                  (   /dd/defs/os9.d):00866         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (   /dd/defs/os9.d):00867         V.LPRC         RMB       1                   Last Active Process ID
0004                  (   /dd/defs/os9.d):00868         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (   /dd/defs/os9.d):00869         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (   /dd/defs/os9.d):00870         V.USER         EQU       .                   Driver Allocation Origin
                      (   /dd/defs/os9.d):00871         
                      (   /dd/defs/os9.d):00872         ********************************
                      (   /dd/defs/os9.d):00873         * Interrupt Polling Table Format
                      (   /dd/defs/os9.d):00874         *
                      (   /dd/defs/os9.d):00875                        ORG       0
0000                  (   /dd/defs/os9.d):00876         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (   /dd/defs/os9.d):00877         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (   /dd/defs/os9.d):00878         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (   /dd/defs/os9.d):00879         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (   /dd/defs/os9.d):00880         Q$STAT         RMB       2                   Static Storage Address
0008                  (   /dd/defs/os9.d):00881         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
0009                  (   /dd/defs/os9.d):00882         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
     000B             (   /dd/defs/os9.d):00883         POLSIZ         EQU       .
                      (   /dd/defs/os9.d):00884         
                      (   /dd/defs/os9.d):00885         ********************
                      (   /dd/defs/os9.d):00886         * VIRQ packet format
                      (   /dd/defs/os9.d):00887         *
                      (   /dd/defs/os9.d):00888                        ORG       0
0000                  (   /dd/defs/os9.d):00889         Vi.Cnt         RMB       2                   count down counter
0002                  (   /dd/defs/os9.d):00890         Vi.Rst         RMB       2                   reset value for counter
0004                  (   /dd/defs/os9.d):00891         Vi.Stat        RMB       1                   status byte
     0005             (   /dd/defs/os9.d):00892         Vi.PkSz        EQU       .
                      (   /dd/defs/os9.d):00893         
     0001             (   /dd/defs/os9.d):00894         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (   /dd/defs/os9.d):00895         
                      (   /dd/defs/os9.d):00896                        PAG       
                      (   /dd/defs/os9.d):00897         *************************************
                      (   /dd/defs/os9.d):00898         * Machine Characteristics Definitions
                      (   /dd/defs/os9.d):00899         *
     0000             (   /dd/defs/os9.d):00900         R$CC           EQU       0                   Condition Codes register
     0001             (   /dd/defs/os9.d):00901         R$A            EQU       1                   A Accumulator
     0002             (   /dd/defs/os9.d):00902         R$B            EQU       2                   B Accumulator
     0001             (   /dd/defs/os9.d):00903         R$D            EQU       R$A                 Combined A:B Accumulator
                      (   /dd/defs/os9.d):00904                        IFNE      H6309
0005                  (   /dd/defs/os9.d):00905         R$E            EQU       3
0005                  (   /dd/defs/os9.d):00906         R$F            EQU       4
0005                  (   /dd/defs/os9.d):00907         R$W            EQU       R$E
0005                  (   /dd/defs/os9.d):00908         R$Q            EQU       R$A
0005                  (   /dd/defs/os9.d):00909         R$DP           EQU       5
0005                  (   /dd/defs/os9.d):00910         R$X            EQU       6
0005                  (   /dd/defs/os9.d):00911         R$Y            EQU       8
0005                  (   /dd/defs/os9.d):00912         R$U            EQU       10
0005                  (   /dd/defs/os9.d):00913         R$PC           EQU       12
0005                  (   /dd/defs/os9.d):00914         R$Size         EQU       14
                      (   /dd/defs/os9.d):00915                        ELSE
     0003             (   /dd/defs/os9.d):00916         R$DP           EQU       3                   Direct Page register
     0004             (   /dd/defs/os9.d):00917         R$X            EQU       4                   X Index register
     0006             (   /dd/defs/os9.d):00918         R$Y            EQU       6                   Y Index register
     0008             (   /dd/defs/os9.d):00919         R$U            EQU       8                   User Stack register
     000A             (   /dd/defs/os9.d):00920         R$PC           EQU       10                  Program Counter register
     000C             (   /dd/defs/os9.d):00921         R$Size         EQU       12                  Total register package size
                      (   /dd/defs/os9.d):00922                        ENDC
                      (   /dd/defs/os9.d):00923         
                      (   /dd/defs/os9.d):00924         * MD register masks
                      (   /dd/defs/os9.d):00925         * 6309 definitions
     0080             (   /dd/defs/os9.d):00926         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (   /dd/defs/os9.d):00927         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (   /dd/defs/os9.d):00928         
     0080             (   /dd/defs/os9.d):00929         Entire         EQU       %10000000           Full Register Stack flag
     0040             (   /dd/defs/os9.d):00930         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (   /dd/defs/os9.d):00931         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (   /dd/defs/os9.d):00932         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (   /dd/defs/os9.d):00933         Negative       EQU       %00001000           Negative flag
     0004             (   /dd/defs/os9.d):00934         Zero           EQU       %00000100           Zero flag
     0002             (   /dd/defs/os9.d):00935         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (   /dd/defs/os9.d):00936         Carry          EQU       %00000001           Carry bit
     0050             (   /dd/defs/os9.d):00937         IntMasks       EQU       IRQMask+FIRQMask
     0080             (   /dd/defs/os9.d):00938         Sign           EQU       %10000000           sign bit
                      (   /dd/defs/os9.d):00939         
                      (   /dd/defs/os9.d):00940                        TTL       Error Code Definitions
                      (   /dd/defs/os9.d):00941                        PAG       
                      (   /dd/defs/os9.d):00942         ************************
                      (   /dd/defs/os9.d):00943         * Error Code Definitions
                      (   /dd/defs/os9.d):00944         *
                      (   /dd/defs/os9.d):00945         * Basic09 Error Codes
                      (   /dd/defs/os9.d):00946         *
                      (   /dd/defs/os9.d):00947                        ORG       10
000A                  (   /dd/defs/os9.d):00948         E$UnkSym       RMB       1                   Unknown symbol
000B                  (   /dd/defs/os9.d):00949         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (   /dd/defs/os9.d):00950         E$IllStC       RMB       1                   Illegal statement construction
000D                  (   /dd/defs/os9.d):00951         E$ICOvf        RMB       1                   I-code overflow
000E                  (   /dd/defs/os9.d):00952         E$IChRef       RMB       1                   Illegal channel reference
000F                  (   /dd/defs/os9.d):00953         E$IllMod       RMB       1                   Illegal mode
0010                  (   /dd/defs/os9.d):00954         E$IllNum       RMB       1                   Illegal number
0011                  (   /dd/defs/os9.d):00955         E$IllPrf       RMB       1                   Illegal prefix
0012                  (   /dd/defs/os9.d):00956         E$IllOpd       RMB       1                   Illegal operand
0013                  (   /dd/defs/os9.d):00957         E$IllOpr       RMB       1                   Illegal operator
0014                  (   /dd/defs/os9.d):00958         E$IllRFN       RMB       1                   Illegal record field name
0015                  (   /dd/defs/os9.d):00959         E$IllDim       RMB       1                   Illegal dimension
0016                  (   /dd/defs/os9.d):00960         E$IllLit       RMB       1                   Illegal literal
0017                  (   /dd/defs/os9.d):00961         E$IllRet       RMB       1                   Illegal relational
0018                  (   /dd/defs/os9.d):00962         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (   /dd/defs/os9.d):00963         E$DimLrg       RMB       1                   Dimension too large
001A                  (   /dd/defs/os9.d):00964         E$LinLrg       RMB       1                   Line number too large
001B                  (   /dd/defs/os9.d):00965         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (   /dd/defs/os9.d):00966         E$NoPath       RMB       1                   Missing path number
001D                  (   /dd/defs/os9.d):00967         E$NoComa       RMB       1                   Missing coma
001E                  (   /dd/defs/os9.d):00968         E$NoDim        RMB       1                   Missing dimension
001F                  (   /dd/defs/os9.d):00969         E$NoDO         RMB       1                   Missing DO statement
0020                  (   /dd/defs/os9.d):00970         E$MFull        RMB       1                   Memory full
0021                  (   /dd/defs/os9.d):00971         E$NoGoto       RMB       1                   Missing GOTO
0022                  (   /dd/defs/os9.d):00972         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (   /dd/defs/os9.d):00973         E$NoLRef       RMB       1                   Missing line reference
0024                  (   /dd/defs/os9.d):00974         E$NoOprd       RMB       1                   Missing operand
0025                  (   /dd/defs/os9.d):00975         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (   /dd/defs/os9.d):00976         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (   /dd/defs/os9.d):00977         E$NoTO         RMB       1                   Missing TO statement
0028                  (   /dd/defs/os9.d):00978         E$NoVRef       RMB       1                   Missing variable reference
0029                  (   /dd/defs/os9.d):00979         E$EndQou       RMB       1                   Missing end quote
002A                  (   /dd/defs/os9.d):00980         E$SubLrg       RMB       1                   Too many subscripts
002B                  (   /dd/defs/os9.d):00981         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (   /dd/defs/os9.d):00982         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (   /dd/defs/os9.d):00983         E$DivZer       RMB       1                   Divice by zero
002E                  (   /dd/defs/os9.d):00984         E$TypMis       RMB       1                   Operand type mismatch
002F                  (   /dd/defs/os9.d):00985         E$StrOvf       RMB       1                   String stack overflow
0030                  (   /dd/defs/os9.d):00986         E$NoRout       RMB       1                   Unimplemented routine
0031                  (   /dd/defs/os9.d):00987         E$UndVar       RMB       1                   Undefined variable
0032                  (   /dd/defs/os9.d):00988         E$FltOvf       RMB       1                   Floating Overflow
0033                  (   /dd/defs/os9.d):00989         E$LnComp       RMB       1                   Line with compiler error
0034                  (   /dd/defs/os9.d):00990         E$ValRng       RMB       1                   Value out of range for destination
0035                  (   /dd/defs/os9.d):00991         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (   /dd/defs/os9.d):00992         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (   /dd/defs/os9.d):00993         E$SubRng       RMB       1                   Subscript out of range
0038                  (   /dd/defs/os9.d):00994         E$ParmEr       RMB       1                   Paraemter error
0039                  (   /dd/defs/os9.d):00995         E$SysOvf       RMB       1                   System stack overflow
003A                  (   /dd/defs/os9.d):00996         E$IOMism       RMB       1                   I/O type mismatch
003B                  (   /dd/defs/os9.d):00997         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (   /dd/defs/os9.d):00998         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (   /dd/defs/os9.d):00999         E$IllInp       RMB       1                   Illegal input format
003E                  (   /dd/defs/os9.d):01000         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (   /dd/defs/os9.d):01001         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (   /dd/defs/os9.d):01002         E$IllPNm       RMB       1                   Illegal path number
0041                  (   /dd/defs/os9.d):01003         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (   /dd/defs/os9.d):01004         E$NonRcO       RMB       1                   Non-record type operand
0043                  (   /dd/defs/os9.d):01005         E$IllA         RMB       1                   Illegal argument
0044                  (   /dd/defs/os9.d):01006         E$IllCnt       RMB       1                   Illegal control structure
0045                  (   /dd/defs/os9.d):01007         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (   /dd/defs/os9.d):01008         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (   /dd/defs/os9.d):01009         E$IllExp       RMB       1                   Illegal expression type
0048                  (   /dd/defs/os9.d):01010         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (   /dd/defs/os9.d):01011         E$ArrOvf       RMB       1                   Array size overflow
004A                  (   /dd/defs/os9.d):01012         E$UndLin       RMB       1                   Undefined line number
004B                  (   /dd/defs/os9.d):01013         E$MltLin       RMB       1                   Multiply defined line number
004C                  (   /dd/defs/os9.d):01014         E$MltVar       RMB       1                   Multiply defined variable
004D                  (   /dd/defs/os9.d):01015         E$IllIVr       RMB       1                   Illegal input variable
004E                  (   /dd/defs/os9.d):01016         E$SeekRg       RMB       1                   Seek out of range
004F                  (   /dd/defs/os9.d):01017         E$NoData       RMB       1                   Missing data statement
                      (   /dd/defs/os9.d):01018         
                      (   /dd/defs/os9.d):01019         *
                      (   /dd/defs/os9.d):01020         * System Dependent Error Codes
                      (   /dd/defs/os9.d):01021         *
                      (   /dd/defs/os9.d):01022         
                      (   /dd/defs/os9.d):01023         * Level 2 windowing error codes
                      (   /dd/defs/os9.d):01024                        ORG       183
00B7                  (   /dd/defs/os9.d):01025         E$IWTyp        RMB       1                   Illegal window type
00B8                  (   /dd/defs/os9.d):01026         E$WADef        RMB       1                   Window already defined
00B9                  (   /dd/defs/os9.d):01027         E$NFont        RMB       1                   Font not found
00BA                  (   /dd/defs/os9.d):01028         E$StkOvf       RMB       1                   Stack overflow
00BB                  (   /dd/defs/os9.d):01029         E$IllArg       RMB       1                   Illegal argument
00BC                  (   /dd/defs/os9.d):01030                        RMB       1                   reserved
00BD                  (   /dd/defs/os9.d):01031         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (   /dd/defs/os9.d):01032         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (   /dd/defs/os9.d):01033         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (   /dd/defs/os9.d):01034         E$IllCmd       RMB       1                   Illegal command
00C1                  (   /dd/defs/os9.d):01035         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (   /dd/defs/os9.d):01036         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (   /dd/defs/os9.d):01037         E$IWDef        RMB       1                   Illegal window definition
00C4                  (   /dd/defs/os9.d):01038         E$WUndef       RMB       1                   Window undefined
                      (   /dd/defs/os9.d):01039         
00C5                  (   /dd/defs/os9.d):01040         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (   /dd/defs/os9.d):01041         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (   /dd/defs/os9.d):01042         E$Alias        RMB       1
                      (   /dd/defs/os9.d):01043         
                      (   /dd/defs/os9.d):01044         
                      (   /dd/defs/os9.d):01045         *
                      (   /dd/defs/os9.d):01046         * Standard NitrOS-9 Error Codes
                      (   /dd/defs/os9.d):01047         *
                      (   /dd/defs/os9.d):01048                        ORG       200
00C8                  (   /dd/defs/os9.d):01049         E$PthFul       RMB       1                   Path Table full
00C9                  (   /dd/defs/os9.d):01050         E$BPNum        RMB       1                   Bad Path Number
00CA                  (   /dd/defs/os9.d):01051         E$Poll         RMB       1                   Polling Table Full
00CB                  (   /dd/defs/os9.d):01052         E$BMode        RMB       1                   Bad Mode
00CC                  (   /dd/defs/os9.d):01053         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (   /dd/defs/os9.d):01054         E$BMID         RMB       1                   Bad Module ID
00CE                  (   /dd/defs/os9.d):01055         E$DirFul       RMB       1                   Module Directory Full
00CF                  (   /dd/defs/os9.d):01056         E$MemFul       RMB       1                   Process Memory Full
00D0                  (   /dd/defs/os9.d):01057         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (   /dd/defs/os9.d):01058         E$ModBsy       RMB       1                   Module Busy
00D2                  (   /dd/defs/os9.d):01059         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (   /dd/defs/os9.d):01060         E$EOF          RMB       1                   End of File
00D4                  (   /dd/defs/os9.d):01061                        RMB       1
00D5                  (   /dd/defs/os9.d):01062         E$NES          RMB       1                   Non-Existing Segment
00D6                  (   /dd/defs/os9.d):01063         E$FNA          RMB       1                   File Not Accesible
00D7                  (   /dd/defs/os9.d):01064         E$BPNam        RMB       1                   Bad Path Name
00D8                  (   /dd/defs/os9.d):01065         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (   /dd/defs/os9.d):01066         E$SLF          RMB       1                   Segment List Full
00DA                  (   /dd/defs/os9.d):01067         E$CEF          RMB       1                   Creating Existing File
00DB                  (   /dd/defs/os9.d):01068         E$IBA          RMB       1                   Illegal Block Address
00DC                  (   /dd/defs/os9.d):01069         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (   /dd/defs/os9.d):01070         E$MNF          RMB       1                   Module Not Found
00DE                  (   /dd/defs/os9.d):01071                        RMB       1
00DF                  (   /dd/defs/os9.d):01072         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (   /dd/defs/os9.d):01073         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (   /dd/defs/os9.d):01074         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (   /dd/defs/os9.d):01075                        RMB       1
00E2                  (   /dd/defs/os9.d):01076         E$NoChld       RMB       1                   No Children
00E3                  (   /dd/defs/os9.d):01077         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (   /dd/defs/os9.d):01078         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (   /dd/defs/os9.d):01079         E$PrcFul       RMB       1                   Process Table Full
00E6                  (   /dd/defs/os9.d):01080         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (   /dd/defs/os9.d):01081         E$KwnMod       RMB       1                   Known Module
00E8                  (   /dd/defs/os9.d):01082         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (   /dd/defs/os9.d):01083         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (   /dd/defs/os9.d):01084         E$NEMod        RMB       1                   Non Existing Module
00EB                  (   /dd/defs/os9.d):01085         E$BNam         RMB       1                   Bad Name
00EC                  (   /dd/defs/os9.d):01086         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (   /dd/defs/os9.d):01087         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (   /dd/defs/os9.d):01088         E$DNE          RMB       1                   Directory not empty
00EF                  (   /dd/defs/os9.d):01089         E$NoTask       RMB       1                   No available Task number
                      (   /dd/defs/os9.d):01090                        RMB       $F0-.               reserved
00F0                  (   /dd/defs/os9.d):01091         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (   /dd/defs/os9.d):01092         E$Sect         RMB       1                   Bad Sector number
00F2                  (   /dd/defs/os9.d):01093         E$WP           RMB       1                   Write Protect
00F3                  (   /dd/defs/os9.d):01094         E$CRC          RMB       1                   Bad Check Sum
00F4                  (   /dd/defs/os9.d):01095         E$Read         RMB       1                   Read Error
00F5                  (   /dd/defs/os9.d):01096         E$Write        RMB       1                   Write Error
00F6                  (   /dd/defs/os9.d):01097         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (   /dd/defs/os9.d):01098         E$Seek         RMB       1                   Seek Error
00F8                  (   /dd/defs/os9.d):01099         E$Full         RMB       1                   Media Full
00F9                  (   /dd/defs/os9.d):01100         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (   /dd/defs/os9.d):01101         E$DevBsy       RMB       1                   Device Busy
00FB                  (   /dd/defs/os9.d):01102         E$DIDC         RMB       1                   Disk ID Change
00FC                  (   /dd/defs/os9.d):01103         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (   /dd/defs/os9.d):01104         E$Share        RMB       1                   Non-sharable file busy
00FE                  (   /dd/defs/os9.d):01105         E$DeadLk       RMB       1                   I/O Deadlock error
                      (   /dd/defs/os9.d):01106         
                      (   /dd/defs/os9.d):01107         
                      (   /dd/defs/os9.d):01108         ***************************
                      (   /dd/defs/os9.d):01109         * Level 3 Defs
                      (   /dd/defs/os9.d):01110         *
                      (   /dd/defs/os9.d):01111         * These definitions apply to NitrOS-9 Level 3
                      (   /dd/defs/os9.d):01112         *
                      (   /dd/defs/os9.d):01113         
                      ( /dd/defs/deffile):00007                  use   /dd/defs/rbf.d
                      (   /dd/defs/rbf.d):00001         ********************************************************************
                      (   /dd/defs/rbf.d):00002         * rbf.d - Random Block File Manager Definitions
                      (   /dd/defs/rbf.d):00003         *
                      (   /dd/defs/rbf.d):00004         * $Id$
                      (   /dd/defs/rbf.d):00005         *
                      (   /dd/defs/rbf.d):00006         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (   /dd/defs/rbf.d):00007         * that define the logical structure of a disk and allows access to the files
                      (   /dd/defs/rbf.d):00008         * in that structure.
                      (   /dd/defs/rbf.d):00009         *
                      (   /dd/defs/rbf.d):00010         * The data structures in this file give RBF its 'personality' and are used
                      (   /dd/defs/rbf.d):00011         * by RBF itself, as well as applications that will require disk I/O.
                      (   /dd/defs/rbf.d):00012         *
                      (   /dd/defs/rbf.d):00013         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/rbf.d):00014         * Comment
                      (   /dd/defs/rbf.d):00015         * ------------------------------------------------------------------
                      (   /dd/defs/rbf.d):00016         *          1982/07/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00017         * PD.Exten added to path descriptor and PE Entries defined.
                      (   /dd/defs/rbf.d):00018         *
                      (   /dd/defs/rbf.d):00019         *          1982/07/15  Robert F. Doggett
                      (   /dd/defs/rbf.d):00020         * V.FileHd inserted in driver static storage.
                      (   /dd/defs/rbf.d):00021         *
                      (   /dd/defs/rbf.d):00022         *          1982/09/10  WGP
                      (   /dd/defs/rbf.d):00023         * Level One/Level Two condionals added.
                      (   /dd/defs/rbf.d):00024         *
                      (   /dd/defs/rbf.d):00025         *          1982/09/17  WGP
                      (   /dd/defs/rbf.d):00026         *
                      (   /dd/defs/rbf.d):00027         *          1982/09/17  Robert F. Doggett
                      (   /dd/defs/rbf.d):00028         * PD.SLE renamed to PD.Creat.
                      (   /dd/defs/rbf.d):00029         *
                      (   /dd/defs/rbf.d):00030         *          1982/09/17  Robert F. Doggett
                      (   /dd/defs/rbf.d):00031         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (   /dd/defs/rbf.d):00032         *
                      (   /dd/defs/rbf.d):00033         *          1982/09/20  Robert F. Doggett
                      (   /dd/defs/rbf.d):00034         * Reserved areas added in static storage.
                      (   /dd/defs/rbf.d):00035         
                      (   /dd/defs/rbf.d):00036         *          1983/06/07  Robert F. Doggett
                      (   /dd/defs/rbf.d):00037         * Added InDriver flag in PD.SMF.
                      (   /dd/defs/rbf.d):00038         *
                      (   /dd/defs/rbf.d):00039         *          1983/06/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00040         * Added PE.Req tmp save for PE.Lock.
                      (   /dd/defs/rbf.d):00041         *
                      (   /dd/defs/rbf.d):00042         *          1983/08/08  Robert F. Doggett
                      (   /dd/defs/rbf.d):00043         * Reserved PD.SToff for Japanese.
                      (   /dd/defs/rbf.d):00044         *
                      (   /dd/defs/rbf.d):00045         *          1983/11/19  Robert F. Doggett
                      (   /dd/defs/rbf.d):00046         * Added V.ResBit in drive tables.
                      (   /dd/defs/rbf.d):00047         *
                      (   /dd/defs/rbf.d):00048         *          1983/12/12  Robert F. Doggett
                      (   /dd/defs/rbf.d):00049         * Added PE.Prior to save process priority.
                      (   /dd/defs/rbf.d):00050         *
                      (   /dd/defs/rbf.d):00051         *          1983/12/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00052         * Added BufBusy bit in state flag (PD.SMF).
                      (   /dd/defs/rbf.d):00053         *
                      (   /dd/defs/rbf.d):00054         *          1984/07/06  Mark G. Hawkins
                      (   /dd/defs/rbf.d):00055         * Added Bit Definitions for DD.FMT.
                      (   /dd/defs/rbf.d):00056         *
                      (   /dd/defs/rbf.d):00057         *          1987/06/23  Kevin K. Darling
                      (   /dd/defs/rbf.d):00058         * Updated with Dev Desc Info
                      (   /dd/defs/rbf.d):00059         *
                      (   /dd/defs/rbf.d):00060         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00061         * Updated comments for clarity.
                      (   /dd/defs/rbf.d):00062         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (   /dd/defs/rbf.d):00063         *
                      (   /dd/defs/rbf.d):00064         *          2004/04/14  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00065         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (   /dd/defs/rbf.d):00066         * addendum.  Pointed out by Rodney Hamilton.
                      (   /dd/defs/rbf.d):00067         *
                      (   /dd/defs/rbf.d):00068         *          2005/05/31  P.Harvey-Smith.
                      (   /dd/defs/rbf.d):00069         * Added defines for bit 2 of IT.DNS, which the format command uses to
                      (   /dd/defs/rbf.d):00070         * determine if a drive should have it's track 0 as single or double density
                      (   /dd/defs/rbf.d):00071         *
                      (   /dd/defs/rbf.d):00072         *          2005/11/23  Robert Gault
                      (   /dd/defs/rbf.d):00073         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (   /dd/defs/rbf.d):00074         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (   /dd/defs/rbf.d):00075         *
                      (   /dd/defs/rbf.d):00076         *          2005/12/11  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00077         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (   /dd/defs/rbf.d):00078         
                      (   /dd/defs/rbf.d):00079                        NAM       rbf.d
                      (   /dd/defs/rbf.d):00080                        TTL       Random Block File Manager Definitions
                      (   /dd/defs/rbf.d):00081         
                      (   /dd/defs/rbf.d):00082                        PAG
                      (   /dd/defs/rbf.d):00083         *******************************
                      (   /dd/defs/rbf.d):00084         * RBF Device Descriptor Offsets
                      (   /dd/defs/rbf.d):00085         *
                      (   /dd/defs/rbf.d):00086         * These definitions are for RBF device descriptors.
                      (   /dd/defs/rbf.d):00087         
                      (   /dd/defs/rbf.d):00088                        ORG       M$DTyp
0012                  (   /dd/defs/rbf.d):00089                        RMB       1                   Device type (DT.RBF)
0013                  (   /dd/defs/rbf.d):00090         IT.DRV         RMB       1                   Drive number
0014                  (   /dd/defs/rbf.d):00091         IT.STP         RMB       1                   Step rate
0015                  (   /dd/defs/rbf.d):00092         IT.TYP         RMB       1                   Disk device type information
0016                  (   /dd/defs/rbf.d):00093         IT.DNS         RMB       1                   Density capability
0017                  (   /dd/defs/rbf.d):00094         IT.CYL         RMB       2                   Number of cylinders
0019                  (   /dd/defs/rbf.d):00095         IT.SID         RMB       1                   Number of surfaces
001A                  (   /dd/defs/rbf.d):00096         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (   /dd/defs/rbf.d):00097         IT.SCT         RMB       2                   Default sectors/track
001D                  (   /dd/defs/rbf.d):00098         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (   /dd/defs/rbf.d):00099         IT.ILV         RMB       1                   Sector interleave offset
0020                  (   /dd/defs/rbf.d):00100         IT.SAS         RMB       1                   Segment allocation size
                      (   /dd/defs/rbf.d):00101         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (   /dd/defs/rbf.d):00102         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (   /dd/defs/rbf.d):00103         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (   /dd/defs/rbf.d):00104         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (   /dd/defs/rbf.d):00105         * The following fields are not copied to the path descriptor
0025                  (   /dd/defs/rbf.d):00106         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (   /dd/defs/rbf.d):00107         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (   /dd/defs/rbf.d):00108         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (   /dd/defs/rbf.d):00109         * These fields have been added because of SuperDriver.  They probably
                      (   /dd/defs/rbf.d):00110         * can be used in other drivers
                      (   /dd/defs/rbf.d):00111                        ORG       IT.WPC
0025                  (   /dd/defs/rbf.d):00112         IT.SOFF1       RMB       1
0026                  (   /dd/defs/rbf.d):00113         IT.SOFF2       RMB       1
0027                  (   /dd/defs/rbf.d):00114         IT.SOFF3       RMB       1
0028                  (   /dd/defs/rbf.d):00115         IT.LLDRV       RMB       2
002A                  (   /dd/defs/rbf.d):00116         IT.MPI         RMB       1
                      (   /dd/defs/rbf.d):00117         
                      (   /dd/defs/rbf.d):00118         
                      (   /dd/defs/rbf.d):00119         * IT.TYP Definitions
                      (   /dd/defs/rbf.d):00120         *
     0080             (   /dd/defs/rbf.d):00121         TYP.HARD       EQU       %10000000           Hard disk
     0000             (   /dd/defs/rbf.d):00122         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (   /dd/defs/rbf.d):00123         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (   /dd/defs/rbf.d):00124         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (   /dd/defs/rbf.d):00125         
                      (   /dd/defs/rbf.d):00126         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (   /dd/defs/rbf.d):00127         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (   /dd/defs/rbf.d):00128         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (   /dd/defs/rbf.d):00129         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (   /dd/defs/rbf.d):00130         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (   /dd/defs/rbf.d):00131         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (   /dd/defs/rbf.d):00132         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (   /dd/defs/rbf.d):00133         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (   /dd/defs/rbf.d):00134         
                      (   /dd/defs/rbf.d):00135         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (   /dd/defs/rbf.d):00136         TYP.5          EQU       %00000000           5" media
     0001             (   /dd/defs/rbf.d):00137         TYP.3          EQU       %00000001           3.5" media
     0002             (   /dd/defs/rbf.d):00138         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (   /dd/defs/rbf.d):00139         TYP.256        EQU       %00000000           256 byte sector media
     0004             (   /dd/defs/rbf.d):00140         TYP.512        EQU       %00000100           512 byte sector media
     0020             (   /dd/defs/rbf.d):00141         TYP.CCF        EQU       %00100000           CoCo format
     0000             (   /dd/defs/rbf.d):00142         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (   /dd/defs/rbf.d):00143         
                      (   /dd/defs/rbf.d):00144         * IT.DNS Definitions
                      (   /dd/defs/rbf.d):00145         *
                      (   /dd/defs/rbf.d):00146         
                      (   /dd/defs/rbf.d):00147         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (   /dd/defs/rbf.d):00148         
                      (   /dd/defs/rbf.d):00149         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (   /dd/defs/rbf.d):00150         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (   /dd/defs/rbf.d):00151         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (   /dd/defs/rbf.d):00152         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (   /dd/defs/rbf.d):00153         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (   /dd/defs/rbf.d):00154         
                      (   /dd/defs/rbf.d):00155         * Added PHS,2005-05-31, as format seems to use these
     0000             (   /dd/defs/rbf.d):00156         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (   /dd/defs/rbf.d):00157         DNS.MFM0       EQU       %00000100           Double density track 0
                      (   /dd/defs/rbf.d):00158         
                      (   /dd/defs/rbf.d):00159         * Floppy disk step rate definitions
     0000             (   /dd/defs/rbf.d):00160         STP.30ms       EQU       0                   30ms step rate
     0001             (   /dd/defs/rbf.d):00161         STP.20ms       EQU       1                   20ms step rate
     0002             (   /dd/defs/rbf.d):00162         STP.12ms       EQU       2                   12ms step rate
     0003             (   /dd/defs/rbf.d):00163         STP.6ms        EQU       3                   6ms step rate
                      (   /dd/defs/rbf.d):00164         
                      (   /dd/defs/rbf.d):00165                        PAG
                      (   /dd/defs/rbf.d):00166         *************************************
                      (   /dd/defs/rbf.d):00167         * Random Block Path Descriptor Format
                      (   /dd/defs/rbf.d):00168         *
                      (   /dd/defs/rbf.d):00169         * A path descriptor is created for every new path that is open
                      (   /dd/defs/rbf.d):00170         * via the I$Open system call (processed by IOMan).  Process
                      (   /dd/defs/rbf.d):00171         * descriptors track state information of a path.
                      (   /dd/defs/rbf.d):00172         *
                      (   /dd/defs/rbf.d):00173                        ORG       PD.FST
000A                  (   /dd/defs/rbf.d):00174         PD.SMF         RMB       1                   State flags
000B                  (   /dd/defs/rbf.d):00175         PD.CP          RMB       4                   Current logical byte position
000F                  (   /dd/defs/rbf.d):00176         PD.SIZ         RMB       4                   File size
0013                  (   /dd/defs/rbf.d):00177         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (   /dd/defs/rbf.d):00178         PD.SBP         RMB       3                   Segment beginning psn
0019                  (   /dd/defs/rbf.d):00179         PD.SSZ         RMB       3                   Segment size
001C                  (   /dd/defs/rbf.d):00180         PD.DSK         RMB       2                   Disk id
001E                  (   /dd/defs/rbf.d):00181         PD.DTB         RMB       2                   Drive table ptr
                      (   /dd/defs/rbf.d):00182                        ORG       PD.OPT
0020                  (   /dd/defs/rbf.d):00183                        RMB       1                   Device type
0021                  (   /dd/defs/rbf.d):00184         PD.DRV         RMB       1                   Drive number
0022                  (   /dd/defs/rbf.d):00185         PD.STP         RMB       1                   Step rate
0023                  (   /dd/defs/rbf.d):00186         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (   /dd/defs/rbf.d):00187         PD.DNS         RMB       1                   Density capability
0025                  (   /dd/defs/rbf.d):00188         PD.CYL         RMB       2                   Number of cylinders
0027                  (   /dd/defs/rbf.d):00189         PD.SID         RMB       1                   Number of surfaces
0028                  (   /dd/defs/rbf.d):00190         PD.VFY         RMB       1                   0=verify disk writes
0029                  (   /dd/defs/rbf.d):00191         PD.SCT         RMB       2                   Default sectors/track
002B                  (   /dd/defs/rbf.d):00192         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (   /dd/defs/rbf.d):00193         PD.ILV         RMB       1                   Sector interleave offset
002E                  (   /dd/defs/rbf.d):00194         PD.SAS         RMB       1                   Segment allocation size
002F                  (   /dd/defs/rbf.d):00195         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (   /dd/defs/rbf.d):00196         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (   /dd/defs/rbf.d):00197         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (   /dd/defs/rbf.d):00198         PD.ATT         RMB       1                   File attributes
0034                  (   /dd/defs/rbf.d):00199         PD.FD          RMB       3                   File descriptor psn
0037                  (   /dd/defs/rbf.d):00200         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (   /dd/defs/rbf.d):00201         PD.DCP         RMB       4                   File directory entry ptr
003E                  (   /dd/defs/rbf.d):00202         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (   /dd/defs/rbf.d):00203         
                      (   /dd/defs/rbf.d):00204         * State Flags
     0001             (   /dd/defs/rbf.d):00205         BUFMOD         EQU       $01                 Buffer modified
     0002             (   /dd/defs/rbf.d):00206         SINBUF         EQU       $02                 Sector in buffer
     0004             (   /dd/defs/rbf.d):00207         FDBUF          EQU       $04                 File descriptor in buffer
                      (   /dd/defs/rbf.d):00208         *EOFSEC equ $08 End of file sector
                      (   /dd/defs/rbf.d):00209         *EOF equ $10 End of file
     0020             (   /dd/defs/rbf.d):00210         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (   /dd/defs/rbf.d):00211         BufBusy        EQU       $40                 Buffer is currently busy
                      (   /dd/defs/rbf.d):00212         
                      (   /dd/defs/rbf.d):00213         ************************************
                      (   /dd/defs/rbf.d):00214         * Random Block Path Extension Format
                      (   /dd/defs/rbf.d):00215         *
                      (   /dd/defs/rbf.d):00216         * RBF paths under Level Two have additional information that
                      (   /dd/defs/rbf.d):00217         * is referenced by the path extension area.
                      (   /dd/defs/rbf.d):00218         *
                      (   /dd/defs/rbf.d):00219                        ORG       0
0000                  (   /dd/defs/rbf.d):00220         PE.PE          RMB       1                   PE path number
0001                  (   /dd/defs/rbf.d):00221         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (   /dd/defs/rbf.d):00222         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (   /dd/defs/rbf.d):00223         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (   /dd/defs/rbf.d):00224         PE.Lock        RMB       1                   Path lockout status
0008                  (   /dd/defs/rbf.d):00225         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (   /dd/defs/rbf.d):00226         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (   /dd/defs/rbf.d):00227         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (   /dd/defs/rbf.d):00228         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (   /dd/defs/rbf.d):00229         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (   /dd/defs/rbf.d):00230         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (   /dd/defs/rbf.d):00231         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (   /dd/defs/rbf.d):00232         PE.SigSg       RMB       1                   Signal code to send
0018                  (   /dd/defs/rbf.d):00233         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (   /dd/defs/rbf.d):00234                        RMB       32-.                Reserved
0020                  (   /dd/defs/rbf.d):00235         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (   /dd/defs/rbf.d):00236         
                      (   /dd/defs/rbf.d):00237         * PE.Lock status codes
     0000             (   /dd/defs/rbf.d):00238         Unlocked       EQU       0                   No portion of file is locked
     0001             (   /dd/defs/rbf.d):00239         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (   /dd/defs/rbf.d):00240         FileLock       EQU       2                   Entire file locked
     0004             (   /dd/defs/rbf.d):00241         EofLock        EQU       4                   End of file is locked
                      (   /dd/defs/rbf.d):00242         
                      (   /dd/defs/rbf.d):00243         
                      (   /dd/defs/rbf.d):00244                        PAG
                      (   /dd/defs/rbf.d):00245         ***********************
                      (   /dd/defs/rbf.d):00246         * LSN0 Disk Data Format
                      (   /dd/defs/rbf.d):00247         *
                      (   /dd/defs/rbf.d):00248         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (   /dd/defs/rbf.d):00249         * and contains information about the device's size and format.
                      (   /dd/defs/rbf.d):00250         *
                      (   /dd/defs/rbf.d):00251                        ORG       0
0000                  (   /dd/defs/rbf.d):00252         DD.TOT         RMB       3                   Total number of sectors
0003                  (   /dd/defs/rbf.d):00253         DD.TKS         RMB       1                   Track size in sectors
0004                  (   /dd/defs/rbf.d):00254         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (   /dd/defs/rbf.d):00255         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (   /dd/defs/rbf.d):00256         DD.DIR         RMB       3                   Address of root directory fd
000B                  (   /dd/defs/rbf.d):00257         DD.OWN         RMB       2                   Owner
000D                  (   /dd/defs/rbf.d):00258         DD.ATT         RMB       1                   Attributes
000E                  (   /dd/defs/rbf.d):00259         DD.DSK         RMB       2                   Disk ID
0010                  (   /dd/defs/rbf.d):00260         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (   /dd/defs/rbf.d):00261         DD.SPT         RMB       2                   Sectors/track
0013                  (   /dd/defs/rbf.d):00262         DD.RES         RMB       2                   Reserved for future use
     0015             (   /dd/defs/rbf.d):00263         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (   /dd/defs/rbf.d):00264         DD.BT          RMB       3                   System bootstrap sector
0018                  (   /dd/defs/rbf.d):00265         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (   /dd/defs/rbf.d):00266         DD.DAT         RMB       5                   Creation date
001F                  (   /dd/defs/rbf.d):00267         DD.NAM         RMB       32                  Volume name
003F                  (   /dd/defs/rbf.d):00268         DD.OPT         RMB       32                  Option area
                      (   /dd/defs/rbf.d):00269         
                      (   /dd/defs/rbf.d):00270         *************************
                      (   /dd/defs/rbf.d):00271         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (   /dd/defs/rbf.d):00272                 ORG $60         More options from device descriptor
0060                  (   /dd/defs/rbf.d):00273         VD.STP      RMB 1   This is for the /sh and /ih virtual disks in HDBDOS
0061                  (   /dd/defs/rbf.d):00274         VD.OFS      RMB 3   This is DT.WPC and DT.OSF combined, might be more
                      (   /dd/defs/rbf.d):00275         
                      (   /dd/defs/rbf.d):00276         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (   /dd/defs/rbf.d):00277         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (   /dd/defs/rbf.d):00278         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (   /dd/defs/rbf.d):00279         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (   /dd/defs/rbf.d):00280         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (   /dd/defs/rbf.d):00281         
                      (   /dd/defs/rbf.d):00282         
                      (   /dd/defs/rbf.d):00283                        PAG
                      (   /dd/defs/rbf.d):00284         ************************
                      (   /dd/defs/rbf.d):00285         * File Descriptor Format
                      (   /dd/defs/rbf.d):00286         *
                      (   /dd/defs/rbf.d):00287         * The file descriptor is a sector that is present for every file
                      (   /dd/defs/rbf.d):00288         * on an RBF device.  It contains attributes, modification dates,
                      (   /dd/defs/rbf.d):00289         * and segment information on a file.
                      (   /dd/defs/rbf.d):00290         *
                      (   /dd/defs/rbf.d):00291                        ORG       0
0000                  (   /dd/defs/rbf.d):00292         FD.ATT         RMB       1                   Attributes
0001                  (   /dd/defs/rbf.d):00293         FD.OWN         RMB       2                   Owner
0003                  (   /dd/defs/rbf.d):00294         FD.DAT         RMB       5                   Date last modified
0008                  (   /dd/defs/rbf.d):00295         FD.LNK         RMB       1                   Link count
0009                  (   /dd/defs/rbf.d):00296         FD.SIZ         RMB       4                   File size
000D                  (   /dd/defs/rbf.d):00297         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (   /dd/defs/rbf.d):00298         FD.SEG         EQU       .                   Beginning of segment list
                      (   /dd/defs/rbf.d):00299         * Segment List Entry Format
                      (   /dd/defs/rbf.d):00300                        ORG       0
0000                  (   /dd/defs/rbf.d):00301         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (   /dd/defs/rbf.d):00302         FDSL.B         RMB       2                   Segment size
     0005             (   /dd/defs/rbf.d):00303         FDSL.S         EQU       .                   Segment list entry size
     00FB             (   /dd/defs/rbf.d):00304         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (   /dd/defs/rbf.d):00305         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (   /dd/defs/rbf.d):00306         MINSEC         SET       16
                      (   /dd/defs/rbf.d):00307         
                      (   /dd/defs/rbf.d):00308         
                      (   /dd/defs/rbf.d):00309                        PAG
                      (   /dd/defs/rbf.d):00310         ************************
                      (   /dd/defs/rbf.d):00311         * Directory Entry Format
                      (   /dd/defs/rbf.d):00312         *
                      (   /dd/defs/rbf.d):00313         * Directory entries are part of a directory and define the name
                      (   /dd/defs/rbf.d):00314         * of the file, as well as a pointer to its file descriptor.
                      (   /dd/defs/rbf.d):00315         *
                      (   /dd/defs/rbf.d):00316                        ORG       0
0000                  (   /dd/defs/rbf.d):00317         DIR.NM         RMB       29                  File name
001D                  (   /dd/defs/rbf.d):00318         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (   /dd/defs/rbf.d):00319         DIR.SZ         EQU       .                   Directory record size
                      (   /dd/defs/rbf.d):00320         
                      (   /dd/defs/rbf.d):00321         
                      (   /dd/defs/rbf.d):00322                        PAG
                      (   /dd/defs/rbf.d):00323         ********************
                      (   /dd/defs/rbf.d):00324         * RBF Static Storage
                      (   /dd/defs/rbf.d):00325         *
                      (   /dd/defs/rbf.d):00326         * Overall Disk Static Storage
                      (   /dd/defs/rbf.d):00327         *
                      (   /dd/defs/rbf.d):00328         * Note:  This does not reserve any memory for drive tables.  Each
                      (   /dd/defs/rbf.d):00329         *        driver is responsible for reserving sufficient memory for
                      (   /dd/defs/rbf.d):00330         *        the appropriate number of tables.
                      (   /dd/defs/rbf.d):00331         *
                      (   /dd/defs/rbf.d):00332                        ORG       V.USER              Reserve required           ($06)
0006                  (   /dd/defs/rbf.d):00333         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (   /dd/defs/rbf.d):00334                        RMB       8                   reserved                   ($08)
     000F             (   /dd/defs/rbf.d):00335         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (   /dd/defs/rbf.d):00336         
                      (   /dd/defs/rbf.d):00337                        PAG
                      (   /dd/defs/rbf.d):00338         ****************
                      (   /dd/defs/rbf.d):00339         * Global Storage For Disk Drive Tables
                      (   /dd/defs/rbf.d):00340         *
                      (   /dd/defs/rbf.d):00341         * Each table contains the first 'DD.SIZ' bytes from
                      (   /dd/defs/rbf.d):00342         * LSN 0, and the current track, stepping rate,
                      (   /dd/defs/rbf.d):00343         * bitmap use flag, and disk type.
                      (   /dd/defs/rbf.d):00344         *
                      (   /dd/defs/rbf.d):00345                        ORG       0
0000                  (   /dd/defs/rbf.d):00346                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (   /dd/defs/rbf.d):00347         V.TRAK         RMB       2                   Current track
0017                  (   /dd/defs/rbf.d):00348         V.BMB          RMB       1                   Bit-map use flag
0018                  (   /dd/defs/rbf.d):00349         V.FileHd       RMB       2                   Open file list for this drive
001A                  (   /dd/defs/rbf.d):00350         V.DiskID       RMB       2                   Disk ID
001C                  (   /dd/defs/rbf.d):00351         V.BMapSz       RMB       1                   Bitmap Size
001D                  (   /dd/defs/rbf.d):00352         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (   /dd/defs/rbf.d):00353         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (   /dd/defs/rbf.d):00354         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (   /dd/defs/rbf.d):00355         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (   /dd/defs/rbf.d):00356         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (   /dd/defs/rbf.d):00357                        RMB       4                   Reserved
     0026             (   /dd/defs/rbf.d):00358         DRVMEM         EQU       .
                      (   /dd/defs/rbf.d):00359         
                      (   /dd/defs/rbf.d):00360         
                      ( /dd/defs/deffile):00008                  use   /dd/defs/scf.d
                      (   /dd/defs/scf.d):00001         ********************************************************************
                      (   /dd/defs/scf.d):00002         * scf.d - Sequential Character File Manager Definitions
                      (   /dd/defs/scf.d):00003         *
                      (   /dd/defs/scf.d):00004         * $Id$
                      (   /dd/defs/scf.d):00005         *
                      (   /dd/defs/scf.d):00006         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (   /dd/defs/scf.d):00007         * that define the logical structure of a serial device.
                      (   /dd/defs/scf.d):00008         *
                      (   /dd/defs/scf.d):00009         * The data structures in this file give SCF its 'personality' and are used
                      (   /dd/defs/scf.d):00010         * by SCF itself, as well as applications that will require disk I/O.
                      (   /dd/defs/scf.d):00011         *
                      (   /dd/defs/scf.d):00012         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/scf.d):00013         * Comment
                      (   /dd/defs/scf.d):00014         * ------------------------------------------------------------------
                      (   /dd/defs/scf.d):00015         *          1984/01/11  YO
                      (   /dd/defs/scf.d):00016         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (   /dd/defs/scf.d):00017         *
                      (   /dd/defs/scf.d):00018         *          1985/04/20  Mark G. Hawkins
                      (   /dd/defs/scf.d):00019         * Added V.PDLHd Path Descriptor List Head.
                      (   /dd/defs/scf.d):00020         *
                      (   /dd/defs/scf.d):00021         *          1985/04/21  Mark G. Hawkins
                      (   /dd/defs/scf.d):00022         * Added PD.PLP and PD.PST for modem handling.
                      (   /dd/defs/scf.d):00023         *
                      (   /dd/defs/scf.d):00024         *          1987/06/23  Kevin K. Darling
                      (   /dd/defs/scf.d):00025         * Updated with Dev Desc info.
                      (   /dd/defs/scf.d):00026         *
                      (   /dd/defs/scf.d):00027         *          1998/10/03  Boisy G. Pitre
                      (   /dd/defs/scf.d):00028         * Consolidated L1/L2 scfdefs.
                      (   /dd/defs/scf.d):00029         *
                      (   /dd/defs/scf.d):00030         *          2003/01/21  Boisy G. Pitre
                      (   /dd/defs/scf.d):00031         * Added symbolics for enhanced SCF line editing.
                      (   /dd/defs/scf.d):00032         *
                      (   /dd/defs/scf.d):00033         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/scf.d):00034         * Updated comments for clarity.
                      (   /dd/defs/scf.d):00035         *
                      (   /dd/defs/scf.d):00036         *          2004/05/17  Boisy G. Pitre
                      (   /dd/defs/scf.d):00037         * Added higher baud rates.
                      (   /dd/defs/scf.d):00038         
                      (   /dd/defs/scf.d):00039                        NAM       scf.d
                      (   /dd/defs/scf.d):00040                        TTL       Sequential File Manager Definitions
                      (   /dd/defs/scf.d):00041         
                      (   /dd/defs/scf.d):00042                        PAG
                      (   /dd/defs/scf.d):00043         *******************************
                      (   /dd/defs/scf.d):00044         * SCF Device Descriptor Offsets
                      (   /dd/defs/scf.d):00045         *
                      (   /dd/defs/scf.d):00046         * These definitions are for SCF device descriptors.
                      (   /dd/defs/scf.d):00047         
                      (   /dd/defs/scf.d):00048                        ORG       M$DTyp
0012                  (   /dd/defs/scf.d):00049         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (   /dd/defs/scf.d):00050         IT.UPC         RMB       1                   Uppercase flag
0014                  (   /dd/defs/scf.d):00051         IT.BSO         RMB       1                   Backspace behavior
0015                  (   /dd/defs/scf.d):00052         IT.DLO         RMB       1                   Delete behavior
0016                  (   /dd/defs/scf.d):00053         IT.EKO         RMB       1                   Echo flag
0017                  (   /dd/defs/scf.d):00054         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (   /dd/defs/scf.d):00055         IT.NUL         RMB       1                   End-of-line null count
0019                  (   /dd/defs/scf.d):00056         IT.PAU         RMB       1                   Page pause flag
001A                  (   /dd/defs/scf.d):00057         IT.PAG         RMB       1                   Number of lines per page
001B                  (   /dd/defs/scf.d):00058         IT.BSP         RMB       1                   Backspace character
001C                  (   /dd/defs/scf.d):00059         IT.DEL         RMB       1                   Delete-line character
001D                  (   /dd/defs/scf.d):00060         IT.EOR         RMB       1                   End-of-record character
001E                  (   /dd/defs/scf.d):00061         IT.EOF         RMB       1                   End-of-file character
001F                  (   /dd/defs/scf.d):00062         IT.RPR         RMB       1                   Reprint-line character
0020                  (   /dd/defs/scf.d):00063         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (   /dd/defs/scf.d):00064         IT.PSC         RMB       1                   Pause character
0022                  (   /dd/defs/scf.d):00065         IT.INT         RMB       1                   Interrupt character
0023                  (   /dd/defs/scf.d):00066         IT.QUT         RMB       1                   Quit character
0024                  (   /dd/defs/scf.d):00067         IT.BSE         RMB       1                   Backspace echo character
0025                  (   /dd/defs/scf.d):00068         IT.OVF         RMB       1                   Bell character
0026                  (   /dd/defs/scf.d):00069         IT.PAR         RMB       1                   Parity
0027                  (   /dd/defs/scf.d):00070         IT.BAU         RMB       1                   Baud rate
0028                  (   /dd/defs/scf.d):00071         IT.D2P         RMB       2                   Attached device name string offset
002A                  (   /dd/defs/scf.d):00072         IT.XON         RMB       1                   X-ON character
002B                  (   /dd/defs/scf.d):00073         IT.XOFF        RMB       1                   X-OFF character
002C                  (   /dd/defs/scf.d):00074         IT.COL         RMB       1                   Number of columns for display
002D                  (   /dd/defs/scf.d):00075         IT.ROW         RMB       1                   Number of rows for display
002E                  (   /dd/defs/scf.d):00076         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (   /dd/defs/scf.d):00077         
                      (   /dd/defs/scf.d):00078         * Window Descriptor Additions
                      (   /dd/defs/scf.d):00079         * For CoCo window, where IT.PAR = $80
                      (   /dd/defs/scf.d):00080                        ORG       IT.ROW+1
002E                  (   /dd/defs/scf.d):00081         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (   /dd/defs/scf.d):00082         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (   /dd/defs/scf.d):00083         IT.STY         RMB       1                   Screen type default
0031                  (   /dd/defs/scf.d):00084         IT.CPX         RMB       1                   Column start default
0032                  (   /dd/defs/scf.d):00085         IT.CPY         RMB       1                   Row start default
0033                  (   /dd/defs/scf.d):00086         IT.FGC         RMB       1                   Foreground color default
0034                  (   /dd/defs/scf.d):00087         IT.BGC         RMB       1                   Background color default
0035                  (   /dd/defs/scf.d):00088         IT.BDC         RMB       1                   Border color default
                      (   /dd/defs/scf.d):00089         
                      (   /dd/defs/scf.d):00090         
                      (   /dd/defs/scf.d):00091                        PAG
                      (   /dd/defs/scf.d):00092         ********************
                      (   /dd/defs/scf.d):00093         * SCF Static Storage
                      (   /dd/defs/scf.d):00094         *
                      (   /dd/defs/scf.d):00095         * SCF devices must reserve this space for SCF
                      (   /dd/defs/scf.d):00096         *
                      (   /dd/defs/scf.d):00097                        ORG       V.USER
0006                  (   /dd/defs/scf.d):00098         V.TYPE         RMB       1                   Device type or parity
0007                  (   /dd/defs/scf.d):00099         V.LINE         RMB       1                   Lines left until end of page
0008                  (   /dd/defs/scf.d):00100         V.PAUS         RMB       1                   Immediate Pause request
0009                  (   /dd/defs/scf.d):00101         V.DEV2         RMB       2                   Attached device's static
000B                  (   /dd/defs/scf.d):00102         V.INTR         RMB       1                   Interrupt char
000C                  (   /dd/defs/scf.d):00103         V.QUIT         RMB       1                   Quit char
000D                  (   /dd/defs/scf.d):00104         V.PCHR         RMB       1                   Pause char
000E                  (   /dd/defs/scf.d):00105         V.ERR          RMB       1                   Accumulated errors
000F                  (   /dd/defs/scf.d):00106         V.XON          RMB       1                   X-On char
0010                  (   /dd/defs/scf.d):00107         V.XOFF         RMB       1                   X-Off char
0011                  (   /dd/defs/scf.d):00108         V.KANJI        RMB       1                   Kanji mode flag
0012                  (   /dd/defs/scf.d):00109         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (   /dd/defs/scf.d):00110         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (   /dd/defs/scf.d):00111         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (   /dd/defs/scf.d):00112         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (   /dd/defs/scf.d):00113         V.SCF          EQU       .                   Total SCF manager static overhead
                      (   /dd/defs/scf.d):00114         
                      (   /dd/defs/scf.d):00115         
                      (   /dd/defs/scf.d):00116                        PAG
                      (   /dd/defs/scf.d):00117         ***********************
                      (   /dd/defs/scf.d):00118         * Character Definitions
                      (   /dd/defs/scf.d):00119         *
     0000             (   /dd/defs/scf.d):00120         C$NULL         SET       0                   Null char
     0001             (   /dd/defs/scf.d):00121         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (   /dd/defs/scf.d):00122         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (   /dd/defs/scf.d):00123         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (   /dd/defs/scf.d):00124         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (   /dd/defs/scf.d):00125         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (   /dd/defs/scf.d):00126         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (   /dd/defs/scf.d):00127         C$RARR         SET       $09                 Right Arrow
     0005             (   /dd/defs/scf.d):00128         C$EL           SET       $05                 Erase Line
     000A             (   /dd/defs/scf.d):00129         C$LF           SET       $0A                 Line feed
     000B             (   /dd/defs/scf.d):00130         C$HOME         SET       $0B                 Home position Code
     0015             (   /dd/defs/scf.d):00131         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (   /dd/defs/scf.d):00132         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (   /dd/defs/scf.d):00133         C$CR           SET       $0D                 Carriage return
     000C             (   /dd/defs/scf.d):00134         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (   /dd/defs/scf.d):00135         C$SI           SET       $0F                 Shift IN Code
     000E             (   /dd/defs/scf.d):00136         C$SO           SET       $0E                 Shift OUT Code
     0010             (   /dd/defs/scf.d):00137         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (   /dd/defs/scf.d):00138         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (   /dd/defs/scf.d):00139         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (   /dd/defs/scf.d):00140         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (   /dd/defs/scf.d):00141         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (   /dd/defs/scf.d):00142         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (   /dd/defs/scf.d):00143         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (   /dd/defs/scf.d):00144         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (   /dd/defs/scf.d):00145         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (   /dd/defs/scf.d):00146         C$RGT          SET       $1C                 Cursor right
     001D             (   /dd/defs/scf.d):00147         C$LFT          SET       $1D                 Cursor left
     001E             (   /dd/defs/scf.d):00148         C$UP           SET       $1E                 Cursor up
     001F             (   /dd/defs/scf.d):00149         C$DWN          SET       $1F                 Cursor down
     0020             (   /dd/defs/scf.d):00150         C$SPAC         SET       $20                 Space
     002E             (   /dd/defs/scf.d):00151         C$PERD         SET       '.
     002C             (   /dd/defs/scf.d):00152         C$COMA         SET       ',
                      (   /dd/defs/scf.d):00153         
                      (   /dd/defs/scf.d):00154         
                      (   /dd/defs/scf.d):00155                        PAG
                      (   /dd/defs/scf.d):00156         *********************************************
                      (   /dd/defs/scf.d):00157         * Sequential Character Path Descriptor Format
                      (   /dd/defs/scf.d):00158         *
                      (   /dd/defs/scf.d):00159         * A path descriptor is created for every new path that is open
                      (   /dd/defs/scf.d):00160         * via the I$Open system call (processed by IOMan).  Process
                      (   /dd/defs/scf.d):00161         * descriptors track state information of a path.
                      (   /dd/defs/scf.d):00162         *
                      (   /dd/defs/scf.d):00163                        ORG       PD.FST
000A                  (   /dd/defs/scf.d):00164         PD.DV2         RMB       2                   Output device table pointer
000C                  (   /dd/defs/scf.d):00165         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (   /dd/defs/scf.d):00166         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (   /dd/defs/scf.d):00167         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (   /dd/defs/scf.d):00168         PD.STS         RMB       2                   Status routine module addr
0012                  (   /dd/defs/scf.d):00169         PD.STM         RMB       2                   Reserved for status routine
                      (   /dd/defs/scf.d):00170                        ORG       PD.OPT
0020                  (   /dd/defs/scf.d):00171                        RMB       1                   Device type
0021                  (   /dd/defs/scf.d):00172         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (   /dd/defs/scf.d):00173         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (   /dd/defs/scf.d):00174         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (   /dd/defs/scf.d):00175         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (   /dd/defs/scf.d):00176         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (   /dd/defs/scf.d):00177         PD.NUL         RMB       1                   End of Line null count
0027                  (   /dd/defs/scf.d):00178         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (   /dd/defs/scf.d):00179         PD.PAG         RMB       1                   Lines per page
0029                  (   /dd/defs/scf.d):00180         PD.BSP         RMB       1                   Backspace character
002A                  (   /dd/defs/scf.d):00181         PD.DEL         RMB       1                   Delete Line character
002B                  (   /dd/defs/scf.d):00182         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (   /dd/defs/scf.d):00183         PD.EOF         RMB       1                   End of File character
002D                  (   /dd/defs/scf.d):00184         PD.RPR         RMB       1                   Repront Line character
002E                  (   /dd/defs/scf.d):00185         PD.DUP         RMB       1                   Dup Last Line character
002F                  (   /dd/defs/scf.d):00186         PD.PSC         RMB       1                   Pause character
0030                  (   /dd/defs/scf.d):00187         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (   /dd/defs/scf.d):00188         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (   /dd/defs/scf.d):00189         PD.BSE         RMB       1                   Backspace echo character
0033                  (   /dd/defs/scf.d):00190         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (   /dd/defs/scf.d):00191         PD.PAR         RMB       1                   Parity code
0035                  (   /dd/defs/scf.d):00192         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (   /dd/defs/scf.d):00193         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (   /dd/defs/scf.d):00194         PD.XON         RMB       1                   ACIA X-ON character
0039                  (   /dd/defs/scf.d):00195         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (   /dd/defs/scf.d):00196         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (   /dd/defs/scf.d):00197         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (   /dd/defs/scf.d):00198         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (   /dd/defs/scf.d):00199         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (   /dd/defs/scf.d):00200         PD.PST         RMB       1                   Current path status
                      (   /dd/defs/scf.d):00201         
                      (   /dd/defs/scf.d):00202         
                      (   /dd/defs/scf.d):00203         * PD.PST values Path Descriptor Status byte
                      (   /dd/defs/scf.d):00204         *
     0001             (   /dd/defs/scf.d):00205         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (   /dd/defs/scf.d):00206         
                      (   /dd/defs/scf.d):00207         
                      (   /dd/defs/scf.d):00208         * PD.PAR definitions
                      (   /dd/defs/scf.d):00209         *
                      (   /dd/defs/scf.d):00210         * Parity
     0000             (   /dd/defs/scf.d):00211         PARNONE        EQU       %00000000
     0020             (   /dd/defs/scf.d):00212         PARODD         EQU       %00100000
     0060             (   /dd/defs/scf.d):00213         PAREVEN        EQU       %01100000
     00A0             (   /dd/defs/scf.d):00214         PARMARK        EQU       %10100000
     00E0             (   /dd/defs/scf.d):00215         PARSPACE       EQU       %11100000
     00E0             (   /dd/defs/scf.d):00216         PARMASK        EQU       %11100000
                      (   /dd/defs/scf.d):00217         
                      (   /dd/defs/scf.d):00218         * PD.BAU definitions
                      (   /dd/defs/scf.d):00219         *
                      (   /dd/defs/scf.d):00220         * Baud rate
     0000             (   /dd/defs/scf.d):00221         B110           EQU       %00000000
     0001             (   /dd/defs/scf.d):00222         B300           EQU       %00000001
     0002             (   /dd/defs/scf.d):00223         B600           EQU       %00000010
     0003             (   /dd/defs/scf.d):00224         B1200          EQU       %00000011
     0004             (   /dd/defs/scf.d):00225         B2400          EQU       %00000100
     0005             (   /dd/defs/scf.d):00226         B4800          EQU       %00000101
     0006             (   /dd/defs/scf.d):00227         B9600          EQU       %00000110
     0007             (   /dd/defs/scf.d):00228         B19200         EQU       %00000111
     0008             (   /dd/defs/scf.d):00229         B38400         EQU       %00001000
     0009             (   /dd/defs/scf.d):00230         B57600         EQU       %00001001
     000A             (   /dd/defs/scf.d):00231         B115200        EQU       %00001010
                      (   /dd/defs/scf.d):00232         * Word size
     0000             (   /dd/defs/scf.d):00233         WORD8          EQU       %00000000
     0020             (   /dd/defs/scf.d):00234         WORD7          EQU       %00100000
                      (   /dd/defs/scf.d):00235         * Stop bits
     0000             (   /dd/defs/scf.d):00236         STOP1          EQU       %00000000
     0010             (   /dd/defs/scf.d):00237         STOP2          EQU       %00010000
                      (   /dd/defs/scf.d):00238         
                      ( /dd/defs/deffile):00009                  use   /dd/defs/coco.d
                      (  /dd/defs/coco.d):00001         ********************************************************************
                      (  /dd/defs/coco.d):00002         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (  /dd/defs/coco.d):00003         *
                      (  /dd/defs/coco.d):00004         * $Id$
                      (  /dd/defs/coco.d):00005         *
                      (  /dd/defs/coco.d):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (  /dd/defs/coco.d):00007         * Comment
                      (  /dd/defs/coco.d):00008         * ------------------------------------------------------------------
                      (  /dd/defs/coco.d):00009         *          1998/10/13  Boisy G. Pitre
                      (  /dd/defs/coco.d):00010         * Added defs by Bruce Isted from his Eliminator archive.
                      (  /dd/defs/coco.d):00011         *
                      (  /dd/defs/coco.d):00012         *          1998/10/31  Boisy G. Pitre
                      (  /dd/defs/coco.d):00013         * Merged cc3global.defs into this file.
                      (  /dd/defs/coco.d):00014         *
                      (  /dd/defs/coco.d):00015         *          2002/04/30  Boisy G. Pitre
                      (  /dd/defs/coco.d):00016         * Merged Level One and Level Two sysdefs.
                      (  /dd/defs/coco.d):00017         *
                      (  /dd/defs/coco.d):00018         *          2002/06/22  Boisy G. Pitre
                      (  /dd/defs/coco.d):00019         * Removed PIA.U4 and PIA.U8, improved comments
                      (  /dd/defs/coco.d):00020         *
                      (  /dd/defs/coco.d):00021         *          2003/11/05  Robert Gault
                      (  /dd/defs/coco.d):00022         * Made changes in window globals and grfdrv memory to handle regW
                      (  /dd/defs/coco.d):00023         * in 6809 systems.
                      (  /dd/defs/coco.d):00024         *
                      (  /dd/defs/coco.d):00025         *          2003/11/30  Boisy G. Pitre
                      (  /dd/defs/coco.d):00026         * Statics now are prefaced with V. to identify them easier in source.
                      (  /dd/defs/coco.d):00027         *
                      (  /dd/defs/coco.d):00028         *          2004/07/18  Boisy G. Pitre
                      (  /dd/defs/coco.d):00029         * Moved CoCo 3 Window stuff into cc3iodefs
                      (  /dd/defs/coco.d):00030         *
                      (  /dd/defs/coco.d):00031         *          2012/02/24  Boisy G. Pitre
                      (  /dd/defs/coco.d):00032         * Consolidated all CoCo-specific defs files into here.
                      (  /dd/defs/coco.d):00033         
                      (  /dd/defs/coco.d):00034                        NAM       CoCoDefs
                      (  /dd/defs/coco.d):00035                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (  /dd/defs/coco.d):00036         
                      (  /dd/defs/coco.d):00037         
                      (  /dd/defs/coco.d):00038         **********************
                      (  /dd/defs/coco.d):00039         * CPU Type Definitions
                      (  /dd/defs/coco.d):00040         *
     0001             (  /dd/defs/coco.d):00041         Color          SET       1
     0002             (  /dd/defs/coco.d):00042         Color3         SET       2
     0002             (  /dd/defs/coco.d):00043         CPUType        SET       Color3
                      (  /dd/defs/coco.d):00044         
                      (  /dd/defs/coco.d):00045         
                      (  /dd/defs/coco.d):00046         ******************************
                      (  /dd/defs/coco.d):00047         * Clock Speed Type Definitions
                      (  /dd/defs/coco.d):00048         *
     0001             (  /dd/defs/coco.d):00049         OneMHz         EQU       1
     0002             (  /dd/defs/coco.d):00050         TwoMHz         EQU       2
     0002             (  /dd/defs/coco.d):00051         CPUSpeed       SET       TwoMHz
                      (  /dd/defs/coco.d):00052         
                      (  /dd/defs/coco.d):00053         
                      (  /dd/defs/coco.d):00054         **********************************
                      (  /dd/defs/coco.d):00055         * Power Line Frequency Definitions
                      (  /dd/defs/coco.d):00056         *
     0001             (  /dd/defs/coco.d):00057         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (  /dd/defs/coco.d):00058         Hz60           EQU       2                   Assemble clock for 60 hz power
     0002             (  /dd/defs/coco.d):00059         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (  /dd/defs/coco.d):00060         
                      (  /dd/defs/coco.d):00061         
                      (  /dd/defs/coco.d):00062         **********************************
                      (  /dd/defs/coco.d):00063         * Ticks per second
                      (  /dd/defs/coco.d):00064         *
     003C             (  /dd/defs/coco.d):00065         TkPerSec       SET       60
                      (  /dd/defs/coco.d):00066         
                      (  /dd/defs/coco.d):00067         
                      (  /dd/defs/coco.d):00068         ******************
                      (  /dd/defs/coco.d):00069         * ACIA type set up
                      (  /dd/defs/coco.d):00070         *
                      (  /dd/defs/coco.d):00071                        ORG       1
0001                  (  /dd/defs/coco.d):00072         ACIA6850       RMB       1                   MC6850 acia.
0002                  (  /dd/defs/coco.d):00073         ACIA6551       RMB       1                   SY6551 acia.
0003                  (  /dd/defs/coco.d):00074         ACIA2661       RMB       1                   SC2661 acia.
     0002             (  /dd/defs/coco.d):00075         ACIATYPE       SET       ACIA6551
                      (  /dd/defs/coco.d):00076         
                      (  /dd/defs/coco.d):00077         
                      (  /dd/defs/coco.d):00078         ****************************************
                      (  /dd/defs/coco.d):00079         * Special character Bit position equates
                      (  /dd/defs/coco.d):00080         *
     0001             (  /dd/defs/coco.d):00081         SHIFTBIT       EQU       %00000001
     0002             (  /dd/defs/coco.d):00082         CNTRLBIT       EQU       %00000010
     0004             (  /dd/defs/coco.d):00083         ALTERBIT       EQU       %00000100
     0008             (  /dd/defs/coco.d):00084         UPBIT          EQU       %00001000
     0010             (  /dd/defs/coco.d):00085         DOWNBIT        EQU       %00010000
     0020             (  /dd/defs/coco.d):00086         LEFTBIT        EQU       %00100000
     0040             (  /dd/defs/coco.d):00087         RIGHTBIT       EQU       %01000000
     0080             (  /dd/defs/coco.d):00088         SPACEBIT       EQU       %10000000
                      (  /dd/defs/coco.d):00089         
                      (  /dd/defs/coco.d):00090         
                      (  /dd/defs/coco.d):00091         ******************
                      (  /dd/defs/coco.d):00092         * Device addresses for miscellaneous hardware
                      (  /dd/defs/coco.d):00093         *
     FF68             (  /dd/defs/coco.d):00094         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (  /dd/defs/coco.d):00095         A.ModP         SET       $FF6C               ModPak Address
     FF40             (  /dd/defs/coco.d):00096         DPort          SET       $FF40               Disk controller base address
     FF7F             (  /dd/defs/coco.d):00097         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (  /dd/defs/coco.d):00098         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (  /dd/defs/coco.d):00099         PIA0Base       EQU       $FF00
     FF20             (  /dd/defs/coco.d):00100         PIA1Base       EQU       $FF20
                      (  /dd/defs/coco.d):00101         
                      (  /dd/defs/coco.d):00102         
                      (  /dd/defs/coco.d):00103         ******************
                      (  /dd/defs/coco.d):00104         * VDG Devices
                      (  /dd/defs/coco.d):00105         *
     FFC0             (  /dd/defs/coco.d):00106         A.TermV        SET       $FFC0               VDG Term
     FFC1             (  /dd/defs/coco.d):00107         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (  /dd/defs/coco.d):00108         A.V2           SET       $FFC2
     FFC3             (  /dd/defs/coco.d):00109         A.V3           SET       $FFC3
     FFC4             (  /dd/defs/coco.d):00110         A.V4           SET       $FFC4
     FFC5             (  /dd/defs/coco.d):00111         A.V5           SET       $FFC5
     FFC6             (  /dd/defs/coco.d):00112         A.V6           SET       $FFC6
     FFC7             (  /dd/defs/coco.d):00113         A.V7           SET       $FFC7
                      (  /dd/defs/coco.d):00114         
                      (  /dd/defs/coco.d):00115         
                      (  /dd/defs/coco.d):00116         
                      (  /dd/defs/coco.d):00117         ********************************
                      (  /dd/defs/coco.d):00118         * Boot defs for NitrOS-9 Level 1
                      (  /dd/defs/coco.d):00119         *
                      (  /dd/defs/coco.d):00120         * These defs are not strictly for 'Boot', but are for booting the
                      (  /dd/defs/coco.d):00121         * system.
                      (  /dd/defs/coco.d):00122         *
                      (  /dd/defs/coco.d):00123         
                      (  /dd/defs/coco.d):00124         
                      (  /dd/defs/coco.d):00125         ******************************************
                      (  /dd/defs/coco.d):00126         * Boot defs for NitrOS-9 Level 2 and above
                      (  /dd/defs/coco.d):00127         *
                      (  /dd/defs/coco.d):00128         * These defs are not strictly for 'Boot', but are for booting the
                      (  /dd/defs/coco.d):00129         * system.
                      (  /dd/defs/coco.d):00130         *
     ED00             (  /dd/defs/coco.d):00131         Bt.Start       SET       $ED00               Start address of the boot track in memory
     003B             (  /dd/defs/coco.d):00132         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (  /dd/defs/coco.d):00133         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (  /dd/defs/coco.d):00134         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
                      (  /dd/defs/coco.d):00135         
                      (  /dd/defs/coco.d):00136         
                      (  /dd/defs/coco.d):00137         * On the CoCo, the boot track is all of track 34
                      (  /dd/defs/coco.d):00138         
     0022             (  /dd/defs/coco.d):00139         Bt.Track       EQU       34                  Boot track
     0000             (  /dd/defs/coco.d):00140         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (  /dd/defs/coco.d):00141         
                      (  /dd/defs/coco.d):00142         
     1080             (  /dd/defs/coco.d):00143         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (  /dd/defs/coco.d):00144         
                      (  /dd/defs/coco.d):00145         
                      (  /dd/defs/coco.d):00146         
                      (  /dd/defs/coco.d):00147         *************************************************
                      (  /dd/defs/coco.d):00148         *
                      (  /dd/defs/coco.d):00149         * NitrOS-9 Level 1 Section
                      (  /dd/defs/coco.d):00150         *
                      (  /dd/defs/coco.d):00151         *************************************************
                      (  /dd/defs/coco.d):00152         
                      (  /dd/defs/coco.d):00153         
                      (  /dd/defs/coco.d):00154         
                      (  /dd/defs/coco.d):00155         *************************************************
                      (  /dd/defs/coco.d):00156         *
                      (  /dd/defs/coco.d):00157         * NitrOS-9 Level 2 Section
                      (  /dd/defs/coco.d):00158         *
                      (  /dd/defs/coco.d):00159         *************************************************
                      (  /dd/defs/coco.d):00160         
                      (  /dd/defs/coco.d):00161         ****************************************
                      (  /dd/defs/coco.d):00162         * Dynamic Address Translator Definitions
                      (  /dd/defs/coco.d):00163         *
     0008             (  /dd/defs/coco.d):00164         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (  /dd/defs/coco.d):00165         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (  /dd/defs/coco.d):00166         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (  /dd/defs/coco.d):00167         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (  /dd/defs/coco.d):00168         DAT.Task       EQU       $FF91               Task Register address
     0020             (  /dd/defs/coco.d):00169         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (  /dd/defs/coco.d):00170         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (  /dd/defs/coco.d):00171         DAT.Free       EQU       $333E               Free Block Number
     003F             (  /dd/defs/coco.d):00172         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (  /dd/defs/coco.d):00173         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (  /dd/defs/coco.d):00174         DAT.WrPr       EQU       0                   no write protect
     0000             (  /dd/defs/coco.d):00175         DAT.WrEn       EQU       0                   no write enable
     0000             (  /dd/defs/coco.d):00176         SysTask        EQU       0                   Coco System Task number
     003F             (  /dd/defs/coco.d):00177         IOBlock        EQU       $3F
     003F             (  /dd/defs/coco.d):00178         ROMBlock       EQU       $3F
     007F             (  /dd/defs/coco.d):00179         IOAddr         EQU       $7F
     0001             (  /dd/defs/coco.d):00180         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (  /dd/defs/coco.d):00181         RAMCount       EQU       1                   initial blocks of RAM
     0005             (  /dd/defs/coco.d):00182         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (  /dd/defs/coco.d):00183         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (  /dd/defs/coco.d):00184         ByteType       EQU       2                   chk entire block of RAM
     0001             (  /dd/defs/coco.d):00185         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (  /dd/defs/coco.d):00186         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (  /dd/defs/coco.d):00187         * NOTE: this check assumes any NotRAM with a module will
                      (  /dd/defs/coco.d):00188         *       always start with $87CD in first two bytes of block
     0001             (  /dd/defs/coco.d):00189         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (  /dd/defs/coco.d):00190         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (  /dd/defs/coco.d):00191         LastRAM        EQU       IOBlock             maximum RAM block number
                      (  /dd/defs/coco.d):00192         
                      (  /dd/defs/coco.d):00193         ***************************
                      (  /dd/defs/coco.d):00194         * Color Computer 3 Specific
                      (  /dd/defs/coco.d):00195         *
     0001             (  /dd/defs/coco.d):00196         MappedIO       EQU       true                (Actually False but it works better this way)
                      (  /dd/defs/coco.d):00197         
                      (  /dd/defs/coco.d):00198         ********************
                      (  /dd/defs/coco.d):00199         * Hardware addresses
                      (  /dd/defs/coco.d):00200         *
     FF00             (  /dd/defs/coco.d):00201         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (  /dd/defs/coco.d):00202         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (  /dd/defs/coco.d):00203         BordReg        EQU       $FF9A               Border color register
     FFB0             (  /dd/defs/coco.d):00204         PalAdr         EQU       $FFB0               Palette registers
                      (  /dd/defs/coco.d):00205         
     0007             (  /dd/defs/coco.d):00206         HW.Page        SET       $07                 Device descriptor hardware page
                      (  /dd/defs/coco.d):00207         
                      (  /dd/defs/coco.d):00208         * KrnBlk defines the block number of the 8K RAM block that is mapped to
                      (  /dd/defs/coco.d):00209         * the top of CPU address space ($E000-$FFFF) for the system process, and
                      (  /dd/defs/coco.d):00210         * which holds the Kernel. The top 2 pages of this CPU address space ($FFE0-
                      (  /dd/defs/coco.d):00211         * $FFFF) has two special properties. Firstly, it contains the I/O space.
                      (  /dd/defs/coco.d):00212         * Secondly, the parts that contain RAM map are not affected by the DAT
                      (  /dd/defs/coco.d):00213         * mappings but, instead, *always* map that RAM to a fixed RAM block
                      (  /dd/defs/coco.d):00214         * (KrnBlk). When a user process is mapped in, and requests enough memory,
                      (  /dd/defs/coco.d):00215         * it will end up with its own block assigned for CPU address space $E000-
                      (  /dd/defs/coco.d):00216         * $FFFF but the top of the address space is unusable by the user process:
                      (  /dd/defs/coco.d):00217         * it still contains the I/O and the bit of RAM that's mapped to KrnBlk.
                      (  /dd/defs/coco.d):00218         * Usually, the value of KrnBlk is fixed for a particular hardware design;
                      (  /dd/defs/coco.d):00219         * For the COCO GIME, it's always $3F.
     003F             (  /dd/defs/coco.d):00220         KrnBlk         SET       $3F
                      (  /dd/defs/coco.d):00221         
                      (  /dd/defs/coco.d):00222         
                      ( /dd/defs/deffile):00010                  use   /dd/defs/cocovtio.d
                      (/dd/defs/cocovtio):00001         ********************************************************************
                      (/dd/defs/cocovtio):00002         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (/dd/defs/cocovtio):00003         *
                      (/dd/defs/cocovtio):00004         * $Id$
                      (/dd/defs/cocovtio):00005         *
                      (/dd/defs/cocovtio):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/defs/cocovtio):00007         * Comment
                      (/dd/defs/cocovtio):00008         * ------------------------------------------------------------------
                      (/dd/defs/cocovtio):00009         *          2004/07/18  Boisy G. Pitre
                      (/dd/defs/cocovtio):00010         * Started from systype
                      (/dd/defs/cocovtio):00011         
                      (/dd/defs/cocovtio):00012                        NAM       VTIODefs
                      (/dd/defs/cocovtio):00013                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (/dd/defs/cocovtio):00014         
                      (/dd/defs/cocovtio):00015         * Max size of Get/Put buffer to copy between user and grfdrv. There is room for up to 128, but
                      (/dd/defs/cocovtio):00016         *   we may use some of that for other things. Leaving at OS-9 Level II default (72) for now.
                      (/dd/defs/cocovtio):00017         * May try increasing to higher (maybe 96?) to see if it makes a noticable difference GPLoading
                      (/dd/defs/cocovtio):00018         * fonts, etc. in EOU bootup.
                      (/dd/defs/cocovtio):00019         
     0048             (/dd/defs/cocovtio):00020         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (/dd/defs/cocovtio):00021         
                      (/dd/defs/cocovtio):00022         ****************
                      (/dd/defs/cocovtio):00023         * Window Devices
                      (/dd/defs/cocovtio):00024         *
                      (/dd/defs/cocovtio):00025                        ORG       $FF9F
FF9F                  (/dd/defs/cocovtio):00026         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (/dd/defs/cocovtio):00027         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (/dd/defs/cocovtio):00028         A.W1           RMB       1                   $FFA1
FFA2                  (/dd/defs/cocovtio):00029         A.W2           RMB       1                   $FFA2
FFA3                  (/dd/defs/cocovtio):00030         A.W3           RMB       1                   $FFA3
FFA4                  (/dd/defs/cocovtio):00031         A.W4           RMB       1                   $FFA4
FFA5                  (/dd/defs/cocovtio):00032         A.W5           RMB       1                   $FFA5
FFA6                  (/dd/defs/cocovtio):00033         A.W6           RMB       1                   $FFA6
FFA7                  (/dd/defs/cocovtio):00034         A.W7           RMB       1                   $FFA7
FFA8                  (/dd/defs/cocovtio):00035         A.W8           RMB       1                   $FFA8
FFA9                  (/dd/defs/cocovtio):00036         A.W9           RMB       1                   $FFA9
FFAA                  (/dd/defs/cocovtio):00037         A.W10          RMB       1                   $FFAA
FFAB                  (/dd/defs/cocovtio):00038         A.W11          RMB       1                   $FFAB
FFAC                  (/dd/defs/cocovtio):00039         A.W12          RMB       1                   $FFAC
FFAD                  (/dd/defs/cocovtio):00040         A.W13          RMB       1                   $FFAD
FFAE                  (/dd/defs/cocovtio):00041         A.W14          RMB       1                   $FFAE
FFAF                  (/dd/defs/cocovtio):00042         A.W15          RMB       1                   $FFAF
                      (/dd/defs/cocovtio):00043         
                      (/dd/defs/cocovtio):00044         **********************************
                      (/dd/defs/cocovtio):00045         * Pointer Device Packet Definition
                      (/dd/defs/cocovtio):00046         *
                      (/dd/defs/cocovtio):00047                        ORG       0
0000                  (/dd/defs/cocovtio):00048         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (/dd/defs/cocovtio):00049         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (/dd/defs/cocovtio):00050         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (/dd/defs/cocovtio):00051                        RMB       2                   reserved
0005                  (/dd/defs/cocovtio):00052         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (/dd/defs/cocovtio):00053         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (/dd/defs/cocovtio):00054         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (/dd/defs/cocovtio):00055         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (/dd/defs/cocovtio):00056         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (/dd/defs/cocovtio):00057         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (/dd/defs/cocovtio):00058         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (/dd/defs/cocovtio):00059         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (/dd/defs/cocovtio):00060         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (/dd/defs/cocovtio):00061         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (/dd/defs/cocovtio):00062                        RMB       2                   Reserved
0012                  (/dd/defs/cocovtio):00063         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (/dd/defs/cocovtio):00064         Pt.BDY         RMB       2                   Button down Y value
0016                  (/dd/defs/cocovtio):00065         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (/dd/defs/cocovtio):00066         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (/dd/defs/cocovtio):00067         Pt.AcX         RMB       2                   Actual X Value
001A                  (/dd/defs/cocovtio):00068         Pt.AcY         RMB       2                   Actual Y Value
001C                  (/dd/defs/cocovtio):00069         Pt.WRX         RMB       2                   Window Relative X
001E                  (/dd/defs/cocovtio):00070         Pt.WRY         RMB       2                   Window Relative Y
     0020             (/dd/defs/cocovtio):00071         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (/dd/defs/cocovtio):00072         
                      (/dd/defs/cocovtio):00073         **************************
                      (/dd/defs/cocovtio):00074         * window regions for mouse
                      (/dd/defs/cocovtio):00075         *
     0000             (/dd/defs/cocovtio):00076         WR.Cntnt       EQU       0                   content region
     0001             (/dd/defs/cocovtio):00077         WR.Cntrl       EQU       1                   control region
     0002             (/dd/defs/cocovtio):00078         WR.OfWin       EQU       2                   off window
                      (/dd/defs/cocovtio):00079         
                      (/dd/defs/cocovtio):00080         *************************************
                      (/dd/defs/cocovtio):00081         * Standard system get/put buffer defs
                      (/dd/defs/cocovtio):00082         *
                      (/dd/defs/cocovtio):00083         *
                      (/dd/defs/cocovtio):00084         * system group numbers
                      (/dd/defs/cocovtio):00085         *
                      (/dd/defs/cocovtio):00086                        ORG       200
00C8                  (/dd/defs/cocovtio):00087         Grp.Fnt        RMB       1                   font group
00C9                  (/dd/defs/cocovtio):00088         Grp.Clip       RMB       1                   clipboard group
00CA                  (/dd/defs/cocovtio):00089         Grp.Ptr        RMB       1                   pointer group
00CB                  (/dd/defs/cocovtio):00090         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (/dd/defs/cocovtio):00091         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (/dd/defs/cocovtio):00092         Grp.Pat6       RMB       1                   pattern group 16 color
                      (/dd/defs/cocovtio):00093         *
                      (/dd/defs/cocovtio):00094         * font buffer numbers
                      (/dd/defs/cocovtio):00095         *
                      (/dd/defs/cocovtio):00096                        ORG       1
0001                  (/dd/defs/cocovtio):00097         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (/dd/defs/cocovtio):00098         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (/dd/defs/cocovtio):00099         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (/dd/defs/cocovtio):00100         *
                      (/dd/defs/cocovtio):00101         * pattern buffer numbers
                      (/dd/defs/cocovtio):00102         *
                      (/dd/defs/cocovtio):00103                        ORG       1
0001                  (/dd/defs/cocovtio):00104         Pat.Dot        RMB       1
0002                  (/dd/defs/cocovtio):00105         Pat.Vrt        RMB       1
0003                  (/dd/defs/cocovtio):00106         Pat.Hrz        RMB       1
0004                  (/dd/defs/cocovtio):00107         Pat.XHtc       RMB       1
0005                  (/dd/defs/cocovtio):00108         Pat.LSnt       RMB       1
0006                  (/dd/defs/cocovtio):00109         Pat.RSnt       RMB       1
0007                  (/dd/defs/cocovtio):00110         Pat.SDot       RMB       1
0008                  (/dd/defs/cocovtio):00111         Pat.BDot       RMB       1
                      (/dd/defs/cocovtio):00112         *
                      (/dd/defs/cocovtio):00113         * pointer buffer numbers
                      (/dd/defs/cocovtio):00114         *
                      (/dd/defs/cocovtio):00115                        ORG       1
0001                  (/dd/defs/cocovtio):00116         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (/dd/defs/cocovtio):00117         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (/dd/defs/cocovtio):00118         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (/dd/defs/cocovtio):00119         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (/dd/defs/cocovtio):00120         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (/dd/defs/cocovtio):00121         Ptr.Txt        RMB       1                   Text pointer
0007                  (/dd/defs/cocovtio):00122         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (/dd/defs/cocovtio):00123         
                      (/dd/defs/cocovtio):00124         **********************
                      (/dd/defs/cocovtio):00125         * KeyDrv Entry Points
                      (/dd/defs/cocovtio):00126                        ORG       0
0000                  (/dd/defs/cocovtio):00127         K$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00128         K$Term         RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00129         K$FnKey        RMB       3                   get function key states
0009                  (/dd/defs/cocovtio):00130         K$RdKey        RMB       3                   get key states
                      (/dd/defs/cocovtio):00131         
                      (/dd/defs/cocovtio):00132         **********************
                      (/dd/defs/cocovtio):00133         * JoyDrv Entry Points
                      (/dd/defs/cocovtio):00134                        ORG       0
0000                  (/dd/defs/cocovtio):00135         J$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00136         J$Term         RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00137         J$MsBtn        RMB       3                   get mouse button states
0009                  (/dd/defs/cocovtio):00138         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (/dd/defs/cocovtio):00139         J$JyBtn        RMB       3                   get joystick button states
000F                  (/dd/defs/cocovtio):00140         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (/dd/defs/cocovtio):00141         
                      (/dd/defs/cocovtio):00142         **********************
                      (/dd/defs/cocovtio):00143         * SndDrv Entry Points
                      (/dd/defs/cocovtio):00144                        ORG       0
0000                  (/dd/defs/cocovtio):00145         S$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00146         S$GetStt       RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00147         S$SetStt       RMB       3                   joystick termination
0009                  (/dd/defs/cocovtio):00148         S$Term         RMB       3                   get joystick X/Y coordinates
                      (/dd/defs/cocovtio):00149         
                      (/dd/defs/cocovtio):00150         ********************************
                      (/dd/defs/cocovtio):00151         * Window/Menu Bar Data Structure
                      (/dd/defs/cocovtio):00152         *
                      (/dd/defs/cocovtio):00153         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (/dd/defs/cocovtio):00154         * for use in the high level windowing package.
                      (/dd/defs/cocovtio):00155         *
     000A             (/dd/defs/cocovtio):00156         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (/dd/defs/cocovtio):00157         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (/dd/defs/cocovtio):00158         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (/dd/defs/cocovtio):00159         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (/dd/defs/cocovtio):00160         *
                      (/dd/defs/cocovtio):00161         * Menu Item Descriptor : (MN.ITEMS)
                      (/dd/defs/cocovtio):00162         * one required for each item within the menu
                      (/dd/defs/cocovtio):00163         *
                      (/dd/defs/cocovtio):00164                        ORG       0
0000                  (/dd/defs/cocovtio):00165         MI.TTL         RMB       MXTTLEN             item name
000F                  (/dd/defs/cocovtio):00166         MI.ENBL        RMB       1                   enable flag
0010                  (/dd/defs/cocovtio):00167         MI.RES         RMB       5                   reserved bytes
     0015             (/dd/defs/cocovtio):00168         MI.SIZ         EQU       .                   size of menu item descriptor
                      (/dd/defs/cocovtio):00169         *
                      (/dd/defs/cocovtio):00170         * Menu Descriptor :
                      (/dd/defs/cocovtio):00171         * one for each menu on the manu bar
                      (/dd/defs/cocovtio):00172         * each is pointed to by MB.MPTR below
                      (/dd/defs/cocovtio):00173         *
                      (/dd/defs/cocovtio):00174                        ORG       0
0000                  (/dd/defs/cocovtio):00175         MN.TTL         RMB       MXTTLEN             menu title
000F                  (/dd/defs/cocovtio):00176         MN.ID          RMB       1                   menu id number (1-255)
0010                  (/dd/defs/cocovtio):00177         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (/dd/defs/cocovtio):00178         MN.NITS        RMB       1                   number of items in menu
0012                  (/dd/defs/cocovtio):00179         MN.ENBL        RMB       1                   enable flag
0013                  (/dd/defs/cocovtio):00180         MN.RES         RMB       2                   reserved bytes
0015                  (/dd/defs/cocovtio):00181         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (/dd/defs/cocovtio):00182         MN.SIZ         EQU       .                   size of menu descriptor
                      (/dd/defs/cocovtio):00183         *
                      (/dd/defs/cocovtio):00184         * Window Descriptor:
                      (/dd/defs/cocovtio):00185         * one required for each application in a framed window
                      (/dd/defs/cocovtio):00186         *
                      (/dd/defs/cocovtio):00187                        ORG       0
0000                  (/dd/defs/cocovtio):00188         WN.TTL         RMB       20                  title of window for title bar
0014                  (/dd/defs/cocovtio):00189         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (/dd/defs/cocovtio):00190         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (/dd/defs/cocovtio):00191         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (/dd/defs/cocovtio):00192         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (/dd/defs/cocovtio):00193         WN.RES         RMB       7                   reserved bytes
0020                  (/dd/defs/cocovtio):00194         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (/dd/defs/cocovtio):00195         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (/dd/defs/cocovtio):00196         
                      (/dd/defs/cocovtio):00197         *************************
                      (/dd/defs/cocovtio):00198         * Window Type Definitions
                      (/dd/defs/cocovtio):00199         *
                      (/dd/defs/cocovtio):00200         * To be used in setting up the border of the window in
                      (/dd/defs/cocovtio):00201         * the SS.WnSel SETSTAT
                      (/dd/defs/cocovtio):00202         *
                      (/dd/defs/cocovtio):00203                        ORG       0
0000                  (/dd/defs/cocovtio):00204         WT.NBox        RMB       1                   No Box
0001                  (/dd/defs/cocovtio):00205         WT.FWin        RMB       1                   Framed Window
0002                  (/dd/defs/cocovtio):00206         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (/dd/defs/cocovtio):00207         WT.SBox        RMB       1                   Shadowed Box
0004                  (/dd/defs/cocovtio):00208         WT.DBox        RMB       1                   Double Box
0005                  (/dd/defs/cocovtio):00209         WT.PBox        RMB       1                   Plain Box
                      (/dd/defs/cocovtio):00210         
                      (/dd/defs/cocovtio):00211         *************************************
                      (/dd/defs/cocovtio):00212         * Pre-Defined Menu IDs for the system
                      (/dd/defs/cocovtio):00213         *
                      (/dd/defs/cocovtio):00214                        ORG       1
0001                  (/dd/defs/cocovtio):00215         MId.Mov        RMB       1                   move box
0002                  (/dd/defs/cocovtio):00216         MId.Cls        RMB       1                   close box
0003                  (/dd/defs/cocovtio):00217         MId.Grw        RMB       1                   grow box
0004                  (/dd/defs/cocovtio):00218         MId.SUp        RMB       1                   scroll up
0005                  (/dd/defs/cocovtio):00219         MId.SDn        RMB       1                   scroll down
0006                  (/dd/defs/cocovtio):00220         MId.SRt        RMB       1                   scroll right
0007                  (/dd/defs/cocovtio):00221         MId.SLt        RMB       1                   scroll left
0008                  (/dd/defs/cocovtio):00222         MId.Chr        RMB       1                   character was depressed
                      (/dd/defs/cocovtio):00223                        ORG       20
0014                  (/dd/defs/cocovtio):00224         MId.Tdy        RMB       1                   Tandy menu
0015                  (/dd/defs/cocovtio):00225         MId.Fil        RMB       1                   Files Menu
0016                  (/dd/defs/cocovtio):00226         MId.Edt        RMB       1                   Edit Menu
0017                  (/dd/defs/cocovtio):00227         MId.Sty        RMB       1                   Styles menu
0018                  (/dd/defs/cocovtio):00228         MId.Fnt        RMB       1                   Font menu
                      (/dd/defs/cocovtio):00229         
                      (/dd/defs/cocovtio):00230         
                      (/dd/defs/cocovtio):00231         ******************************************************************************
                      (/dd/defs/cocovtio):00232         ******************************************************************************
                      (/dd/defs/cocovtio):00233         **                                                                          **
                      (/dd/defs/cocovtio):00234         ** NitrOS-9 Windowing system Global data definitions                        **
                      (/dd/defs/cocovtio):00235         **                                                                          **
                      (/dd/defs/cocovtio):00236         ******************************************************************************
                      (/dd/defs/cocovtio):00237         ******************************************************************************
                      (/dd/defs/cocovtio):00238         **                                                                          **
                      (/dd/defs/cocovtio):00239         ** System memory block 0 layout:                                            **
                      (/dd/defs/cocovtio):00240         **                                                                          **
                      (/dd/defs/cocovtio):00241         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (/dd/defs/cocovtio):00242         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (/dd/defs/cocovtio):00243         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (/dd/defs/cocovtio):00244         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (/dd/defs/cocovtio):00245         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (/dd/defs/cocovtio):00246         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (/dd/defs/cocovtio):00247         ** $0010-$001F : unused (User definable)                                    **
                      (/dd/defs/cocovtio):00248         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (/dd/defs/cocovtio):00249         ** $0100-$011F : Task usage table                                           **
                      (/dd/defs/cocovtio):00250         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (/dd/defs/cocovtio):00251         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (/dd/defs/cocovtio):00252         ** $0300-$03FF : system's system call dispatch table                        **
                      (/dd/defs/cocovtio):00253         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (/dd/defs/cocovtio):00254         ** $0500-$05FF : process descriptor pointer table                           **
                      (/dd/defs/cocovtio):00255         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (/dd/defs/cocovtio):00256         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (/dd/defs/cocovtio):00257         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (/dd/defs/cocovtio):00258         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (/dd/defs/cocovtio):00259         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (/dd/defs/cocovtio):00260         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (/dd/defs/cocovtio):00261         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (/dd/defs/cocovtio):00262         ** $1248-$127F : ????  (unused)                                             **
                      (/dd/defs/cocovtio):00263         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (/dd/defs/cocovtio):00264         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (/dd/defs/cocovtio):00265         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (/dd/defs/cocovtio):00266         **                                                                          **
                      (/dd/defs/cocovtio):00267         ******************************************************************************
                      (/dd/defs/cocovtio):00268         ******************************************************************************
                      (/dd/defs/cocovtio):00269         
                      (/dd/defs/cocovtio):00270         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (/dd/defs/cocovtio):00271         MaxLines       EQU       25                  Max. Y coord text value
     0000             (/dd/defs/cocovtio):00272         Meg            SET       false               "true" if 1 or 2 meg machine
                      (/dd/defs/cocovtio):00273         
     0000             (/dd/defs/cocovtio):00274         COMP           EQU       0                   composite monitor
     0001             (/dd/defs/cocovtio):00275         RGB            EQU       1                   RGB Analog monitor 
     0002             (/dd/defs/cocovtio):00276         MONO           EQU       2                   monochrome monitor
                      (/dd/defs/cocovtio):00277         
     0001             (/dd/defs/cocovtio):00278         Monitor        SET       RGB
                      (/dd/defs/cocovtio):00279         
                      (/dd/defs/cocovtio):00280         * Global definitions
     0001             (/dd/defs/cocovtio):00281         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (/dd/defs/cocovtio):00282         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (/dd/defs/cocovtio):00283         CapsLck        EQU       %00000100           Capslock enabled
     0280             (/dd/defs/cocovtio):00284         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00285                      IFEQ      MaxLines-25
     00C6             (/dd/defs/cocovtio):00286         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00287                      ELSE      
0019                  (/dd/defs/cocovtio):00288         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00289                      ENDC      
                      (/dd/defs/cocovtio):00290         
                      (/dd/defs/cocovtio):00291         *****************************************************************************
                      (/dd/defs/cocovtio):00292         * Static memory area for each window (VTIO/TC9IO)
                      (/dd/defs/cocovtio):00293         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (/dd/defs/cocovtio):00294         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (/dd/defs/cocovtio):00295         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (/dd/defs/cocovtio):00296         * May have to have smaller limit for text to gfx screens, as it will run much
                      (/dd/defs/cocovtio):00297         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (/dd/defs/cocovtio):00298         *
                      (/dd/defs/cocovtio):00299         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (/dd/defs/cocovtio):00300         * V.SCF is to be resolved properly in pass 1!!
                      (/dd/defs/cocovtio):00301                        ORG       V.SCF
001D                  (/dd/defs/cocovtio):00302         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (/dd/defs/cocovtio):00303         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (/dd/defs/cocovtio):00304         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (/dd/defs/cocovtio):00305         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (/dd/defs/cocovtio):00306         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (/dd/defs/cocovtio):00307         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (/dd/defs/cocovtio):00308         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (/dd/defs/cocovtio):00309         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (/dd/defs/cocovtio):00310         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (/dd/defs/cocovtio):00311         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (/dd/defs/cocovtio):00312         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (/dd/defs/cocovtio):00313         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (/dd/defs/cocovtio):00314                        RMB       1                   unused                                       $2A
002B                  (/dd/defs/cocovtio):00315         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (/dd/defs/cocovtio):00316         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (/dd/defs/cocovtio):00317         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (/dd/defs/cocovtio):00318         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (/dd/defs/cocovtio):00319         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (/dd/defs/cocovtio):00320         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (/dd/defs/cocovtio):00321         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (/dd/defs/cocovtio):00322         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (/dd/defs/cocovtio):00323         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (/dd/defs/cocovtio):00324         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (/dd/defs/cocovtio):00325         CC3Parm        RMB       128-.               global parameter area
0080                  (/dd/defs/cocovtio):00326         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (/dd/defs/cocovtio):00327         CC3DSiz        EQU       .
                      (/dd/defs/cocovtio):00328         
                      (/dd/defs/cocovtio):00329         *****************************************************************************
                      (/dd/defs/cocovtio):00330         * GrfInt/WindInt global memory area
                      (/dd/defs/cocovtio):00331         * This area sits in system block 0 from $1000 to $10ff
     1000             (/dd/defs/cocovtio):00332         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (/dd/defs/cocovtio):00333                        ORG       0
0000                  (/dd/defs/cocovtio):00334         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (/dd/defs/cocovtio):00335         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (/dd/defs/cocovtio):00336         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (/dd/defs/cocovtio):00337         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (/dd/defs/cocovtio):00338         *g0003    rmb   2          NEW: UNUSED
0005                  (/dd/defs/cocovtio):00339         g0005          RMB       2                   Temp save in Windint RG
0007                  (/dd/defs/cocovtio):00340         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (/dd/defs/cocovtio):00341         G.MonTyp       RMB       1                   monitor type
     000A             (/dd/defs/cocovtio):00342         g000A          EQU       .                   Old label for compatibility
000A                  (/dd/defs/cocovtio):00343         G.CrDvFl       RMB       1                   Are we current device flag (only set when all
                      (/dd/defs/cocovtio):00344         *                           Parms have been moved to Dev Mem)
                      (/dd/defs/cocovtio):00345         *                           0=We are not on our device
                      (/dd/defs/cocovtio):00346         *                           1=We are the current device
                      (/dd/defs/cocovtio):00347         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (/dd/defs/cocovtio):00348         *                            whether or not to update GIME regs themselves
                      (/dd/defs/cocovtio):00349         *                            If not current device, they don't.)
000B                  (/dd/defs/cocovtio):00350         G.WinType      RMB       1                   current device's V.TYPE
000C                  (/dd/defs/cocovtio):00351         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (/dd/defs/cocovtio):00352         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (/dd/defs/cocovtio):00353         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (/dd/defs/cocovtio):00354         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (/dd/defs/cocovtio):00355         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (/dd/defs/cocovtio):00356         G.BelVec       RMB       2                   BELL routine vector
0019                  (/dd/defs/cocovtio):00357         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (/dd/defs/cocovtio):00358         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (/dd/defs/cocovtio):00359         G.BelTnF       RMB       1                   BELL tone flag
001D                  (/dd/defs/cocovtio):00360         g001D          RMB       3
0020                  (/dd/defs/cocovtio):00361         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (/dd/defs/cocovtio):00362         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (/dd/defs/cocovtio):00363         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (/dd/defs/cocovtio):00364         *                           00000010 : VDGInt found
                      (/dd/defs/cocovtio):00365         *                           10000000 : GrfDrv found
0025                  (/dd/defs/cocovtio):00366         g0025          RMB       1
0026                  (/dd/defs/cocovtio):00367         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (/dd/defs/cocovtio):00368         *         IFEQ  TC9-true
                      (/dd/defs/cocovtio):00369         *CurLght  rmb   1          current keyboard light settings
                      (/dd/defs/cocovtio):00370         *         ELSE  
0027                  (/dd/defs/cocovtio):00371         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (/dd/defs/cocovtio):00372         *         ENDC  
0028                  (/dd/defs/cocovtio):00373         G.LKeyCd       RMB       1                   last keyboard code
0029                  (/dd/defs/cocovtio):00374         G.KyRept       RMB       1                   key repeat counter
                      (/dd/defs/cocovtio):00375         * A secondary 3 key table (same format as g002D below)
002A                  (/dd/defs/cocovtio):00376         G.2Key1        RMB       1                   $2A
002B                  (/dd/defs/cocovtio):00377         G.2Key2        RMB       1                   $2B
002C                  (/dd/defs/cocovtio):00378         G.2Key3        RMB       1
                      (/dd/defs/cocovtio):00379         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (/dd/defs/cocovtio):00380         * than 3 are hit, the last key is overwritten with the very last key down that
                      (/dd/defs/cocovtio):00381         * was checked. Format for all three is the same as the PIA column/row byte @
                      (/dd/defs/cocovtio):00382         * KeyFlag below.
002D                  (/dd/defs/cocovtio):00383         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (/dd/defs/cocovtio):00384         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (/dd/defs/cocovtio):00385         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (/dd/defs/cocovtio):00386         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (/dd/defs/cocovtio):00387         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (/dd/defs/cocovtio):00388         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (/dd/defs/cocovtio):00389         *                           %00000111-Column # (Output, 0-7)
                      (/dd/defs/cocovtio):00390         *                           %00111000-Row # (Input, 0-6)
0033                  (/dd/defs/cocovtio):00391         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (/dd/defs/cocovtio):00392         G.KySns        RMB       1                   key sense byte
0035                  (/dd/defs/cocovtio):00393         G.KySame       RMB       1                   same key flag
0036                  (/dd/defs/cocovtio):00394         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (/dd/defs/cocovtio):00395                        RMB       1
0038                  (/dd/defs/cocovtio):00396         g0038          RMB       1                   grfdrv initialized flag
0039                  (/dd/defs/cocovtio):00397                        RMB       2
003B                  (/dd/defs/cocovtio):00398         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (/dd/defs/cocovtio):00399         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (/dd/defs/cocovtio):00400         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (/dd/defs/cocovtio):00401         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (/dd/defs/cocovtio):00402         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (/dd/defs/cocovtio):00403         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (/dd/defs/cocovtio):00404         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (/dd/defs/cocovtio):00405         *         IFEQ  TC9-true
                      (/dd/defs/cocovtio):00406         *KeyParm  rmb   1          keyboard command parameter byte
                      (/dd/defs/cocovtio):00407         *         ELSE  
0063                  (/dd/defs/cocovtio):00408         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (/dd/defs/cocovtio):00409         *         ENDC  
0064                  (/dd/defs/cocovtio):00410         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (/dd/defs/cocovtio):00411         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (/dd/defs/cocovtio):00412         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (/dd/defs/cocovtio):00413         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (/dd/defs/cocovtio):00414         G.CoTble       RMB       6                   co-module table ($68)
006E                  (/dd/defs/cocovtio):00415         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (/dd/defs/cocovtio):00416         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (/dd/defs/cocovtio):00417         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (/dd/defs/cocovtio):00418         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (/dd/defs/cocovtio):00419         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (/dd/defs/cocovtio):00420         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (/dd/defs/cocovtio):00421         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (/dd/defs/cocovtio):00422         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (/dd/defs/cocovtio):00423         g00BD          RMB       1                   Current screen type for work window table
00BE                  (/dd/defs/cocovtio):00424         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (/dd/defs/cocovtio):00425         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (/dd/defs/cocovtio):00426         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (/dd/defs/cocovtio):00427         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (/dd/defs/cocovtio):00428         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (/dd/defs/cocovtio):00429         G.MsSig        RMB       1                   mouse signal flag
00C7                  (/dd/defs/cocovtio):00430         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (/dd/defs/cocovtio):00431         g00D7          RMB       9
00E0                  (/dd/defs/cocovtio):00432         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (/dd/defs/cocovtio):00433         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (/dd/defs/cocovtio):00434         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (/dd/defs/cocovtio):00435         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (/dd/defs/cocovtio):00436         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (/dd/defs/cocovtio):00437         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (/dd/defs/cocovtio):00438         
                      (/dd/defs/cocovtio):00439         *****************************************************************************
                      (/dd/defs/cocovtio):00440         * GrfDrv global memory data definitions
                      (/dd/defs/cocovtio):00441         * This area sits in system block 0 from $1100 to $119E
     1100             (/dd/defs/cocovtio):00442         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (/dd/defs/cocovtio):00443                        ORG       0
0000                  (/dd/defs/cocovtio):00444         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (/dd/defs/cocovtio):00445         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (/dd/defs/cocovtio):00446         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (/dd/defs/cocovtio):00447         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (/dd/defs/cocovtio):00448         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (/dd/defs/cocovtio):00449         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (/dd/defs/cocovtio):00450         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (/dd/defs/cocovtio):00451         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (/dd/defs/cocovtio):00452         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (/dd/defs/cocovtio):00453         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (/dd/defs/cocovtio):00454         *                                              overlay width has been copied
000B                  (/dd/defs/cocovtio):00455         gr000B         RMB       1
000C                  (/dd/defs/cocovtio):00456         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (/dd/defs/cocovtio):00457         gr000E         RMB       1
000F                  (/dd/defs/cocovtio):00458         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (/dd/defs/cocovtio):00459         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (/dd/defs/cocovtio):00460         gr0012         RMB       6
0018                  (/dd/defs/cocovtio):00461         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (/dd/defs/cocovtio):00462         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (/dd/defs/cocovtio):00463         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (/dd/defs/cocovtio):00464         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (/dd/defs/cocovtio):00465         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (/dd/defs/cocovtio):00466         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (/dd/defs/cocovtio):00467         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (/dd/defs/cocovtio):00468         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (/dd/defs/cocovtio):00469         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (/dd/defs/cocovtio):00470         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (/dd/defs/cocovtio):00471         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (/dd/defs/cocovtio):00472         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (/dd/defs/cocovtio):00473         gr002C         RMB       2
002E                  (/dd/defs/cocovtio):00474         gr002E         RMB       2                   current window table entry
0030                  (/dd/defs/cocovtio):00475         gr0030         RMB       2                   current screen table ptr
0032                  (/dd/defs/cocovtio):00476         gr0032         RMB       1                   Last block # we used for buffers
0033                  (/dd/defs/cocovtio):00477         gr0033         RMB       2                   Last offset we used for buffers
0035                  (/dd/defs/cocovtio):00478         gr0035         RMB       1                   group
0036                  (/dd/defs/cocovtio):00479         gr0036         RMB       2                   offset
0038                  (/dd/defs/cocovtio):00480         gr0038         RMB       1                   group returned (new)
0039                  (/dd/defs/cocovtio):00481         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (/dd/defs/cocovtio):00482         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (/dd/defs/cocovtio):00483         gr003B         RMB       2                   end of vars ptr?
003D                  (/dd/defs/cocovtio):00484         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (/dd/defs/cocovtio):00485         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (/dd/defs/cocovtio):00486         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (/dd/defs/cocovtio):00487         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (/dd/defs/cocovtio):00488         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (/dd/defs/cocovtio):00489         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (/dd/defs/cocovtio):00490         gr0047         RMB       2                   'Working' X coordinate
0049                  (/dd/defs/cocovtio):00491         gr0049         RMB       2                   'Working' Y coordinate
004B                  (/dd/defs/cocovtio):00492         gr004B         RMB       2                   current X
004D                  (/dd/defs/cocovtio):00493         gr004D         RMB       2                   current Y
004F                  (/dd/defs/cocovtio):00494         gr004F         RMB       2                   X Size (in bytes)
0051                  (/dd/defs/cocovtio):00495         gr0051         RMB       2                   Y Size (in bytes)
0053                  (/dd/defs/cocovtio):00496         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (/dd/defs/cocovtio):00497         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (/dd/defs/cocovtio):00498         gr0057         RMB       1                   group
0058                  (/dd/defs/cocovtio):00499         gr0058         RMB       1                   buffer #
0059                  (/dd/defs/cocovtio):00500         gr0059         RMB       1                   save switch for overlay
005A                  (/dd/defs/cocovtio):00501         gr005A         RMB       1                   PRN
005B                  (/dd/defs/cocovtio):00502         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (/dd/defs/cocovtio):00503         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (/dd/defs/cocovtio):00504         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (/dd/defs/cocovtio):00505         Gr.STYMk       RMB       1                   STY marker
0061                  (/dd/defs/cocovtio):00506         gr0061         RMB       1                   foreground RGB data
0062                  (/dd/defs/cocovtio):00507         gr0062         RMB       1                   background RGB data
0063                  (/dd/defs/cocovtio):00508         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (/dd/defs/cocovtio):00509         gr0064         RMB       2                   PSet vector
0066                  (/dd/defs/cocovtio):00510         gr0066         RMB       2                   pset offset
0068                  (/dd/defs/cocovtio):00511         gr0068         RMB       2                   LSet vector
006A                  (/dd/defs/cocovtio):00512         gr006A         RMB       2                   max X co-ordinate
006C                  (/dd/defs/cocovtio):00513         gr006C         RMB       2                   max Y co-ordinate
006E                  (/dd/defs/cocovtio):00514         gr006E         RMB       2                   X pixel count
0070                  (/dd/defs/cocovtio):00515         gr0070         RMB       2                   Y pixel count
0072                  (/dd/defs/cocovtio):00516         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (/dd/defs/cocovtio):00517         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (/dd/defs/cocovtio):00518         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (/dd/defs/cocovtio):00519         gr0077         RMB       2                   Vector for right direction FFill
0079                  (/dd/defs/cocovtio):00520         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (/dd/defs/cocovtio):00521         gr007A         RMB       2                   Vector for left direction FFill
007C                  (/dd/defs/cocovtio):00522         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (/dd/defs/cocovtio):00523         gr007D         RMB       1                   buffer block #
007E                  (/dd/defs/cocovtio):00524         gr007E         RMB       2                   buffer offset #
0080                  (/dd/defs/cocovtio):00525         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (/dd/defs/cocovtio):00526         gr0082         RMB       3                   3 byte extended screen address
0085                  (/dd/defs/cocovtio):00527         gr0085         RMB       2                   temp
0087                  (/dd/defs/cocovtio):00528         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (/dd/defs/cocovtio):00529         gr0097         RMB       1                   temp
0098                  (/dd/defs/cocovtio):00530         gr0098         RMB       1                   temp
                      (/dd/defs/cocovtio):00531         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (/dd/defs/cocovtio):00532         gr0099         RMB       2                   temp
                      (/dd/defs/cocovtio):00533         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (/dd/defs/cocovtio):00534         gr009B         RMB       1                   counter temp
009C                  (/dd/defs/cocovtio):00535         gr009C         RMB       1
009D                  (/dd/defs/cocovtio):00536         gr009D         RMB       2                   offset to buffer in block
009F                  (/dd/defs/cocovtio):00537         gr009F         RMB       1
00A0                  (/dd/defs/cocovtio):00538         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (/dd/defs/cocovtio):00539         gr00A1         RMB       2                   vector routine for (changes lots)
                      (/dd/defs/cocovtio):00540         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (/dd/defs/cocovtio):00541         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (/dd/defs/cocovtio):00542         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (/dd/defs/cocovtio):00543         gr00A7         RMB       2
00A9                  (/dd/defs/cocovtio):00544         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (/dd/defs/cocovtio):00545         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (/dd/defs/cocovtio):00546         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (/dd/defs/cocovtio):00547         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (/dd/defs/cocovtio):00548         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (/dd/defs/cocovtio):00549         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (/dd/defs/cocovtio):00550         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (/dd/defs/cocovtio):00551         gr00B3         RMB       1                   temp veriable grfdrv
00B4                  (/dd/defs/cocovtio):00552         gr00B4         RMB       1                   temp veriable grfdrv
00B5                  (/dd/defs/cocovtio):00553         gr00B5         RMB       1                   regW for grfdrv
00B6                  (/dd/defs/cocovtio):00554         gr00B6         RMB       1
00B7                  (/dd/defs/cocovtio):00555         gr00B7         RMB       2
00B9                  (/dd/defs/cocovtio):00556         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (/dd/defs/cocovtio):00557         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (/dd/defs/cocovtio):00558         gr00BD         RMB       2                   previously used in grfdrv at $B6
                      (/dd/defs/cocovtio):00559         * EOU Beta 2 & up
00BF                  (/dd/defs/cocovtio):00560         grScrtch       RMB       2                   Scratch var for Grfdrv - use DP instead of stack for
                      (/dd/defs/cocovtio):00561         *                                            anything that does immediate calculations
00C1                  (/dd/defs/cocovtio):00562         gr00BF         RMB       256-.               Reserved for future use
                      (/dd/defs/cocovtio):00563         
                      (/dd/defs/cocovtio):00564         * GPLoad buffer - $1200 in system block    . Currently ends at $1247, and $1248-$127f is unused
     1200             (/dd/defs/cocovtio):00565         GPBuf          EQU       $1200               Usefull address (start of GP buffer copy memory)
0100                  (/dd/defs/cocovtio):00566         GPBufSz        RMB       gb0000              common move buffer for gpload/get/put (72 bytes default)
                      (/dd/defs/cocovtio):00567         
                      (/dd/defs/cocovtio):00568         *****************************************************************************
                      (/dd/defs/cocovtio):00569         * Window table entry structure
                      (/dd/defs/cocovtio):00570         * These tables sit in system block 0 and there is 1 for every window init'd
                      (/dd/defs/cocovtio):00571         * including any overlay windows.
     0020             (/dd/defs/cocovtio):00572         MaxWind        EQU       32                  maximum allowable window tables
     1290             (/dd/defs/cocovtio):00573         WinBase        EQU       $1290               base address to start of window tables
                      (/dd/defs/cocovtio):00574                        ORG       -$10
FFF0                  (/dd/defs/cocovtio):00575         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (/dd/defs/cocovtio):00576         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (/dd/defs/cocovtio):00577         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (/dd/defs/cocovtio):00578         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (/dd/defs/cocovtio):00579         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (/dd/defs/cocovtio):00580         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (/dd/defs/cocovtio):00581         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (/dd/defs/cocovtio):00582         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (/dd/defs/cocovtio):00583         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (/dd/defs/cocovtio):00584         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (/dd/defs/cocovtio):00585         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (/dd/defs/cocovtio):00586         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (/dd/defs/cocovtio):00587         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (/dd/defs/cocovtio):00588         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (/dd/defs/cocovtio):00589         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (/dd/defs/cocovtio):00590         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (/dd/defs/cocovtio):00591         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (/dd/defs/cocovtio):00592         Wt.Back        RMB       1                   background palette #                         $07
0008                  (/dd/defs/cocovtio):00593         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (/dd/defs/cocovtio):00594         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (/dd/defs/cocovtio):00595         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (/dd/defs/cocovtio):00596         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (/dd/defs/cocovtio):00597         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (/dd/defs/cocovtio):00598         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (/dd/defs/cocovtio):00599         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (/dd/defs/cocovtio):00600         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (/dd/defs/cocovtio):00601         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (/dd/defs/cocovtio):00602         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (/dd/defs/cocovtio):00603         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (/dd/defs/cocovtio):00604         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (/dd/defs/cocovtio):00605         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (/dd/defs/cocovtio):00606         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (/dd/defs/cocovtio):00607         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24/25,0-191/199)          $1D
001F                  (/dd/defs/cocovtio):00608         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (/dd/defs/cocovtio):00609         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (/dd/defs/cocovtio):00610         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (/dd/defs/cocovtio):00611         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (/dd/defs/cocovtio):00612         * NOTE: The following default settings are what the window was initialized
                      (/dd/defs/cocovtio):00613         *       with, and thus are the MAXIMUM start/size the window can handle
                      (/dd/defs/cocovtio):00614         *       until it is restarted (DWEnd & DWSet)
                      (/dd/defs/cocovtio):00615         *       They also appear to be used in WindInt to determine the coords &
                      (/dd/defs/cocovtio):00616         *       sizes for control+content regions
0026                  (/dd/defs/cocovtio):00617         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (/dd/defs/cocovtio):00618         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (/dd/defs/cocovtio):00619         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (/dd/defs/cocovtio):00620         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (/dd/defs/cocovtio):00621         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (/dd/defs/cocovtio):00622         Wt.Siz         EQU       .+$10
                      (/dd/defs/cocovtio):00623         
                      (/dd/defs/cocovtio):00624         *****************************************************************************
                      (/dd/defs/cocovtio):00625         * Screen table entrys
                      (/dd/defs/cocovtio):00626         * These tables sit in system block 0 base=$1A80
                      (/dd/defs/cocovtio):00627         
     0010             (/dd/defs/cocovtio):00628         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (/dd/defs/cocovtio):00629         STblBse        EQU       $1A80               base address of screen tables
                      (/dd/defs/cocovtio):00630                        ORG       0
0000                  (/dd/defs/cocovtio):00631         St.Sty         RMB       1                   Screen type                         $00
0001                  (/dd/defs/cocovtio):00632         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (/dd/defs/cocovtio):00633         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (/dd/defs/cocovtio):00634         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (/dd/defs/cocovtio):00635         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (/dd/defs/cocovtio):00636         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (/dd/defs/cocovtio):00637         St.Back        RMB       1                   Background palette register #       $07
0008                  (/dd/defs/cocovtio):00638         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (/dd/defs/cocovtio):00639         St.Res         RMB       7                   UNUSED???                           $09
                      (/dd/defs/cocovtio):00640         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (/dd/defs/cocovtio):00641         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (/dd/defs/cocovtio):00642         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (/dd/defs/cocovtio):00643         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
                      (/dd/defs/cocovtio):00644         * Other possibilities: Offset into screen to display (if we enable screens taller than
                      (/dd/defs/cocovtio):00645         *   a single screen), etc.
0010                  (/dd/defs/cocovtio):00646         St.Pals        RMB       16                  Palette register contents           $10
     0020             (/dd/defs/cocovtio):00647         St.Siz         EQU       .
                      (/dd/defs/cocovtio):00648         
                      (/dd/defs/cocovtio):00649         *****************************************************************************
                      (/dd/defs/cocovtio):00650         * Graphics buffer tables
                      (/dd/defs/cocovtio):00651         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (/dd/defs/cocovtio):00652         * data.
                      (/dd/defs/cocovtio):00653                        ORG       0
0000                  (/dd/defs/cocovtio):00654         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (/dd/defs/cocovtio):00655         Grf.Off        RMB       2                   back block header offset            $01
0003                  (/dd/defs/cocovtio):00656         Grf.Grp        RMB       1                   group #                             $03
0004                  (/dd/defs/cocovtio):00657         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (/dd/defs/cocovtio):00658         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (/dd/defs/cocovtio):00659         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (/dd/defs/cocovtio):00660         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (/dd/defs/cocovtio):00661         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (/dd/defs/cocovtio):00662         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (/dd/defs/cocovtio):00663         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (/dd/defs/cocovtio):00664         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (/dd/defs/cocovtio):00665         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (/dd/defs/cocovtio):00666         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (/dd/defs/cocovtio):00667         Grf.Siz        EQU       .                   $20
                      (/dd/defs/cocovtio):00668         
                      (/dd/defs/cocovtio):00669         *****************************************************************************
                      (/dd/defs/cocovtio):00670         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (/dd/defs/cocovtio):00671         * $1075-$0176
                      (/dd/defs/cocovtio):00672         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (/dd/defs/cocovtio):00673                        ORG       0
0000                  (/dd/defs/cocovtio):00674         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (/dd/defs/cocovtio):00675         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (/dd/defs/cocovtio):00676         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (/dd/defs/cocovtio):00677         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (/dd/defs/cocovtio):00678         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (/dd/defs/cocovtio):00679         Gt.BClr        RMB       1                   Background color                               $08
0009                  (/dd/defs/cocovtio):00680         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (/dd/defs/cocovtio):00681         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (/dd/defs/cocovtio):00682         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (/dd/defs/cocovtio):00683         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (/dd/defs/cocovtio):00684         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (/dd/defs/cocovtio):00685         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (/dd/defs/cocovtio):00686         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (/dd/defs/cocovtio):00687         GTabSz         EQU       .
                      (/dd/defs/cocovtio):00688         
                      (/dd/defs/cocovtio):00689         *****************************************************************************
                      (/dd/defs/cocovtio):00690         * This table is located in the graphics table memory and is offset from
                      (/dd/defs/cocovtio):00691         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (/dd/defs/cocovtio):00692         * WindInt.
                      (/dd/defs/cocovtio):00693         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (/dd/defs/cocovtio):00694         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (/dd/defs/cocovtio):00695         *  COMBINATION EVERY TIME
                      (/dd/defs/cocovtio):00696                        ORG       $0240
0240                  (/dd/defs/cocovtio):00697                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (/dd/defs/cocovtio):00698                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (/dd/defs/cocovtio):00699                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (/dd/defs/cocovtio):00700                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (/dd/defs/cocovtio):00701         
                      (/dd/defs/cocovtio):00702         *****************************************************************************
                      (/dd/defs/cocovtio):00703         * WindInt menu handling table entry definition
                      (/dd/defs/cocovtio):00704                        ORG       0
0000                  (/dd/defs/cocovtio):00705         MnuXNum        RMB       1                   menu #
0001                  (/dd/defs/cocovtio):00706         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (/dd/defs/cocovtio):00707         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (/dd/defs/cocovtio):00708                        RMB       1                   unused?
     0004             (/dd/defs/cocovtio):00709         MnuHSiz        EQU       .
                      (/dd/defs/cocovtio):00710         
                      (/dd/defs/cocovtio):00711         *****************************************************************************
                      (/dd/defs/cocovtio):00712         * Character binary switches
     0080             (/dd/defs/cocovtio):00713         Blink          EQU       %10000000           Blink characters (hardware text only)
     0080             (/dd/defs/cocovtio):00714         TChr           EQU       %10000000           transparent characters (both currently)
     0040             (/dd/defs/cocovtio):00715         Under          EQU       %01000000           underline characters (both)
     0020             (/dd/defs/cocovtio):00716         Bold           EQU       %00100000           bold characters (gfx only, maybe txt with color changes?)
     0010             (/dd/defs/cocovtio):00717         Prop           EQU       %00010000           proportional spacing of characters (gfx only)
     0008             (/dd/defs/cocovtio):00718         Scale          EQU       %00001000           automatic window scaling (gfx only)
     0004             (/dd/defs/cocovtio):00719         Invers         EQU       %00000100           inverse characters (both)
     0002             (/dd/defs/cocovtio):00720         NoCurs         EQU       %00000010           no cursor display (both)
     0001             (/dd/defs/cocovtio):00721         Protect        EQU       %00000001           device window protection (both)
                      (/dd/defs/cocovtio):00722         
                      (/dd/defs/cocovtio):00723         *****************************************************************************
                      (/dd/defs/cocovtio):00724         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (/dd/defs/cocovtio):00725         Current        EQU       $ff                 Current screen
                      (/dd/defs/cocovtio):00726         *         equ   1          640x200x2
                      (/dd/defs/cocovtio):00727         *         equ   2          320x200x4
                      (/dd/defs/cocovtio):00728         *         equ   3          640x200x4
                      (/dd/defs/cocovtio):00729         *         equ   4          320x200x16
                      (/dd/defs/cocovtio):00730         *         equ   $85        80 column text
                      (/dd/defs/cocovtio):00731         *         equ   $86        40 column text
                      (/dd/defs/cocovtio):00732         
                      (/dd/defs/cocovtio):00733         *************************************
                      (/dd/defs/cocovtio):00734         * Window default palette color codes
                      (/dd/defs/cocovtio):00735         *
                      (/dd/defs/cocovtio):00736                        ORG       0
0000                  (/dd/defs/cocovtio):00737         White.         RMB       1
0001                  (/dd/defs/cocovtio):00738         Blue.          RMB       1
0002                  (/dd/defs/cocovtio):00739         Black.         RMB       1
0003                  (/dd/defs/cocovtio):00740         Green.         RMB       1
0004                  (/dd/defs/cocovtio):00741         Red.           RMB       1
0005                  (/dd/defs/cocovtio):00742         Yellow.        RMB       1
0006                  (/dd/defs/cocovtio):00743         Magenta.       RMB       1
0007                  (/dd/defs/cocovtio):00744         Cyan.          RMB       1
                      (/dd/defs/cocovtio):00745         
                      ( /dd/defs/deffile):00011                  use   /dd/defs/cocosdc.d
                      (/dd/defs/cocosdc.):00001         ********************************************************************
                      (/dd/defs/cocosdc.):00002         * cocosdc.d - CoCo SDC definitions
                      (/dd/defs/cocosdc.):00003         *
                      (/dd/defs/cocosdc.):00004         * $Id$
                      (/dd/defs/cocosdc.):00005         *
                      (/dd/defs/cocosdc.):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/defs/cocosdc.):00007         * Comment
                      (/dd/defs/cocosdc.):00008         * ------------------------------------------------------------------
                      (/dd/defs/cocosdc.):00009         *          2014/05/02  Boisy G. Pitre
                      (/dd/defs/cocosdc.):00010         * Created
                      (/dd/defs/cocosdc.):00011         
                      (/dd/defs/cocosdc.):00012         
     FF4A             (/dd/defs/cocosdc.):00013         SDAddr         SET       $FF4A
                      (/dd/defs/cocosdc.):00014         
                      ( /dd/defs/deffile):00012                  use   /dd/defs/vdgdefs
                      ( /dd/defs/vdgdefs):00001                        IFNE      VDGDEFS-1
                      ( /dd/defs/vdgdefs):00002         
     0001             ( /dd/defs/vdgdefs):00003         VDGDEFS        SET       1
                      ( /dd/defs/vdgdefs):00004         
                      ( /dd/defs/vdgdefs):00005         ********************************************************************
                      ( /dd/defs/vdgdefs):00006         * VDGDefs - VDG Interface Definititions
                      ( /dd/defs/vdgdefs):00007         *
                      ( /dd/defs/vdgdefs):00008         * $Id$
                      ( /dd/defs/vdgdefs):00009         *
                      ( /dd/defs/vdgdefs):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      ( /dd/defs/vdgdefs):00011         * Comment
                      ( /dd/defs/vdgdefs):00012         * ------------------------------------------------------------------
                      ( /dd/defs/vdgdefs):00013         *          1991/05/07  Alan DeKok
                      ( /dd/defs/vdgdefs):00014         * Wrote original from VDGInt source.
                      ( /dd/defs/vdgdefs):00015         
                      ( /dd/defs/vdgdefs):00016                        NAM       VDGDefs
                      ( /dd/defs/vdgdefs):00017                        TTL       VDG Interface Definitions
                      ( /dd/defs/vdgdefs):00018         
                      ( /dd/defs/vdgdefs):00019         * Notes:
                      ( /dd/defs/vdgdefs):00020         *
                      ( /dd/defs/vdgdefs):00021         * All offsets from 'U' (address of device memory area)
                      ( /dd/defs/vdgdefs):00022         * (see p. 6-9, technical reference: U=start of driver data memory
                      ( /dd/defs/vdgdefs):00023         * NOTE: There is LOTS of stuff which is only used once, and some which
                      ( /dd/defs/vdgdefs):00024         * is not needed.  Here's a list of the un-needed, and un-used (other than
                      ( /dd/defs/vdgdefs):00025         * once)
                      ( /dd/defs/vdgdefs):00026         *
                      ( /dd/defs/vdgdefs):00027         * It would probably be benificial to patch VDGint to fix these problems,
                      ( /dd/defs/vdgdefs):00028         * unless anyone else has ideas as to why VDGint is doing things this way.
                      ( /dd/defs/vdgdefs):00029         *
                      ( /dd/defs/vdgdefs):00030         * Un-needed
                      ( /dd/defs/vdgdefs):00031         * VD.EPlt1  - (2) set to VD.NChar, and then read only
                      ( /dd/defs/vdgdefs):00032         * VD.EPlt2  - (2) set to same as VD.EPlt1, and then unused
                      ( /dd/defs/vdgdefs):00033         * VD.Chr1   - (1) set to same as VD.CChar, and then unused
                      ( /dd/defs/vdgdefs):00034         * VD.PlFlg  - (1) initialized to $08, and unused
                      ( /dd/defs/vdgdefs):00035         *
                      ( /dd/defs/vdgdefs):00036         * Un-used
                      ( /dd/defs/vdgdefs):00037         *
                      ( /dd/defs/vdgdefs):00038         * $1D       - (1) end of SCF memory requirements
                      ( /dd/defs/vdgdefs):00039         * VD.Strt1  - (2) CLRed, and then read (LDD) - left as $0000
                      ( /dd/defs/vdgdefs):00040         * $24-$2B   - (8)
                      ( /dd/defs/vdgdefs):00041         * $33-$34   - (2)
                      ( /dd/defs/vdgdefs):00042         * $7E-$FF   - (130)
                      ( /dd/defs/vdgdefs):00043         *
                      ( /dd/defs/vdgdefs):00044         * Total of 22 (150 in whole page) bytes unneeded or unused.
                      ( /dd/defs/vdgdefs):00045         
                      ( /dd/defs/vdgdefs):00046                        ORG       $1E
001E                  ( /dd/defs/vdgdefs):00047         VD.Start       RMB       1                   start of VD.XXXX data: number of VDG screens in use
001F                  ( /dd/defs/vdgdefs):00048         VD.Strt1       RMB       2                   (2) and another start
0021                  ( /dd/defs/vdgdefs):00049         VD.Caps        RMB       2                   caps lock info: $00=lower $FF=upper
0023                  ( /dd/defs/vdgdefs):00050         VD.DFlag       RMB       1                   0=current screen is valid, $01-$FF = update video
                      ( /dd/defs/vdgdefs):00051         * $24-$2B unused
0024                  ( /dd/defs/vdgdefs):00052                        RMB       8
002C                  ( /dd/defs/vdgdefs):00053         VD.NGChr       RMB       1                   number of additional characters to get
002D                  ( /dd/defs/vdgdefs):00054         VD.RTAdd       RMB       2                   (2) return address after getting characters
002F                  ( /dd/defs/vdgdefs):00055         VD.EPlt1       RMB       2                   (2) pointer to where to put next character
0031                  ( /dd/defs/vdgdefs):00056         VD.EPlt2       RMB       2                   (2) as above.
                      ( /dd/defs/vdgdefs):00057         * $33-$34 unused
0033                  ( /dd/defs/vdgdefs):00058                        RMB       2
0035                  ( /dd/defs/vdgdefs):00059         VD.CFlag       RMB       1                   true lowercase flag $10=true, $00=false
0036                  ( /dd/defs/vdgdefs):00060         VD.CFlg1       RMB       1                   VDG display code values
0037                  ( /dd/defs/vdgdefs):00061         VD.DGBuf       RMB       1                   number of currently displayed buffer
0038                  ( /dd/defs/vdgdefs):00062         VD.ScrnA       RMB       2                   (2) screen start address in system memory
003A                  ( /dd/defs/vdgdefs):00063         VD.ScrnE       RMB       2                   (2) address of end of screen
003C                  ( /dd/defs/vdgdefs):00064         VD.CrsrA       RMB       1                   (2) cursor address
003D                  ( /dd/defs/vdgdefs):00065         VD.CrsAL       RMB       1                   cursor address low
003E                  ( /dd/defs/vdgdefs):00066         VD.CChar       RMB       1                   value of character under cursor
003F                  ( /dd/defs/vdgdefs):00067         VD.Mode        RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0040                  ( /dd/defs/vdgdefs):00068         VD.Chr1        RMB       1                   same as under cursor character
0041                  ( /dd/defs/vdgdefs):00069         VD.CColr       RMB       1                   cursor color
0042                  ( /dd/defs/vdgdefs):00070         VD.Col         RMB       1                   number of columns for this screen
0043                  ( /dd/defs/vdgdefs):00071         VD.Row         RMB       1                   number of rows
0044                  ( /dd/defs/vdgdefs):00072         VD.TFlg1       RMB       1                   see WRITE ($0E)
0045                  ( /dd/defs/vdgdefs):00073         VD.Alpha       RMB       1                   0 when in alpha mode
0046                  ( /dd/defs/vdgdefs):00074         VD.Rdy         RMB       1                   device ready (see SS.DStat 0=not ready)
0047                  ( /dd/defs/vdgdefs):00075         VD.SBAdd       RMB       2                   (2) address of block screen is in
0049                  ( /dd/defs/vdgdefs):00076         VD.Blk         RMB       1                   Block number of screen
004A                  ( /dd/defs/vdgdefs):00077         VD.GBuff       RMB       1                   allocation for graphics buffers (block#)
004B                  ( /dd/defs/vdgdefs):00078         VD.AGBuf       RMB       2                   (2) additional graphics buffer
004D                  ( /dd/defs/vdgdefs):00079         VD.HiRes       RMB       1                   hi-res screen table (block value)
004E                  ( /dd/defs/vdgdefs):00080         VD.NBlk        RMB       1                   number of blocks in this screen
004F                  ( /dd/defs/vdgdefs):00081         VD.SType       RMB       1                   screen type -4
0050                  ( /dd/defs/vdgdefs):00082         VD.HR2         RMB       3                   (3) for screen number 2
0053                  ( /dd/defs/vdgdefs):00083         VD.HR3         RMB       3                   (3) for screen 3 (same 3 bytes as above)
0056                  ( /dd/defs/vdgdefs):00084         VD.FFMem       RMB       2                   (2) bottom of stack for flood fill
0058                  ( /dd/defs/vdgdefs):00085         VD.FFSPt       RMB       2                   (2) flood fill stack pointer
005A                  ( /dd/defs/vdgdefs):00086         VD.FFSTp       RMB       2                   (2) flood fill stack top pointer
005C                  ( /dd/defs/vdgdefs):00087         VD.FF6         RMB       1                   flood fill flag
005D                  ( /dd/defs/vdgdefs):00088         VD.MTabl       RMB       2                   (2) address of mask table for pixels in byte
005F                  ( /dd/defs/vdgdefs):00089         VD.PixBt       RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0060                  ( /dd/defs/vdgdefs):00090         VD.GCrsX       RMB       1                   graphics cursor X value
0061                  ( /dd/defs/vdgdefs):00091         VD.GCrsY       RMB       1                   graphics cursor Y
0062                  ( /dd/defs/vdgdefs):00092         VD.Msk1        RMB       1                   mask byte 1
0063                  ( /dd/defs/vdgdefs):00093         VD.Msk2        RMB       1                   mask byte 2 (00,55,AA,FF)
0064                  ( /dd/defs/vdgdefs):00094         VD.MCol        RMB       1                   color? (C003,8001)
0065                  ( /dd/defs/vdgdefs):00095         VD.MCol2       RMB       1                   color
0066                  ( /dd/defs/vdgdefs):00096         VD.PMask       RMB       1                   pixel mask for colors (i.e. $55, $CC etc)
0067                  ( /dd/defs/vdgdefs):00097         VD.FF1         RMB       1                   data for flood fill
0068                  ( /dd/defs/vdgdefs):00098         VD.FF2         RMB       1                   data for flood fill
0069                  ( /dd/defs/vdgdefs):00099         VD.FFMsk       RMB       1                   flood fill mask
006A                  ( /dd/defs/vdgdefs):00100         VD.FFFlg       RMB       1                   flood fill flag
006B                  ( /dd/defs/vdgdefs):00101         VD.Palet       RMB       16                  (16) current palette values
007B                  ( /dd/defs/vdgdefs):00102         VD.PlFlg       RMB       1                   initialized to $08 by L00DB, and then unused!
007C                  ( /dd/defs/vdgdefs):00103         VD.NChar       RMB       1                   character to process
007D                  ( /dd/defs/vdgdefs):00104         VD.NChr2       RMB       1                   and the next one
                      ( /dd/defs/vdgdefs):00105         
                      ( /dd/defs/vdgdefs):00106         * and RMB until we get 256 bytes reserved
                      ( /dd/defs/vdgdefs):00107         
                      ( /dd/defs/vdgdefs):00108                        ENDC      
                      ( /dd/defs/vdgdefs):00109         
                      (vtio_beta5yakback):00068                endc
                      (vtio_beta5yakback):00069         
     00E1             (vtio_beta5yakback):00070         tylg     set   Drivr+Objct
     0080             (vtio_beta5yakback):00071         atrv     set   ReEnt+rev
     0000             (vtio_beta5yakback):00072         rev      set   0
     0003             (vtio_beta5yakback):00073         edition  set   3
                      (vtio_beta5yakback):00074         
                      (vtio_beta5yakback):00075         * LCB NOTE: Need to change this so that code always uses V.ULCASE static mem keyboard mouse flag,
                      (vtio_beta5yakback):00076         * but code will copy current state to all terminals if Global settings is on (and this could
                      (vtio_beta5yakback):00077         * use existing global G.KyMse for current "system state". SS.GIP2 call can add setting this to
                      (vtio_beta5yakback):00078         * allow changing after booting (might want to add/modify a byte in the new INIT module so that
                      (vtio_beta5yakback):00079         * the default setting comes from there). Or, have the code check if global enabled and use G.KyMse if
                      (vtio_beta5yakback):00080         * it is, or V.ULCASE if not. (if latter, reserve 2 bits in G.KyMse; hi bit is global enabled, low bit
                      (vtio_beta5yakback):00081         * is keyboard mouse turned on if global enabled.). NOTE: We can use the 3rd lowest bit in Feature1
                      (vtio_beta5yakback):00082         * byte of INIT for the default Global keyboard mouse on/off flag.
                      (vtio_beta5yakback):00083         * NOTE: Want to implement bit flags for local keyboard mouse & caps lock (like we did in TC-9), so
                      (vtio_beta5yakback):00084         * that we can use 3 colors of LED on the Boomerang E2 2 MB board (add BOOMERANG equ) to signify
                      (vtio_beta5yakback):00085         * Caps Lock on, Keyboard mouse on, and Caps Lock AND keyboard mouse on, for each window.
                      (vtio_beta5yakback):00086         * currently proposing Red for keyboard mouse, green for capslock, and either Blue or White for Both.
                      (vtio_beta5yakback):00087         * Maybe half intensity? (so AAx10000 where AA: 00="all", 01=Red, 10=Grn, 11=Blue
                      (vtio_beta5yakback):00088         * Also, I am not sure local window keyboard mouse is fully working - it looks the keysense check
                      (vtio_beta5yakback):00089         *  routine is checking the global setting only? Not tested yet, though.
                      (vtio_beta5yakback):00090         * Comment out next line for global keyboard mouse; otherwise, it's on/off
                      (vtio_beta5yakback):00091         * on a per-window basis.
     0000             (vtio_beta5yakback):00092         GLOBALKEYMOUSE equ  0       0=Local to window keyboard mouse, 1=Global keyboard mouse
                      (vtio_beta5yakback):00093         
0000 87CD097E000EE180 (vtio_beta5yakback):00094                  mod   eom,name,tylg,atrv,start,CC3DSiz
     AD059B0100
                      (vtio_beta5yakback):00095         
000D 07               (vtio_beta5yakback):00096                  fcb   EXEC.+UPDAT.
                      (vtio_beta5yakback):00097         
000E 565449CF         (vtio_beta5yakback):00098         name     fcs   /VTIO/
0012 03               (vtio_beta5yakback):00099                  fcb   edition
                      (vtio_beta5yakback):00100         
                      (vtio_beta5yakback):00101         
                      (vtio_beta5yakback):00102         * Term
                      (vtio_beta5yakback):00103         *
                      (vtio_beta5yakback):00104         * Entry:
                      (vtio_beta5yakback):00105         *    U  = address of device memory area
                      (vtio_beta5yakback):00106         *
                      (vtio_beta5yakback):00107         * Exit:
                      (vtio_beta5yakback):00108         *    CC = carry set on error
                      (vtio_beta5yakback):00109         *    B  = error code
                      (vtio_beta5yakback):00110         *
0013 9EA5             (vtio_beta5yakback):00111         Term     ldx   <D.CCMem       get ptr to CC memory
0015 11A38820         (vtio_beta5yakback):00112                  cmpu  G.CurDev,x     device to be terminated is current?
0019 262B             (vtio_beta5yakback):00113                  bne   noterm         no, execute terminate routine in co-module
001B 17049C           (vtio_beta5yakback):00114                  lbsr  SHFTCLR        get last window memory pointer
001E 11A38820         (vtio_beta5yakback):00115                  cmpu  G.CurDev,x     device to be terminated is current?
0022 2622             (vtio_beta5yakback):00116                  bne   noterm         no, execute terminate routine in co-module
                      (vtio_beta5yakback):00117         * We are last device that VTIO has active; terminate ourself
                      (vtio_beta5yakback):00118         * 6809/6309 - I don't think we need to pshs/puls CC - it's not using any of the flags after.
                      (vtio_beta5yakback):00119         * Just orcc and then replace puls cc with andcc        
0024 3401             (vtio_beta5yakback):00120                  pshs  cc             Save flags
0026 1A10             (vtio_beta5yakback):00121                  orcc  #IRQMask       Shut IRQ's off
                      (vtio_beta5yakback):00122                IFNE  H6309
                      (vtio_beta5yakback):00123                  clrd
                      (vtio_beta5yakback):00124                ELSE
0028 4F               (vtio_beta5yakback):00125                  clra
0029 5F               (vtio_beta5yakback):00126                  clrb
                      (vtio_beta5yakback):00127                ENDC
002A ED8820           (vtio_beta5yakback):00128                  std   G.CurDev,x     Zero out ptr to current device's static mem ptr
002D AE03             (vtio_beta5yakback):00129                  ldx   G.OrgAlt,x     get original D.AltIRQ address
002F 9FB2             (vtio_beta5yakback):00130                  stx   <D.AltIRQ      Save as current D.AltIRQ
                      (vtio_beta5yakback):00131         * for above change
                      (vtio_beta5yakback):00132         *         andcc #^IRQMask      Turn IRQ's back on
0031 3501             (vtio_beta5yakback):00133                  puls  cc             restore IRQs
0033 3450             (vtio_beta5yakback):00134                  pshs  u,x            Save regs
0035 8E10EA           (vtio_beta5yakback):00135                  ldx   #(WGlobal+G.JoyEnt)  Point to start of JoyDrv entry/static mem block
0038 8D11             (vtio_beta5yakback):00136                  bsr   TermSub        Terminate JoyDrv
003A 8E10F4           (vtio_beta5yakback):00137                  ldx   #(WGlobal+G.SndEnt)  Point to start of SndDrv entry/static mem block
003D 8D0C             (vtio_beta5yakback):00138                  bsr   TermSub        Terminate SndDrv
003F 8E10E0           (vtio_beta5yakback):00139                  ldx   #(WGlobal+G.KeyEnt)  Point to start of KeyDrv entry/static mem block
0042 8D07             (vtio_beta5yakback):00140                  bsr   TermSub        Terminate KeyDrv
0044 3550             (vtio_beta5yakback):00141                  puls  u,x            Restore regs
0046 C60C             (vtio_beta5yakback):00142         noterm   ldb   #$0C           branch table offset for terminate
0048 160586           (vtio_beta5yakback):00143                  lbra  CallCo         go to terminate in co-module
                      (vtio_beta5yakback):00144         
                      (vtio_beta5yakback):00145         * Call terminate routine in subroutine module (KeyDrv/JoyDrv/SndDrv)
                      (vtio_beta5yakback):00146         * X  = Ptr to start of 10 byte sub-module block (0-1 is entry point, 2-10 is static mem)
004B 3302             (vtio_beta5yakback):00147         TermSub  leau  2,x            point U to static area for sub module
004D AE84             (vtio_beta5yakback):00148                  ldx   ,x             get entry pointer at ,X
004F 6E03             (vtio_beta5yakback):00149                  jmp   J$Term,x       call term routine in sub module
                      (vtio_beta5yakback):00150         
                      (vtio_beta5yakback):00151         * Init
                      (vtio_beta5yakback):00152         * Entry: Y = address of device descriptor
                      (vtio_beta5yakback):00153         *        U = address of device static memory area
                      (vtio_beta5yakback):00154         * Exit:  CC = carry set on error
                      (vtio_beta5yakback):00155         *        B  = error code
                      (vtio_beta5yakback):00156         
0051 9EA5             (vtio_beta5yakback):00157         Init     ldx   <D.CCMem       get ptr to CC mem
0053 EC8820           (vtio_beta5yakback):00158                  ldd   <G.CurDev,x    has VTIO itself been initialized?
                      (vtio_beta5yakback):00159         * 6809/6309 - change to BNE
0056 10260099         (vtio_beta5yakback):00160                  lbne  PerWinInit     yes, don't bother doing it again, just do new window (or VDG) init
005A 308D045C         (vtio_beta5yakback):00161                  leax  >SHFTCLR,pcr   point to SHIFT-CLEAR subroutine
005E 3410             (vtio_beta5yakback):00162                  pshs  x              save it on stack
0060 308D050B         (vtio_beta5yakback):00163                  leax  >setmouse,pcr  get address of setmouse routine
0064 1F10             (vtio_beta5yakback):00164                  tfr   x,d            Move to D
0066 9EA5             (vtio_beta5yakback):00165                  ldx   <D.CCMem       get ptr to CC mem again
0068 ED8900C4         (vtio_beta5yakback):00166                  std   >G.MsInit,x    Save setmouse routine vector
006C 3506             (vtio_beta5yakback):00167                  puls  d              get address of SHIFT-CLEAR subroutine back
006E ED8900C2         (vtio_beta5yakback):00168                  std   >G.WindBk,x    save its vector
0072 EF8820           (vtio_beta5yakback):00169                  stu   <G.CurDev,x    Save current device's static mem ptr
0075 1704F7           (vtio_beta5yakback):00170                  lbsr  setmouse       initialize mouse
0078 8602             (vtio_beta5yakback):00171                  lda   #2             2 ticks default (1/30th of a second)
007A A784             (vtio_beta5yakback):00172                  sta   G.CurTik,x     save default # of clock ticks between cursor(s) updates
007C 6C883C           (vtio_beta5yakback):00173                  inc   <G.Mouse+Pt.Valid,x  set mouse packet to invalid (isn't this actually setting to valid?-LCB)
007F CC0178           (vtio_beta5yakback):00174                  ldd   #$0178         default to right mouse/button time out value (120)
0082 ED883D           (vtio_beta5yakback):00175                  std   <G.Mouse+Pt.Actv,x Save both values
0085 CCFFFF           (vtio_beta5yakback):00176                  ldd   #$FFFF         initialize last keyboard code to $FF, and key repeat counter to -1
0088 ED8828           (vtio_beta5yakback):00177                  std   <G.LKeyCd,x    last keyboard code & key repeat counter inactive
008B ED882B           (vtio_beta5yakback):00178                  std   <G.2Key2,x     Init first two keys in secondary key table to none
008E DC50             (vtio_beta5yakback):00179                  ldd   <D.Proc        Get ptr to current process descriptor
0090 3476             (vtio_beta5yakback):00180                  pshs  u,y,x,d        save regs
                      (vtio_beta5yakback):00181         * Added to allow patching for RGB/CMP/Mono and Key info - BGP
                      (vtio_beta5yakback):00182         * Uses new init module format to get monitor type and key info
                      (vtio_beta5yakback):00183         * LCB 6809/6309 - Define another bit in Feature Byte 1 or 2 for global vs. local window keyboard
                      (vtio_beta5yakback):00184         *  mouse, and set that up here.
0092 109E24           (vtio_beta5yakback):00185                  ldy   <D.Init        get ptr to INIT module
0095 A6A825           (vtio_beta5yakback):00186                  lda   MonType,y      get monitor type byte 0,1,2
0098 A78809           (vtio_beta5yakback):00187                  sta   <G.MonTyp,x    save in global memory
009B ECA826           (vtio_beta5yakback):00188                  ldd   MouseInf,y     get INIT module defaults for mouse hi/low res & left/right side
009E A78853           (vtio_beta5yakback):00189                  sta   <G.Mouse+Pt.Res,x  save hi-res/lo-res flag
00A1 E7883D           (vtio_beta5yakback):00190                  stb   <G.Mouse+Pt.Actv,x save off/left/right mouse flag
00A4 ECA828           (vtio_beta5yakback):00191                  ldd   KeyRptS,y      get key repeat start/delay constants
00A7 A78829           (vtio_beta5yakback):00192                  sta   <G.KyRept,x    set first delay
00AA ED8861           (vtio_beta5yakback):00193                  std   <G.KyDly,x     set initial and 2ndary constants
00AD DC4A             (vtio_beta5yakback):00194                  ldd   <D.SysPrc      get system process desc ptr
00AF DD50             (vtio_beta5yakback):00195                  std   <D.Proc        make current process
                      (vtio_beta5yakback):00196         * 6809/6309 use < addressing
00B1 308D004D         (vtio_beta5yakback):00197                  leax  >KeyDrv,pcr    point to keyboard driver sub module name
00B5 8D5D             (vtio_beta5yakback):00198                  bsr   LinkSys        link to it (restores U to D.CCMem)
00B7 10AFC900E0       (vtio_beta5yakback):00199                  sty   >G.KeyEnt,u    save the entry point
00BC 33C900E2         (vtio_beta5yakback):00200                  leau  >G.KeyMem,u    point U to keydrv statics
00C0 ADA4             (vtio_beta5yakback):00201                  jsr   ,y             call init routine of sub module (K$Init)
                      (vtio_beta5yakback):00202         * 6809/6309 use < addressing
00C2 308D0042         (vtio_beta5yakback):00203                  leax  >JoyDrv,pcr    point to joystick driver sub module name
00C6 8D4C             (vtio_beta5yakback):00204                  bsr   LinkSys        link to it (restores U to D.CCMem)
00C8 10AFC900EA       (vtio_beta5yakback):00205                  sty   >G.JoyEnt,u    and save the entry point
00CD 33C900EC         (vtio_beta5yakback):00206                  leau  >G.JoyMem,u    point U to joydrv statics
00D1 ADA4             (vtio_beta5yakback):00207                  jsr   ,y             call init routine of sub module (J$Init)
                      (vtio_beta5yakback):00208         * 6809/6309 use < addressing
00D3 308D0037         (vtio_beta5yakback):00209                  leax  >SndDrv,pcr    point to sound driver sub module name
00D7 8D3B             (vtio_beta5yakback):00210                  bsr   LinkSys        link to it (restores U to D.CCMem)
00D9 10AFC900F4       (vtio_beta5yakback):00211                  sty   >G.SndEnt,u    and save the entry point
00DE 33C900F6         (vtio_beta5yakback):00212                  leau  >G.SndMem,u    point U to sound statics
00E2 ADA4             (vtio_beta5yakback):00213                  jsr   ,y             call init routine of sub module (S$Init)
00E4 3576             (vtio_beta5yakback):00214                  puls  u,y,x,d        restore saved regs
00E6 DD50             (vtio_beta5yakback):00215                  std   <D.Proc        and restore current process
00E8 9EB2             (vtio_beta5yakback):00216                  ldx   <D.AltIRQ      get original D.AltIRQ address
00EA BF1003           (vtio_beta5yakback):00217                  stx   >WGlobal+G.OrgAlt  save in window globals for later
00ED 308D0222         (vtio_beta5yakback):00218                  leax  >ISR,pcr       vector to update tone counter, mice, cursor updates (called from Clock)
00F1 9FB2             (vtio_beta5yakback):00219                  stx   <D.AltIRQ      Save as AltIRQ vector
                      (vtio_beta5yakback):00220         * This code is executed on init of every window
                      (vtio_beta5yakback):00221         * U = device memory area
00F3 CC0078           (vtio_beta5yakback):00222         PerWinInit ldd #$0078         Default mouse sample rate (0) & mouse button timeout ($78 / 120)
00F6 EDC828           (vtio_beta5yakback):00223                  std   <V.MSmpl,u     (Mouse sample rate & fire button timeout value)
00F9 ECA826           (vtio_beta5yakback):00224                  ldd   <IT.PAR,y      get parity/baud bytes from dev desc
00FC EDC81F           (vtio_beta5yakback):00225                  std   <V.DevPar,u    save it off in our static (hi bit=window device)
00FF 1607EE           (vtio_beta5yakback):00226                  lbra  FindCoMod      go find and init co-module
                      (vtio_beta5yakback):00227         
0102 4B65794472F6     (vtio_beta5yakback):00228         KeyDrv   fcs   /KeyDrv/       Name of keyboard driver subroutine module
0108 4A6F794472F6     (vtio_beta5yakback):00229         JoyDrv   fcs   /JoyDrv/       Name of joystick driver subroutine module
010E 536E644472F6     (vtio_beta5yakback):00230         SndDrv   fcs   /SndDrv/       Name of sound driver subroutine module
                      (vtio_beta5yakback):00231         
                      (vtio_beta5yakback):00232         * Link to subroutine module
                      (vtio_beta5yakback):00233         * Entry: X=ptr to module name
0114 86C1             (vtio_beta5yakback):00234         LinkSys  lda   #Systm+Objct   system module
0116 103F00           (vtio_beta5yakback):00235                  os9   F$Link         link to it
0119 DEA5             (vtio_beta5yakback):00236                  ldu   <D.CCMem       Get ptr to CC mem back
011B 39               (vtio_beta5yakback):00237                  rts
                      (vtio_beta5yakback):00238         
                      (vtio_beta5yakback):00239         * Read
                      (vtio_beta5yakback):00240         *
                      (vtio_beta5yakback):00241         * NOTE:
                      (vtio_beta5yakback):00242         * This just reads keys from the buffer. The physical reading
                      (vtio_beta5yakback):00243         * of keys is done by the IRQ routine (now in KEYDRV)
                      (vtio_beta5yakback):00244         *
                      (vtio_beta5yakback):00245         * Entry:
                      (vtio_beta5yakback):00246         *    Y  = address of path descriptor
                      (vtio_beta5yakback):00247         *    U  = address of device memory area
                      (vtio_beta5yakback):00248         *
                      (vtio_beta5yakback):00249         * Exit:
                      (vtio_beta5yakback):00250         *    A  = character read
                      (vtio_beta5yakback):00251         *    CC = carry set on error
                      (vtio_beta5yakback):00252         *    B  = error code
                      (vtio_beta5yakback):00253         *
                      (vtio_beta5yakback):00254         * 6809/6309 - use lda instead of tst (same size/faster)
011C 6D48             (vtio_beta5yakback):00255         Read     tst   V.PAUS,u       device paused?
011E 2A07             (vtio_beta5yakback):00256                  bpl   read1          no, do normal read
                      (vtio_beta5yakback):00257         * Here, device is paused; check for mouse button down
                      (vtio_beta5yakback):00258         * If it is down, we simply return without error.
                      (vtio_beta5yakback):00259         * 6809/6309 - use lda instead of tst (same size/faster)
0120 7D1044           (vtio_beta5yakback):00260                  tst   >(WGlobal+G.Mouse+Pt.CBSA) test current button state A
0123 2702             (vtio_beta5yakback):00261                  beq   read1          button isn't pressed, do normal read
0125 4F               (vtio_beta5yakback):00262                  clra                 Button pressed, return w/o error
0126 39               (vtio_beta5yakback):00263                  rts
                      (vtio_beta5yakback):00264         
                      (vtio_beta5yakback):00265         * Check to see if there is a signal-on-data-ready set for this path.
                      (vtio_beta5yakback):00266         * If so, we return a Not Ready error.
0127 A6C824           (vtio_beta5yakback):00267         read1    lda   <V.SSigID,u    data ready signal trap set up?
012A 1026057A         (vtio_beta5yakback):00268                  lbne  NotReady       yes, exit with not ready error
012E 30C90080         (vtio_beta5yakback):00269                  leax  >ReadBuf,u     point to keyboard buffer (up to 128 chars)
0132 E6C834           (vtio_beta5yakback):00270                  ldb   <V.InpPtr,u    get current position in keyboard buffer
0135 1A10             (vtio_beta5yakback):00271                  orcc  #IRQMask       disable IRQs
0137 E1C833           (vtio_beta5yakback):00272                  cmpb  <V.EndPtr,u    same as end of buffer ptr (no keys in buffer)?
013A 270D             (vtio_beta5yakback):00273                  beq   ReadSlp        yes, no new chars waiting, sleep/scan for them
                      (vtio_beta5yakback):00274         * Character(s) waiting in buffer
013C 3A               (vtio_beta5yakback):00275                  abx                  move ptr to character
013D A684             (vtio_beta5yakback):00276                  lda   ,x             get character from buffer
013F 5C               (vtio_beta5yakback):00277                  incb                 inc keyboard buffer ptr
0140 2A01             (vtio_beta5yakback):00278                  bpl   bumpdon        if it hasn't wrapped 128 bytes, go save it
0142 5F               (vtio_beta5yakback):00279                  clrb                 Wrapped, force to 0
0143 E7C834           (vtio_beta5yakback):00280         bumpdon  stb   <V.InpPtr,u    save updated keyboard buffer ptr
0146 1CEE             (vtio_beta5yakback):00281                  andcc #^(IRQMask!Carry) re-enable IRQ's and clear carry
0148 39               (vtio_beta5yakback):00282                  rts                  return with A containing char read (and B=updated offset into keyboard buffer)
                      (vtio_beta5yakback):00283         
                      (vtio_beta5yakback):00284         * Nothing is in input buffer so wait for it
0149 A644             (vtio_beta5yakback):00285         ReadSlp  lda   V.BUSY,u       get active process id #
014B A745             (vtio_beta5yakback):00286                  sta   V.WAKE,u       save as process id # to wake up when data read
014D 1CEF             (vtio_beta5yakback):00287                  andcc #^IRQMask      re-enable IRQ's
014F 8E0000           (vtio_beta5yakback):00288                  ldx   #$0000         sleep until signal received
0152 103F0A           (vtio_beta5yakback):00289                  os9   F$Sleep
0155 6F45             (vtio_beta5yakback):00290                  clr   V.WAKE,u       signal gotten, disable process # to wake up
0157 9E50             (vtio_beta5yakback):00291                  ldx   <D.Proc        get current proc desc ptr
0159 E68819           (vtio_beta5yakback):00292                  ldb   <P$Signal,x    signal pending?
015C 27BE             (vtio_beta5yakback):00293                  beq   Read           no, go read char
                      (vtio_beta5yakback):00294         * Signal was pending already, check it out
                      (vtio_beta5yakback):00295                IFNE  H6309
                      (vtio_beta5yakback):00296                  tim   #Condem,P$State,x  are we condemned?
                      (vtio_beta5yakback):00297                ELSE
015E A60C             (vtio_beta5yakback):00298                  lda   P$State,x      Are we condemned?
0160 8502             (vtio_beta5yakback):00299                  bita  #Condem
                      (vtio_beta5yakback):00300                ENDC
0162 2604             (vtio_beta5yakback):00301                  bne   ReadErr        yes, exit with error flag set back to SCF
0164 C104             (vtio_beta5yakback):00302                  cmpb  #S$Window      window change or higher (user defined) signal?
0166 24B4             (vtio_beta5yakback):00303                  bhs   Read           yes, read the char since it won't change
0168 43               (vtio_beta5yakback):00304         ReadErr  coma                 major signal, return with error (Keyboard abort/interrupt)
0169 39               (vtio_beta5yakback):00305                  rts
                      (vtio_beta5yakback):00306         
                      (vtio_beta5yakback):00307         * Keyboard mouse coordinate deltas - note it maxes Y correctly
016A 0801             (vtio_beta5yakback):00308         L0160    fcb   8,1            right arrow X=X+8, shifted right arrow X=X+1
016C 027F             (vtio_beta5yakback):00309                  fdb   MaxRows-1      ctrl right arrow - X=maximum X allowed
016E F8FF             (vtio_beta5yakback):00310                  fcb   -8,-1          left arrow X=X-8, shifted left arrow Y=Y-1
0170 0000             (vtio_beta5yakback):00311                  fdb   0              ctrl left arrow X=0
0172 0801             (vtio_beta5yakback):00312                  fcb   8,1            down arrow Y=Y+8, shifted down arrow Y=Y+1
0174 00C6             (vtio_beta5yakback):00313                  fdb   MaxLine        ctrl down arrow Y=maximum Y allowed
0176 F8FF             (vtio_beta5yakback):00314                  fcb   -8,-1          up arrow Y=Y-8, shifted up arrow Y=Y-1
0178 0000             (vtio_beta5yakback):00315                  fdb   0              ctrl up arrow, Y=0
                      (vtio_beta5yakback):00316         
                      (vtio_beta5yakback):00317         * Check mouse coordinate
                      (vtio_beta5yakback):00318         * Entry: D=Maximum allowed coordinate for current axis being checked
                      (vtio_beta5yakback):00319         *        Y=Ptr to current coordinate in mouse packet being checked
017A 10A3A4           (vtio_beta5yakback):00320         L0170    cmpd  ,y             past maximum allowed coordinate?
017D 2D06             (vtio_beta5yakback):00321                  blt   L017B          No, save as is
017F ECA4             (vtio_beta5yakback):00322                  ldd   ,y             below zero?
0181 2A04             (vtio_beta5yakback):00323                  bpl   L017D          no, return
                      (vtio_beta5yakback):00324                IFNE  H6309
                      (vtio_beta5yakback):00325                  clrd                 Yes, force to 0
                      (vtio_beta5yakback):00326                ELSE
0183 4F               (vtio_beta5yakback):00327                  clra                 Yes, force to 0
0184 5F               (vtio_beta5yakback):00328                  clrb
                      (vtio_beta5yakback):00329                ENDC
0185 EDA4             (vtio_beta5yakback):00330         L017B    std   ,y             set it to maximum coordinate & return
0187 39               (vtio_beta5yakback):00331         L017D    rts
                      (vtio_beta5yakback):00332         
                      (vtio_beta5yakback):00333         
                      (vtio_beta5yakback):00334         * Main keyboard scan (after PIA has been read)
                      (vtio_beta5yakback):00335         * Check keyboard mouse arrows
                      (vtio_beta5yakback):00336         * Entry: U=Global mem ptr
                      (vtio_beta5yakback):00337         *        X=???
                      (vtio_beta5yakback):00338         *        A=Key that was pressed
                      (vtio_beta5yakback):00339         * Exit:  E=0 if key was pressed, 1 if none pressed
                      (vtio_beta5yakback):00340         * Updated for localized keyboard mouse similar to TC9IO
                      (vtio_beta5yakback):00341         *
0188 C601             (vtio_beta5yakback):00342         L017E    ldb   #$01           flag that no mouse movement happened as default
018A 3476             (vtio_beta5yakback):00343                  pshs  u,y,x,d        save registers used & flag (and A=key pressed)
018C E6C863           (vtio_beta5yakback):00344                  ldb   <G.KyMse,u     get global keyboard mouse enabled flag
018F 275E             (vtio_beta5yakback):00345                  beq   L01E6          Not on, skip keyboard mouse processing
                      (vtio_beta5yakback):00346         * Keyboard mouse is on
0191 A6C834           (vtio_beta5yakback):00347                  lda   <G.KySns,u     Keyboard mouse on, get Key Sense byte
0194 8578             (vtio_beta5yakback):00348                  bita  #%01111000     any arrow key pressed?
0196 2750             (vtio_beta5yakback):00349                  beq   L01DF          No, skip arrow key processing
0198 6F61             (vtio_beta5yakback):00350                  clr   1,s            clear flag to indicate update
019A 8601             (vtio_beta5yakback):00351                  lda   #1             Flag that mouse has moved
019C A7C867           (vtio_beta5yakback):00352                  sta   <G.MseMv,u
019F CC0803           (vtio_beta5yakback):00353                  ldd   #%00001000*256+3  start at up arrow flag bit, 4 to check for (0-3)
01A2 3406             (vtio_beta5yakback):00354                  pshs  d              Save check bit & ctr
01A4 308DFFC2         (vtio_beta5yakback):00355                  leax  >L0160,pcr     point to keyboard mouse deltas
01A8 31C856           (vtio_beta5yakback):00356                  leay  <G.Mouse+Pt.AcY,u  Point to actual mouse Y coord in mouse packet
                      (vtio_beta5yakback):00357         * Update keyboard mouse co-ordinates according to arrow key pressed
01AB A5C834           (vtio_beta5yakback):00358         L01A2    bita  <G.KySns,u     desired arrow key down?
01AE 271E             (vtio_beta5yakback):00359                  beq   L01C5          no, move to next key
01B0 58               (vtio_beta5yakback):00360                  lslb                 Yes, multiply ctr/arrow # * 4 (size of each delta set)
01B1 58               (vtio_beta5yakback):00361                  lslb                   to point to start of table entry
01B2 6DC830           (vtio_beta5yakback):00362                  tst   <G.ShftDn,u    SHIFT key pressed too?
01B5 2703             (vtio_beta5yakback):00363                  beq   L01B1          No, check for CTRL
01B7 5C               (vtio_beta5yakback):00364                  incb                 Yes, move table offset to SHIFTed version
01B8 200B             (vtio_beta5yakback):00365                  bra   L01BC          Go get how far we are moving from table
                      (vtio_beta5yakback):00366         
01BA 6DC831           (vtio_beta5yakback):00367         L01B1    tst   <G.CntlDn,u    CTRL key pressed too?
01BD 2706             (vtio_beta5yakback):00368                  beq   L01BC          no, go update mouse cursor position
                      (vtio_beta5yakback):00369         * <CTRL>-arrow
01BF CB02             (vtio_beta5yakback):00370                  addb  #2             move ptr to <CTRL> offset (which is actual 16 bit actual mouse coord to use)
01C1 EC85             (vtio_beta5yakback):00371                  ldd   b,x            get control coordinate
01C3 2005             (vtio_beta5yakback):00372                  bra   L01C1          save in mouse packet
                      (vtio_beta5yakback):00373         
                      (vtio_beta5yakback):00374         * <arrow> (B=0) or <SHIFT>-<arrow> (B=1)
01C5 E685             (vtio_beta5yakback):00375         L01BC    ldb   b,x            Get how many pixels to change mouse coordinate by
01C7 1D               (vtio_beta5yakback):00376                  sex                  Make 16 bit offset, signed
01C8 E3A4             (vtio_beta5yakback):00377                  addd  ,y             add it to current coordinate
01CA EDA4             (vtio_beta5yakback):00378         L01C1    std   ,y             save updated coordinate
01CC ECE4             (vtio_beta5yakback):00379                  ldd   ,s             get KeySns arrow key bit flag position, and key check counter
01CE 48               (vtio_beta5yakback):00380         L01C5    lsla                 move to next arrow key bit
01CF 5A               (vtio_beta5yakback):00381                  decb                 Dec key check ctr
01D0 C101             (vtio_beta5yakback):00382                  cmpb  #1             We at left arrow (switching to X coords) yet?
01D2 2602             (vtio_beta5yakback):00383                  bne   L01CD          no, continue
01D4 313E             (vtio_beta5yakback):00384                  leay  -2,y           Yes, point Y to Pt.AcX (Y mouse coordinate)
01D6 EDE4             (vtio_beta5yakback):00385         L01CD    std   ,s             Save arrow key bit (keysense) & # of arrow keys left to check
01D8 2AD1             (vtio_beta5yakback):00386                  bpl   L01A2          keep trying until all keys checked (hi bit set once we are done all arrows)
01DA 3506             (vtio_beta5yakback):00387                  puls  d              purge stack of key bit & key tbl counter
01DC CC027F           (vtio_beta5yakback):00388                  ldd   #MaxRows-1     get maximum X coordinate
01DF 8D99             (vtio_beta5yakback):00389                  bsr   L0170          If we went past, set to maximum
01E1 3122             (vtio_beta5yakback):00390                  leay  2,y            move to Y coordinate
01E3 CC00C6           (vtio_beta5yakback):00391                  ldd   #MaxLine       get maximum Y coordinate
01E6 8D92             (vtio_beta5yakback):00392                  bsr   L0170          If we went past, set to maximum
                      (vtio_beta5yakback):00393         * Non-arrow key comes here
01E8 A6C865           (vtio_beta5yakback):00394         L01DF    lda   <G.KyButt,u    Either F1 or F2 (keyboard mouse fire buttons) down?
01EB 264D             (vtio_beta5yakback):00395                  bne   L0223          yes, clear flag byte on stack & return
01ED A6E4             (vtio_beta5yakback):00396                  lda   ,s             no, get back key pressed
01EF 6DC864           (vtio_beta5yakback):00397         L01E6    tst   <G.Clear,u     CLEAR key down?
01F2 2748             (vtio_beta5yakback):00398                  beq   L0225          yes, get mouse moved flag into B & return
01F4 6FC864           (vtio_beta5yakback):00399                  clr   <G.Clear,u     no, clear out clear key flag
                      (vtio_beta5yakback):00400         * Check CTRL-0 (CAPS-Lock)
01F7 8181             (vtio_beta5yakback):00401                  cmpa  #%10000001     CTRL-0? (capslock toggle)
01F9 2612             (vtio_beta5yakback):00402                  bne   L01FF          no, keep checking
01FB E6C835           (vtio_beta5yakback):00403                  ldb   <G.KySame,u    Yes, same key press we had last run through?
01FE 263A             (vtio_beta5yakback):00404                  bne   L0223          Yes,flag no update & return
0200 AEC820           (vtio_beta5yakback):00405                  ldx   <G.CurDev,u    get current device's static mem pointer
                      (vtio_beta5yakback):00406                IFNE  H6309
                      (vtio_beta5yakback):00407                  eim   #CapsLck,<V.ULCase,x Toggle Capslock enabled/disabled bit
                      (vtio_beta5yakback):00408                ELSE
0203 E68821           (vtio_beta5yakback):00409                  ldb   <V.ULCase,x    Get current keyboard flgas
0206 C804             (vtio_beta5yakback):00410                  eorb  #CapsLck       Toggle current CapsLock status
0208 E78821           (vtio_beta5yakback):00411                  stb   <V.ULCase,x    Save it back
                      (vtio_beta5yakback):00412                ENDC
020B 202D             (vtio_beta5yakback):00413                  bra   L0223          Flag no mouse/cursor change & return
                      (vtio_beta5yakback):00414         
                      (vtio_beta5yakback):00415         * Check CLEAR key
020D 8182             (vtio_beta5yakback):00416         L01FF    cmpa  #%10000010     was key pressed CLEAR key?
020F 2605             (vtio_beta5yakback):00417                  bne   L0208          no, check next
0211 170296           (vtio_beta5yakback):00418                  lbsr  CLEAR          find next window & return with no change flag
0214 2024             (vtio_beta5yakback):00419                  bra   L0223
                      (vtio_beta5yakback):00420         
                      (vtio_beta5yakback):00421         * Check SHIFT-CLEAR
0216 8183             (vtio_beta5yakback):00422         L0208    cmpa  #%10000011     was it SHIFT-CLEAR?
0218 2605             (vtio_beta5yakback):00423                  bne   L0211          no, check next
021A 17029D           (vtio_beta5yakback):00424                  lbsr  SHFTCLR        yes, find previous window & return with no change flag
021D 201B             (vtio_beta5yakback):00425                  bra   L0223
                      (vtio_beta5yakback):00426         
                      (vtio_beta5yakback):00427         * Check CTRL-CLEAR
021F 8184             (vtio_beta5yakback):00428         L0211    cmpa  #%10000100     keyboard mouse toggle key (CTRL-CLEAR>?
0221 2619             (vtio_beta5yakback):00429                  bne   L0225          no, return leaving change flag as is
0223 E6C835           (vtio_beta5yakback):00430                  ldb   <G.KySame,u    Yes, same key as last pressed?
0226 2612             (vtio_beta5yakback):00431                  bne   L0223          yes, clear change flag & return
                      (vtio_beta5yakback):00432         * 6809/6309 - see notes in cocovtio.d for using a new SS.GIP2 call to allow setting global
                      (vtio_beta5yakback):00433         * vs. local keyboard mouse while NitrOS9 is running, vs. having to assemble each version separately
                      (vtio_beta5yakback):00434         * LCB (not implemented yet)
                      (vtio_beta5yakback):00435              IFNE  GLOBALKEYMOUSE
                      (vtio_beta5yakback):00436                  com   <G.KyMse,u     Toggle global keyboard mouse setting
                      (vtio_beta5yakback):00437              ELSE
0228 AEC820           (vtio_beta5yakback):00438                  ldx   <G.CurDev,u    Get current device's static mem ptr
022B 4F               (vtio_beta5yakback):00439                  clra                 default keyboard mouse disabled
                      (vtio_beta5yakback):00440                IFNE  H6309
                      (vtio_beta5yakback):00441                  eim   #KeyMse,<V.ULCase,x Toggle local keyboard mouse status bit
                      (vtio_beta5yakback):00442                ELSE
022C E68821           (vtio_beta5yakback):00443                  ldb   <V.ULCase,x    Get current keyboard special flags
022F C801             (vtio_beta5yakback):00444                  eorb  #KeyMse        toggle current local Keyboard Mouse status bit
0231 E78821           (vtio_beta5yakback):00445                  stb   <V.ULCase,x    Save new setting
                      (vtio_beta5yakback):00446                ENDC
0234 2701             (vtio_beta5yakback):00447                  beq   KeyMOff        Leave A=0 if keyboards mouse OFF
0236 4A               (vtio_beta5yakback):00448                  deca                 else A=$FF (for ON)
0237 A7C863           (vtio_beta5yakback):00449         KeyMOff  sta   <G.KyMse,u     Copy window's local keyboard mouse flag into global version
                      (vtio_beta5yakback):00450              ENDC
023A 6F61             (vtio_beta5yakback):00451         L0223    clr   1,s            Clear move flag
023C E661             (vtio_beta5yakback):00452         L0225    ldb   1,s            Get current state of move flag, restore regs & return
023E 35F6             (vtio_beta5yakback):00453                  puls  pc,u,y,x,d
                      (vtio_beta5yakback):00454         
                      (vtio_beta5yakback):00455         * Update a bounch of mouse packet stuff
                      (vtio_beta5yakback):00456         * Entry: X=PIA address
                      (vtio_beta5yakback):00457         *        A=keyboard mouse button flags
                      (vtio_beta5yakback):00458         *        B=mouse button status
                      (vtio_beta5yakback):00459         *        U=global mem ptr
0240 3414             (vtio_beta5yakback):00460         L0229    pshs  x,b            save external mouse button status & PIA addr
0242 30C83C           (vtio_beta5yakback):00461                  leax  <G.Mouse,u     Point to mouse packet in Global mem
0245 6D02             (vtio_beta5yakback):00462                  tst   Pt.ToTm,x      Is timeout INIT value 0 (ie off)?
0247 1027008E         (vtio_beta5yakback):00463                  lbeq  L02C8          Yes, restore regs & return
024B 327B             (vtio_beta5yakback):00464                  leas  -5,s           make a buffer for locals
                      (vtio_beta5yakback):00465         * local stack vars are:
                      (vtio_beta5yakback):00466         * 0,s = left / right side select (1=left side, 0=none or right side)
                      (vtio_beta5yakback):00467         * 1,s = High bit is button 1 state
                      (vtio_beta5yakback):00468         * 2,s = low bit is button 2 state
                      (vtio_beta5yakback):00469         * 3,s = toggled version Pt.CBSA (the previous button 1 state)
                      (vtio_beta5yakback):00470         * 4,s = toggled version Pt.CBSB (the previous button 2 state)
024D 1F89             (vtio_beta5yakback):00471                  tfr   a,b            move keyboard button flags to B
024F 6DC863           (vtio_beta5yakback):00472                  tst   <G.KyMse,u     Global keyboard mouse activated?
0252 2611             (vtio_beta5yakback):00473                  bne   L024E          yes, go on
0254 C605             (vtio_beta5yakback):00474                  ldb   #%00000101     Default mask for button 1 & 2 on right mouse/joystick
0256 A601             (vtio_beta5yakback):00475                  lda   Pt.Actv,x      get active mouse side
0258 8402             (vtio_beta5yakback):00476                  anda  #%00000010     clear all but left side select
025A A7E4             (vtio_beta5yakback):00477                  sta   ,s             Save side flag
025C 2701             (vtio_beta5yakback):00478                  beq   L0248          If right, bit mask is already correct
025E 58               (vtio_beta5yakback):00479                  lslb                 Left, change button 1 & 2 mask for left mouse
025F E465             (vtio_beta5yakback):00480         L0248    andb  5,s            check with external mouse button status type
0261 4D               (vtio_beta5yakback):00481                  tsta                 right side?
0262 2701             (vtio_beta5yakback):00482                  beq   L024E          yes, skip ahead
0264 54               (vtio_beta5yakback):00483                  lsrb                 left side, shift over so we can use same routine
                      (vtio_beta5yakback):00484         * Bits 0 & 2 of B contain external mouse buttons that are pressed (doesn't
                      (vtio_beta5yakback):00485         * matter which side)
0265 4F               (vtio_beta5yakback):00486         L024E    clra                 Next 4 lines: High bit of A is fire button 1, low bit of B is fire button 2
0266 54               (vtio_beta5yakback):00487                  lsrb
0267 49               (vtio_beta5yakback):00488                  rola
0268 54               (vtio_beta5yakback):00489                  lsrb
0269 ED61             (vtio_beta5yakback):00490                  std   1,s            Save both fire button flags
026B 2620             (vtio_beta5yakback):00491                  bne   L0276          If either/both fire buttons are pressed, skip ahead
026D A605             (vtio_beta5yakback):00492                  lda   Pt.TTTo,x      Timeout counter done?
026F 2766             (vtio_beta5yakback):00493                  beq   L02C6          yes, eat temp stack & exit
0271 8D68             (vtio_beta5yakback):00494                  bsr   L02CA          No, check if either/both fire button state has changed from last time
0273 2704             (vtio_beta5yakback):00495                  beq   L0262          no, decrement timeout count
0275 8D6D             (vtio_beta5yakback):00496                  bsr   L02D3          Yes, update fire button click & timeout info
0277 2747             (vtio_beta5yakback):00497                  beq   L02AB          if neither button changed state, skip ahead
0279 6A05             (vtio_beta5yakback):00498         L0262    dec   Pt.TTTo,x      decrement timeout counter
027B 2643             (vtio_beta5yakback):00499                  bne   L02AB          not timed out, update last state counts
                      (vtio_beta5yakback):00500                IFNE  H6309
                      (vtio_beta5yakback):00501                  clrd
                      (vtio_beta5yakback):00502                  clrw
                      (vtio_beta5yakback):00503                ELSE
027D 4F               (vtio_beta5yakback):00504                  clra
027E 5F               (vtio_beta5yakback):00505                  clrb
                      (vtio_beta5yakback):00506                ENDC
027F A7C900C6         (vtio_beta5yakback):00507                  sta   >G.MsSig,u     clear Mouse signal flag
0283 ED06             (vtio_beta5yakback):00508                  std   Pt.TSSt,x      clear time since start counter
                      (vtio_beta5yakback):00509                IFNE  H6309
                      (vtio_beta5yakback):00510                  stq   Pt.CCtA,x      clear both buttons click count & time this state
                      (vtio_beta5yakback):00511                ELSE
0285 ED0A             (vtio_beta5yakback):00512                  std   Pt.CCtA,x      clear both buttons click count & time this state
0287 ED0C             (vtio_beta5yakback):00513                  std   Pt.TTSA,x
                      (vtio_beta5yakback):00514                ENDC
0289 ED0E             (vtio_beta5yakback):00515                  std   Pt.TLSA,x      clear both buttons time last state
028B 204A             (vtio_beta5yakback):00516                  bra   L02C6          Eat temp stack & return
                      (vtio_beta5yakback):00517         
                      (vtio_beta5yakback):00518         * At least one firebutton is pressed
028D A602             (vtio_beta5yakback):00519         L0276    lda   Pt.ToTm,x      Re-initialize time till timeout from initial counter
028F A705             (vtio_beta5yakback):00520                  sta   Pt.TTTo,x
0291 8D48             (vtio_beta5yakback):00521                  bsr   L02CA          Either fire button change state?
0293 272B             (vtio_beta5yakback):00522                  beq   L02AB          No, update last state counts
0295 8D4D             (vtio_beta5yakback):00523                  bsr   L02D3          Yes, update fire button states, timeouts & counters
0297 7C10C6           (vtio_beta5yakback):00524                  inc   >WGlobal+G.MsSig flag mouse signal
                      (vtio_beta5yakback):00525                IFNE  H6309
                      (vtio_beta5yakback):00526                  ldq   <Pt.AcX,x      get actual X & Y coordinates
                      (vtio_beta5yakback):00527                  stq   <Pt.BDX,x      copy it to button down X & Y coordinates
                      (vtio_beta5yakback):00528                ELSE
029A EC8818           (vtio_beta5yakback):00529                  ldd   <Pt.AcX,x      get actual X coordinate
029D ED8812           (vtio_beta5yakback):00530                  std   <Pt.BDX,x      copy it to button down X coordinate
02A0 EC881A           (vtio_beta5yakback):00531                  ldd   <Pt.AcY,x      get actual Y coordinate
02A3 ED8814           (vtio_beta5yakback):00532                  std   <Pt.BDY,x      copy it to button down Y coordinate
                      (vtio_beta5yakback):00533                ENDC
02A6 3440             (vtio_beta5yakback):00534                  pshs  u              save ptr to CC mem
02A8 EEC820           (vtio_beta5yakback):00535                  ldu   <G.CurDev,u    get current device static mem ptr
02AB A6C826           (vtio_beta5yakback):00536                  lda   <V.MSigID,u    get process ID requesting mouse signal
02AE 270E             (vtio_beta5yakback):00537                  beq   L02A9          None, don't set up a signal
02B0 E6C827           (vtio_beta5yakback):00538                  ldb   <V.MSigSg,u    Get signal code we need to send
02B3 103F08           (vtio_beta5yakback):00539                  os9   F$Send         and send it to process
02B6 2503             (vtio_beta5yakback):00540                  bcs   L02A5          If error on Send, leave Mouse signal flag (so we can try again later)
02B8 6FC826           (vtio_beta5yakback):00541                  clr   <V.MSigID,u    Successful send, erase process # to send signal to
02BB 7F10C6           (vtio_beta5yakback):00542         L02A5    clr   >WGlobal+G.MsSig clear Mouse signal pending flag
02BE 3540             (vtio_beta5yakback):00543         L02A9    puls  u              Get CC mem ptr back
02C0 EC0C             (vtio_beta5yakback):00544         L02AB    ldd   Pt.TTSA,x      Get time this state for both buttons
02C2 81FF             (vtio_beta5yakback):00545                  cmpa  #$FF           Button A already at 255?
02C4 2701             (vtio_beta5yakback):00546                  beq   L02B2          Yes, don't change it
02C6 4C               (vtio_beta5yakback):00547                  inca                 No, bump time ctr up
02C7 C1FF             (vtio_beta5yakback):00548         L02B2    cmpb  #$FF           Button B time this state already at 255?
02C9 2701             (vtio_beta5yakback):00549                  beq   L02B7          Yes, don't change it
02CB 5C               (vtio_beta5yakback):00550                  incb                 No, bump time ctr up
02CC ED0C             (vtio_beta5yakback):00551         L02B7    std   Pt.TTSA,x      Save both buttons updated time this state
02CE EC06             (vtio_beta5yakback):00552                  ldd   Pt.TSSt,x      get current time since start counter
                      (vtio_beta5yakback):00553                IFNE  H6309
                      (vtio_beta5yakback):00554                  incd                 Bump it up
                      (vtio_beta5yakback):00555                ELSE
02D0 C30001           (vtio_beta5yakback):00556                  addd   #1            Bump it up
                      (vtio_beta5yakback):00557                ENDC
02D3 2702             (vtio_beta5yakback):00558                  beq   L02C6          If it would have wrapped, leave at 65535
02D5 ED06             (vtio_beta5yakback):00559         L02C4    std   Pt.TSSt,x      save updated state counter
02D7 3265             (vtio_beta5yakback):00560         L02C6    leas  5,s            purge locals
02D9 3594             (vtio_beta5yakback):00561         L02C8    puls  pc,x,b         restore & return
                      (vtio_beta5yakback):00562         
                      (vtio_beta5yakback):00563         * NOTE: stack offsets +2 here from my note above due to RTS address
                      (vtio_beta5yakback):00564         * Exit: A=fire button 1 changed state (if <>0)
                      (vtio_beta5yakback):00565         *       B=fire button 2 changed state (if <>0)
02DB EC08             (vtio_beta5yakback):00566         L02CA    ldd   Pt.CBSA,x      get previous button states
                      (vtio_beta5yakback):00567                IFNE  H6309
                      (vtio_beta5yakback):00568                  eord  3,s            Set bits for button state(s) that changed since last time
                      (vtio_beta5yakback):00569                ELSE
02DD A863             (vtio_beta5yakback):00570                  eora  3,s            toggle both fire button bits
02DF E864             (vtio_beta5yakback):00571                  eorb  4,s
                      (vtio_beta5yakback):00572                ENDC
02E1 ED65             (vtio_beta5yakback):00573                  std   5,s            Save them back & return
02E3 39               (vtio_beta5yakback):00574                  rts        return
                      (vtio_beta5yakback):00575         
                      (vtio_beta5yakback):00576         * Update mouse button clock counts & timeouts (happens if either button state has changed)
                      (vtio_beta5yakback):00577         * Stack is +2 from my note above, due to RTS address being 0-1,s
02E4 EC0C             (vtio_beta5yakback):00578         L02D3    ldd   Pt.TTSA,x      get time of this state for both buttons
02E6 6D65             (vtio_beta5yakback):00579                  tst   5,s            Has button A state changed?
02E8 270E             (vtio_beta5yakback):00580                  beq   L02E9          No, check button B
02EA A70E             (vtio_beta5yakback):00581                  sta   Pt.TLSA,x      Copy time of this state for button A to time last state
02EC A663             (vtio_beta5yakback):00582                  lda   3,s            Is button A pressed right now?
02EE 2607             (vtio_beta5yakback):00583                  bne   L02E8          Yes, set time this state to 0
02F0 A60A             (vtio_beta5yakback):00584                  lda   Pt.CCtA,x      No, increase counter for button A (leave @ 255 if it goes over)
02F2 4C               (vtio_beta5yakback):00585                  inca
02F3 2703             (vtio_beta5yakback):00586                  beq   L02E9
02F5 A70A             (vtio_beta5yakback):00587                  sta   Pt.CCtA,x      Save new button A click ctr
02F7 4F               (vtio_beta5yakback):00588         L02E8    clra                 Set button A time this state to 0
02F8 6D66             (vtio_beta5yakback):00589         L02E9    tst   6,s            Has button B state changed?
02FA 270E             (vtio_beta5yakback):00590                  beq   L02FD          No, update time this state for both buttons
02FC E70F             (vtio_beta5yakback):00591                  stb   Pt.TLSB,x      Copy time of this state for button B to time last state
02FE E664             (vtio_beta5yakback):00592                  ldb   4,s            Is button B pressed right now?
0300 2607             (vtio_beta5yakback):00593                  bne   L02FC          Yes, set time this state to 0
0302 E60B             (vtio_beta5yakback):00594                  ldb   Pt.CCtB,x      No, increase counter for button B (leave @ 255 if it goes over)
0304 5C               (vtio_beta5yakback):00595                  incb
0305 2703             (vtio_beta5yakback):00596                  beq   L02FD
0307 E70B             (vtio_beta5yakback):00597                  stb   Pt.CCtB,x      Save new button B click ctr
0309 5F               (vtio_beta5yakback):00598         L02FC    clrb                 Set button B time this state to 0
030A ED0C             (vtio_beta5yakback):00599         L02FD    std   Pt.TTSA,x      Save time this state for both buttons
030C EC63             (vtio_beta5yakback):00600                  ldd   3,s            Get current fire button states
030E ED08             (vtio_beta5yakback):00601                  std   Pt.CBSA,x      Save as "current" fire button state
0310 EC65             (vtio_beta5yakback):00602                  ldd   5,s            Get button A & B change flags & return
0312 39               (vtio_beta5yakback):00603         NullIRQ  rts
                      (vtio_beta5yakback):00604         
                      (vtio_beta5yakback):00605         
                      (vtio_beta5yakback):00606         *
                      (vtio_beta5yakback):00607         * VTIO IRQ routine - Entered from Clock every 1/60th of a second
                      (vtio_beta5yakback):00608         *
                      (vtio_beta5yakback):00609         * The interrupt service routine is responsible for:
                      (vtio_beta5yakback):00610         *   - Decrementing the tone counter
                      (vtio_beta5yakback):00611         *   - Select the new active window if needed (LCB NOTE: This should do palette updates as well, with
                      (vtio_beta5yakback):00612         * HSYNC timing on 6809, to prevent sparklies. Hopefully for both GRFDRV and CoVDG.
                      (vtio_beta5yakback):00613         *   - Updating graphics cursors if needed
                      (vtio_beta5yakback):00614         *   - Checking for mouse update
                      (vtio_beta5yakback):00615         * 6809/6309 - Need to add support for Animate Palette system call as well - LCB
0313 DEA5             (vtio_beta5yakback):00616         ISR      ldu   <D.CCMem       get ptr to CC mem
0315 10AEC820         (vtio_beta5yakback):00617                  ldy   <G.CurDev,u    get current device's static mem ptr
0319 10270155         (vtio_beta5yakback):00618                  lbeq  CheckAutoMouse branch if none (meaning no window is currently created)
031D 6DC81B           (vtio_beta5yakback):00619                  tst   <G.TnCnt,u     get tone counter
0320 2703             (vtio_beta5yakback):00620                  beq   CheckScrChange branch if zero
0322 6AC81B           (vtio_beta5yakback):00621                  dec   <G.TnCnt,u     else decrement
                      (vtio_beta5yakback):00622         * Check for any change on screen
                      (vtio_beta5yakback):00623         * U=Unused now (sitting as NullIRQ ptr) - MAY WANT TO CHANGE TO CUR DEV PTR
                      (vtio_beta5yakback):00624         * Y=Current Device mem ptr
0325                  (vtio_beta5yakback):00625         CheckScrChange
0325 308CEA           (vtio_beta5yakback):00626                  leax  <NullIRQ,pcr set AltIRQ to do nothing routine so other IRQs
0328 9FB2             (vtio_beta5yakback):00627                  stx   <D.AltIRQ  can fall through to IOMan polling routine
032A 1CAF             (vtio_beta5yakback):00628                  andcc  #^(IntMasks)  re-enable interrupts
032C E6A823           (vtio_beta5yakback):00629                  ldb   <V.ScrChg,y  check screen update request flag (cur screen)
032F 2711             (vtio_beta5yakback):00630                  beq   L0337    no update needed, skip ahead
0331 A626             (vtio_beta5yakback):00631                  lda   V.TYPE,y   device a window?
0333 2A06             (vtio_beta5yakback):00632                  bpl   SelNewWindow no, must be CoVDG, so go on
0335 A642             (vtio_beta5yakback):00633                  lda   G.GfBusy,u 0 = GrfDrv free, 1 = GrfDrv busy
0337 AA4E             (vtio_beta5yakback):00634                  ora   G.WIBusy,u 0 = CoWin free, 1 = CoWin busy
0339 261E             (vtio_beta5yakback):00635                  bne   L034F    one of the two is busy, can't update, skip
033B                  (vtio_beta5yakback):00636         SelNewWindow
033B 4F               (vtio_beta5yakback):00637                  clra     special function: select new active window
033C 1702DC           (vtio_beta5yakback):00638                  lbsr  L05DA    go execute co-module
033F 6FA823           (vtio_beta5yakback):00639                  clr   <V.ScrChg,y  clear screen change flag in device mem
                      (vtio_beta5yakback):00640         * CHECK IF GFX/TEXT CURSORS NEED TO BE UPDATED
                      (vtio_beta5yakback):00641         * G.GfBusy = 1 Grfdrv is busy processing something else
                      (vtio_beta5yakback):00642         * G.WIBusy = 1 CoWin is busy processing something else
                      (vtio_beta5yakback):00643         * g0000 = # of clock ticks/cursor update constant (2) for 3 ticks: 2,1,0
                      (vtio_beta5yakback):00644         * G.CntTik = current clock tick for cursor update
0342 6D41             (vtio_beta5yakback):00645         L0337    tst   G.CntTik,u get current clock tick count for cursor updates
0344 2713             (vtio_beta5yakback):00646                  beq   L034F    if 0, no update required
0346 6A41             (vtio_beta5yakback):00647                  dec   G.CntTik,u decrement the tick count
0348 260F             (vtio_beta5yakback):00648                  bne   L034F    if still not 0, don't do update
034A A642             (vtio_beta5yakback):00649                  lda   G.GfBusy,u get GrfDrv busy flag
034C AA4E             (vtio_beta5yakback):00650                  ora   G.WIBusy,u merge with CoWin busy flag
034E 2704             (vtio_beta5yakback):00651                  beq   L034A    if both not busy, go update cursors
0350 6C41             (vtio_beta5yakback):00652                  inc   G.CntTik,u otherwise bump tick count up again
0352 2005             (vtio_beta5yakback):00653                  bra   L034F    and don't update
                      (vtio_beta5yakback):00654         
0354 8602             (vtio_beta5yakback):00655         L034A    lda   #$02   update cursors sub-function code
0356 1702C2           (vtio_beta5yakback):00656                  lbsr  L05DA    go update cursors through co-module
                      (vtio_beta5yakback):00657         * Check for mouse update
     0359             (vtio_beta5yakback):00658         L034F    equ   *
                      (vtio_beta5yakback):00659         * Major error here. Used regU which points to D.CCMem not G.CurDev. RG
                      (vtio_beta5yakback):00660              IFNE  GLOBALKEYMOUSE
                      (vtio_beta5yakback):00661                  tst   <G.KyMse,u keyboard mouse?
                      (vtio_beta5yakback):00662              ELSE
                      (vtio_beta5yakback):00663                IFNE  H6309
                      (vtio_beta5yakback):00664                  tim   #KeyMse,<V.ULCase,y   keyboard mouse?
                      (vtio_beta5yakback):00665                ELSE
0359 A6A821           (vtio_beta5yakback):00666                  lda   <V.ULCase,y     keyboard mouse?
035C 8501             (vtio_beta5yakback):00667                  bita  #KeyMse
                      (vtio_beta5yakback):00668                ENDC
                      (vtio_beta5yakback):00669              ENDC
035E 2615             (vtio_beta5yakback):00670                  bne   L0369      branch if so
0360 A6C83B           (vtio_beta5yakback):00671                  lda   <G.MSmpRt,u  get # ticks until next mouse read
0363 2710             (vtio_beta5yakback):00672                  beq   L0369      0 means shut off, don't bother
0365 4A               (vtio_beta5yakback):00673                  deca             decrement # ticks
0366 260A             (vtio_beta5yakback):00674                  bne   L0366    still not yet, save tick counter & skip mouse
0368 3470             (vtio_beta5yakback):00675                  pshs  u,y,x    save dev mem ptr and others
036A 17040C           (vtio_beta5yakback):00676                  lbsr  L0739    go update mouse packet
036D 3570             (vtio_beta5yakback):00677                  puls  u,y,x    restore regs
036F A6C860           (vtio_beta5yakback):00678                  lda   <G.MSmpRV,u  get # ticks/mouse read reset value
0372 A7C83B           (vtio_beta5yakback):00679         L0366    sta   <G.MSmpRt,u  save updated tick count
                      (vtio_beta5yakback):00680         
                      (vtio_beta5yakback):00681         * Check keyboard
     0375             (vtio_beta5yakback):00682         L0369    equ   *
                      (vtio_beta5yakback):00683                IFNE  H6309
                      (vtio_beta5yakback):00684                  clrd     initialize keysense & same key flag
                      (vtio_beta5yakback):00685                ELSE
0375 4F               (vtio_beta5yakback):00686                  clra
0376 5F               (vtio_beta5yakback):00687                  clrb
                      (vtio_beta5yakback):00688                ENDC
0377 EDC834           (vtio_beta5yakback):00689                  std   <G.KySns,u initialize keysense & same key flag
                      (vtio_beta5yakback):00690         * Major error here. Was regU; see above. RG
                      (vtio_beta5yakback):00691              IFNE  GLOBALKEYMOUSE
                      (vtio_beta5yakback):00692                  tst   <G.KyMse,u
                      (vtio_beta5yakback):00693              ELSE
                      (vtio_beta5yakback):00694                IFNE  H6309
                      (vtio_beta5yakback):00695                  tim   #KeyMse,>V.ULCase,y
                      (vtio_beta5yakback):00696                ELSE
037A 3402             (vtio_beta5yakback):00697                  pshs  a
037C A6A90021         (vtio_beta5yakback):00698                  lda   >V.ULCase,y      is the keyboard mouse enabled?
0380 8501             (vtio_beta5yakback):00699                  bita  #KeyMse
0382 3502             (vtio_beta5yakback):00700                  puls  a
                      (vtio_beta5yakback):00701                ENDC
                      (vtio_beta5yakback):00702              ENDC
0384 270E             (vtio_beta5yakback):00703                  beq   L0381      no, try joystick
0386 BE10E0           (vtio_beta5yakback):00704                  ldx   >WGlobal+G.KeyEnt  else get ptr to keydrv
0389 33C900E2         (vtio_beta5yakback):00705                  leau  >G.KeyMem,u  and ptr to its statics
038D AD06             (vtio_beta5yakback):00706                  jsr   K$FnKey,x  call into it
038F DEA5             (vtio_beta5yakback):00707                  ldu   <D.CCMem   get ptr to CC mem
0391 A7C865           (vtio_beta5yakback):00708                  sta   <G.KyButt,u  save keyboard/button state
0394 BE10EA           (vtio_beta5yakback):00709         L0381    ldx   >WGlobal+G.JoyEnt  get ptr to joydrv
                      (vtio_beta5yakback):00710         * 6809/6309 - since other references know that G.JoyMem is G.JoyEnt+2, we could do leau 2,x
                      (vtio_beta5yakback):00711         * (smaller/faster)
0397 33C900EC         (vtio_beta5yakback):00712                  leau  >G.JoyMem,u    and ptr to its statics
039B AD06             (vtio_beta5yakback):00713                  jsr   J$MsBtn,x      get mouse button info
                      (vtio_beta5yakback):00714         * Here, B now holds the value from the MsBtn routine in JoyDrv. Which is a table lookup.
039D DEA5             (vtio_beta5yakback):00715                  ldu   <D.CCMem       get ptr to CC mem
039F 8682             (vtio_beta5yakback):00716                  lda   #%10000010     A = $82
03A1 C180             (vtio_beta5yakback):00717                  cmpb  #%10000000     If joystick/mouse left of center & right button 1, flag forward CLEAR key
03A3 2705             (vtio_beta5yakback):00718                  beq   L0397
03A5 4C               (vtio_beta5yakback):00719                  inca                 A now = $83
03A6 C1C0             (vtio_beta5yakback):00720                  cmpb  #%11000000     If joystick/mouse right of center & right button 1, flag forward CLEAR key
03A8 2605             (vtio_beta5yakback):00721                  bne   L039C          nope, skip ahead
03AA 6CC864           (vtio_beta5yakback):00722         L0397    inc   <G.Clear,u     Flag that CLEAR key is pressed (go to next window)
03AD 202C             (vtio_beta5yakback):00723                  bra   L03C8
                      (vtio_beta5yakback):00724         
03AF 6D28             (vtio_beta5yakback):00725         L039C    tst   V.PAUS,y       pause screen on?
03B1 2A08             (vtio_beta5yakback):00726                  bpl   L03A8          branch if not
03B3 C503             (vtio_beta5yakback):00727                  bitb  #%00000011     any mouse buttons down?
03B5 2704             (vtio_beta5yakback):00728                  beq   L03A8          branch if not
03B7 860D             (vtio_beta5yakback):00729                  lda   #C$CR          load A with carriage return
                      (vtio_beta5yakback):00730         * 6809/6309 - since we just loaded A with $0D, skip jumping to L03C8 and go straight to
                      (vtio_beta5yakback):00731         *  n@ (slightly faster)
03B9 2020             (vtio_beta5yakback):00732                  bra   L03C8
                      (vtio_beta5yakback):00733         
03BB A6C865           (vtio_beta5yakback):00734         L03A8    lda   <G.KyButt,u    Get keyboard mouse fire buttons (F1/F2)
03BE 17FE7F           (vtio_beta5yakback):00735                  lbsr  L0229
03C1 5D               (vtio_beta5yakback):00736                  tstb
03C2 102600AA         (vtio_beta5yakback):00737                  lbne  L044E
03C6 3470             (vtio_beta5yakback):00738                  pshs  u,y,x
03C8 BE10E0           (vtio_beta5yakback):00739                  ldx   >WGlobal+G.KeyEnt
03CB 33C900E2         (vtio_beta5yakback):00740                  leau  >G.KeyMem,u
03CF AD09             (vtio_beta5yakback):00741                  jsr   K$RdKey,x      call Read Key routine
03D1 3570             (vtio_beta5yakback):00742                  puls  u,y,x
03D3 2A06             (vtio_beta5yakback):00743                  bpl   L03C8          branch if valid char received
03D5 6FC827           (vtio_beta5yakback):00744                  clr   <G.LastCh,u    else clear last character var
                      (vtio_beta5yakback):00745         * 6809/6309 - would a BRA work?
03D8 160095           (vtio_beta5yakback):00746                  lbra  L044E
                      (vtio_beta5yakback):00747                  
                      (vtio_beta5yakback):00748         *** Inserted detection of debugger invocation key sequence here...
03DB 819B             (vtio_beta5yakback):00749         L03C8    cmpa  #$9B           CTRL+ALT+BREAK?
03DD 260A             (vtio_beta5yakback):00750                  bne   n@             no, move on
03DF AD9F1017         (vtio_beta5yakback):00751                  jsr   [>WGlobal+G.BelVec]  Yes, Beep
03E3 103F23           (vtio_beta5yakback):00752                  os9   F$Debug        And call debugger routine
                      (vtio_beta5yakback):00753         * 6809/6309 - would a BRA work?
03E6 160087           (vtio_beta5yakback):00754                  lbra  L044E          go update cursors, clean up & return
03E9                  (vtio_beta5yakback):00755         n@
                      (vtio_beta5yakback):00756         ***
03E9 A1C827           (vtio_beta5yakback):00757                  cmpa  <G.LastCh,u    is current ASCII code same as last one pressed?
03EC 2612             (vtio_beta5yakback):00758                  bne   L03DF          no, no keyboard repeat, skip ahead
03EE E6C829           (vtio_beta5yakback):00759                  ldb   <G.KyRept,u    get repeat delay constant
03F1 277D             (vtio_beta5yakback):00760                  beq   L044E          if keyboard repeat shut off, skip repeat code
03F3 5A               (vtio_beta5yakback):00761                  decb                 repeat delay up?
03F4 2705             (vtio_beta5yakback):00762                  beq   L03DA          branch if so and reset
03F6 E7C829           (vtio_beta5yakback):00763         L03D5    stb   <G.KyRept,u    update delay
03F9 2075             (vtio_beta5yakback):00764                  bra   L044E          go update cursors, clean up & return
                      (vtio_beta5yakback):00765         
03FB E6C862           (vtio_beta5yakback):00766         L03DA    ldb   <G.KySpd,u     get reset value for repeat delay
03FE 200E             (vtio_beta5yakback):00767                  bra   L03ED          go update it
                      (vtio_beta5yakback):00768         
0400 A7C827           (vtio_beta5yakback):00769         L03DF    sta   <G.LastCh,u    store last keyboard character
0403 E6C861           (vtio_beta5yakback):00770                  ldb   <G.KyDly,u     get keyboard delay speed
0406 6DC835           (vtio_beta5yakback):00771                  tst   <G.KySame,u    same key as last time?
0409 26EB             (vtio_beta5yakback):00772                  bne   L03D5          no, go reset repeat delay
040B E6C861           (vtio_beta5yakback):00773                  ldb   <G.KyDly,u     get time remaining
040E E7C829           (vtio_beta5yakback):00774         L03ED    stb   <G.KyRept,u    save updated repeat delay
0411 17FD74           (vtio_beta5yakback):00775                  lbsr  L017E
0414 275A             (vtio_beta5yakback):00776                  beq   L044E
0416 C601             (vtio_beta5yakback):00777                  ldb   #$01           This may be wrong because regB was created in sub RG
0418 E7C900BF         (vtio_beta5yakback):00778                  stb   >g00BF,u       menu keypress flag
041C EEC820           (vtio_beta5yakback):00779                  ldu   <G.CurDev,u    get ptr to statics in U
041F E6C833           (vtio_beta5yakback):00780                  ldb   <V.EndPtr,u
0422 30C90080         (vtio_beta5yakback):00781                  leax  >ReadBuf,u     point to keyboard buffer
0426 3A               (vtio_beta5yakback):00782                  abx                  move to proper offset
0427 5C               (vtio_beta5yakback):00783                  incb                 inc keyboard buffer ptr
0428 2A01             (vtio_beta5yakback):00784                  bpl    bumpdon2  hasn't wrapped, skip ahead
042A 5F               (vtio_beta5yakback):00785                  clrb     reset pointer
042B E1C834           (vtio_beta5yakback):00786         bumpdon2 cmpb  <V.InpPtr,u  same as start?
042E 2703             (vtio_beta5yakback):00787                  beq   L0411    yep, go on
0430 E7C833           (vtio_beta5yakback):00788                  stb   <V.EndPtr,u  save updated pointer
0433 A784             (vtio_beta5yakback):00789         L0411    sta   ,x   save key in buffer
0435 271C             (vtio_beta5yakback):00790                  beq   L0431    go on if it was 0
                      (vtio_beta5yakback):00791         * Check for special characters
0437 A14D             (vtio_beta5yakback):00792                  cmpa  V.PCHR,u   pause character?
0439 2608             (vtio_beta5yakback):00793                  bne   L0421    no, keep checking
043B AE49             (vtio_beta5yakback):00794                  ldx   V.DEV2,u   is there an output path?
043D 2726             (vtio_beta5yakback):00795                  beq   L0443    no, wake up the process
043F A708             (vtio_beta5yakback):00796                  sta   V.PAUS,x   set immediate pause request on device
0441 2022             (vtio_beta5yakback):00797                  bra   L0443    wake up the process
                      (vtio_beta5yakback):00798         
0443 C603             (vtio_beta5yakback):00799         L0421    ldb   #S$Intrpt  get signal code for key interrupt
0445 A14B             (vtio_beta5yakback):00800                  cmpa  V.INTR,u   is key an interrupt?
0447 2706             (vtio_beta5yakback):00801                  beq   L042D    branch if so (go send signal)
0449 C602             (vtio_beta5yakback):00802                  ldb   #S$Abort   get signal code for key abort
044B A14C             (vtio_beta5yakback):00803                  cmpa  V.QUIT,u   is it a key abort?
044D 2604             (vtio_beta5yakback):00804                  bne   L0431    no, check data ready signal
044F A643             (vtio_beta5yakback):00805         L042D    lda   V.LPRC,u   get last process ID
0451 2016             (vtio_beta5yakback):00806                  bra   L0447    go send the signal
                      (vtio_beta5yakback):00807         
0453 A6C824           (vtio_beta5yakback):00808         L0431    lda   <V.SSigID,u  send signal on data ready?
0456 270D             (vtio_beta5yakback):00809                  beq   L0443    no, just go wake up process
0458 E6C825           (vtio_beta5yakback):00810                  ldb   <V.SSigSg,u  else get signal code
045B 103F08           (vtio_beta5yakback):00811                  os9   F$Send
045E 2510             (vtio_beta5yakback):00812                  bcs   L044E
0460 6FC824           (vtio_beta5yakback):00813                  clr   <V.SSigID,u  clear signal ID
0463 200B             (vtio_beta5yakback):00814                  bra   L044E    return
                      (vtio_beta5yakback):00815         
0465 C601             (vtio_beta5yakback):00816         L0443    ldb   #S$Wake    get signal code for wakeup
0467 A645             (vtio_beta5yakback):00817                  lda   V.WAKE,u   get process ID to wake up
0469 2705             (vtio_beta5yakback):00818         L0447    beq   L044E    no process to wake, return
046B 6F45             (vtio_beta5yakback):00819                  clr   V.WAKE,u   clear it
046D 103F08           (vtio_beta5yakback):00820                  os9   F$Send   send the signal
0470 DEA5             (vtio_beta5yakback):00821         L044E    ldu   <D.CCMem   get ptr to CC mem
0472 A6C866           (vtio_beta5yakback):00822         CheckAutoMouse  lda   <G.AutoMs,u    Are we auto-following the mouse with the mouse cursor?
0475 2716             (vtio_beta5yakback):00823                  beq   L046B          No, skip updating mouse cursor
0477 A6C867           (vtio_beta5yakback):00824                  lda   <G.MseMv,u     Yes, get mouse moved flag
047A AAC844           (vtio_beta5yakback):00825                  ora   <G.Mouse+Pt.CBSA,u Merge with current state of Button A
047D 270E             (vtio_beta5yakback):00826                  beq   L046B          If neither is set, skip updating mouse cursor, etc.
047F A642             (vtio_beta5yakback):00827                  lda   G.GfBusy,u     Check if GrfDrv is busy
0481 AA4E             (vtio_beta5yakback):00828                  ora   G.WIBusy,u     and CoWin too
0483 2608             (vtio_beta5yakback):00829                  bne   L046B          If either is busy, skip updating mouse cursor, etc.
0485 8603             (vtio_beta5yakback):00830                  lda   #$03
0487 170191           (vtio_beta5yakback):00831                  lbsr  L05DA
048A 6FC867           (vtio_beta5yakback):00832                  clr   <G.MseMv,u clear mouse move flag
048D 1A50             (vtio_beta5yakback):00833         L046B    orcc  #IntMasks  mask interrupts
048F 308DFE80         (vtio_beta5yakback):00834                  leax  >ISR,pcr   get IRQ vector
0493 9FB2             (vtio_beta5yakback):00835                  stx   <D.AltIRQ  and store in AltIRQ
0495 39               (vtio_beta5yakback):00836                  rts        return
                      (vtio_beta5yakback):00837         
                      (vtio_beta5yakback):00838         
                      (vtio_beta5yakback):00839                  org   4
0004.                 (vtio_beta5yakback):00840         f.nbyte  rmb   1  # of bytes to next entry in table (signed #)
0005.                 (vtio_beta5yakback):00841         f.tblend rmb   2  ptr to end of device table + 1
0007.                 (vtio_beta5yakback):00842         f.ptrstr rmb   2  start of search ptr (if backwards, -1 entry)
0009.                 (vtio_beta5yakback):00843         f.ptrend rmb   2  end of search ptr (if backwards, -1 entry)
                      (vtio_beta5yakback):00844         *f.ptrcur rmb   2 ptr to current device's device table entry
000B.                 (vtio_beta5yakback):00845         f.ptrdrv rmb   2  ptr to current device's driver
000D.                 (vtio_beta5yakback):00846         f.ptrchk rmb   2  ptr to the device table entry we are currently checking
000F.                 (vtio_beta5yakback):00847         f.numdve rmb   1  number of device table entries in device table
     0010             (vtio_beta5yakback):00848         f.end    equ   .
                      (vtio_beta5yakback):00849         
                      (vtio_beta5yakback):00850         * Prepare for Window search in Device Table
                      (vtio_beta5yakback):00851         * Point to end of device table
0496                  (vtio_beta5yakback):00852         WinSearchInit
0496 E766             (vtio_beta5yakback):00853                  stb   f.nbyte+2,s  save # bytes to next (neg or pos)
0498 9E24             (vtio_beta5yakback):00854                  ldx   <D.Init    get pointer to init module
049A A60D             (vtio_beta5yakback):00855                  lda   DevCnt,x   get max # of devices allowed
049C A7E811           (vtio_beta5yakback):00856                  sta   f.numdve+2,s
049F C60D             (vtio_beta5yakback):00857                  ldb   #DEVSIZ    get size of each device table entry
04A1 3D               (vtio_beta5yakback):00858                  mul        calculate total size of device table
04A2 109E80           (vtio_beta5yakback):00859                  ldy   <D.DevTbl  get device table ptr
04A5 30AB             (vtio_beta5yakback):00860                  leax  d,y    point X to end of devtable + 1
04A7 AF67             (vtio_beta5yakback):00861                  stx   f.tblend+2,s save the ptr & return
04A9 39               (vtio_beta5yakback):00862                  rts
                      (vtio_beta5yakback):00863         
                      (vtio_beta5yakback):00864         * CLEAR processor
04AA 3476             (vtio_beta5yakback):00865         CLEAR    pshs  u,y,x,d    preserve registers
04AC 32E8F0           (vtio_beta5yakback):00866                  leas  <-f.end,s  make a buffer on stack
04AF C60D             (vtio_beta5yakback):00867                  ldb   #DEVSIZ    get # of bytes to move to next entry (forward)
04B1 8DE3             (vtio_beta5yakback):00868                  bsr   WinSearchInit  get pointer to devtable
04B3 AF69             (vtio_beta5yakback):00869                  stx   f.ptrend,s save end of devtable
04B5 10AF67           (vtio_beta5yakback):00870                  sty   f.ptrstr,s   save beginning of devtable
04B8 2012             (vtio_beta5yakback):00871                  bra   FindWin
                      (vtio_beta5yakback):00872         
                      (vtio_beta5yakback):00873         * Shift-CLEAR processor
04BA 3476             (vtio_beta5yakback):00874         SHFTCLR  pshs  u,y,x,d    preserve registers
04BC 32E8F0           (vtio_beta5yakback):00875                  leas  <-f.end,s  make a buffer on the stack
04BF C6F3             (vtio_beta5yakback):00876                  ldb   #-DEVSIZ   # of bytes to move next entry (backwards)
04C1 8DD3             (vtio_beta5yakback):00877                  bsr   WinSearchInit  make ptrs to devtable
                      (vtio_beta5yakback):00878         * Here, Y points to first entry of device table
                      (vtio_beta5yakback):00879         * and X points to last entry of device table + 1
04C3 3133             (vtio_beta5yakback):00880                  leay  -DEVSIZ,y  bump Y back by 1 entry (for start of loop)
04C5 10AF69           (vtio_beta5yakback):00881                  sty   f.ptrend,s save it
04C8 3013             (vtio_beta5yakback):00882                  leax  -DEVSIZ,x  bump X back for start of loop
04CA AF67             (vtio_beta5yakback):00883                  stx   f.ptrstr,s save it
                      (vtio_beta5yakback):00884         * FindWin - Find the next (or previous) window in the device table
                      (vtio_beta5yakback):00885         *
                      (vtio_beta5yakback):00886         * The search takes place just before or after the current window's
                      (vtio_beta5yakback):00887         * device table entry.
                      (vtio_beta5yakback):00888         *
                      (vtio_beta5yakback):00889         * NOTE: SS.OPEN for current window has changed V.PORT to be the ptr to the
                      (vtio_beta5yakback):00890         *   current window's entry in the device table
04CC 9EA5             (vtio_beta5yakback):00891         FindWin  ldx   <D.CCMem   get ptr to CC mem
04CE EE8820           (vtio_beta5yakback):00892                  ldu   <G.CurDev,x  get active device's static mem ptr
04D1 10270094         (vtio_beta5yakback):00893                  lbeq  L0546    if none (no screens), exit without error
04D5 AE41             (vtio_beta5yakback):00894                  ldx   V.PORT,u   get device table ptr for current device
04D7 AF6D             (vtio_beta5yakback):00895                  stx   f.ptrchk,s save as default we are checking
04D9 EC84             (vtio_beta5yakback):00896                  ldd   V$DRIV,x   get ptr to current device driver's module
04DB ED6B             (vtio_beta5yakback):00897                  std   f.ptrdrv,s save it on stack
                      (vtio_beta5yakback):00898         * Main search loop
04DD AE6D             (vtio_beta5yakback):00899         L04BA    ldx   f.ptrchk,s get ptr to device tbl entry we are checking
04DF E664             (vtio_beta5yakback):00900         L04BC    ldb   f.nbyte,s  get # of bytes to next entry (signed)
04E1 6A6F             (vtio_beta5yakback):00901                  dec   f.numdve,s + have we exhausted all entries?
04E3 2B7F             (vtio_beta5yakback):00902                  bmi   L0541    + yes, end
04E5 3085             (vtio_beta5yakback):00903                  leax  b,x    point to next entry (signed add)
04E7 AC69             (vtio_beta5yakback):00904                  cmpx  f.ptrend,s did we hit end of search table?
04E9 2602             (vtio_beta5yakback):00905                  bne   L04C6    no, go check if it is a screen device
04EB AE67             (vtio_beta5yakback):00906                  ldx   f.ptrstr,s otherwise wrap around to start of search ptr
                      (vtio_beta5yakback):00907         * Check device table entry (any entry we can switch to has to have VTIO as
                      (vtio_beta5yakback):00908         *  the driver)
04ED AF6D             (vtio_beta5yakback):00909         L04C6    stx   f.ptrchk,s save new device table ptr we are checking
04EF EC84             (vtio_beta5yakback):00910                  ldd   V$DRIV,x   get ptr to driver
04F1 10A36B           (vtio_beta5yakback):00911                  cmpd  f.ptrdrv,s same driver as us? (VTIO)
04F4 26E9             (vtio_beta5yakback):00912                  bne   L04BC    no, try next one
04F6 EE02             (vtio_beta5yakback):00913                  ldu   V$STAT,x   get ptr to static storage for tbl entry
04F8 27E5             (vtio_beta5yakback):00914                  beq   L04BC    there is none, try next one
                      (vtio_beta5yakback):00915         * Found an initialized device controlled by VTIO that is not current device
04FA A6C81E           (vtio_beta5yakback):00916                  lda   <V.InfVld,u  is the extra window data in static mem valid?
04FD 27DE             (vtio_beta5yakback):00917                  beq   L04BA    no, not good enough, try next one
04FF AEC816           (vtio_beta5yakback):00918                  ldx   <V.PDLHd,u get ptr to list of open paths on device
0502 2755             (vtio_beta5yakback):00919                  beq   L0536    no open paths, so switch to that device
0504 A643             (vtio_beta5yakback):00920                  lda   V.LPRC,u   get last active process ID # that used device
0506 2751             (vtio_beta5yakback):00921                  beq   L0536
                      (vtio_beta5yakback):00922         * Path's open to device & there is a last process # for that path
0508 109E48           (vtio_beta5yakback):00923                  ldy   <D.PrcDBT  get process descriptor table ptr
050B A6A6             (vtio_beta5yakback):00924                  lda   a,y    get MSB of ptr to process descriptor last on it
050D 274A             (vtio_beta5yakback):00925                  beq   L0536    process now gone, so switch to device
050F 5F               (vtio_beta5yakback):00926                  clrb       move process desc ptr to Y
0510 1F02             (vtio_beta5yakback):00927                  tfr   d,y
0512 A6A900AC         (vtio_beta5yakback):00928                  lda   >P$SelP,y  get the path # that outputs to the window
0516 31A830           (vtio_beta5yakback):00929                  leay  <P$Path,y  move to the path table local to the process
0519 A7E4             (vtio_beta5yakback):00930                  sta   ,s
051B 3410             (vtio_beta5yakback):00931                  pshs  x
051D C610             (vtio_beta5yakback):00932         L04FA    ldb   #NumPaths  for every possible path...
051F A684             (vtio_beta5yakback):00933                  lda   ,x   get system path into A
0521 5A               (vtio_beta5yakback):00934         L04FE    decb       decrement
0522 A1A5             (vtio_beta5yakback):00935                  cmpa  b,y    same?
0524 270C             (vtio_beta5yakback):00936                  beq   L050F    branch if so
0526 5D               (vtio_beta5yakback):00937                  tstb       are we at start of paths?
0527 26F8             (vtio_beta5yakback):00938                  bne   L04FE    branch if not
0529 AE883D           (vtio_beta5yakback):00939                  ldx   <PD.PLP,x  get ptr to next path dsc. list (linked list)
052C 26EF             (vtio_beta5yakback):00940                  bne   L04FA    branch if valid
052E 3510             (vtio_beta5yakback):00941                  puls  x    else restore X
0530 2027             (vtio_beta5yakback):00942                  bra   L0536
0532 3510             (vtio_beta5yakback):00943         L050F    puls  x
0534 A6E4             (vtio_beta5yakback):00944                  lda   ,s
0536 A7E4             (vtio_beta5yakback):00945         L0513    sta   ,s
0538 8102             (vtio_beta5yakback):00946                  cmpa  #$02       is selected path one of the 3 std paths?
053A 2206             (vtio_beta5yakback):00947                  bhi   L051F      not one of the std 3 paths, skip ahead
053C C602             (vtio_beta5yakback):00948                  ldb   #$02       standard error path
053E A6A5             (vtio_beta5yakback):00949                  lda   b,y        get system path # for local error path
0540 2003             (vtio_beta5yakback):00950                  bra   L0522
                      (vtio_beta5yakback):00951         
0542 A6A6             (vtio_beta5yakback):00952         L051F    lda   a,y        get system path # for local path
0544 5F               (vtio_beta5yakback):00953                  clrb             standard in
                      (vtio_beta5yakback):00954         * X=Ptr to linked list of open paths on device
                      (vtio_beta5yakback):00955         * A=System path #
                      (vtio_beta5yakback):00956         * B=Local (to process) path #
                      (vtio_beta5yakback):00957         * Check if any paths to device are open, if they are we can switch to it
0545 A184             (vtio_beta5yakback):00958         L0522    cmpa  ,x         path we are checking same as path already open?
0547 2710             (vtio_beta5yakback):00959                  beq   L0536      on device? yes, go switch to it
0549 5A               (vtio_beta5yakback):00960                  decb             bump local path # down
054A 2B04             (vtio_beta5yakback):00961                  bmi   L052D      if no more paths to check, skip ahead
054C A6A5             (vtio_beta5yakback):00962                  lda   b,y        get system path # for new local path to check
054E 20F5             (vtio_beta5yakback):00963                  bra   L0522      check if it is already open on device
                      (vtio_beta5yakback):00964         
0550 A6E4             (vtio_beta5yakback):00965         L052D    lda   ,s         get local path # we started on
0552 AE883D           (vtio_beta5yakback):00966                  ldx   <PD.PLP,x  get ptr to path dsc. list (linked list)
0555 26DF             (vtio_beta5yakback):00967                  bne   L0513      there is no path desc list, try next path
0557 2084             (vtio_beta5yakback):00968                  bra   L04BA      can't switch to it, go to next device tbl entry
                      (vtio_beta5yakback):00969         
0559 9EA5             (vtio_beta5yakback):00970         L0536    ldx   <D.CCMem   get ptr to CC mem
055B EF8820           (vtio_beta5yakback):00971                  stu   <G.CurDev,x  save new active device
055E 6F0A             (vtio_beta5yakback):00972                  clr   g000A,x    flag that we are not on active device anymore
0560 6F8900BF         (vtio_beta5yakback):00973                  clr   >g00BF,x   clear CoWin's key was pressed flag (new window)
                      (vtio_beta5yakback):00974         * If there is only one window, it comes here to allow the text/mouse cursors
                      (vtio_beta5yakback):00975         * to blink so you know you hit CLEAR or SHIFT-CLEAR
0564 6CC823           (vtio_beta5yakback):00976         L0541    inc   <V.ScrChg,u  flag device for a screen change
0567 8D06             (vtio_beta5yakback):00977                  bsr   setmouse   check mouse
0569 32E810           (vtio_beta5yakback):00978         L0546    leas  <f.end,s   purge stack buffer
056C 5F               (vtio_beta5yakback):00979                  clrb             clear carry
056D 35F6             (vtio_beta5yakback):00980                  puls  pc,u,y,x,d restore regs and return
                      (vtio_beta5yakback):00981         
                      (vtio_beta5yakback):00982         * Initialize mouse
                      (vtio_beta5yakback):00983         * Also called when CLEARing to a new window.
056F 3410             (vtio_beta5yakback):00984         setmouse pshs  x    save register used
0571 ECC828           (vtio_beta5yakback):00985                  ldd   <V.MSmpl,u get sample and timeout from win devmem
0574 9EA5             (vtio_beta5yakback):00986                  ldx   <D.CCMem   get ptr to CC mem
0576 A7883B           (vtio_beta5yakback):00987                  sta   <G.MSmpRt,x  set sample tick count in global mem
0579 A78860           (vtio_beta5yakback):00988                  sta   <G.MSmpRV,x  set sample rate in global mem
057C E7883E           (vtio_beta5yakback):00989                  stb   <G.Mouse+Pt.ToTm,x set timeout constant in mouse packet
057F E6C82B           (vtio_beta5yakback):00990                  ldb   <V.MAutoF,u  get auto follow flag from win devmem
0582 E78866           (vtio_beta5yakback):00991                  stb   <G.AutoMs,x  and set auto follow flag in global mem
0585 A646             (vtio_beta5yakback):00992                  lda   V.TYPE,u   get device type
0587 A7880B           (vtio_beta5yakback):00993                  sta   <G.WinType,x set it
                      (vtio_beta5yakback):00994              IFEQ  GLOBALKEYMOUSE
                      (vtio_beta5yakback):00995         * Added: get window's keyboard mouse flag and update global keyboard mouse
                      (vtio_beta5yakback):00996                IFNE  H6309
                      (vtio_beta5yakback):00997                  tim   #KeyMse,<V.ULCase,u   keyboard mouse?
                      (vtio_beta5yakback):00998                ELSE
058A A6C821           (vtio_beta5yakback):00999                  lda   <V.ULCase,u     keyboard mouse?
058D 8501             (vtio_beta5yakback):01000                  bita  #KeyMse
                      (vtio_beta5yakback):01001                ENDC
058F 2602             (vtio_beta5yakback):01002                  bne   setmous2
0591 4F               (vtio_beta5yakback):01003                  clra
0592 8C               (vtio_beta5yakback):01004                  fcb   $8c            CMPX opcode (skip 2 bytes)
0593 86FF             (vtio_beta5yakback):01005         setmous2 lda   #$FF
0595 A78863           (vtio_beta5yakback):01006                  sta   <G.KyMse,x
                      (vtio_beta5yakback):01007              ENDC
0598 4F               (vtio_beta5yakback):01008                  clra
0599 3590             (vtio_beta5yakback):01009                  puls  pc,x   restore and return
                      (vtio_beta5yakback):01010         
                      (vtio_beta5yakback):01011         * LCB - moved table here for short branch to Write and Getstat - used much more often than Term
059B 16FAB3           (vtio_beta5yakback):01012         start    lbra  Init
059E 16FB7B           (vtio_beta5yakback):01013                  lbra  Read
05A1 200A             (vtio_beta5yakback):01014                  bra   Write
05A3 12               (vtio_beta5yakback):01015                  nop
05A4 1600C3           (vtio_beta5yakback):01016                  lbra  GetStat
05A7 160211           (vtio_beta5yakback):01017                  lbra  SetStat
05AA 16FA66           (vtio_beta5yakback):01018                  lbra  Term
                      (vtio_beta5yakback):01019         
                      (vtio_beta5yakback):01020         
                      (vtio_beta5yakback):01021         * Write
                      (vtio_beta5yakback):01022         * Entry:
                      (vtio_beta5yakback):01023         *    A  = character to write
                      (vtio_beta5yakback):01024         *    Y  = address of path descriptor
                      (vtio_beta5yakback):01025         *    U  = address of device memory area
                      (vtio_beta5yakback):01026         *
                      (vtio_beta5yakback):01027         * Exit:
                      (vtio_beta5yakback):01028         *    CC = carry set on error
                      (vtio_beta5yakback):01029         *    B  = error code
05AD E6C82C           (vtio_beta5yakback):01030         Write    ldb   <V.ParmCnt,u   are we in the process of getting parameters?
05B0 1026008D         (vtio_beta5yakback):01031                  lbne  L0600          yes, get next param byte
05B4 A7C81F           (vtio_beta5yakback):01032                  sta   <V.DevPar,u    save off character
05B7 8120             (vtio_beta5yakback):01033                  cmpa  #C$SPAC        space or higher?
05B9 2414             (vtio_beta5yakback):01034                  bhs   CoWrite        yes, normal write
05BB 811E             (vtio_beta5yakback):01035                  cmpa  #$1E           1E or $1F escape code?
05BD 2471             (vtio_beta5yakback):01036                  bhs   L05EF          yes, go process
05BF 811B             (vtio_beta5yakback):01037                  cmpa  #$1B           $1B escape code?
05C1 2771             (vtio_beta5yakback):01038                  beq   L05F3          yes, go handle it
05C3 8105             (vtio_beta5yakback):01039                  cmpa  #$05           $05 escape code? (cursor on/off)
05C5 276D             (vtio_beta5yakback):01040                  beq   L05F3          yep, go handle it
05C7 8107             (vtio_beta5yakback):01041                  cmpa  #C$BELL        Bell?
05C9 2604             (vtio_beta5yakback):01042                  bne   CoWrite        no, control char, process in co-driver
05CB 6E9F1017         (vtio_beta5yakback):01043                  jmp   [>WGlobal+G.BelVec]  Yes, call bell vector routine
                      (vtio_beta5yakback):01044         
05CF C603             (vtio_beta5yakback):01045         CoWrite  ldb   #$03   write entry point in co-module
05D1 A6C81F           (vtio_beta5yakback):01046         CallCo   lda   <V.DevPar,u    get character stored earlier
05D4 9EA5             (vtio_beta5yakback):01047         L0593    ldx   <D.CCMem       get ptr to CC mem
05D6 EF0C             (vtio_beta5yakback):01048                  stu   G.CurDvM,x     save dev mem ptr for current device
                      (vtio_beta5yakback):01049         * Call CoXXX module
                      (vtio_beta5yakback):01050         * Entry: X=CC global Mem ptr
                      (vtio_beta5yakback):01051         *        B=vector table offset (0=Init, 3=Write, 6=GetStat,9=SetStat,$C=Term,$F=window Special processing)
                      (vtio_beta5yakback):01052         *        A=parameter for vector routine (ie sub-function for Special processing, char to write
                      (vtio_beta5yakback):01053         *          for write, etc.
05D8 3402             (vtio_beta5yakback):01054         L0597    pshs  a              Save parameter for vector we are about to call
05DA 308868           (vtio_beta5yakback):01055                  leax  <G.CoTble,x    point to co-module entry vectors
05DD A6C81D           (vtio_beta5yakback):01056                  lda   <V.WinType,u   get window type from device mem
05E0 AE86             (vtio_beta5yakback):01057                  ldx   a,x            get vector to proper co-module (CoGrf/Win, CoVDG, etc)
05E2 3502             (vtio_beta5yakback):01058                  puls  a              Get parameter back
05E4 2746             (vtio_beta5yakback):01059                  beq   L05EB          vector was empty, exit with module not found error
05E6 3085             (vtio_beta5yakback):01060                  leax  b,x            Point to appropriate branch table entry
05E8 8D17             (vtio_beta5yakback):01061                  bsr   L05C0          Flag CoWin busy (if appropriate) and flag we are current device
05EA E6C81D           (vtio_beta5yakback):01062                  ldb   <V.WinType,u   Get device type
05ED 2706             (vtio_beta5yakback):01063                  beq   L05B4          CoGrf or CoWin; will need to set flags so skip ahead
05EF AD84             (vtio_beta5yakback):01064                  jsr   ,x             CoVDG,etc. call function in Co Module
05F1 3401             (vtio_beta5yakback):01065         L05B0    pshs  cc             Save error status 
05F3 2007             (vtio_beta5yakback):01066                  bra   L05BB          Flag we are not on our device & return with error status from comodule
                      (vtio_beta5yakback):01067         
05F5 AD84             (vtio_beta5yakback):01068         L05B4    jsr   ,x             CoGrf/CoWin - call function in Co Module
05F7 3401             (vtio_beta5yakback):01069         L05B6    pshs  cc             Save error status
05F9 7F100E           (vtio_beta5yakback):01070                  clr   >WGlobal+G.WIBusy Flag WindInt no longer busy
05FC 7F100A           (vtio_beta5yakback):01071         L05BB    clr   >WGlobal+G.CrDvFl  Flag we are not our on device
05FF 3581             (vtio_beta5yakback):01072                  puls  pc,cc          Restore error status & return
                      (vtio_beta5yakback):01073         
                      (vtio_beta5yakback):01074         * Flag CoWin busy if appropriate, and flag whether we are current device
                      (vtio_beta5yakback):01075         *  (so CoXXX knows to actually update viewable screen, or just the screen in memory)
0601 3414             (vtio_beta5yakback):01076         L05C0    pshs  x,b            Save regs
0603 9EA5             (vtio_beta5yakback):01077                  ldx   <D.CCMem       Get CC global mem ptr
0605 6F0E             (vtio_beta5yakback):01078                  clr   G.WIBusy,x     Flag CoWin NOT busy as default
0607 E6C81D           (vtio_beta5yakback):01079                  ldb   <V.WinType,u   get window type (0 = CoWin, 2=CoVDG)
060A 2603             (vtio_beta5yakback):01080                  bne   L05CE          CoVDG, leave that CoWin is NOT busy
060C 5C               (vtio_beta5yakback):01081                  incb                 CoWin or CoGrf, flag it as busy
060D E70E             (vtio_beta5yakback):01082                  stb   G.WIBusy,x
060F 6F0A             (vtio_beta5yakback):01083         L05CE    clr   G.CrDvFl,x     Default 'we are not current device'
0611 11A38820         (vtio_beta5yakback):01084                  cmpu  <G.CurDev,x    Is current device static mem ptr the same as ours?
0615 2602             (vtio_beta5yakback):01085                  bne   L05D8          No, leave flag as "we are not current device"
0617 6C0A             (vtio_beta5yakback):01086                  inc   G.CrDvFl,x     Yes, set flag that we ARE current device
0619 3594             (vtio_beta5yakback):01087         L05D8    puls  pc,x,b         Restore regs & return
                      (vtio_beta5yakback):01088         
                      (vtio_beta5yakback):01089         * Call window Special Processing routine in CoGrf/CoWin
                      (vtio_beta5yakback):01090         * U = ptr to CC memory
                      (vtio_beta5yakback):01091         * A=sub-function to call from Window Special Processing branch table in CoGrf/CoWin
061B 3470             (vtio_beta5yakback):01092         L05DA    pshs  u,y,x          Save regs
061D EEC820           (vtio_beta5yakback):01093                  ldu   <G.CurDev,u    get current device mem ptr
0620 C60F             (vtio_beta5yakback):01094         L05DF    ldb   #$0F           Window special processing table offset in CoGrf/CoWin
0622 9EA5             (vtio_beta5yakback):01095                  ldx   <D.CCMem       get ptr to CC memory in X
0624 8DB2             (vtio_beta5yakback):01096                  bsr   L0597
0626 35F0             (vtio_beta5yakback):01097                  puls  pc,u,y,x       restore regs and return
                      (vtio_beta5yakback):01098         
                      (vtio_beta5yakback):01099         * Call special window vector in CoWin, without changing U
                      (vtio_beta5yakback):01100         * Entry: A=sub-function (0=screen has changed,1=update mouse packet,
                      (vtio_beta5yakback):01101         *   2=update text/gfx cursors,3=update auto follow mouse)
0628 3470             (vtio_beta5yakback):01102         L05E7    pshs  u,y,x          save regs
062A 20F4             (vtio_beta5yakback):01103                  bra   L05DF
                      (vtio_beta5yakback):01104         
062C 53               (vtio_beta5yakback):01105         L05EB    comb                 Module not found error
062D C6DD             (vtio_beta5yakback):01106                  ldb   #E$MNF
062F 39               (vtio_beta5yakback):01107                  rts
                      (vtio_beta5yakback):01108         
                      (vtio_beta5yakback):01109         * $1E & $1F codes go here
0630 811E             (vtio_beta5yakback):01110         L05EF    cmpa  #$1E   $1E code?
0632 270B             (vtio_beta5yakback):01111                  beq   Do1E   branch if so
                      (vtio_beta5yakback):01112         * $1F codes fall through to here
                      (vtio_beta5yakback):01113         * Escape code handler : Initial code handled by VTIO, any parameters past
                      (vtio_beta5yakback):01114         * $1B xx are handled by co-module later
                      (vtio_beta5yakback):01115         * NOTE: Notice that is does NOT update <DevPar,u to contain the param byte,
                      (vtio_beta5yakback):01116         *  but leaves the initial <ESC> ($1b) code there. The co-module checks it
                      (vtio_beta5yakback):01117         *  to see it as an ESC, and then checks for the first parameter byte for the
                      (vtio_beta5yakback):01118         *  required action.
0634 308C98           (vtio_beta5yakback):01119         L05F3    leax  <CoWrite,pcr   point to parameter vector entry point
0637 C601             (vtio_beta5yakback):01120                  ldb   #$01           get parameter count (need 1 to determine code)
0639 AFC82D           (vtio_beta5yakback):01121                  stx   <V.ParmVct,u   save vector
063C E7C82C           (vtio_beta5yakback):01122                  stb   <V.ParmCnt,u   save # param bytes needed before exec'ing vect.
063F 5F               (vtio_beta5yakback):01123         Do1E     clrb                 no error & return
0640 39               (vtio_beta5yakback):01124                  rts                  return
                      (vtio_beta5yakback):01125         
                      (vtio_beta5yakback):01126         * Processing parameters
                      (vtio_beta5yakback):01127         * A=parameter byte from SCF
                      (vtio_beta5yakback):01128         * B=# parameter bytes left (not including one in A)
                      (vtio_beta5yakback):01129         * U=device mem ptr
0641 AEC831           (vtio_beta5yakback):01130         L0600    ldx   <V.NxtPrm,u    get ptr of where to put next param byte
0644 A780             (vtio_beta5yakback):01131                  sta   ,x+            put it there
0646 AFC831           (vtio_beta5yakback):01132                  stx   <V.NxtPrm,u    update pointer
0649 5A               (vtio_beta5yakback):01133                  decb                 decrement parameter count
064A E7C82C           (vtio_beta5yakback):01134                  stb   <V.ParmCnt,u   update it
064D 26F0             (vtio_beta5yakback):01135                  bne   Do1E           if still more to get, exit without error
                      (vtio_beta5yakback):01136         * B=0, flag to say we are not current device
                      (vtio_beta5yakback):01137         * We have all parameter bytes we need at this point.
064F 9EA5             (vtio_beta5yakback):01138                  ldx   <D.CCMem       get ptr to CC mem
0651 8DAE             (vtio_beta5yakback):01139                  bsr   L05C0
0653 EF0C             (vtio_beta5yakback):01140                  stu   G.CurDvM,x
0655 AEC82F           (vtio_beta5yakback):01141                  ldx   <V.PrmStrt,u   reset next param ptr to start
0658 AFC831           (vtio_beta5yakback):01142                  stx   <V.NxtPrm,u
065B E6C81D           (vtio_beta5yakback):01143                  ldb   <V.WinType,u   is this device using CoWin?
065E 2705             (vtio_beta5yakback):01144                  beq   L0624          yes, special processing for CoWin
0660 ADD82D           (vtio_beta5yakback):01145                  jsr   [<V.ParmVct,u] go execute parameter handler
0663 208C             (vtio_beta5yakback):01146                  bra   L05B0
                      (vtio_beta5yakback):01147         
0665 ADD82D           (vtio_beta5yakback):01148         L0624    jsr   [<V.ParmVct,u]
0668 208D             (vtio_beta5yakback):01149                  bra   L05B6
                      (vtio_beta5yakback):01150         
                      (vtio_beta5yakback):01151         * GetStat
                      (vtio_beta5yakback):01152         *
                      (vtio_beta5yakback):01153         * Entry:
                      (vtio_beta5yakback):01154         *    A  = function code
                      (vtio_beta5yakback):01155         *    Y  = address of path descriptor
                      (vtio_beta5yakback):01156         *    U  = address of device memory area
                      (vtio_beta5yakback):01157         *
                      (vtio_beta5yakback):01158         * Exit:
                      (vtio_beta5yakback):01159         *    CC = carry set on error
                      (vtio_beta5yakback):01160         *    B  = error code
                      (vtio_beta5yakback):01161         *
066A 8106             (vtio_beta5yakback):01162         GetStat  cmpa  #SS.EOF
066C 2738             (vtio_beta5yakback):01163                  beq   SSEOF
066E AE26             (vtio_beta5yakback):01164                  ldx   PD.RGS,y
0670 8128             (vtio_beta5yakback):01165                  cmpa  #SS.ComSt
0672 271B             (vtio_beta5yakback):01166                  beq   GSComSt
0674 8113             (vtio_beta5yakback):01167                  cmpa  #SS.Joy
0676 274C             (vtio_beta5yakback):01168                  beq   GSJoy
0678 8189             (vtio_beta5yakback):01169                  cmpa  #SS.Mouse
067A 1027009F         (vtio_beta5yakback):01170                  lbeq  GSMouse
067E 8101             (vtio_beta5yakback):01171                  cmpa  #SS.Ready
0680 2713             (vtio_beta5yakback):01172                  beq   GSReady
0682 8127             (vtio_beta5yakback):01173                  cmpa  #SS.KySns
0684 2726             (vtio_beta5yakback):01174                  beq   GSKySns
0686 8192             (vtio_beta5yakback):01175                  cmpa  #SS.Montr
0688 2733             (vtio_beta5yakback):01176                  beq   GSMontr
068A C606             (vtio_beta5yakback):01177                  ldb   #$06           carry over to co-module
068C 16FF45           (vtio_beta5yakback):01178                  lbra  L0593
                      (vtio_beta5yakback):01179         
                      (vtio_beta5yakback):01180         * SS.ComSt - get baud/parity info
068F A646             (vtio_beta5yakback):01181         GSComSt  lda   V.TYPE,u       get device type
0691 5F               (vtio_beta5yakback):01182                  clrb                 clear parity, etc.
0692 ED06             (vtio_beta5yakback):01183                  std   R$Y,x          save in caller's register Y & return
0694 39               (vtio_beta5yakback):01184                  rts
                      (vtio_beta5yakback):01185         
0695 E6C833           (vtio_beta5yakback):01186         GSReady  ldb   <V.EndPtr,u    get input buffer end pointer
0698 E1C834           (vtio_beta5yakback):01187                  cmpb  <V.InpPtr,u    anything there?
069B 270B             (vtio_beta5yakback):01188                  beq   NotReady       nope, exit with error
069D 2202             (vtio_beta5yakback):01189                  bhi   L0660          higher?
069F CB80             (vtio_beta5yakback):01190                  addb  #$80           nope, add 128 to count
06A1 E0C834           (vtio_beta5yakback):01191         L0660    subb  <V.InpPtr,u    calculate number of characters there
06A4 E702             (vtio_beta5yakback):01192                  stb   R$B,x          save it in register stack
06A6 5F               (vtio_beta5yakback):01193         SSEOF    clrb                 clear errors & return
06A7 39               (vtio_beta5yakback):01194                  rts
                      (vtio_beta5yakback):01195         
06A8 53               (vtio_beta5yakback):01196         NotReady comb                 Return with Not Ready error
06A9 C6F6             (vtio_beta5yakback):01197                  ldb   #E$NotRdy
06AB 39               (vtio_beta5yakback):01198                  rts
                      (vtio_beta5yakback):01199         
                      (vtio_beta5yakback):01200         * Return special key status
                      (vtio_beta5yakback):01201         *        X = pointer to caller's register stack
06AC 109EA5           (vtio_beta5yakback):01202         GSKySns  ldy   <D.CCMem       get ptr to CC mem
06AF 5F               (vtio_beta5yakback):01203                  clrb                 clear key code
06B0 11A3A820         (vtio_beta5yakback):01204                  cmpu  <G.CurDev,y    are we the active device?
06B4 2603             (vtio_beta5yakback):01205                  bne   L0678          branch if not
06B6 E6A834           (vtio_beta5yakback):01206                  ldb   <G.KySns,y     get key codes
06B9 E701             (vtio_beta5yakback):01207         L0678    stb   R$A,x          save to caller reg
06BB 5F               (vtio_beta5yakback):01208                  clrb                 return w/o error
06BC 39               (vtio_beta5yakback):01209                  rts
                      (vtio_beta5yakback):01210         
                      (vtio_beta5yakback):01211         * GetStat: SS.Montr (get Monitor type)
                      (vtio_beta5yakback):01212         *        X = pointer to caller's register stack
06BD F61009           (vtio_beta5yakback):01213         GSMontr  ldb   >WGlobal+G.MonTyp get monitor type into D
06C0 4F               (vtio_beta5yakback):01214                  clra
06C1 ED04             (vtio_beta5yakback):01215                  std   R$X,x          save in caller's X & return
06C3 39               (vtio_beta5yakback):01216                  rts
                      (vtio_beta5yakback):01217         
                      (vtio_beta5yakback):01218         * GetStat: SS.JOY (get joystick X/Y/button values)
                      (vtio_beta5yakback):01219         *        X = pointer to caller's register stack
06C4 5F               (vtio_beta5yakback):01220         GSJoy    clrb                 default to no errors
06C5 3184             (vtio_beta5yakback):01221                  leay  ,x             transfer caller's register ptr to Y (6809/6309 faster than tfr x,y)
06C7 9EA5             (vtio_beta5yakback):01222                  ldx   <D.CCMem       get ptr to CC mem
06C9 11A38820         (vtio_beta5yakback):01223                  cmpu  <G.CurDev,x    are we the current active device?
06CD 2708             (vtio_beta5yakback):01224                  beq   GetJoy         if so, go read joysticks
06CF 4F               (vtio_beta5yakback):01225                  clra                 else D = 0
06D0 ED24             (vtio_beta5yakback):01226                  std   R$X,y          X pos = 0
06D2 ED26             (vtio_beta5yakback):01227                  std   R$Y,y          Y pos = 0
06D4 A721             (vtio_beta5yakback):01228                  sta   R$A,y          no buttons held down
06D6 39               (vtio_beta5yakback):01229                  rts
                      (vtio_beta5yakback):01230         
                      (vtio_beta5yakback):01231         * Get button status first
06D7 BE10EA           (vtio_beta5yakback):01232         GetJoy   ldx   >WGlobal+G.JoyEnt
06DA 3440             (vtio_beta5yakback):01233                  pshs  u              save driver static
06DC DEA5             (vtio_beta5yakback):01234                  ldu   <D.CCMem       get ptr to CC mem
06DE 33C900EC         (vtio_beta5yakback):01235                  leau  >G.JoyMem,u    point to subroutine module's static mem
06E2 AD0C             (vtio_beta5yakback):01236                  jsr   J$JyBtn,x      call entry point to get button
                      (vtio_beta5yakback):01237         * Joysticks button states returned in B
06E4 3540             (vtio_beta5yakback):01238                  puls  u              restore driver static
06E6 A625             (vtio_beta5yakback):01239                  lda   R$X+1,y        left or right?
06E8 2701             (vtio_beta5yakback):01240                  beq   L06AB          branch if right joystick
06EA 54               (vtio_beta5yakback):01241                  lsrb                 shift over so same range as if right joystick
06EB C405             (vtio_beta5yakback):01242         L06AB    andb  #$05           preserve button bits
06ED 54               (vtio_beta5yakback):01243                  lsrb                 button 1 down? (shifts button 2 to bit 2 too)
06EE 2402             (vtio_beta5yakback):01244                  bcc   L06B2          no, go on
06F0 CA01             (vtio_beta5yakback):01245                  orb   #$01           turn on button 1
06F2 E721             (vtio_beta5yakback):01246         L06B2    stb   R$A,y          save button status to caller
                      (vtio_beta5yakback):01247         * Now get actual joystick values (note: IRQs still off)
06F4 3420             (vtio_beta5yakback):01248                  pshs  y              save ptr to caller's regs
06F6 A625             (vtio_beta5yakback):01249                  lda   R$X+1,y        get switch to indicate left or right joystick
06F8 4C               (vtio_beta5yakback):01250                  inca                 now 1 or 2
06F9 108E0000         (vtio_beta5yakback):01251                  ldy   #$0000         force low res??
06FD 3440             (vtio_beta5yakback):01252                  pshs  u              save driver static mem
06FF DEA5             (vtio_beta5yakback):01253                  ldu   <D.CCMem       get ptr to CC mem
0701 BE10EA           (vtio_beta5yakback):01254                  ldx   >WGlobal+G.JoyEnt get address of joystick sub module
0704 33C900EC         (vtio_beta5yakback):01255                  leau  >G.JoyMem,u    get ptr to sub module's static mem
0708 AD0F             (vtio_beta5yakback):01256                  jsr   J$JyXY,x       call routine in sub module to get joy X/Y
                      (vtio_beta5yakback):01257         * X = joystick X pos, Y = joystick Y pos
070A 3540             (vtio_beta5yakback):01258                  puls  u              restore driver static mem
                      (vtio_beta5yakback):01259         * 6309 - don't pshs y, do ldw #63 / subr y,w and stw R$Y,y instead
070C 3420             (vtio_beta5yakback):01260                  pshs  y              save joystick Y
070E 10AE62           (vtio_beta5yakback):01261                  ldy   2,s            get ptr to caller's regs
0711 AF24             (vtio_beta5yakback):01262                  stx   R$X,y          save joystick X in caller's X
0713 CC003F           (vtio_beta5yakback):01263                  ldd   #63
0716 A3E1             (vtio_beta5yakback):01264                  subd  ,s++
0718 ED26             (vtio_beta5yakback):01265                  std   R$Y,y          save joystick Y in caller's Y
071A 5F               (vtio_beta5yakback):01266                  clrb                 No error & return
071B 35A0             (vtio_beta5yakback):01267                  puls  pc,y
                      (vtio_beta5yakback):01268         
                      (vtio_beta5yakback):01269         * GetStat: SS.Mouse (get mouse info)
                      (vtio_beta5yakback):01270         *        X = pointer to caller's register stack
071D 3470             (vtio_beta5yakback):01271         GSMouse  pshs  u,y,x          Save U, Y and ptr to caller's register stack
071F 9EA5             (vtio_beta5yakback):01272                  ldx   <D.CCMem       get ptr to CC mem
0721 11A38820         (vtio_beta5yakback):01273                  cmpu  <G.CurDev,x    is caller in current window?
0725 2713             (vtio_beta5yakback):01274                  beq   L06FA          branch if so
0727 10AEE4           (vtio_beta5yakback):01275                  ldy   ,s             get ptr to caller's regs
072A C620             (vtio_beta5yakback):01276                  ldb   #Pt.Siz        size of packet
072C 6FE2             (vtio_beta5yakback):01277         L06EC    clr   ,-s            make room on stack
072E 5A               (vtio_beta5yakback):01278                  decb
072F 26FB             (vtio_beta5yakback):01279                  bne   L06EC
0731 30E4             (vtio_beta5yakback):01280                  leax  ,s             point X to temp mouse buffer on stack
0733 8D34             (vtio_beta5yakback):01281                  bsr   MovMsPkt
0735 32E820           (vtio_beta5yakback):01282                  leas  <Pt.Siz,s      clean up stack
0738 35F0             (vtio_beta5yakback):01283                  puls  pc,u,y,x       and return
                      (vtio_beta5yakback):01284         
                      (vtio_beta5yakback):01285         * here the caller is in the current window
073A 6D8863           (vtio_beta5yakback):01286         L06FA    tst   <G.KyMse,x     Keyboard mouse active?
073D 261B             (vtio_beta5yakback):01287                  bne   L071A          Yes, skip ahead
073F A68860           (vtio_beta5yakback):01288                  lda   <G.MSmpRV,x    ready to sample?
0742 2616             (vtio_beta5yakback):01289                  bne   L071A          no, return packet
0744 3470             (vtio_beta5yakback):01290                  pshs  u,y,x          Save regs
0746 8D33             (vtio_beta5yakback):01291                  bsr   L073B          read mouse
0748 3570             (vtio_beta5yakback):01292                  puls  u,y,x          Restore regs
074A A68866           (vtio_beta5yakback):01293                  lda   <G.AutoMs,x    get automouse flag
074D A48867           (vtio_beta5yakback):01294                  anda  <G.MseMv,x     has mouse moved?
0750 2708             (vtio_beta5yakback):01295                  beq   L071A          no, return packet
0752 8603             (vtio_beta5yakback):01296                  lda   #$03           update auto-follow mouse sub-function call
0754 17FED1           (vtio_beta5yakback):01297                  lbsr  L05E7          call co-module to update mouse
0757 6F8867           (vtio_beta5yakback):01298                  clr   <G.MseMv,x     flag that the mouse hasn't moved
075A 8601             (vtio_beta5yakback):01299         L071A    lda   #$01           'special' co-mod function code: update mouse packet region
075C 17FEC9           (vtio_beta5yakback):01300                  lbsr  L05E7
075F 30883C           (vtio_beta5yakback):01301                  leax  <G.Mouse,x     move X to point to mouse packet
0762 10AEE4           (vtio_beta5yakback):01302                  ldy   ,s             get register stack pointer
0765 8D02             (vtio_beta5yakback):01303                  bsr   MovMsPkt       move packet to caller
0767 35F0             (vtio_beta5yakback):01304                  puls  pc,u,y,x
                      (vtio_beta5yakback):01305         
                      (vtio_beta5yakback):01306         * Move mouse packet to process
                      (vtio_beta5yakback):01307         * Entry: Y = ptr to caller's register stack
                      (vtio_beta5yakback):01308         * Exit: Pt.AcX/Pt.AcY updated, and 
0769 EE24             (vtio_beta5yakback):01309         MovMsPkt ldu   R$X,y          get destination pointer
076B 109E50           (vtio_beta5yakback):01310                  ldy   <D.Proc        get process descriptor pointer
076E E626             (vtio_beta5yakback):01311                  ldb   P$Task,y       get destination task number
0770 4F               (vtio_beta5yakback):01312                  clra                 source task number=system task
0771 108E0020         (vtio_beta5yakback):01313                  ldy   #Pt.Siz        get length of packet
0775 103F38           (vtio_beta5yakback):01314                  os9   F$Move         move it to the process & return
0778 39               (vtio_beta5yakback):01315                  rts
                      (vtio_beta5yakback):01316         
0779 9EA5             (vtio_beta5yakback):01317         L0739    ldx   <D.CCMem       Get ptr to VTIO global mem
077B 30883C           (vtio_beta5yakback):01318         L073B    leax  <G.Mouse,x     Point to mouse packet
077E 4F               (vtio_beta5yakback):01319                  clra                 clear MSB of mouse resolution
077F E68817           (vtio_beta5yakback):01320                  ldb   <Pt.Res,x      get resolution (0 = lores, 1 = hires)
0782 1F02             (vtio_beta5yakback):01321                  tfr   d,y            move mouse res to Y
0784 A601             (vtio_beta5yakback):01322                  lda   Pt.Actv,x      get mouse side
0786 3476             (vtio_beta5yakback):01323                  pshs  u,y,x,d        preserve regs
0788 BE10EA           (vtio_beta5yakback):01324                  ldx   >WGlobal+G.JoyEnt get ptr to mouse sub module
078B DEA5             (vtio_beta5yakback):01325                  ldu   <D.CCMem       get mem pointer
078D 33C900EC         (vtio_beta5yakback):01326                  leau  >G.JoyMem,u    and point to mouse sub module statics
0791 AD09             (vtio_beta5yakback):01327                  jsr   J$MsXY,x       Call JoyDrv to get mouse coords
0793 3430             (vtio_beta5yakback):01328                  pshs  y,x            Save X,Y coords
0795 AE66             (vtio_beta5yakback):01329                  ldx   6,s            get ptr to mouse packet back
0797 3506             (vtio_beta5yakback):01330                  puls  d              get X value into D
0799 318818           (vtio_beta5yakback):01331                  leay  <Pt.AcX,x      point X to "current" mouse X,Y coords in mouse packet
079C 8D06             (vtio_beta5yakback):01332                  bsr   L0764          Check/update X  (also sets mouse moved flag)
079E 3506             (vtio_beta5yakback):01333                  puls  d              get Y value into D
07A0 8D02             (vtio_beta5yakback):01334                  bsr   L0764          Check/update Y (also sets mouse moved flag)
07A2 35F6             (vtio_beta5yakback):01335                  puls  pc,u,y,x,d     Restore regs & return
                      (vtio_beta5yakback):01336         
                      (vtio_beta5yakback):01337         * Entry:
                      (vtio_beta5yakback):01338         * X=Address of G.Mouse in D.CCMem
                      (vtio_beta5yakback):01339         * Y=ptr to actual mouse position for axis we are working on
07A4 10A3A1           (vtio_beta5yakback):01340         L0764    cmpd  ,y++           compare mouse's current X to Pt.AcX (last position)
07A7 2707             (vtio_beta5yakback):01341                  beq   L0770          Hasn't moved, return
07A9 ED3E             (vtio_beta5yakback):01342                  std   -2,y           save new value as new Pt.AcX
07AB 8601             (vtio_beta5yakback):01343                  lda   #1             Flag that mouse has moved
07AD A7882B           (vtio_beta5yakback):01344                  sta   <(G.MseMv-G.Mouse),x update mouse moved flag
07B0 39               (vtio_beta5yakback):01345         L0770    rts
                      (vtio_beta5yakback):01346         
07B1 BE10F4           (vtio_beta5yakback):01347         SSTone   ldx   >WGlobal+G.SndEnt get address of sound sub module
07B4 6E06             (vtio_beta5yakback):01348                  jmp   S$SetStt,x go  execute routine in sub module
                      (vtio_beta5yakback):01349         
                      (vtio_beta5yakback):01350         * Animate Palette?  This obviously isn't implemented yet
07B6 BE10F4           (vtio_beta5yakback):01351         SSAnPal  ldx   >WGlobal+G.SndEnt
07B9 6E09             (vtio_beta5yakback):01352                  jmp   S$Term,x
                      (vtio_beta5yakback):01353         
                      (vtio_beta5yakback):01354         * SetStat
                      (vtio_beta5yakback):01355         *
                      (vtio_beta5yakback):01356         * Entry:
                      (vtio_beta5yakback):01357         *    A  = function code
                      (vtio_beta5yakback):01358         *    Y  = address of path descriptor
                      (vtio_beta5yakback):01359         *    U  = address of device memory area
                      (vtio_beta5yakback):01360         *
                      (vtio_beta5yakback):01361         * Exit:
                      (vtio_beta5yakback):01362         *    CC = carry set on error
                      (vtio_beta5yakback):01363         *    B  = error code
                      (vtio_beta5yakback):01364         *
07BB AE26             (vtio_beta5yakback):01365         SetStat  ldx   PD.RGS,y
07BD 8128             (vtio_beta5yakback):01366                  cmpa  #SS.ComSt
07BF 10270117         (vtio_beta5yakback):01367                  lbeq  SSComSt
07C3 8192             (vtio_beta5yakback):01368                  cmpa  #SS.Montr
07C5 102700F1         (vtio_beta5yakback):01369                  lbeq  SSMontr
07C9 8127             (vtio_beta5yakback):01370                  cmpa  #SS.KySns
07CB 102700E0         (vtio_beta5yakback):01371                  lbeq  SSKySns
07CF 8198             (vtio_beta5yakback):01372                  cmpa  #SS.Tone
07D1 27DE             (vtio_beta5yakback):01373                  beq   SSTone
07D3 819A             (vtio_beta5yakback):01374                  cmpa  #SS.AnPal
07D5 27DF             (vtio_beta5yakback):01375                  beq   SSAnPal
07D7 811A             (vtio_beta5yakback):01376                  cmpa  #SS.SSig
07D9 271F             (vtio_beta5yakback):01377                  beq   SSSig
07DB 818A             (vtio_beta5yakback):01378                  cmpa  #SS.MsSig
07DD 2730             (vtio_beta5yakback):01379                  beq   SSMsSig
07DF 811B             (vtio_beta5yakback):01380                  cmpa  #SS.Relea
07E1 2754             (vtio_beta5yakback):01381                  beq   SSRelea
07E3 8189             (vtio_beta5yakback):01382                  cmpa  #SS.Mouse
07E5 2763             (vtio_beta5yakback):01383                  beq   SSMouse
07E7 8194             (vtio_beta5yakback):01384                  cmpa  #SS.GIP
07E9 1027008C         (vtio_beta5yakback):01385                  lbeq  SSGIP
07ED 8129             (vtio_beta5yakback):01386                  cmpa  #SS.Open
07EF 2604             (vtio_beta5yakback):01387                  bne   L07B5
07F1 AE23             (vtio_beta5yakback):01388         SSOpen   ldx   PD.DEV,y   get device table entry
07F3 AF41             (vtio_beta5yakback):01389                  stx   V.PORT,u   save it as port address
07F5 C609             (vtio_beta5yakback):01390         L07B5    ldb   #$09   call setstt entry point in co-module
07F7 16FDDA           (vtio_beta5yakback):01391                  lbra  L0593    go do it
                      (vtio_beta5yakback):01392         
                      (vtio_beta5yakback):01393         * SS.SSig - send signal on data ready
07FA 3401             (vtio_beta5yakback):01394         SSSig    pshs  cc   save interrupt status
                      (vtio_beta5yakback):01395         * The next line doesn't exist in the NitrOS version
                      (vtio_beta5yakback):01396         *         clr   <V.SSigID,u
07FC A6C834           (vtio_beta5yakback):01397                  lda   <V.InpPtr,u  get input buffer pointer
07FF A0C833           (vtio_beta5yakback):01398                  suba  <V.EndPtr,u  get how many chars are there
0802 3402             (vtio_beta5yakback):01399                  pshs  a    save it temporarily
0804 8D20             (vtio_beta5yakback):01400                  bsr   L07EC    get current process ID
0806 6DE0             (vtio_beta5yakback):01401                  tst   ,s+    anything in buffer?
0808 2627             (vtio_beta5yakback):01402                  bne   L07F7    yes, go send the signal
080A EDC824           (vtio_beta5yakback):01403                  std   <V.SSigID,u  save process ID & signal
080D 3581             (vtio_beta5yakback):01404                  puls  pc,cc    restore interrupts & return
                      (vtio_beta5yakback):01405         
                      (vtio_beta5yakback):01406         * SS.MsSig - send signal on mouse button
080F 3401             (vtio_beta5yakback):01407         SSMsSig  pshs  cc   save interrupt status
                      (vtio_beta5yakback):01408         * The next line doesn't exist in the NitrOS version
                      (vtio_beta5yakback):01409         *         clr   <V.MSigID,u
0811 8D13             (vtio_beta5yakback):01410                  bsr   L07EC    get process ID
0813 9EA5             (vtio_beta5yakback):01411                  ldx   <D.CCMem   get ptr to CC mem
0815 11A38820         (vtio_beta5yakback):01412                  cmpu  <G.CurDev,x  are we active device?
0819 2606             (vtio_beta5yakback):01413                  bne   L07E7    no, save ID & signal
081B 6D8900C6         (vtio_beta5yakback):01414                  tst   >G.MsSig,x has button been down?
081F 260C             (vtio_beta5yakback):01415                  bne   L07F3    yes, go send the signal
0821 EDC826           (vtio_beta5yakback):01416         L07E7    std   <V.MSigID,u  save ID & signal code
0824 3581             (vtio_beta5yakback):01417                  puls  pc,cc    restore interrupts & return
                      (vtio_beta5yakback):01418         
0826 1A50             (vtio_beta5yakback):01419         L07EC    orcc  #IntMasks  disable interrupts
0828 A625             (vtio_beta5yakback):01420                  lda   PD.CPR,y   get curr proc #
082A E605             (vtio_beta5yakback):01421                  ldb   R$X+1,x    get user signal code
082C 39               (vtio_beta5yakback):01422                  rts        return
                      (vtio_beta5yakback):01423         
082D 6F8900C6         (vtio_beta5yakback):01424         L07F3    clr   >G.MsSig,x clear mouse button down flag
0831 3501             (vtio_beta5yakback):01425         L07F7    puls  cc   restore interrupts
0833 103F08           (vtio_beta5yakback):01426                  os9   F$Send   send the signal
0836 39               (vtio_beta5yakback):01427                  rts        return
                      (vtio_beta5yakback):01428         
                      (vtio_beta5yakback):01429         * SS.Relea - release a path from SS.SSig
0837 A625             (vtio_beta5yakback):01430         SSRelea  lda   PD.CPR,y   get curr proc #
0839 A1C824           (vtio_beta5yakback):01431                  cmpa  <V.SSigID,u  same as keyboard?
083C 2603             (vtio_beta5yakback):01432                  bne   L0807    branch if not
083E 6FC824           (vtio_beta5yakback):01433                  clr   <V.SSigID,u  clear process ID
0841 A1C826           (vtio_beta5yakback):01434         L0807    cmpa  <V.MSigID,u  same as mouse?
0844 2672             (vtio_beta5yakback):01435                  bne   L0871    no, return
0846 6FC826           (vtio_beta5yakback):01436                  clr   <V.MSigID,u  else clear process ID
0849 39               (vtio_beta5yakback):01437                  rts        return
                      (vtio_beta5yakback):01438         
                      (vtio_beta5yakback):01439         * SS.Mouse - set mouse sample rate and button timeout
                      (vtio_beta5yakback):01440         *
                      (vtio_beta5yakback):01441         * Entry:
                      (vtio_beta5yakback):01442         *    R$X = mouse sample rate and timeout
                      (vtio_beta5yakback):01443         *          MSB = mouse sample rate
                      (vtio_beta5yakback):01444         *          LSB = mouse button timeout
                      (vtio_beta5yakback):01445         *    R$Y = mouse auto-follow feature
                      (vtio_beta5yakback):01446         *          MSB = don't care
                      (vtio_beta5yakback):01447         *          LSB = auto-follow ($00 = OFF, else = ON)
                      (vtio_beta5yakback):01448         *
                      (vtio_beta5yakback):01449         * NOTE: Default mouse params @ $28,u are $0078
                      (vtio_beta5yakback):01450         *       It modifies the static mem variables (for caller's window) first, and
                      (vtio_beta5yakback):01451         *       then modifies global memory only if we are the current active device.
084A EC04             (vtio_beta5yakback):01452         SSMouse  ldd   R$X,x    get sample rate & timeout from caller
084C 81FF             (vtio_beta5yakback):01453                  cmpa  #$FF   sample rate 256?
084E 2703             (vtio_beta5yakback):01454                  beq   L0819    yes, can't have it so go on
0850 A7C828           (vtio_beta5yakback):01455                  sta   <V.MSmpl,u save new timeout
0853 C1FF             (vtio_beta5yakback):01456         L0819    cmpb  #$FF   timeout 256?
0855 2703             (vtio_beta5yakback):01457                  beq   L0820    yes, can't have it so go on
0857 E7C829           (vtio_beta5yakback):01458                  stb   <V.MTime,u save new timeout
085A E607             (vtio_beta5yakback):01459         L0820    ldb   R$Y+1,x    get auto-follow flag
085C E7C82B           (vtio_beta5yakback):01460                  stb   <V.MAutoF,u  save it was MS.Side wrong RG
085F 109EA5           (vtio_beta5yakback):01461                  ldy   <D.CCMem   get ptr to CC mem
0862 11A3A820         (vtio_beta5yakback):01462                  cmpu  <G.CurDev,y  are we current device?
0866 260F             (vtio_beta5yakback):01463                  bne   L083D    no, exit without error
0868 E7A866           (vtio_beta5yakback):01464                  stb   <G.AutoMs,y  save auto-follow flag for this dev
086B ECC828           (vtio_beta5yakback):01465                  ldd   <V.MSmpl,u get sample rate/timeout
086E A7A860           (vtio_beta5yakback):01466                  sta   <G.MSmpRV,y  save it (reset value)
0871 A7A83B           (vtio_beta5yakback):01467                  sta   <G.MSmpRt,y  save it (current value)
0874 E7A83E           (vtio_beta5yakback):01468                  stb   <G.Mouse+Pt.ToTm,y save timeout too
0877 5F               (vtio_beta5yakback):01469         L083D    clrb       exit without error
0878 39               (vtio_beta5yakback):01470                  rts
                      (vtio_beta5yakback):01471         
                      (vtio_beta5yakback):01472         * SS.GIP
                      (vtio_beta5yakback):01473         * Added individual settings checking for $FF to leave current setting alone. This way,
                      (vtio_beta5yakback):01474         * one change change mouse resolution w/o changing the port (or vice versa), change the
                      (vtio_beta5yakback):01475         * keyboard settings while leaving the mouse alone, etc.
0879 109EA5           (vtio_beta5yakback):01476         SSGIP    ldy   <D.CCMem   get ptr to CC mem
087C 11A3A820         (vtio_beta5yakback):01477                  cmpu  <G.CurDev,y  current window?
0880 262B             (vtio_beta5yakback):01478                  bne   L0866    branch if not
0882 EC06             (vtio_beta5yakback):01479                  ldd   R$Y,x    get caller's Y (key repeat info)
0884 81FF             (vtio_beta5yakback):01480                  cmpa  #$FF     Start constant "don't change"?
0886 2703             (vtio_beta5yakback):01481                  beq   ChkKSpd  Yes, skip to check keyboard delay
0888 A7A861           (vtio_beta5yakback):01482                  sta   <G.KyDly,y Save new keyboard delay setting
088B C1FF             (vtio_beta5yakback):01483         ChkKSpd  cmpb  #$FF     Don't change key repeat delay?
088D 2703             (vtio_beta5yakback):01484                  beq   L0853    Yes, skip to mouse settings
088F E7A862           (vtio_beta5yakback):01485                  stb   <G.KySpd,y  Save new repeat delay
0892 EC04             (vtio_beta5yakback):01486         L0853    ldd   R$X,x    get mouse info
0894 81FF             (vtio_beta5yakback):01487                  cmpa  #$FF     Leave mouse resolution alone?
0896 2707             (vtio_beta5yakback):01488                  beq   ChkMPrt  Yes, check mouse port
0898 8101             (vtio_beta5yakback):01489                  cmpa  #$01   set for hi res adapter?
089A 2E3A             (vtio_beta5yakback):01490                  bgt   L088F    branch to error if greater
089C A7A853           (vtio_beta5yakback):01491                  sta   <G.Mouse+Pt.Res,y  save new resolution value
                      (vtio_beta5yakback):01492         * B  = mouse port (1 = right, 2 = left, $FF=leave alone)
089F C1FF             (vtio_beta5yakback):01493         ChkMPrt  cmpb  #$FF     Leave mouse port alone?
08A1 270A             (vtio_beta5yakback):01494                  beq   L0866    Yes, we are done
08A3 5D               (vtio_beta5yakback):01495                  tstb           side below legal value?
08A4 2F30             (vtio_beta5yakback):01496                  ble   L088F    no, exit with error
08A6 C102             (vtio_beta5yakback):01497                  cmpb  #2       side below legal value?
08A8 2E2C             (vtio_beta5yakback):01498                  bgt   L088F    no, exit with error
08AA E7A83D           (vtio_beta5yakback):01499                  stb   <G.Mouse+Pt.Actv,y save new side
08AD 5F               (vtio_beta5yakback):01500         L0866    clrb           clear errors
08AE 39               (vtio_beta5yakback):01501                  rts            and return
                      (vtio_beta5yakback):01502         
                      (vtio_beta5yakback):01503         * SS.KySns - setstat???
08AF EC04             (vtio_beta5yakback):01504         SSKySns  ldd   R$X,x    get monitor type requested
08B1 2702             (vtio_beta5yakback):01505                  beq   L086E    below legal value?
08B3 C6FF             (vtio_beta5yakback):01506                  ldb   #$FF     no, exit with error
08B5 E7C822           (vtio_beta5yakback):01507         L086E    stb   <V.KySnsFlg,u  save new sense mode
08B8 5F               (vtio_beta5yakback):01508         L0871    clrb           clear errors & return
08B9 39               (vtio_beta5yakback):01509                  rts
                      (vtio_beta5yakback):01510         
                      (vtio_beta5yakback):01511         * SS.Montr - change monitor type
08BA EC04             (vtio_beta5yakback):01512         SSMontr  ldd   R$X,x    get monitor type requested
08BC 10830002         (vtio_beta5yakback):01513                  cmpd  #$0002   below legal value?
08C0 2214             (vtio_beta5yakback):01514                  bhi   L088F    no, exit with error
08C2 9698             (vtio_beta5yakback):01515                  lda   <D.VIDMD get current GIME video mode register
08C4 84EF             (vtio_beta5yakback):01516                  anda  #$EF     get rid of monochrome bit
08C6 C502             (vtio_beta5yakback):01517                  bitb  #$02     mono requested?
08C8 2702             (vtio_beta5yakback):01518                  beq   L0885    no, keep checking
08CA 8A10             (vtio_beta5yakback):01519                  ora   #$10     switch to monochrome
08CC 9798             (vtio_beta5yakback):01520         L0885    sta   <D.VIDMD update video mode register
08CE F71009           (vtio_beta5yakback):01521                  stb   >WGlobal+G.MonTyp  save new monitor type
08D1 6CC823           (vtio_beta5yakback):01522                  inc   <V.ScrChg,u  flag a screen change
08D4 5F               (vtio_beta5yakback):01523                  clrb           clear errors & return
08D5 39               (vtio_beta5yakback):01524                  rts
                      (vtio_beta5yakback):01525         
                      (vtio_beta5yakback):01526         * Illegal argument error handler
08D6 53               (vtio_beta5yakback):01527         L088F    comb       set carry for error
08D7 C6BB             (vtio_beta5yakback):01528                  ldb   #E$IllArg  get illegal argument error code
08D9 39               (vtio_beta5yakback):01529                  rts        return with it
                      (vtio_beta5yakback):01530         
                      (vtio_beta5yakback):01531         * SS.ComSt - set baud/parity params
08DA EC06             (vtio_beta5yakback):01532         SSComSt  ldd   R$Y,x    get requested window type
08DC A846             (vtio_beta5yakback):01533                  eora  V.TYPE,u   same type as now?
08DE 8480             (vtio_beta5yakback):01534                  anda  #$80   trying to flip from window to VDG?
08E0 26F4             (vtio_beta5yakback):01535                  bne   L088F    yes, error
08E2 A606             (vtio_beta5yakback):01536                  lda   R$Y,x    no, get requested window type again
08E4 8D0A             (vtio_beta5yakback):01537                  bsr   FindCoMod  go make sure co-module for new type exists
08E6 1024FF0B         (vtio_beta5yakback):01538                  lbcc  L07B5    carry it over to co-module
08EA 39               (vtio_beta5yakback):01539                  rts        return
                      (vtio_beta5yakback):01540         
08EB 436F5644C7       (vtio_beta5yakback):01541         CoVDG    fcs   /CoVDG/
                      (vtio_beta5yakback):01542         
                      (vtio_beta5yakback):01543         *
                      (vtio_beta5yakback):01544         * Link to proper co-module
                      (vtio_beta5yakback):01545         * Try CoVDG first
                      (vtio_beta5yakback):01546         *
                      (vtio_beta5yakback):01547         * Entry: A = window type (If bit 7 is set, it's a window, else VDG screen)
                      (vtio_beta5yakback):01548         *
08F0                  (vtio_beta5yakback):01549         FindCoMod
08F0 A746             (vtio_beta5yakback):01550                  sta   V.TYPE,u   save new type
08F2 2B18             (vtio_beta5yakback):01551                  bmi   FindWind   if hi-bit if A is set, we're a window
08F4 3462             (vtio_beta5yakback):01552                  pshs  u,y,a    ..else VDG
08F6 8602             (vtio_beta5yakback):01553                  lda   #$02   get code for VDG type window
08F8 A7C81D           (vtio_beta5yakback):01554                  sta   <V.WinType,u save it
08FB 308CED           (vtio_beta5yakback):01555                  leax  <CoVDG,pcr point to CoVDG name
08FE 8D2C             (vtio_beta5yakback):01556                  bsr   L08D4    link to it if it exists
0900 35E2             (vtio_beta5yakback):01557                  puls  pc,u,y,a   restore regs & return
                      (vtio_beta5yakback):01558         
0902 436F5769EE       (vtio_beta5yakback):01559         CoWin    fcs   /CoWin/
0907 436F4772E6       (vtio_beta5yakback):01560         CoGrfName    fcs   /CoGrf/ ++
                      (vtio_beta5yakback):01561         *CC3GfxInt fcs   /CC3GfxInt/ ++
                      (vtio_beta5yakback):01562         
                      (vtio_beta5yakback):01563         *
                      (vtio_beta5yakback):01564         * Try CoWin
                      (vtio_beta5yakback):01565         *
090C 3460             (vtio_beta5yakback):01566         FindWind pshs  u,y    preserve regs
090E 4F               (vtio_beta5yakback):01567                  clra       set window type
090F A7C81D           (vtio_beta5yakback):01568                  sta   <V.WinType,u
0912 308CED           (vtio_beta5yakback):01569                  leax  <CoWin,pcr point to CoWin name
0915 8680             (vtio_beta5yakback):01570                  lda   #$80   get driver type code
0917 8D13             (vtio_beta5yakback):01571                  bsr   L08D4    try and link it
                      (vtio_beta5yakback):01572         
                      (vtio_beta5yakback):01573         *++
0919 240D             (vtio_beta5yakback):01574                  bcc   ok
                      (vtio_beta5yakback):01575         
                      (vtio_beta5yakback):01576         * Bug fix by Boisy on 08/22/2007 - The three lines below were inserted to check to see
                      (vtio_beta5yakback):01577         * the nature of the error that occurred fromfailing to link to CoWin/CoGrf.  Since CoWin/CoGrf
                      (vtio_beta5yakback):01578         * also load GrfDrv, an error other than E$MNF might arise.  We expect an E$MNF if CoGrf is in
                      (vtio_beta5yakback):01579         * place instead of CoWin, but any other error just gets blown away without the three lines below.
                      (vtio_beta5yakback):01580         * Now, if any error other than E$MNF is returned from trying to link to CoWin, we don't bother trying
                      (vtio_beta5yakback):01581         * to link to CoGrf... we just return the error as is.
091B C1DD             (vtio_beta5yakback):01582                  cmpb  #E$MNF   compare the error to what we expect
091D 1A01             (vtio_beta5yakback):01583                  orcc  #Carry   set the carry again (cmpb above clears it)
091F 2607             (vtio_beta5yakback):01584                  bne   ok   if the error in B is not E$MNF, just leave this routine
                      (vtio_beta5yakback):01585         
                      (vtio_beta5yakback):01586         #         leax  <CoGrfName,pcr point to CoGrf name
0921 30               (vtio_beta5yakback):01587                                         fcb $30
0922 8C               (vtio_beta5yakback):01588                                         fcb $8C
0923 DC               (vtio_beta5yakback):01589                                         fcb $DC
0924 8680             (vtio_beta5yakback):01590                  lda   #$80
0926 8D04             (vtio_beta5yakback):01591                  bsr   L08D4
                      (vtio_beta5yakback):01592         *++
                      (vtio_beta5yakback):01593         
0928 35E0             (vtio_beta5yakback):01594         ok       puls  pc,u,y   restore regs and return
092A 5F               (vtio_beta5yakback):01595         L08D2    clrb
092B 39               (vtio_beta5yakback):01596                  rts
                      (vtio_beta5yakback):01597         
                      (vtio_beta5yakback):01598         *
                      (vtio_beta5yakback):01599         * Check if co-module is in memory
                      (vtio_beta5yakback):01600         *
092C E6C82F           (vtio_beta5yakback):01601         L08D4    ldb   <V.PrmStrt,u any parameter vector?
092F 26F9             (vtio_beta5yakback):01602                  bne   L08D2    no, return
0931 3440             (vtio_beta5yakback):01603                  pshs  u    save statics
0933 DEA5             (vtio_beta5yakback):01604                  ldu   <D.CCMem   get ptr to CC mem
0935 A5C824           (vtio_beta5yakback):01605                  bita  <G.BCFFlg,u  BCFFlg already linked?
0938 3540             (vtio_beta5yakback):01606                  puls  u    restore statics
093A 261C             (vtio_beta5yakback):01607                  bne   L0900    yes, initialize co-module
093C 4D               (vtio_beta5yakback):01608                  tsta       Window type device?
093D 2A01             (vtio_beta5yakback):01609                  bpl   L08E8    no, go on
093F 4F               (vtio_beta5yakback):01610                  clra       set co-module vector offset for window
0940 3422             (vtio_beta5yakback):01611         L08E8    pshs  y,a    preserve registers
0942 8D18             (vtio_beta5yakback):01612                  bsr   L0905    try and link module
0944 2402             (vtio_beta5yakback):01613                  bcc   L08F0    we linked it, go on
0946 35A2             (vtio_beta5yakback):01614                  puls  pc,y,a   restore registers & return error
                      (vtio_beta5yakback):01615         
0948 3502             (vtio_beta5yakback):01616         L08F0    puls  a    restore vector offset
094A 9EA5             (vtio_beta5yakback):01617                  ldx   <D.CCMem   get ptr to CC mem
094C 308868           (vtio_beta5yakback):01618                  leax  <G.CoTble,x  point to vector offsets
094F 10AF86           (vtio_beta5yakback):01619                  sty   a,x    store co-module entry vector
0952 3520             (vtio_beta5yakback):01620                  puls  y    restore path descriptor pointer
0954 8102             (vtio_beta5yakback):01621                  cmpa  #$02   was it CoWin?
0956 2ED2             (vtio_beta5yakback):01622                  bgt   L08D2    no, return
0958 5F               (vtio_beta5yakback):01623         L0900    clrb
0959 16FC75           (vtio_beta5yakback):01624                  lbra  CallCo   send it to co-module
                      (vtio_beta5yakback):01625         
                      (vtio_beta5yakback):01626         *
                      (vtio_beta5yakback):01627         * Link or load a co-module
                      (vtio_beta5yakback):01628         *
095C DC50             (vtio_beta5yakback):01629         L0905    ldd   <D.Proc        get current process descriptor pointer
095E 3456             (vtio_beta5yakback):01630                  pshs  u,x,d          preserve it along with registers
0960 DC4A             (vtio_beta5yakback):01631                  ldd   <D.SysPrc      get system process descriptor pointer
0962 DD50             (vtio_beta5yakback):01632                  std   <D.Proc        save it as current process
0964 86C1             (vtio_beta5yakback):01633                  lda   #Systm+Objct   get codes for link
0966 103F00           (vtio_beta5yakback):01634                  os9   F$Link         link to it
0969 AE62             (vtio_beta5yakback):01635                  ldx   $02,s          get name pointer
096B 2405             (vtio_beta5yakback):01636                  bcc   L091B          does module exist?
096D DE4A             (vtio_beta5yakback):01637                  ldu   <D.SysPrc      no, get system process descriptor pointer
096F 103F01           (vtio_beta5yakback):01638                  os9   F$Load         load it
0972 3556             (vtio_beta5yakback):01639         L091B    puls  u,x,d          restore regs
0974 DD50             (vtio_beta5yakback):01640                  std   <D.Proc        restore current process descriptor
0976 1025FCB2         (vtio_beta5yakback):01641                  lbcs  L05EB          exit if error from load or link, else return
097A 39               (vtio_beta5yakback):01642                  rts
                      (vtio_beta5yakback):01643         
097B 32DC40           (vtio_beta5yakback):01644                  emod
     097E             (vtio_beta5yakback):01645         eom      equ   *
                      (vtio_beta5yakback):01646                  end
