                      (/home/strick/go/s):00001         ********************************************************************
                      (/home/strick/go/s):00002         * Clock - Clock for OS-9 Level Two/NitrOS-9
                      (/home/strick/go/s):00003         *
                      (/home/strick/go/s):00004         * Clock module for CoCo 3 and TC9 OS9 Level 2 and NitrOS-9
                      (/home/strick/go/s):00005         *
                      (/home/strick/go/s):00006         * Includes support for several different RTC chips, GIME Toggle
                      (/home/strick/go/s):00007         * IRQ fix, numerous minor changes.
                      (/home/strick/go/s):00008         *
                      (/home/strick/go/s):00009         * Based on Microware/Tandy Clock Module for CC3/L2
                      (/home/strick/go/s):00010         *
                      (/home/strick/go/s):00011         * $Id$
                      (/home/strick/go/s):00012         *
                      (/home/strick/go/s):00013         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/home/strick/go/s):00014         * Comment
                      (/home/strick/go/s):00015         * ------------------------------------------------------------------
                      (/home/strick/go/s):00016         *          ????/??/??
                      (/home/strick/go/s):00017         * NitrOS-9 2.00 distribution.
                      (/home/strick/go/s):00018         *
                      (/home/strick/go/s):00019         *   9r4    2003/01/01  Boisy G. Pitre
                      (/home/strick/go/s):00020         * Back-ported to OS-9 Level Two.
                      (/home/strick/go/s):00021         *
                      (/home/strick/go/s):00022         *   9r5    2003/08/18  Boisy G. Pitre
                      (/home/strick/go/s):00023         * Separated clock into Clock and Clock2 for modularity.
                      (/home/strick/go/s):00024         
                      (/home/strick/go/s):00025                  nam   Clock
                      (/home/strick/go/s):00026                  ttl   Clock for OS-9 Level Two/NitrOS-9
                      (/home/strick/go/s):00027         
     0002             (/home/strick/go/s):00028         TkPerTS  equ   2          ticks per time slice
     0001             (/home/strick/go/s):00029         GI.Toggl equ   %00000001  GIME CART* IRQ enable bit, for CC3
                      (/home/strick/go/s):00030         
                      (/home/strick/go/s):00031         * TC9 needs to reset more interrupt sources
                      (/home/strick/go/s):00032         *GI.Toggl equ %00000111 GIME SERINT*, KEYINT*, CART* IRQ enable bits
                      (/home/strick/go/s):00033         
                      (/home/strick/go/s):00034                  IFP1
                      (/home/strick/go/s):00035                  use   defsfile
                      (         defsfile):00001                  use   ../defsfile
     0002             (      ../defsfile):00001         Level    equ   2
                      (      ../defsfile):00002         
                      (      ../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (            os9.d):00637         * and for bytes in the system memory map at D.SysMem.
                      (            os9.d):00638         * A value of 0 indicates an unused/unassigned block.
                      (            os9.d):00639         * In the code, block assignment often involves incrementing a value
                      (            os9.d):00640         * from 0 to 1 rather than explict use of RAMinUse.
                      (            os9.d):00641         *
     0080             (            os9.d):00642         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00643         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00644         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00645         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00646         *
                      (            os9.d):00647         * Service Dispatch Table special entries
                      (            os9.d):00648         *
     00FE             (            os9.d):00649         IOEntry        EQU       254
                      (            os9.d):00650         
                      (            os9.d):00651                        ENDC      
                      (            os9.d):00652         
                      (            os9.d):00653                        TTL       Structure Formats
                      (            os9.d):00654                        PAG       
                      (            os9.d):00655         ************************************
                      (            os9.d):00656         * Module Directory Entry Definitions
                      (            os9.d):00657         *
                      (            os9.d):00658                        ORG       0
                      (            os9.d):00659                        IFGT      Level-1
0000                  (            os9.d):00660         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00661         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00662                        ENDC      
0004                  (            os9.d):00663         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00664         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00665         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00666         
                      (            os9.d):00667         ************************************
                      (            os9.d):00668         * Module Definitions
                      (            os9.d):00669         *
                      (            os9.d):00670         * Universal Module Offsets
                      (            os9.d):00671         *
                      (            os9.d):00672                        ORG       0
0000                  (            os9.d):00673         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00674         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00675         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00676         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00677         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00678         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00679         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00680         *
                      (            os9.d):00681         * Type-Dependent Module Offsets
                      (            os9.d):00682         *
                      (            os9.d):00683         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00684         *
0009                  (            os9.d):00685         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Program Module
                      (            os9.d):00688         *
000B                  (            os9.d):00689         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Driver, Device Descriptor Module
                      (            os9.d):00692         *
000D                  (            os9.d):00693         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00694         *
                      (            os9.d):00695         * Device Descriptor Module
                      (            os9.d):00696         *
                      (            os9.d):00697                        ORG       M$IDSize
0009                  (            os9.d):00698         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00699         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00700                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00701         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00702         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00703         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00704         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00705         *
                      (            os9.d):00706         * Configuration Module Entry Offsets
                      (            os9.d):00707         *
                      (            os9.d):00708                        ORG       M$IDSize
0009                  (            os9.d):00709         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00710         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00711         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00712         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00713         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00714         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00715         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00716         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00717         
0017                  (            os9.d):00718         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00719         OSVer          RMB       1                   OS version
0019                  (            os9.d):00720         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00721         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00722         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00723         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00724         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00725         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00726                        RMB       4                   reserved for future use
                      (            os9.d):00727         
                      (            os9.d):00728                        IFGT      Level-1
                      (            os9.d):00729         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00730         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00731         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00732         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00733         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00734                        ENDC      
                      (            os9.d):00735         
                      (            os9.d):00736         * Feature1 byte definitions
     0001             (            os9.d):00737         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00738         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00739         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00740         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00741         
                      (            os9.d):00742                        PAG       
                      (            os9.d):00743         **************************
                      (            os9.d):00744         * Module Field Definitions
                      (            os9.d):00745         *
                      (            os9.d):00746         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00747         *
     0087             (            os9.d):00748         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00749         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00750         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00751         
                      (            os9.d):00752         *
                      (            os9.d):00753         * Module Type/Language Field Masks
                      (            os9.d):00754         *
     00F0             (            os9.d):00755         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00756         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00757         
                      (            os9.d):00758         *
                      (            os9.d):00759         * Module Type Values
                      (            os9.d):00760         *
     00F0             (            os9.d):00761         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00762         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00763         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00764         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00765         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00766         Data           EQU       $40                 Data Module
     0030             (            os9.d):00767         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00768         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00769         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00770         
                      (            os9.d):00771         *
                      (            os9.d):00772         * Module Language Values
                      (            os9.d):00773         *
     0001             (            os9.d):00774         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00775         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00776         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00777         CCode          EQU       4                   C I-code
     0005             (            os9.d):00778         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00779         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00780         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00781         *
                      (            os9.d):00782         * Module Attributes / Revision byte
                      (            os9.d):00783         *
                      (            os9.d):00784         * Field Masks
                      (            os9.d):00785         *
     00F0             (            os9.d):00786         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00787         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00788         *
                      (            os9.d):00789         * Attribute Flags
                      (            os9.d):00790         *
     0080             (            os9.d):00791         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00792         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00793         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00794         
                      (            os9.d):00795         ********************
                      (            os9.d):00796         * Device Type Values
                      (            os9.d):00797         *
                      (            os9.d):00798         * These values define various classes of devices, which are
                      (            os9.d):00799         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00800         * in a device's device descriptor.
                      (            os9.d):00801         *
     0000             (            os9.d):00802         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00803         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00804         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00805         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00806         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00807         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00808         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00809         
                      (            os9.d):00810         *********************
                      (            os9.d):00811         * CRC Result Constant
                      (            os9.d):00812         *
     0080             (            os9.d):00813         CRCCon1        EQU       $80
     0FE3             (            os9.d):00814         CRCCon23       EQU       $0FE3
                      (            os9.d):00815         
                      (            os9.d):00816                        TTL       Process Information
                      (            os9.d):00817                        PAG       
                      (            os9.d):00818         ********************************
                      (            os9.d):00819         * Process Descriptor Definitions
                      (            os9.d):00820         *
                      (            os9.d):00821                        IFEQ      Level-1
                      (            os9.d):00822         
                      (            os9.d):00823         * Level 1 process descriptor defs
002A                  (            os9.d):00824         DefIOSiz       EQU       12
002A                  (            os9.d):00825         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00826         
                      (            os9.d):00827                        ORG       0
002A                  (            os9.d):00828         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00829         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00830         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00831         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00832         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00833         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00834         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00835         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00836         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00837         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00838         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00839         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00840         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00841         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00842         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00843         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00844         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00845         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00846         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00847         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00848         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00849         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00850         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00851         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00852         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00853                        RMB       $40-.               unused
002A                  (            os9.d):00854         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00855         
                      (            os9.d):00856         *
                      (            os9.d):00857         * Process State Flags
                      (            os9.d):00858         *
002A                  (            os9.d):00859         SysState       EQU       %10000000
002A                  (            os9.d):00860         TimSleep       EQU       %01000000
002A                  (            os9.d):00861         TimOut         EQU       %00100000
002A                  (            os9.d):00862         ImgChg         EQU       %00010000
002A                  (            os9.d):00863         Condem         EQU       %00000010
002A                  (            os9.d):00864         Dead           EQU       %00000001
                      (            os9.d):00865         
                      (            os9.d):00866                        ELSE      
                      (            os9.d):00867         
                      (            os9.d):00868         * Level 2 process descriptor defs
     0010             (            os9.d):00869         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00870         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00871         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00872         
                      (            os9.d):00873                        ORG       0
0000                  (            os9.d):00874         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00875         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00876         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00877         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00878         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00879         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00880         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00881         P$User         RMB       2                   User Index
000A                  (            os9.d):00882         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00883         P$Age          RMB       1                   Age
000C                  (            os9.d):00884         P$State        RMB       1                   Status
000D                  (            os9.d):00885         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00886         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00887         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00888         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00889         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00890         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00891         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00892         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00893         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00894         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00895         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00896                        RMB       $20-.               unused
0020                  (            os9.d):00897         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00898         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00899         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00900         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00901         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00902         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00903         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00904         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00905         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00906         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00907         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00908         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00909         P$Alarm        RMB       6
00C9                  (            os9.d):00910                        RMB       $200-.              Local stack
     0200             (            os9.d):00911         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00912         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00913         
                      (            os9.d):00914         *
                      (            os9.d):00915         * Process State Flags
                      (            os9.d):00916         *
     0080             (            os9.d):00917         SysState       EQU       %10000000
     0040             (            os9.d):00918         TimSleep       EQU       %01000000
     0020             (            os9.d):00919         TimOut         EQU       %00100000
     0010             (            os9.d):00920         ImgChg         EQU       %00010000
     0008             (            os9.d):00921         Suspend        EQU       %00001000
     0002             (            os9.d):00922         Condem         EQU       %00000010
     0001             (            os9.d):00923         Dead           EQU       %00000001
                      (            os9.d):00924         
                      (            os9.d):00925                        ENDC      
                      (            os9.d):00926         
                      (            os9.d):00927                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00928                        PAG       
                      (            os9.d):00929         *************************
                      (            os9.d):00930         * Path Descriptor Offsets
                      (            os9.d):00931         *
                      (            os9.d):00932                        ORG       0
0000                  (            os9.d):00933         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00934         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00935         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00936         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00937         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00938         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00939         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00940         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00941         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00942         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00943                        RMB       64-.                Path options
     0040             (            os9.d):00944         PDSIZE         EQU       .
                      (            os9.d):00945         
                      (            os9.d):00946         *
                      (            os9.d):00947         * Pathlist Special Symbols
                      (            os9.d):00948         *
     002F             (            os9.d):00949         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00950         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00951         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00952         
                      (            os9.d):00953                        PAG       
                      (            os9.d):00954         ****************************
                      (            os9.d):00955         * File Manager Entry Offsets
                      (            os9.d):00956         *
                      (            os9.d):00957                        ORG       0
0000                  (            os9.d):00958         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00959         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00960         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00961         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00962         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00963         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00964         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00965         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00966         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00967         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00968         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00969         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00970         FMCLOS         RMB       3                   Close File
                      (            os9.d):00971         
                      (            os9.d):00972         *****************************
                      (            os9.d):00973         * Device Driver Entry Offsets
                      (            os9.d):00974         *
                      (            os9.d):00975                        ORG       0
0000                  (            os9.d):00976         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00977         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00978         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00979         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00980         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00981         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00982         
                      (            os9.d):00983         *********************
                      (            os9.d):00984         * Device Table Format
                      (            os9.d):00985         *
                      (            os9.d):00986                        ORG       0
0000                  (            os9.d):00987         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00988         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00989         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00990         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00991         V$USRS         RMB       1                   use count
                      (            os9.d):00992                        IFGT      Level-1
0009                  (            os9.d):00993         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00994         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00995                        ENDC      
     000D             (            os9.d):00996         DEVSIZ         EQU       .
                      (            os9.d):00997         
                      (            os9.d):00998         *******************************
                      (            os9.d):00999         * Device Static Storage Offsets
                      (            os9.d):01000         *
                      (            os9.d):01001                        ORG       0
0000                  (            os9.d):01002         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):01003         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01004         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01005         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01006         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01007         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01008         
                      (            os9.d):01009         ********************************
                      (            os9.d):01010         * Interrupt Polling Table Format
                      (            os9.d):01011         *
                      (            os9.d):01012                        ORG       0
0000                  (            os9.d):01013         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01014         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01015         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01016         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01017         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01018         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01019                        IFGT      Level-1
0009                  (            os9.d):01020         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01021                        ENDC      
     000B             (            os9.d):01022         POLSIZ         EQU       .
                      (            os9.d):01023         
                      (            os9.d):01024         ********************
                      (            os9.d):01025         * VIRQ packet format
                      (            os9.d):01026         *
                      (            os9.d):01027                        ORG       0
0000                  (            os9.d):01028         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01029         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01030         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01031         Vi.PkSz        EQU       .
                      (            os9.d):01032         
     0001             (            os9.d):01033         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01034         
                      (            os9.d):01035                        PAG       
                      (            os9.d):01036         *************************************
                      (            os9.d):01037         * Machine Characteristics Definitions
                      (            os9.d):01038         *
     0000             (            os9.d):01039         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01040         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01041         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01042         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01043                        IFNE      H6309
0005                  (            os9.d):01044         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01045         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01046         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01047         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01048         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01049         R$X            EQU       6                   X Index register
0005                  (            os9.d):01050         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01051         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01052         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01053         R$Size         EQU       14                  Total register package size
                      (            os9.d):01054                        ELSE      
     0003             (            os9.d):01055         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01056         R$X            EQU       4                   X Index register
     0006             (            os9.d):01057         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01058         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01059         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01060         R$Size         EQU       12                  Total register package size
                      (            os9.d):01061                        ENDC      
                      (            os9.d):01062         
                      (            os9.d):01063         * MD register masks
                      (            os9.d):01064         * 6309 definitions
     0080             (            os9.d):01065         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01066         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01067         
     0080             (            os9.d):01068         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01069         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01070         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01071         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01072         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01073         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01074         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01075         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01076         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01077         Sign           EQU       %10000000           sign bit
                      (            os9.d):01078         
                      (            os9.d):01079                        TTL       Error Code Definitions
                      (            os9.d):01080                        PAG       
                      (            os9.d):01081         ************************
                      (            os9.d):01082         * Error Code Definitions
                      (            os9.d):01083         *
                      (            os9.d):01084         * Basic09 Error Codes
                      (            os9.d):01085         *
                      (            os9.d):01086                        ORG       10
000A                  (            os9.d):01087         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01088         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01089         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01090         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01091         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01092         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01093         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01094         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01095         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01096         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01097         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01098         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01099         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01100         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01101         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01102         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01103         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01104         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01105         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01106         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01107         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01108         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01109         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01110         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01111         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01112         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01113         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01114         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01115         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01116         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01117         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01118         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01119         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01120         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01121         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01122         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01123         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01124         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01125         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01126         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01127         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01128         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01129         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01130         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01131         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01132         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01133         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01134         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01135         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01136         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01137         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01138         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01139         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01140         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01141         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01142         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01143         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01144         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01145         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01146         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01147         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01148         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01149         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01150         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01151         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01152         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01153         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01154         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01155         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01156         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01157         
                      (            os9.d):01158         *
                      (            os9.d):01159         * System Dependent Error Codes
                      (            os9.d):01160         *
                      (            os9.d):01161         
                      (            os9.d):01162         * Level 2 windowing error codes
                      (            os9.d):01163                        ORG       183
00B7                  (            os9.d):01164         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01165         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01166         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01167         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01168         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01169                        RMB       1                   reserved
00BD                  (            os9.d):01170         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01171         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01172         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01173         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01174         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01175         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01176         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01177         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01178         
00C5                  (            os9.d):01179         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01180         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01181         E$Alias        RMB       1
                      (            os9.d):01182         
                      (            os9.d):01183         
                      (            os9.d):01184         *
                      (            os9.d):01185         * Standard NitrOS-9 Error Codes
                      (            os9.d):01186         *
                      (            os9.d):01187                        ORG       200
00C8                  (            os9.d):01188         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01189         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01190         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01191         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01192         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01193         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01194         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01195         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01196         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01197         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01198         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01199         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01200                        RMB       1
00D5                  (            os9.d):01201         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01202         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01203         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01204         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01205         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01206         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01207         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01208         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01209         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01210                        RMB       1
00DF                  (            os9.d):01211         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01212         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01213         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01214                        RMB       1
00E2                  (            os9.d):01215         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01216         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01217         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01218         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01219         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01220         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01221         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01222         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01223         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01224         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01225         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01226         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01227         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01228         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01229                        RMB       $F0-.               reserved
00F0                  (            os9.d):01230         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01231         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01232         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01233         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01234         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01235         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01236         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01237         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01238         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01239         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01240         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01241         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01242         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01243         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01244         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01245         
                      (            os9.d):01246         
                      (            os9.d):01247                        IFGT      Level-2
                      (            os9.d):01248         ***************************
                      (            os9.d):01249         * Level 3 Defs
                      (            os9.d):01250         *
                      (            os9.d):01251         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01252         *
00FF                  (            os9.d):01253         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01254         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01255         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01256         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01257         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01258         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01259                        ENDC      
                      (            os9.d):01260         
                      (            os9.d):01261                        ENDC      
                      (      ../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
     00E0             (            scf.d):00222         PARMASK        EQU       %11100000
                      (            scf.d):00223         
                      (            scf.d):00224         * PD.BAU definitions
                      (            scf.d):00225         *
                      (            scf.d):00226         * Baud rate
     0000             (            scf.d):00227         B110           EQU       %00000000
     0001             (            scf.d):00228         B300           EQU       %00000001
     0002             (            scf.d):00229         B600           EQU       %00000010
     0003             (            scf.d):00230         B1200          EQU       %00000011
     0004             (            scf.d):00231         B2400          EQU       %00000100
     0005             (            scf.d):00232         B4800          EQU       %00000101
     0006             (            scf.d):00233         B9600          EQU       %00000110
     0007             (            scf.d):00234         B19200         EQU       %00000111
     0008             (            scf.d):00235         B38400         EQU       %00001000
     0009             (            scf.d):00236         B57600         EQU       %00001001
     000A             (            scf.d):00237         B115200        EQU       %00001010
                      (            scf.d):00238         * Word size
     0000             (            scf.d):00239         WORD8          EQU       %00000000
     0020             (            scf.d):00240         WORD7          EQU       %00100000
                      (            scf.d):00241         * Stop bits
     0000             (            scf.d):00242         STOP1          EQU       %00000000
     0010             (            scf.d):00243         STOP2          EQU       %00010000
                      (            scf.d):00244         
                      (            scf.d):00245                        ENDC      
                      (      ../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (      ../defsfile):00006                  use   coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
0026                  (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         ********************************
                      (           coco.d):00148         * Boot defs for NitrOS-9 Level 1
                      (           coco.d):00149         *
                      (           coco.d):00150         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00151         * system.
                      (           coco.d):00152         *
0004                  (           coco.d):00153         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE
                      (           coco.d):00156         
                      (           coco.d):00157         ******************************************
                      (           coco.d):00158         * Boot defs for NitrOS-9 Level 2 and above
                      (           coco.d):00159         *
                      (           coco.d):00160         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00161         * system.
                      (           coco.d):00162         *
     ED00             (           coco.d):00163         Bt.Start       SET       $ED00               Start address of the boot track in memory
     003B             (           coco.d):00164         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (           coco.d):00165         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (           coco.d):00166         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
                      (           coco.d):00167         
                      (           coco.d):00168                        ENDC
                      (           coco.d):00169         
                      (           coco.d):00170         * On the CoCo, the boot track is all of track 34
                      (           coco.d):00171         
     0022             (           coco.d):00172         Bt.Track       EQU       34                  Boot track
     0000             (           coco.d):00173         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (           coco.d):00174         
                      (           coco.d):00175         
     1080             (           coco.d):00176         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (           coco.d):00177         
                      (           coco.d):00178         
                      (           coco.d):00179                        IFEQ      Level-1
                      (           coco.d):00180         
                      (           coco.d):00181         *************************************************
                      (           coco.d):00182         *
                      (           coco.d):00183         * NitrOS-9 Level 1 Section
                      (           coco.d):00184         *
                      (           coco.d):00185         *************************************************
                      (           coco.d):00186         
0004                  (           coco.d):00187         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00188         
                      (           coco.d):00189                        ELSE      
                      (           coco.d):00190         
                      (           coco.d):00191         *************************************************
                      (           coco.d):00192         *
                      (           coco.d):00193         * NitrOS-9 Level 2 Section
                      (           coco.d):00194         *
                      (           coco.d):00195         *************************************************
                      (           coco.d):00196         
                      (           coco.d):00197         ****************************************
                      (           coco.d):00198         * Dynamic Address Translator Definitions
                      (           coco.d):00199         *
     0008             (           coco.d):00200         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00201         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00202         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00203         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00204         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00205         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00206         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00207         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00208         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00209         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00210         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00211         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00212         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00213         IOBlock        EQU       $3F
     003F             (           coco.d):00214         ROMBlock       EQU       $3F
     007F             (           coco.d):00215         IOAddr         EQU       $7F
     0001             (           coco.d):00216         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00217         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00218         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00219         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00220         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00221         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00222         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00223         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00224         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00225         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00226         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00227         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00228         
                      (           coco.d):00229         ***************************
                      (           coco.d):00230         * Color Computer 3 Specific
                      (           coco.d):00231         *
     0001             (           coco.d):00232         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00233         
                      (           coco.d):00234         ********************
                      (           coco.d):00235         * Hardware addresses
                      (           coco.d):00236         *
     FF00             (           coco.d):00237         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00238         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00239         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00240         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00241         
     0007             (           coco.d):00242         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00243         
                      (           coco.d):00244         * KrnBlk defines the block number of the 8K RAM block that is mapped to
                      (           coco.d):00245         * the top of CPU address space ($E000-$FFFF) for the system process, and
                      (           coco.d):00246         * which holds the Kernel. The top 2 pages of this CPU address space ($FFE0-
                      (           coco.d):00247         * $FFFF) has two special properties. Firstly, it contains the I/O space.
                      (           coco.d):00248         * Secondly, the parts that contain RAM map are not affected by the DAT
                      (           coco.d):00249         * mappings but, instead, *always* map that RAM to a fixed RAM block
                      (           coco.d):00250         * (KrnBlk). When a user process is mapped in, and requests enough memory,
                      (           coco.d):00251         * it will end up with its own block assigned for CPU address space $E000-
                      (           coco.d):00252         * $FFFF but the top of the address space is unusable by the user process:
                      (           coco.d):00253         * it still contains the I/O and the bit of RAM that's mapped to KrnBlk.
                      (           coco.d):00254         * Usually, the value of KrnBlk is fixed for a particular hardware design;
                      (           coco.d):00255         * For the COCO GIME, it's always $3F.
     003F             (           coco.d):00256         KrnBlk         SET       $3F
                      (           coco.d):00257         
                      (           coco.d):00258                        ENDC
                      (           coco.d):00259                        ENDC
                      (           coco.d):00260         
                      (/home/strick/go/s):00036                  use   cocovtio.d
                      (       cocovtio.d):00001                        IFNE      COCOVTIO.D-1
     0001             (       cocovtio.d):00002         COCOVTIO.D     SET       1
                      (       cocovtio.d):00003         
                      (       cocovtio.d):00004                        IFEQ      Level-1
                      (       cocovtio.d):00005         
                      (       cocovtio.d):00006         ********************************************************************
                      (       cocovtio.d):00007         * VTIODefs - Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00008         *
                      (       cocovtio.d):00009         * $Id$
                      (       cocovtio.d):00010         *
                      (       cocovtio.d):00011         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00012         * Comment
                      (       cocovtio.d):00013         * ------------------------------------------------------------------
                      (       cocovtio.d):00014         *          2004/11/29  P.Harvey-Smith.
                      (       cocovtio.d):00015         * Added symbolic defines for bits in V.CoLoad.
                      (       cocovtio.d):00016         *
                      (       cocovtio.d):00017         *          2004/12/02  P.Harvey-Smith.
                      (       cocovtio.d):00018         * Moved over all variables from co51.asm
                      (       cocovtio.d):00019         *
                      (       cocovtio.d):00020         *          2005/04/09  P.Harvey-Smith.
                      (       cocovtio.d):00021         * Decoded rest of the CoHR memory locations.
                      (       cocovtio.d):00022         *
                      (       cocovtio.d):00023         *              2005/04/24  P.Harvey-Smith.
                      (       cocovtio.d):00024         * Added variables for cursor flash, currently only implemented in co51
                      (       cocovtio.d):00025         *
                      (       cocovtio.d):00026                        NAM       VTIODefs  
                      (       cocovtio.d):00027                        TTL       Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00028         
                      (       cocovtio.d):00029         ********************
                      (       cocovtio.d):00030         * VTIO Static Memory
                      (       cocovtio.d):00031         *
                      (       cocovtio.d):00032                        ORG       V.SCF
0004                  (       cocovtio.d):00033         V.ScrnA        RMB       2                   (2) screen start address in system memory
0004                  (       cocovtio.d):00034         V.ScrnE        RMB       2                   (2) address of end of screen
0004                  (       cocovtio.d):00035         V.CrsrA        RMB       1                   (2) cursor address
0004                  (       cocovtio.d):00036         V.CrsAL        RMB       1                   cursor address low
0004                  (       cocovtio.d):00037         V.CChar        RMB       1                   value of character under cursor
0004                  (       cocovtio.d):00038         V.Mode         RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0004                  (       cocovtio.d):00039         V.NGChr        RMB       1                   number of additional characters to get
0004                  (       cocovtio.d):00040         V.RTAdd        RMB       2                   (2) return address after getting characters
0004                  (       cocovtio.d):00041         V.NChar        RMB       1                   character to process
0004                  (       cocovtio.d):00042         V.NChr2        RMB       1                   and the next one
                      (       cocovtio.d):00043                        RMB       1                   (I assume reserved for a 3rd parameter byte)
0004                  (       cocovtio.d):00044         V.Chr1         RMB       1                   same as under cursor character
0004                  (       cocovtio.d):00045         V.CColr        RMB       1                   cursor color
0004                  (       cocovtio.d):00046         V.Col          RMB       1                   number of columns for this screen
0004                  (       cocovtio.d):00047         V.Row          RMB       1                   number of rows
0004                  (       cocovtio.d):00048         V.Alpha        RMB       1                   0 when in alpha mode
0004                  (       cocovtio.d):00049         V.PIA1         RMB       1                   PIA1Base value
0004                  (       cocovtio.d):00050         V.Rdy          RMB       1                   device ready (see SS.DStat 0=not ready)
0004                  (       cocovtio.d):00051         V.CFlg1        RMB       1                   VDG display code values
0004                  (       cocovtio.d):00052         V.SBAdd        RMB       2                   (2) address of block screen is in
0004                  (       cocovtio.d):00053         V.GBuff        RMB       2                   allocation for graphics buffers (block#)
0004                  (       cocovtio.d):00054         V.AGBuf        RMB       4                   (2) additional graphics buffer
0004                  (       cocovtio.d):00055         V.FFMem        RMB       2                   Flood fill alloc'ed mem
0004                  (       cocovtio.d):00056         V.FFSPt        RMB       2                   Flood fill current stack pointer
0004                  (       cocovtio.d):00057         V.FFSTp        RMB       1                   Flood fill stack top
0004                  (       cocovtio.d):00058         V.FF6          RMB       1                   flood fill flag
0004                  (       cocovtio.d):00059         V.FFFlag       RMB       1                   Error in FloodFill - E$Write if FFill stack overflows, 0 if no error
0004                  (       cocovtio.d):00060         V.MTabl        RMB       2                   (2) address of mask table for pixels in byte
0004                  (       cocovtio.d):00061         V.PixBt        RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0004                  (       cocovtio.d):00062         V.GCrsX        RMB       1                   graphics cursor X value
0004                  (       cocovtio.d):00063         V.GCrsY        RMB       1                   graphics cursor Y
0004                  (       cocovtio.d):00064         V.Msk1         RMB       1                   mask byte 1
0004                  (       cocovtio.d):00065         V.Msk2         RMB       1                   mask byte 2 (00,55,AA,FF) Full byte Color Mask
0004                  (       cocovtio.d):00066         V.MCol         RMB       1                   Start pixel in a byte mask ($C0=4 color, $80=2 color)
0004                  (       cocovtio.d):00067         V.4A           RMB       1                   End pixel in a byte mask ($03=4 color,$01=2 color)
0004                  (       cocovtio.d):00068         V.PMask        RMB       1                   Full byte pixel mask for colors (i.e. $55, $CC etc)
0004                  (       cocovtio.d):00069         V.4C           RMB       1
0004                  (       cocovtio.d):00070         V.4D           RMB       1
0004                  (       cocovtio.d):00071         V.4E           RMB       1                   Flood Fill full byte color mask
0004                  (       cocovtio.d):00072         V.4F           RMB       1
0004                  (       cocovtio.d):00073         V.Caps         RMB       1                   caps lock info: $00=lower $FF=upper
0004                  (       cocovtio.d):00074         V.ClkCnt       RMB       1                   clock count ??
0004                  (       cocovtio.d):00075         V.WrChr        RMB       1                   character to write
0004                  (       cocovtio.d):00076         V.CurCo        RMB       1                   current CO-module in use
                      (       cocovtio.d):00077         * start of CoWP-specific static memory
0004                  (       cocovtio.d):00078         V.Co80X        RMB       1                   V.54
0004                  (       cocovtio.d):00079         V.Co80Y        RMB       1                   V.55
0004                  (       cocovtio.d):00080         V.ColPtr       RMB       1                   V.56
0004                  (       cocovtio.d):00081         V.RowPtr       RMB       1                   V.57
0004                  (       cocovtio.d):00082         V.C80X         RMB       1                   CoWP X position
0004                  (       cocovtio.d):00083         V.C80Y         RMB       1                   CoWP Y position
0004                  (       cocovtio.d):00084         V.Invers       RMB       1
                      (       cocovtio.d):00085         * end of CoWP-specific static memory
0004                  (       cocovtio.d):00086         V.DspVct       RMB       2                   vector to display screen
0004                  (       cocovtio.d):00087         V.CnvVct       RMB       2                   vector to X/Y to address conversion
0004                  (       cocovtio.d):00088         V.LKeyCd       RMB       1                   last key code
0004                  (       cocovtio.d):00089         V.2Key1        RMB       1                   2nd Key 1
0004                  (       cocovtio.d):00090         V.2Key2        RMB       1                   2nd Key 2
0004                  (       cocovtio.d):00091         V.2Key3        RMB       1                   2nd Key 3
0004                  (       cocovtio.d):00092         V.Key1         RMB       1                   Key 1
0004                  (       cocovtio.d):00093         V.Key2         RMB       1                   Key 2
0004                  (       cocovtio.d):00094         V.Key3         RMB       1                   Key 3
0004                  (       cocovtio.d):00095         V.ShftDn       RMB       1                   SHIFT/CTRL state
0004                  (       cocovtio.d):00096         V.CtrlDn       RMB       1                   CTRL key down
0004                  (       cocovtio.d):00097         V.KeyFlg       RMB       1                   key flag
0004                  (       cocovtio.d):00098         V.AltDwn       RMB       1                   ALT key down
0004                  (       cocovtio.d):00099         V.KySns        RMB       1                   key sense flags
0004                  (       cocovtio.d):00100         V.KySame       RMB       1                   key same as last flag
0004                  (       cocovtio.d):00101         V.KySnsF       RMB       1                   key sense flag
0004                  (       cocovtio.d):00102         V.Spcl         RMB       1
0004                  (       cocovtio.d):00103         V.KTblLC       RMB       1                   key table entry #
0004                  (       cocovtio.d):00104         V.6F           RMB       1                   ???
0004                  (       cocovtio.d):00105         V.COLoad       RMB       1                   CO-module loaded flags
0004                  (       cocovtio.d):00106         V.CFlag        RMB       1                   true lowercase flag $10=true, $00=false
0004                  (       cocovtio.d):00107         V.GrfDrvE      RMB       2                   GrfDrv entry point
0004                  (       cocovtio.d):00108         V.CoVDGE       RMB       2                   CoVDG entry point
0004                  (       cocovtio.d):00109         V.CoWPE        RMB       2                   CoWP entry point
0004                  (       cocovtio.d):00110         V.CoHRE        RMB       2                   CoHR entry point
0004                  (       cocovtio.d):00111         V.Co42E        RMB       2                   Co42 entry point
0004                  (       cocovtio.d):00112         V.CoVGAE       RMB       2                   CoVGA entry point
0004                  (       cocovtio.d):00113         V.Co80E        RMB       2                   Co80 entry point
0004                  (       cocovtio.d):00114         V.CoDPlusE     RMB       2                   CoDPlus entry point
0004                  (       cocovtio.d):00115         V.Flash        RMB       2                   Cursor flash routine address.
0004                  (       cocovtio.d):00116         v.FlashTime    RMB       1                   Cursor flash time
0004                  (       cocovtio.d):00117         v.FlashCount   RMB       1                   Cursor flash count
0004                  (       cocovtio.d):00118         V.NoFlash      RMB       1                   When this is non-zero do not flash cursor
                      (       cocovtio.d):00119         * If we make ClrBlk vector, throw it in here so the various comoduels, as well as VTIO,
                      (       cocovtio.d):00120         * can all use it (clearing text/graphics screens, clearing full width line (pure text or
                      (       cocovtio.d):00121         * CoHr/Co42 graphics lines), and possibly Clear to end of line could all use it.
0004                  (       cocovtio.d):00122         V.ClrBlk       RMB       2                   Vector to mini-stack blast clearing routine
0004                  (       cocovtio.d):00123         V.CpyBlk       RMB       2                   Vector to mini-stack blast copying routine
                      (       cocovtio.d):00124         * CoHR vars
0004                  (       cocovtio.d):00125         V.51ScrnA      RMB       2                   * Screen address.
0004                  (       cocovtio.d):00126         V.51XPos       RMB       1                   * X co-ordinate
0004                  (       cocovtio.d):00127         V.51YPos       RMB       1                   * Y co-ordinate
0004                  (       cocovtio.d):00128         V.51EscSeq     RMB       1                   * In escape sequence
0004                  (       cocovtio.d):00129         V.51ReverseFlag RMB       1                  * Reverse video flag
0004                  (       cocovtio.d):00130         V.51UnderlineFlag RMB       1                * Underline flag
0004                  (       cocovtio.d):00131         V.51CtrlDispatch RMB       2                 * Ctrl char dispatch address, currently processing
0004                  (       cocovtio.d):00132         V.51BytePixOffset RMB       1                * byte offset in screen line, of character X position        
0004                  (       cocovtio.d):00133         V.51OldCursorPosX RMB       1                * Position of old cursor before update        
0004                  (       cocovtio.d):00134         V.51OldCursorPosY RMB       1
0004                  (       cocovtio.d):00135         V.51CursorChanged RMB       1                * Has cursor position changed ? 1=yes,0=no
0004                  (       cocovtio.d):00136         V.51CursorOn   RMB       1                   * Is cursor on ? 1=yes 0=no                         
0004                  (       cocovtio.d):00137         V.51XORFlag    RMB       1                   * and data to screen (0) or Xor (1)                       
0004                  (       cocovtio.d):00138         V.51ScreenMask1 RMB       1                  * screen masks for drawing characters on screen         
0004                  (       cocovtio.d):00139         V.51ScreenMask2 RMB       1
                      (       cocovtio.d):00140         * End of CoHR vars
                      (       cocovtio.d):00141         **** Note these have to come at the end of the defs, or the keyboard ****
                      (       cocovtio.d):00142         **** code can clobber variables defined after these !                ****
0004                  (       cocovtio.d):00143         V.IBufH        RMB       1                   input buffer head
0004                  (       cocovtio.d):00144         V.IBufT        RMB       1                   input buffer tail
0004                  (       cocovtio.d):00145         V.InBuf        RMB       1                   input buffer ptr
0004                  (       cocovtio.d):00146         V.51End        RMB       1
                      (       cocovtio.d):00147                        RMB       250-.
0004                  (       cocovtio.d):00148         V.Last         EQU       .
                      (       cocovtio.d):00149         
                      (       cocovtio.d):00150         
                      (       cocovtio.d):00151         * Unknown for now
                      (       cocovtio.d):00152         *VD.FFMem rmb   2  (2) bottom of stack for flood fill
                      (       cocovtio.d):00153         *VD.FFSPt rmb   2  (2) flood fill stack pointer
                      (       cocovtio.d):00154         *VD.FFSTp rmb   2  (2) flood fill stack top pointer
                      (       cocovtio.d):00155         *VD.FF6   rmb   1   flood fill flag
                      (       cocovtio.d):00156         *VD.MCol2 rmb   1  color
                      (       cocovtio.d):00157         *VD.FF1   rmb   1  data for flood fill
                      (       cocovtio.d):00158         *VD.FF2   rmb   1  data for flood fill
                      (       cocovtio.d):00159         *VD.FFMsk rmb   1  flood fill mask
                      (       cocovtio.d):00160         *VD.FFFlg rmb   1  flood fill flag
                      (       cocovtio.d):00161         *VD.Palet rmb   16 (16) current palette values
                      (       cocovtio.d):00162         *VD.PlFlg rmb   1  initialized to $08 by L00DB, and then unused!
                      (       cocovtio.d):00163         
                      (       cocovtio.d):00164         *
                      (       cocovtio.d):00165         * Defs for V.COLoad flags.
                      (       cocovtio.d):00166         * 
                      (       cocovtio.d):00167         
0004                  (       cocovtio.d):00168         ModCoVDG       EQU       %00000010           CoVDG, Built-in VDG 32x16.
0004                  (       cocovtio.d):00169         ModCoWP        EQU       %00000100           CoWP, WordPak, 80x25
0004                  (       cocovtio.d):00170         ModCoHR        EQU       %00001000           CoHR, PMODE 4 51x25 text
0004                  (       cocovtio.d):00171         ModCo42        EQU       %00010000           Co42, PMODE 4 42x25 text
0004                  (       cocovtio.d):00172         ModCoVGA       EQU       %00100000           CoVGA, 64x32 text
0004                  (       cocovtio.d):00173         ModCo80        EQU       %01000000           Co80, CRT9128 WordPak, 80x25
0004                  (       cocovtio.d):00174         ModCoDPlus     EQU       %10000000           Dragon Plus, 6545, 80x24
                      (       cocovtio.d):00175         
                      (       cocovtio.d):00176         *
                      (       cocovtio.d):00177         * Defs for cursor flash counter
                      (       cocovtio.d):00178         *
                      (       cocovtio.d):00179         
0004                  (       cocovtio.d):00180         CFlash50hz     EQU       25                  * 50Hz flash counter
0004                  (       cocovtio.d):00181         CFlash60Hz     EQU       30                  * 60Hz flash counter
                      (       cocovtio.d):00182         
                      (       cocovtio.d):00183                        ELSE
                      (       cocovtio.d):00184                        
                      (       cocovtio.d):00185         ********************************************************************
                      (       cocovtio.d):00186         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00187         *
                      (       cocovtio.d):00188         * $Id$
                      (       cocovtio.d):00189         *
                      (       cocovtio.d):00190         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00191         * Comment
                      (       cocovtio.d):00192         * ------------------------------------------------------------------
                      (       cocovtio.d):00193         *          2004/07/18  Boisy G. Pitre
                      (       cocovtio.d):00194         * Started from systype
                      (       cocovtio.d):00195         
                      (       cocovtio.d):00196                        NAM       VTIODefs
                      (       cocovtio.d):00197                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00198         
                      (       cocovtio.d):00199         ****************
                      (       cocovtio.d):00200         * Window Devices
                      (       cocovtio.d):00201         *
                      (       cocovtio.d):00202                        ORG       $FF9F
FF9F                  (       cocovtio.d):00203         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (       cocovtio.d):00204         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (       cocovtio.d):00205         A.W1           RMB       1                   $FFA1
FFA2                  (       cocovtio.d):00206         A.W2           RMB       1                   $FFA2
FFA3                  (       cocovtio.d):00207         A.W3           RMB       1                   $FFA3
FFA4                  (       cocovtio.d):00208         A.W4           RMB       1                   $FFA4
FFA5                  (       cocovtio.d):00209         A.W5           RMB       1                   $FFA5
FFA6                  (       cocovtio.d):00210         A.W6           RMB       1                   $FFA6
FFA7                  (       cocovtio.d):00211         A.W7           RMB       1                   $FFA7
FFA8                  (       cocovtio.d):00212         A.W8           RMB       1                   $FFA8
FFA9                  (       cocovtio.d):00213         A.W9           RMB       1                   $FFA9
FFAA                  (       cocovtio.d):00214         A.W10          RMB       1                   $FFAA
FFAB                  (       cocovtio.d):00215         A.W11          RMB       1                   $FFAB
FFAC                  (       cocovtio.d):00216         A.W12          RMB       1                   $FFAC
FFAD                  (       cocovtio.d):00217         A.W13          RMB       1                   $FFAD
FFAE                  (       cocovtio.d):00218         A.W14          RMB       1                   $FFAE
FFAF                  (       cocovtio.d):00219         A.W15          RMB       1                   $FFAF
                      (       cocovtio.d):00220         
                      (       cocovtio.d):00221         **********************************
                      (       cocovtio.d):00222         * Pointer Device Packet Definition
                      (       cocovtio.d):00223         *
                      (       cocovtio.d):00224                        ORG       0
0000                  (       cocovtio.d):00225         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (       cocovtio.d):00226         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (       cocovtio.d):00227         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (       cocovtio.d):00228                        RMB       2                   reserved
0005                  (       cocovtio.d):00229         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (       cocovtio.d):00230         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (       cocovtio.d):00231         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (       cocovtio.d):00232         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (       cocovtio.d):00233         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (       cocovtio.d):00234         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (       cocovtio.d):00235         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (       cocovtio.d):00236         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (       cocovtio.d):00237         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (       cocovtio.d):00238         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (       cocovtio.d):00239                        RMB       2                   Reserved
0012                  (       cocovtio.d):00240         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (       cocovtio.d):00241         Pt.BDY         RMB       2                   Button down Y value
0016                  (       cocovtio.d):00242         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (       cocovtio.d):00243         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (       cocovtio.d):00244         Pt.AcX         RMB       2                   Actual X Value
001A                  (       cocovtio.d):00245         Pt.AcY         RMB       2                   Actual Y Value
001C                  (       cocovtio.d):00246         Pt.WRX         RMB       2                   Window Relative X
001E                  (       cocovtio.d):00247         Pt.WRY         RMB       2                   Window Relative Y
     0020             (       cocovtio.d):00248         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (       cocovtio.d):00249         
                      (       cocovtio.d):00250         **************************
                      (       cocovtio.d):00251         * window regions for mouse
                      (       cocovtio.d):00252         *
     0000             (       cocovtio.d):00253         WR.Cntnt       EQU       0                   content region
     0001             (       cocovtio.d):00254         WR.Cntrl       EQU       1                   control region
     0002             (       cocovtio.d):00255         WR.OfWin       EQU       2                   off window
                      (       cocovtio.d):00256         
                      (       cocovtio.d):00257         *************************************
                      (       cocovtio.d):00258         * Standard system get/put buffer defs
                      (       cocovtio.d):00259         *
                      (       cocovtio.d):00260         *
                      (       cocovtio.d):00261         * system group numbers
                      (       cocovtio.d):00262         *
                      (       cocovtio.d):00263                        ORG       200
00C8                  (       cocovtio.d):00264         Grp.Fnt        RMB       1                   font group
00C9                  (       cocovtio.d):00265         Grp.Clip       RMB       1                   clipboard group
00CA                  (       cocovtio.d):00266         Grp.Ptr        RMB       1                   pointer group
00CB                  (       cocovtio.d):00267         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (       cocovtio.d):00268         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (       cocovtio.d):00269         Grp.Pat6       RMB       1                   pattern group 16 color
                      (       cocovtio.d):00270         *
                      (       cocovtio.d):00271         * font buffer numbers
                      (       cocovtio.d):00272         *
                      (       cocovtio.d):00273                        ORG       1
0001                  (       cocovtio.d):00274         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (       cocovtio.d):00275         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (       cocovtio.d):00276         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (       cocovtio.d):00277         *
                      (       cocovtio.d):00278         * pattern buffer numbers
                      (       cocovtio.d):00279         *
                      (       cocovtio.d):00280                        ORG       1
0001                  (       cocovtio.d):00281         Pat.Dot        RMB       1
0002                  (       cocovtio.d):00282         Pat.Vrt        RMB       1
0003                  (       cocovtio.d):00283         Pat.Hrz        RMB       1
0004                  (       cocovtio.d):00284         Pat.XHtc       RMB       1
0005                  (       cocovtio.d):00285         Pat.LSnt       RMB       1
0006                  (       cocovtio.d):00286         Pat.RSnt       RMB       1
0007                  (       cocovtio.d):00287         Pat.SDot       RMB       1
0008                  (       cocovtio.d):00288         Pat.BDot       RMB       1
                      (       cocovtio.d):00289         *
                      (       cocovtio.d):00290         * pointer buffer numbers
                      (       cocovtio.d):00291         *
                      (       cocovtio.d):00292                        ORG       1
0001                  (       cocovtio.d):00293         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (       cocovtio.d):00294         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (       cocovtio.d):00295         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (       cocovtio.d):00296         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (       cocovtio.d):00297         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (       cocovtio.d):00298         Ptr.Txt        RMB       1                   Text pointer
0007                  (       cocovtio.d):00299         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (       cocovtio.d):00300         
                      (       cocovtio.d):00301         **********************
                      (       cocovtio.d):00302         * KeyDrv Entry Points
                      (       cocovtio.d):00303                        ORG       0
0000                  (       cocovtio.d):00304         K$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00305         K$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00306         K$FnKey        RMB       3                   get function key states
0009                  (       cocovtio.d):00307         K$RdKey        RMB       3                   get key states
                      (       cocovtio.d):00308         
                      (       cocovtio.d):00309         **********************
                      (       cocovtio.d):00310         * JoyDrv Entry Points
                      (       cocovtio.d):00311                        ORG       0
0000                  (       cocovtio.d):00312         J$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00313         J$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00314         J$MsBtn        RMB       3                   get mouse button states
0009                  (       cocovtio.d):00315         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (       cocovtio.d):00316         J$JyBtn        RMB       3                   get joystick button states
000F                  (       cocovtio.d):00317         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00318         
                      (       cocovtio.d):00319         **********************
                      (       cocovtio.d):00320         * SndDrv Entry Points
                      (       cocovtio.d):00321                        ORG       0
0000                  (       cocovtio.d):00322         S$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00323         S$GetStt       RMB       3                   joystick termination
0006                  (       cocovtio.d):00324         S$SetStt       RMB       3                   joystick termination
0009                  (       cocovtio.d):00325         S$Term         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00326         
                      (       cocovtio.d):00327         ********************************
                      (       cocovtio.d):00328         * Window/Menu Bar Data Structure
                      (       cocovtio.d):00329         *
                      (       cocovtio.d):00330         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (       cocovtio.d):00331         * for use in the high level windowing package.
                      (       cocovtio.d):00332         *
     000A             (       cocovtio.d):00333         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (       cocovtio.d):00334         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (       cocovtio.d):00335         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (       cocovtio.d):00336         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (       cocovtio.d):00337         *
                      (       cocovtio.d):00338         * Menu Item Descriptor : (MN.ITEMS)
                      (       cocovtio.d):00339         * one required for each item within the menu
                      (       cocovtio.d):00340         *
                      (       cocovtio.d):00341                        ORG       0
0000                  (       cocovtio.d):00342         MI.TTL         RMB       MXTTLEN             item name
000F                  (       cocovtio.d):00343         MI.ENBL        RMB       1                   enable flag
0010                  (       cocovtio.d):00344         MI.RES         RMB       5                   reserved bytes
     0015             (       cocovtio.d):00345         MI.SIZ         EQU       .                   size of menu item descriptor
                      (       cocovtio.d):00346         *
                      (       cocovtio.d):00347         * Menu Descriptor :
                      (       cocovtio.d):00348         * one for each menu on the manu bar
                      (       cocovtio.d):00349         * each is pointed to by MB.MPTR below
                      (       cocovtio.d):00350         *
                      (       cocovtio.d):00351                        ORG       0
0000                  (       cocovtio.d):00352         MN.TTL         RMB       MXTTLEN             menu title
000F                  (       cocovtio.d):00353         MN.ID          RMB       1                   menu id number (1-255)
0010                  (       cocovtio.d):00354         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (       cocovtio.d):00355         MN.NITS        RMB       1                   number of items in menu
0012                  (       cocovtio.d):00356         MN.ENBL        RMB       1                   enable flag
0013                  (       cocovtio.d):00357         MN.RES         RMB       2                   reserved bytes
0015                  (       cocovtio.d):00358         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (       cocovtio.d):00359         MN.SIZ         EQU       .                   size of menu descriptor
                      (       cocovtio.d):00360         *
                      (       cocovtio.d):00361         * Window Descriptor:
                      (       cocovtio.d):00362         * one required for each application in a framed window
                      (       cocovtio.d):00363         *
                      (       cocovtio.d):00364                        ORG       0
0000                  (       cocovtio.d):00365         WN.TTL         RMB       20                  title of window for title bar
0014                  (       cocovtio.d):00366         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (       cocovtio.d):00367         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (       cocovtio.d):00368         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (       cocovtio.d):00369         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (       cocovtio.d):00370         WN.RES         RMB       7                   reserved bytes
0020                  (       cocovtio.d):00371         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (       cocovtio.d):00372         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (       cocovtio.d):00373         
                      (       cocovtio.d):00374         *************************
                      (       cocovtio.d):00375         * Window Type Definitions
                      (       cocovtio.d):00376         *
                      (       cocovtio.d):00377         * To be used in setting up the border of the window in
                      (       cocovtio.d):00378         * the SS.WnSel SETSTAT
                      (       cocovtio.d):00379         *
                      (       cocovtio.d):00380                        ORG       0
0000                  (       cocovtio.d):00381         WT.NBox        RMB       1                   No Box
0001                  (       cocovtio.d):00382         WT.FWin        RMB       1                   Framed Window
0002                  (       cocovtio.d):00383         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (       cocovtio.d):00384         WT.SBox        RMB       1                   Shadowed Box
0004                  (       cocovtio.d):00385         WT.DBox        RMB       1                   Double Box
0005                  (       cocovtio.d):00386         WT.PBox        RMB       1                   Plain Box
                      (       cocovtio.d):00387         
                      (       cocovtio.d):00388         *************************************
                      (       cocovtio.d):00389         * Pre-Defined Menu IDs for the system
                      (       cocovtio.d):00390         *
                      (       cocovtio.d):00391                        ORG       1
0001                  (       cocovtio.d):00392         MId.Mov        RMB       1                   move box
0002                  (       cocovtio.d):00393         MId.Cls        RMB       1                   close box
0003                  (       cocovtio.d):00394         MId.Grw        RMB       1                   grow box
0004                  (       cocovtio.d):00395         MId.SUp        RMB       1                   scroll up
0005                  (       cocovtio.d):00396         MId.SDn        RMB       1                   scroll down
0006                  (       cocovtio.d):00397         MId.SRt        RMB       1                   scroll right
0007                  (       cocovtio.d):00398         MId.SLt        RMB       1                   scroll left
0008                  (       cocovtio.d):00399         MId.Chr        RMB       1                   character was depressed
                      (       cocovtio.d):00400                        ORG       20
0014                  (       cocovtio.d):00401         MId.Tdy        RMB       1                   Tandy menu
0015                  (       cocovtio.d):00402         MId.Fil        RMB       1                   Files Menu
0016                  (       cocovtio.d):00403         MId.Edt        RMB       1                   Edit Menu
0017                  (       cocovtio.d):00404         MId.Sty        RMB       1                   Styles menu
0018                  (       cocovtio.d):00405         MId.Fnt        RMB       1                   Font menu
                      (       cocovtio.d):00406         
                      (       cocovtio.d):00407         
                      (       cocovtio.d):00408         ******************************************************************************
                      (       cocovtio.d):00409         ******************************************************************************
                      (       cocovtio.d):00410         **                                                                          **
                      (       cocovtio.d):00411         ** NitrOS-9 Windowing system Global data definitions                        **
                      (       cocovtio.d):00412         **                                                                          **
                      (       cocovtio.d):00413         ******************************************************************************
                      (       cocovtio.d):00414         ******************************************************************************
                      (       cocovtio.d):00415         **                                                                          **
                      (       cocovtio.d):00416         ** System memory block 0 layout:                                            **
                      (       cocovtio.d):00417         **                                                                          **
                      (       cocovtio.d):00418         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (       cocovtio.d):00419         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (       cocovtio.d):00420         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (       cocovtio.d):00421         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (       cocovtio.d):00422         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (       cocovtio.d):00423         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (       cocovtio.d):00424         ** $0010-$001F : unused (User definable)                                    **
                      (       cocovtio.d):00425         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (       cocovtio.d):00426         ** $0100-$011F : Task usage table                                           **
                      (       cocovtio.d):00427         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (       cocovtio.d):00428         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (       cocovtio.d):00429         ** $0300-$03FF : system's system call dispatch table                        **
                      (       cocovtio.d):00430         ** $0400-$04FF : user's system call dispatch table                          **
                      (       cocovtio.d):00431         ** $0500-$05FF : process descriptor pointer table                           **
                      (       cocovtio.d):00432         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (       cocovtio.d):00433         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (       cocovtio.d):00434         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (       cocovtio.d):00435         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (       cocovtio.d):00436         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (       cocovtio.d):00437         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (       cocovtio.d):00438         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (       cocovtio.d):00439         ** $1248-$127F : ????                                                       **
                      (       cocovtio.d):00440         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (       cocovtio.d):00441         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (       cocovtio.d):00442         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (       cocovtio.d):00443         **                                                                          **
                      (       cocovtio.d):00444         ******************************************************************************
                      (       cocovtio.d):00445         ******************************************************************************
                      (       cocovtio.d):00446         
                      (       cocovtio.d):00447         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (       cocovtio.d):00448         MaxLines       EQU       25                  Max. Y coord text value
     0000             (       cocovtio.d):00449         Meg            SET       false               "true" if 1 or 2 meg machine
                      (       cocovtio.d):00450         
     0000             (       cocovtio.d):00451         COMP           EQU       0                   composite monitor
     0001             (       cocovtio.d):00452         RGB            EQU       1                   RGB Analog monitor 
     0002             (       cocovtio.d):00453         MONO           EQU       2                   monochrome monitor
                      (       cocovtio.d):00454         
     0001             (       cocovtio.d):00455         Monitor        SET       RGB
                      (       cocovtio.d):00456         
                      (       cocovtio.d):00457         * Global definitions
     0001             (       cocovtio.d):00458         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (       cocovtio.d):00459         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (       cocovtio.d):00460         CapsLck        EQU       %00000100           Capslock enabled
     0280             (       cocovtio.d):00461         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (       cocovtio.d):00462                      IFEQ      MaxLines-25
     00C6             (       cocovtio.d):00463         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00464                      ELSE      
0019                  (       cocovtio.d):00465         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00466                      ENDC      
                      (       cocovtio.d):00467         
                      (       cocovtio.d):00468         *****************************************************************************
                      (       cocovtio.d):00469         * Static memory area for each window (VTIO/TC9IO)
                      (       cocovtio.d):00470         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (       cocovtio.d):00471         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (       cocovtio.d):00472         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (       cocovtio.d):00473         * May have to have smaller limit for text to gfx screens, as it will run much
                      (       cocovtio.d):00474         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (       cocovtio.d):00475         *
                      (       cocovtio.d):00476         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (       cocovtio.d):00477         * V.SCF is to be resolved properly in pass 1!!
                      (       cocovtio.d):00478                        ORG       V.SCF
001D                  (       cocovtio.d):00479         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (       cocovtio.d):00480         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (       cocovtio.d):00481         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (       cocovtio.d):00482         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (       cocovtio.d):00483         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (       cocovtio.d):00484         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (       cocovtio.d):00485         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (       cocovtio.d):00486         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (       cocovtio.d):00487         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (       cocovtio.d):00488         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (       cocovtio.d):00489         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (       cocovtio.d):00490         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (       cocovtio.d):00491                        RMB       1                   unused                                       $2A
002B                  (       cocovtio.d):00492         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (       cocovtio.d):00493         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (       cocovtio.d):00494         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (       cocovtio.d):00495         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (       cocovtio.d):00496         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (       cocovtio.d):00497         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (       cocovtio.d):00498         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (       cocovtio.d):00499         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (       cocovtio.d):00500         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (       cocovtio.d):00501         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (       cocovtio.d):00502         CC3Parm        RMB       128-.               global parameter area
0080                  (       cocovtio.d):00503         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (       cocovtio.d):00504         CC3DSiz        EQU       .
                      (       cocovtio.d):00505         
                      (       cocovtio.d):00506         *****************************************************************************
                      (       cocovtio.d):00507         * GrfInt/WindInt global memory area
                      (       cocovtio.d):00508         * This area sits in system block 0 from $1000 to $10ff
     1000             (       cocovtio.d):00509         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (       cocovtio.d):00510                        ORG       0
0000                  (       cocovtio.d):00511         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (       cocovtio.d):00512         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (       cocovtio.d):00513         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (       cocovtio.d):00514         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (       cocovtio.d):00515         *g0003    rmb   2          NEW: UNUSED
0005                  (       cocovtio.d):00516         g0005          RMB       2                   Temp save in Windint RG
0007                  (       cocovtio.d):00517         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (       cocovtio.d):00518         G.MonTyp       RMB       1                   monitor type
     000A             (       cocovtio.d):00519         g000A          EQU       .                   Old label for compatibility
000A                  (       cocovtio.d):00520         G.CrDvFl       RMB       1  Are we current device flag (only set when all
                      (       cocovtio.d):00521         *                           Parms have been moved to Dev Mem)
                      (       cocovtio.d):00522         *                           0=We are not on our device
                      (       cocovtio.d):00523         *                           1=We are the current device
                      (       cocovtio.d):00524         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (       cocovtio.d):00525         *                           whether or not to update GIME regs themselves
                      (       cocovtio.d):00526         *                           If not current device, they don't.)
000B                  (       cocovtio.d):00527         G.WinType      RMB       1                   current device's V.TYPE
000C                  (       cocovtio.d):00528         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (       cocovtio.d):00529         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (       cocovtio.d):00530         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (       cocovtio.d):00531         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (       cocovtio.d):00532         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (       cocovtio.d):00533         G.BelVec       RMB       2                   BELL routine vector
0019                  (       cocovtio.d):00534         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (       cocovtio.d):00535         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (       cocovtio.d):00536         G.BelTnF       RMB       1                   BELL tone flag
001D                  (       cocovtio.d):00537         g001D          RMB       3
0020                  (       cocovtio.d):00538         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (       cocovtio.d):00539         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (       cocovtio.d):00540         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (       cocovtio.d):00541         *                           00000010 : VDGInt found
                      (       cocovtio.d):00542         *                           10000000 : GrfDrv found
0025                  (       cocovtio.d):00543         g0025          RMB       1
0026                  (       cocovtio.d):00544         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (       cocovtio.d):00545         *         IFEQ  TC9-true
                      (       cocovtio.d):00546         *CurLght  rmb   1          current keyboard light settings
                      (       cocovtio.d):00547         *         ELSE  
0027                  (       cocovtio.d):00548         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (       cocovtio.d):00549         *         ENDC  
0028                  (       cocovtio.d):00550         G.LKeyCd       RMB       1                   last keyboard code
0029                  (       cocovtio.d):00551         G.KyRept       RMB       1                   key repeat counter
                      (       cocovtio.d):00552         * A secondary 3 key table (same format as g002D below)
002A                  (       cocovtio.d):00553         G.2Key1        RMB       1                   $2A
002B                  (       cocovtio.d):00554         G.2Key2        RMB       1                   $2B
002C                  (       cocovtio.d):00555         G.2Key3        RMB       1
                      (       cocovtio.d):00556         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (       cocovtio.d):00557         * than 3 are hit, the last key is overwritten with the very last key down that
                      (       cocovtio.d):00558         * was checked. Format for all three is the same as the PIA column/row byte @
                      (       cocovtio.d):00559         * KeyFlag below.
002D                  (       cocovtio.d):00560         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (       cocovtio.d):00561         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (       cocovtio.d):00562         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (       cocovtio.d):00563         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (       cocovtio.d):00564         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (       cocovtio.d):00565         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (       cocovtio.d):00566         *                           %00000111-Column # (Output, 0-7)
                      (       cocovtio.d):00567         *                           %00111000-Row # (Input, 0-6)
0033                  (       cocovtio.d):00568         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (       cocovtio.d):00569         G.KySns        RMB       1                   key sense byte
0035                  (       cocovtio.d):00570         G.KySame       RMB       1                   same key flag
0036                  (       cocovtio.d):00571         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (       cocovtio.d):00572                        RMB       1
0038                  (       cocovtio.d):00573         g0038          RMB       1                   grfdrv initialized flag
0039                  (       cocovtio.d):00574                        RMB       2
003B                  (       cocovtio.d):00575         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (       cocovtio.d):00576         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (       cocovtio.d):00577         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (       cocovtio.d):00578         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (       cocovtio.d):00579         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (       cocovtio.d):00580         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (       cocovtio.d):00581         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (       cocovtio.d):00582         *         IFEQ  TC9-true
                      (       cocovtio.d):00583         *KeyParm  rmb   1          keyboard command parameter byte
                      (       cocovtio.d):00584         *         ELSE  
0063                  (       cocovtio.d):00585         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (       cocovtio.d):00586         *         ENDC  
0064                  (       cocovtio.d):00587         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (       cocovtio.d):00588         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (       cocovtio.d):00589         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (       cocovtio.d):00590         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (       cocovtio.d):00591         G.CoTble       RMB       6                   co-module table ($68)
006E                  (       cocovtio.d):00592         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (       cocovtio.d):00593         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (       cocovtio.d):00594         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (       cocovtio.d):00595         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (       cocovtio.d):00596         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (       cocovtio.d):00597         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (       cocovtio.d):00598         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (       cocovtio.d):00599         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (       cocovtio.d):00600         g00BD          RMB       1                   Current screen type for work window table
00BE                  (       cocovtio.d):00601         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (       cocovtio.d):00602         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (       cocovtio.d):00603         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (       cocovtio.d):00604         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (       cocovtio.d):00605         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (       cocovtio.d):00606         G.MsSig        RMB       1                   mouse signal flag
00C7                  (       cocovtio.d):00607         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (       cocovtio.d):00608         g00D7          RMB       9
00E0                  (       cocovtio.d):00609         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (       cocovtio.d):00610         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (       cocovtio.d):00611         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (       cocovtio.d):00612         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (       cocovtio.d):00613         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (       cocovtio.d):00614         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (       cocovtio.d):00615         
                      (       cocovtio.d):00616         *****************************************************************************
                      (       cocovtio.d):00617         * GrfDrv global memory data definitions
                      (       cocovtio.d):00618         * This area sits in system block 0 from $1100 to $119E
     1100             (       cocovtio.d):00619         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (       cocovtio.d):00620                        ORG       0
0000                  (       cocovtio.d):00621         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (       cocovtio.d):00622         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (       cocovtio.d):00623         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (       cocovtio.d):00624         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (       cocovtio.d):00625         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (       cocovtio.d):00626         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (       cocovtio.d):00627         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (       cocovtio.d):00628         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (       cocovtio.d):00629         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (       cocovtio.d):00630         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (       cocovtio.d):00631         *                             overlay width has been copied
000B                  (       cocovtio.d):00632         gr000B         RMB       1
000C                  (       cocovtio.d):00633         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (       cocovtio.d):00634         gr000E         RMB       1
000F                  (       cocovtio.d):00635         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (       cocovtio.d):00636         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (       cocovtio.d):00637         gr0012         RMB       6
0018                  (       cocovtio.d):00638         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (       cocovtio.d):00639         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (       cocovtio.d):00640         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (       cocovtio.d):00641         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (       cocovtio.d):00642         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (       cocovtio.d):00643         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (       cocovtio.d):00644         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (       cocovtio.d):00645         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (       cocovtio.d):00646         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (       cocovtio.d):00647         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (       cocovtio.d):00648         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (       cocovtio.d):00649         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (       cocovtio.d):00650         gr002C         RMB       2
002E                  (       cocovtio.d):00651         gr002E         RMB       2                   current window table entry
0030                  (       cocovtio.d):00652         gr0030         RMB       2                   current screen table ptr
0032                  (       cocovtio.d):00653         gr0032         RMB       1                   Last block # we used for buffers
0033                  (       cocovtio.d):00654         gr0033         RMB       2                   Last offset we used for buffers
0035                  (       cocovtio.d):00655         gr0035         RMB       1                   group
0036                  (       cocovtio.d):00656         gr0036         RMB       2                   offset
0038                  (       cocovtio.d):00657         gr0038         RMB       1                   group returned (new)
0039                  (       cocovtio.d):00658         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (       cocovtio.d):00659         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (       cocovtio.d):00660         gr003B         RMB       2                   end of vars ptr?
003D                  (       cocovtio.d):00661         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (       cocovtio.d):00662         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (       cocovtio.d):00663         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (       cocovtio.d):00664         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (       cocovtio.d):00665         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (       cocovtio.d):00666         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (       cocovtio.d):00667         gr0047         RMB       2                   'Working' X coordinate
0049                  (       cocovtio.d):00668         gr0049         RMB       2                   'Working' Y coordinate
004B                  (       cocovtio.d):00669         gr004B         RMB       2                   current X
004D                  (       cocovtio.d):00670         gr004D         RMB       2                   current Y
004F                  (       cocovtio.d):00671         gr004F         RMB       2                   X Size (in bytes)
0051                  (       cocovtio.d):00672         gr0051         RMB       2                   Y Size (in bytes)
0053                  (       cocovtio.d):00673         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (       cocovtio.d):00674         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (       cocovtio.d):00675         gr0057         RMB       1                   group
0058                  (       cocovtio.d):00676         gr0058         RMB       1                   buffer #
0059                  (       cocovtio.d):00677         gr0059         RMB       1                   save switch for overlay
005A                  (       cocovtio.d):00678         gr005A         RMB       1                   PRN
005B                  (       cocovtio.d):00679         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (       cocovtio.d):00680         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (       cocovtio.d):00681         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (       cocovtio.d):00682         Gr.STYMk       RMB       1                   STY marker
0061                  (       cocovtio.d):00683         gr0061         RMB       1                   foreground RGB data
0062                  (       cocovtio.d):00684         gr0062         RMB       1                   background RGB data
0063                  (       cocovtio.d):00685         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (       cocovtio.d):00686         gr0064         RMB       2                   PSet vector
0066                  (       cocovtio.d):00687         gr0066         RMB       2                   pset offset
0068                  (       cocovtio.d):00688         gr0068         RMB       2                   LSet vector
006A                  (       cocovtio.d):00689         gr006A         RMB       2                   max X co-ordinate
006C                  (       cocovtio.d):00690         gr006C         RMB       2                   max Y co-ordinate
006E                  (       cocovtio.d):00691         gr006E         RMB       2                   X pixel count
0070                  (       cocovtio.d):00692         gr0070         RMB       2                   Y pixel count
0072                  (       cocovtio.d):00693         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (       cocovtio.d):00694         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (       cocovtio.d):00695         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (       cocovtio.d):00696         gr0077         RMB       2                   Vector for right direction FFill
0079                  (       cocovtio.d):00697         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (       cocovtio.d):00698         gr007A         RMB       2                   Vector for left direction FFill
007C                  (       cocovtio.d):00699         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (       cocovtio.d):00700         gr007D         RMB       1                   buffer block #
007E                  (       cocovtio.d):00701         gr007E         RMB       2                   buffer offset #
0080                  (       cocovtio.d):00702         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (       cocovtio.d):00703         gr0082         RMB       3                   3 byte extended screen address
0085                  (       cocovtio.d):00704         gr0085         RMB       2                   temp
0087                  (       cocovtio.d):00705         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (       cocovtio.d):00706         gr0097         RMB       1                   temp
0098                  (       cocovtio.d):00707         gr0098         RMB       1                   temp
                      (       cocovtio.d):00708         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (       cocovtio.d):00709         gr0099         RMB       2                   temp
                      (       cocovtio.d):00710         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (       cocovtio.d):00711         gr009B         RMB       1                   counter temp
009C                  (       cocovtio.d):00712         gr009C         RMB       1
009D                  (       cocovtio.d):00713         gr009D         RMB       2                   offset to buffer in block
009F                  (       cocovtio.d):00714         gr009F         RMB       1
00A0                  (       cocovtio.d):00715         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (       cocovtio.d):00716         gr00A1         RMB       2                   vector routine for (changes lots)
                      (       cocovtio.d):00717         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (       cocovtio.d):00718         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (       cocovtio.d):00719         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (       cocovtio.d):00720         gr00A7         RMB       2
00A9                  (       cocovtio.d):00721         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (       cocovtio.d):00722         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (       cocovtio.d):00723         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (       cocovtio.d):00724         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (       cocovtio.d):00725         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (       cocovtio.d):00726         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (       cocovtio.d):00727         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (       cocovtio.d):00728         gr00B3         RMB       1                   temp variable grfdrv
00B4                  (       cocovtio.d):00729         gr00B4         RMB       1                   temp variable grfdrv
00B5                  (       cocovtio.d):00730         gr00B5         RMB       1                   regW for grfdrv
00B6                  (       cocovtio.d):00731         gr00B6         RMB       1
00B7                  (       cocovtio.d):00732         gr00B7         RMB       2
00B9                  (       cocovtio.d):00733         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (       cocovtio.d):00734         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (       cocovtio.d):00735         gr00BD         RMB       2                   previously used in grfdrv at $B6
00BF                  (       cocovtio.d):00736         gr00BF         RMB       256-.
                      (       cocovtio.d):00737         * GPLoad buffer - $1200 in system block 0
0100                  (       cocovtio.d):00738         GPBuf          RMB       72                  common move buffer for gpload/get/put
     0048             (       cocovtio.d):00739         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (       cocovtio.d):00740         
                      (       cocovtio.d):00741         *****************************************************************************
                      (       cocovtio.d):00742         * Window table entry structure
                      (       cocovtio.d):00743         * These tables sit in system block 0 and there is 1 for every window init'd
                      (       cocovtio.d):00744         * including any overlay windows.
     0020             (       cocovtio.d):00745         MaxWind        EQU       32                  maximum allowable window tables
     1290             (       cocovtio.d):00746         WinBase        EQU       $1290               base address to start of window tables
                      (       cocovtio.d):00747                        ORG       -$10
FFF0                  (       cocovtio.d):00748         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (       cocovtio.d):00749         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (       cocovtio.d):00750         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (       cocovtio.d):00751         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (       cocovtio.d):00752         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (       cocovtio.d):00753         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (       cocovtio.d):00754         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (       cocovtio.d):00755         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (       cocovtio.d):00756         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (       cocovtio.d):00757         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (       cocovtio.d):00758         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (       cocovtio.d):00759         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (       cocovtio.d):00760         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (       cocovtio.d):00761         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (       cocovtio.d):00762         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (       cocovtio.d):00763         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (       cocovtio.d):00764         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (       cocovtio.d):00765         Wt.Back        RMB       1                   background palette #                         $07
0008                  (       cocovtio.d):00766         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (       cocovtio.d):00767         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (       cocovtio.d):00768         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (       cocovtio.d):00769         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (       cocovtio.d):00770         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (       cocovtio.d):00771         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (       cocovtio.d):00772         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (       cocovtio.d):00773         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (       cocovtio.d):00774         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (       cocovtio.d):00775         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (       cocovtio.d):00776         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (       cocovtio.d):00777         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (       cocovtio.d):00778         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (       cocovtio.d):00779         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (       cocovtio.d):00780         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24,0-191)                 $1D
001F                  (       cocovtio.d):00781         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (       cocovtio.d):00782         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (       cocovtio.d):00783         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (       cocovtio.d):00784         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (       cocovtio.d):00785         * NOTE: The following default settings are what the window was initialized
                      (       cocovtio.d):00786         *       with, and thus are the MAXIMUM start/size the window can handle
                      (       cocovtio.d):00787         *       until it is restarted (DWEnd & DWSet)
                      (       cocovtio.d):00788         *       They also appear to be used in WindInt to determine the coords &
                      (       cocovtio.d):00789         *       sizes for control+content regions
0026                  (       cocovtio.d):00790         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (       cocovtio.d):00791         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (       cocovtio.d):00792         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (       cocovtio.d):00793         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (       cocovtio.d):00794         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (       cocovtio.d):00795         Wt.Siz         EQU       .+$10
                      (       cocovtio.d):00796         
                      (       cocovtio.d):00797         *****************************************************************************
                      (       cocovtio.d):00798         * Screen table entrys
                      (       cocovtio.d):00799         * These tables sit in system block 0 base=$1A80
                      (       cocovtio.d):00800         
     0010             (       cocovtio.d):00801         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (       cocovtio.d):00802         STblBse        EQU       $1A80               base address of screen tables
                      (       cocovtio.d):00803                        ORG       0
0000                  (       cocovtio.d):00804         St.Sty         RMB       1                   Screen type                         $00
0001                  (       cocovtio.d):00805         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (       cocovtio.d):00806         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (       cocovtio.d):00807         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (       cocovtio.d):00808         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (       cocovtio.d):00809         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (       cocovtio.d):00810         St.Back        RMB       1                   Background palette register #       $07
0008                  (       cocovtio.d):00811         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (       cocovtio.d):00812         St.Res         RMB       7                   UNUSED???                           $09
                      (       cocovtio.d):00813         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (       cocovtio.d):00814         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (       cocovtio.d):00815         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (       cocovtio.d):00816         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
0010                  (       cocovtio.d):00817         St.Pals        RMB       16                  Palette register contents           $10
     0020             (       cocovtio.d):00818         St.Siz         EQU       .
                      (       cocovtio.d):00819         
                      (       cocovtio.d):00820         *****************************************************************************
                      (       cocovtio.d):00821         * Graphics buffer tables
                      (       cocovtio.d):00822         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (       cocovtio.d):00823         * data.
                      (       cocovtio.d):00824                        ORG       0
0000                  (       cocovtio.d):00825         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (       cocovtio.d):00826         Grf.Off        RMB       2                   back block header offset            $01
0003                  (       cocovtio.d):00827         Grf.Grp        RMB       1                   group #                             $03
0004                  (       cocovtio.d):00828         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (       cocovtio.d):00829         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (       cocovtio.d):00830         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (       cocovtio.d):00831         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (       cocovtio.d):00832         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (       cocovtio.d):00833         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (       cocovtio.d):00834         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (       cocovtio.d):00835         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (       cocovtio.d):00836         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (       cocovtio.d):00837         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (       cocovtio.d):00838         Grf.Siz        EQU       .                   $20
                      (       cocovtio.d):00839         
                      (       cocovtio.d):00840         *****************************************************************************
                      (       cocovtio.d):00841         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (       cocovtio.d):00842         * $1075-$0176
                      (       cocovtio.d):00843         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (       cocovtio.d):00844                        ORG       0
0000                  (       cocovtio.d):00845         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (       cocovtio.d):00846         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (       cocovtio.d):00847         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (       cocovtio.d):00848         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (       cocovtio.d):00849         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (       cocovtio.d):00850         Gt.BClr        RMB       1                   Background color                               $08
0009                  (       cocovtio.d):00851         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (       cocovtio.d):00852         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (       cocovtio.d):00853         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (       cocovtio.d):00854         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (       cocovtio.d):00855         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (       cocovtio.d):00856         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (       cocovtio.d):00857         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (       cocovtio.d):00858         GTabSz         EQU       .
                      (       cocovtio.d):00859         
                      (       cocovtio.d):00860         *****************************************************************************
                      (       cocovtio.d):00861         * This table is located in the graphics table memory and is offset from
                      (       cocovtio.d):00862         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (       cocovtio.d):00863         * WindInt.
                      (       cocovtio.d):00864         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (       cocovtio.d):00865         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (       cocovtio.d):00866         *  COMBINATION EVERY TIME
                      (       cocovtio.d):00867                        ORG       $0240
0240                  (       cocovtio.d):00868                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (       cocovtio.d):00869                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (       cocovtio.d):00870                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (       cocovtio.d):00871                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (       cocovtio.d):00872         
                      (       cocovtio.d):00873         *****************************************************************************
                      (       cocovtio.d):00874         * WindInt menu handling table entry definition
                      (       cocovtio.d):00875                        ORG       0
0000                  (       cocovtio.d):00876         MnuXNum        RMB       1                   menu #
0001                  (       cocovtio.d):00877         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (       cocovtio.d):00878         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (       cocovtio.d):00879                        RMB       1                   unused?
     0004             (       cocovtio.d):00880         MnuHSiz        EQU       .
                      (       cocovtio.d):00881         
                      (       cocovtio.d):00882         *****************************************************************************
                      (       cocovtio.d):00883         * Character binary switches
     0080             (       cocovtio.d):00884         TChr           EQU       %10000000           transparent characters
     0040             (       cocovtio.d):00885         Under          EQU       %01000000           underline characters
     0020             (       cocovtio.d):00886         Bold           EQU       %00100000           bold characters
     0010             (       cocovtio.d):00887         Prop           EQU       %00010000           proportional spacing of characters
     0008             (       cocovtio.d):00888         Scale          EQU       %00001000           automatic window scaling
     0004             (       cocovtio.d):00889         Invers         EQU       %00000100           inverse characters
     0002             (       cocovtio.d):00890         NoCurs         EQU       %00000010           no cursor display
     0001             (       cocovtio.d):00891         Protect        EQU       %00000001           device window protection
                      (       cocovtio.d):00892         
                      (       cocovtio.d):00893         *****************************************************************************
                      (       cocovtio.d):00894         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (       cocovtio.d):00895         Current        EQU       $ff                 Current screen
                      (       cocovtio.d):00896         *         equ   1          640x200x2
                      (       cocovtio.d):00897         *         equ   2          320x200x4
                      (       cocovtio.d):00898         *         equ   3          640x200x4
                      (       cocovtio.d):00899         *         equ   4          320x200x16
                      (       cocovtio.d):00900         *         equ   $85        80 column text
                      (       cocovtio.d):00901         *         equ   $86        40 column text
                      (       cocovtio.d):00902         
                      (       cocovtio.d):00903         *************************************
                      (       cocovtio.d):00904         * Window default palette color codes
                      (       cocovtio.d):00905         *
                      (       cocovtio.d):00906                        ORG       0
0000                  (       cocovtio.d):00907         White.         RMB       1
0001                  (       cocovtio.d):00908         Blue.          RMB       1
0002                  (       cocovtio.d):00909         Black.         RMB       1
0003                  (       cocovtio.d):00910         Green.         RMB       1
0004                  (       cocovtio.d):00911         Red.           RMB       1
0005                  (       cocovtio.d):00912         Yellow.        RMB       1
0006                  (       cocovtio.d):00913         Magenta.       RMB       1
0007                  (       cocovtio.d):00914         Cyan.          RMB       1
                      (       cocovtio.d):00915         
                      (       cocovtio.d):00916                        ENDC      
                      (       cocovtio.d):00917                        ENDC      
                      (/home/strick/go/s):00037                  ENDC
                      (/home/strick/go/s):00038         
     0009             (/home/strick/go/s):00039         Edtn     equ   9
     0005             (/home/strick/go/s):00040         Vrsn     equ   5
                      (/home/strick/go/s):00041         
                      (/home/strick/go/s):00042         *------------------------------------------------------------
                      (/home/strick/go/s):00043         *
                      (/home/strick/go/s):00044         * Start of module
                      (/home/strick/go/s):00045         *
0000 87CD0207000DC185 (/home/strick/go/s):00046                  mod   len,name,Systm+Objct,ReEnt+Vrsn,Init,0
     F9019C0000
                      (/home/strick/go/s):00047         
000D 436C6F63EB       (/home/strick/go/s):00048         name     fcs   "Clock"
0012 09               (/home/strick/go/s):00049                  fcb   Edtn
                      (/home/strick/go/s):00050         
                      (/home/strick/go/s):00051         *
                      (/home/strick/go/s):00052         * Table to set up Service Calls:
                      (/home/strick/go/s):00053         *
0013 15               (/home/strick/go/s):00054         NewSvc   fcb   F$Time
0014 0156             (/home/strick/go/s):00055                  fdb   F.Time-*-2
0016 27               (/home/strick/go/s):00056                  fcb   F$VIRQ
0017 00D7             (/home/strick/go/s):00057                  fdb   F.VIRQ-*-2
0019 1E               (/home/strick/go/s):00058                  fcb   F$Alarm
001A 0119             (/home/strick/go/s):00059                  fdb   F.ALARM-*-2
001C 16               (/home/strick/go/s):00060                  fcb   F$STime
001D 0161             (/home/strick/go/s):00061                  fdb   F.STime-*-2
001F 80               (/home/strick/go/s):00062                  fcb   $80        end of service call installation table
                      (/home/strick/go/s):00063         
                      (/home/strick/go/s):00064         *---------------------------------------------------------
                      (/home/strick/go/s):00065         * IRQ Handling starts here.
                      (/home/strick/go/s):00066         *
                      (/home/strick/go/s):00067         * Caveat: There may not be a stack at this point, so avoid using one.
                      (/home/strick/go/s):00068         *         Stack is set up by the kernel between here and SvcVIRQ.
                      (/home/strick/go/s):00069         *
0020 B6FF92           (/home/strick/go/s):00070         SvcIRQ   lda   >IRQEnR    Get GIME IRQ Status and save it.
0023 9AAF             (/home/strick/go/s):00071                  ora   <D.IRQS
0025 97AF             (/home/strick/go/s):00072                  sta   <D.IRQS
0027 8508             (/home/strick/go/s):00073                  bita  #$08       Check for clock interrupt
0029 270A             (/home/strick/go/s):00074                  beq   NoClock
002B 84F7             (/home/strick/go/s):00075                  anda  #^$08      Drop clock interrupt
002D 97AF             (/home/strick/go/s):00076                  sta   <D.IRQS
002F 9EAD             (/home/strick/go/s):00077                  ldx   <D.VIRQ    Set VIRQ routine to be executed
0031 0F3F             (/home/strick/go/s):00078                  clr   <D.QIRQ    ---x IS clock IRQ
0033 2008             (/home/strick/go/s):00079                  bra   ContIRQ
                      (/home/strick/go/s):00080         
0035 308D009B         (/home/strick/go/s):00081         NoClock  leax  DoPoll,pcr If not clock IRQ, just poll IRQ source
                      (/home/strick/go/s):00082                  IFNE  H6309
                      (/home/strick/go/s):00083                  oim              #$FF,<D.QIRQ    ---x set flag to NOT clock IRQ
                      (/home/strick/go/s):00084                  ELSE
0039 86FF             (/home/strick/go/s):00085                  lda   #$FF
003B 973F             (/home/strick/go/s):00086                  sta   <D.QIRQ
                      (/home/strick/go/s):00087                  ENDC
003D 9FCE             (/home/strick/go/s):00088         ContIRQ  stx   <D.SvcIRQ
003F 6E9F00E8         (/home/strick/go/s):00089                  jmp   [D.XIRQ]   Chain through Kernel to continue IRQ handling
                      (/home/strick/go/s):00090         
                      (/home/strick/go/s):00091         *------------------------------------------------------------
                      (/home/strick/go/s):00092         *
                      (/home/strick/go/s):00093         * IRQ handling re-enters here on VSYNC IRQ.
                      (/home/strick/go/s):00094         *
                      (/home/strick/go/s):00095         * - Count down VIRQ timers, mark ones that are done
                      (/home/strick/go/s):00096         * - Call DoPoll/DoToggle to service VIRQs and IRQs and reset GIME
                      (/home/strick/go/s):00097         * - Call Keyboard scan
                      (/home/strick/go/s):00098         * - Update time variables
                      (/home/strick/go/s):00099         * - At end of minute, check alarm
                      (/home/strick/go/s):00100         *
0043 4F               (/home/strick/go/s):00101         SvcVIRQ  clra             Flag if we find any VIRQs to service
0044 3402             (/home/strick/go/s):00102                  pshs  a
0046 109EB0           (/home/strick/go/s):00103                  ldy   <D.CLTb    Get address of VIRQ table
0049 201A             (/home/strick/go/s):00104                  bra   virqent
                      (/home/strick/go/s):00105         
     004B             (/home/strick/go/s):00106         virqloop equ   *
                      (/home/strick/go/s):00107                  IFGT  Level-2
                      (/home/strick/go/s):00108                  ldd   2,y        Get Level 3 extended map type
                      (/home/strick/go/s):00109                  orcc  #IntMasks
                      (/home/strick/go/s):00110                  sta   >$0643
                      (/home/strick/go/s):00111                  stb   >$0645
                      (/home/strick/go/s):00112                  std   >DAT.Regs+1
                      (/home/strick/go/s):00113                  andcc  #^IntMasks
                      (/home/strick/go/s):00114                  ENDC
                      (/home/strick/go/s):00115         
004B EC84             (/home/strick/go/s):00116                  ldd   Vi.Cnt,x   Decrement tick count
                      (/home/strick/go/s):00117                  IFNE  H6309
                      (/home/strick/go/s):00118                  decd             --- subd #1
                      (/home/strick/go/s):00119                  ELSE
004D 830001           (/home/strick/go/s):00120                  subd  #$0001
                      (/home/strick/go/s):00121                  ENDC
0050 2611             (/home/strick/go/s):00122                  bne   notzero    Is this one done?
0052 A604             (/home/strick/go/s):00123                  lda   Vi.Stat,x  Should we reset?
0054 2B03             (/home/strick/go/s):00124                  bmi   doreset
0056 1700CF           (/home/strick/go/s):00125                  lbsr  DelVIRQ    No, delete this entry
0059 8A01             (/home/strick/go/s):00126         doreset  ora   #$01       Mark this VIRQ as triggered.
005B A704             (/home/strick/go/s):00127                  sta   Vi.Stat,x
005D 8680             (/home/strick/go/s):00128                  lda   #$80       Add VIRQ as interrupt source
005F A7E4             (/home/strick/go/s):00129                  sta   ,s
0061 EC02             (/home/strick/go/s):00130                  ldd   Vi.Rst,x   Reset from Reset count.
0063 ED84             (/home/strick/go/s):00131         notzero  std   Vi.Cnt,x
0065 AEA1             (/home/strick/go/s):00132         virqent  ldx   ,y++
0067 26E2             (/home/strick/go/s):00133                  bne   virqloop
                      (/home/strick/go/s):00134         
                      (/home/strick/go/s):00135                  IFGT  Level-2
                      (/home/strick/go/s):00136                  puls  d
                      (/home/strick/go/s):00137                  orcc  #Carry
                      (/home/strick/go/s):00138                  stb   >$0643
                      (/home/strick/go/s):00139                  stb   >DAT.Regs+1
                      (/home/strick/go/s):00140                  incb
                      (/home/strick/go/s):00141                  stb   >$0645
                      (/home/strick/go/s):00142                  stb   >DAT.Regs+1
                      (/home/strick/go/s):00143                  andcc  #^IntMasks
                      (/home/strick/go/s):00144                  ELSE
0069 3502             (/home/strick/go/s):00145                  puls  a          Get VIRQ status flag: high bit set if VIRQ
                      (/home/strick/go/s):00146                  ENDC
                      (/home/strick/go/s):00147         
006B 9AAF             (/home/strick/go/s):00148                  ora   <D.IRQS    Check to see if other hardware IRQ pending.
006D 85B7             (/home/strick/go/s):00149                  bita  #%10110111 Any V/IRQ interrupts pending?
006F 2704             (/home/strick/go/s):00150                  beq   toggle
                      (/home/strick/go/s):00151                  IFGT  Level-2
                      (/home/strick/go/s):00152                  lbsr  DoPoll     Yes, go service them.
                      (/home/strick/go/s):00153                  ELSE
0071 8D61             (/home/strick/go/s):00154                  bsr   DoPoll     Yes, go service them.
                      (/home/strick/go/s):00155                  ENDC
0073 2002             (/home/strick/go/s):00156                  bra   KbdCheck
     0075             (/home/strick/go/s):00157         toggle   equ   *
                      (/home/strick/go/s):00158                  IFGT  Level-2
                      (/home/strick/go/s):00159                  lbsr  DoToggle   No, toggle GIME anyway
                      (/home/strick/go/s):00160                  ELSE
0075 8D63             (/home/strick/go/s):00161                  bsr   DoToggle   No, toggle GIME anyway
                      (/home/strick/go/s):00162                  ENDC
                      (/home/strick/go/s):00163         
     0077             (/home/strick/go/s):00164         KbdCheck equ   *
                      (/home/strick/go/s):00165                  IFGT  Level-2
                      (/home/strick/go/s):00166                  lda   >$0643     grab current map type
                      (/home/strick/go/s):00167                  ldb   >$0645
                      (/home/strick/go/s):00168                  pshs  d           save it
                      (/home/strick/go/s):00169                  orcc  #IntMasks   IRQs off
                      (/home/strick/go/s):00170                  lda   >$0660      SCF local memory ---x
                      (/home/strick/go/s):00171                  sta   >$0643      into DAT image ---x
                      (/home/strick/go/s):00172                  sta   >DAT.Regs+1 and into RAM ---x
                      (/home/strick/go/s):00173                  inca
                      (/home/strick/go/s):00174                  sta   >$0645
                      (/home/strick/go/s):00175                  sta   >DAT.Regs+2 map in SCF, CC3IO, WindInt, etc.
                      (/home/strick/go/s):00176                  ENDC
                      (/home/strick/go/s):00177         
0077 AD9F00B2         (/home/strick/go/s):00178                  jsr   [>D.AltIRQ] go update mouse, gfx cursor, keyboard, etc.
                      (/home/strick/go/s):00179         
                      (/home/strick/go/s):00180                  IFGT  Level-2
                      (/home/strick/go/s):00181                  puls  d           restore original map type ---x
                      (/home/strick/go/s):00182                  orcc  #IntMasks
                      (/home/strick/go/s):00183                  sta   >$0643      into system DAT image ---x
                      (/home/strick/go/s):00184                  stb   >$0645
                      (/home/strick/go/s):00185                  std   >DAT.Regs+1 and into RAM ---x
                      (/home/strick/go/s):00186                  andcc  #$AF
                      (/home/strick/go/s):00187                  ENDC
                      (/home/strick/go/s):00188         
007B 0A2E             (/home/strick/go/s):00189                  dec   <D.Tick    End of second?
007D 2651             (/home/strick/go/s):00190                  bne   VIRQend    No, skip time update and alarm check
007F 863C             (/home/strick/go/s):00191                  lda   #TkPerSec  Reset tick count
0081 972E             (/home/strick/go/s):00192                  sta   <D.Tick
                      (/home/strick/go/s):00193         
                      (/home/strick/go/s):00194         * ATD: Modified to call real time clocks on every minute ONLY.
0083 0C2D             (/home/strick/go/s):00195                  inc   <D.Sec     go up one second
0085 962D             (/home/strick/go/s):00196                  lda   <D.Sec     grab current second
0087 813C             (/home/strick/go/s):00197                  cmpa  #60        End of minute?
0089 2545             (/home/strick/go/s):00198                  blo   VIRQend    No, skip time update and alarm check
008B 0F2D             (/home/strick/go/s):00199                  clr   <D.Sec     Reset second count to zero
                      (/home/strick/go/s):00200         
                      (/home/strick/go/s):00201         *
                      (/home/strick/go/s):00202         * Call GetTime entry point in Clock2
                      (/home/strick/go/s):00203         *
008D 9EB6             (/home/strick/go/s):00204                  ldx   <D.Clock2  get entry point to Clock2
008F AD03             (/home/strick/go/s):00205                  jsr   $03,x      call GetTime entry point
                      (/home/strick/go/s):00206         
0091 FC1015           (/home/strick/go/s):00207         NoGet    ldd   >WGlobal+G.AlPID
0094 2F3A             (/home/strick/go/s):00208                  ble   VIRQend    Quit if no Alarm set
0096 FC1012           (/home/strick/go/s):00209                  ldd   >WGlobal+G.AlPckt+3 Does Hour/Minute agree?
0099 10932B           (/home/strick/go/s):00210                  cmpd  <D.Hour
009C 2632             (/home/strick/go/s):00211                  bne   VIRQend
009E FC1010           (/home/strick/go/s):00212                  ldd   >WGlobal+G.AlPckt+1 Does Month/Day agree?
00A1 109329           (/home/strick/go/s):00213                  cmpd  <D.Month
00A4 262A             (/home/strick/go/s):00214                  bne   VIRQend
00A6 F6100F           (/home/strick/go/s):00215                  ldb   >WGlobal+G.AlPckt+0 Does Year agree?
00A9 D128             (/home/strick/go/s):00216                  cmpb  <D.Year
00AB 2623             (/home/strick/go/s):00217                  bne   VIRQend
00AD FC1015           (/home/strick/go/s):00218                  ldd   >WGlobal+G.AlPID
00B0 10830001         (/home/strick/go/s):00219                  cmpd  #1
00B4 2705             (/home/strick/go/s):00220                  beq   checkbel
00B6 103F08           (/home/strick/go/s):00221                  os9   F$Send
00B9 2006             (/home/strick/go/s):00222                  bra   endalarm
00BB D62D             (/home/strick/go/s):00223         checkbel ldb   <D.Sec     Sound bell for 15 seconds
00BD C4F0             (/home/strick/go/s):00224                  andb  #$F0
00BF 2708             (/home/strick/go/s):00225                  beq   dobell
00C1 CCFFFF           (/home/strick/go/s):00226         endalarm ldd   #$FFFF
00C4 FD1015           (/home/strick/go/s):00227                  std   >WGlobal+G.AlPID
00C7 2007             (/home/strick/go/s):00228                  bra   VIRQend
00C9 BE1017           (/home/strick/go/s):00229         dobell   ldx   >WGlobal+G.BelVec
00CC 2702             (/home/strick/go/s):00230                  beq   VIRQend
00CE AD84             (/home/strick/go/s):00231                  jsr   ,x
00D0 6E9F00E0         (/home/strick/go/s):00232         VIRQend  jmp   [>D.Clock] Jump to kernel's timeslice routine
                      (/home/strick/go/s):00233         
                      (/home/strick/go/s):00234         *------------------------------------------------------------
                      (/home/strick/go/s):00235         * Interrupt polling and GIME reset code
                      (/home/strick/go/s):00236         *
                      (/home/strick/go/s):00237         
                      (/home/strick/go/s):00238         *
                      (/home/strick/go/s):00239         * Call [D.Poll] until all interrupts have been handled
                      (/home/strick/go/s):00240         *
00D4                  (/home/strick/go/s):00241         Dopoll
                      (/home/strick/go/s):00242                  IFGT  Level-2
                      (/home/strick/go/s):00243                  lda   >$0643     Level 3: get map type
                      (/home/strick/go/s):00244                  ldb   >$0645
                      (/home/strick/go/s):00245                  pshs  d          save for later
                      (/home/strick/go/s):00246                  ENDC
00D4                  (/home/strick/go/s):00247         Dopoll.i
00D4 AD9F0026         (/home/strick/go/s):00248                  jsr   [>D.Poll]  Call poll routine
00D8 24FA             (/home/strick/go/s):00249                  bcc   DoPoll.i   Until error (error -> no interrupt found)
                      (/home/strick/go/s):00250         
                      (/home/strick/go/s):00251                  IFGT  Level-2
                      (/home/strick/go/s):00252                  puls  d
                      (/home/strick/go/s):00253                  orcc  #IntMasks
                      (/home/strick/go/s):00254                  sta   >$0643
                      (/home/strick/go/s):00255                  stb   >$0645
                      (/home/strick/go/s):00256                  std   >DAT.Regs+1
                      (/home/strick/go/s):00257                  andcc  #^IntMasks
                      (/home/strick/go/s):00258                  ENDC
                      (/home/strick/go/s):00259         
                      (/home/strick/go/s):00260         *
                      (/home/strick/go/s):00261         * Reset GIME to avoid missed IRQs
                      (/home/strick/go/s):00262         *
00DA 86FE             (/home/strick/go/s):00263         DoToggle lda   #^GI.Toggl Mask off CART* bit
00DC 94AF             (/home/strick/go/s):00264                  anda  <D.IRQS
00DE 97AF             (/home/strick/go/s):00265                  sta   <D.IRQS
00E0 9692             (/home/strick/go/s):00266                  lda   <D.IRQER   Get current enable register status
00E2 1F89             (/home/strick/go/s):00267                  tfr   a,b
00E4 84FE             (/home/strick/go/s):00268                  anda  #^GI.Toggl Mask off CART* bit
00E6 CA01             (/home/strick/go/s):00269                  orb   #GI.Toggl  --- ensure that 60Hz IRQ's are always enabled
00E8 B7FF92           (/home/strick/go/s):00270                  sta   >IRQEnR    Disable CART
00EB F7FF92           (/home/strick/go/s):00271                  stb   >IRQEnR    Enable CART
00EE 5F               (/home/strick/go/s):00272                  clrb
00EF 39               (/home/strick/go/s):00273                  rts
                      (/home/strick/go/s):00274         
                      (/home/strick/go/s):00275         
                      (/home/strick/go/s):00276         *------------------------------------------------------------
                      (/home/strick/go/s):00277         *
                      (/home/strick/go/s):00278         * Handle F$VIRQ system call
                      (/home/strick/go/s):00279         *
00F0 3401             (/home/strick/go/s):00280         F.VIRQ   pshs  cc
00F2 1A50             (/home/strick/go/s):00281                  orcc  #IntMasks  Disable interrupts
00F4 109EB0           (/home/strick/go/s):00282                  ldy   <D.CLTb    Address of VIRQ table
00F7 9E24             (/home/strick/go/s):00283                  ldx   <D.Init    Address of INIT
00F9 E60C             (/home/strick/go/s):00284                  ldb   PollCnt,x  Number of polling table entries from INIT
00FB AE44             (/home/strick/go/s):00285                  ldx   R$X,u      Zero means delete entry
00FD 271B             (/home/strick/go/s):00286                  beq   RemVIRQ
                      (/home/strick/go/s):00287                  IFGT  Level-2
                      (/home/strick/go/s):00288                  bra   FindVIRQ   ---x
                      (/home/strick/go/s):00289         
00FF                  (/home/strick/go/s):00290         v.loop   leay  4,y        ---x
                      (/home/strick/go/s):00291                  ENDC
00FF AEA1             (/home/strick/go/s):00292         FindVIRQ ldx   ,y++       Is VIRQ entry null?
0101 2709             (/home/strick/go/s):00293                  beq   AddVIRQ    If yes, add entry here
0103 5A               (/home/strick/go/s):00294                  decb
0104 26F9             (/home/strick/go/s):00295                  bne   FindVIRQ
0106 3501             (/home/strick/go/s):00296                  puls  cc
0108 53               (/home/strick/go/s):00297                  comb
0109 C6CA             (/home/strick/go/s):00298                  ldb   #E$Poll
010B 39               (/home/strick/go/s):00299                  rts
                      (/home/strick/go/s):00300         
010C                  (/home/strick/go/s):00301         AddVIRQ
                      (/home/strick/go/s):00302                  IFGT  Level-2
                      (/home/strick/go/s):00303                  ldx   R$Y,u
                      (/home/strick/go/s):00304                  stx   ,y
                      (/home/strick/go/s):00305                  lda   >$0643
                      (/home/strick/go/s):00306                  ldb   >$0645
                      (/home/strick/go/s):00307                  std   2,y
                      (/home/strick/go/s):00308                  ELSE
010C 313E             (/home/strick/go/s):00309                  leay  -2,y       point to first null VIRQ entry
010E AE46             (/home/strick/go/s):00310                  ldx   R$Y,u
0110 AFA4             (/home/strick/go/s):00311                  stx   ,y
                      (/home/strick/go/s):00312                  ENDC
0112 10AE41           (/home/strick/go/s):00313                  ldy   R$D,u
0115 10AF84           (/home/strick/go/s):00314                  sty   ,x
0118 200A             (/home/strick/go/s):00315                  bra   virqexit
                      (/home/strick/go/s):00316         
                      (/home/strick/go/s):00317                  IFGT  Level-2
011A                  (/home/strick/go/s):00318         v.chk    leay  4,y
011A                  (/home/strick/go/s):00319         RemVIRQ  ldx   ,y
                      (/home/strick/go/s):00320                  ELSE
011A AEA1             (/home/strick/go/s):00321         RemVIRQ  ldx   ,y++
                      (/home/strick/go/s):00322                  ENDC
011C 2706             (/home/strick/go/s):00323                  beq   virqexit
011E AC46             (/home/strick/go/s):00324                  cmpx  R$Y,u
0120 26F8             (/home/strick/go/s):00325                  bne   RemVIRQ
0122 8D04             (/home/strick/go/s):00326                  bsr   DelVIRQ
0124 3501             (/home/strick/go/s):00327         virqexit puls  cc
0126 5F               (/home/strick/go/s):00328                  clrb
0127 39               (/home/strick/go/s):00329                  rts
                      (/home/strick/go/s):00330         
0128 3430             (/home/strick/go/s):00331         DelVIRQ  pshs  x,y
012A                  (/home/strick/go/s):00332         DelVLup
                      (/home/strick/go/s):00333                  IFGT  Level-2
                      (/home/strick/go/s):00334                  ldq              ,y++          move entries up in table
                      (/home/strick/go/s):00335                  leay  2,y
                      (/home/strick/go/s):00336                  stq              -8,y
                      (/home/strick/go/s):00337                  bne   DelVLup
                      (/home/strick/go/s):00338                  puls  x,y,pc
                      (/home/strick/go/s):00339                  ELSE
012A AEA1             (/home/strick/go/s):00340                  ldx   ,y++       move entries up in table
012C AF3C             (/home/strick/go/s):00341                  stx   -4,y
012E 26FA             (/home/strick/go/s):00342                  bne   DelVLup
0130 3530             (/home/strick/go/s):00343                  puls  x,y
0132 313E             (/home/strick/go/s):00344                  leay  -2,y
0134 39               (/home/strick/go/s):00345                  rts
                      (/home/strick/go/s):00346                  ENDC
                      (/home/strick/go/s):00347         
                      (/home/strick/go/s):00348         *------------------------------------------------------------
                      (/home/strick/go/s):00349         *
                      (/home/strick/go/s):00350         * Handle F$Alarm call
                      (/home/strick/go/s):00351         *
0135 8E100F           (/home/strick/go/s):00352         F.Alarm  ldx   #WGlobal+G.AlPckt
0138 EC41             (/home/strick/go/s):00353                  ldd   R$D,u
013A 2603             (/home/strick/go/s):00354                  bne   DoAlarm
013C ED06             (/home/strick/go/s):00355                  std   G.AlPID-G.AlPckt,x Erase F$Alarm PID, Signal.
013E 39               (/home/strick/go/s):00356                  rts
                      (/home/strick/go/s):00357         
013F 4D               (/home/strick/go/s):00358         DoAlarm  tsta             If PID != 0, set alarm for this process
0140 2606             (/home/strick/go/s):00359                  bne   SetAlarm
0142 10830001         (/home/strick/go/s):00360                  cmpd  #1         1 -> Set system-wide alarm
0146 2614             (/home/strick/go/s):00361                  bne   GetAlarm
0148 ED06             (/home/strick/go/s):00362         SetAlarm std   G.AlPID-G.AlPckt,x
014A 109E50           (/home/strick/go/s):00363                  ldy   <D.Proc
014D A626             (/home/strick/go/s):00364                  lda   P$Task,y   Move from process task
014F D6D0             (/home/strick/go/s):00365                  ldb   <D.SysTsk  To system task
0151 AE44             (/home/strick/go/s):00366                  ldx   R$X,u      From address given in X
0153 CE100F           (/home/strick/go/s):00367                  ldu   #WGlobal+G.AlPckt
0156 108E0005         (/home/strick/go/s):00368                  ldy   #5         Move 5 bytes
015A 2020             (/home/strick/go/s):00369                  bra   FMove
                      (/home/strick/go/s):00370         
015C 10830002         (/home/strick/go/s):00371         GetAlarm cmpd  #2
0160 2606             (/home/strick/go/s):00372                  bne   AlarmErr
0162 EC06             (/home/strick/go/s):00373                  ldd   G.AlPID-G.AlPckt,x
0164 ED41             (/home/strick/go/s):00374                  std   R$D,u
0166 2007             (/home/strick/go/s):00375                  bra   RetTime
0168 53               (/home/strick/go/s):00376         AlarmErr comb
0169 C6BB             (/home/strick/go/s):00377                  ldb   #E$IllArg
016B 39               (/home/strick/go/s):00378                  rts
                      (/home/strick/go/s):00379         
                      (/home/strick/go/s):00380         *------------------------------------------------------------
                      (/home/strick/go/s):00381         *
                      (/home/strick/go/s):00382         * Handle F$Time System call
                      (/home/strick/go/s):00383         *
     016C             (/home/strick/go/s):00384         F.Time   equ   *
016C 8E0028           (/home/strick/go/s):00385                  ldx   #D.Time    Address of system time packet
016F 109E50           (/home/strick/go/s):00386         RetTime  ldy   <D.Proc    Get pointer to current proc descriptor
0172 E626             (/home/strick/go/s):00387                  ldb   P$Task,y   Process Task number
0174 96D0             (/home/strick/go/s):00388                  lda   <D.SysTsk  From System Task
0176 EE44             (/home/strick/go/s):00389                  ldu   R$X,u
0178 108E0006         (/home/strick/go/s):00390         STime.Mv ldy   #6         Move 6 bytes
017C 103F38           (/home/strick/go/s):00391         FMove    os9   F$Move
017F 39               (/home/strick/go/s):00392                  rts
                      (/home/strick/go/s):00393         
                      (/home/strick/go/s):00394         *------------------------------------------------------------
                      (/home/strick/go/s):00395         *
                      (/home/strick/go/s):00396         * Handle F$STime system call
                      (/home/strick/go/s):00397         *
                      (/home/strick/go/s):00398         * First, copy time packet from user address space to system time
                      (/home/strick/go/s):00399         * variables, then fall through to code to update RTC.
                      (/home/strick/go/s):00400         *
     0180             (/home/strick/go/s):00401         F.STime  equ  *
0180 9E50             (/home/strick/go/s):00402                  ldx   <D.Proc    Caller's process descriptor
0182 A606             (/home/strick/go/s):00403                  lda   P$Task,x   Source is in user map
0184 AE44             (/home/strick/go/s):00404                  ldx   R$X,u      Address of caller's time packet
0186 CE0028           (/home/strick/go/s):00405                  ldu   #D.Time    Destination address
0189 D6D0             (/home/strick/go/s):00406                  ldb   <D.SysTsk  Destination is in system map
018B 8DEB             (/home/strick/go/s):00407                  bsr   STime.Mv   Get time packet (ignore errors)
018D 863C             (/home/strick/go/s):00408                  lda   #TkPerSec  Reset to start of second
018F 972E             (/home/strick/go/s):00409                  sta   <D.Tick
                      (/home/strick/go/s):00410         
                      (/home/strick/go/s):00411         *
                      (/home/strick/go/s):00412         * Call SetTime entry point in Clock2
0191 9EB6             (/home/strick/go/s):00413                  ldx   <D.Clock2  get entry point to Clock2
0193 AD06             (/home/strick/go/s):00414                  jsr   $06,x      else call GetTime entry point
                      (/home/strick/go/s):00415         
0195 39               (/home/strick/go/s):00416         NoSet    rts
                      (/home/strick/go/s):00417         
0196 436C6F636BB2     (/home/strick/go/s):00418         Clock2   fcs   "Clock2"
                      (/home/strick/go/s):00419         
                      (/home/strick/go/s):00420         *--------------------------------------------------
                      (/home/strick/go/s):00421         *
                      (/home/strick/go/s):00422         * Clock Initialization
                      (/home/strick/go/s):00423         *
                      (/home/strick/go/s):00424         * This vector is called by the kernel to service the first F$STime
                      (/home/strick/go/s):00425         * call.  F$STime is usually called by CC3Go (with a dummy argument)
                      (/home/strick/go/s):00426         * in order to initialize the clock.  F$STime is re-vectored to the
                      (/home/strick/go/s):00427         * service code above to handle future F$STime calls.
                      (/home/strick/go/s):00428         *
                      (/home/strick/go/s):00429         *
019C 9E50             (/home/strick/go/s):00430         Init     ldx   <D.Proc    save user proc
019E 3410             (/home/strick/go/s):00431                  pshs  x
01A0 9E4A             (/home/strick/go/s):00432                  ldx   <D.SysPrc  make sys for link
01A2 9F50             (/home/strick/go/s):00433                  stx   <D.Proc
                      (/home/strick/go/s):00434         
01A4 308CEF           (/home/strick/go/s):00435                  leax  <Clock2,pcr
01A7 8621             (/home/strick/go/s):00436                  lda   #Sbrtn+Objct
01A9 103F00           (/home/strick/go/s):00437                  os9   F$Link
                      (/home/strick/go/s):00438         
                      (/home/strick/go/s):00439         * And here, we restore the original D.Proc value
01AC 3510             (/home/strick/go/s):00440                  puls  x
01AE 9F50             (/home/strick/go/s):00441                  stx   <D.Proc    restore user proc
                      (/home/strick/go/s):00442         
01B0 2404             (/home/strick/go/s):00443                  bcc   LinkOk
01B2 86DD             (/home/strick/go/s):00444                  lda   #E$MNF
01B4 0E6B             (/home/strick/go/s):00445                  jmp   <D.Crash
01B6 109FB6           (/home/strick/go/s):00446         LinkOk   sty   <D.Clock2  save entry point
01B9 8EFF00           (/home/strick/go/s):00447         InitCont ldx   #PIA0Base  point to PIA0
01BC 4F               (/home/strick/go/s):00448                  clra             no error for return...
01BD 3401             (/home/strick/go/s):00449                  pshs  cc         save IRQ enable status (and Carry clear)
01BF 1A50             (/home/strick/go/s):00450                  orcc  #IntMasks  stop interrupts
                      (/home/strick/go/s):00451         
                      (/home/strick/go/s):00452         * Note: this code can go away once we have a rel_50hz
                      (/home/strick/go/s):00453                  IFEQ  TkPerSec-50
                      (/home/strick/go/s):00454                  ldb   <D.VIDMD   get video mode register copy
                      (/home/strick/go/s):00455                  orb   #$08       set 50 Hz VSYNC bit
                      (/home/strick/go/s):00456                  stb   <D.VIDMD   save video mode register copy
                      (/home/strick/go/s):00457                  stb   >$FF98     set 50 Hz VSYNC
                      (/home/strick/go/s):00458                  ENDC
                      (/home/strick/go/s):00459         
01C1 A701             (/home/strick/go/s):00460                  sta   1,x        enable DDRA
01C3 A784             (/home/strick/go/s):00461                  sta   ,x         set port A all inputs
01C5 A703             (/home/strick/go/s):00462                  sta   3,x        enable DDRB
01C7 43               (/home/strick/go/s):00463                  coma
01C8 A702             (/home/strick/go/s):00464                  sta   2,x        set port B all outputs
01CA CC343C           (/home/strick/go/s):00465                  ldd   #$343C     [A]=PIA0 CRA contents, [B]=PIA0 CRB contents
01CD A701             (/home/strick/go/s):00466                  sta   1,x        CA2 (MUX0) out low, port A, disable HBORD high-to-low IRQs
01CF E703             (/home/strick/go/s):00467                  stb   3,x        CB2 (MUX1) out low, port B, disable VBORD low-to-high IRQs
01D1 A78823           (/home/strick/go/s):00468                  sta   $23,x      disable CART +RG Mar 14, 2012
01D4 A684             (/home/strick/go/s):00469                  lda   ,x         clear possible pending PIA0 HBORD IRQ
01D6 A602             (/home/strick/go/s):00470                  lda   2,x        clear possible pending PIA0 VBORD IRQ
                      (/home/strick/go/s):00471         
                      (/home/strick/go/s):00472         * Don't need to explicitly read RTC during initialization
01D8 CC3B02           (/home/strick/go/s):00473                  ldd   #59*256+TkPerTS last second and time slice in minute
01DB DD2D             (/home/strick/go/s):00474                  std   <D.Sec     Will prompt RTC read at next time slice
                      (/home/strick/go/s):00475         
01DD D730             (/home/strick/go/s):00476                  stb   <D.TSlice  set ticks per time slice
01DF D72F             (/home/strick/go/s):00477                  stb   <D.Slice   set first time slice
01E1 308DFE3B         (/home/strick/go/s):00478                  leax  SvcIRQ,pcr set IRQ handler
01E5 9FF8             (/home/strick/go/s):00479                  stx   <D.IRQ
01E7 308DFE58         (/home/strick/go/s):00480                  leax  SvcVIRQ,pcr set VIRQ handler
01EB 9FAD             (/home/strick/go/s):00481                  stx   <D.VIRQ
01ED 318DFE22         (/home/strick/go/s):00482                  leay  NewSvc,pcr insert syscalls
01F1 103F32           (/home/strick/go/s):00483                  os9   F$SSvc
                      (/home/strick/go/s):00484         * H6309 optimization opportunity here using oim
01F4 9692             (/home/strick/go/s):00485                  lda   <D.IRQER   get shadow GIME IRQ enable register
01F6 8A08             (/home/strick/go/s):00486                  ora   #$08       set VBORD bit
01F8 9792             (/home/strick/go/s):00487                  sta   <D.IRQER   save shadow register
01FA B7FF92           (/home/strick/go/s):00488                  sta   >IRQEnR    enable GIME VBORD IRQs
                      (/home/strick/go/s):00489         
                      (/home/strick/go/s):00490         * Call Clock2 init routine
01FD 109EB6           (/home/strick/go/s):00491                  ldy   <D.Clock2  get entry point to Clock2
0200 ADA4             (/home/strick/go/s):00492                  jsr   ,y         call init entry point of Clock2
0202 3581             (/home/strick/go/s):00493         InitRts  puls  cc,pc      recover IRQ enable status and return
                      (/home/strick/go/s):00494         
0204 9A36A3           (/home/strick/go/s):00495                  emod
     0207             (/home/strick/go/s):00496         len      equ   *
                      (/home/strick/go/s):00497                  end
