                      (/home/strick/6809):00001         ********************************************************************
                      (/home/strick/6809):00002         * SCF - NitrOS-9 Sequential Character File Manager
                      (/home/strick/6809):00003         *
                      (/home/strick/6809):00004         * $Id$
                      (/home/strick/6809):00005         *
                      (/home/strick/6809):00006         * This contains an added SetStat call to allow placing prearranged data
                      (/home/strick/6809):00007         * into the keyboard buffer of ANY SCF related device.
                      (/home/strick/6809):00008         *
                      (/home/strick/6809):00009         * Usage:
                      (/home/strick/6809):00010         *
                      (/home/strick/6809):00011         * Entry: X = Pointer to the string
                      (/home/strick/6809):00012         *        Y = Length of the string
                      (/home/strick/6809):00013         *        A = Path number
                      (/home/strick/6809):00014         *        B = SS.Fill ($A0) (syscall SETSTAT function call number)
                      (/home/strick/6809):00015         * NOTE: If high bit of Y is set, no carriage return will be appended to
                      (/home/strick/6809):00016         *       the read buffer (used in Shellplus V2.2 history)
                      (/home/strick/6809):00017         *
                      (/home/strick/6809):00018         * This also includes Kevin Darlings SCF Editor patches.
                      (/home/strick/6809):00019         *
                      (/home/strick/6809):00020         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/home/strick/6809):00021         * Comment
                      (/home/strick/6809):00022         * ------------------------------------------------------------------
                      (/home/strick/6809):00023         *          1993/04/20  ???
                      (/home/strick/6809):00024         * V1.09:
                      (/home/strick/6809):00025         * - Speeded up L05CC (write char to device) routine by a few cycles
                      (/home/strick/6809):00026         * - Slightly optimized Insert char.
                      (/home/strick/6809):00027         * - Move branch table so Read & ReadLn are 1 cycle faster each; fixed
                      (/home/strick/6809):00028         *   SS.Fill so size is truncated @ 256 bytes.
                      (/home/strick/6809):00029         * - Added NO CR option to SS.Fill (for use with modified Shellplus V2.2
                      (/home/strick/6809):00030         *   command history).
                      (/home/strick/6809):00031         *
                      (/home/strick/6809):00032         *          1993/04/21  ???
                      (/home/strick/6809):00033         * Slight speedup to some of ReadLn parsing, TFM's in Open/Close.
                      (/home/strick/6809):00034         * - More optimization to read/write driver calls
                      (/home/strick/6809):00035         * - Got rid of branch table @ L05E3 for speed
                      (/home/strick/6809):00036         *
                      (/home/strick/6809):00037         *          1993/05/21  ???
                      (/home/strick/6809):00038         * V1.10:
                      (/home/strick/6809):00039         * Added Boisy Pitre's patch for non-sharable devices.
                      (/home/strick/6809):00040         * - Saved 4 cycles in routine @ L042B
                      (/home/strick/6809):00041         * - Modified Boisy's routine to not pshs/puls B (saves 2 cycles).
                      (/home/strick/6809):00042         * - Changed buffer prefill of CR's to save 1 byte.
                      (/home/strick/6809):00043         *
                      (/home/strick/6809):00044         *          1993/07/27  ???
                      (/home/strick/6809):00045         * V1.11:
                      (/home/strick/6809):00046         * Changed a BRA to a LBRA to a straight LBRA in L0322.
                      (/home/strick/6809):00047         * - Optimized path option character routine @ L032C
                      (/home/strick/6809):00048         *
                      (/home/strick/6809):00049         *          1993/08/03  ???
                      (/home/strick/6809):00050         * Modified vector table @ L033F to save 1 cycle on PD.PSC
                      (/home/strick/6809):00051         * - Sped up uppercase conversion checks for ReadLn & WritLn
                      (/home/strick/6809):00052         * - Changed 2 BRA's to L02F9 to do an LBRA straight to L05F8 (ReadLn loop)
                      (/home/strick/6809):00053         * - Moved L0565 routine so Reprint line, Insert & Delete char (on ReadLn)
                      (/home/strick/6809):00054         *   are 1 cycle faster / char printed
                      (/home/strick/6809):00055         * - Changed 2 references to L0420 to go straight to L0565
                      (/home/strick/6809):00056         * - Sped up ReadLn loop by 2 or 3 cycles per char read
                      (/home/strick/6809):00057         *
                      (/home/strick/6809):00058         *          1993/09/21  ???
                      (/home/strick/6809):00059         * V1.12:
                      (/home/strick/6809):00060         * Sped up L0435 by 1 or 2 cycles (depending on branch)
                      (/home/strick/6809):00061         * - Changed LDD ,S to TFR X,D (saves 1 cycle) @ L04F1 (Write & WritLn)
                      (/home/strick/6809):00062         * - Modified L04F1 to use W without TFR (+1 byte, -3 cycles) (Write)
                      (/home/strick/6809):00063         *
                      (/home/strick/6809):00064         *          1993/11/09  ???
                      (/home/strick/6809):00065         * Took LDX #0/LDU PD.BUF,y from L03B5 & merged in @ L028A, L02EF & L0381.
                      (/home/strick/6809):00066         * Also changed BEQ @ L03A5 to skip re-loading X with 0.
                      (/home/strick/6809):00067         *
                      (/home/strick/6809):00068         *          1993/11/10  ???
                      (/home/strick/6809):00069         * Moved L04B2 routine to allow a couple of BSR's instead of LBSR's In READ.
                      (/home/strick/6809):00070         * - Moved driver call right into READ loop (should save 25 cycles/char read)
                      (/home/strick/6809):00071         * - Moved driver call right into L0565 (should save 12 cycles/char written on echo,
                      (/home/strick/6809):00072         *   line editing, etc.)
                      (/home/strick/6809):00073         *
                      (/home/strick/6809):00074         *          1993/11/26  ???
                      (/home/strick/6809):00075         * Moved L02FE (ReadLn parsing) to end where ReadLn routine is moved L03E2
                      (/home/strick/6809):00076         * so Read loop would be optimized for it (read char from driver) instead of
                      (/home/strick/6809):00077         * L042B (write filled buffer to caller).
                      (/home/strick/6809):00078         * Changed LDA #C$NULL to CLRA.
                      (/home/strick/6809):00079         *
                      (/home/strick/6809):00080         *          1993/12/01  ???
                      (/home/strick/6809):00081         * Modified device write call (L056F) to preserve Y as well, to cut down on
                      (/home/strick/6809):00082         * PSHS/PULS.
                      (/home/strick/6809):00083         * - Changed L03E2 & L03DA to exit immediately if PD.DEV or PD.DV2 (depending
                      (/home/strick/6809):00084         * on which routine) is empty (eliminated redundant LEAX ,X).
                      (/home/strick/6809):00085         *
                      (/home/strick/6809):00086         *          1994/05/31  ???
                      (/home/strick/6809):00087         * Attempted mode to L03F1 to eliminate LDW #D$READ, changed:
                      (/home/strick/6809):00088         *      LDX V$DRIV,x
                      (/home/strick/6809):00089         *      ADDW M$Exec,x
                      (/home/strick/6809):00090         *      JSR w,x
                      (/home/strick/6809):00091         * to:
                      (/home/strick/6809):00092         *      LDW V$DRIV,x
                      (/home/strick/6809):00093         *      ADDW M$Exec,w
                      (/home/strick/6809):00094         *      JSR D$READ,w
                      (/home/strick/6809):00095         * Did same to L05C9 & L056F (should speed up each by 1 cycle)
                      (/home/strick/6809):00096         *
                      (/home/strick/6809):00097         *          1994/06/07  ???
                      (/home/strick/6809):00098         * Attempted to modify all M$Exec calls to use new V$DRIVEX (REQUIRES NEW IOMAN)
                      (/home/strick/6809):00099         * - L01FA (Get/SetStat), L03F1 (Read), L05C9 (Write), L056F (Write)
                      (/home/strick/6809):00100         * - Changed L046A to use LDB V.BUSY,x...CMPB ,s...TFR B,A
                      (/home/strick/6809):00101         *
                      (/home/strick/6809):00102         *          1994/06/08  ???
                      (/home/strick/6809):00103         * Changed TST <PD.EKO,y in read loop (L02BC) to LDB PD.EKO,y
                      (/home/strick/6809):00104         * - Changed LEAX 1,X to LDB #1/ABX @ L02C4
                      (/home/strick/6809):00105         * - Changed LEAX >L033F,pc @ L032C to use < (8 bit) version
                      (/home/strick/6809):00106         * - Modified L02E5 to use D instead of X, allowing TSTA, and faster exit on 0 byte
                      (/home/strick/6809):00107         *   just BRAnching to L0453
                      (/home/strick/6809):00108         *
                      (/home/strick/6809):00109         *          1994/06/09  ???
                      (/home/strick/6809):00110         * Changed LEAX 1,X to LDB #1/ABX @ L053D, L05F8, L0312, L0351, L03B8
                      (/home/strick/6809):00111         * - Changed to L0573: All TST's changed to LDB's
                      (/home/strick/6809):00112         * - Changed Open/Create init to use LEAX,PC instead of BSR/PULS X
                      (/home/strick/6809):00113         * - Changed TST PD.CNT,y to LDA PD.CNT,y @ close
                      (/home/strick/6809):00114         * - Eliminated L010D, changed references to it to go to L0129
                      (/home/strick/6809):00115         * - Eliminated useless LEAX ,X @ L0182, and changed BEQ @ L0182 to go to L012A
                      (/home/strick/6809):00116         *   instead of L0129 (speeds CLOSE by 5 or 10 cycles)
                      (/home/strick/6809):00117         * - Moved L06B9 into L012B, eliminate BSR/RTS, plus
                      (/home/strick/6809):00118         * - Changed TST V.TYPE,x to LDB V.TYPE,x
                      (/home/strick/6809):00119         * - Moved L0624 to just before L05F8 to eliminate BRA L05F8 (ReadLn)
                      (/home/strick/6809):00120         * - Changed TST PD.EKO,y @ L0413 to LDB PD.EKO,y
                      (/home/strick/6809):00121         * - Moved L0413-L0423 routines to later in code to allow short branches
                      (/home/strick/6809):00122         * - As result of above, changed 6 LBxx to Bxx
                      (/home/strick/6809):00123         * - Changed TST PD.MIN,y @ L04BB to LDA PD.MIN,y
                      (/home/strick/6809):00124         * - Changed TST PD.RAW,y/TST PD.UPC,y @ L0523 to LDB's
                      (/home/strick/6809):00125         * - Changed TST PD.ALF,y @ L052A to LDB
                      (/home/strick/6809):00126         * - L053D: Moved TST PD.RAW,y to before LDA -1,u to speed up WRITE, changed it to LDB
                      (/home/strick/6809):00127         *
                      (/home/strick/6809):00128         *          1994/06/10  ???
                      (/home/strick/6809):00129         * Changed TST PD.ALF,y to LDB @ L052A
                      (/home/strick/6809):00130         * - Changed CLR V.WAKE,u to CLRA/STA V.WAKE,u @ L03F1 (Read)
                      (/home/strick/6809):00131         * - Changed CLR V.BUSY,u to CLRA/STA V.BUSY,u @ L045D
                      (/home/strick/6809):00132         * - Changed CLR PD.MIN,y to CLRA/STA PD.MIN,y, moved before LDA P$ID,x @ L04A7
                      (/home/strick/6809):00133         * - Changed CLR PD.RAW,y @ L04BB to STA PD.RAW, since A already 0 to get there
                      (/home/strick/6809):00134         * - Changed CLR V.PAUS,u to CLRA/STA V.PAUS,u @ L05A2
                      (/home/strick/6809):00135         * - Changed TST PD.RAW,y to LDA PD.RAW,y @ L05A2
                      (/home/strick/6809):00136         * - Changed TST PD.ALF,y to LDA PD.ALF,y @ L05A2
                      (/home/strick/6809):00137         * - Changed CLR V.WAKE,u to CLRB/STB V.WAKE,u @ L05C9
                      (/home/strick/6809):00138         * - Changed CLR V.WAKE,u to CLRB/STB V.WAKE,u @ L056F
                      (/home/strick/6809):00139         * - Changed TST PD.UPC,y to LDB PD.UPC,y @ L0322
                      (/home/strick/6809):00140         * - Changed TST PD.DLO,y/TST PD.EKO,y to LDB's @ L03A5
                      (/home/strick/6809):00141         *
                      (/home/strick/6809):00142         *          1994/06/16  ???
                      (/home/strick/6809):00143         * Changed TST PD.UPC,y to LDB PD.UPC,y @ L0322
                      (/home/strick/6809):00144         * - Changed TST PD.BSO,y to LDB PD.BSO,y @ L03BF
                      (/home/strick/6809):00145         * - Changed TST PD.EKO,y to LDB PD.EKO,y @ L03BF
                      (/home/strick/6809):00146         *
                      (/home/strick/6809):00147         *          2002/10/11  Boisy G. Pitre
                      (/home/strick/6809):00148         * Merged NitrOS-9 and TuneUp versions for single-source maintenance.  Note that
                      (/home/strick/6809):00149         * the 6809 version of TuneUp never seemed to call GrfDrv directly to do fast screen
                      (/home/strick/6809):00150         * writes (see note around g.done label).
                      (/home/strick/6809):00151         *
                      (/home/strick/6809):00152         *  16r2    2002/05/16  Boisy G. Pitre
                      (/home/strick/6809):00153         * Removed pshs/puls of b from sharable code segment for non-NitrOS-9 because it was
                      (/home/strick/6809):00154         * not needed.
                      (/home/strick/6809):00155         *
                      (/home/strick/6809):00156         *  16r3    2002/08/16  Boisy G. Pitre
                      (/home/strick/6809):00157         * Now uses V$DRIVEX.
                      (/home/strick/6809):00158         *
                      (/home/strick/6809):00159         *  16r4    2004/07/12  Boisy G. Pitre
                      (/home/strick/6809):00160         * 6809 version now calls the FAST TEXT entry point of GrfDrv.
                      (/home/strick/6809):00161         *
                      (/home/strick/6809):00162         *  17      2010/01/15  Boisy G. Pitre
                      (/home/strick/6809):00163         * Fix for bug described in Artifact 2932883 on SF
                      (/home/strick/6809):00164         * Also added Level 1 conditionals for eventual backporting
                      (/home/strick/6809):00165         
                      (/home/strick/6809):00166         *
                      (/home/strick/6809):00167         *  17      2010/01/15  Boisy G. Pitre
                      (/home/strick/6809):00168         * Handling of device exclusivity using the SHARE. bit has been rearchitected.
                      (/home/strick/6809):00169         * The '93 patch looked at the mode bytes in the descriptor and driver and
                      (/home/strick/6809):00170         * determined that if both were set, then only one path would be allowed to
                      (/home/strick/6809):00171         * be opened on the device at a time.
                      (/home/strick/6809):00172         * I now believe this is wrong.
                      (/home/strick/6809):00173         * The mode bytes in the device driver and descriptor are capability bytes.
                      (/home/strick/6809):00174         * They advertise what the device is capable of doing (READ, WRITE, etc) so
                      (/home/strick/6809):00175         * the mode bytes alone do not convey action, but merely what is possible.
                      (/home/strick/6809):00176         * When the user calls I$Open on a device, he passes the desired mode byte
                      (/home/strick/6809):00177         * in RegA and IOMan checks to make sure that all bits in that register are
                      (/home/strick/6809):00178         * set in the mode bytes of the driver and descriptor.  So once we get into
                      (/home/strick/6809):00179         * the Open call of this file manager, we know that all set bits in RegA are
                      (/home/strick/6809):00180         * also set in the mode bytes of the driver and descriptor.
                      (/home/strick/6809):00181         *
                      (/home/strick/6809):00182         * For SHARE., what we SHOULD be doing is checking the number of open paths
                      (/home/strick/6809):00183         * on the device.  If the SHARE. bit is set in RegA, then we check if a path
                      (/home/strick/6809):00184         * is already open and if so, return the E$DevBsy error.
                      (/home/strick/6809):00185         * Likewise, if SHARE. is not set in RegA, we check the path at the head of
                      (/home/strick/6809):00186         * the open path list, and if ITS mode byte has the SHARE. bit set, we exit
                      (/home/strick/6809):00187         * with E$DevBsy too.  The idea is that if the SHARE. bit is set on the newly
                      (/home/strick/6809):00188         * opened path or an existing path, then there can "be only one."
                      (/home/strick/6809):00189         *
                      (/home/strick/6809):00190         *  18      2010/01/23  Boisy G. Pitre
                      (/home/strick/6809):00191         * SCF has successfully been backported to NitrOS-9 Level 1.
                      (/home/strick/6809):00192         * SCF now returns on carry set after calling SS.Open.  Prior to this
                      (/home/strick/6809):00193         * change, SS.ComSt would be called right after SS.Open even if SS.Open
                      (/home/strick/6809):00194         * failed. This caused misery with the scdwn driver wildcard feature.
                      (/home/strick/6809):00195         *
                      (/home/strick/6809):00196         
                      (/home/strick/6809):00197                  nam   SCF
                      (/home/strick/6809):00198                  ttl   NitrOS-9 Sequential Character File Manager
                      (/home/strick/6809):00199         
                      (/home/strick/6809):00200                  IFP1
                      (/home/strick/6809):00201                  use   defsfile
                      (         defsfile):00001                  use   ../defsfile
     0003             (      ../defsfile):00001         Level    equ   3
                      (      ../defsfile):00002         
                      (      ../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
                      (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
     0080             (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
     00FE             (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0004                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
002A                  (            os9.d):00820         DefIOSiz       EQU       12
002A                  (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
002A                  (            os9.d):00824         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00832         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00835         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00849                        RMB       $40-.               unused
002A                  (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
002A                  (            os9.d):00855         SysState       EQU       %10000000
002A                  (            os9.d):00856         TimSleep       EQU       %01000000
002A                  (            os9.d):00857         TimOut         EQU       %00100000
002A                  (            os9.d):00858         ImgChg         EQU       %00010000
002A                  (            os9.d):00859         Condem         EQU       %00000010
002A                  (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
     0010             (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0000                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00877         P$User         RMB       2                   User Index
000A                  (            os9.d):00878         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00879         P$Age          RMB       1                   Age
000C                  (            os9.d):00880         P$State        RMB       1                   Status
000D                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00892                        RMB       $20-.               unused
0020                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00905         P$Alarm        RMB       6
00C9                  (            os9.d):00906                        RMB       $200-.              Local stack
     0200             (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
     0080             (            os9.d):00913         SysState       EQU       %10000000
     0040             (            os9.d):00914         TimSleep       EQU       %01000000
     0020             (            os9.d):00915         TimOut         EQU       %00100000
     0010             (            os9.d):00916         ImgChg         EQU       %00010000
     0008             (            os9.d):00917         Suspend        EQU       %00001000
     0002             (            os9.d):00918         Condem         EQU       %00000010
     0001             (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     000D             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     000B             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
     0003             (            os9.d):01040         R$E            EQU       3                   E Accumulator
     0004             (            os9.d):01041         R$F            EQU       4                   F Accumulator
     0003             (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
     0001             (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
     0005             (            os9.d):01044         R$DP           EQU       5                   Direct Page register
     0006             (            os9.d):01045         R$X            EQU       6                   X Index register
     0008             (            os9.d):01046         R$Y            EQU       8                   Y Index register
     000A             (            os9.d):01047         R$U            EQU       10                  User Stack register
     000C             (            os9.d):01048         R$PC           EQU       12                  Program Counter register
     000E             (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
0005                  (            os9.d):01051         R$DP           EQU       3                   Direct Page register
0005                  (            os9.d):01052         R$X            EQU       4                   X Index register
0005                  (            os9.d):01053         R$Y            EQU       6                   Y Index register
0005                  (            os9.d):01054         R$U            EQU       8                   User Stack register
0005                  (            os9.d):01055         R$PC           EQU       10                  Program Counter register
0005                  (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
00FF                  (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
00FF                  (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
     003B             (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
     ED00             (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
     2000             (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
     0040             (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
     0002             (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
     6000             (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
     0660             (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
     0661             (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (      ../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
                      (            scf.d):00222         
                      (            scf.d):00223         * PD.BAU definitions
                      (            scf.d):00224         *
                      (            scf.d):00225         * Baud rate
     0000             (            scf.d):00226         B110           EQU       %00000000
     0001             (            scf.d):00227         B300           EQU       %00000001
     0002             (            scf.d):00228         B600           EQU       %00000010
     0003             (            scf.d):00229         B1200          EQU       %00000011
     0004             (            scf.d):00230         B2400          EQU       %00000100
     0005             (            scf.d):00231         B4800          EQU       %00000101
     0006             (            scf.d):00232         B9600          EQU       %00000110
     0007             (            scf.d):00233         B19200         EQU       %00000111
     0008             (            scf.d):00234         B38400         EQU       %00001000
     0009             (            scf.d):00235         B57600         EQU       %00001001
     000A             (            scf.d):00236         B115200        EQU       %00001010
                      (            scf.d):00237         * Word size
     0000             (            scf.d):00238         WORD8          EQU       %00000000
     0020             (            scf.d):00239         WORD7          EQU       %00100000
                      (            scf.d):00240         * Stop bits
     0000             (            scf.d):00241         STOP1          EQU       %00000000
     0010             (            scf.d):00242         STOP2          EQU       %00010000
                      (            scf.d):00243         
                      (            scf.d):00244                        ENDC      
                      (      ../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (      ../defsfile):00006                  use   coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         *************************************************
                      (           coco.d):00148         *
                      (           coco.d):00149         * NitrOS-9 Level 1 Section
                      (           coco.d):00150         *
                      (           coco.d):00151         *************************************************
                      (           coco.d):00152         
0004                  (           coco.d):00153         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE      
                      (           coco.d):00156         
                      (           coco.d):00157         *************************************************
                      (           coco.d):00158         *
                      (           coco.d):00159         * NitrOS-9 Level 2 Section
                      (           coco.d):00160         *
                      (           coco.d):00161         *************************************************
                      (           coco.d):00162         
                      (           coco.d):00163         ****************************************
                      (           coco.d):00164         * Dynamic Address Translator Definitions
                      (           coco.d):00165         *
     0008             (           coco.d):00166         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00167         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00168         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00169         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00170         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00171         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00172         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00173         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00174         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00175         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00176         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00177         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00178         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00179         IOBlock        EQU       $3F
     003F             (           coco.d):00180         ROMBlock       EQU       $3F
     007F             (           coco.d):00181         IOAddr         EQU       $7F
     0001             (           coco.d):00182         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00183         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00184         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00185         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00186         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00187         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00188         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00189         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00190         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00191         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00192         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00193         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00194         
                      (           coco.d):00195         ***************************
                      (           coco.d):00196         * Color Computer 3 Specific
                      (           coco.d):00197         *
     0001             (           coco.d):00198         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00199         
                      (           coco.d):00200         ********************
                      (           coco.d):00201         * Hardware addresses
                      (           coco.d):00202         *
     FF00             (           coco.d):00203         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00204         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00205         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00206         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00207         
     0007             (           coco.d):00208         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00209         
                      (           coco.d):00210                        ENDC
                      (           coco.d):00211                        
                      (           coco.d):00212                        ENDC      
                      (           coco.d):00213         
                      (      ../defsfile):00007                  use   cocovtio.d
                      (       cocovtio.d):00001                        IFNE      COCOVTIO.D-1
     0001             (       cocovtio.d):00002         COCOVTIO.D     SET       1
                      (       cocovtio.d):00003         
                      (       cocovtio.d):00004                        IFEQ      Level-1
                      (       cocovtio.d):00005         
                      (       cocovtio.d):00006         ********************************************************************
                      (       cocovtio.d):00007         * VTIODefs - Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00008         *
                      (       cocovtio.d):00009         * $Id$
                      (       cocovtio.d):00010         *
                      (       cocovtio.d):00011         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00012         * Comment
                      (       cocovtio.d):00013         * ------------------------------------------------------------------
                      (       cocovtio.d):00014         *          2004/11/29  P.Harvey-Smith.
                      (       cocovtio.d):00015         * Added symbolic defines for bits in V.CoLoad.
                      (       cocovtio.d):00016         *
                      (       cocovtio.d):00017         *          2004/12/02  P.Harvey-Smith.
                      (       cocovtio.d):00018         * Moved over all variables from co51.asm
                      (       cocovtio.d):00019         *
                      (       cocovtio.d):00020         *          2005/04/09  P.Harvey-Smith.
                      (       cocovtio.d):00021         * Decoded rest of the CoHR memory locations.
                      (       cocovtio.d):00022         *
                      (       cocovtio.d):00023         *              2005/04/24  P.Harvey-Smith.
                      (       cocovtio.d):00024         * Added variables for cursor flash, currently only implemented in co51
                      (       cocovtio.d):00025         *
                      (       cocovtio.d):00026                        NAM       VTIODefs  
                      (       cocovtio.d):00027                        TTL       Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00028         
                      (       cocovtio.d):00029         ********************
                      (       cocovtio.d):00030         * VTIO Static Memory
                      (       cocovtio.d):00031         *
                      (       cocovtio.d):00032                        ORG       V.SCF
0004                  (       cocovtio.d):00033         V.ScrnA        RMB       2                   (2) screen start address in system memory
0004                  (       cocovtio.d):00034         V.ScrnE        RMB       2                   (2) address of end of screen
0004                  (       cocovtio.d):00035         V.CrsrA        RMB       1                   (2) cursor address
0004                  (       cocovtio.d):00036         V.CrsAL        RMB       1                   cursor address low
0004                  (       cocovtio.d):00037         V.CChar        RMB       1                   value of character under cursor
0004                  (       cocovtio.d):00038         V.Mode         RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0004                  (       cocovtio.d):00039         V.NGChr        RMB       1                   number of additional characters to get
0004                  (       cocovtio.d):00040         V.RTAdd        RMB       2                   (2) return address after getting characters
0004                  (       cocovtio.d):00041         V.NChar        RMB       1                   character to process
0004                  (       cocovtio.d):00042         V.NChr2        RMB       1                   and the next one
                      (       cocovtio.d):00043                        RMB       1
0004                  (       cocovtio.d):00044         V.Chr1         RMB       1                   same as under cursor character
0004                  (       cocovtio.d):00045         V.CColr        RMB       1                   cursor color
0004                  (       cocovtio.d):00046         V.Col          RMB       1                   number of columns for this screen
0004                  (       cocovtio.d):00047         V.Row          RMB       1                   number of rows
0004                  (       cocovtio.d):00048         V.Alpha        RMB       1                   0 when in alpha mode
0004                  (       cocovtio.d):00049         V.PIA1         RMB       1                   PIA1Base value
0004                  (       cocovtio.d):00050         V.Rdy          RMB       1                   device ready (see SS.DStat 0=not ready)
0004                  (       cocovtio.d):00051         V.CFlg1        RMB       1                   VDG display code values
0004                  (       cocovtio.d):00052         V.SBAdd        RMB       2                   (2) address of block screen is in
0004                  (       cocovtio.d):00053         V.GBuff        RMB       2                   allocation for graphics buffers (block#)
0004                  (       cocovtio.d):00054         V.AGBuf        RMB       4                   (2) additional graphics buffer
0004                  (       cocovtio.d):00055         V.FFMem        RMB       2                   Flood fill alloc'ed mem
0004                  (       cocovtio.d):00056         V.FFSPt        RMB       2                   Flood fill current stack pointer
0004                  (       cocovtio.d):00057         V.FFSTp        RMB       1                   Flood fill stack top
0004                  (       cocovtio.d):00058         V.FF6          RMB       1                   flood fill flag
0004                  (       cocovtio.d):00059         V.FFFlag       RMB       1                   ??
0004                  (       cocovtio.d):00060         V.MTabl        RMB       2                   (2) address of mask table for pixels in byte
0004                  (       cocovtio.d):00061         V.PixBt        RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0004                  (       cocovtio.d):00062         V.GCrsX        RMB       1                   graphics cursor X value
0004                  (       cocovtio.d):00063         V.GCrsY        RMB       1                   graphics cursor Y
0004                  (       cocovtio.d):00064         V.Msk1         RMB       1                   mask byte 1
0004                  (       cocovtio.d):00065         V.Msk2         RMB       1                   mask byte 2 (00,55,AA,FF)
0004                  (       cocovtio.d):00066         V.MCol         RMB       1                   color? (C003,8001)
0004                  (       cocovtio.d):00067         V.4A           RMB       1
0004                  (       cocovtio.d):00068         V.PMask        RMB       1                   pixel mask for colors (i.e. $55, $CC etc)
0004                  (       cocovtio.d):00069         V.4C           RMB       1
0004                  (       cocovtio.d):00070         V.4D           RMB       1
0004                  (       cocovtio.d):00071         V.4E           RMB       1
0004                  (       cocovtio.d):00072         V.4F           RMB       1
0004                  (       cocovtio.d):00073         V.Caps         RMB       1                   caps lock info: $00=lower $FF=upper
0004                  (       cocovtio.d):00074         V.ClkCnt       RMB       1                   clock count ??
0004                  (       cocovtio.d):00075         V.WrChr        RMB       1                   character to write
0004                  (       cocovtio.d):00076         V.CurCo        RMB       1                   current CO-module in use
                      (       cocovtio.d):00077         * start of CoWP-specific static memory
0004                  (       cocovtio.d):00078         V.Co80X        RMB       1                   V.54
0004                  (       cocovtio.d):00079         V.Co80Y        RMB       1                   V.55
0004                  (       cocovtio.d):00080         V.ColPtr       RMB       1                   V.56
0004                  (       cocovtio.d):00081         V.RowPtr       RMB       1                   V.57
0004                  (       cocovtio.d):00082         V.C80X         RMB       1                   CoWP X position
0004                  (       cocovtio.d):00083         V.C80Y         RMB       1                   CoWP Y position
0004                  (       cocovtio.d):00084         V.Invers       RMB       1
                      (       cocovtio.d):00085         * end of CoWP-specific static memory
0004                  (       cocovtio.d):00086         V.DspVct       RMB       2                   vector to display screen
0004                  (       cocovtio.d):00087         V.CnvVct       RMB       2                   vector to X/Y to address conversion
0004                  (       cocovtio.d):00088         V.LKeyCd       RMB       1                   last key code
0004                  (       cocovtio.d):00089         V.2Key1        RMB       1                   2nd Key 1
0004                  (       cocovtio.d):00090         V.2Key2        RMB       1                   2nd Key 2
0004                  (       cocovtio.d):00091         V.2Key3        RMB       1                   2nd Key 3
0004                  (       cocovtio.d):00092         V.Key1         RMB       1                   Key 1
0004                  (       cocovtio.d):00093         V.Key2         RMB       1                   Key 2
0004                  (       cocovtio.d):00094         V.Key3         RMB       1                   Key 3
0004                  (       cocovtio.d):00095         V.ShftDn       RMB       1                   SHIFT/CTRL state
0004                  (       cocovtio.d):00096         V.CtrlDn       RMB       1                   CTRL key down
0004                  (       cocovtio.d):00097         V.KeyFlg       RMB       1                   key flag
0004                  (       cocovtio.d):00098         V.AltDwn       RMB       1                   ALT key down
0004                  (       cocovtio.d):00099         V.KySns        RMB       1                   key sense flags
0004                  (       cocovtio.d):00100         V.KySame       RMB       1                   key same as last flag
0004                  (       cocovtio.d):00101         V.KySnsF       RMB       1                   key sense flag
0004                  (       cocovtio.d):00102         V.Spcl         RMB       1
0004                  (       cocovtio.d):00103         V.KTblLC       RMB       1                   key table entry #
0004                  (       cocovtio.d):00104         V.6F           RMB       1                   ???
0004                  (       cocovtio.d):00105         V.COLoad       RMB       1                   CO-module loaded flags
0004                  (       cocovtio.d):00106         V.CFlag        RMB       1                   true lowercase flag $10=true, $00=false
0004                  (       cocovtio.d):00107         V.GrfDrvE      RMB       2                   GrfDrv entry point
0004                  (       cocovtio.d):00108         V.CoVDGE       RMB       2                   CoVDG entry point
0004                  (       cocovtio.d):00109         V.CoWPE        RMB       2                   CoWP entry point
0004                  (       cocovtio.d):00110         V.CoHRE        RMB       2                   CoHR entry point
                      (       cocovtio.d):00111         
0004                  (       cocovtio.d):00112         V.Flash        RMB       2                   Cursor flash routine address.
0004                  (       cocovtio.d):00113         v.FlashCount   RMB       1                   Cursor flash count
0004                  (       cocovtio.d):00114         V.NoFlash      RMB       1                   When this is non-zero do not flash cursor
                      (       cocovtio.d):00115         
                      (       cocovtio.d):00116         * CoHR vars
                      (       cocovtio.d):00117         
0004                  (       cocovtio.d):00118         V.51ScrnA      RMB       2                   * Screen address.
0004                  (       cocovtio.d):00119         V.51XPos       RMB       1                   * X co-ordinate
0004                  (       cocovtio.d):00120         V.51YPos       RMB       1                   * Y co-ordinate
0004                  (       cocovtio.d):00121         V.51EscSeq     RMB       1                   * In escape sequence
0004                  (       cocovtio.d):00122         V.51ReverseFlag RMB       1                   * Reverse video flag
0004                  (       cocovtio.d):00123         V.51UnderlineFlag RMB       1                   * Underline flag
0004                  (       cocovtio.d):00124         V.51CtrlDispatch RMB       2                   * Ctrl char dispatch address, currently processing
0004                  (       cocovtio.d):00125         V.51BytePixOffset RMB       1                   * byte offset in screen line, of character X position        
0004                  (       cocovtio.d):00126         V.51OldCursorPosX RMB       1                   * Position of old cursor before update        
0004                  (       cocovtio.d):00127         V.51OldCursorPosY RMB       1
0004                  (       cocovtio.d):00128         V.51CursorChanged RMB       1                   * Has cursor position changed ? 1=yes,0=no
0004                  (       cocovtio.d):00129         V.51CursorOn   RMB       1                   * Is cursor on ? 1=yes 0=no                         
0004                  (       cocovtio.d):00130         V.51XORFlag    RMB       1                   * and data to screen (0) or Xor (1)                       
0004                  (       cocovtio.d):00131         V.51ScreenMask1 RMB       1                   * screen masks for drawing characters on screen         
0004                  (       cocovtio.d):00132         V.51ScreenMask2 RMB       1
                      (       cocovtio.d):00133         * End of CoHR vars
                      (       cocovtio.d):00134         **** Note these have to come at the end of the defs, or the keyboard ****
                      (       cocovtio.d):00135         **** code can clobber variables defined after these !                ****
0004                  (       cocovtio.d):00136         V.IBufH        RMB       1                   input buffer head
0004                  (       cocovtio.d):00137         V.IBufT        RMB       1                   input buffer tail
0004                  (       cocovtio.d):00138         V.InBuf        RMB       1                   input buffer ptr
0004                  (       cocovtio.d):00139         V.51End        RMB       1
                      (       cocovtio.d):00140                        RMB       250-.
0004                  (       cocovtio.d):00141         V.Last         EQU       .
                      (       cocovtio.d):00142         
                      (       cocovtio.d):00143         
                      (       cocovtio.d):00144         * Unknown for now
                      (       cocovtio.d):00145         *VD.FFMem rmb   2  (2) bottom of stack for flood fill
                      (       cocovtio.d):00146         *VD.FFSPt rmb   2  (2) flood fill stack pointer
                      (       cocovtio.d):00147         *VD.FFSTp rmb   2  (2) flood fill stack top pointer
                      (       cocovtio.d):00148         *VD.FF6   rmb   1   flood fill flag
                      (       cocovtio.d):00149         *VD.MCol2 rmb   1  color
                      (       cocovtio.d):00150         *VD.FF1   rmb   1  data for flood fill
                      (       cocovtio.d):00151         *VD.FF2   rmb   1  data for flood fill
                      (       cocovtio.d):00152         *VD.FFMsk rmb   1  flood fill mask
                      (       cocovtio.d):00153         *VD.FFFlg rmb   1  flood fill flag
                      (       cocovtio.d):00154         *VD.Palet rmb   16 (16) current palette values
                      (       cocovtio.d):00155         *VD.PlFlg rmb   1  initialized to $08 by L00DB, and then unused!
                      (       cocovtio.d):00156         
                      (       cocovtio.d):00157         *
                      (       cocovtio.d):00158         * Defs for V.COLoad flags.
                      (       cocovtio.d):00159         * 
                      (       cocovtio.d):00160         
0004                  (       cocovtio.d):00161         ModCoVDG       EQU       %00000010           CoVDG, Built-in VDG 32x16.
0004                  (       cocovtio.d):00162         ModCoWP        EQU       %00000100           CoWP, WordPak, 80x25
0004                  (       cocovtio.d):00163         ModCoHR        EQU       %00001000           CoHR, PMODE 4 51x25 text
                      (       cocovtio.d):00164         
                      (       cocovtio.d):00165         *
                      (       cocovtio.d):00166         * Defs for cursor flash counter
                      (       cocovtio.d):00167         *
                      (       cocovtio.d):00168         
0004                  (       cocovtio.d):00169         CFlash50hz     EQU       25                  * 50Hz flash counter
0004                  (       cocovtio.d):00170         CFlash60Hz     EQU       30                  * 60Hz flash counter
                      (       cocovtio.d):00171         
                      (       cocovtio.d):00172                        ELSE
                      (       cocovtio.d):00173                        
                      (       cocovtio.d):00174         ********************************************************************
                      (       cocovtio.d):00175         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00176         *
                      (       cocovtio.d):00177         * $Id$
                      (       cocovtio.d):00178         *
                      (       cocovtio.d):00179         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00180         * Comment
                      (       cocovtio.d):00181         * ------------------------------------------------------------------
                      (       cocovtio.d):00182         *          2004/07/18  Boisy G. Pitre
                      (       cocovtio.d):00183         * Started from systype
                      (       cocovtio.d):00184         
                      (       cocovtio.d):00185                        NAM       VTIODefs
                      (       cocovtio.d):00186                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00187         
                      (       cocovtio.d):00188         ****************
                      (       cocovtio.d):00189         * Window Devices
                      (       cocovtio.d):00190         *
                      (       cocovtio.d):00191                        ORG       $FF9F
FF9F                  (       cocovtio.d):00192         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (       cocovtio.d):00193         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (       cocovtio.d):00194         A.W1           RMB       1                   $FFA1
FFA2                  (       cocovtio.d):00195         A.W2           RMB       1                   $FFA2
FFA3                  (       cocovtio.d):00196         A.W3           RMB       1                   $FFA3
FFA4                  (       cocovtio.d):00197         A.W4           RMB       1                   $FFA4
FFA5                  (       cocovtio.d):00198         A.W5           RMB       1                   $FFA5
FFA6                  (       cocovtio.d):00199         A.W6           RMB       1                   $FFA6
FFA7                  (       cocovtio.d):00200         A.W7           RMB       1                   $FFA7
FFA8                  (       cocovtio.d):00201         A.W8           RMB       1                   $FFA8
FFA9                  (       cocovtio.d):00202         A.W9           RMB       1                   $FFA9
FFAA                  (       cocovtio.d):00203         A.W10          RMB       1                   $FFAA
FFAB                  (       cocovtio.d):00204         A.W11          RMB       1                   $FFAB
FFAC                  (       cocovtio.d):00205         A.W12          RMB       1                   $FFAC
FFAD                  (       cocovtio.d):00206         A.W13          RMB       1                   $FFAD
FFAE                  (       cocovtio.d):00207         A.W14          RMB       1                   $FFAE
FFAF                  (       cocovtio.d):00208         A.W15          RMB       1                   $FFAF
                      (       cocovtio.d):00209         
                      (       cocovtio.d):00210         **********************************
                      (       cocovtio.d):00211         * Pointer Device Packet Definition
                      (       cocovtio.d):00212         *
                      (       cocovtio.d):00213                        ORG       0
0000                  (       cocovtio.d):00214         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (       cocovtio.d):00215         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (       cocovtio.d):00216         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (       cocovtio.d):00217                        RMB       2                   reserved
0005                  (       cocovtio.d):00218         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (       cocovtio.d):00219         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (       cocovtio.d):00220         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (       cocovtio.d):00221         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (       cocovtio.d):00222         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (       cocovtio.d):00223         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (       cocovtio.d):00224         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (       cocovtio.d):00225         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (       cocovtio.d):00226         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (       cocovtio.d):00227         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (       cocovtio.d):00228                        RMB       2                   Reserved
0012                  (       cocovtio.d):00229         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (       cocovtio.d):00230         Pt.BDY         RMB       2                   Button down Y value
0016                  (       cocovtio.d):00231         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (       cocovtio.d):00232         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (       cocovtio.d):00233         Pt.AcX         RMB       2                   Actual X Value
001A                  (       cocovtio.d):00234         Pt.AcY         RMB       2                   Actual Y Value
001C                  (       cocovtio.d):00235         Pt.WRX         RMB       2                   Window Relative X
001E                  (       cocovtio.d):00236         Pt.WRY         RMB       2                   Window Relative Y
     0020             (       cocovtio.d):00237         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (       cocovtio.d):00238         
                      (       cocovtio.d):00239         **************************
                      (       cocovtio.d):00240         * window regions for mouse
                      (       cocovtio.d):00241         *
     0000             (       cocovtio.d):00242         WR.Cntnt       EQU       0                   content region
     0001             (       cocovtio.d):00243         WR.Cntrl       EQU       1                   control region
     0002             (       cocovtio.d):00244         WR.OfWin       EQU       2                   off window
                      (       cocovtio.d):00245         
                      (       cocovtio.d):00246         *************************************
                      (       cocovtio.d):00247         * Standard system get/put buffer defs
                      (       cocovtio.d):00248         *
                      (       cocovtio.d):00249         *
                      (       cocovtio.d):00250         * system group numbers
                      (       cocovtio.d):00251         *
                      (       cocovtio.d):00252                        ORG       200
00C8                  (       cocovtio.d):00253         Grp.Fnt        RMB       1                   font group
00C9                  (       cocovtio.d):00254         Grp.Clip       RMB       1                   clipboard group
00CA                  (       cocovtio.d):00255         Grp.Ptr        RMB       1                   pointer group
00CB                  (       cocovtio.d):00256         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (       cocovtio.d):00257         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (       cocovtio.d):00258         Grp.Pat6       RMB       1                   pattern group 16 color
                      (       cocovtio.d):00259         *
                      (       cocovtio.d):00260         * font buffer numbers
                      (       cocovtio.d):00261         *
                      (       cocovtio.d):00262                        ORG       1
0001                  (       cocovtio.d):00263         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (       cocovtio.d):00264         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (       cocovtio.d):00265         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (       cocovtio.d):00266         *
                      (       cocovtio.d):00267         * pattern buffer numbers
                      (       cocovtio.d):00268         *
                      (       cocovtio.d):00269                        ORG       1
0001                  (       cocovtio.d):00270         Pat.Dot        RMB       1
0002                  (       cocovtio.d):00271         Pat.Vrt        RMB       1
0003                  (       cocovtio.d):00272         Pat.Hrz        RMB       1
0004                  (       cocovtio.d):00273         Pat.XHtc       RMB       1
0005                  (       cocovtio.d):00274         Pat.LSnt       RMB       1
0006                  (       cocovtio.d):00275         Pat.RSnt       RMB       1
0007                  (       cocovtio.d):00276         Pat.SDot       RMB       1
0008                  (       cocovtio.d):00277         Pat.BDot       RMB       1
                      (       cocovtio.d):00278         *
                      (       cocovtio.d):00279         * pointer buffer numbers
                      (       cocovtio.d):00280         *
                      (       cocovtio.d):00281                        ORG       1
0001                  (       cocovtio.d):00282         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (       cocovtio.d):00283         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (       cocovtio.d):00284         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (       cocovtio.d):00285         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (       cocovtio.d):00286         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (       cocovtio.d):00287         Ptr.Txt        RMB       1                   Text pointer
0007                  (       cocovtio.d):00288         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (       cocovtio.d):00289         
                      (       cocovtio.d):00290         **********************
                      (       cocovtio.d):00291         * KeyDrv Entry Points
                      (       cocovtio.d):00292                        ORG       0
0000                  (       cocovtio.d):00293         K$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00294         K$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00295         K$FnKey        RMB       3                   get function key states
0009                  (       cocovtio.d):00296         K$RdKey        RMB       3                   get key states
                      (       cocovtio.d):00297         
                      (       cocovtio.d):00298         **********************
                      (       cocovtio.d):00299         * JoyDrv Entry Points
                      (       cocovtio.d):00300                        ORG       0
0000                  (       cocovtio.d):00301         J$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00302         J$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00303         J$MsBtn        RMB       3                   get mouse button states
0009                  (       cocovtio.d):00304         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (       cocovtio.d):00305         J$JyBtn        RMB       3                   get joystick button states
000F                  (       cocovtio.d):00306         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00307         
                      (       cocovtio.d):00308         **********************
                      (       cocovtio.d):00309         * SndDrv Entry Points
                      (       cocovtio.d):00310                        ORG       0
0000                  (       cocovtio.d):00311         S$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00312         S$GetStt       RMB       3                   joystick termination
0006                  (       cocovtio.d):00313         S$SetStt       RMB       3                   joystick termination
0009                  (       cocovtio.d):00314         S$Term         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00315         
                      (       cocovtio.d):00316         ********************************
                      (       cocovtio.d):00317         * Window/Menu Bar Data Structure
                      (       cocovtio.d):00318         *
                      (       cocovtio.d):00319         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (       cocovtio.d):00320         * for use in the high level windowing package.
                      (       cocovtio.d):00321         *
     000A             (       cocovtio.d):00322         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (       cocovtio.d):00323         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (       cocovtio.d):00324         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (       cocovtio.d):00325         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (       cocovtio.d):00326         *
                      (       cocovtio.d):00327         * Menu Item Descriptor : (MN.ITEMS)
                      (       cocovtio.d):00328         * one required for each item within the menu
                      (       cocovtio.d):00329         *
                      (       cocovtio.d):00330                        ORG       0
0000                  (       cocovtio.d):00331         MI.TTL         RMB       MXTTLEN             item name
000F                  (       cocovtio.d):00332         MI.ENBL        RMB       1                   enable flag
0010                  (       cocovtio.d):00333         MI.RES         RMB       5                   reserved bytes
     0015             (       cocovtio.d):00334         MI.SIZ         EQU       .                   size of menu item descriptor
                      (       cocovtio.d):00335         *
                      (       cocovtio.d):00336         * Menu Descriptor :
                      (       cocovtio.d):00337         * one for each menu on the manu bar
                      (       cocovtio.d):00338         * each is pointed to by MB.MPTR below
                      (       cocovtio.d):00339         *
                      (       cocovtio.d):00340                        ORG       0
0000                  (       cocovtio.d):00341         MN.TTL         RMB       MXTTLEN             menu title
000F                  (       cocovtio.d):00342         MN.ID          RMB       1                   menu id number (1-255)
0010                  (       cocovtio.d):00343         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (       cocovtio.d):00344         MN.NITS        RMB       1                   number of items in menu
0012                  (       cocovtio.d):00345         MN.ENBL        RMB       1                   enable flag
0013                  (       cocovtio.d):00346         MN.RES         RMB       2                   reserved bytes
0015                  (       cocovtio.d):00347         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (       cocovtio.d):00348         MN.SIZ         EQU       .                   size of menu descriptor
                      (       cocovtio.d):00349         *
                      (       cocovtio.d):00350         * Window Descriptor:
                      (       cocovtio.d):00351         * one required for each application in a framed window
                      (       cocovtio.d):00352         *
                      (       cocovtio.d):00353                        ORG       0
0000                  (       cocovtio.d):00354         WN.TTL         RMB       20                  title of window for title bar
0014                  (       cocovtio.d):00355         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (       cocovtio.d):00356         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (       cocovtio.d):00357         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (       cocovtio.d):00358         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (       cocovtio.d):00359         WN.RES         RMB       7                   reserved bytes
0020                  (       cocovtio.d):00360         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (       cocovtio.d):00361         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (       cocovtio.d):00362         
                      (       cocovtio.d):00363         *************************
                      (       cocovtio.d):00364         * Window Type Definitions
                      (       cocovtio.d):00365         *
                      (       cocovtio.d):00366         * To be used in setting up the border of the window in
                      (       cocovtio.d):00367         * the SS.WnSel SETSTAT
                      (       cocovtio.d):00368         *
                      (       cocovtio.d):00369                        ORG       0
0000                  (       cocovtio.d):00370         WT.NBox        RMB       1                   No Box
0001                  (       cocovtio.d):00371         WT.FWin        RMB       1                   Framed Window
0002                  (       cocovtio.d):00372         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (       cocovtio.d):00373         WT.SBox        RMB       1                   Shadowed Box
0004                  (       cocovtio.d):00374         WT.DBox        RMB       1                   Double Box
0005                  (       cocovtio.d):00375         WT.PBox        RMB       1                   Plain Box
                      (       cocovtio.d):00376         
                      (       cocovtio.d):00377         *************************************
                      (       cocovtio.d):00378         * Pre-Defined Menu IDs for the system
                      (       cocovtio.d):00379         *
                      (       cocovtio.d):00380                        ORG       1
0001                  (       cocovtio.d):00381         MId.Mov        RMB       1                   move box
0002                  (       cocovtio.d):00382         MId.Cls        RMB       1                   close box
0003                  (       cocovtio.d):00383         MId.Grw        RMB       1                   grow box
0004                  (       cocovtio.d):00384         MId.SUp        RMB       1                   scroll up
0005                  (       cocovtio.d):00385         MId.SDn        RMB       1                   scroll down
0006                  (       cocovtio.d):00386         MId.SRt        RMB       1                   scroll right
0007                  (       cocovtio.d):00387         MId.SLt        RMB       1                   scroll left
0008                  (       cocovtio.d):00388         MId.Chr        RMB       1                   character was depressed
                      (       cocovtio.d):00389                        ORG       20
0014                  (       cocovtio.d):00390         MId.Tdy        RMB       1                   Tandy menu
0015                  (       cocovtio.d):00391         MId.Fil        RMB       1                   Files Menu
0016                  (       cocovtio.d):00392         MId.Edt        RMB       1                   Edit Menu
0017                  (       cocovtio.d):00393         MId.Sty        RMB       1                   Styles menu
0018                  (       cocovtio.d):00394         MId.Fnt        RMB       1                   Font menu
                      (       cocovtio.d):00395         
                      (       cocovtio.d):00396         
                      (       cocovtio.d):00397         ******************************************************************************
                      (       cocovtio.d):00398         ******************************************************************************
                      (       cocovtio.d):00399         **                                                                          **
                      (       cocovtio.d):00400         ** NitrOS-9 Windowing system Global data definitions                        **
                      (       cocovtio.d):00401         **                                                                          **
                      (       cocovtio.d):00402         ******************************************************************************
                      (       cocovtio.d):00403         ******************************************************************************
                      (       cocovtio.d):00404         **                                                                          **
                      (       cocovtio.d):00405         ** System memory block 0 layout:                                            **
                      (       cocovtio.d):00406         **                                                                          **
                      (       cocovtio.d):00407         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (       cocovtio.d):00408         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (       cocovtio.d):00409         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (       cocovtio.d):00410         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (       cocovtio.d):00411         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (       cocovtio.d):00412         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (       cocovtio.d):00413         ** $0010-$001F : unused (User definable)                                    **
                      (       cocovtio.d):00414         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (       cocovtio.d):00415         ** $0100-$011F : Task usage table                                           **
                      (       cocovtio.d):00416         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (       cocovtio.d):00417         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (       cocovtio.d):00418         ** $0300-$03FF : system's system call dispatch table                        **
                      (       cocovtio.d):00419         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (       cocovtio.d):00420         ** $0500-$05FF : process descriptor pointer table                           **
                      (       cocovtio.d):00421         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (       cocovtio.d):00422         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (       cocovtio.d):00423         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (       cocovtio.d):00424         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (       cocovtio.d):00425         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (       cocovtio.d):00426         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (       cocovtio.d):00427         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (       cocovtio.d):00428         ** $1248-$127F : ????                                                       **
                      (       cocovtio.d):00429         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (       cocovtio.d):00430         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (       cocovtio.d):00431         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (       cocovtio.d):00432         **                                                                          **
                      (       cocovtio.d):00433         ******************************************************************************
                      (       cocovtio.d):00434         ******************************************************************************
                      (       cocovtio.d):00435         
                      (       cocovtio.d):00436         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (       cocovtio.d):00437         MaxLines       EQU       25                  Max. Y coord text value
     0000             (       cocovtio.d):00438         Meg            SET       false               "true" if 1 or 2 meg machine
                      (       cocovtio.d):00439         
     0000             (       cocovtio.d):00440         COMP           EQU       0                   composite monitor
     0001             (       cocovtio.d):00441         RGB            EQU       1                   RGB Analog monitor 
     0002             (       cocovtio.d):00442         MONO           EQU       2                   monochrome monitor
                      (       cocovtio.d):00443         
     0001             (       cocovtio.d):00444         Monitor        SET       RGB
                      (       cocovtio.d):00445         
                      (       cocovtio.d):00446         * Global definitions
     0001             (       cocovtio.d):00447         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (       cocovtio.d):00448         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (       cocovtio.d):00449         CapsLck        EQU       %00000100           Capslock enabled
     0280             (       cocovtio.d):00450         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (       cocovtio.d):00451                        IFEQ      MaxLines-25
     00C6             (       cocovtio.d):00452         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00453                        ELSE      
0019                  (       cocovtio.d):00454         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00455                        ENDC      
                      (       cocovtio.d):00456         
                      (       cocovtio.d):00457         *****************************************************************************
                      (       cocovtio.d):00458         * Static memory area for each window (VTIO/TC9IO)
                      (       cocovtio.d):00459         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (       cocovtio.d):00460         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (       cocovtio.d):00461         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (       cocovtio.d):00462         * May have to have smaller limit for text to gfx screens, as it will run much
                      (       cocovtio.d):00463         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (       cocovtio.d):00464         *
                      (       cocovtio.d):00465         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (       cocovtio.d):00466         * V.SCF is to be resolved properly in pass 1!!
                      (       cocovtio.d):00467                        ORG       V.SCF
001D                  (       cocovtio.d):00468         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (       cocovtio.d):00469         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (       cocovtio.d):00470         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (       cocovtio.d):00471         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (       cocovtio.d):00472         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (       cocovtio.d):00473         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (       cocovtio.d):00474         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (       cocovtio.d):00475         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (       cocovtio.d):00476         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (       cocovtio.d):00477         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (       cocovtio.d):00478         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (       cocovtio.d):00479         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (       cocovtio.d):00480                        RMB       1                   unused                                       $2A
002B                  (       cocovtio.d):00481         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (       cocovtio.d):00482         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (       cocovtio.d):00483         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (       cocovtio.d):00484         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (       cocovtio.d):00485         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (       cocovtio.d):00486         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (       cocovtio.d):00487         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (       cocovtio.d):00488         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (       cocovtio.d):00489         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (       cocovtio.d):00490         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (       cocovtio.d):00491         CC3Parm        RMB       128-.               global parameter area
0080                  (       cocovtio.d):00492         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (       cocovtio.d):00493         CC3DSiz        EQU       .
                      (       cocovtio.d):00494         
                      (       cocovtio.d):00495         *****************************************************************************
                      (       cocovtio.d):00496         * GrfInt/WindInt global memory area
                      (       cocovtio.d):00497         * This area sits in system block 0 from $1000 to $10ff
     1000             (       cocovtio.d):00498         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (       cocovtio.d):00499                        ORG       0
0000                  (       cocovtio.d):00500         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (       cocovtio.d):00501         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (       cocovtio.d):00502         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (       cocovtio.d):00503         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (       cocovtio.d):00504         *g0003    rmb   2          NEW: UNUSED
0005                  (       cocovtio.d):00505         g0005          RMB       2                   Temp save in Windint RG
0007                  (       cocovtio.d):00506         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (       cocovtio.d):00507         G.MonTyp       RMB       1                   monitor type
     000A             (       cocovtio.d):00508         g000A          EQU       .                   Old label for compatibility
000A                  (       cocovtio.d):00509         G.CrDvFl       RMB       1  Are we current device flag (only set when all
                      (       cocovtio.d):00510         *                           Parms have been moved to Dev Mem)
                      (       cocovtio.d):00511         *                           0=We are not on our device
                      (       cocovtio.d):00512         *                           1=We are the current device
                      (       cocovtio.d):00513         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (       cocovtio.d):00514         *                           whether or not to update GIME regs themselves
                      (       cocovtio.d):00515         *                           If not current device, they don't.)
000B                  (       cocovtio.d):00516         G.WinType      RMB       1                   current device's V.TYPE
000C                  (       cocovtio.d):00517         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (       cocovtio.d):00518         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (       cocovtio.d):00519         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (       cocovtio.d):00520         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (       cocovtio.d):00521         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (       cocovtio.d):00522         G.BelVec       RMB       2                   BELL routine vector
0019                  (       cocovtio.d):00523         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (       cocovtio.d):00524         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (       cocovtio.d):00525         G.BelTnF       RMB       1                   BELL tone flag
001D                  (       cocovtio.d):00526         g001D          RMB       3
0020                  (       cocovtio.d):00527         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (       cocovtio.d):00528         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (       cocovtio.d):00529         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (       cocovtio.d):00530         *                           00000010 : VDGInt found
                      (       cocovtio.d):00531         *                           10000000 : GrfDrv found
0025                  (       cocovtio.d):00532         g0025          RMB       1
0026                  (       cocovtio.d):00533         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (       cocovtio.d):00534         *         IFEQ  TC9-true
                      (       cocovtio.d):00535         *CurLght  rmb   1          current keyboard light settings
                      (       cocovtio.d):00536         *         ELSE  
0027                  (       cocovtio.d):00537         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (       cocovtio.d):00538         *         ENDC  
0028                  (       cocovtio.d):00539         G.LKeyCd       RMB       1                   last keyboard code
0029                  (       cocovtio.d):00540         G.KyRept       RMB       1                   key repeat counter
                      (       cocovtio.d):00541         * A secondary 3 key table (same format as g002D below)
002A                  (       cocovtio.d):00542         G.2Key1        RMB       1                   $2A
002B                  (       cocovtio.d):00543         G.2Key2        RMB       1                   $2B
002C                  (       cocovtio.d):00544         G.2Key3        RMB       1
                      (       cocovtio.d):00545         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (       cocovtio.d):00546         * than 3 are hit, the last key is overwritten with the very last key down that
                      (       cocovtio.d):00547         * was checked. Format for all three is the same as the PIA column/row byte @
                      (       cocovtio.d):00548         * KeyFlag below.
002D                  (       cocovtio.d):00549         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (       cocovtio.d):00550         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (       cocovtio.d):00551         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (       cocovtio.d):00552         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (       cocovtio.d):00553         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (       cocovtio.d):00554         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (       cocovtio.d):00555         *                           %00000111-Column # (Output, 0-7)
                      (       cocovtio.d):00556         *                           %00111000-Row # (Input, 0-6)
0033                  (       cocovtio.d):00557         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (       cocovtio.d):00558         G.KySns        RMB       1                   key sense byte
0035                  (       cocovtio.d):00559         G.KySame       RMB       1                   same key flag
0036                  (       cocovtio.d):00560         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (       cocovtio.d):00561                        RMB       1
0038                  (       cocovtio.d):00562         g0038          RMB       1                   grfdrv initialized flag
0039                  (       cocovtio.d):00563                        RMB       2
003B                  (       cocovtio.d):00564         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (       cocovtio.d):00565         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (       cocovtio.d):00566         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (       cocovtio.d):00567         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (       cocovtio.d):00568         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (       cocovtio.d):00569         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (       cocovtio.d):00570         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (       cocovtio.d):00571         *         IFEQ  TC9-true
                      (       cocovtio.d):00572         *KeyParm  rmb   1          keyboard command parameter byte
                      (       cocovtio.d):00573         *         ELSE  
0063                  (       cocovtio.d):00574         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (       cocovtio.d):00575         *         ENDC  
0064                  (       cocovtio.d):00576         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (       cocovtio.d):00577         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (       cocovtio.d):00578         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (       cocovtio.d):00579         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (       cocovtio.d):00580         G.CoTble       RMB       6                   co-module table ($68)
006E                  (       cocovtio.d):00581         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (       cocovtio.d):00582         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (       cocovtio.d):00583         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (       cocovtio.d):00584         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (       cocovtio.d):00585         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (       cocovtio.d):00586         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (       cocovtio.d):00587         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (       cocovtio.d):00588         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (       cocovtio.d):00589         g00BD          RMB       1                   Current screen type for work window table
00BE                  (       cocovtio.d):00590         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (       cocovtio.d):00591         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (       cocovtio.d):00592         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (       cocovtio.d):00593         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (       cocovtio.d):00594         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (       cocovtio.d):00595         G.MsSig        RMB       1                   mouse signal flag
00C7                  (       cocovtio.d):00596         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (       cocovtio.d):00597         g00D7          RMB       9
00E0                  (       cocovtio.d):00598         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (       cocovtio.d):00599         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (       cocovtio.d):00600         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (       cocovtio.d):00601         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (       cocovtio.d):00602         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (       cocovtio.d):00603         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (       cocovtio.d):00604         
                      (       cocovtio.d):00605         *****************************************************************************
                      (       cocovtio.d):00606         * GrfDrv global memory data definitions
                      (       cocovtio.d):00607         * This area sits in system block 0 from $1100 to $119E
     1100             (       cocovtio.d):00608         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (       cocovtio.d):00609                        ORG       0
0000                  (       cocovtio.d):00610         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (       cocovtio.d):00611         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (       cocovtio.d):00612         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (       cocovtio.d):00613         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (       cocovtio.d):00614         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (       cocovtio.d):00615         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (       cocovtio.d):00616         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (       cocovtio.d):00617         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (       cocovtio.d):00618         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (       cocovtio.d):00619         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (       cocovtio.d):00620         *                             overlay width has been copied
000B                  (       cocovtio.d):00621         gr000B         RMB       1
000C                  (       cocovtio.d):00622         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (       cocovtio.d):00623         gr000E         RMB       1
000F                  (       cocovtio.d):00624         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (       cocovtio.d):00625         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (       cocovtio.d):00626         gr0012         RMB       6
0018                  (       cocovtio.d):00627         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (       cocovtio.d):00628         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (       cocovtio.d):00629         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (       cocovtio.d):00630         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (       cocovtio.d):00631         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (       cocovtio.d):00632         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (       cocovtio.d):00633         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (       cocovtio.d):00634         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (       cocovtio.d):00635         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (       cocovtio.d):00636         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (       cocovtio.d):00637         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (       cocovtio.d):00638         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (       cocovtio.d):00639         gr002C         RMB       2
002E                  (       cocovtio.d):00640         gr002E         RMB       2                   current window table entry
0030                  (       cocovtio.d):00641         gr0030         RMB       2                   current screen table ptr
0032                  (       cocovtio.d):00642         gr0032         RMB       1                   Last block # we used for buffers
0033                  (       cocovtio.d):00643         gr0033         RMB       2                   Last offset we used for buffers
0035                  (       cocovtio.d):00644         gr0035         RMB       1                   group
0036                  (       cocovtio.d):00645         gr0036         RMB       2                   offset
0038                  (       cocovtio.d):00646         gr0038         RMB       1                   group returned (new)
0039                  (       cocovtio.d):00647         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (       cocovtio.d):00648         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (       cocovtio.d):00649         gr003B         RMB       2                   end of vars ptr?
003D                  (       cocovtio.d):00650         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (       cocovtio.d):00651         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (       cocovtio.d):00652         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (       cocovtio.d):00653         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (       cocovtio.d):00654         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (       cocovtio.d):00655         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (       cocovtio.d):00656         gr0047         RMB       2                   'Working' X coordinate
0049                  (       cocovtio.d):00657         gr0049         RMB       2                   'Working' Y coordinate
004B                  (       cocovtio.d):00658         gr004B         RMB       2                   current X
004D                  (       cocovtio.d):00659         gr004D         RMB       2                   current Y
004F                  (       cocovtio.d):00660         gr004F         RMB       2                   X Size (in bytes)
0051                  (       cocovtio.d):00661         gr0051         RMB       2                   Y Size (in bytes)
0053                  (       cocovtio.d):00662         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (       cocovtio.d):00663         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (       cocovtio.d):00664         gr0057         RMB       1                   group
0058                  (       cocovtio.d):00665         gr0058         RMB       1                   buffer #
0059                  (       cocovtio.d):00666         gr0059         RMB       1                   save switch for overlay
005A                  (       cocovtio.d):00667         gr005A         RMB       1                   PRN
005B                  (       cocovtio.d):00668         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (       cocovtio.d):00669         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (       cocovtio.d):00670         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (       cocovtio.d):00671         Gr.STYMk       RMB       1                   STY marker
0061                  (       cocovtio.d):00672         gr0061         RMB       1                   foreground RGB data
0062                  (       cocovtio.d):00673         gr0062         RMB       1                   background RGB data
0063                  (       cocovtio.d):00674         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (       cocovtio.d):00675         gr0064         RMB       2                   PSet vector
0066                  (       cocovtio.d):00676         gr0066         RMB       2                   pset offset
0068                  (       cocovtio.d):00677         gr0068         RMB       2                   LSet vector
006A                  (       cocovtio.d):00678         gr006A         RMB       2                   max X co-ordinate
006C                  (       cocovtio.d):00679         gr006C         RMB       2                   max Y co-ordinate
006E                  (       cocovtio.d):00680         gr006E         RMB       2                   X pixel count
0070                  (       cocovtio.d):00681         gr0070         RMB       2                   Y pixel count
0072                  (       cocovtio.d):00682         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (       cocovtio.d):00683         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (       cocovtio.d):00684         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (       cocovtio.d):00685         gr0077         RMB       2                   Vector for right direction FFill
0079                  (       cocovtio.d):00686         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (       cocovtio.d):00687         gr007A         RMB       2                   Vector for left direction FFill
007C                  (       cocovtio.d):00688         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (       cocovtio.d):00689         gr007D         RMB       1                   buffer block #
007E                  (       cocovtio.d):00690         gr007E         RMB       2                   buffer offset #
0080                  (       cocovtio.d):00691         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (       cocovtio.d):00692         gr0082         RMB       3                   3 byte extended screen address
0085                  (       cocovtio.d):00693         gr0085         RMB       2                   temp
0087                  (       cocovtio.d):00694         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (       cocovtio.d):00695         gr0097         RMB       1                   temp
0098                  (       cocovtio.d):00696         gr0098         RMB       1                   temp
                      (       cocovtio.d):00697         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (       cocovtio.d):00698         gr0099         RMB       2                   temp
                      (       cocovtio.d):00699         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (       cocovtio.d):00700         gr009B         RMB       1                   counter temp
009C                  (       cocovtio.d):00701         gr009C         RMB       1
009D                  (       cocovtio.d):00702         gr009D         RMB       2                   offset to buffer in block
009F                  (       cocovtio.d):00703         gr009F         RMB       1
00A0                  (       cocovtio.d):00704         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (       cocovtio.d):00705         gr00A1         RMB       2                   vector routine for (changes lots)
                      (       cocovtio.d):00706         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (       cocovtio.d):00707         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (       cocovtio.d):00708         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (       cocovtio.d):00709         gr00A7         RMB       2
00A9                  (       cocovtio.d):00710         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (       cocovtio.d):00711         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (       cocovtio.d):00712         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (       cocovtio.d):00713         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (       cocovtio.d):00714         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (       cocovtio.d):00715         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (       cocovtio.d):00716         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (       cocovtio.d):00717         gr00B3         RMB       1                   temp veriable grfdrv
00B4                  (       cocovtio.d):00718         gr00B4         RMB       1                   temp veriable grfdrv
00B5                  (       cocovtio.d):00719         gr00B5         RMB       1                   regW for grfdrv
00B6                  (       cocovtio.d):00720         gr00B6         RMB       1
00B7                  (       cocovtio.d):00721         gr00B7         RMB       2
00B9                  (       cocovtio.d):00722         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (       cocovtio.d):00723         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (       cocovtio.d):00724         gr00BD         RMB       2                   previously used in grfdrv at $B6
00BF                  (       cocovtio.d):00725         gr00BF         RMB       256-.
                      (       cocovtio.d):00726         * GPLoad buffer - $1200 in system block 0
0100                  (       cocovtio.d):00727         GPBuf          RMB       72                  common move buffer for gpload/get/put
     0048             (       cocovtio.d):00728         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (       cocovtio.d):00729         
                      (       cocovtio.d):00730         *****************************************************************************
                      (       cocovtio.d):00731         * Window table entry structure
                      (       cocovtio.d):00732         * These tables sit in system block 0 and there is 1 for every window init'd
                      (       cocovtio.d):00733         * including any overlay windows.
     0020             (       cocovtio.d):00734         MaxWind        EQU       32                  maximum allowable window tables
     1290             (       cocovtio.d):00735         WinBase        EQU       $1290               base address to start of window tables
                      (       cocovtio.d):00736                        ORG       -$10
FFF0                  (       cocovtio.d):00737         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (       cocovtio.d):00738         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (       cocovtio.d):00739         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (       cocovtio.d):00740         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (       cocovtio.d):00741         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (       cocovtio.d):00742         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (       cocovtio.d):00743         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (       cocovtio.d):00744         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (       cocovtio.d):00745         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (       cocovtio.d):00746         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (       cocovtio.d):00747         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (       cocovtio.d):00748         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (       cocovtio.d):00749         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (       cocovtio.d):00750         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (       cocovtio.d):00751         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (       cocovtio.d):00752         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (       cocovtio.d):00753         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (       cocovtio.d):00754         Wt.Back        RMB       1                   background palette #                         $07
0008                  (       cocovtio.d):00755         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (       cocovtio.d):00756         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (       cocovtio.d):00757         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (       cocovtio.d):00758         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (       cocovtio.d):00759         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (       cocovtio.d):00760         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (       cocovtio.d):00761         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (       cocovtio.d):00762         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (       cocovtio.d):00763         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (       cocovtio.d):00764         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (       cocovtio.d):00765         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (       cocovtio.d):00766         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (       cocovtio.d):00767         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (       cocovtio.d):00768         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (       cocovtio.d):00769         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24,0-191)                 $1D
001F                  (       cocovtio.d):00770         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (       cocovtio.d):00771         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (       cocovtio.d):00772         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (       cocovtio.d):00773         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (       cocovtio.d):00774         * NOTE: The following default settings are what the window was initialized
                      (       cocovtio.d):00775         *       with, and thus are the MAXIMUM start/size the window can handle
                      (       cocovtio.d):00776         *       until it is restarted (DWEnd & DWSet)
                      (       cocovtio.d):00777         *       They also appear to be used in WindInt to determine the coords &
                      (       cocovtio.d):00778         *       sizes for control+content regions
0026                  (       cocovtio.d):00779         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (       cocovtio.d):00780         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (       cocovtio.d):00781         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (       cocovtio.d):00782         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (       cocovtio.d):00783         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (       cocovtio.d):00784         Wt.Siz         EQU       .+$10
                      (       cocovtio.d):00785         
                      (       cocovtio.d):00786         *****************************************************************************
                      (       cocovtio.d):00787         * Screen table entrys
                      (       cocovtio.d):00788         * These tables sit in system block 0 base=$1A80
                      (       cocovtio.d):00789         
     0010             (       cocovtio.d):00790         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (       cocovtio.d):00791         STblBse        EQU       $1A80               base address of screen tables
                      (       cocovtio.d):00792                        ORG       0
0000                  (       cocovtio.d):00793         St.Sty         RMB       1                   Screen type                         $00
0001                  (       cocovtio.d):00794         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (       cocovtio.d):00795         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (       cocovtio.d):00796         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (       cocovtio.d):00797         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (       cocovtio.d):00798         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (       cocovtio.d):00799         St.Back        RMB       1                   Background palette register #       $07
0008                  (       cocovtio.d):00800         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (       cocovtio.d):00801         St.Res         RMB       7                   UNUSED???                           $09
                      (       cocovtio.d):00802         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (       cocovtio.d):00803         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (       cocovtio.d):00804         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (       cocovtio.d):00805         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
0010                  (       cocovtio.d):00806         St.Pals        RMB       16                  Palette register contents           $10
     0020             (       cocovtio.d):00807         St.Siz         EQU       .
                      (       cocovtio.d):00808         
                      (       cocovtio.d):00809         *****************************************************************************
                      (       cocovtio.d):00810         * Graphics buffer tables
                      (       cocovtio.d):00811         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (       cocovtio.d):00812         * data.
                      (       cocovtio.d):00813                        ORG       0
0000                  (       cocovtio.d):00814         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (       cocovtio.d):00815         Grf.Off        RMB       2                   back block header offset            $01
0003                  (       cocovtio.d):00816         Grf.Grp        RMB       1                   group #                             $03
0004                  (       cocovtio.d):00817         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (       cocovtio.d):00818         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (       cocovtio.d):00819         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (       cocovtio.d):00820         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (       cocovtio.d):00821         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (       cocovtio.d):00822         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (       cocovtio.d):00823         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (       cocovtio.d):00824         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (       cocovtio.d):00825         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (       cocovtio.d):00826         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (       cocovtio.d):00827         Grf.Siz        EQU       .                   $20
                      (       cocovtio.d):00828         
                      (       cocovtio.d):00829         *****************************************************************************
                      (       cocovtio.d):00830         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (       cocovtio.d):00831         * $1075-$0176
                      (       cocovtio.d):00832         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (       cocovtio.d):00833                        ORG       0
0000                  (       cocovtio.d):00834         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (       cocovtio.d):00835         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (       cocovtio.d):00836         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (       cocovtio.d):00837         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (       cocovtio.d):00838         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (       cocovtio.d):00839         Gt.BClr        RMB       1                   Background color                               $08
0009                  (       cocovtio.d):00840         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (       cocovtio.d):00841         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (       cocovtio.d):00842         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (       cocovtio.d):00843         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (       cocovtio.d):00844         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (       cocovtio.d):00845         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (       cocovtio.d):00846         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (       cocovtio.d):00847         GTabSz         EQU       .
                      (       cocovtio.d):00848         
                      (       cocovtio.d):00849         *****************************************************************************
                      (       cocovtio.d):00850         * This table is located in the graphics table memory and is offset from
                      (       cocovtio.d):00851         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (       cocovtio.d):00852         * WindInt.
                      (       cocovtio.d):00853         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (       cocovtio.d):00854         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (       cocovtio.d):00855         *  COMBINATION EVERY TIME
                      (       cocovtio.d):00856                        ORG       $0240
0240                  (       cocovtio.d):00857                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (       cocovtio.d):00858                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (       cocovtio.d):00859                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (       cocovtio.d):00860                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (       cocovtio.d):00861         
                      (       cocovtio.d):00862         *****************************************************************************
                      (       cocovtio.d):00863         * WindInt menu handling table entry definition
                      (       cocovtio.d):00864                        ORG       0
0000                  (       cocovtio.d):00865         MnuXNum        RMB       1                   menu #
0001                  (       cocovtio.d):00866         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (       cocovtio.d):00867         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (       cocovtio.d):00868                        RMB       1                   unused?
     0004             (       cocovtio.d):00869         MnuHSiz        EQU       .
                      (       cocovtio.d):00870         
                      (       cocovtio.d):00871         *****************************************************************************
                      (       cocovtio.d):00872         * Character binary switches
     0080             (       cocovtio.d):00873         TChr           EQU       %10000000           transparent characters
     0040             (       cocovtio.d):00874         Under          EQU       %01000000           underline characters
     0020             (       cocovtio.d):00875         Bold           EQU       %00100000           bold characters
     0010             (       cocovtio.d):00876         Prop           EQU       %00010000           proportional spacing of characters
     0008             (       cocovtio.d):00877         Scale          EQU       %00001000           automatic window scaling
     0004             (       cocovtio.d):00878         Invers         EQU       %00000100           inverse characters
     0002             (       cocovtio.d):00879         NoCurs         EQU       %00000010           no cursor display
     0001             (       cocovtio.d):00880         Protect        EQU       %00000001           device window protection
                      (       cocovtio.d):00881         
                      (       cocovtio.d):00882         *****************************************************************************
                      (       cocovtio.d):00883         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (       cocovtio.d):00884         Current        EQU       $ff                 Current screen
                      (       cocovtio.d):00885         *         equ   1          640x200x2
                      (       cocovtio.d):00886         *         equ   2          320x200x4
                      (       cocovtio.d):00887         *         equ   3          640x200x4
                      (       cocovtio.d):00888         *         equ   4          320x200x16
                      (       cocovtio.d):00889         *         equ   $85        80 column text
                      (       cocovtio.d):00890         *         equ   $86        40 column text
                      (       cocovtio.d):00891         
                      (       cocovtio.d):00892         *************************************
                      (       cocovtio.d):00893         * Window default palette color codes
                      (       cocovtio.d):00894         *
                      (       cocovtio.d):00895                        ORG       0
0000                  (       cocovtio.d):00896         White.         RMB       1
0001                  (       cocovtio.d):00897         Blue.          RMB       1
0002                  (       cocovtio.d):00898         Black.         RMB       1
0003                  (       cocovtio.d):00899         Green.         RMB       1
0004                  (       cocovtio.d):00900         Red.           RMB       1
0005                  (       cocovtio.d):00901         Yellow.        RMB       1
0006                  (       cocovtio.d):00902         Magenta.       RMB       1
0007                  (       cocovtio.d):00903         Cyan.          RMB       1
                      (       cocovtio.d):00904         
                      (       cocovtio.d):00905                        ENDC      
                      (       cocovtio.d):00906                        ENDC      
                      (/home/strick/6809):00202         ;         use   scfdefs
                      (/home/strick/6809):00203                  IFGT  Level-1
                      (/home/strick/6809):00204                  use   cocovtio.d
                      (       cocovtio.d):00001                        IFNE      COCOVTIO.D-1
0008                  (       cocovtio.d):00002         COCOVTIO.D     SET       1
                      (       cocovtio.d):00003         
                      (       cocovtio.d):00004                        IFEQ      Level-1
                      (       cocovtio.d):00005         
                      (       cocovtio.d):00006         ********************************************************************
                      (       cocovtio.d):00007         * VTIODefs - Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00008         *
                      (       cocovtio.d):00009         * $Id$
                      (       cocovtio.d):00010         *
                      (       cocovtio.d):00011         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00012         * Comment
                      (       cocovtio.d):00013         * ------------------------------------------------------------------
                      (       cocovtio.d):00014         *          2004/11/29  P.Harvey-Smith.
                      (       cocovtio.d):00015         * Added symbolic defines for bits in V.CoLoad.
                      (       cocovtio.d):00016         *
                      (       cocovtio.d):00017         *          2004/12/02  P.Harvey-Smith.
                      (       cocovtio.d):00018         * Moved over all variables from co51.asm
                      (       cocovtio.d):00019         *
                      (       cocovtio.d):00020         *          2005/04/09  P.Harvey-Smith.
                      (       cocovtio.d):00021         * Decoded rest of the CoHR memory locations.
                      (       cocovtio.d):00022         *
                      (       cocovtio.d):00023         *              2005/04/24  P.Harvey-Smith.
                      (       cocovtio.d):00024         * Added variables for cursor flash, currently only implemented in co51
                      (       cocovtio.d):00025         *
                      (       cocovtio.d):00026                        NAM       VTIODefs  
                      (       cocovtio.d):00027                        TTL       Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00028         
                      (       cocovtio.d):00029         ********************
                      (       cocovtio.d):00030         * VTIO Static Memory
                      (       cocovtio.d):00031         *
                      (       cocovtio.d):00032                        ORG       V.SCF
0008                  (       cocovtio.d):00033         V.ScrnA        RMB       2                   (2) screen start address in system memory
0008                  (       cocovtio.d):00034         V.ScrnE        RMB       2                   (2) address of end of screen
0008                  (       cocovtio.d):00035         V.CrsrA        RMB       1                   (2) cursor address
0008                  (       cocovtio.d):00036         V.CrsAL        RMB       1                   cursor address low
0008                  (       cocovtio.d):00037         V.CChar        RMB       1                   value of character under cursor
0008                  (       cocovtio.d):00038         V.Mode         RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0008                  (       cocovtio.d):00039         V.NGChr        RMB       1                   number of additional characters to get
0008                  (       cocovtio.d):00040         V.RTAdd        RMB       2                   (2) return address after getting characters
0008                  (       cocovtio.d):00041         V.NChar        RMB       1                   character to process
0008                  (       cocovtio.d):00042         V.NChr2        RMB       1                   and the next one
                      (       cocovtio.d):00043                        RMB       1
0008                  (       cocovtio.d):00044         V.Chr1         RMB       1                   same as under cursor character
0008                  (       cocovtio.d):00045         V.CColr        RMB       1                   cursor color
0008                  (       cocovtio.d):00046         V.Col          RMB       1                   number of columns for this screen
0008                  (       cocovtio.d):00047         V.Row          RMB       1                   number of rows
0008                  (       cocovtio.d):00048         V.Alpha        RMB       1                   0 when in alpha mode
0008                  (       cocovtio.d):00049         V.PIA1         RMB       1                   PIA1Base value
0008                  (       cocovtio.d):00050         V.Rdy          RMB       1                   device ready (see SS.DStat 0=not ready)
0008                  (       cocovtio.d):00051         V.CFlg1        RMB       1                   VDG display code values
0008                  (       cocovtio.d):00052         V.SBAdd        RMB       2                   (2) address of block screen is in
0008                  (       cocovtio.d):00053         V.GBuff        RMB       2                   allocation for graphics buffers (block#)
0008                  (       cocovtio.d):00054         V.AGBuf        RMB       4                   (2) additional graphics buffer
0008                  (       cocovtio.d):00055         V.FFMem        RMB       2                   Flood fill alloc'ed mem
0008                  (       cocovtio.d):00056         V.FFSPt        RMB       2                   Flood fill current stack pointer
0008                  (       cocovtio.d):00057         V.FFSTp        RMB       1                   Flood fill stack top
0008                  (       cocovtio.d):00058         V.FF6          RMB       1                   flood fill flag
0008                  (       cocovtio.d):00059         V.FFFlag       RMB       1                   ??
0008                  (       cocovtio.d):00060         V.MTabl        RMB       2                   (2) address of mask table for pixels in byte
0008                  (       cocovtio.d):00061         V.PixBt        RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0008                  (       cocovtio.d):00062         V.GCrsX        RMB       1                   graphics cursor X value
0008                  (       cocovtio.d):00063         V.GCrsY        RMB       1                   graphics cursor Y
0008                  (       cocovtio.d):00064         V.Msk1         RMB       1                   mask byte 1
0008                  (       cocovtio.d):00065         V.Msk2         RMB       1                   mask byte 2 (00,55,AA,FF)
0008                  (       cocovtio.d):00066         V.MCol         RMB       1                   color? (C003,8001)
0008                  (       cocovtio.d):00067         V.4A           RMB       1
0008                  (       cocovtio.d):00068         V.PMask        RMB       1                   pixel mask for colors (i.e. $55, $CC etc)
0008                  (       cocovtio.d):00069         V.4C           RMB       1
0008                  (       cocovtio.d):00070         V.4D           RMB       1
0008                  (       cocovtio.d):00071         V.4E           RMB       1
0008                  (       cocovtio.d):00072         V.4F           RMB       1
0008                  (       cocovtio.d):00073         V.Caps         RMB       1                   caps lock info: $00=lower $FF=upper
0008                  (       cocovtio.d):00074         V.ClkCnt       RMB       1                   clock count ??
0008                  (       cocovtio.d):00075         V.WrChr        RMB       1                   character to write
0008                  (       cocovtio.d):00076         V.CurCo        RMB       1                   current CO-module in use
                      (       cocovtio.d):00077         * start of CoWP-specific static memory
0008                  (       cocovtio.d):00078         V.Co80X        RMB       1                   V.54
0008                  (       cocovtio.d):00079         V.Co80Y        RMB       1                   V.55
0008                  (       cocovtio.d):00080         V.ColPtr       RMB       1                   V.56
0008                  (       cocovtio.d):00081         V.RowPtr       RMB       1                   V.57
0008                  (       cocovtio.d):00082         V.C80X         RMB       1                   CoWP X position
0008                  (       cocovtio.d):00083         V.C80Y         RMB       1                   CoWP Y position
0008                  (       cocovtio.d):00084         V.Invers       RMB       1
                      (       cocovtio.d):00085         * end of CoWP-specific static memory
0008                  (       cocovtio.d):00086         V.DspVct       RMB       2                   vector to display screen
0008                  (       cocovtio.d):00087         V.CnvVct       RMB       2                   vector to X/Y to address conversion
0008                  (       cocovtio.d):00088         V.LKeyCd       RMB       1                   last key code
0008                  (       cocovtio.d):00089         V.2Key1        RMB       1                   2nd Key 1
0008                  (       cocovtio.d):00090         V.2Key2        RMB       1                   2nd Key 2
0008                  (       cocovtio.d):00091         V.2Key3        RMB       1                   2nd Key 3
0008                  (       cocovtio.d):00092         V.Key1         RMB       1                   Key 1
0008                  (       cocovtio.d):00093         V.Key2         RMB       1                   Key 2
0008                  (       cocovtio.d):00094         V.Key3         RMB       1                   Key 3
0008                  (       cocovtio.d):00095         V.ShftDn       RMB       1                   SHIFT/CTRL state
0008                  (       cocovtio.d):00096         V.CtrlDn       RMB       1                   CTRL key down
0008                  (       cocovtio.d):00097         V.KeyFlg       RMB       1                   key flag
0008                  (       cocovtio.d):00098         V.AltDwn       RMB       1                   ALT key down
0008                  (       cocovtio.d):00099         V.KySns        RMB       1                   key sense flags
0008                  (       cocovtio.d):00100         V.KySame       RMB       1                   key same as last flag
0008                  (       cocovtio.d):00101         V.KySnsF       RMB       1                   key sense flag
0008                  (       cocovtio.d):00102         V.Spcl         RMB       1
0008                  (       cocovtio.d):00103         V.KTblLC       RMB       1                   key table entry #
0008                  (       cocovtio.d):00104         V.6F           RMB       1                   ???
0008                  (       cocovtio.d):00105         V.COLoad       RMB       1                   CO-module loaded flags
0008                  (       cocovtio.d):00106         V.CFlag        RMB       1                   true lowercase flag $10=true, $00=false
0008                  (       cocovtio.d):00107         V.GrfDrvE      RMB       2                   GrfDrv entry point
0008                  (       cocovtio.d):00108         V.CoVDGE       RMB       2                   CoVDG entry point
0008                  (       cocovtio.d):00109         V.CoWPE        RMB       2                   CoWP entry point
0008                  (       cocovtio.d):00110         V.CoHRE        RMB       2                   CoHR entry point
                      (       cocovtio.d):00111         
0008                  (       cocovtio.d):00112         V.Flash        RMB       2                   Cursor flash routine address.
0008                  (       cocovtio.d):00113         v.FlashCount   RMB       1                   Cursor flash count
0008                  (       cocovtio.d):00114         V.NoFlash      RMB       1                   When this is non-zero do not flash cursor
                      (       cocovtio.d):00115         
                      (       cocovtio.d):00116         * CoHR vars
                      (       cocovtio.d):00117         
0008                  (       cocovtio.d):00118         V.51ScrnA      RMB       2                   * Screen address.
0008                  (       cocovtio.d):00119         V.51XPos       RMB       1                   * X co-ordinate
0008                  (       cocovtio.d):00120         V.51YPos       RMB       1                   * Y co-ordinate
0008                  (       cocovtio.d):00121         V.51EscSeq     RMB       1                   * In escape sequence
0008                  (       cocovtio.d):00122         V.51ReverseFlag RMB       1                   * Reverse video flag
0008                  (       cocovtio.d):00123         V.51UnderlineFlag RMB       1                   * Underline flag
0008                  (       cocovtio.d):00124         V.51CtrlDispatch RMB       2                   * Ctrl char dispatch address, currently processing
0008                  (       cocovtio.d):00125         V.51BytePixOffset RMB       1                   * byte offset in screen line, of character X position        
0008                  (       cocovtio.d):00126         V.51OldCursorPosX RMB       1                   * Position of old cursor before update        
0008                  (       cocovtio.d):00127         V.51OldCursorPosY RMB       1
0008                  (       cocovtio.d):00128         V.51CursorChanged RMB       1                   * Has cursor position changed ? 1=yes,0=no
0008                  (       cocovtio.d):00129         V.51CursorOn   RMB       1                   * Is cursor on ? 1=yes 0=no                         
0008                  (       cocovtio.d):00130         V.51XORFlag    RMB       1                   * and data to screen (0) or Xor (1)                       
0008                  (       cocovtio.d):00131         V.51ScreenMask1 RMB       1                   * screen masks for drawing characters on screen         
0008                  (       cocovtio.d):00132         V.51ScreenMask2 RMB       1
                      (       cocovtio.d):00133         * End of CoHR vars
                      (       cocovtio.d):00134         **** Note these have to come at the end of the defs, or the keyboard ****
                      (       cocovtio.d):00135         **** code can clobber variables defined after these !                ****
0008                  (       cocovtio.d):00136         V.IBufH        RMB       1                   input buffer head
0008                  (       cocovtio.d):00137         V.IBufT        RMB       1                   input buffer tail
0008                  (       cocovtio.d):00138         V.InBuf        RMB       1                   input buffer ptr
0008                  (       cocovtio.d):00139         V.51End        RMB       1
                      (       cocovtio.d):00140                        RMB       250-.
0008                  (       cocovtio.d):00141         V.Last         EQU       .
                      (       cocovtio.d):00142         
                      (       cocovtio.d):00143         
                      (       cocovtio.d):00144         * Unknown for now
                      (       cocovtio.d):00145         *VD.FFMem rmb   2  (2) bottom of stack for flood fill
                      (       cocovtio.d):00146         *VD.FFSPt rmb   2  (2) flood fill stack pointer
                      (       cocovtio.d):00147         *VD.FFSTp rmb   2  (2) flood fill stack top pointer
                      (       cocovtio.d):00148         *VD.FF6   rmb   1   flood fill flag
                      (       cocovtio.d):00149         *VD.MCol2 rmb   1  color
                      (       cocovtio.d):00150         *VD.FF1   rmb   1  data for flood fill
                      (       cocovtio.d):00151         *VD.FF2   rmb   1  data for flood fill
                      (       cocovtio.d):00152         *VD.FFMsk rmb   1  flood fill mask
                      (       cocovtio.d):00153         *VD.FFFlg rmb   1  flood fill flag
                      (       cocovtio.d):00154         *VD.Palet rmb   16 (16) current palette values
                      (       cocovtio.d):00155         *VD.PlFlg rmb   1  initialized to $08 by L00DB, and then unused!
                      (       cocovtio.d):00156         
                      (       cocovtio.d):00157         *
                      (       cocovtio.d):00158         * Defs for V.COLoad flags.
                      (       cocovtio.d):00159         * 
                      (       cocovtio.d):00160         
0008                  (       cocovtio.d):00161         ModCoVDG       EQU       %00000010           CoVDG, Built-in VDG 32x16.
0008                  (       cocovtio.d):00162         ModCoWP        EQU       %00000100           CoWP, WordPak, 80x25
0008                  (       cocovtio.d):00163         ModCoHR        EQU       %00001000           CoHR, PMODE 4 51x25 text
                      (       cocovtio.d):00164         
                      (       cocovtio.d):00165         *
                      (       cocovtio.d):00166         * Defs for cursor flash counter
                      (       cocovtio.d):00167         *
                      (       cocovtio.d):00168         
0008                  (       cocovtio.d):00169         CFlash50hz     EQU       25                  * 50Hz flash counter
0008                  (       cocovtio.d):00170         CFlash60Hz     EQU       30                  * 60Hz flash counter
                      (       cocovtio.d):00171         
                      (       cocovtio.d):00172                        ELSE
                      (       cocovtio.d):00173                        
                      (       cocovtio.d):00174         ********************************************************************
                      (       cocovtio.d):00175         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00176         *
                      (       cocovtio.d):00177         * $Id$
                      (       cocovtio.d):00178         *
                      (       cocovtio.d):00179         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00180         * Comment
                      (       cocovtio.d):00181         * ------------------------------------------------------------------
                      (       cocovtio.d):00182         *          2004/07/18  Boisy G. Pitre
                      (       cocovtio.d):00183         * Started from systype
                      (       cocovtio.d):00184         
                      (       cocovtio.d):00185                        NAM       VTIODefs
                      (       cocovtio.d):00186                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00187         
                      (       cocovtio.d):00188         ****************
                      (       cocovtio.d):00189         * Window Devices
                      (       cocovtio.d):00190         *
                      (       cocovtio.d):00191                        ORG       $FF9F
0008                  (       cocovtio.d):00192         A.W            RMB       1                   $FF9F Generic Window Descriptor
0008                  (       cocovtio.d):00193         A.TermW        RMB       1                   $FFA0 Windowing Term
0008                  (       cocovtio.d):00194         A.W1           RMB       1                   $FFA1
0008                  (       cocovtio.d):00195         A.W2           RMB       1                   $FFA2
0008                  (       cocovtio.d):00196         A.W3           RMB       1                   $FFA3
0008                  (       cocovtio.d):00197         A.W4           RMB       1                   $FFA4
0008                  (       cocovtio.d):00198         A.W5           RMB       1                   $FFA5
0008                  (       cocovtio.d):00199         A.W6           RMB       1                   $FFA6
0008                  (       cocovtio.d):00200         A.W7           RMB       1                   $FFA7
0008                  (       cocovtio.d):00201         A.W8           RMB       1                   $FFA8
0008                  (       cocovtio.d):00202         A.W9           RMB       1                   $FFA9
0008                  (       cocovtio.d):00203         A.W10          RMB       1                   $FFAA
0008                  (       cocovtio.d):00204         A.W11          RMB       1                   $FFAB
0008                  (       cocovtio.d):00205         A.W12          RMB       1                   $FFAC
0008                  (       cocovtio.d):00206         A.W13          RMB       1                   $FFAD
0008                  (       cocovtio.d):00207         A.W14          RMB       1                   $FFAE
0008                  (       cocovtio.d):00208         A.W15          RMB       1                   $FFAF
                      (       cocovtio.d):00209         
                      (       cocovtio.d):00210         **********************************
                      (       cocovtio.d):00211         * Pointer Device Packet Definition
                      (       cocovtio.d):00212         *
                      (       cocovtio.d):00213                        ORG       0
0008                  (       cocovtio.d):00214         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0008                  (       cocovtio.d):00215         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0008                  (       cocovtio.d):00216         Pt.ToTm        RMB       1                   Time out Initial value
                      (       cocovtio.d):00217                        RMB       2                   reserved
0008                  (       cocovtio.d):00218         Pt.TTTo        RMB       1                   Time Till Timeout
0008                  (       cocovtio.d):00219         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (       cocovtio.d):00220         Pt.CBSA        RMB       1                   Current Button State Button A
0008                  (       cocovtio.d):00221         Pt.CBSB        RMB       1                   Current Button State Button B
0008                  (       cocovtio.d):00222         Pt.CCtA        RMB       1                   Click Count Button A
0008                  (       cocovtio.d):00223         Pt.CCtB        RMB       1                   Click Count Button B
0008                  (       cocovtio.d):00224         Pt.TTSA        RMB       1                   Time This State Counter Button A
0008                  (       cocovtio.d):00225         Pt.TTSB        RMB       1                   Time This State Counter Button B
0008                  (       cocovtio.d):00226         Pt.TLSA        RMB       1                   Time Last State Counter Button A
0008                  (       cocovtio.d):00227         Pt.TLSB        RMB       1                   Time Last State Counter Button B
                      (       cocovtio.d):00228                        RMB       2                   Reserved
0008                  (       cocovtio.d):00229         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0008                  (       cocovtio.d):00230         Pt.BDY         RMB       2                   Button down Y value
0008                  (       cocovtio.d):00231         Pt.Stat        RMB       1                   Window Pointer type location
0008                  (       cocovtio.d):00232         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0008                  (       cocovtio.d):00233         Pt.AcX         RMB       2                   Actual X Value
0008                  (       cocovtio.d):00234         Pt.AcY         RMB       2                   Actual Y Value
0008                  (       cocovtio.d):00235         Pt.WRX         RMB       2                   Window Relative X
0008                  (       cocovtio.d):00236         Pt.WRY         RMB       2                   Window Relative Y
0008                  (       cocovtio.d):00237         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (       cocovtio.d):00238         
                      (       cocovtio.d):00239         **************************
                      (       cocovtio.d):00240         * window regions for mouse
                      (       cocovtio.d):00241         *
0008                  (       cocovtio.d):00242         WR.Cntnt       EQU       0                   content region
0008                  (       cocovtio.d):00243         WR.Cntrl       EQU       1                   control region
0008                  (       cocovtio.d):00244         WR.OfWin       EQU       2                   off window
                      (       cocovtio.d):00245         
                      (       cocovtio.d):00246         *************************************
                      (       cocovtio.d):00247         * Standard system get/put buffer defs
                      (       cocovtio.d):00248         *
                      (       cocovtio.d):00249         *
                      (       cocovtio.d):00250         * system group numbers
                      (       cocovtio.d):00251         *
                      (       cocovtio.d):00252                        ORG       200
0008                  (       cocovtio.d):00253         Grp.Fnt        RMB       1                   font group
0008                  (       cocovtio.d):00254         Grp.Clip       RMB       1                   clipboard group
0008                  (       cocovtio.d):00255         Grp.Ptr        RMB       1                   pointer group
0008                  (       cocovtio.d):00256         Grp.Pat2       RMB       1                   pattern group 2 color
0008                  (       cocovtio.d):00257         Grp.Pat4       RMB       1                   pattern group 4 color
0008                  (       cocovtio.d):00258         Grp.Pat6       RMB       1                   pattern group 16 color
                      (       cocovtio.d):00259         *
                      (       cocovtio.d):00260         * font buffer numbers
                      (       cocovtio.d):00261         *
                      (       cocovtio.d):00262                        ORG       1
0008                  (       cocovtio.d):00263         Fnt.S8x8       RMB       1                   standard 8x8 font
0008                  (       cocovtio.d):00264         Fnt.S6x8       RMB       1                   standard 6x8 font
0008                  (       cocovtio.d):00265         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (       cocovtio.d):00266         *
                      (       cocovtio.d):00267         * pattern buffer numbers
                      (       cocovtio.d):00268         *
                      (       cocovtio.d):00269                        ORG       1
0008                  (       cocovtio.d):00270         Pat.Dot        RMB       1
0008                  (       cocovtio.d):00271         Pat.Vrt        RMB       1
0008                  (       cocovtio.d):00272         Pat.Hrz        RMB       1
0008                  (       cocovtio.d):00273         Pat.XHtc       RMB       1
0008                  (       cocovtio.d):00274         Pat.LSnt       RMB       1
0008                  (       cocovtio.d):00275         Pat.RSnt       RMB       1
0008                  (       cocovtio.d):00276         Pat.SDot       RMB       1
0008                  (       cocovtio.d):00277         Pat.BDot       RMB       1
                      (       cocovtio.d):00278         *
                      (       cocovtio.d):00279         * pointer buffer numbers
                      (       cocovtio.d):00280         *
                      (       cocovtio.d):00281                        ORG       1
0008                  (       cocovtio.d):00282         Ptr.Arr        RMB       1                   Arrow pointer
0008                  (       cocovtio.d):00283         Ptr.Pen        RMB       1                   Pencil pointer
0008                  (       cocovtio.d):00284         Ptr.LCH        RMB       1                   Large cross hair pointer
0008                  (       cocovtio.d):00285         Ptr.Slp        RMB       1                   Wait timer pointer
0008                  (       cocovtio.d):00286         Ptr.Ill        RMB       1                   Illegal action pointer
0008                  (       cocovtio.d):00287         Ptr.Txt        RMB       1                   Text pointer
0008                  (       cocovtio.d):00288         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (       cocovtio.d):00289         
                      (       cocovtio.d):00290         **********************
                      (       cocovtio.d):00291         * KeyDrv Entry Points
                      (       cocovtio.d):00292                        ORG       0
0008                  (       cocovtio.d):00293         K$Init         RMB       3                   joystick initialization
0008                  (       cocovtio.d):00294         K$Term         RMB       3                   joystick termination
0008                  (       cocovtio.d):00295         K$FnKey        RMB       3                   get function key states
0008                  (       cocovtio.d):00296         K$RdKey        RMB       3                   get key states
                      (       cocovtio.d):00297         
                      (       cocovtio.d):00298         **********************
                      (       cocovtio.d):00299         * JoyDrv Entry Points
                      (       cocovtio.d):00300                        ORG       0
0008                  (       cocovtio.d):00301         J$Init         RMB       3                   joystick initialization
0008                  (       cocovtio.d):00302         J$Term         RMB       3                   joystick termination
0008                  (       cocovtio.d):00303         J$MsBtn        RMB       3                   get mouse button states
0008                  (       cocovtio.d):00304         J$MsXY         RMB       3                   get mouse X/Y coordinates
0008                  (       cocovtio.d):00305         J$JyBtn        RMB       3                   get joystick button states
0008                  (       cocovtio.d):00306         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00307         
                      (       cocovtio.d):00308         **********************
                      (       cocovtio.d):00309         * SndDrv Entry Points
                      (       cocovtio.d):00310                        ORG       0
0008                  (       cocovtio.d):00311         S$Init         RMB       3                   joystick initialization
0008                  (       cocovtio.d):00312         S$GetStt       RMB       3                   joystick termination
0008                  (       cocovtio.d):00313         S$SetStt       RMB       3                   joystick termination
0008                  (       cocovtio.d):00314         S$Term         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00315         
                      (       cocovtio.d):00316         ********************************
                      (       cocovtio.d):00317         * Window/Menu Bar Data Structure
                      (       cocovtio.d):00318         *
                      (       cocovtio.d):00319         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (       cocovtio.d):00320         * for use in the high level windowing package.
                      (       cocovtio.d):00321         *
0008                  (       cocovtio.d):00322         NUMMENS        EQU       10                  maximum number of menus on menu bar
0008                  (       cocovtio.d):00323         NUMITMS        EQU       20                  maximum number of items in a menu
0008                  (       cocovtio.d):00324         MXTTLEN        EQU       15                  max chars for menu and item names
0008                  (       cocovtio.d):00325         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (       cocovtio.d):00326         *
                      (       cocovtio.d):00327         * Menu Item Descriptor : (MN.ITEMS)
                      (       cocovtio.d):00328         * one required for each item within the menu
                      (       cocovtio.d):00329         *
                      (       cocovtio.d):00330                        ORG       0
0008                  (       cocovtio.d):00331         MI.TTL         RMB       MXTTLEN             item name
0008                  (       cocovtio.d):00332         MI.ENBL        RMB       1                   enable flag
0008                  (       cocovtio.d):00333         MI.RES         RMB       5                   reserved bytes
0008                  (       cocovtio.d):00334         MI.SIZ         EQU       .                   size of menu item descriptor
                      (       cocovtio.d):00335         *
                      (       cocovtio.d):00336         * Menu Descriptor :
                      (       cocovtio.d):00337         * one for each menu on the manu bar
                      (       cocovtio.d):00338         * each is pointed to by MB.MPTR below
                      (       cocovtio.d):00339         *
                      (       cocovtio.d):00340                        ORG       0
0008                  (       cocovtio.d):00341         MN.TTL         RMB       MXTTLEN             menu title
0008                  (       cocovtio.d):00342         MN.ID          RMB       1                   menu id number (1-255)
0008                  (       cocovtio.d):00343         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0008                  (       cocovtio.d):00344         MN.NITS        RMB       1                   number of items in menu
0008                  (       cocovtio.d):00345         MN.ENBL        RMB       1                   enable flag
0008                  (       cocovtio.d):00346         MN.RES         RMB       2                   reserved bytes
0008                  (       cocovtio.d):00347         MN.ITEMS       RMB       2                   pointer to array of menu items
0008                  (       cocovtio.d):00348         MN.SIZ         EQU       .                   size of menu descriptor
                      (       cocovtio.d):00349         *
                      (       cocovtio.d):00350         * Window Descriptor:
                      (       cocovtio.d):00351         * one required for each application in a framed window
                      (       cocovtio.d):00352         *
                      (       cocovtio.d):00353                        ORG       0
0008                  (       cocovtio.d):00354         WN.TTL         RMB       20                  title of window for title bar
0008                  (       cocovtio.d):00355         WN.NMNS        RMB       1                   number of menus in menu bar
0008                  (       cocovtio.d):00356         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0008                  (       cocovtio.d):00357         WN.YMIN        RMB       1                   minimal vert. size for application to run
0008                  (       cocovtio.d):00358         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0008                  (       cocovtio.d):00359         WN.RES         RMB       7                   reserved bytes
0008                  (       cocovtio.d):00360         WN.BAR         RMB       2                   pointer to arry of menu descriptors
0008                  (       cocovtio.d):00361         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (       cocovtio.d):00362         
                      (       cocovtio.d):00363         *************************
                      (       cocovtio.d):00364         * Window Type Definitions
                      (       cocovtio.d):00365         *
                      (       cocovtio.d):00366         * To be used in setting up the border of the window in
                      (       cocovtio.d):00367         * the SS.WnSel SETSTAT
                      (       cocovtio.d):00368         *
                      (       cocovtio.d):00369                        ORG       0
0008                  (       cocovtio.d):00370         WT.NBox        RMB       1                   No Box
0008                  (       cocovtio.d):00371         WT.FWin        RMB       1                   Framed Window
0008                  (       cocovtio.d):00372         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0008                  (       cocovtio.d):00373         WT.SBox        RMB       1                   Shadowed Box
0008                  (       cocovtio.d):00374         WT.DBox        RMB       1                   Double Box
0008                  (       cocovtio.d):00375         WT.PBox        RMB       1                   Plain Box
                      (       cocovtio.d):00376         
                      (       cocovtio.d):00377         *************************************
                      (       cocovtio.d):00378         * Pre-Defined Menu IDs for the system
                      (       cocovtio.d):00379         *
                      (       cocovtio.d):00380                        ORG       1
0008                  (       cocovtio.d):00381         MId.Mov        RMB       1                   move box
0008                  (       cocovtio.d):00382         MId.Cls        RMB       1                   close box
0008                  (       cocovtio.d):00383         MId.Grw        RMB       1                   grow box
0008                  (       cocovtio.d):00384         MId.SUp        RMB       1                   scroll up
0008                  (       cocovtio.d):00385         MId.SDn        RMB       1                   scroll down
0008                  (       cocovtio.d):00386         MId.SRt        RMB       1                   scroll right
0008                  (       cocovtio.d):00387         MId.SLt        RMB       1                   scroll left
0008                  (       cocovtio.d):00388         MId.Chr        RMB       1                   character was depressed
                      (       cocovtio.d):00389                        ORG       20
0008                  (       cocovtio.d):00390         MId.Tdy        RMB       1                   Tandy menu
0008                  (       cocovtio.d):00391         MId.Fil        RMB       1                   Files Menu
0008                  (       cocovtio.d):00392         MId.Edt        RMB       1                   Edit Menu
0008                  (       cocovtio.d):00393         MId.Sty        RMB       1                   Styles menu
0008                  (       cocovtio.d):00394         MId.Fnt        RMB       1                   Font menu
                      (       cocovtio.d):00395         
                      (       cocovtio.d):00396         
                      (       cocovtio.d):00397         ******************************************************************************
                      (       cocovtio.d):00398         ******************************************************************************
                      (       cocovtio.d):00399         **                                                                          **
                      (       cocovtio.d):00400         ** NitrOS-9 Windowing system Global data definitions                        **
                      (       cocovtio.d):00401         **                                                                          **
                      (       cocovtio.d):00402         ******************************************************************************
                      (       cocovtio.d):00403         ******************************************************************************
                      (       cocovtio.d):00404         **                                                                          **
                      (       cocovtio.d):00405         ** System memory block 0 layout:                                            **
                      (       cocovtio.d):00406         **                                                                          **
                      (       cocovtio.d):00407         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (       cocovtio.d):00408         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (       cocovtio.d):00409         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (       cocovtio.d):00410         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (       cocovtio.d):00411         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (       cocovtio.d):00412         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (       cocovtio.d):00413         ** $0010-$001F : unused (User definable)                                    **
                      (       cocovtio.d):00414         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (       cocovtio.d):00415         ** $0100-$011F : Task usage table                                           **
                      (       cocovtio.d):00416         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (       cocovtio.d):00417         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (       cocovtio.d):00418         ** $0300-$03FF : system's system call dispatch table                        **
                      (       cocovtio.d):00419         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (       cocovtio.d):00420         ** $0500-$05FF : process descriptor pointer table                           **
                      (       cocovtio.d):00421         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (       cocovtio.d):00422         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (       cocovtio.d):00423         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (       cocovtio.d):00424         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (       cocovtio.d):00425         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (       cocovtio.d):00426         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (       cocovtio.d):00427         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (       cocovtio.d):00428         ** $1248-$127F : ????                                                       **
                      (       cocovtio.d):00429         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (       cocovtio.d):00430         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (       cocovtio.d):00431         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (       cocovtio.d):00432         **                                                                          **
                      (       cocovtio.d):00433         ******************************************************************************
                      (       cocovtio.d):00434         ******************************************************************************
                      (       cocovtio.d):00435         
                      (       cocovtio.d):00436         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
0008                  (       cocovtio.d):00437         MaxLines       EQU       25                  Max. Y coord text value
0008                  (       cocovtio.d):00438         Meg            SET       false               "true" if 1 or 2 meg machine
                      (       cocovtio.d):00439         
0008                  (       cocovtio.d):00440         COMP           EQU       0                   composite monitor
0008                  (       cocovtio.d):00441         RGB            EQU       1                   RGB Analog monitor 
0008                  (       cocovtio.d):00442         MONO           EQU       2                   monochrome monitor
                      (       cocovtio.d):00443         
0008                  (       cocovtio.d):00444         Monitor        SET       RGB
                      (       cocovtio.d):00445         
                      (       cocovtio.d):00446         * Global definitions
0008                  (       cocovtio.d):00447         KeyMse         EQU       %00000001           keyboard mouse enabled
0008                  (       cocovtio.d):00448         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
0008                  (       cocovtio.d):00449         CapsLck        EQU       %00000100           Capslock enabled
0008                  (       cocovtio.d):00450         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (       cocovtio.d):00451                        IFEQ      MaxLines-25
0008                  (       cocovtio.d):00452         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00453                        ELSE      
0008                  (       cocovtio.d):00454         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00455                        ENDC      
                      (       cocovtio.d):00456         
                      (       cocovtio.d):00457         *****************************************************************************
                      (       cocovtio.d):00458         * Static memory area for each window (VTIO/TC9IO)
                      (       cocovtio.d):00459         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (       cocovtio.d):00460         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (       cocovtio.d):00461         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (       cocovtio.d):00462         * May have to have smaller limit for text to gfx screens, as it will run much
                      (       cocovtio.d):00463         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (       cocovtio.d):00464         *
                      (       cocovtio.d):00465         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (       cocovtio.d):00466         * V.SCF is to be resolved properly in pass 1!!
                      (       cocovtio.d):00467                        ORG       V.SCF
0008                  (       cocovtio.d):00468         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
0008                  (       cocovtio.d):00469         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
0008                  (       cocovtio.d):00470         V.DevPar       RMB       2                   high bit=window device                       $1F
0008                  (       cocovtio.d):00471         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0008                  (       cocovtio.d):00472         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0008                  (       cocovtio.d):00473         V.ScrChg       RMB       1                   screen change flag                           $23
0008                  (       cocovtio.d):00474         V.SSigID       RMB       1                   data ready process ID                        $24
0008                  (       cocovtio.d):00475         V.SSigSg       RMB       1                   data ready signal code                       $25
0008                  (       cocovtio.d):00476         V.MSigID       RMB       1                   mouse signal process ID                      $26
0008                  (       cocovtio.d):00477         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0008                  (       cocovtio.d):00478         V.MSmpl        RMB       1                   mouse sample rate                            $28
0008                  (       cocovtio.d):00479         V.MTime        RMB       1                   mouse timeout value                          $29
                      (       cocovtio.d):00480                        RMB       1                   unused                                       $2A
0008                  (       cocovtio.d):00481         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
0008                  (       cocovtio.d):00482         V.ParmCnt      RMB       1                   parameter count                              $2C
0008                  (       cocovtio.d):00483         V.ParmVct      RMB       2                   parameter vector                             $2D
0008                  (       cocovtio.d):00484         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0008                  (       cocovtio.d):00485         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0008                  (       cocovtio.d):00486         V.EndPtr       RMB       1                   last character read offset                   $33
0008                  (       cocovtio.d):00487         V.InpPtr       RMB       1                   next character read offset                   $34
0008                  (       cocovtio.d):00488         V.WinNum       RMB       1                   window table entry #                         $35
0008                  (       cocovtio.d):00489         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0008                  (       cocovtio.d):00490         V.CallCde      RMB       1                   internal comod call code #                   $37
0008                  (       cocovtio.d):00491         CC3Parm        RMB       128-.               global parameter area
0008                  (       cocovtio.d):00492         ReadBuf        RMB       256-.               read input buffer (keyboard)
0008                  (       cocovtio.d):00493         CC3DSiz        EQU       .
                      (       cocovtio.d):00494         
                      (       cocovtio.d):00495         *****************************************************************************
                      (       cocovtio.d):00496         * GrfInt/WindInt global memory area
                      (       cocovtio.d):00497         * This area sits in system block 0 from $1000 to $10ff
0008                  (       cocovtio.d):00498         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (       cocovtio.d):00499                        ORG       0
0008                  (       cocovtio.d):00500         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0008                  (       cocovtio.d):00501         G.CntTik       RMB       1                   Current tick count for cursor updates
0008                  (       cocovtio.d):00502         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0008                  (       cocovtio.d):00503         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (       cocovtio.d):00504         *g0003    rmb   2          NEW: UNUSED
0008                  (       cocovtio.d):00505         g0005          RMB       2                   Temp save in Windint RG
0008                  (       cocovtio.d):00506         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0008                  (       cocovtio.d):00507         G.MonTyp       RMB       1                   monitor type
0008                  (       cocovtio.d):00508         g000A          EQU       .                   Old label for compatibility
0008                  (       cocovtio.d):00509         G.CrDvFl       RMB       1  Are we current device flag (only set when all
                      (       cocovtio.d):00510         *                           Parms have been moved to Dev Mem)
                      (       cocovtio.d):00511         *                           0=We are not on our device
                      (       cocovtio.d):00512         *                           1=We are the current device
                      (       cocovtio.d):00513         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (       cocovtio.d):00514         *                           whether or not to update GIME regs themselves
                      (       cocovtio.d):00515         *                           If not current device, they don't.)
0008                  (       cocovtio.d):00516         G.WinType      RMB       1                   current device's V.TYPE
0008                  (       cocovtio.d):00517         G.CurDvM       RMB       2                   current device memory pointer for co-module use
0008                  (       cocovtio.d):00518         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
0008                  (       cocovtio.d):00519         G.AlPckt       RMB       6                   F$Alarm time packet
0008                  (       cocovtio.d):00520         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0008                  (       cocovtio.d):00521         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0008                  (       cocovtio.d):00522         G.BelVec       RMB       2                   BELL routine vector
0008                  (       cocovtio.d):00523         G.DefPal       RMB       2                   pointer to default palette data in global mem
0008                  (       cocovtio.d):00524         G.TnCnt        RMB       1                   SS.Tone duration counter
0008                  (       cocovtio.d):00525         G.BelTnF       RMB       1                   BELL tone flag
0008                  (       cocovtio.d):00526         g001D          RMB       3
0008                  (       cocovtio.d):00527         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0008                  (       cocovtio.d):00528         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0008                  (       cocovtio.d):00529         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (       cocovtio.d):00530         *                           00000010 : VDGInt found
                      (       cocovtio.d):00531         *                           10000000 : GrfDrv found
0008                  (       cocovtio.d):00532         g0025          RMB       1
0008                  (       cocovtio.d):00533         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (       cocovtio.d):00534         *         IFEQ  TC9-true
                      (       cocovtio.d):00535         *CurLght  rmb   1          current keyboard light settings
                      (       cocovtio.d):00536         *         ELSE  
0008                  (       cocovtio.d):00537         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (       cocovtio.d):00538         *         ENDC  
0008                  (       cocovtio.d):00539         G.LKeyCd       RMB       1                   last keyboard code
0008                  (       cocovtio.d):00540         G.KyRept       RMB       1                   key repeat counter
                      (       cocovtio.d):00541         * A secondary 3 key table (same format as g002D below)
0008                  (       cocovtio.d):00542         G.2Key1        RMB       1                   $2A
0008                  (       cocovtio.d):00543         G.2Key2        RMB       1                   $2B
0008                  (       cocovtio.d):00544         G.2Key3        RMB       1
                      (       cocovtio.d):00545         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (       cocovtio.d):00546         * than 3 are hit, the last key is overwritten with the very last key down that
                      (       cocovtio.d):00547         * was checked. Format for all three is the same as the PIA column/row byte @
                      (       cocovtio.d):00548         * KeyFlag below.
0008                  (       cocovtio.d):00549         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
0008                  (       cocovtio.d):00550         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
0008                  (       cocovtio.d):00551         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0008                  (       cocovtio.d):00552         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0008                  (       cocovtio.d):00553         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0008                  (       cocovtio.d):00554         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (       cocovtio.d):00555         *                           %00000111-Column # (Output, 0-7)
                      (       cocovtio.d):00556         *                           %00111000-Row # (Input, 0-6)
0008                  (       cocovtio.d):00557         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0008                  (       cocovtio.d):00558         G.KySns        RMB       1                   key sense byte
0008                  (       cocovtio.d):00559         G.KySame       RMB       1                   same key flag
0008                  (       cocovtio.d):00560         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
                      (       cocovtio.d):00561                        RMB       1
0008                  (       cocovtio.d):00562         g0038          RMB       1                   grfdrv initialized flag
                      (       cocovtio.d):00563                        RMB       2
0008                  (       cocovtio.d):00564         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
0008                  (       cocovtio.d):00565         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
0008                  (       cocovtio.d):00566         g005C          RMB       2                   Temp for relative mouse X coord calculation
0008                  (       cocovtio.d):00567         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0008                  (       cocovtio.d):00568         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0008                  (       cocovtio.d):00569         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0008                  (       cocovtio.d):00570         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (       cocovtio.d):00571         *         IFEQ  TC9-true
                      (       cocovtio.d):00572         *KeyParm  rmb   1          keyboard command parameter byte
                      (       cocovtio.d):00573         *         ELSE  
0008                  (       cocovtio.d):00574         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (       cocovtio.d):00575         *         ENDC  
0008                  (       cocovtio.d):00576         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0008                  (       cocovtio.d):00577         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0008                  (       cocovtio.d):00578         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0008                  (       cocovtio.d):00579         G.MseMv        RMB       1                   mouse moved flag ($67)
0008                  (       cocovtio.d):00580         G.CoTble       RMB       6                   co-module table ($68)
0008                  (       cocovtio.d):00581         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0008                  (       cocovtio.d):00582         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0008                  (       cocovtio.d):00583         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0008                  (       cocovtio.d):00584         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0008                  (       cocovtio.d):00585         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
0008                  (       cocovtio.d):00586         g00B7          RMB       2                   Current Device static mem ptr for WindInt
0008                  (       cocovtio.d):00587         g00B9          RMB       2                   Current window table ptr for WindInt
0008                  (       cocovtio.d):00588         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
0008                  (       cocovtio.d):00589         g00BD          RMB       1                   Current screen type for work window table
0008                  (       cocovtio.d):00590         g00BE          RMB       1                   Topmost overlay window # when check for title bars
0008                  (       cocovtio.d):00591         g00BF          RMB       1                   Flag for keypress while processing menu select
0008                  (       cocovtio.d):00592         g00C0          RMB       2                   Ptr to current path descriptor
0008                  (       cocovtio.d):00593         G.WindBk       RMB       2                   shift-clear routine vector
0008                  (       cocovtio.d):00594         G.MsInit       RMB       2                   set mouse routine vector
0008                  (       cocovtio.d):00595         G.MsSig        RMB       1                   mouse signal flag
0008                  (       cocovtio.d):00596         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
0008                  (       cocovtio.d):00597         g00D7          RMB       9
0008                  (       cocovtio.d):00598         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
0008                  (       cocovtio.d):00599         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
0008                  (       cocovtio.d):00600         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
0008                  (       cocovtio.d):00601         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
0008                  (       cocovtio.d):00602         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
0008                  (       cocovtio.d):00603         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (       cocovtio.d):00604         
                      (       cocovtio.d):00605         *****************************************************************************
                      (       cocovtio.d):00606         * GrfDrv global memory data definitions
                      (       cocovtio.d):00607         * This area sits in system block 0 from $1100 to $119E
0008                  (       cocovtio.d):00608         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (       cocovtio.d):00609                        ORG       0
0008                  (       cocovtio.d):00610         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0008                  (       cocovtio.d):00611         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0008                  (       cocovtio.d):00612         gr0002         RMB       2                   Ptr to table of bit masks for colors
0008                  (       cocovtio.d):00613         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0008                  (       cocovtio.d):00614         gr0005         RMB       1                   # pixels per byte in GP Buffer
0008                  (       cocovtio.d):00615         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0008                  (       cocovtio.d):00616         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (       cocovtio.d):00617         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0008                  (       cocovtio.d):00618         gr0009         RMB       1                   # bytes for width of overlay window
0008                  (       cocovtio.d):00619         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (       cocovtio.d):00620         *                             overlay width has been copied
0008                  (       cocovtio.d):00621         gr000B         RMB       1
0008                  (       cocovtio.d):00622         gr000C         RMB       2                   Cursor address for proportional spacing?
0008                  (       cocovtio.d):00623         gr000E         RMB       1
0008                  (       cocovtio.d):00624         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0008                  (       cocovtio.d):00625         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0008                  (       cocovtio.d):00626         gr0012         RMB       6
0008                  (       cocovtio.d):00627         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
0008                  (       cocovtio.d):00628         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
0008                  (       cocovtio.d):00629         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
0008                  (       cocovtio.d):00630         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0008                  (       cocovtio.d):00631         gr0020         RMB       2                   Arc 'clip line' X01
0008                  (       cocovtio.d):00632         gr0022         RMB       2                   Arc 'clip line' Y01
0008                  (       cocovtio.d):00633         gr0024         RMB       2                   Arc 'clip line' X02
0008                  (       cocovtio.d):00634         gr0026         RMB       2                   Arc 'clip line' Y02
0008                  (       cocovtio.d):00635         gr0028         RMB       1                   full-byte background color to FFILL on mask
0008                  (       cocovtio.d):00636         gr0029         RMB       1                   pixels per byte: set up by FFILL
0008                  (       cocovtio.d):00637         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
0008                  (       cocovtio.d):00638         gr002B         RMB       1                   current Y-direction to travel in FFILL
0008                  (       cocovtio.d):00639         gr002C         RMB       2
0008                  (       cocovtio.d):00640         gr002E         RMB       2                   current window table entry
0008                  (       cocovtio.d):00641         gr0030         RMB       2                   current screen table ptr
0008                  (       cocovtio.d):00642         gr0032         RMB       1                   Last block # we used for buffers
0008                  (       cocovtio.d):00643         gr0033         RMB       2                   Last offset we used for buffers
0008                  (       cocovtio.d):00644         gr0035         RMB       1                   group
0008                  (       cocovtio.d):00645         gr0036         RMB       2                   offset
0008                  (       cocovtio.d):00646         gr0038         RMB       1                   group returned (new)
0008                  (       cocovtio.d):00647         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
0008                  (       cocovtio.d):00648         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
0008                  (       cocovtio.d):00649         gr003B         RMB       2                   end of vars ptr?
0008                  (       cocovtio.d):00650         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
0008                  (       cocovtio.d):00651         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0008                  (       cocovtio.d):00652         gr0041         RMB       2                   Screen address for start of current gfx cursor
0008                  (       cocovtio.d):00653         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0008                  (       cocovtio.d):00654         gr0044         RMB       1                   Block # Graphics cursor is in
0008                  (       cocovtio.d):00655         gr0045         RMB       2                   Offset in block Graphics cursor is in
0008                  (       cocovtio.d):00656         gr0047         RMB       2                   'Working' X coordinate
0008                  (       cocovtio.d):00657         gr0049         RMB       2                   'Working' Y coordinate
0008                  (       cocovtio.d):00658         gr004B         RMB       2                   current X
0008                  (       cocovtio.d):00659         gr004D         RMB       2                   current Y
0008                  (       cocovtio.d):00660         gr004F         RMB       2                   X Size (in bytes)
0008                  (       cocovtio.d):00661         gr0051         RMB       2                   Y Size (in bytes)
0008                  (       cocovtio.d):00662         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0008                  (       cocovtio.d):00663         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0008                  (       cocovtio.d):00664         gr0057         RMB       1                   group
0008                  (       cocovtio.d):00665         gr0058         RMB       1                   buffer #
0008                  (       cocovtio.d):00666         gr0059         RMB       1                   save switch for overlay
0008                  (       cocovtio.d):00667         gr005A         RMB       1                   PRN
0008                  (       cocovtio.d):00668         gr005B         RMB       2                   X coordinate of Graphics cursor
0008                  (       cocovtio.d):00669         gr005D         RMB       2                   Y coordinate of Graphics cursor
0008                  (       cocovtio.d):00670         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0008                  (       cocovtio.d):00671         Gr.STYMk       RMB       1                   STY marker
0008                  (       cocovtio.d):00672         gr0061         RMB       1                   foreground RGB data
0008                  (       cocovtio.d):00673         gr0062         RMB       1                   background RGB data
0008                  (       cocovtio.d):00674         gr0063         RMB       1                   bytes/row (on current screen...not window)
0008                  (       cocovtio.d):00675         gr0064         RMB       2                   PSet vector
0008                  (       cocovtio.d):00676         gr0066         RMB       2                   pset offset
0008                  (       cocovtio.d):00677         gr0068         RMB       2                   LSet vector
0008                  (       cocovtio.d):00678         gr006A         RMB       2                   max X co-ordinate
0008                  (       cocovtio.d):00679         gr006C         RMB       2                   max Y co-ordinate
0008                  (       cocovtio.d):00680         gr006E         RMB       2                   X pixel count
0008                  (       cocovtio.d):00681         gr0070         RMB       2                   Y pixel count
0008                  (       cocovtio.d):00682         gr0072         RMB       2                   Screen address of pixel we are doing
0008                  (       cocovtio.d):00683         gr0074         RMB       1                   Pixel mask for pixel we are doing
0008                  (       cocovtio.d):00684         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0008                  (       cocovtio.d):00685         gr0077         RMB       2                   Vector for right direction FFill
0008                  (       cocovtio.d):00686         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
0008                  (       cocovtio.d):00687         gr007A         RMB       2                   Vector for left direction FFill
0008                  (       cocovtio.d):00688         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
0008                  (       cocovtio.d):00689         gr007D         RMB       1                   buffer block #
0008                  (       cocovtio.d):00690         gr007E         RMB       2                   buffer offset #
0008                  (       cocovtio.d):00691         gr0080         RMB       2                   Buffer length (in bytes)
0008                  (       cocovtio.d):00692         gr0082         RMB       3                   3 byte extended screen address
0008                  (       cocovtio.d):00693         gr0085         RMB       2                   temp
0008                  (       cocovtio.d):00694         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0008                  (       cocovtio.d):00695         gr0097         RMB       1                   temp
0008                  (       cocovtio.d):00696         gr0098         RMB       1                   temp
                      (       cocovtio.d):00697         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0008                  (       cocovtio.d):00698         gr0099         RMB       2                   temp
                      (       cocovtio.d):00699         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
0008                  (       cocovtio.d):00700         gr009B         RMB       1                   counter temp
0008                  (       cocovtio.d):00701         gr009C         RMB       1
0008                  (       cocovtio.d):00702         gr009D         RMB       2                   offset to buffer in block
0008                  (       cocovtio.d):00703         gr009F         RMB       1
0008                  (       cocovtio.d):00704         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
0008                  (       cocovtio.d):00705         gr00A1         RMB       2                   vector routine for (changes lots)
                      (       cocovtio.d):00706         * In ARC A1-A2 is the vector to the proper clipping routine
0008                  (       cocovtio.d):00707         gr00A3         RMB       2                   Vector for shifting GP buffers
0008                  (       cocovtio.d):00708         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
0008                  (       cocovtio.d):00709         gr00A7         RMB       2
0008                  (       cocovtio.d):00710         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
0008                  (       cocovtio.d):00711         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
0008                  (       cocovtio.d):00712         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
0008                  (       cocovtio.d):00713         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
0008                  (       cocovtio.d):00714         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
0008                  (       cocovtio.d):00715         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (       cocovtio.d):00716         *gr00B3   rmb    256-.       ??? UNUSED
0008                  (       cocovtio.d):00717         gr00B3         RMB       1                   temp veriable grfdrv
0008                  (       cocovtio.d):00718         gr00B4         RMB       1                   temp veriable grfdrv
0008                  (       cocovtio.d):00719         gr00B5         RMB       1                   regW for grfdrv
0008                  (       cocovtio.d):00720         gr00B6         RMB       1
0008                  (       cocovtio.d):00721         gr00B7         RMB       2
0008                  (       cocovtio.d):00722         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
0008                  (       cocovtio.d):00723         gr00BB         RMB       2                   previously used in grfdrv at $B4
0008                  (       cocovtio.d):00724         gr00BD         RMB       2                   previously used in grfdrv at $B6
0008                  (       cocovtio.d):00725         gr00BF         RMB       256-.
                      (       cocovtio.d):00726         * GPLoad buffer - $1200 in system block 0
0008                  (       cocovtio.d):00727         GPBuf          RMB       72                  common move buffer for gpload/get/put
0008                  (       cocovtio.d):00728         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (       cocovtio.d):00729         
                      (       cocovtio.d):00730         *****************************************************************************
                      (       cocovtio.d):00731         * Window table entry structure
                      (       cocovtio.d):00732         * These tables sit in system block 0 and there is 1 for every window init'd
                      (       cocovtio.d):00733         * including any overlay windows.
0008                  (       cocovtio.d):00734         MaxWind        EQU       32                  maximum allowable window tables
0008                  (       cocovtio.d):00735         WinBase        EQU       $1290               base address to start of window tables
                      (       cocovtio.d):00736                        ORG       -$10
0008                  (       cocovtio.d):00737         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
0008                  (       cocovtio.d):00738         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
0008                  (       cocovtio.d):00739         Wt.LStrt       RMB       2                   screen logical start address                -$0D
0008                  (       cocovtio.d):00740         Wt.CPX         RMB       1                   current X coord. start                      -$0B
0008                  (       cocovtio.d):00741         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
0008                  (       cocovtio.d):00742         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
0008                  (       cocovtio.d):00743         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
0008                  (       cocovtio.d):00744         Wt.SXFct       RMB       1                   X scaling factor                            -$07
0008                  (       cocovtio.d):00745         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
0008                  (       cocovtio.d):00746         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
0008                  (       cocovtio.d):00747         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
0008                  (       cocovtio.d):00748         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0008                  (       cocovtio.d):00749         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0008                  (       cocovtio.d):00750         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0008                  (       cocovtio.d):00751         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0008                  (       cocovtio.d):00752         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0008                  (       cocovtio.d):00753         Wt.Fore        RMB       1                   foreground palette #                         $06
0008                  (       cocovtio.d):00754         Wt.Back        RMB       1                   background palette #                         $07
0008                  (       cocovtio.d):00755         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0008                  (       cocovtio.d):00756         Wt.BSW         RMB       1                   character BSW switches                       $09
0008                  (       cocovtio.d):00757         Wt.LSet        RMB       1                   LSet type                                    $0A
0008                  (       cocovtio.d):00758         Wt.FBlk        RMB       1                   Font memory block #                          $0B
0008                  (       cocovtio.d):00759         Wt.FOff        RMB       2                   Font offset in block                         $0C
0008                  (       cocovtio.d):00760         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
0008                  (       cocovtio.d):00761         Wt.POff        RMB       2                   PSet offset in block                         $0F
0008                  (       cocovtio.d):00762         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0008                  (       cocovtio.d):00763         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0008                  (       cocovtio.d):00764         Wt.LVec        RMB       2                   LSet vector                                  $14
0008                  (       cocovtio.d):00765         Wt.PVec        RMB       2                   PSet vector                                  $16
0008                  (       cocovtio.d):00766         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0008                  (       cocovtio.d):00767         Wt.GOff        RMB       2                   GCursor offset in block                      $19
0008                  (       cocovtio.d):00768         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
0008                  (       cocovtio.d):00769         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24,0-191)                 $1D
0008                  (       cocovtio.d):00770         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0008                  (       cocovtio.d):00771         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0008                  (       cocovtio.d):00772         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0008                  (       cocovtio.d):00773         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (       cocovtio.d):00774         * NOTE: The following default settings are what the window was initialized
                      (       cocovtio.d):00775         *       with, and thus are the MAXIMUM start/size the window can handle
                      (       cocovtio.d):00776         *       until it is restarted (DWEnd & DWSet)
                      (       cocovtio.d):00777         *       They also appear to be used in WindInt to determine the coords &
                      (       cocovtio.d):00778         *       sizes for control+content regions
0008                  (       cocovtio.d):00779         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0008                  (       cocovtio.d):00780         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0008                  (       cocovtio.d):00781         Wt.DfSZX       RMB       1                   default X size                               $28
0008                  (       cocovtio.d):00782         Wt.DfSZY       RMB       1                   default Y size                               $29
0008                  (       cocovtio.d):00783         Wt.Res         RMB       6                   unused                                   $2A-$2F
0008                  (       cocovtio.d):00784         Wt.Siz         EQU       .+$10
                      (       cocovtio.d):00785         
                      (       cocovtio.d):00786         *****************************************************************************
                      (       cocovtio.d):00787         * Screen table entrys
                      (       cocovtio.d):00788         * These tables sit in system block 0 base=$1A80
                      (       cocovtio.d):00789         
0008                  (       cocovtio.d):00790         STblMax        EQU       16                  Maximum number of screen tables
0008                  (       cocovtio.d):00791         STblBse        EQU       $1A80               base address of screen tables
                      (       cocovtio.d):00792                        ORG       0
0008                  (       cocovtio.d):00793         St.Sty         RMB       1                   Screen type                         $00
0008                  (       cocovtio.d):00794         St.SBlk        RMB       1                   Ram block start #                   $01
0008                  (       cocovtio.d):00795         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0008                  (       cocovtio.d):00796         St.BRow        RMB       1                   Bytes per row                       $04
0008                  (       cocovtio.d):00797         St.Brdr        RMB       1                   Border palette register #           $05
0008                  (       cocovtio.d):00798         St.Fore        RMB       1                   Foreground palette register #       $06
0008                  (       cocovtio.d):00799         St.Back        RMB       1                   Background palette register #       $07
0008                  (       cocovtio.d):00800         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0008                  (       cocovtio.d):00801         St.Res         RMB       7                   UNUSED???                           $09
                      (       cocovtio.d):00802         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (       cocovtio.d):00803         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (       cocovtio.d):00804         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (       cocovtio.d):00805         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
0008                  (       cocovtio.d):00806         St.Pals        RMB       16                  Palette register contents           $10
0008                  (       cocovtio.d):00807         St.Siz         EQU       .
                      (       cocovtio.d):00808         
                      (       cocovtio.d):00809         *****************************************************************************
                      (       cocovtio.d):00810         * Graphics buffer tables
                      (       cocovtio.d):00811         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (       cocovtio.d):00812         * data.
                      (       cocovtio.d):00813                        ORG       0
0008                  (       cocovtio.d):00814         Grf.Bck        RMB       1                   back block link #                   $00
0008                  (       cocovtio.d):00815         Grf.Off        RMB       2                   back block header offset            $01
0008                  (       cocovtio.d):00816         Grf.Grp        RMB       1                   group #                             $03
0008                  (       cocovtio.d):00817         Grf.Buff       RMB       1                   buffer #                            $04
0008                  (       cocovtio.d):00818         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0008                  (       cocovtio.d):00819         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0008                  (       cocovtio.d):00820         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
0008                  (       cocovtio.d):00821         Grf.XBSz       RMB       1                   X size in bytes                     $0B
0008                  (       cocovtio.d):00822         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
0008                  (       cocovtio.d):00823         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
0008                  (       cocovtio.d):00824         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
0008                  (       cocovtio.d):00825         Grf.NBlk       RMB       1                   number blocks used                  $0F
0008                  (       cocovtio.d):00826         Grf.Pal        RMB       16                  Copy of palette registers?          $10
0008                  (       cocovtio.d):00827         Grf.Siz        EQU       .                   $20
                      (       cocovtio.d):00828         
                      (       cocovtio.d):00829         *****************************************************************************
                      (       cocovtio.d):00830         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (       cocovtio.d):00831         * $1075-$0176
                      (       cocovtio.d):00832         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (       cocovtio.d):00833                        ORG       0
0008                  (       cocovtio.d):00834         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0008                  (       cocovtio.d):00835         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0008                  (       cocovtio.d):00836         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0008                  (       cocovtio.d):00837         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0008                  (       cocovtio.d):00838         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (       cocovtio.d):00839         Gt.BClr        RMB       1                   Background color                               $08
0008                  (       cocovtio.d):00840         Gt.FMsk        RMB       1                   Foreground mask                                $09
0008                  (       cocovtio.d):00841         Gt.BMsk        RMB       1                   Background mask                                $0A
0008                  (       cocovtio.d):00842         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
0008                  (       cocovtio.d):00843         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
0008                  (       cocovtio.d):00844         Gt.Proc        RMB       1                   Process # of window creator                    $0E
0008                  (       cocovtio.d):00845         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0008                  (       cocovtio.d):00846         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
0008                  (       cocovtio.d):00847         GTabSz         EQU       .
                      (       cocovtio.d):00848         
                      (       cocovtio.d):00849         *****************************************************************************
                      (       cocovtio.d):00850         * This table is located in the graphics table memory and is offset from
                      (       cocovtio.d):00851         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (       cocovtio.d):00852         * WindInt.
                      (       cocovtio.d):00853         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (       cocovtio.d):00854         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (       cocovtio.d):00855         *  COMBINATION EVERY TIME
                      (       cocovtio.d):00856                        ORG       $0240
                      (       cocovtio.d):00857                        RMB       WN.SIZ              copy of last accessed window descriptor
                      (       cocovtio.d):00858                        RMB       MN.SIZ              copy of last accessed menu descriptor
                      (       cocovtio.d):00859                        RMB       MI.SIZ              copy of last accessed item descriptor
                      (       cocovtio.d):00860                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (       cocovtio.d):00861         
                      (       cocovtio.d):00862         *****************************************************************************
                      (       cocovtio.d):00863         * WindInt menu handling table entry definition
                      (       cocovtio.d):00864                        ORG       0
0008                  (       cocovtio.d):00865         MnuXNum        RMB       1                   menu #
0008                  (       cocovtio.d):00866         MnuXStrt       RMB       1                   X start text co-ordinate
0008                  (       cocovtio.d):00867         MnuXEnd        RMB       1                   X end text co-ordinate
                      (       cocovtio.d):00868                        RMB       1                   unused?
0008                  (       cocovtio.d):00869         MnuHSiz        EQU       .
                      (       cocovtio.d):00870         
                      (       cocovtio.d):00871         *****************************************************************************
                      (       cocovtio.d):00872         * Character binary switches
0008                  (       cocovtio.d):00873         TChr           EQU       %10000000           transparent characters
0008                  (       cocovtio.d):00874         Under          EQU       %01000000           underline characters
0008                  (       cocovtio.d):00875         Bold           EQU       %00100000           bold characters
0008                  (       cocovtio.d):00876         Prop           EQU       %00010000           proportional spacing of characters
0008                  (       cocovtio.d):00877         Scale          EQU       %00001000           automatic window scaling
0008                  (       cocovtio.d):00878         Invers         EQU       %00000100           inverse characters
0008                  (       cocovtio.d):00879         NoCurs         EQU       %00000010           no cursor display
0008                  (       cocovtio.d):00880         Protect        EQU       %00000001           device window protection
                      (       cocovtio.d):00881         
                      (       cocovtio.d):00882         *****************************************************************************
                      (       cocovtio.d):00883         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
0008                  (       cocovtio.d):00884         Current        EQU       $ff                 Current screen
                      (       cocovtio.d):00885         *         equ   1          640x200x2
                      (       cocovtio.d):00886         *         equ   2          320x200x4
                      (       cocovtio.d):00887         *         equ   3          640x200x4
                      (       cocovtio.d):00888         *         equ   4          320x200x16
                      (       cocovtio.d):00889         *         equ   $85        80 column text
                      (       cocovtio.d):00890         *         equ   $86        40 column text
                      (       cocovtio.d):00891         
                      (       cocovtio.d):00892         *************************************
                      (       cocovtio.d):00893         * Window default palette color codes
                      (       cocovtio.d):00894         *
                      (       cocovtio.d):00895                        ORG       0
0008                  (       cocovtio.d):00896         White.         RMB       1
0008                  (       cocovtio.d):00897         Blue.          RMB       1
0008                  (       cocovtio.d):00898         Black.         RMB       1
0008                  (       cocovtio.d):00899         Green.         RMB       1
0008                  (       cocovtio.d):00900         Red.           RMB       1
0008                  (       cocovtio.d):00901         Yellow.        RMB       1
0008                  (       cocovtio.d):00902         Magenta.       RMB       1
0008                  (       cocovtio.d):00903         Cyan.          RMB       1
                      (       cocovtio.d):00904         
                      (       cocovtio.d):00905                        ENDC      
                      (       cocovtio.d):00906                        ENDC      
                      (/home/strick/6809):00205                  ENDC
                      (/home/strick/6809):00206                  ENDC
                      (/home/strick/6809):00207         
     00D1             (/home/strick/6809):00208         tylg     set   FlMgr+Objct
     0080             (/home/strick/6809):00209         atrv     set   ReEnt+rev
     0000             (/home/strick/6809):00210         rev      set   0
     0012             (/home/strick/6809):00211         edition  equ   18
                      (/home/strick/6809):00212         
0000 87CD0782000DD180 (/home/strick/6809):00213                  mod   eom,SCFName,tylg,atrv,SCFEnt,0
     6C02AA0000
                      (/home/strick/6809):00214         
000D 5343C6           (/home/strick/6809):00215         SCFName  fcs   /SCF/
0010 12               (/home/strick/6809):00216                  fcb   edition
                      (/home/strick/6809):00217         
                      (/home/strick/6809):00218         
                      (/home/strick/6809):00219         * Default input buffer setting for SCF devices when Opened/Created
                      (/home/strick/6809):00220         *               123456789!123456789!1234567890
                      (/home/strick/6809):00221         *msg      fcc   'by B.Nobel,C.Boyle,W.Gale-1993'
0011 7777772E6E697472 (/home/strick/6809):00222         msg      fcc   'www.nitros9.org'
     6F73392E6F7267
     000F             (/home/strick/6809):00223         msgsize  equ   *-msg        Size of default input buffer message
0020 0D               (/home/strick/6809):00224                  fcb   C$CR         2nd CR for buffer pad fill
     00F1             (/home/strick/6809):00225         blksize  equ   256-msgsize  Size of blank space after it
                      (/home/strick/6809):00226         
                      (/home/strick/6809):00227         * Return bad pathname error
0021 3520             (/home/strick/6809):00228         opbpnam  puls  y
0023 53               (/home/strick/6809):00229         bpnam    comb               Set carry for error
0024 C6D7             (/home/strick/6809):00230                  ldb   #E$BPNam     Get error code
0026 39               (/home/strick/6809):00231         oerr     rts                Return to caller
                      (/home/strick/6809):00232         
                      (/home/strick/6809):00233         * I$Create/I$Open entry point
                      (/home/strick/6809):00234         * Entry: Y= Path dsc. ptr
0027 AE23             (/home/strick/6809):00235         open     ldx   PD.DEV,y     Get device table pointer
0029 AFA83B           (/home/strick/6809):00236                  stx   PD.TBL,y     Save it
002C EE26             (/home/strick/6809):00237                  ldu   PD.RGS,y     Get callers register stack pointer
002E 3420             (/home/strick/6809):00238                  pshs  y            Save path descriptor pointer
0030 AE46             (/home/strick/6809):00239                  ldx   R$X,u        Get pointer to device pathname
0032 103F10           (/home/strick/6809):00240                  os9   F$PrsNam     Parse it
0035 25EA             (/home/strick/6809):00241                  bcs   opbpnam      Error, exit
0037 4D               (/home/strick/6809):00242                  tsta               End of pathname?
0038 2B07             (/home/strick/6809):00243                  bmi   open1        Yes, go on
003A 30A4             (/home/strick/6809):00244                  leax  ,y           Point to actual device name
003C 103F10           (/home/strick/6809):00245                  os9   F$PrsNam     Parse it again
003F 24E0             (/home/strick/6809):00246                  bcc   opbpnam      Return to caller with bad path name if more
0041 10AF46           (/home/strick/6809):00247         open1    sty   R$X,u        Save updated name pointer to caller
0044 3520             (/home/strick/6809):00248                  puls  y            Restore path descriptor pointer
0046 CC0100           (/home/strick/6809):00249                  ldd   #256         Get size of input buffer in bytes
0049 103F28           (/home/strick/6809):00250                  os9   F$SRqMem     Allocate it
004C 25D8             (/home/strick/6809):00251                  bcs   oerr         Can't allocate it return with error
004E EF28             (/home/strick/6809):00252                  stu   PD.BUF,y     Save buffer address to path descriptor
0050 308CBE           (/home/strick/6809):00253                  leax  <msg,pc      Get ptr to init string
                      (/home/strick/6809):00254         
                      (/home/strick/6809):00255                  IFNE  H6309
                      (/home/strick/6809):00256         
0053 1086000F         (/home/strick/6809):00257                  ldw   #msgsize     get size of default message
0057 113813           (/home/strick/6809):00258                  tfm   x+,u+        Copy it into buffer (leaves X pointing to 2nd CR)
005A 108600F1         (/home/strick/6809):00259                  ldw   #blksize     Size of rest of buffer
005E 113B13           (/home/strick/6809):00260                  tfm   x,u+         Fill rest of buffer with CR's
                      (/home/strick/6809):00261         
                      (/home/strick/6809):00262                  ELSE
                      (/home/strick/6809):00263         
0061                  (/home/strick/6809):00264         CopyMsg  lda   ,x+
                      (/home/strick/6809):00265                  sta   ,u+
                      (/home/strick/6809):00266                  decb
                      (/home/strick/6809):00267                  cmpa  #C$CR
                      (/home/strick/6809):00268                  bne   CopyMsg
0061                  (/home/strick/6809):00269         CopyCR   sta   ,u+
                      (/home/strick/6809):00270                  decb
                      (/home/strick/6809):00271                  bne   CopyCR
                      (/home/strick/6809):00272         
                      (/home/strick/6809):00273                  ENDC
                      (/home/strick/6809):00274         
0061 EE23             (/home/strick/6809):00275                  ldu   PD.DEV,y     Get device table entry address
0063 27BE             (/home/strick/6809):00276                  beq   bpnam        Doesn't exist, exit with bad pathname error
0065 AE42             (/home/strick/6809):00277                  ldx   V$STAT,u     Get devices' static storage address
0067 A6A828           (/home/strick/6809):00278                  lda   PD.PAG,y     Get devices page length
006A A707             (/home/strick/6809):00279                  sta   V.LINE,x     Save it to devices static storage
006C AE44             (/home/strick/6809):00280                  ldx   V$DESC,u     Get descriptor address
006E ECA836           (/home/strick/6809):00281                  ldd   PD.D2P,y     Get offset to device name (duplicate from dev dsc)
0071 2721             (/home/strick/6809):00282                  beq   L00CF        None, skip ahead
                      (/home/strick/6809):00283         
                      (/home/strick/6809):00284                  IFNE  H6309
                      (/home/strick/6809):00285         
0073 103001           (/home/strick/6809):00286                  addr  d,x          Point to device name in descriptor
0076 A621             (/home/strick/6809):00287                  lda   PD.MOD,y     Get device mode (Read/Write/Update)
0078 1044             (/home/strick/6809):00288                  lsrd               ??? (swap Read/Write bits around in A?)
                      (/home/strick/6809):00289         
                      (/home/strick/6809):00290                  ELSE
                      (/home/strick/6809):00291         
                      (/home/strick/6809):00292                  leax  d,x
                      (/home/strick/6809):00293                  lda   PD.MOD,y     Get device mode (Read/Write/Update)
                      (/home/strick/6809):00294                  lsra
                      (/home/strick/6809):00295                  rorb
                      (/home/strick/6809):00296         
                      (/home/strick/6809):00297                  ENDC
                      (/home/strick/6809):00298         
007A 44               (/home/strick/6809):00299                  lsra
007B 59               (/home/strick/6809):00300                  rolb
007C 49               (/home/strick/6809):00301                  rola
007D 56               (/home/strick/6809):00302                  rorb
007E 49               (/home/strick/6809):00303                  rola
                      (/home/strick/6809):00304                  IFGT  Level-1
007F 3420             (/home/strick/6809):00305                  pshs  y            Save path descriptor pointer temporarily
0081 109E50           (/home/strick/6809):00306                  ldy   <D.Proc      Get current process pointer
0084 DE4A             (/home/strick/6809):00307                  ldu   <D.SysPrc    Get system process descriptor pointer
0086 DF50             (/home/strick/6809):00308                  stu   <D.Proc      Make system current process
                      (/home/strick/6809):00309                  ENDC
0088 103F80           (/home/strick/6809):00310                  os9   I$Attach     Attempt to attach to device name in device desc.
                      (/home/strick/6809):00311                  IFGT  Level-1
008B 109F50           (/home/strick/6809):00312                  sty   <D.Proc      Restore old current process pointer
008E 3520             (/home/strick/6809):00313                  puls  y            Restore path descriptor pointer
                      (/home/strick/6809):00314                  ENDC
0090 2555             (/home/strick/6809):00315                  bcs   OpenErr     Couldn't attach to device, detach & exit with error
0092 EF2A             (/home/strick/6809):00316                  stu   PD.DV2,y     Save new output (echo) device table pointer
                      (/home/strick/6809):00317         *         ldu   PD.DEV,y     Get device table pointer
0094 EE42             (/home/strick/6809):00318         L00CF    ldu   V$STAT,u     Point to it's static storage
                      (/home/strick/6809):00319         
                      (/home/strick/6809):00320                  IFNE  H6309
                      (/home/strick/6809):00321         
0096 104F             (/home/strick/6809):00322                  clrd
                      (/home/strick/6809):00323         
                      (/home/strick/6809):00324                  ELSE
                      (/home/strick/6809):00325         
                      (/home/strick/6809):00326                  clra
                      (/home/strick/6809):00327                  clrb
                      (/home/strick/6809):00328         
                      (/home/strick/6809):00329                  ENDC
                      (/home/strick/6809):00330         
0098 EDA83D           (/home/strick/6809):00331                  std   PD.PLP,y     Clear out path descriptor list pointer
009B A7A83F           (/home/strick/6809):00332                  sta   PD.PST,y     Clear path status: Carrier not lost
009E 3406             (/home/strick/6809):00333                  pshs  d            Save 0 on stack
00A0 AEC816           (/home/strick/6809):00334                  ldx   V.PDLHd,u    Get path descriptor list header pointer
                      (/home/strick/6809):00335         * 05/25/93 mod - Boisy Pitre's non-sharable device patches
                      (/home/strick/6809):00336         * 01/15/10 mod - Boisy Pitre redoes his non-sharable device patch
00A3 2711             (/home/strick/6809):00337                  beq   Yespath      No paths open, so we know we can open it
                      (/home/strick/6809):00338         * IOMan has already vetted the mode byte of the driver and the descriptor
                      (/home/strick/6809):00339         * and compared it to REGA of I$Open (now in PD.MOD of this current path).
                      (/home/strick/6809):00340         * here we know there is at least one path open for this device.
                      (/home/strick/6809):00341         * in order to properly support SHARE. (device exclusivity), we get the
                      (/home/strick/6809):00342         * mode byte for the path we are opening and see if the SHARE. bit is set.
                      (/home/strick/6809):00343         * if so, then we return error since we cannot have exclusivity to the device.
                      (/home/strick/6809):00344                  IFNE  H6309
00A5 6B4021           (/home/strick/6809):00345                  tim   #SHARE.,PD.MOD,y
                      (/home/strick/6809):00346                  ELSE
                      (/home/strick/6809):00347                  lda   PD.MOD,y 
                      (/home/strick/6809):00348                  bita  #SHARE.
                      (/home/strick/6809):00349                  ENDC
00A8 2605             (/home/strick/6809):00350                  bne   NoShare      
                      (/home/strick/6809):00351         * we now know that the path's mode doesn't have the SHARE. bit set, so 
                      (/home/strick/6809):00352         * we need to look at the mode of the path in the list header pointer to
                      (/home/strick/6809):00353         * see if ITS SHARE. bit is set (meaning it wants exclusive access to the
                      (/home/strick/6809):00354         * port).  If so we bail out
                      (/home/strick/6809):00355                  IFNE  H6309
00AA 6B4001           (/home/strick/6809):00356                  tim   #SHARE.,PD.MOD,x
                      (/home/strick/6809):00357                  ELSE
                      (/home/strick/6809):00358                  lda   PD.MOD,x 
                      (/home/strick/6809):00359                  bita  #SHARE.
                      (/home/strick/6809):00360                  ENDC
00AD 270F             (/home/strick/6809):00361                  beq   CkCar        Check carrier status
00AF 3262             (/home/strick/6809):00362         NoShare  leas  2,s          Eat extra stack (including good path count)
00B1 53               (/home/strick/6809):00363                  comb
00B2 C6FA             (/home/strick/6809):00364                  ldb   #E$DevBsy    Non-sharable device busy error
00B4 2031             (/home/strick/6809):00365                  bra   OpenErr       Go detach device & exit with error
                      (/home/strick/6809):00366                  
00B6 10AFC816         (/home/strick/6809):00367         Yespath  sty   V.PDLHd,u    Save path descriptor ptr
00BA 2012             (/home/strick/6809):00368                  bra   L00F8        Go open the path
                      (/home/strick/6809):00369         
00BC 1F01             (/home/strick/6809):00370         L00E6    tfr   d,x          Change to PD.PLP path descriptor
00BE E6883F           (/home/strick/6809):00371         CkCar    ldb   PD.PST,x     Get Carrier status
00C1 2602             (/home/strick/6809):00372                  bne   L00EF        Carrier was lost, don't update count
00C3 6C61             (/home/strick/6809):00373                  inc   1,s          Carrier not lost, bump up count of good paths
00C5 EC883D           (/home/strick/6809):00374         L00EF    ldd   PD.PLP,x     Get path descriptor list pointer
00C8 26F2             (/home/strick/6809):00375                  bne   L00E6        There is one, go make it the current one
00CA 10AF883D         (/home/strick/6809):00376                  sty   PD.PLP,x     Save path descriptor ptr as path dsc. list ptr
00CE 8629             (/home/strick/6809):00377         L00F8    lda   #SS.Open     Internal open call
00D0 3402             (/home/strick/6809):00378                  pshs  a            Save it on the stack
00D2 6C62             (/home/strick/6809):00379                  inc   2,s          Bump counter of good paths up by 1
00D4 170181           (/home/strick/6809):00380                  lbsr  L025B        Do the SS.Open call to the driver
00D7 A662             (/home/strick/6809):00381                  lda   2,s          Get counter of good paths
00D9 3263             (/home/strick/6809):00382                  leas  3,s          Eat stack
                      (/home/strick/6809):00383         * NEW: return with error if SS.Open return error
00DB 2508             (/home/strick/6809):00384                  bcs   L010F        +++BGP+++
00DD 4A               (/home/strick/6809):00385                  deca               Bump down good path count
00DE 261F             (/home/strick/6809):00386                  bne   L0129        If more still open, exit without error
00E0 2503             (/home/strick/6809):00387                  blo   L010F        If negative, something went wrong
00E2 160168           (/home/strick/6809):00388                  lbra  L0250        Set parity/baud & return
                      (/home/strick/6809):00389         
                      (/home/strick/6809):00390         * we come here if there was an error in Open (after I$Attach and F$SRqMem!)
00E5 8D40             (/home/strick/6809):00391         L010F    bsr   RemoveFromPDList        Error, go clear stuff out
00E7 3405             (/home/strick/6809):00392         OpenErr  pshs  b,cc         Preserve error status
00E9 8D29             (/home/strick/6809):00393                  bsr   L0136        Detach device
00EB 3585             (/home/strick/6809):00394                  puls  pc,b,cc      Restore error status & return
                      (/home/strick/6809):00395         
                      (/home/strick/6809):00396         * I$Close entry point
00ED 3401             (/home/strick/6809):00397         close    pshs  cc           Preserve interrupt status
00EF 1A50             (/home/strick/6809):00398                  orcc  #IntMasks    Disable interrupts
00F1 AE23             (/home/strick/6809):00399                  ldx   PD.DEV,y     Get device table pointer
00F3 8D6B             (/home/strick/6809):00400                  bsr   L0182        Check it
00F5 AE2A             (/home/strick/6809):00401                  ldx   PD.DV2,y     Get output device table pointer
00F7 8D67             (/home/strick/6809):00402                  bsr   L0182        Check it
00F9 3501             (/home/strick/6809):00403                  puls  cc           Restore interrupts
00FB A622             (/home/strick/6809):00404                  lda   PD.CNT,y     Any open images?
00FD 2702             (/home/strick/6809):00405                  beq   L012B        No, go on
00FF 4F               (/home/strick/6809):00406         L0129    clra               Clear carry
0100 39               (/home/strick/6809):00407         L012A    rts                Return
                      (/home/strick/6809):00408         
                      (/home/strick/6809):00409         * Detach device & return buffer memory
0101 8D24             (/home/strick/6809):00410         L012B    bsr   RemoveFromPDList
0103 862A             (/home/strick/6809):00411                  lda   #SS.Close    Get setstat code for close
0105 AE23             (/home/strick/6809):00412                  ldx   PD.DEV,y     get pointer to device table
0107 AE02             (/home/strick/6809):00413                  ldx   V$STAT,x     get static mem ptr
0109 E606             (/home/strick/6809):00414                  ldb   V.TYPE,x     Get device type    \ WON'T THIS SCREW UP WITH
010B 2B07             (/home/strick/6809):00415                  bmi   L0136        Window, skip ahead / MARK OR SPACE PARITY???
010D 3412             (/home/strick/6809):00416                  pshs  x,a          Save close code & X for SS.Close calling routine
010F 170146           (/home/strick/6809):00417                  lbsr  L025B        Not window, go call driver's SS.Close routine
0112 3263             (/home/strick/6809):00418                  leas  3,s          Purge stack
0114 EE2A             (/home/strick/6809):00419         L0136    ldu   PD.DV2,y     Get output device pointer
0116 2703             (/home/strick/6809):00420                  beq   L013D        Nothing there, go on
0118 103F81           (/home/strick/6809):00421                  os9   I$Detach     Detach it
011B EE28             (/home/strick/6809):00422         L013D    ldu   PD.BUF,y     Get buffer pointer
011D 2706             (/home/strick/6809):00423                  beq   L0147        None defined go on
011F CC0100           (/home/strick/6809):00424                  ldd   #256         Get buffer size
0122 103F29           (/home/strick/6809):00425                  os9   F$SRtMem     Return buffer memory to system
0125 4F               (/home/strick/6809):00426         L0147    clra               Clear carry
0126 39               (/home/strick/6809):00427                  rts                Return
                      (/home/strick/6809):00428         
                      (/home/strick/6809):00429         * Remove path descriptor from device path descriptor linked list
                      (/home/strick/6809):00430         * Entry: Y = path descriptor
0127                  (/home/strick/6809):00431         RemoveFromPDList
0127 8E0001           (/home/strick/6809):00432                  ldx   #1
012A 3477             (/home/strick/6809):00433                  pshs  cc,d,x,y,u
012C EE23             (/home/strick/6809):00434                  ldu   PD.DEV,y     Get device table pointer
012E 2729             (/home/strick/6809):00435                  beq   L017B        None, skip ahead
0130 EE42             (/home/strick/6809):00436                  ldu   V$STAT,u     Get static storage pointer
0132 2725             (/home/strick/6809):00437                  beq   L017B        None, skip ahead
0134 AEC816           (/home/strick/6809):00438                  ldx   V.PDLHd,u    Get path descriptor list header
0137 2720             (/home/strick/6809):00439                  beq   L017B        None, skip ahead
0139 ECA83D           (/home/strick/6809):00440                  ldd   PD.PLP,y     Get path descriptor list pointer
013C 10ACC816         (/home/strick/6809):00441                  cmpy  V.PDLHd,u    is the passed path descriptor the same?
0140 260E             (/home/strick/6809):00442                  bne   L0172        branch if not
0142 EDC816           (/home/strick/6809):00443                  std   V.PDLHd,u
0145 2612             (/home/strick/6809):00444                  bne   L017B
0147 6F64             (/home/strick/6809):00445                  clr   4,s          Clear LSB of X on stack
0149 200E             (/home/strick/6809):00446                  bra   L017B        Return
                      (/home/strick/6809):00447         
                      (/home/strick/6809):00448         * D = path descriptor to store
014B AE883D           (/home/strick/6809):00449         L016D    ldx   PD.PLP,x     advance to next path descriptor in list
014E 270E             (/home/strick/6809):00450                  beq   L0180        branch if at end of linked list
0150 10AC883D         (/home/strick/6809):00451         L0172    cmpy  PD.PLP,x     is the passed path descriptor the same?
0154 26F5             (/home/strick/6809):00452                  bne   L016D        branch if not
0156 ED883D           (/home/strick/6809):00453                  std   PD.PLP,x     store
                      (/home/strick/6809):00454                  IFNE  H6309
0159 104F             (/home/strick/6809):00455         L017B    clrd
                      (/home/strick/6809):00456                  ELSE
015B                  (/home/strick/6809):00457         L017B    clra
                      (/home/strick/6809):00458                  clrb
                      (/home/strick/6809):00459                  ENDC
015B EDA83D           (/home/strick/6809):00460                  std   PD.PLP,y
015E 35F7             (/home/strick/6809):00461         L0180    puls  cc,d,x,y,u,pc
                      (/home/strick/6809):00462         
                      (/home/strick/6809):00463         
                      (/home/strick/6809):00464         * Check path number?
                      (/home/strick/6809):00465         * Entry: X=Ptr to device table (just LDX'd)
                      (/home/strick/6809):00466         *        Y=Path dsc. ptr
0160 279E             (/home/strick/6809):00467         L0182    beq   L012A        No device table, return to caller
0162 AE02             (/home/strick/6809):00468                  ldx   V$STAT,x     Get static storage pointer
0164 E6A4             (/home/strick/6809):00469                  ldb   PD.PD,y      Get system path number from path dsc.
0166 A625             (/home/strick/6809):00470                  lda   PD.CPR,y     Get ID # of process currently using path
0168 3436             (/home/strick/6809):00471                  pshs  d,x,y        Save everything
016A A103             (/home/strick/6809):00472                  cmpa  V.LPRC,x     Current process same as last process using path?
016C 263A             (/home/strick/6809):00473                  bne   L01CA        No, return
                      (/home/strick/6809):00474                  IFGT  Level-1
016E 9E50             (/home/strick/6809):00475                  ldx   <D.Proc      Get current process pointer
                      (/home/strick/6809):00476                  ELSE
                      (/home/strick/6809):00477                  ldx   >D.Proc      Get current process pointer
                      (/home/strick/6809):00478                  ENDC
0170 308830           (/home/strick/6809):00479                  leax  P$Path,x     Point to local path table
0173 4F               (/home/strick/6809):00480                  clra               Start path # = 0 (Std In)
0174 E186             (/home/strick/6809):00481         L0198    cmpb  a,x          Same path as one is process' local path list?
0176 2730             (/home/strick/6809):00482                  beq   L01CA        Yes, return
0178 4C               (/home/strick/6809):00483                  inca               Move to next path
0179 8110             (/home/strick/6809):00484                  cmpa  #NumPaths    Done all paths?
017B 25F7             (/home/strick/6809):00485                  blo   L0198        No, keep going
017D 3420             (/home/strick/6809):00486                  pshs  y            Preserve path descriptor pointer
                      (/home/strick/6809):00487         
                      (/home/strick/6809):00488                  IFNE  H6309
                      (/home/strick/6809):00489         
017F 861B             (/home/strick/6809):00490                  lda   #SS.Relea    Release signals SetStat
0181 11C60C           (/home/strick/6809):00491                  ldf   #D$PSTA      Get Setstat offset
                      (/home/strick/6809):00492         
                      (/home/strick/6809):00493                  ELSE
                      (/home/strick/6809):00494         
                      (/home/strick/6809):00495                  ldd   #SS.Relea*256+D$PSTA
                      (/home/strick/6809):00496         
                      (/home/strick/6809):00497                  ENDC
                      (/home/strick/6809):00498         
0184 8D51             (/home/strick/6809):00499                  bsr   L01FA        Execute driver setstat routine
0186 3520             (/home/strick/6809):00500                  puls  y            Restore path pointer
                      (/home/strick/6809):00501                  IFGT  Level-1
0188 9E50             (/home/strick/6809):00502                  ldx   <D.Proc      Get current process pointer
                      (/home/strick/6809):00503                  ELSE
                      (/home/strick/6809):00504                  ldx   >D.Proc      Get current process pointer
                      (/home/strick/6809):00505                  ENDC
018A A601             (/home/strick/6809):00506                  lda   P$PID,x      Get parent process ID
018C A7E4             (/home/strick/6809):00507                  sta   ,s           Save it
                      (/home/strick/6809):00508                  IFGT  Level-1
018E 103F37           (/home/strick/6809):00509                  os9   F$GProcP     Get pointer to parent process descriptor
                      (/home/strick/6809):00510                  ELSE
                      (/home/strick/6809):00511                  ldx   <D.PrcDBT
                      (/home/strick/6809):00512                  os9   F$Find64
                      (/home/strick/6809):00513                  ENDC
0191 30A830           (/home/strick/6809):00514                  leax  P$Path,y     Point to local path table
0194 E661             (/home/strick/6809):00515                  ldb   1,s          Get path number
0196 4F               (/home/strick/6809):00516                  clra               Get starting path number
0197 E186             (/home/strick/6809):00517         L01B9    cmpb  a,x          Same path?
0199 2707             (/home/strick/6809):00518                  beq   L01C4        Yes, go on
019B 4C               (/home/strick/6809):00519                  inca               Move to next path
019C 8110             (/home/strick/6809):00520                  cmpa  #NumPaths    Done all paths?
019E 25F7             (/home/strick/6809):00521                  blo   L01B9        No, keep checking
01A0 6FE4             (/home/strick/6809):00522                  clr   ,s           Clear process ID
01A2 A6E4             (/home/strick/6809):00523         L01C4    lda   ,s           Get process ID
01A4 AE62             (/home/strick/6809):00524                  ldx   2,s          Get static storage pointer
01A6 A703             (/home/strick/6809):00525                  sta   V.LPRC,x     Store it as last process
01A8 35B6             (/home/strick/6809):00526         L01CA    puls  d,x,y,pc     Restore & return
                      (/home/strick/6809):00527         
                      (/home/strick/6809):00528         * I$GetStt entry point
01AA A6A83F           (/home/strick/6809):00529         getstt   lda   PD.PST,y     Path status ok?
01AD 10260229         (/home/strick/6809):00530                  lbne  L04C6        No, terminate process
01B1 AE26             (/home/strick/6809):00531                  ldx   PD.RGS,y     Get register stack pointer
01B3 A602             (/home/strick/6809):00532                  lda   R$B,x        Get function code
01B5 261D             (/home/strick/6809):00533                  bne   L01F8        If not SS.Opt, go on
                      (/home/strick/6809):00534         * SS.Opt Getstat
01B7 3432             (/home/strick/6809):00535                  pshs  a,x,y        Preserve registers
01B9 8628             (/home/strick/6809):00536                  lda   #SS.ComSt    Get code for Comstat
01BB A702             (/home/strick/6809):00537                  sta   R$B,x        Save it in callers B
01BD EE08             (/home/strick/6809):00538                  ldu   R$Y,x        Preserve callers Y
01BF 3440             (/home/strick/6809):00539                  pshs  u
01C1 8D11             (/home/strick/6809):00540                  bsr   L01F8        Send it to driver
01C3 3540             (/home/strick/6809):00541                  puls  u            Restore callers Y
01C5 3532             (/home/strick/6809):00542                  puls  a,x,y        Restore registers
01C7 A702             (/home/strick/6809):00543                  sta   R$B,x        Do SS.OPT
01C9 EC08             (/home/strick/6809):00544                  ldd   R$Y,x        Get com stat
01CB EF08             (/home/strick/6809):00545                  stu   R$Y,x        Put original callers Y back
01CD 2503             (/home/strick/6809):00546                  bcs   L01F6        Return if error
01CF EDA834           (/home/strick/6809):00547                  std   PD.PAR,y     Update path descriptor
01D2 5F               (/home/strick/6809):00548         L01F6    clrb               Clear carry
01D3 39               (/home/strick/6809):00549         L01F7    rts                Return
                      (/home/strick/6809):00550         
                      (/home/strick/6809):00551         * Execute device driver Get/Set Status routine
                      (/home/strick/6809):00552         * Entry: A=GetStat/SetStat code
                      (/home/strick/6809):00553         
                      (/home/strick/6809):00554                  IFNE  H6309
                      (/home/strick/6809):00555         
01D4 11C609           (/home/strick/6809):00556         L01F8    ldf   #D$GSTA      Get Getstat driver entry offset
01D7 AE23             (/home/strick/6809):00557         L01FA    ldx   PD.DEV,y     Get device table pointer
01D9 EE02             (/home/strick/6809):00558                  ldu   V$STAT,x     Get static storage pointer
                      (/home/strick/6809):00559                  IFGT  Level-1
01DB AE09             (/home/strick/6809):00560                  ldx   V$DRIVEX,x   get execution pointer of driver
                      (/home/strick/6809):00561                  ELSE
                      (/home/strick/6809):00562                  pshs  d
                      (/home/strick/6809):00563                  ldx   V$DRIV,x     get driver module
                      (/home/strick/6809):00564                  ldd   M$EXEC,x
                      (/home/strick/6809):00565                  leax  d,x
                      (/home/strick/6809):00566                  puls  d
                      (/home/strick/6809):00567                  ENDC
01DD 3460             (/home/strick/6809):00568                  pshs  y,u          Preserve registers
01DF AD8A             (/home/strick/6809):00569                  jsr   f,x          Execute driver
01E1 35E0             (/home/strick/6809):00570                  puls  y,u,pc       Restore & return
                      (/home/strick/6809):00571         
                      (/home/strick/6809):00572                  ELSE
                      (/home/strick/6809):00573         
01E3                  (/home/strick/6809):00574         L01F8    ldb   #D$GSTA
01E3                  (/home/strick/6809):00575         L01FA    ldx   PD.DEV,y
                      (/home/strick/6809):00576                  ldu   V$STAT,x
                      (/home/strick/6809):00577                  IFGT  Level-1
                      (/home/strick/6809):00578                  ldx   V$DRIVEX,x
                      (/home/strick/6809):00579                  ELSE
                      (/home/strick/6809):00580                  pshs  d
                      (/home/strick/6809):00581                  ldx   V$DRIV,x     get driver module
                      (/home/strick/6809):00582                  ldd   M$EXEC,x
                      (/home/strick/6809):00583                  leax  d,x
                      (/home/strick/6809):00584                  puls  d
                      (/home/strick/6809):00585                  ENDC
                      (/home/strick/6809):00586                  pshs  u,y
01E3                  (/home/strick/6809):00587         LC486    jsr   b,x
                      (/home/strick/6809):00588                  puls  y,u,pc
                      (/home/strick/6809):00589         
                      (/home/strick/6809):00590                  ENDC
                      (/home/strick/6809):00591         
                      (/home/strick/6809):00592         
                      (/home/strick/6809):00593         * I$SetStt entry point
01E3 1701CF           (/home/strick/6809):00594         setstt   lbsr  L04A2
01E6 8D33             (/home/strick/6809):00595         L0212    bsr   L021B        Check codes
01E8 3405             (/home/strick/6809):00596                  pshs  cc,b         Preserve registers
01EA 17017B           (/home/strick/6809):00597                  lbsr  L0453        Wait for device
01ED 3585             (/home/strick/6809):00598                  puls  cc,b,pc      Restore & return
                      (/home/strick/6809):00599         
01EF 81A0             (/home/strick/6809):00600         putkey   cmpa  #SS.Fill     Buffer preload?
01F1 26E4             (/home/strick/6809):00601                  bne   L01FA        No, go execute driver setstat
01F3 3470             (/home/strick/6809):00602                  pshs  u,y,x
                      (/home/strick/6809):00603                  IFGT  Level-1
01F5 9E50             (/home/strick/6809):00604                  ldx   <D.Proc      Get current process pointer
                      (/home/strick/6809):00605                  ELSE
                      (/home/strick/6809):00606                  ldx   >D.Proc      Get current process pointer
                      (/home/strick/6809):00607                  ENDC
01F7 A648             (/home/strick/6809):00608                  lda   R$Y,u        Get flag byte for CR/NO CR
01F9 3402             (/home/strick/6809):00609                  pshs  a            Save it
                      (/home/strick/6809):00610                  IFGT  Level-1
01FB A606             (/home/strick/6809):00611                  lda   P$Task,x     Get task number
01FD D6D0             (/home/strick/6809):00612                  ldb   <D.SysTsk    Get system task
                      (/home/strick/6809):00613                  IFNE  H6309
01FF AE46             (/home/strick/6809):00614                  ldx   R$X,u        Get pointer to data to move
0201 11E649           (/home/strick/6809):00615                  ldf   R$Y+1,u      Get number of bytes (max size of 256 bytes)
0204 EE28             (/home/strick/6809):00616                  ldu   PD.BUF,y     Get input buffer pointer
0206 114F             (/home/strick/6809):00617                  clre               High byte of Y
0208 1F62             (/home/strick/6809):00618                  tfr   w,y          Move size into proper register for F$Move
                      (/home/strick/6809):00619                  ELSE
                      (/home/strick/6809):00620                  pshs  d
                      (/home/strick/6809):00621                  clra
                      (/home/strick/6809):00622                  ldb   R$Y+1,u
                      (/home/strick/6809):00623                  ldx   R$X,u
                      (/home/strick/6809):00624                  ldu   PD.BUF,y
                      (/home/strick/6809):00625                  tfr   d,y
                      (/home/strick/6809):00626                  puls  d
                      (/home/strick/6809):00627                  ENDC
                      (/home/strick/6809):00628         * X=Source ptr from caller, Y=# bytes to move, U=Input buffer ptr
020A 103F38           (/home/strick/6809):00629                  os9   F$Move       Move it
020D 250A             (/home/strick/6809):00630                  bcs   putkey1      Exit if error
020F 1F20             (/home/strick/6809):00631                  tfr   y,d          Move number of bytes to D
                      (/home/strick/6809):00632                  ELSE
0211                  (/home/strick/6809):00633         loop
                      (/home/strick/6809):00634                  lda   ,x+
                      (/home/strick/6809):00635                  sta   ,u+
                      (/home/strick/6809):00636                  leay  -1,y
                      (/home/strick/6809):00637                  bne   loop
                      (/home/strick/6809):00638                  ENDC
0211 A6E4             (/home/strick/6809):00639                  lda   ,s           Get CR flag
0213 2B04             (/home/strick/6809):00640                  bmi   putkey1      Don't want CR appended, exit
0215 860D             (/home/strick/6809):00641                  lda   #C$CR        Get code for carriage return
0217 A7C5             (/home/strick/6809):00642                  sta   b,u          Put it in buffer to terminate string
0219 35F2             (/home/strick/6809):00643         putkey1  puls  a,x,y,u,pc   Eat stack & return
                      (/home/strick/6809):00644                  IFNE  H6309
021B 11C60C           (/home/strick/6809):00645         L021B    ldf   #D$PSTA      Get driver entry offset for setstat
                      (/home/strick/6809):00646                  ELSE
021E                  (/home/strick/6809):00647         L021B    ldb   #D$PSTA      Get driver entry offset for setstat
                      (/home/strick/6809):00648                  ENDC
021E A642             (/home/strick/6809):00649                  lda   R$B,u        Get function code from caller
0220 26CD             (/home/strick/6809):00650                  bne   putkey       Not SS.OPT, go check buffer load
                      (/home/strick/6809):00651         * SS.OPT SETSTAT
0222 AEA827           (/home/strick/6809):00652                  ldx   PD.PAU,y     Get current pause & page
                      (/home/strick/6809):00653                  IFGT  Level-1
0225 3430             (/home/strick/6809):00654                  pshs  y,x          Preserve Path pointer & pause/page
0227 9E50             (/home/strick/6809):00655                  ldx   <D.Proc      Get current process pointer
0229 A606             (/home/strick/6809):00656                  lda   P$Task,x     Get task number
022B D6D0             (/home/strick/6809):00657                  ldb   <D.SysTsk    Get system task number
022D AE46             (/home/strick/6809):00658                  ldx   R$X,u        Get callers destination pointer
022F 33A820           (/home/strick/6809):00659                  leau  PD.OPT,y     Point to path options
0232 108E001A         (/home/strick/6809):00660                  ldy   #OPTCNT      Get option length
0236 103F38           (/home/strick/6809):00661                  os9   F$Move       Move it to caller
0239 3530             (/home/strick/6809):00662                  puls  y,x          Restore Path pointer & page/pause status
023B 2596             (/home/strick/6809):00663                  bcs   L01F7        Return if error from move
                      (/home/strick/6809):00664                  ELSE
                      (/home/strick/6809):00665                  pshs  x,y
                      (/home/strick/6809):00666                  ldx   R$X,u
                      (/home/strick/6809):00667                  leay  PD.OPT,y
                      (/home/strick/6809):00668                  ldb   #OPTCNT
023D                  (/home/strick/6809):00669         optloop
                      (/home/strick/6809):00670                  lda   ,x+
                      (/home/strick/6809):00671                  sta   ,y+
                      (/home/strick/6809):00672                  decb
                      (/home/strick/6809):00673                  bne   optloop
                      (/home/strick/6809):00674                  puls  x,y
                      (/home/strick/6809):00675                  ENDC
                      (/home/strick/6809):00676                  IFEQ  H6309
                      (/home/strick/6809):00677                  pshs  x
                      (/home/strick/6809):00678                  ENDC
023D ECA827           (/home/strick/6809):00679                  ldd   PD.PAU,y     Get new page/pause status
                      (/home/strick/6809):00680                  IFNE  H6309
0240 103701           (/home/strick/6809):00681                  cmpr  d,x          Same as old?
                      (/home/strick/6809):00682                  ELSE
                      (/home/strick/6809):00683                  cmpd  ,s++
                      (/home/strick/6809):00684                  ENDC
0243 2708             (/home/strick/6809):00685                  beq   L0250        Yes, go on
0245 EE23             (/home/strick/6809):00686                  ldu   PD.DEV,y     Get device table pointer
0247 EE42             (/home/strick/6809):00687                  ldu   V$STAT,u     Get static storage pointer
0249 2702             (/home/strick/6809):00688                  beq   L0250        Go on if none
024B E747             (/home/strick/6809):00689                  stb   V.LINE,u     Update new line count
024D AEA834           (/home/strick/6809):00690         L0250    ldx   PD.PAR,y     Get parity/baud
0250 8628             (/home/strick/6809):00691                  lda   #SS.ComSt    Get code for ComSt
0252 3412             (/home/strick/6809):00692                  pshs  a,x          Preserve them 
0254 8D02             (/home/strick/6809):00693                  bsr   L025B        Update parity & baud
0256 3592             (/home/strick/6809):00694                  puls  a,x,pc       Restore & return
                      (/home/strick/6809):00695         
                      (/home/strick/6809):00696         * Update path Parity & baud
0258 3470             (/home/strick/6809):00697         L025B    pshs  x,y,u        Preserve everything
025A AE26             (/home/strick/6809):00698                  ldx   PD.RGS,y     Get callers register pointer
025C EE08             (/home/strick/6809):00699                  ldu   R$Y,x        Get his Y
025E A602             (/home/strick/6809):00700                  lda   R$B,x        Get his B
0260 3472             (/home/strick/6809):00701                  pshs  a,x,y,u      Preserve it all
0262 ECE810           (/home/strick/6809):00702                  ldd   $10,s        Get current parity/baud
0265 ED08             (/home/strick/6809):00703                  std   R$Y,x        Put it in callers Y
0267 A66F             (/home/strick/6809):00704                  lda   $0F,s        Get function code
0269 A702             (/home/strick/6809):00705                  sta   R$B,x        Put it in callers B
026B 17014C           (/home/strick/6809):00706                  lbsr  L04A7        Wait for device to be ready
026E 17FF75           (/home/strick/6809):00707                  lbsr  L0212        Send it to driver
0271 3572             (/home/strick/6809):00708                  puls  a,x,y,u      Restore callers registers
0273 EF08             (/home/strick/6809):00709                  stu   R$Y,x        Put back his Y
0275 A702             (/home/strick/6809):00710                  sta   R$B,x        Put back his B
0277 2405             (/home/strick/6809):00711                  bcc   L0282        Return if no error
0279 C1D0             (/home/strick/6809):00712                  cmpb  #E$UnkSvc    Unknown service request?
027B 2701             (/home/strick/6809):00713                  beq   L0282        Yes, return
027D 43               (/home/strick/6809):00714                  coma               Set carry
027E 35F0             (/home/strick/6809):00715         L0282    puls  x,y,u,pc     Restore & return
                      (/home/strick/6809):00716         
                      (/home/strick/6809):00717         * I$Read entry point
0280 170132           (/home/strick/6809):00718         read     lbsr  L04A2        Go wait for device to be ready for us
0283 2401             (/home/strick/6809):00719                  bcc   L028A        No error, go on
0285 39               (/home/strick/6809):00720         L0289    rts                Return with error
0286 6C2C             (/home/strick/6809):00721         L028A    inc   PD.RAW,y     Make sure we do Raw read
0288 AE48             (/home/strick/6809):00722                  ldx   R$Y,u        Get number of characters to read
028A 2772             (/home/strick/6809):00723                  beq   L02DC        Return if zero
028C 3410             (/home/strick/6809):00724                  pshs  x            Save character count
028E 8E0000           (/home/strick/6809):00725                  ldx   #0
0291 EE28             (/home/strick/6809):00726                  ldu   PD.BUF,y     Get buffer address
0293 8D6B             (/home/strick/6809):00727                  bsr   L03E2        Read 1 character from device
0295 250A             (/home/strick/6809):00728                  bcs   L02A4        Return if error
0297 4D               (/home/strick/6809):00729                  tsta               Character read zero?
0298 274C             (/home/strick/6809):00730                  beq   L02C4        Yes, go try again
029A A1A82C           (/home/strick/6809):00731                  cmpa  PD.EOF,y     End of file character?
029D 263F             (/home/strick/6809):00732                  bne   L02BC        No, keep checking
029F C6D3             (/home/strick/6809):00733         L02A2    ldb   #E$EOF       Get EOF error code
02A1 3262             (/home/strick/6809):00734         L02A4    leas  2,s          Purge stack
02A3 3404             (/home/strick/6809):00735                  pshs  b            Save error code
02A5 8D51             (/home/strick/6809):00736                  bsr   L02D5        Return
02A7 53               (/home/strick/6809):00737                  comb               Set carry
02A8 3584             (/home/strick/6809):00738                  puls  b,pc         Restore & return
                      (/home/strick/6809):00739         
                      (/home/strick/6809):00740         ******************************
                      (/home/strick/6809):00741         *
                      (/home/strick/6809):00742         * SCF file manager entry point
                      (/home/strick/6809):00743         *
                      (/home/strick/6809):00744         * Entry: Y = Path descriptor pointer
                      (/home/strick/6809):00745         *        U = Callers register stack pointer
                      (/home/strick/6809):00746         *
                      (/home/strick/6809):00747         
02AA 16FD7A           (/home/strick/6809):00748         SCFEnt   lbra  open         Create path
02AD 16FD77           (/home/strick/6809):00749                  lbra  open         Open path
02B0 16FD70           (/home/strick/6809):00750                  lbra  bpnam        Makdir
02B3 16FD6D           (/home/strick/6809):00751                  lbra  bpnam        Chgdir
02B6 16FE46           (/home/strick/6809):00752                  lbra  L0129        Delete (return no error)
02B9 16FE43           (/home/strick/6809):00753                  lbra  L0129        Seek (return no error)
02BC 20C2             (/home/strick/6809):00754                  bra   read         Read character
02BE 12               (/home/strick/6809):00755                  nop
02BF 16012F           (/home/strick/6809):00756                  lbra  write        Write character
02C2 160085           (/home/strick/6809):00757                  lbra  readln       ReadLn
02C5 160125           (/home/strick/6809):00758                  lbra  writln       WriteLn
02C8 16FEDF           (/home/strick/6809):00759                  lbra  getstt       Get Status
02CB 16FF15           (/home/strick/6809):00760                  lbra  setstt       Set Status
02CE 16FE1C           (/home/strick/6809):00761                  lbra  close        Close path
                      (/home/strick/6809):00762         
                      (/home/strick/6809):00763         * MAIN READ LOOP (no editing)
02D1 1F10             (/home/strick/6809):00764         L02AD    tfr   x,d          move character count to D
02D3 5D               (/home/strick/6809):00765                  tstb               past buffer end?
02D4 2604             (/home/strick/6809):00766                  bne   L02B7        no, go get character from device
                      (/home/strick/6809):00767         * Not often used: only when buffer is full
02D6 8D48             (/home/strick/6809):00768                  bsr   L042B        move buffer to caller's buffer
02D8 EE28             (/home/strick/6809):00769                  ldu   PD.BUF,y     reset buffer pointer back to start
                      (/home/strick/6809):00770         * Main char by char read loop
02DA 8D24             (/home/strick/6809):00771         L02B7    bsr   L03E2        get a character from device
02DC 25C3             (/home/strick/6809):00772                  bcs   L02A4        exit if error
02DE E6A824           (/home/strick/6809):00773         L02BC    ldb   PD.EKO,y     echo turned on?
02E1 2703             (/home/strick/6809):00774                  beq   L02C4        no, don't write it to device
02E3 17026B           (/home/strick/6809):00775                  lbsr  L0565        send it to device write
02E6 C601             (/home/strick/6809):00776         L02C4    ldb   #1           Bump up char count
02E8 3A               (/home/strick/6809):00777                  abx
02E9 A7C0             (/home/strick/6809):00778                  sta   ,u+          save character in local buffer
02EB 2705             (/home/strick/6809):00779                  beq   L02CF        go try again if it was a null
02ED A1A82B           (/home/strick/6809):00780                  cmpa  PD.EOR,y     end of record charcter?
02F0 2704             (/home/strick/6809):00781                  beq   L02D3        yes, return
02F2 ACE4             (/home/strick/6809):00782         L02CF    cmpx  ,s           done read?
02F4 25DB             (/home/strick/6809):00783                  blo   L02AD        no, keep going till we are
                      (/home/strick/6809):00784         
02F6 3262             (/home/strick/6809):00785         L02D3    leas  2,s          purge stack
02F8 8D26             (/home/strick/6809):00786         L02D5    bsr   L042B        move local buffer to caller
02FA EE26             (/home/strick/6809):00787                  ldu   PD.RGS,y     get register stack pointer
02FC AF48             (/home/strick/6809):00788                  stx   R$Y,u        save number of characters read
02FE 2068             (/home/strick/6809):00789         L02DC    bra   L0453        update path descriptor and return
                      (/home/strick/6809):00790         
                      (/home/strick/6809):00791         * Read character from device
0300 3470             (/home/strick/6809):00792         L03E2    pshs  u,y,x        Preserve regs
0302 AE23             (/home/strick/6809):00793                  ldx   PD.DEV,y     Get device table pointer for input
0304 2718             (/home/strick/6809):00794                  beq   L0401        None, exit
0306 EE2A             (/home/strick/6809):00795                  ldu   PD.DV2,y     Get device table pointer for echoed output
0308 2707             (/home/strick/6809):00796                  beq   L03F1        No echoed output device, skip ahead
030A EE42             (/home/strick/6809):00797         L03EA    ldu   V$STAT,u     Get device static storage ptr for echo device
030C E6A828           (/home/strick/6809):00798                  ldb   PD.PAG,y     Get lines per page
030F E747             (/home/strick/6809):00799                  stb   V.Line,u     Store it in device static
0311 1F30             (/home/strick/6809):00800         L03F1    tfr   u,d          Yes, move echo device' static storage to D
0313 EE02             (/home/strick/6809):00801                  ldu   V$STAT,x     Get static storage ptr for input
0315 ED49             (/home/strick/6809):00802                  std   V.DEV2,u     Save echo device's static storage into input device
0317 4F               (/home/strick/6809):00803                  clra
0318 A745             (/home/strick/6809):00804                  sta   V.WAKE,u     Flag input device to be awake
                      (/home/strick/6809):00805                  IFGT  Level-1
031A AE09             (/home/strick/6809):00806                  ldx   V$DRIVEX,x   Get driver execution pointer
                      (/home/strick/6809):00807                  ELSE
                      (/home/strick/6809):00808                  pshs  d
                      (/home/strick/6809):00809                  ldx   V$DRIV,x     get driver module
                      (/home/strick/6809):00810                  ldd   M$EXEC,x
                      (/home/strick/6809):00811                  leax  d,x
                      (/home/strick/6809):00812                  puls  d
                      (/home/strick/6809):00813                  ENDC
031C AD03             (/home/strick/6809):00814                  jsr   D$READ,x     Execute READ routine in driver
031E 35F0             (/home/strick/6809):00815         L0401    puls  pc,u,y,x     Restore regs & return
                      (/home/strick/6809):00816         
                      (/home/strick/6809):00817         * Move buffer to caller
                      (/home/strick/6809):00818         * Entry: Y=Path dsc. ptr
                      (/home/strick/6809):00819         *        X=# chars to move
0320 3430             (/home/strick/6809):00820         L042B    pshs  y,x            Preserve path dsc. ptr & char. count
0322 ECE4             (/home/strick/6809):00821                  ldd   ,s             Get # bytes to move
0324 2722             (/home/strick/6809):00822                  beq   L0451          Exit if none
0326 5D               (/home/strick/6809):00823                  tstb                 Uneven # bytes (not even page of 256)?
0327 2601             (/home/strick/6809):00824                  bne   L0435          Yes, go on
0329 4A               (/home/strick/6809):00825                  deca                 >256, so bump MSB down
032A 5F               (/home/strick/6809):00826         L0435    clrb                 Force to even page
032B EE26             (/home/strick/6809):00827                  ldu   PD.RGS,y       Get callers register stack pointer
032D EE46             (/home/strick/6809):00828                  ldu   R$X,u          Get ptr to caller's buffer
                      (/home/strick/6809):00829                  IFNE  H6309
032F 103003           (/home/strick/6809):00830                  addr  d,u            Offset to even page into buffer
0332 114F             (/home/strick/6809):00831                  clre                 Clear MSB of count
0334 11E661           (/home/strick/6809):00832                  ldf   1,s            LSB of count on even page?
0337 2602             (/home/strick/6809):00833                  bne   L0442          No, go on
0339 114C             (/home/strick/6809):00834                  ince                 Make it even 256 
033B                  (/home/strick/6809):00835         L0442
                      (/home/strick/6809):00836                  IFGT  Level-1
033B 96D0             (/home/strick/6809):00837                  lda   <D.SysTsk      Get source task number
                      (/home/strick/6809):00838                  ENDC
                      (/home/strick/6809):00839                  ELSE
                      (/home/strick/6809):00840                  leau  d,u
                      (/home/strick/6809):00841                  clra
                      (/home/strick/6809):00842                  ldb   1,s
                      (/home/strick/6809):00843                  bne   L0442          No, go on
                      (/home/strick/6809):00844                  inca
033D                  (/home/strick/6809):00845         L0442    pshs  d
                      (/home/strick/6809):00846                  IFGT  Level-1
                      (/home/strick/6809):00847                  lda   <D.SysTsk      Get source task number
                      (/home/strick/6809):00848                  ENDC
                      (/home/strick/6809):00849                  ENDC
                      (/home/strick/6809):00850                  IFGT  Level-1
033D 9E50             (/home/strick/6809):00851                  ldx   <D.Proc        Get destination task number
033F E606             (/home/strick/6809):00852                  ldb   P$Task,x
0341 AE28             (/home/strick/6809):00853                  ldx   PD.BUF,y       Get buffer pointer
                      (/home/strick/6809):00854                  IFNE  H6309
0343 1F62             (/home/strick/6809):00855                  tfr   w,y            Put count into proper register
                      (/home/strick/6809):00856                  ELSE
                      (/home/strick/6809):00857                  puls  y
                      (/home/strick/6809):00858                  ENDC
0345 103F38           (/home/strick/6809):00859                  os9   F$Move         Move it to caller
                      (/home/strick/6809):00860                  ELSE
                      (/home/strick/6809):00861                  ldx   PD.BUF,y       Get buffer pointer
                      (/home/strick/6809):00862                  IFEQ  H6309
                      (/home/strick/6809):00863                  puls  y
                      (/home/strick/6809):00864                  ELSE
                      (/home/strick/6809):00865                  tfr   w,y
                      (/home/strick/6809):00866                  ENDC
                      (/home/strick/6809):00867                  pshs  u
0348                  (/home/strick/6809):00868         L0443
                      (/home/strick/6809):00869                  lda   ,x+
                      (/home/strick/6809):00870                  sta   ,u+
                      (/home/strick/6809):00871                  leay  -1,y
                      (/home/strick/6809):00872                  bne   L0443
                      (/home/strick/6809):00873                  puls  u
                      (/home/strick/6809):00874                  ENDC
0348 35B0             (/home/strick/6809):00875         L0451    puls  pc,y,x         Restore & return
                      (/home/strick/6809):00876         
                      (/home/strick/6809):00877         * I$ReadLn entry point
034A 8D69             (/home/strick/6809):00878         readln   bsr   L04A2        Go wait for device to be ready for us
034C 2401             (/home/strick/6809):00879                  bcc   L02E5        No error, continue
034E 39               (/home/strick/6809):00880                  rts                Error, exit with it
034F EC48             (/home/strick/6809):00881         L02E5    ldd   R$Y,u        Get character count
0351 2715             (/home/strick/6809):00882                  beq   L0453        If none, mark device as un-busy
0353 4D               (/home/strick/6809):00883                  tsta               Past 256 bytes?
0354 2703             (/home/strick/6809):00884                  beq   L02EF        No, go on
0356 CC0100           (/home/strick/6809):00885                  ldd   #$0100       Get new character count
0359 3406             (/home/strick/6809):00886         L02EF    pshs  d            Save character count
035B CCFFFF           (/home/strick/6809):00887                  ldd   #$FFFF       Get maximum character count
035E ED2D             (/home/strick/6809):00888                  std   PD.MAX,y     Store it in path descriptor
0360 8E0000           (/home/strick/6809):00889                  ldx   #0           Set character count so far to 0
0363 EE28             (/home/strick/6809):00890                  ldu   PD.BUF,y     Get buffer ptr
0365 160218           (/home/strick/6809):00891                  lbra  L05F8        Go process readln
                      (/home/strick/6809):00892         
                      (/home/strick/6809):00893         * Wait for device - Clears out V.BUSY if either Default or output devices are
                      (/home/strick/6809):00894         * no longer busy
                      (/home/strick/6809):00895         * Modifies X and A
0368                  (/home/strick/6809):00896         L0453 
                      (/home/strick/6809):00897                  IFGT  Level-1
0368 9E50             (/home/strick/6809):00898                  ldx   <D.Proc        Get current process
                      (/home/strick/6809):00899                  ELSE
                      (/home/strick/6809):00900                  ldx   >D.Proc        Get current process
                      (/home/strick/6809):00901                  ENDC
036A A684             (/home/strick/6809):00902                  lda   P$ID,x         Get it's process ID
036C AE23             (/home/strick/6809):00903                  ldx   PD.DEV,y       Get device table pointer from our path dsc.
036E 8D02             (/home/strick/6809):00904                  bsr   L045D          Check if it's busy
0370 AE2A             (/home/strick/6809):00905                  ldx   PD.DV2,y       Get output device table pointer
0372 2709             (/home/strick/6809):00906         L045D    beq   L0467          Doesn't exist, exit
0374 AE02             (/home/strick/6809):00907                  ldx   V$STAT,x       Get static storage pointer for our device
0376 A104             (/home/strick/6809):00908                  cmpa  V.BUSY,x       Same process as current process?
0378 2603             (/home/strick/6809):00909                  bne   L0467          No, device busy return
037A 4F               (/home/strick/6809):00910                  clra
037B A704             (/home/strick/6809):00911                  sta   V.BUSY,x       Yes, mark device as free for use
037D 39               (/home/strick/6809):00912         L0467    rts                  Return
                      (/home/strick/6809):00913         
037E 3412             (/home/strick/6809):00914         L0468    pshs  x,a            Preserve device table entry pointer & process ID
0380 AE02             (/home/strick/6809):00915         L046A    ldx   V$STAT,x       Get device static storage address
0382 E604             (/home/strick/6809):00916                  ldb   V.BUSY,x       Get active process ID
0384 2719             (/home/strick/6809):00917                  beq   L048A          No active process, device not busy go reserve it
0386 E1E4             (/home/strick/6809):00918                  cmpb  ,s             Is it our own process?
0388 2728             (/home/strick/6809):00919                  beq   L049F          Yes, return without error
038A 8DDC             (/home/strick/6809):00920                  bsr   L0453          Go wait for device to no longer be busy
038C 1F98             (/home/strick/6809):00921                  tfr   b,a            Get process # busy using device
038E 103F2B           (/home/strick/6809):00922                  os9   F$IOQu         Put our process into the IO Queue
0391 6C2F             (/home/strick/6809):00923                  inc   PD.MIN,y       Mark device as not mine
                      (/home/strick/6809):00924                  IFGT  Level-1
0393 9E50             (/home/strick/6809):00925                  ldx   <D.Proc        Get current process
                      (/home/strick/6809):00926                  ELSE
                      (/home/strick/6809):00927                  ldx   >D.Proc        Get current process
                      (/home/strick/6809):00928                  ENDC
0395 E68819           (/home/strick/6809):00929                  ldb   P$Signal,x     Get signal code
0398 A6E4             (/home/strick/6809):00930                  lda   ,s             Get our process id # again for L046A
039A 27E4             (/home/strick/6809):00931                  beq   L046A          No signal go try again
039C 43               (/home/strick/6809):00932                  coma                 Set carry
039D 3592             (/home/strick/6809):00933                  puls  x,a,pc         Restore device table ptr (eat a) & return
                      (/home/strick/6809):00934         
                      (/home/strick/6809):00935         * Mark device as busy;copy pause/interrupt/quit/xon/xoff chars into static mem
039F A704             (/home/strick/6809):00936         L048A    sta   V.BUSY,x       Make it as process # busy on this device
03A1 A703             (/home/strick/6809):00937                  sta   V.LPRC,x       Save it as the last process to use device
03A3 A6A82F           (/home/strick/6809):00938                  lda   PD.PSC,y       Get pause character from path dsc.
03A6 A70D             (/home/strick/6809):00939                  sta   V.PCHR,x       Save copy in static storage (faster later)
03A8 ECA830           (/home/strick/6809):00940                  ldd   PD.INT,y       Get keyboard interrupt & quit chars
03AB ED0B             (/home/strick/6809):00941                  std   V.INTR,x       Save copies in static mem
03AD ECA838           (/home/strick/6809):00942                  ldd   PD.XON,y       Get XON/XOFF chars
03B0 ED0F             (/home/strick/6809):00943                  std   V.XON,x        Save them in static mem too
03B2 4F               (/home/strick/6809):00944         L049F    clra                 No error & return
03B3 3592             (/home/strick/6809):00945                  puls  pc,x,a         Restore A=Process #,X=Dev table entry ptr
                      (/home/strick/6809):00946         
                      (/home/strick/6809):00947         * Wait for device?
03B5 A6A83F           (/home/strick/6809):00948         L04A2    lda   PD.PST,y       Get path status (carrier)
03B8 261E             (/home/strick/6809):00949                  bne   L04C4          If carrier was lost, hang up process
03BA                  (/home/strick/6809):00950         L04A7
                      (/home/strick/6809):00951                  IFGT  Level-1
03BA 9E50             (/home/strick/6809):00952                  ldx   <D.Proc        Get current process ID
                      (/home/strick/6809):00953                  ELSE
                      (/home/strick/6809):00954                  ldx   >D.Proc        Get current process ID
                      (/home/strick/6809):00955                  ENDC
03BC 4F               (/home/strick/6809):00956                  clra
03BD A72F             (/home/strick/6809):00957                  sta   PD.MIN,y       Flag device is mine
03BF A684             (/home/strick/6809):00958                  lda   P$ID,x         Get process ID #
03C1 AE23             (/home/strick/6809):00959                  ldx   PD.DEV,y       Get device table pointer
03C3 8DB9             (/home/strick/6809):00960                  bsr   L0468          Busy?
03C5 250E             (/home/strick/6809):00961                  bcs   L04C1          No, return
03C7 AE2A             (/home/strick/6809):00962                  ldx   PD.DV2,y       Get output device table pointer
03C9 2704             (/home/strick/6809):00963                  beq   L04BB          Go on if it doesn't exist
03CB 8DB1             (/home/strick/6809):00964                  bsr   L0468          Busy?
03CD 2506             (/home/strick/6809):00965                  bcs   L04C1          No, return
03CF A62F             (/home/strick/6809):00966         L04BB    lda   PD.MIN,y       Device mine?
03D1 26E2             (/home/strick/6809):00967                  bne   L04A2          No, go wait for it
03D3 A72C             (/home/strick/6809):00968                  sta   PD.RAW,y       Mark device with editing
03D5 EE26             (/home/strick/6809):00969         L04C1    ldu   PD.RGS,y       Get register stack pointer
03D7 39               (/home/strick/6809):00970                  rts                  Return
                      (/home/strick/6809):00971         
                      (/home/strick/6809):00972         * Hangup process
03D8 3262             (/home/strick/6809):00973         L04C4    leas  2,s            Purge return address
03DA C6DC             (/home/strick/6809):00974         L04C6    ldb   #E$HangUp      Get hangup error code
03DC 8102             (/home/strick/6809):00975                  cmpa  #S$Abort       Termination signal (or carrier lost)?
03DE 2507             (/home/strick/6809):00976                  blo   L04D3          Yes, increment status flag & return
03E0 A625             (/home/strick/6809):00977                  lda   PD.CPR,y       Get current process ID # using path
03E2 C600             (/home/strick/6809):00978                  ldb   #S$Kill        Get kill signal
03E4 103F08           (/home/strick/6809):00979                  os9   F$Send         Send it to process
03E7 6CA83F           (/home/strick/6809):00980         L04D3    inc   PD.PST,y       Set path status
03EA 1A01             (/home/strick/6809):00981                  orcc  #Carry         Set carry
03EC 39               (/home/strick/6809):00982                  rts                  Return
                      (/home/strick/6809):00983         
                      (/home/strick/6809):00984         * I$WritLn entry point
03ED 8DC6             (/home/strick/6809):00985         writln   bsr   L04A2          Go wait for device to be ready for us
03EF 2004             (/home/strick/6809):00986                  bra   L04E1          Go write
                      (/home/strick/6809):00987         
                      (/home/strick/6809):00988         * I$Write entry point
03F1 8DC2             (/home/strick/6809):00989         write    bsr   L04A2          Go wait for device to be ready for us
03F3 6C2C             (/home/strick/6809):00990                  inc   PD.RAW,y       Mark device for raw write
03F5 AE48             (/home/strick/6809):00991         L04E1    ldx   R$Y,u          Get number of characters to write
03F7 102700CE         (/home/strick/6809):00992                  lbeq  L055A          Zero so return
03FB 3410             (/home/strick/6809):00993                  pshs  x              Save character count
03FD 8E0000           (/home/strick/6809):00994                  ldx   #$0000         Get write data offset
0400 2005             (/home/strick/6809):00995                  bra   L04F1          Go write data
                      (/home/strick/6809):00996         
0402 1F30             (/home/strick/6809):00997         L04EC    tfr   u,d            Move current position in PD.BUF to D
0404 5D               (/home/strick/6809):00998                  tstb                 At 256 (end of PD.BUF)?
0405 2635             (/home/strick/6809):00999                  bne   L0523          No, keep writing from current PD.BUF
                      (/home/strick/6809):01000         
                      (/home/strick/6809):01001         * Get new block of data to write into [PD.BUF]
                      (/home/strick/6809):01002         * Only allows up to 32 bytes at a time, and puts them in the last 32 bytes of
                      (/home/strick/6809):01003         * the 256 byte [PD.BUF] buffer. This way, can use TFR U,D/TSTB to see if fin-
                      (/home/strick/6809):01004         * inshed
0407 3430             (/home/strick/6809):01005         L04F1    pshs  y,x            Save write offset & path descriptor pointer
0409 1F10             (/home/strick/6809):01006                  tfr   x,d            Move data offset to D
040B EE26             (/home/strick/6809):01007                  ldu   PD.RGS,y       Get register stack pointer
040D AE46             (/home/strick/6809):01008                  ldx   R$X,u          Get pointer to users's WRITE string
                      (/home/strick/6809):01009                  IFNE  H6309
040F 103001           (/home/strick/6809):01010                  addr  d,x            Point to where we are in it now
0412 10A648           (/home/strick/6809):01011                  ldw   R$Y,u          Get # chars of original write
0415 103206           (/home/strick/6809):01012                  subr  d,w            Calculate # chars we have left to write
0418 10810040         (/home/strick/6809):01013                  cmpw  #64            More than 64?
041C 2304             (/home/strick/6809):01014                  bls   L0508          No, go on
041E 10860040         (/home/strick/6809):01015                  ldw   #64            Max size per chunk=64
0422 EC28             (/home/strick/6809):01016         L0508    ldd   PD.BUF,y       Get buffer ptr
0424 4C               (/home/strick/6809):01017                  inca                 Point to PD.BUF+256 (1 byte past end
0425 103260           (/home/strick/6809):01018                  subr  w,d            Subtract data size
                      (/home/strick/6809):01019                  ELSE
                      (/home/strick/6809):01020                  leax  d,x
                      (/home/strick/6809):01021                  ldd   R$Y,u
                      (/home/strick/6809):01022                  subd  ,s
                      (/home/strick/6809):01023                  cmpd  #$0020
                      (/home/strick/6809):01024                  bls   L0508
                      (/home/strick/6809):01025                  ldd   #$0020
0428                  (/home/strick/6809):01026         L0508    pshs  d
                      (/home/strick/6809):01027                  ldd   PD.BUF,y
                      (/home/strick/6809):01028                  inca
                      (/home/strick/6809):01029                  subd  ,s
                      (/home/strick/6809):01030                  ENDC
0428 1F03             (/home/strick/6809):01031                  tfr   d,u            Move it to U
042A 860D             (/home/strick/6809):01032                  lda   #C$CR          Put a carriage return 1 byte before start
042C A75F             (/home/strick/6809):01033                  sta   -1,u           of write portion of buffer
                      (/home/strick/6809):01034                  IFGT  Level-1
042E 109E50           (/home/strick/6809):01035                  ldy   <D.Proc        Get current process pointer
0431 A626             (/home/strick/6809):01036                  lda   P$Task,y       Get the task number
0433 D6D0             (/home/strick/6809):01037                  ldb   <D.SysTsk      Get system task number
                      (/home/strick/6809):01038                  IFNE  H6309
0435 1F62             (/home/strick/6809):01039                  tfr   w,y            Get number of bytes to move
                      (/home/strick/6809):01040                  ELSE
                      (/home/strick/6809):01041                  puls  y
                      (/home/strick/6809):01042                  ENDC
0437 103F38           (/home/strick/6809):01043                  os9   F$Move         Move data to buffer
                      (/home/strick/6809):01044                  ELSE
                      (/home/strick/6809):01045                  IFNE  H6309
                      (/home/strick/6809):01046                  pshs  u
                      (/home/strick/6809):01047                  tfm   x+,u+
                      (/home/strick/6809):01048                  puls u
                      (/home/strick/6809):01049                  ELSE
                      (/home/strick/6809):01050                  puls  y
                      (/home/strick/6809):01051                  pshs  u
043A                  (/home/strick/6809):01052         L0509    lda   ,x+
                      (/home/strick/6809):01053                  sta   ,u+
                      (/home/strick/6809):01054                  leay  -1,y
                      (/home/strick/6809):01055                  bne   L0509
                      (/home/strick/6809):01056                  puls  u
                      (/home/strick/6809):01057                  ENDC
                      (/home/strick/6809):01058                  ENDC
043A 3530             (/home/strick/6809):01059                  puls  y,x            Restore path descriptor pointer and data offset
                      (/home/strick/6809):01060         
                      (/home/strick/6809):01061         * at this point, we have
                      (/home/strick/6809):01062         * 0,s = end address of characters to write
                      (/home/strick/6809):01063         * X = number of characters written
                      (/home/strick/6809):01064         * Y = PD pointer
                      (/home/strick/6809):01065         * U = pointer to data buffer to write
                      (/home/strick/6809):01066         * Level 2: Use callcode $06 to call grfdrv (old DWProtSW from previous versions,
                      (/home/strick/6809):01067         *   now unused by GrfDrv
043C                  (/home/strick/6809):01068         L0523
                      (/home/strick/6809):01069                  IFGT  Level-1
043C E6A834           (/home/strick/6809):01070                  ldb   PD.PAR,y     get device parity: bit 7 set = window
043F C180             (/home/strick/6809):01071                  cmpb  #$80         is it even potentially a CoWin window?
0441 2644             (/home/strick/6809):01072                  bne   L0524        no, skip the rest of the crap
                      (/home/strick/6809):01073         
0443 5F               (/home/strick/6809):01074                  clrb               set to no uppercase conversion
0444 A62C             (/home/strick/6809):01075                  lda   PD.RAW,y     get raw output flag
0446 2603             (/home/strick/6809):01076                  bne   g.raw        if non-zero, we do raw writes: no conversion
0448 E6A821           (/home/strick/6809):01077                  ldb   PD.UPC,y     get uppercase conversion flag: 1 = do uppercase
                      (/home/strick/6809):01078         
044B 3474             (/home/strick/6809):01079         g.raw    pshs  b,x,y,u      save length, PD, data buffer pointers
                      (/home/strick/6809):01080         
044D 1702C8           (/home/strick/6809):01081                  lbsr  get.wptr     get window table ptr into Y
0450 2533             (/home/strick/6809):01082                  bcs   no.wptr      do old method on error
                      (/home/strick/6809):01083         
                      (/home/strick/6809):01084         * now we find out the number of non-control characters to write...
0452 A665             (/home/strick/6809):01085         g.fast   lda   5,s          grab page number
0454 4C               (/home/strick/6809):01086                  inca               go to the next page
0455 5F               (/home/strick/6809):01087                  clrb               at the top of it
0456 A365             (/home/strick/6809):01088                  subd  5,s          take out number of bytes left to write
0458 3404             (/home/strick/6809):01089                  pshs  b            max. number of characters
                      (/home/strick/6809):01090         
045A 5F               (/home/strick/6809):01091                  clrb               always <256 characters to write
045B A6C0             (/home/strick/6809):01092         g.loop   lda   ,u+          get a character
045D 8120             (/home/strick/6809):01093                  cmpa  #$20         is it a control character?
045F 250E             (/home/strick/6809):01094                  blo   g.done       yes, we're done this stint
0461 6D61             (/home/strick/6809):01095                  tst   1,s          get uppercase conversion flag
0463 2705             (/home/strick/6809):01096                  beq   g.loop1      don't convert
0465 170064           (/home/strick/6809):01097                  lbsr  L0403        do a lower-uppercase conversion, if necessary
0468 A75F             (/home/strick/6809):01098                  sta   -1,u         save again
                      (/home/strick/6809):01099         
046A 5C               (/home/strick/6809):01100         g.loop1  incb               done one more character
046B E1E4             (/home/strick/6809):01101                  cmpb  ,s           done as many as we can?
046D 26EC             (/home/strick/6809):01102                  bne   g.loop
                      (/home/strick/6809):01103         
046F 3261             (/home/strick/6809):01104         g.done   leas  1,s          kill max. count of characters to use
0471 C101             (/home/strick/6809):01105                  cmpb  #1           one or fewer characters?
0473 2310             (/home/strick/6809):01106                  bls   no.wptr      yes, go use old method
                      (/home/strick/6809):01107         
                      (/home/strick/6809):01108         *         IFEQ  H6309
                      (/home/strick/6809):01109         * Note: this was present in the TuneUp version of SCF, and seems to
                      (/home/strick/6809):01110         * never allow grfdrv to be called directly, so did fast text screens
                      (/home/strick/6809):01111         * ever work in TuneUp??? - BGP
                      (/home/strick/6809):01112         *         bra   no.wptr      
                      (/home/strick/6809):01113         *         ENDC
                      (/home/strick/6809):01114         
                      (/home/strick/6809):01115         * now we call grfdrv...
0475 EE65             (/home/strick/6809):01116                  ldu   5,s          get start pointer again
0477 3A               (/home/strick/6809):01117                  abx                done B more characters...
0478 AF61             (/home/strick/6809):01118                  stx   1,s          save on-stack
047A 1702CC           (/home/strick/6809):01119                  lbsr  call.grf     go call grfdrv: no error possible on return
047D 33C5             (/home/strick/6809):01120                  leau  b,u          go up B characters in U, too
047F EF65             (/home/strick/6809):01121                  stu   5,s          save old U, too
0481 3574             (/home/strick/6809):01122                  puls  b,x,y,u      restore registers
0483 2027             (/home/strick/6809):01123                  bra   L0544        do end-buffer checks and continue
                      (/home/strick/6809):01124         
0485 3574             (/home/strick/6809):01125         no.wptr  puls  b,x,y,u      restore all registers
                      (/home/strick/6809):01126                  ENDC
                      (/home/strick/6809):01127         
0487 A6C0             (/home/strick/6809):01128         L0524    lda   ,u+            Get character to write
0489 E62C             (/home/strick/6809):01129                  ldb   PD.RAW,y       Raw mode?
048B 2618             (/home/strick/6809):01130                  bne   L053D          Yes, go write it
048D E6A821           (/home/strick/6809):01131                  ldb   PD.UPC,y       Force uppercase?
0490 2702             (/home/strick/6809):01132                  beq   L052A          No, continue
0492 8D38             (/home/strick/6809):01133                  bsr   L0403          Make it uppercase
0494 810A             (/home/strick/6809):01134         L052A    cmpa  #C$LF          Is it a Line feed?
0496 260D             (/home/strick/6809):01135                  bne   L053D          No, go print it
0498 860D             (/home/strick/6809):01136                  lda   #C$CR          Get code for carriage return
049A E6A825           (/home/strick/6809):01137                  ldb   PD.ALF,y       Auto Line feed?
049D 2606             (/home/strick/6809):01138                  bne   L053D          Yes, go print carriage return first
049F 8D3E             (/home/strick/6809):01139                  bsr   L0573          Print carriage return
04A1 2534             (/home/strick/6809):01140                  bcs   L055D          If error, go wait for device
04A3 860A             (/home/strick/6809):01141                  lda   #C$LF          Now, print the line feed
                      (/home/strick/6809):01142         
                      (/home/strick/6809):01143         * Write character to device (call driver)
04A5 8D38             (/home/strick/6809):01144         L053D    bsr   L0573          Go write it to device
04A7 252E             (/home/strick/6809):01145                  bcs   L055D          If error, go wait for device
04A9 C601             (/home/strick/6809):01146                  ldb   #1             Bump up # chars we have written
04AB 3A               (/home/strick/6809):01147                  abx
04AC ACE4             (/home/strick/6809):01148         L0544    cmpx  ,s             Done whole WRITE call?
04AE 2413             (/home/strick/6809):01149                  bhs   L0554          Yes, go save # chars written & exit
04B0 E62C             (/home/strick/6809):01150                  ldb   PD.RAW,y       Raw mode?
04B2 1026FF4C         (/home/strick/6809):01151                  lbne  L04EC          Yes, keep writing
04B6 A65F             (/home/strick/6809):01152                  lda   -1,u           Get the char we wrote
04B8 1027FF46         (/home/strick/6809):01153                  lbeq  L04EC          NUL, keep writing
04BC A1A82B           (/home/strick/6809):01154                  cmpa  PD.EOR,y       End of record?
04BF 1026FF3F         (/home/strick/6809):01155                  lbne  L04EC          No, keep writing
04C3 3262             (/home/strick/6809):01156         L0554    leas  2,s            Eof record, stop & Eat end of buffer ptr???
04C5 EE26             (/home/strick/6809):01157         L0556    ldu   PD.RGS,y       Get callers register pointer
04C7 AF48             (/home/strick/6809):01158                  stx   R$Y,u          Save character count to callers Y
04C9 16FE9C           (/home/strick/6809):01159         L055A    lbra  L0453          Mark device write clear and return
                      (/home/strick/6809):01160         
                      (/home/strick/6809):01161         * Check for forced uppercase
04CC 8161             (/home/strick/6809):01162         L0403    cmpa  #'a            Less then 'a'?
04CE 2506             (/home/strick/6809):01163                  blo   L0412          Yes, leave it
04D0 817A             (/home/strick/6809):01164                  cmpa  #'z            Higher than 'z'?
04D2 2202             (/home/strick/6809):01165                  bhi   L0412          Yes, leave it
04D4 8020             (/home/strick/6809):01166                  suba  #$20           Make it uppercase
04D6 39               (/home/strick/6809):01167         L0412    rts                  Return
                      (/home/strick/6809):01168         
04D7 3262             (/home/strick/6809):01169         L055D    leas  2,s            Purge stack
04D9 3405             (/home/strick/6809):01170                  pshs  b,cc           Preserve registers
04DB 8DE8             (/home/strick/6809):01171                  bsr   L0556          Wait for device
04DD 3585             (/home/strick/6809):01172                  puls  pc,b,cc        Restore & return
                      (/home/strick/6809):01173         
                      (/home/strick/6809):01174         * Check for end of page (part of send char to driver)
04DF 3472             (/home/strick/6809):01175         L0573    pshs  u,y,x,a        Preserve registers
04E1 AE23             (/home/strick/6809):01176                  ldx   PD.DEV,y       Get device table pointer
04E3 810D             (/home/strick/6809):01177                  cmpa  #C$CR          Carriage return?
04E5 2674             (/home/strick/6809):01178                  bne   L056F          No, go print it
04E7 EE02             (/home/strick/6809):01179                  ldu   V$STAT,x       Get pointer to device stactic storage
04E9 E648             (/home/strick/6809):01180                  ldb   V.PAUS,u       Pause request?
04EB 2620             (/home/strick/6809):01181                  bne   L0590          Yes, go pause device
04ED E62C             (/home/strick/6809):01182                  ldb   PD.RAW,y       Raw output mode?
04EF 262C             (/home/strick/6809):01183                  bne   L05A2          Yes, go on
04F1 E6A827           (/home/strick/6809):01184                  ldb   PD.PAU,y       End of page pause enabled?
04F4 2727             (/home/strick/6809):01185                  beq   L05A2          No, go on
04F6 6A47             (/home/strick/6809):01186                  dec   V.LINE,u       Subtract a line
04F8 2623             (/home/strick/6809):01187                  bne   L05A2          Not done, go on
04FA C6FF             (/home/strick/6809):01188                  ldb   #$ff           do a immediate pause request
04FC E748             (/home/strick/6809):01189                  stb   V.PAUS,u
04FE 2016             (/home/strick/6809):01190                  bra   L059A          Go read next character
                      (/home/strick/6809):01191         
0500 3470             (/home/strick/6809):01192         L03DA    pshs  u,y,x        Preserve registers
0502 AE2A             (/home/strick/6809):01193                  ldx   PD.DV2,y     Get output device table pointer
0504 2705             (/home/strick/6809):01194                  beq   NoOut        None, exit
0506 EE23             (/home/strick/6809):01195                  ldu   PD.DEV,y     Get device table pointer
0508 16FDFF           (/home/strick/6809):01196                  lbra  L03EA        Process & return
                      (/home/strick/6809):01197         
050B 35F0             (/home/strick/6809):01198         NoOut    puls  pc,u,y,x     No output device so exit
                      (/home/strick/6809):01199         
                      (/home/strick/6809):01200         * Wait for pause release
050D 8DF1             (/home/strick/6809):01201         L0590    bsr   L03DA          Read next character
050F 2505             (/home/strick/6809):01202                  bcs   L059A          Error, try again
0511 A1A82F           (/home/strick/6809):01203                  cmpa  PD.PSC,y       Pause char?
0514 26F7             (/home/strick/6809):01204                  bne   L0590          No, try again
                      (/home/strick/6809):01205         
0516 8DE8             (/home/strick/6809):01206         L059A    bsr   L03DA          Reset line count and read a character
0518 A1A82F           (/home/strick/6809):01207                  cmpa  PD.PSC,y       Pause character?
051B 27F9             (/home/strick/6809):01208                  beq   L059A          Yes, go read again
                      (/home/strick/6809):01209         
                      (/home/strick/6809):01210         * Process Carriage return - do auto linefeed & Null's if necessary
                      (/home/strick/6809):01211         * Entry: A=CHR$($0D)
051D EE02             (/home/strick/6809):01212         L05A2    ldu   V$STAT,x       Get static storage pointer
051F 4F               (/home/strick/6809):01213                  clra
0520 A748             (/home/strick/6809):01214                  sta   V.PAUS,u       Clear pause request
0522 860D             (/home/strick/6809):01215                  lda   #C$CR          Carriage return (in cases from pause)
0524 8D1E             (/home/strick/6809):01216                  bsr   L05C9          Send it to driver
0526 A62C             (/home/strick/6809):01217                  lda   PD.RAW,y       Raw mode?
0528 2618             (/home/strick/6809):01218                  bne   L05C7          Yes, return
052A E6A826           (/home/strick/6809):01219                  ldb   PD.NUL,y       Get end of line null count
052D 3404             (/home/strick/6809):01220                  pshs  b              Save it
052F A6A825           (/home/strick/6809):01221                  lda   PD.ALF,y       Auto line feed enabled?
0532 2706             (/home/strick/6809):01222                  beq   L05BE          No, go on
0534 860A             (/home/strick/6809):01223                  lda   #C$LF          Get line feed code
0536 8D0C             (/home/strick/6809):01224         L05BA    bsr   L05C9          Execute driver write routine
0538 2506             (/home/strick/6809):01225                  bcs   L05C5          Error, purge stack and return
053A 4F               (/home/strick/6809):01226         L05BE    clra                 Get null character
053B 6AE4             (/home/strick/6809):01227                  dec   ,s             Done null count?
053D 2AF7             (/home/strick/6809):01228                  bpl   L05BA          No, go send it to driver
053F 4F               (/home/strick/6809):01229                  clra                 Clear carry
0540 3261             (/home/strick/6809):01230         L05C5    leas  1,s            Purge stack
0542 35F2             (/home/strick/6809):01231         L05C7    puls  pc,u,y,x,a     Restore & return
                      (/home/strick/6809):01232         
                      (/home/strick/6809):01233         * Execute device driver write routine
                      (/home/strick/6809):01234         * Entry: A=Character to write
                      (/home/strick/6809):01235         * Execute device driver
                      (/home/strick/6809):01236         * Entry: W=Entry offset (for type of function, ex. Write, Read)
                      (/home/strick/6809):01237         *        A=Code to send to driver
0544 EE02             (/home/strick/6809):01238         L05C9    ldu   V$STAT,x       Get device static storage pointer
0546 3430             (/home/strick/6809):01239                  pshs  y,x            Preserve registers
0548 5F               (/home/strick/6809):01240                  clrb
0549 E745             (/home/strick/6809):01241                  stb   V.WAKE,u       Wake it up
                      (/home/strick/6809):01242                  IFGT  Level-1
054B AE09             (/home/strick/6809):01243                  ldx   V$DRIVEX,x     Get driver execution pointer
                      (/home/strick/6809):01244                  ELSE
                      (/home/strick/6809):01245                  pshs  d
                      (/home/strick/6809):01246                  ldx   V$DRIV,x     get driver module
                      (/home/strick/6809):01247                  ldd   M$EXEC,x
                      (/home/strick/6809):01248                  leax  d,x
                      (/home/strick/6809):01249                  puls  d
                      (/home/strick/6809):01250                  ENDC
054D AD06             (/home/strick/6809):01251                  jsr   D$WRIT,x       Execute driver
054F 35B0             (/home/strick/6809):01252                  puls  pc,y,x         Restore & return
                      (/home/strick/6809):01253         
                      (/home/strick/6809):01254         * Send character to driver
0551 3472             (/home/strick/6809):01255         L0565    pshs  u,y,x,a        Preserve registers
0553 AE2A             (/home/strick/6809):01256                  ldx   PD.DV2,y       Get output device table pointer
0555 270D             (/home/strick/6809):01257                  beq   L0571          Return if none
0557 810D             (/home/strick/6809):01258                  cmpa  #C$CR          Carriage return?
0559 27C2             (/home/strick/6809):01259                  beq   L05A2          Yes, go process it
055B EE02             (/home/strick/6809):01260         L056F    ldu   V$STAT,x       Get device static storage pointer
055D 5F               (/home/strick/6809):01261                  clrb
055E E745             (/home/strick/6809):01262                  stb   V.WAKE,u       Wake it up
                      (/home/strick/6809):01263                  IFGT  Level-1
0560 AE09             (/home/strick/6809):01264                  ldx   V$DRIVEX,x     Get driver execution pointer
                      (/home/strick/6809):01265                  ELSE
                      (/home/strick/6809):01266                  pshs  d
                      (/home/strick/6809):01267                  ldx   V$DRIV,x     get driver module
                      (/home/strick/6809):01268                  ldd   M$EXEC,x
                      (/home/strick/6809):01269                  leax  d,x
                      (/home/strick/6809):01270                  puls  d
                      (/home/strick/6809):01271                  ENDC
0562 AD06             (/home/strick/6809):01272                  jsr   D$WRIT,x       Execute driver
0564 35F2             (/home/strick/6809):01273         L0571    puls  pc,u,y,x,a     Restore & return
                      (/home/strick/6809):01274         
                      (/home/strick/6809):01275         * Check for printable character
0566 E6A824           (/home/strick/6809):01276         L0413    ldb   PD.EKO,y       Echo turned on?
0569 270A             (/home/strick/6809):01277                  beq   NoEcho         No, return
056B 8120             (/home/strick/6809):01278         L0418    cmpa  #C$SPAC        CHR$(32) or higher?
056D 24E2             (/home/strick/6809):01279                  bhs   L0565          Yes, go send to driver
056F 810D             (/home/strick/6809):01280                  cmpa  #C$CR          Carriage return?
0571 2603             (/home/strick/6809):01281                  bne   L0423          No, change it to a period
0573 20DC             (/home/strick/6809):01282                  bra   L0565          Anything else output to driver
                      (/home/strick/6809):01283         
0575 39               (/home/strick/6809):01284         NoEcho   rts
                      (/home/strick/6809):01285         
0576 3402             (/home/strick/6809):01286         L0423    pshs  a              Save code
0578 862E             (/home/strick/6809):01287                  lda   #'.            Get code for period
057A 8DD5             (/home/strick/6809):01288                  bsr   L0565          Output it to device
057C 3582             (/home/strick/6809):01289                  puls  pc,a           Restore & return
                      (/home/strick/6809):01290         
057E 8DEB             (/home/strick/6809):01291         L0624    bsr   L0418        check if it's printable and send it to driver
                      (/home/strick/6809):01292         * Process ReadLn
0580 17FD7D           (/home/strick/6809):01293         L05F8    lbsr  L03E2        get a character from device
0583 10250123         (/home/strick/6809):01294                  lbcs  L0370        return if error
0587 4D               (/home/strick/6809):01295                  tsta               usable character?
0588 102700A4         (/home/strick/6809):01296                  lbeq  L02FE        no, check path descriptor special characters
058C E6A82D           (/home/strick/6809):01297                  ldb   PD.RPR,y     get reprint line code
058F C104             (/home/strick/6809):01298                  cmpb  #C$RPRT      cntrl D?
0591 1027009B         (/home/strick/6809):01299                  lbeq  L02FE        yes, check path descriptor special characters
0595 A1A82D           (/home/strick/6809):01300                  cmpa  PD.RPR,y     reprint line?
0598 261A             (/home/strick/6809):01301                  bne   L0629        no, Check line editor keys
059A AC2D             (/home/strick/6809):01302                  cmpx  PD.MAX,y     character count at maximum?
059C 27E2             (/home/strick/6809):01303                  beq   L05F8        yes, go read next character
059E C601             (/home/strick/6809):01304                  ldb   #1           Bump char count up by 1
05A0 3A               (/home/strick/6809):01305                  abx
05A1 ACE4             (/home/strick/6809):01306                  cmpx  ,s           done?
05A3 240B             (/home/strick/6809):01307                  bhs   L0620        yes, exit
05A5 A6C0             (/home/strick/6809):01308                  lda   ,u+          get character read
05A7 27D5             (/home/strick/6809):01309                  beq   L0624        null, go send it to driver
05A9 A1A82B           (/home/strick/6809):01310                  cmpa  PD.EOR,y     end of record character?
05AC 26D0             (/home/strick/6809):01311                  bne   L0624        no, go send it to driver
05AE 335F             (/home/strick/6809):01312                  leau  -1,u         bump buffer pointer back 1
05B0 301F             (/home/strick/6809):01313         L0620    leax  -1,x         bump character count back 1
05B2 20CC             (/home/strick/6809):01314                  bra   L05F8        go read next character
                      (/home/strick/6809):01315         
                      (/home/strick/6809):01316         * Process print rest of line
05B4 8113             (/home/strick/6809):01317         L0629    cmpa  #C$PLINE       Print rest of line code?
05B6 261A             (/home/strick/6809):01318                  bne   L0647          No, check insert
05B8 3440             (/home/strick/6809):01319         L062D    pshs  u              Save buffer pointer
05BA 170108           (/home/strick/6809):01320                  lbsr  L038B          Go print rest of line
05BD A6A832           (/home/strick/6809):01321                  lda   PD.BSE,y       Get backspace echo character
05C0 11A3E4           (/home/strick/6809):01322         L0634    cmpu  ,s             Beginning of buffer?
05C3 2709             (/home/strick/6809):01323                  beq   L0642          Yes, exit
05C5 335F             (/home/strick/6809):01324                  leau  -1,u           Bump buffer pointer back 1
05C7 301F             (/home/strick/6809):01325                  leax  -1,x           Bump character count back 1
05C9 17FF85           (/home/strick/6809):01326                  lbsr  L0565          Print it
05CC 20F2             (/home/strick/6809):01327                  bra   L0634          Keep going
05CE 3262             (/home/strick/6809):01328         L0642    leas  2,s            Purge buffer pointer
05D0 20AE             (/home/strick/6809):01329                  bra   L05F8          Return
                      (/home/strick/6809):01330         
                      (/home/strick/6809):01331         * Process Insert character (NOTE:Currently destroys W)
05D2 8111             (/home/strick/6809):01332         L0647    cmpa  #C$INSERT      Insert character code?
05D4 261B             (/home/strick/6809):01333                  bne   L0664          No, check delete
                      (/home/strick/6809):01334                  IFNE  H6309
05D6 3430             (/home/strick/6809):01335                  pshs  x,y            Preserve x&y a moment
05D8 1F36             (/home/strick/6809):01336                  tfr   u,w            Dupe buffer pointer into w
05DA 11C6FE           (/home/strick/6809):01337                  ldf   #$fe           End of buffer -1
05DD 1F61             (/home/strick/6809):01338                  tfr   w,x            Source copy address
05DF 105C             (/home/strick/6809):01339                  incw                 Include char we are on & dest address is+1
05E1 1F62             (/home/strick/6809):01340                  tfr   w,y            Destination copy address
05E3 103236           (/home/strick/6809):01341                  subr  u,w            w=w-u (Size of copy)
05E6 113912           (/home/strick/6809):01342                  tfm   x-,y-          Move buffer up one
05E9 3530             (/home/strick/6809):01343                  puls  y,x            Get back original y & x
05EB 8620             (/home/strick/6809):01344                  lda   #C$SPAC        Get code for space
05ED A7C4             (/home/strick/6809):01345                  sta   ,u             Save it there
                      (/home/strick/6809):01346                  ELSE
                      (/home/strick/6809):01347                  pshs  u
                      (/home/strick/6809):01348                  tfr   u,d
                      (/home/strick/6809):01349                  ldb   #$FF
                      (/home/strick/6809):01350                  tfr   d,u
05EF                  (/home/strick/6809):01351         L06DE    lda   ,-u
                      (/home/strick/6809):01352                  sta   1,u
                      (/home/strick/6809):01353                  cmpu  ,s
                      (/home/strick/6809):01354                  bne   L06DE
                      (/home/strick/6809):01355                  lda   #C$SPAC
                      (/home/strick/6809):01356                  sta   ,u
                      (/home/strick/6809):01357                  leas  2,s
                      (/home/strick/6809):01358                  ENDC
05EF 20C7             (/home/strick/6809):01359                  bra   L062D          Go print rest of line
                      (/home/strick/6809):01360         
                      (/home/strick/6809):01361         * Process delete line
05F1 8110             (/home/strick/6809):01362         L0664    cmpa  #C$DELETE      Delete character code?
05F3 2623             (/home/strick/6809):01363                  bne   L068B          No, check end of line
05F5 3440             (/home/strick/6809):01364                  pshs  u              Save buffer pointer
05F7 A6C4             (/home/strick/6809):01365                  lda   ,u             Get character there
05F9 A1A82B           (/home/strick/6809):01366                  cmpa  PD.EOR,y       End of record?
05FC 2716             (/home/strick/6809):01367                  beq   L0687          Yes, don't bother to delete it
05FE A641             (/home/strick/6809):01368         L0671    lda   1,u            Get character beside it
0600 A1A82B           (/home/strick/6809):01369                  cmpa  PD.EOR,y       This an end of record?
0603 2704             (/home/strick/6809):01370                  beq   L067C          Yes, delete it
0605 A7C0             (/home/strick/6809):01371                  sta   ,u+            Bump character back
0607 20F5             (/home/strick/6809):01372                  bra   L0671          Go do next character
0609 8620             (/home/strick/6809):01373         L067C    lda   #C$SPAC        Get code for space
060B A1C4             (/home/strick/6809):01374                  cmpa  ,u             Already there?
060D 2603             (/home/strick/6809):01375                  bne   L0685          No, put it in
060F A6A82B           (/home/strick/6809):01376                  lda   PD.EOR,y       Get end of record code
0612 A7C4             (/home/strick/6809):01377         L0685    sta   ,u             Put it there
0614 3540             (/home/strick/6809):01378         L0687    puls  u              Restore buffer pointer
0616 20A0             (/home/strick/6809):01379                  bra   L062D          Go print rest of line
                      (/home/strick/6809):01380         
                      (/home/strick/6809):01381         * Delete rest of buffer
0618 A1A82B           (/home/strick/6809):01382         L068B    cmpa  PD.EOR,y       End of record code?
061B 2613             (/home/strick/6809):01383                  bne   L02FE          No, check for special path dsc. chars
061D 3440             (/home/strick/6809):01384                  pshs  u              Save buffer pointer
061F 2009             (/home/strick/6809):01385                  bra   L069F          Go erase rest of buffer
                      (/home/strick/6809):01386         
0621 3402             (/home/strick/6809):01387         L0696    pshs  a              Save code
0623 8620             (/home/strick/6809):01388                  lda   #C$SPAC        Get code for space
0625 17FF29           (/home/strick/6809):01389                  lbsr  L0565          Print it
0628 3502             (/home/strick/6809):01390                  puls  a              Restore code
062A A1C0             (/home/strick/6809):01391         L069F    cmpa  ,u+            End of record?
062C 26F3             (/home/strick/6809):01392                  bne   L0696          No, go print a space
062E 3540             (/home/strick/6809):01393                  puls  u              Restore buffer pointer
                      (/home/strick/6809):01394         
                      (/home/strick/6809):01395         * Check character read against path descriptor
0630 4D               (/home/strick/6809):01396         L02FE    tsta               Usable character?
0631 270B             (/home/strick/6809):01397                  beq   L030C        No, go on
0633 C629             (/home/strick/6809):01398                  ldb   #PD.BSP      Get start point in path descriptor
0635 A1A5             (/home/strick/6809):01399         L0303    cmpa  b,y          Match code in descriptor?
0637 272D             (/home/strick/6809):01400                  beq   L032C        Yes, go process it
0639 5C               (/home/strick/6809):01401                  incb               Move to next one
063A C131             (/home/strick/6809):01402                  cmpb  #PD.QUT      Done check?
063C 23F7             (/home/strick/6809):01403                  bls   L0303        No, keep going
063E AC2D             (/home/strick/6809):01404         L030C    cmpx  PD.MAX,y     Past maximum character count?
0640 2302             (/home/strick/6809):01405                  bls   L0312        No, go on
0642 AF2D             (/home/strick/6809):01406                  stx   PD.MAX,y     Update maximum character count
0644 C601             (/home/strick/6809):01407         L0312    ldb   #1           Add 1 char
0646 3A               (/home/strick/6809):01408                  abx
0647 ACE4             (/home/strick/6809):01409                  cmpx  ,s           Past requested amount?
0649 250B             (/home/strick/6809):01410                  blo   L0322        No, go on
064B A6A833           (/home/strick/6809):01411                  lda   PD.OVF,y     Get overflow character
064E 17FF00           (/home/strick/6809):01412                  lbsr  L0565        Send it to driver
0651 301F             (/home/strick/6809):01413                  leax  -1,x         Subtract a character
0653 16FF2A           (/home/strick/6809):01414                  lbra  L05F8        Go try again
                      (/home/strick/6809):01415         
0656 E6A821           (/home/strick/6809):01416         L0322    ldb   PD.UPC,y     Force uppercase?
0659 2703             (/home/strick/6809):01417                  beq   L0328        No, put char in buffer
065B 17FE6E           (/home/strick/6809):01418                  lbsr  L0403        Make character uppercase
065E A7C0             (/home/strick/6809):01419         L0328    sta   ,u+          Put character in buffer
0660 17FF03           (/home/strick/6809):01420                  lbsr  L0413        Check for printable
0663 16FF1A           (/home/strick/6809):01421                  lbra  L05F8        Go try again
                      (/home/strick/6809):01422         
                      (/home/strick/6809):01423         * Process path option characters
0666 3490             (/home/strick/6809):01424         L032C    pshs  x,pc         Preserve character count & PC
0668 308C0D           (/home/strick/6809):01425                  leax  <L033F,pc    Point to branch table
066B C029             (/home/strick/6809):01426                  subb  #PD.BSP      Subtract off first code
066D 58               (/home/strick/6809):01427                  lslb               Account for 2 bytes a entry
066E 3A               (/home/strick/6809):01428                  abx                Point to entry point
066F AF62             (/home/strick/6809):01429                  stx   2,s          Save it in PC on stack
0671 3510             (/home/strick/6809):01430                  puls  x            Restore X
0673 ADF1             (/home/strick/6809):01431         C8E3         jsr   [,s++]       Execute routine
0675 16FF08           (/home/strick/6809):01432                  lbra  L05F8        Continue on
                      (/home/strick/6809):01433         
                      (/home/strick/6809):01434         * Vector points for PD.BSP-PD.QUT
0678 207F             (/home/strick/6809):01435         L033F    bra   L03BB        Process PD.BSP
067A 2064             (/home/strick/6809):01436                  bra   L03A5        Process PD.DEL
067C 200C             (/home/strick/6809):01437                  bra   L0351        Process PD.EOR
067E 2020             (/home/strick/6809):01438                  bra   L0366        Process PD.EOF
0680 2036             (/home/strick/6809):01439                  bra   L0381        Process PD.RPR
0682 2041             (/home/strick/6809):01440                  bra   L038B        Process PD.DUP
0684 39               (/home/strick/6809):01441                  rts                PD.PSC we don't worry about
0685 12               (/home/strick/6809):01442                  nop
0686 2058             (/home/strick/6809):01443                  bra   L03A5        Process PD.INT
0688 2056             (/home/strick/6809):01444                  bra   L03A5        Process PD.QUT
                      (/home/strick/6809):01445         
                      (/home/strick/6809):01446         * Process PD.EOR character
068A 3262             (/home/strick/6809):01447         L0351    leas  2,s          Purge return address
                      (/home/strick/6809):01448         
068C A7C4             (/home/strick/6809):01449                  sta   ,u           Save character in buffer
068E 17FED5           (/home/strick/6809):01450                  lbsr  L0413
0691 EE26             (/home/strick/6809):01451                  ldu   PD.RGS,y     Get callers register stack pointer
0693 C601             (/home/strick/6809):01452                  ldb   #1           Bump up char count by 1
0695 3A               (/home/strick/6809):01453                  abx
0696 AF48             (/home/strick/6809):01454                  stx   R$Y,u        Store it in callers Y
0698 17FC85           (/home/strick/6809):01455                  lbsr  L042B
069B 3262             (/home/strick/6809):01456                  leas  2,s
069D 16FCC8           (/home/strick/6809):01457                  lbra  L0453
                      (/home/strick/6809):01458         
                      (/home/strick/6809):01459         * Process PD.EOF
06A0 3262             (/home/strick/6809):01460         L0366    leas  2,s          Purge return address
06A2 3084             (/home/strick/6809):01461                  leax  ,x           read anything?
06A4 1027FBF7         (/home/strick/6809):01462                  lbeq  L02A2
06A8 2094             (/home/strick/6809):01463                  bra   L030C
                      (/home/strick/6809):01464         
06AA 3404             (/home/strick/6809):01465         L0370    pshs  b
06AC 860D             (/home/strick/6809):01466                  lda   #C$CR
06AE A7C4             (/home/strick/6809):01467                  sta   ,u
06B0 17FE9E           (/home/strick/6809):01468                  lbsr  L0565        Send it to the driver
06B3 3504             (/home/strick/6809):01469                  puls  b
06B5 16FBE9           (/home/strick/6809):01470                  lbra  L02A4
                      (/home/strick/6809):01471         
                      (/home/strick/6809):01472         * Process PD.RPR
06B8 A6A82B           (/home/strick/6809):01473         L0381    lda   PD.EOR,y     Get end of record character
06BB A7C4             (/home/strick/6809):01474                  sta   ,u           Put it in buffer
06BD 8E0000           (/home/strick/6809):01475                  ldx   #0
06C0 EE28             (/home/strick/6809):01476                  ldu   PD.BUF,y     Get buffer ptr
06C2 17FEA6           (/home/strick/6809):01477         L0388    lbsr  L0418        Send it to driver
06C5 AC2D             (/home/strick/6809):01478         L038B    cmpx  PD.MAX,y     Character maximum?
06C7 2714             (/home/strick/6809):01479                  beq   L03A2        Yes, return
06C9 C601             (/home/strick/6809):01480                  ldb   #1           Bump char count up by 1
06CB 3A               (/home/strick/6809):01481                  abx
06CC AC62             (/home/strick/6809):01482                  cmpx  2,s          Done count?
06CE 240B             (/home/strick/6809):01483                  bhs   L03A0        Yes, exit
06D0 A6C0             (/home/strick/6809):01484                  lda   ,u+          Get character from buffer
06D2 27EE             (/home/strick/6809):01485                  beq   L0388        Null, go send it
06D4 A1A82B           (/home/strick/6809):01486                  cmpa  PD.EOR,y     Done line?
06D7 26E9             (/home/strick/6809):01487                  bne   L0388        No go send it
06D9 335F             (/home/strick/6809):01488                  leau  -1,u         Move back a character
06DB 301F             (/home/strick/6809):01489         L03A0    leax  -1,x         Move character count back
06DD 39               (/home/strick/6809):01490         L03A2    rts                Return
                      (/home/strick/6809):01491         
06DE 8D1D             (/home/strick/6809):01492         L03A3    bsr   L03BF
                      (/home/strick/6809):01493         * PD.DEL/PD.QUT/PD.INT processing
06E0 3084             (/home/strick/6809):01494         L03A5    leax  ,x           Any characters?
06E2 2712             (/home/strick/6809):01495                  beq   L03B8        No, reset buffer ptr
06E4 E6A823           (/home/strick/6809):01496                  ldb   PD.DLO,y     Backspace over line?
06E7 27F5             (/home/strick/6809):01497                  beq   L03A3        Yes, go do it
06E9 E6A824           (/home/strick/6809):01498                  ldb   PD.EKO,y     Echo character?
06EC 2705             (/home/strick/6809):01499                  beq   L03B5        No, zero out buffer pointers & return
06EE 860D             (/home/strick/6809):01500                  lda   #C$CR        Send CR to the driver
06F0 17FE5E           (/home/strick/6809):01501                  lbsr  L0565        send it to driver
06F3 8E0000           (/home/strick/6809):01502         L03B5    ldx   #0           zero out count
06F6 EE28             (/home/strick/6809):01503         L03B8    ldu   PD.BUF,y     reset buffer pointer
06F8 39               (/home/strick/6809):01504         L03BA    rts                return
                      (/home/strick/6809):01505         
                      (/home/strick/6809):01506         * Process PD.BSP
06F9 3084             (/home/strick/6809):01507         L03BB    leax  ,x           Any characters?
06FB 27E0             (/home/strick/6809):01508                  beq   L03A2        No, return
06FD 335F             (/home/strick/6809):01509         L03BF    leau  -1,u         Mover buffer pointer back 1 character
06FF 301F             (/home/strick/6809):01510                  leax  -1,x         Move character count back 1
0701 E6A824           (/home/strick/6809):01511                  ldb   PD.EKO,y     Echoing characters?
0704 27F2             (/home/strick/6809):01512                  beq   L03BA        No, return
0706 E6A822           (/home/strick/6809):01513                  ldb   PD.BSO,y     Which backspace method?
0709 2707             (/home/strick/6809):01514                  beq   L03D4        Use BSE
070B 8D05             (/home/strick/6809):01515                  bsr   L03D4        Do a BSE
070D 8620             (/home/strick/6809):01516                  lda   #C$SPAC      Get code for space
070F 17FE3F           (/home/strick/6809):01517                  lbsr  L0565        Send it to driver
0712 A6A832           (/home/strick/6809):01518         L03D4    lda   PD.BSE,y     Get BSE
0715 16FE39           (/home/strick/6809):01519                  lbra  L0565        Send it to driver
                      (/home/strick/6809):01520         
                      (/home/strick/6809):01521                  IFGT  Level-1
                      (/home/strick/6809):01522         * check PD.DTP,y and update PD.WPTR,y if it's device type $10 (grfdrv)
0718 3450             (/home/strick/6809):01523         get.wptr pshs  x,u
071A EE23             (/home/strick/6809):01524                  ldu   PD.DEV,y     get device table entry
071C AEC4             (/home/strick/6809):01525                  ldx   V$DRIV,u     get device driver module
071E EC04             (/home/strick/6809):01526                  ldd   M$Name,x     offset to name
0720 EC8B             (/home/strick/6809):01527                  ldd   d,x
0722 10835654         (/home/strick/6809):01528                  cmpd  #"VT         is it VTIO?
0726 261B             (/home/strick/6809):01529                  bne   no.fast      no, don't do the fast stuff
0728 FC106E           (/home/strick/6809):01530                  ldd   >WGlobal+G.GrfEnt     does GrfDrv have an entry address?
072B 2716             (/home/strick/6809):01531                  beq   no.fast      nope, don't bother calling it.
                      (/home/strick/6809):01532         
072D EE42             (/home/strick/6809):01533                  ldu   V$STAT,u     and device static storage
072F 6DC82C           (/home/strick/6809):01534                  tst   V.ParmCnt,u  are we busy getting more parameters?
0732 260F             (/home/strick/6809):01535                  bne   no.fast      yes, don't do buffered writes
                      (/home/strick/6809):01536         
                      (/home/strick/6809):01537         * Get window table pointer & verify it: copied from CoWin and modified
0734 E6C835           (/home/strick/6809):01538                  ldb   V.WinNum,u   Get window # from device mem
0737 8640             (/home/strick/6809):01539                  lda   #Wt.Siz      Size of each entry
0739 3D               (/home/strick/6809):01540                  mul                Calculate window table offset
073A C31290           (/home/strick/6809):01541                  addd  #WinBase     Point to specific window table entry
073D 1F02             (/home/strick/6809):01542                  tfr   d,y          Move to y, the register we want
073F A630             (/home/strick/6809):01543                  lda   Wt.STbl,y    Get MSB of scrn tbl ptr
0741 2E03             (/home/strick/6809):01544                  bgt   VerExit      If $01-$7f, should be ok
                      (/home/strick/6809):01545         
                      (/home/strick/6809):01546         * Return illegal window definition error
0743 53               (/home/strick/6809):01547         no.fast  comb               set carry: no error code, it's an internal routine
0744 35D0             (/home/strick/6809):01548                  puls  x,u,pc
                      (/home/strick/6809):01549         
0746 4F               (/home/strick/6809):01550         VerExit  clra               No error
0747 35D0             (/home/strick/6809):01551                  puls  x,u,pc
                      (/home/strick/6809):01552         
0749 3476             (/home/strick/6809):01553         call.grf pshs  d,x,y,u      save registers
074B 8E0180           (/home/strick/6809):01554                  ldx   #$0180       where to put the text
                      (/home/strick/6809):01555                  IFNE  H6309
074E 3401             (/home/strick/6809):01556                  pshs  cc           save old CC
                      (/home/strick/6809):01557                  ELSE
                      (/home/strick/6809):01558                  tfr   cc,a
                      (/home/strick/6809):01559                  sta   -2,x
                      (/home/strick/6809):01560                  ENDC
0750 1AD0             (/home/strick/6809):01561                  orcc  #IntMasks+Entire  shut everything else off
                      (/home/strick/6809):01562         
                      (/home/strick/6809):01563                  IFNE  H6309
0752 4F               (/home/strick/6809):01564                  clra               make sure high byte=0
0753 1F06             (/home/strick/6809):01565                  tfr   d,w
0755 113831           (/home/strick/6809):01566                  tfm   u+,x+        move the data into low memory
                      (/home/strick/6809):01567                  ELSE
0758                  (/home/strick/6809):01568         l@       lda   ,u+
                      (/home/strick/6809):01569                  sta   ,x+
                      (/home/strick/6809):01570                  decb
                      (/home/strick/6809):01571                  bne   l@
                      (/home/strick/6809):01572                  ENDC
                      (/home/strick/6809):01573         
0758 C606             (/home/strick/6809):01574                  ldb   #6           alpha put
075A F71002           (/home/strick/6809):01575                  stb   >WGlobal+G.GfBusy  flag grfdrv busy
                      (/home/strick/6809):01576                  IFNE  H6309
075D 11A6E0           (/home/strick/6809):01577                  lde   ,s+          grab old CC off of the stack
0760 A661             (/home/strick/6809):01578                  lda   1,s          get the number of characters to write
                      (/home/strick/6809):01579                  ELSE
                      (/home/strick/6809):01580         *         ldb   ,s+          grab old CC off of the stack
                      (/home/strick/6809):01581                  lda   1,s          get the number of characters to write
                      (/home/strick/6809):01582                  ENDC
                      (/home/strick/6809):01583         * A = number of bytes at $0180 to write out...
0762 8D02             (/home/strick/6809):01584                  bsr   do.grf       do the call
                      (/home/strick/6809):01585         * ignore errors : none possible from this particular call
0764 35F6             (/home/strick/6809):01586         call.out puls  d,x,y,u,pc   and return
                      (/home/strick/6809):01587         
                      (/home/strick/6809):01588         * this routine should always be called by a BSR, and grfdrv will use the
                      (/home/strick/6809):01589         * PC saved on-stack to return to the calling routine.
                      (/home/strick/6809):01590         * ALL REGISTERS WILL BE TRASHED
0766 10FF1007         (/home/strick/6809):01591         do.grf   sts   >WGlobal+G.GrfStk    stack pointer for GrfDrv
076A 10DEA7           (/home/strick/6809):01592                  lds   <D.CCStk     get new stack pointer
                      (/home/strick/6809):01593                  IFNE  H6309
076D 34F8             (/home/strick/6809):01594                  pshs  dp,x,y,u,pc
076F 1038             (/home/strick/6809):01595                  pshsw
0771 3407             (/home/strick/6809):01596                  pshs  cc,d         save all registers
                      (/home/strick/6809):01597                  ELSE
                      (/home/strick/6809):01598                  pshs  dp,cc,d,x,y,u,pc
                      (/home/strick/6809):01599                  ENDC
                      (/home/strick/6809):01600         
0773 BE106E           (/home/strick/6809):01601                  ldx   >WGlobal+G.GrfEnt     get GrfDrv entry address
                      (/home/strick/6809):01602         
0776 AF6C             (/home/strick/6809):01603                  stx   R$PC,s       save grfdrv entry address as PC on the stack
                      (/home/strick/6809):01604                  IFNE  H6309
0778 11A7E4           (/home/strick/6809):01605                  ste   R$CC,s       save CC onto CC on the stack
                      (/home/strick/6809):01606                  ELSE
                      (/home/strick/6809):01607                  stb   R$B,s
                      (/home/strick/6809):01608                  ldb   $017E
                      (/home/strick/6809):01609                  stb   R$CC,s
                      (/home/strick/6809):01610                  ENDC
077B 6E9F00AB         (/home/strick/6809):01611                  jmp   [>D.Flip1]   flip to grfdrv and execute it
                      (/home/strick/6809):01612                  ENDC
                      (/home/strick/6809):01613         
                      (/home/strick/6809):01614         * GrfDrv will execute function, and then call [D.Flip0] to return here. It 
                      (/home/strick/6809):01615         * will use an RTS to return to the code that called here in the first place
                      (/home/strick/6809):01616         * Only SP, PC & CC are set up - ALL OTHER REGISTERS MAY BE MODIFIED
                      (/home/strick/6809):01617         
                      (/home/strick/6809):01618         *         ELSE
                      (/home/strick/6809):01619         *
                      (/home/strick/6809):01620         *call.grf pshs  u,y,x,d
                      (/home/strick/6809):01621         *         tfr   cc,a
                      (/home/strick/6809):01622         *         orcc  #IntMasks+Entire
                      (/home/strick/6809):01623         *         ldx   #$0180
                      (/home/strick/6809):01624         *         sta   -2,x
                      (/home/strick/6809):01625         *call.lp  lda   ,u+
                      (/home/strick/6809):01626         *         sta   ,x+
                      (/home/strick/6809):01627         *         decb
                      (/home/strick/6809):01628         *         bne   call.lp
                      (/home/strick/6809):01629         *         stb   ,x
                      (/home/strick/6809):01630         *         lda   1,s
                      (/home/strick/6809):01631         *         bsr   do.grf
                      (/home/strick/6809):01632         *         puls  u,y,x,d,pc
                      (/home/strick/6809):01633         *
                      (/home/strick/6809):01634         *do.grf   sts   >$1007
                      (/home/strick/6809):01635         *         lds   <D.CCStk
                      (/home/strick/6809):01636         *         ldu   #$1100
                      (/home/strick/6809):01637         *         ldb   #$3A
                      (/home/strick/6809):01638         *         stb   >$1002
                      (/home/strick/6809):01639         *         stb   >$017F
                      (/home/strick/6809):01640         *         pshs  pc,u,y,x,dp,b,a,cc
                      (/home/strick/6809):01641         *         ldx   >$106E
                      (/home/strick/6809):01642         *         stx   R$PC,s
                      (/home/strick/6809):01643         *         ldb   >$107E
                      (/home/strick/6809):01644         *         stb   ,s
                      (/home/strick/6809):01645         *         jmp   [>D.Flip1]
                      (/home/strick/6809):01646         *         ENDC
                      (/home/strick/6809):01647         
077F 37392D           (/home/strick/6809):01648                  emod
     0782             (/home/strick/6809):01649         eom      equ   *
                      (/home/strick/6809):01650                  end
